  .file 1 "bootstrap/ReCode.code"
  .file 2 "bootstrap/code/compiler/Generator.code"
  .file 3 "bootstrap/code/compiler/IR_Builder.code"
  .file 4 "bootstrap/code/compiler/Counter.code"
  .file 5 "bootstrap/code/compiler/IR.code"
  .file 6 "bootstrap/code/compiler/IR_Values_Map.code"
  .file 7 "bootstrap/code/compiler/Parser.code"
  .file 8 "bootstrap/code/compiler/AST.code"
  .file 9 "bootstrap/code/compiler/Scanner.code"
  .file 10 "bootstrap/code/compiler/Token.code"
  .file 11 "bootstrap/code/compiler/Source.code"
  .file 12 "bootstrap/code/compiler/List.code"
  .file 13 "bootstrap/code/lang/Object.code"
  .file 14 "bootstrap/code/lang/String.code"
  .file 15 "bootstrap/code/core/Platform.code"

  .intel_syntax noprefix

  .loc 1 3 1
  .text
  .globl main
main:
main_1:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR main_1__stack_frame_size[rip]
  sub rsp, rax
.LABEL__main_1__1:
  # argc.1: Int = load_variable(argc)
  # [live values]: argc.1:rdi 
  # argv.1: @@Int8 = load_variable(argv)
  # [live values]: argc.1:rdi argv.1:rsi 
  .loc 1 4 9
  # $1.1: Boolean = argc.1 < 3
  cmp rdi, 3
  setl al
  # [live values]: argc.1:rdi argv.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__main_1__2, .LABEL__main_1__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__main_1__3
.LABEL__main_1__2:
  # stdout.2: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] stdout.2:stdout[rip] 
  .loc 1 5 9
  # $2.1: @FILE = call(write_332, stdout.2, "Usage:")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_0[rip] # "Usage:"
  call write_332
  # [discarded value]: stdout.2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 5 9
  # $3.1: @FILE = call(end_line_335, $2.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  # stdout.3: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] stdout.3:stdout[rip] 
  .loc 1 6 9
  # $4.1: @FILE = call(write_334, stdout.3, '\t')
  mov rdi, stdout[rip]
  mov sil, 9
  call write_334
  # [discarded value]: stdout.3
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 1 6 34
  # $5.1: @Int8 = load_array_item(argv.1, 0)
  mov rbx, [rbp-9]
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $4.1:rax $5.1:rbx 
  .loc 1 6 9
  # $6.1: @FILE = call(write_333, $4.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call write_333
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $6.1:rax 
  .loc 1 6 9
  # $7.1: @FILE = call(write_332, $6.1, " <INPUT FILE> <OUTPUT FILE>")
  mov rdi, rax
  lea rsi, .LABEL__string_1[rip] # " <INPUT FILE> <OUTPUT FILE>"
  call write_332
  # [discarded value]: $6.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $7.1:rax 
  .loc 1 6 9
  # $8.1: @FILE = call(end_line_335, $7.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  .loc 1 7 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__main_1__3:
  .loc 1 10 39
  # $9.1: @Int8 = load_array_item(argv.1, 1)
  mov rax, [rbp-9]
  add rax, 8
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $9.1:rax 
  .loc 1 10 25
  # source_file_path.1: @String = call(create_string_339, $9.1)
  mov rdi, rax
  call create_string_339
  # [discarded value]: $9.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:rax 
  .loc 1 11 9
  # $11.1: Boolean = call(ends_with_344, source_file_path.1, ".code")
  mov rdi, rax
  lea rsi, .LABEL__string_2[rip] # ".code"
  mov [rbp-25], rax
  call ends_with_344
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $11.1:rax 
  .loc 1 11 9
  # $12.1: Boolean = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:rbx 
  # jump($12.1, .LABEL__main_1__4, .LABEL__main_1__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__main_1__5
.LABEL__main_1__4:
  # stdout.4: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] stdout.4:stdout[rip] 
  .loc 1 12 9
  # $13.1: @FILE = call(write_332, stdout.4, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_332
  # [discarded value]: stdout.4
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $13.1:rax 
  .loc 1 12 9
  # $14.1: @FILE = call(write_332, $13.1, source_file_path.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call write_332
  # [discarded value]: $13.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $14.1:rax 
  .loc 1 12 9
  # $15.1: @FILE = call(write_332, $14.1, "' doesn't end with '.code'.")
  mov rdi, rax
  lea rsi, .LABEL__string_4[rip] # "' doesn't end with '.code'."
  call write_332
  # [discarded value]: $14.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $15.1:rax 
  .loc 1 12 9
  # $16.1: @FILE = call(end_line_335, $15.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
  .loc 1 13 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
.LABEL__main_1__5:
  .loc 1 16 39
  # $17.1: @Int8 = load_array_item(argv.1, 2)
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $17.1:rax 
  .loc 1 16 25
  # output_file_path.1: @String = call(create_string_339, $17.1)
  mov rdi, rax
  call create_string_339
  # [discarded value]: $17.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:rax 
  .loc 1 17 9
  # $19.1: Boolean = call(ends_with_344, output_file_path.1, ".s")
  mov rdi, rax
  lea rsi, .LABEL__string_5[rip] # ".s"
  mov [rbp-34], rax
  call ends_with_344
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $19.1:rax 
  .loc 1 17 9
  # $20.1: Boolean = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:rbx 
  # jump($20.1, .LABEL__main_1__6, .LABEL__main_1__7)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__main_1__7
.LABEL__main_1__6:
  # stdout.5: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] stdout.5:stdout[rip] 
  .loc 1 18 9
  # $21.1: @FILE = call(write_332, stdout.5, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_332
  # [discarded value]: stdout.5
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $21.1:rax 
  .loc 1 18 9
  # $22.1: @FILE = call(write_332, $21.1, output_file_path.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_332
  # [discarded value]: $21.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $22.1:rax 
  .loc 1 18 9
  # $23.1: @FILE = call(write_332, $22.1, "' doesn't end with '.s'.")
  mov rdi, rax
  lea rsi, .LABEL__string_6[rip] # "' doesn't end with '.s'."
  call write_332
  # [discarded value]: $22.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $23.1:rax 
  .loc 1 18 9
  # $24.1: @FILE = call(end_line_335, $23.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
  .loc 1 19 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
.LABEL__main_1__7:
  .loc 1 22 5
  # dump_file_path.1: @String = null
  xor rax, rax
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:rax 
  .loc 1 23 9
  # $25.1: Boolean = argc.1 >= 4
  cmp QWORD PTR [rbp-17], 4
  setge bl
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:rax $25.1:rbx 
  # jump($25.1, .LABEL__main_1__8, .LABEL__main_1__9)
  test bl, bl
  mov [rbp-43], rax
  mov [rbp-44], bl
  jz .LABEL__main_1__9
.LABEL__main_1__8:
  .loc 1 24 40
  # $26.1: @Int8 = load_array_item(argv.1, 3)
  mov rax, [rbp-9]
  add rax, 24
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] $26.1:rax 
  .loc 1 24 26
  # dump_file_path.2: @String = call(create_string_339, $26.1)
  mov rdi, rax
  call create_string_339
  # [discarded value]: $26.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:rax:[rbp-43] 
  .loc 1 25 13
  # $28.1: Boolean = call(ends_with_344, dump_file_path.2, ".ir")
  mov rdi, rax
  lea rsi, .LABEL__string_7[rip] # ".ir"
  mov [rbp-43], rax
  call ends_with_344
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $28.1:rax 
  .loc 1 25 13
  # $29.1: Boolean = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:rbx 
  # jump($29.1, .LABEL__main_1__10, .LABEL__main_1__9)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__main_1__9
.LABEL__main_1__10:
  # stdout.6: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] stdout.6:stdout[rip] 
  .loc 1 26 13
  # $30.1: @FILE = call(write_332, stdout.6, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_332
  # [discarded value]: stdout.6
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $30.1:rax 
  .loc 1 26 13
  # $31.1: @FILE = call(write_332, $30.1, dump_file_path.2)
  mov rdi, rax
  mov rsi, [rbp-43]
  call write_332
  # [discarded value]: $30.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $31.1:rax 
  .loc 1 26 13
  # $32.1: @FILE = call(write_332, $31.1, "' doesn't end with '.ir'.")
  mov rdi, rax
  lea rsi, .LABEL__string_8[rip] # "' doesn't end with '.ir'."
  call write_332
  # [discarded value]: $31.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $32.1:rax 
  .loc 1 26 13
  # $33.1: @FILE = call(end_line_335, $32.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
  .loc 1 27 13
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
.LABEL__main_1__9:
  # dump_file_path.4: @String = phi(dump_file_path.1, dump_file_path.2)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] 
  .loc 1 31 25
  # compilation_unit.1: @Compilation_Unit = call(parse_245, source_file_path.1)
  mov rdi, [rbp-25]
  call parse_245
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] compilation_unit.1:rax 
  .loc 1 34 14
  # build.1: @IR_Build = call(build_60, compilation_unit.1)
  mov rdi, rax
  call build_60
  # [discarded value]: compilation_unit.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:rax 
  .loc 1 35 9
  # $36.1: Boolean = dump_file_path.4 != null
  cmp QWORD PTR [rbp-43], 0
  setne bl
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:rax $36.1:rbx 
  # jump($36.1, .LABEL__main_1__12, .LABEL__main_1__13)
  test bl, bl
  mov [rbp-53], rax
  mov [rbp-54], bl
  jz .LABEL__main_1__13
.LABEL__main_1__12:
  .loc 1 36 28
  # $37.1: @Int8 = load_struct_member(dump_file_path.4, data)
  mov rax, [rbp-43]
  mov rbx, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:rax:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] $37.1:rbx 
  .loc 1 36 49
  # $38.1: @Int8 = load_struct_member("w", data)
  lea r15, .LABEL__string_9[rip] # "w"
  mov r14, [r15]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:rax:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] $37.1:rbx $38.1:r14 
  .loc 1 36 22
  # dump_file.1: @FILE = call(fopen, $37.1, $38.1)
  mov rdi, rbx
  mov rsi, r14
  call fopen
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] dump_file.1:rax 
  .loc 1 37 9
  # call(dump_61, build.1, dump_file.1)
  mov rdi, [rbp-53]
  mov rsi, rax
  mov [rbp-62], rax
  call dump_61
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] dump_file.1:[rbp-62] 
  .loc 1 38 9
  # $40.1: Int32 = call(fclose, dump_file.1)
  mov rdi, [rbp-62]
  call fclose
  # [discarded value]: $40.1
  # [discarded value]: dump_file.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # jump(.LABEL__main_1__13)
.LABEL__main_1__13:
  .loc 1 41 5
  # call(generate_2, build.1, output_file_path.1)
  mov rdi, [rbp-53]
  mov rsi, [rbp-34]
  call generate_2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # return()
  jmp .LABEL__main_1__end
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # [discarded value]: $36.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] 
  # [discarded value]: build.1
  # [discarded value]: dump_file_path.4
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
  # [discarded value]: $29.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] 
  # [discarded value]: dump_file_path.2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] 
  # [discarded value]: $25.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] 
  # [discarded value]: dump_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
  # [discarded value]: $20.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] 
  # [discarded value]: output_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
  # [discarded value]: $12.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] 
  # [discarded value]: source_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] 
  # [discarded value]: argv.1
  # [discarded value]: argc.1
  # [live values]: 
.LABEL__main_1__end:
  mov rsp, rbp
  pop rbp
  xor rax, rax
  ret

main_1__stack_frame_size: .word 64

  .loc 2 3 1
  .text
generate_2:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_2__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_2__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: build.1:rdi output_file_path.1:rsi 
  .loc 2 4 18
  # generator.1: @MC_Generator = call(create_mc_generator_35, output_file_path.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call create_mc_generator_35
  # [discarded value]: output_file_path.1
  # [live values]: build.1:[rbp-8] generator.1:rax 
  .loc 2 6 27
  # $2.1: @List = load_struct_member(build.1, sources)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax $2.1:r15 
  .loc 2 6 27
  # build_sources_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r14, [r15]
  # [discarded value]: $2.1
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax build_sources_item.1:r14 
  # jump(.LABEL__generate_2__2)
  mov [rbp-16], rax
  mov [rbp-24], r14
.LABEL__generate_2__2:
  # build_sources_item.2: @List_Item = phi(build_sources_item.1, build_sources_item.4)
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  .loc 2 7 12
  # $4.1: Boolean = build_sources_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__generate_2__3, .LABEL__generate_2__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_2__4
.LABEL__generate_2__3:
  .loc 2 8 25
  # build_source.1: @Source = load_struct_member(build_sources_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] $4.1:[rbp-25] build_source.1:rbx 
  .loc 2 9 9
  # $7.1: @FILE = load_struct_member(generator.1, output_file)
  mov r15, [rbp-16]
  mov r14, [r15+8]
  # [live values]: build.1:[rbp-8] generator.1:r15:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] $4.1:[rbp-25] build_source.1:rbx $7.1:r14 
  .loc 2 9 9
  # $8.1: @FILE = call(write_332, $7.1, "  .file ")
  mov rdi, r14
  lea rsi, .LABEL__string_10[rip] # "  .file "
  mov [rbp-33], rbx
  call write_332
  # [discarded value]: $7.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $8.1:rax 
  .loc 2 9 55
  # $9.1: Int = load_struct_member(build_source.1, id)
  mov rbx, [rbp-33]
  mov r15, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:rbx:[rbp-33] $8.1:rax $9.1:r15 
  .loc 2 9 9
  # $10.1: @FILE = call(write_331, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $10.1:rax 
  .loc 2 9 9
  # $11.1: @FILE = call(write_332, $10.1, " \"")
  mov rdi, rax
  lea rsi, .LABEL__string_11[rip] # " \""
  call write_332
  # [discarded value]: $10.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $11.1:rax 
  .loc 2 9 91
  # $12.1: @String = load_struct_member(build_source.1, file_path)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [discarded value]: build_source.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $11.1:rax $12.1:r15 
  .loc 2 9 9
  # $13.1: @FILE = call(write_332, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $13.1:rax 
  .loc 2 9 9
  # $14.1: @FILE = call(write_332, $13.1, "\"")
  mov rdi, rax
  lea rsi, .LABEL__string_12[rip] # "\""
  call write_332
  # [discarded value]: $13.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $14.1:rax 
  .loc 2 9 9
  # $15.1: @FILE = call(end_line_335, $14.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 10 30
  # build_sources_item.4: @List_Item = load_struct_member(build_sources_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_sources_item.4:rbx:[rbp-24] 
  # jump(.LABEL__generate_2__2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_2__2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_sources_item.4:[rbp-24] 
  # [discarded value]: build_sources_item.4
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
.LABEL__generate_2__4:
  .loc 2 13 5
  # $17.1: @FILE = load_struct_member(generator.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $17.1:rbx 
  .loc 2 13 5
  # $18.1: @FILE = call(write_line_330, $17.1, "  .intel_syntax noprefix")
  mov rdi, rbx
  lea rsi, .LABEL__string_13[rip] # "  .intel_syntax noprefix"
  call write_line_330
  # [discarded value]: $17.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $18.1:rax 
  .loc 2 13 5
  # $19.1: @FILE = call(end_line_335, $18.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 15 18
  # $20.1: @List = load_struct_member(build.1, named_functions)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $20.1:rbx 
  .loc 2 15 18
  # functions.1: @List_Iterator = call(create_iterator_324, $20.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $20.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:rax 
  # jump(.LABEL__generate_2__5)
  mov [rbp-33], rax
.LABEL__generate_2__5:
  .loc 2 16 12
  # $22.1: Boolean = call(has_next_327, functions.1)
  mov rdi, [rbp-33]
  call has_next_327
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:rax 
  # jump($22.1, .LABEL__generate_2__6, .LABEL__generate_2__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_2__7
.LABEL__generate_2__6:
  .loc 2 17 21
  # function.1: @IR_Function = call(next_328, functions.1)
  mov rdi, [rbp-33]
  call next_328
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] function.1:rax 
  .loc 2 18 13
  # $25.1: Boolean = load_struct_member(function.1, is_external)
  mov bl, [rax+56]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] function.1:rax $25.1:rbx 
  .loc 2 18 13
  # $26.1: Boolean = $25.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $25.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] function.1:rax $26.1:r15 
  # jump($26.1, .LABEL__generate_2__8, .LABEL__generate_2__5)
  test r15b, r15b
  mov [rbp-42], rax
  mov [rbp-43], r15b
  jz .LABEL__generate_2__5
.LABEL__generate_2__8:
  .loc 2 19 13
  # call(generate_function_3, generator.1, function.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-42]
  call generate_function_3
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] function.1:[rbp-42] $26.1:[rbp-43] 
  # jump(.LABEL__generate_2__5)
  jmp .LABEL__generate_2__5
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] function.1:[rbp-42] $26.1:[rbp-43] 
  # [discarded value]: $26.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] function.1:[rbp-42] 
  # [discarded value]: function.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] 
.LABEL__generate_2__7:
  .loc 2 23 5
  # call(generate_strings_56, generator.1)
  mov rdi, [rbp-16]
  call generate_strings_56
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] 
  .loc 2 25 37
  # $27.1: @List = load_struct_member(build.1, named_types)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] $27.1:rbx 
  .loc 2 25 5
  # call(generate_object_types_58, generator.1, $27.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_object_types_58
  # [discarded value]: $27.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] 
  .loc 2 27 5
  # $28.1: @FILE = load_struct_member(generator.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] $28.1:rbx 
  .loc 2 27 5
  # $29.1: Int32 = call(fclose, $28.1)
  mov rdi, rbx
  call fclose
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] 
  # return()
  jmp .LABEL__generate_2__end
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $22.1:[rbp-34] 
  # [discarded value]: $22.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] 
  # [discarded value]: functions.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [discarded value]: build_sources_item.2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [discarded value]: build_sources_item.1
  # [discarded value]: generator.1
  # [discarded value]: build.1
  # [live values]: 
.LABEL__generate_2__end:
  mov rsp, rbp
  pop rbp
  ret

generate_2__stack_frame_size: .word 48

  .loc 2 30 1
  .text
generate_function_3:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_function_3__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_function_3__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  .loc 2 31 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi function.1:rsi $1.1:rax 
  .loc 2 31 5
  # $2.1: @FILE = call(end_line_335, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_335
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 32 5
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $3.1:rbx 
  .loc 2 32 5
  # $4.1: @FILE = call(write_332, $3.1, "  .loc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_332
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax 
  .loc 2 32 45
  # $5.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $5.1:r15 
  .loc 2 32 45
  # $6.1: @Source = load_struct_member($5.1, source)
  mov r14, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $6.1:r14 
  .loc 2 32 45
  # $7.1: Int = load_struct_member($6.1, id)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $7.1:r15 
  .loc 2 32 5
  # $8.1: @FILE = call(write_331, $4.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $8.1:rax 
  .loc 2 32 5
  # $9.1: @FILE = call(write_334, $8.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax 
  .loc 2 32 91
  # $10.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $10.1:r15 
  .loc 2 32 91
  # $11.1: Int = load_struct_member($10.1, line)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $11.1:r14 
  .loc 2 32 5
  # $12.1: @FILE = call(write_331, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $12.1:rax 
  .loc 2 32 5
  # $13.1: @FILE = call(write_334, $12.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax 
  .loc 2 32 132
  # $14.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $14.1:r15 
  .loc 2 32 132
  # $15.1: Int = load_struct_member($14.1, column)
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $15.1:r14 
  .loc 2 32 5
  # $16.1: @FILE = call(write_331, $13.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $16.1:rax 
  .loc 2 32 5
  # $17.1: @FILE = call(end_line_335, $16.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 33 5
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $18.1:rbx 
  .loc 2 33 5
  # $19.1: @FILE = call(write_332, $18.1, "  .text")
  mov rdi, rbx
  lea rsi, .LABEL__string_15[rip] # "  .text"
  call write_332
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $19.1:rax 
  .loc 2 33 5
  # $20.1: @FILE = call(end_line_335, $19.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 34 9
  # $21.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $21.1:rbx 
  .loc 2 34 9
  # $22.1: Boolean = call(equals_341, $21.1, "main")
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_341
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:rax 
  # jump($22.1, .LABEL__generate_function_3__2, .LABEL__generate_function_3__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_function_3__3
.LABEL__generate_function_3__2:
  .loc 2 35 9
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $23.1:rbx 
  .loc 2 35 9
  # $24.1: @FILE = call(write_332, $23.1, "  .globl main")
  mov rdi, rbx
  lea rsi, .LABEL__string_17[rip] # "  .globl main"
  call write_332
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $24.1:rax 
  .loc 2 35 9
  # $25.1: @FILE = call(end_line_335, $24.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 36 9
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $26.1:rbx 
  .loc 2 36 9
  # $27.1: @FILE = call(write_332, $26.1, "main:")
  mov rdi, rbx
  lea rsi, .LABEL__string_18[rip] # "main:"
  call write_332
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $27.1:rax 
  .loc 2 36 9
  # $28.1: @FILE = call(end_line_335, $27.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # jump(.LABEL__generate_function_3__3)
.LABEL__generate_function_3__3:
  .loc 2 38 5
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $29.1:rbx 
  .loc 2 38 5
  # $30.1: @FILE = call(write_function_label_4, $29.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $30.1:rax 
  .loc 2 38 5
  # $31.1: @FILE = call(write_334, $30.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $31.1:rax 
  .loc 2 38 5
  # $32.1: @FILE = call(end_line_335, $31.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 39 5
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $33.1:rbx 
  .loc 2 39 5
  # $34.1: @FILE = call(write_332, $33.1, "  push rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_19[rip] # "  push rbp"
  call write_332
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $34.1:rax 
  .loc 2 39 5
  # $35.1: @FILE = call(end_line_335, $34.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 40 5
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $36.1:rbx 
  .loc 2 40 5
  # $37.1: @FILE = call(write_332, $36.1, "  mov rbp, rsp")
  mov rdi, rbx
  lea rsi, .LABEL__string_20[rip] # "  mov rbp, rsp"
  call write_332
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $37.1:rax 
  .loc 2 40 5
  # $38.1: @FILE = call(end_line_335, $37.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 41 5
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $39.1:rbx 
  .loc 2 41 5
  # $40.1: @FILE = call(write_332, $39.1, "  movsx rax, WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_21[rip] # "  movsx rax, WORD PTR "
  call write_332
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $40.1:rax 
  .loc 2 41 5
  # $41.1: @FILE = call(write_function_label_4, $40.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $41.1:rax 
  .loc 2 41 5
  # $42.1: @FILE = call(write_332, $41.1, "__stack_frame_size")
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_332
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $42.1:rax 
  .loc 2 41 5
  # $43.1: @FILE = call(write_332, $42.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_332
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $43.1:rax 
  .loc 2 41 5
  # $44.1: @FILE = call(end_line_335, $43.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 42 5
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $45.1:rbx 
  .loc 2 42 5
  # $46.1: @FILE = call(write_332, $45.1, "  sub rsp, rax")
  mov rdi, rbx
  lea rsi, .LABEL__string_24[rip] # "  sub rsp, rax"
  call write_332
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $46.1:rax 
  .loc 2 42 5
  # $47.1: @FILE = call(end_line_335, $46.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 44 15
  # $48.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] $48.1:rbx 
  .loc 2 44 15
  # blocks.1: @List_Iterator = call(create_iterator_324, $48.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:rax 
  # jump(.LABEL__generate_function_3__4)
  mov [rbp-25], rax
.LABEL__generate_function_3__4:
  .loc 2 45 12
  # $50.1: Boolean = call(has_next_327, blocks.1)
  mov rdi, [rbp-25]
  call has_next_327
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:rax 
  # jump($50.1, .LABEL__generate_function_3__5, .LABEL__generate_function_3__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_function_3__6
.LABEL__generate_function_3__5:
  .loc 2 46 18
  # block.1: @IR_Block = call(next_328, blocks.1)
  mov rdi, [rbp-25]
  call next_328
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block.1:rax 
  .loc 2 47 30
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:rbx 
  # jump(.LABEL__generate_function_3__7)
  mov [rbp-34], rbx
.LABEL__generate_function_3__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  .loc 2 48 16
  # $54.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:rax 
  # jump($54.1, .LABEL__generate_function_3__8, .LABEL__generate_function_3__4)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_function_3__4
.LABEL__generate_function_3__8:
  .loc 2 49 17
  # $55.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $54.1:[rbp-35] $55.1:rbx 
  .loc 2 49 17
  # $56.1: Boolean = $55.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $54.1:[rbp-35] $56.1:r15 
  # jump($56.1, .LABEL__generate_function_3__10, .LABEL__generate_function_3__11)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__generate_function_3__11
.LABEL__generate_function_3__10:
  .loc 2 50 17
  # call(create_mc_value_38, self.1, block_instruction.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-34]
  call create_mc_value_38
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_function_3__11)
.LABEL__generate_function_3__11:
  .loc 2 52 33
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] block_instruction.6:rbx:[rbp-34] 
  # jump(.LABEL__generate_function_3__7)
  mov [rbp-34], rbx
  jmp .LABEL__generate_function_3__7
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] block_instruction.6:[rbp-34] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
.LABEL__generate_function_3__6:
  .loc 2 56 25
  # $58.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $58.1:rbx 
  .loc 2 56 25
  # $60.1: @IR_Block = call(first_322, $58.1)
  mov rdi, rbx
  call first_322
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $60.1:rax 
  .loc 2 56 5
  # call(generate_block_7, self.1, $60.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_7
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 58 5
  # call(output_unreached_ir_instructions_6, self.1)
  mov rdi, [rbp-8]
  call output_unreached_ir_instructions_6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 60 5
  # $61.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $61.1:rbx 
  .loc 2 60 5
  # $62.1: @FILE = call(write_function_end_label_5, $61.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_end_label_5
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $62.1:rax 
  .loc 2 60 5
  # $63.1: @FILE = call(write_332, $62.1, ":")
  mov rdi, rax
  lea rsi, .LABEL__string_25[rip] # ":"
  call write_332
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $63.1:rax 
  .loc 2 60 5
  # $64.1: @FILE = call(end_line_335, $63.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 61 5
  # $65.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $65.1:rbx 
  .loc 2 61 5
  # $66.1: @FILE = call(write_332, $65.1, "  mov rsp, rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_26[rip] # "  mov rsp, rbp"
  call write_332
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $66.1:rax 
  .loc 2 61 5
  # $67.1: @FILE = call(end_line_335, $66.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 62 5
  # $68.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $68.1:rbx 
  .loc 2 62 5
  # $69.1: @FILE = call(write_332, $68.1, "  pop rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_27[rip] # "  pop rbp"
  call write_332
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $69.1:rax 
  .loc 2 62 5
  # $70.1: @FILE = call(end_line_335, $69.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 63 9
  # $71.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $71.1:rbx 
  .loc 2 63 9
  # $73.1: Boolean = call(equals_341, $71.1, "main")
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_341
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:rax 
  # jump($73.1, .LABEL__generate_function_3__12, .LABEL__generate_function_3__13)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_function_3__13
.LABEL__generate_function_3__12:
  .loc 2 63 41
  # $74.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $74.1:rbx 
  # IR_Nothing_Type.2: @Object_Type = load_variable(IR_Nothing_Type)
  lea r15, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $74.1:rbx IR_Nothing_Type.2:r15 
  .loc 2 63 41
  # $73.2: Boolean = call(is_338, $74.1, IR_Nothing_Type.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Nothing_Type.2
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:rax:[rbp-27] 
  # jump(.LABEL__generate_function_3__13)
  mov [rbp-27], al
.LABEL__generate_function_3__13:
  .loc 2 63 9
  # $73.3: Boolean = phi($73.1, $73.2)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # jump($73.3, .LABEL__generate_function_3__14, .LABEL__generate_function_3__15)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__generate_function_3__15
.LABEL__generate_function_3__14:
  .loc 2 64 9
  # $76.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $76.1:rbx 
  .loc 2 64 9
  # $77.1: @FILE = call(write_332, $76.1, "  xor rax, rax")
  mov rdi, rbx
  lea rsi, .LABEL__string_28[rip] # "  xor rax, rax"
  call write_332
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $77.1:rax 
  .loc 2 64 9
  # $78.1: @FILE = call(end_line_335, $77.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $78.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # jump(.LABEL__generate_function_3__15)
.LABEL__generate_function_3__15:
  .loc 2 66 5
  # $79.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $79.1:rbx 
  .loc 2 66 5
  # $80.1: @FILE = call(write_332, $79.1, "  ret")
  mov rdi, rbx
  lea rsi, .LABEL__string_29[rip] # "  ret"
  call write_332
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $80.1:rax 
  .loc 2 66 5
  # $81.1: @FILE = call(end_line_335, $80.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $81.1:rax 
  .loc 2 66 5
  # $82.1: @FILE = call(end_line_335, $81.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  .loc 2 68 25
  # stack_frame_size.1: Int = load_struct_member(self.1, stack_frame_size)
  mov rax, [rbp-8]
  mov rbx, [rax+161]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx 
  .loc 2 69 9
  # $84.1: Int = stack_frame_size.1 // 16
  mov rax, rbx
  cqto
  mov r15, 16
  idiv r15
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx $84.1:rdx 
  .loc 2 69 9
  # $85.1: Boolean = $84.1 != 0
  cmp rdx, 0
  setne al
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx $85.1:rax 
  # jump($85.1, .LABEL__generate_function_3__16, .LABEL__generate_function_3__17)
  test al, al
  mov [rbp-28], al
  mov [rbp-36], rbx
  jz .LABEL__generate_function_3__17
.LABEL__generate_function_3__16:
  .loc 2 70 28
  # $86.1: Int = stack_frame_size.1 + 16
  mov rax, [rbp-36]
  add rax, 16
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $86.1:rax 
  .loc 2 70 52
  # $87.1: Int = stack_frame_size.1 // 16
  mov [rbp-44], rax
  mov rax, [rbp-36]
  cqto
  mov rbx, 16
  idiv rbx
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $86.1:[rbp-44] $87.1:rdx 
  .loc 2 70 28
  # stack_frame_size.3: Int = $86.1 - $87.1
  mov rax, [rbp-44]
  sub rax, rdx
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:rax:[rbp-36] 
  # jump(.LABEL__generate_function_3__17)
  mov [rbp-36], rax
.LABEL__generate_function_3__17:
  # stack_frame_size.4: Int = phi(stack_frame_size.1, stack_frame_size.3)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] 
  .loc 2 72 5
  # $89.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $89.1:rbx 
  .loc 2 72 5
  # $90.1: @FILE = call(write_function_label_4, $89.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $90.1:rax 
  .loc 2 72 5
  # $91.1: @FILE = call(write_332, $90.1, "__stack_frame_size")
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_332
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $91.1:rax 
  .loc 2 72 5
  # $92.1: @FILE = call(write_332, $91.1, ": .word ")
  mov rdi, rax
  lea rsi, .LABEL__string_30[rip] # ": .word "
  call write_332
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $92.1:rax 
  .loc 2 72 5
  # $93.1: @FILE = call(write_331, $92.1, stack_frame_size.4)
  mov rdi, rax
  mov rsi, [rbp-36]
  call write_331
  # [discarded value]: $92.1
  # [discarded value]: stack_frame_size.4
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] $93.1:rax 
  .loc 2 72 5
  # $94.1: @FILE = call(end_line_335, $93.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $94.1
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  .loc 2 74 5
  # call(reset_36, self.1)
  mov rdi, [rbp-8]
  call reset_36
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # return()
  jmp .LABEL__generate_function_3__end
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # [discarded value]: stack_frame_size.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] 
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] 
  # [discarded value]: stack_frame_size.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # [discarded value]: $73.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] 
  # [discarded value]: $73.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] 
  # [discarded value]: blocks.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [discarded value]: function.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_function_3__end:
  mov rsp, rbp
  pop rbp
  ret

generate_function_3__stack_frame_size: .word 48

  .loc 2 77 1
  .text
write_function_label_4:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_label_4__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_label_4__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  .loc 2 78 16
  # $1.1: @String = load_struct_member(function.1, name)
  mov rax, [rsi+24]
  # [live values]: file.1:rdi function.1:rsi $1.1:rax 
  .loc 2 78 5
  # $2.1: @FILE = call(write_332, file.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call write_332
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  .loc 2 79 9
  # $3.1: Boolean = load_struct_member(function.1, is_external)
  mov rax, [rbp-8]
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 79 9
  # $4.1: Boolean = $3.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $4.1:r15 
  # jump($4.1, .LABEL__write_function_label_4__2, .LABEL__write_function_label_4__3)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__write_function_label_4__3
.LABEL__write_function_label_4__2:
  .loc 2 80 9
  # $5.1: @FILE = call(write_334, file.1, '_')
  mov rdi, [rbp-16]
  mov sil, 95
  call write_334
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] $5.1:rax 
  .loc 2 80 31
  # $6.1: Int = load_struct_member(function.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-16] function.1:rbx:[rbp-8] $4.1:[rbp-17] $5.1:rax $6.1:r15 
  .loc 2 80 9
  # $7.1: @FILE = call(write_331, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # jump(.LABEL__write_function_label_4__3)
.LABEL__write_function_label_4__3:
  .loc 2 82 5
  # return(file.1)
  mov rax, [rbp-16]
  jmp .LABEL__write_function_label_4__end
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # [discarded value]: function.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_function_label_4__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_label_4__stack_frame_size: .word 32

  .loc 2 85 1
  .text
write_function_end_label_5:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_end_label_5__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_end_label_5__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  .loc 2 86 12
  # $1.1: @FILE = call(write_332, file.1, ".LABEL__")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_332
  # [discarded value]: file.1
  # [live values]: function.1:[rbp-8] $1.1:rax 
  .loc 2 86 12
  # $2.1: @FILE = call(write_function_label_4, $1.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_function_label_4
  # [discarded value]: $1.1
  # [discarded value]: function.1
  # [live values]: $2.1:rax 
  .loc 2 86 12
  # $3.1: @FILE = call(write_332, $2.1, "__")
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "__"
  call write_332
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  .loc 2 86 12
  # $4.1: @FILE = call(write_332, $3.1, "end")
  mov rdi, rax
  lea rsi, .LABEL__string_33[rip] # "end"
  call write_332
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 2 86 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__write_function_end_label_5__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__write_function_end_label_5__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_end_label_5__stack_frame_size: .word 16

  .loc 2 89 1
  .text
output_unreached_ir_instructions_6:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_unreached_ir_instructions_6__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_unreached_ir_instructions_6__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 90 9
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov al, [rdi+16]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 90 9
  # $2.1: Boolean = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__output_unreached_ir_instructions_6__2, .LABEL__output_unreached_ir_instructions_6__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__output_unreached_ir_instructions_6__3
.LABEL__output_unreached_ir_instructions_6__2:
  .loc 2 91 9
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__output_unreached_ir_instructions_6__3:
  .loc 2 93 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-9]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__output_unreached_ir_instructions_6__5)
  mov [rbp-17], rbx
.LABEL__output_unreached_ir_instructions_6__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] 
  .loc 2 94 12
  # $4.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-17], 0
  setne al
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__output_unreached_ir_instructions_6__6, .LABEL__output_unreached_ir_instructions_6__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__output_unreached_ir_instructions_6__7
.LABEL__output_unreached_ir_instructions_6__6:
  .loc 2 95 32
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-17]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 2 95 32
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  mov r15, [rbx+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] $6.1:r15 
  .loc 2 95 32
  # ir_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:rbx 
  # jump(.LABEL__output_unreached_ir_instructions_6__8)
  mov [rbp-26], rbx
.LABEL__output_unreached_ir_instructions_6__8:
  # ir_instruction_item.2: @List_Item = phi(ir_instruction_item.1, ir_instruction_item.5)
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] 
  .loc 2 96 16
  # $8.1: Boolean = ir_instruction_item.2 != null
  cmp QWORD PTR [rbp-26], 0
  setne al
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:rax 
  # jump($8.1, .LABEL__output_unreached_ir_instructions_6__9, .LABEL__output_unreached_ir_instructions_6__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__output_unreached_ir_instructions_6__10
.LABEL__output_unreached_ir_instructions_6__9:
  .loc 2 97 31
  # ir_instruction.1: @IR_Instruction = load_struct_member(ir_instruction_item.2, data)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx 
  .loc 2 98 17
  # $11.1: Boolean = load_struct_member(ir_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx $11.1:r15 
  .loc 2 98 17
  # $12.1: Boolean = $11.1 == false
  cmp r15b, 0
  sete r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx $12.1:r14 
  # jump($12.1, .LABEL__output_unreached_ir_instructions_6__11, .LABEL__output_unreached_ir_instructions_6__12)
  test r14b, r14b
  mov [rbp-35], rbx
  mov [rbp-36], r14b
  jz .LABEL__output_unreached_ir_instructions_6__12
.LABEL__output_unreached_ir_instructions_6__11:
  .loc 2 99 17
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(ir_instruction.1, dump)
  mov rax, [rbp-35]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rax:[rbp-35] $12.1:[rbp-36] $13.1:rbx 
  .loc 2 99 37
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-9]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rax:[rbp-35] $12.1:[rbp-36] $13.1:rbx $14.1:r14 
  .loc 2 99 17
  # $15.1: @FILE = call($13.1, ir_instruction.1, $14.1, "  # [unreachable instruction]: ")
  mov rdi, rax
  mov rsi, r14
  lea rdx, .LABEL__string_34[rip] # "  # [unreachable instruction]: "
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # jump(.LABEL__output_unreached_ir_instructions_6__12)
.LABEL__output_unreached_ir_instructions_6__12:
  .loc 2 101 35
  # ir_instruction_item.5: @List_Item = load_struct_member(ir_instruction_item.2, next_item)
  mov rax, [rbp-26]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] ir_instruction_item.5:rbx:[rbp-26] 
  # jump(.LABEL__output_unreached_ir_instructions_6__8)
  mov [rbp-26], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__8
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] ir_instruction_item.5:[rbp-26] 
  # [discarded value]: ir_instruction_item.5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] 
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] 
.LABEL__output_unreached_ir_instructions_6__10:
  .loc 2 103 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] mc_value.5:rbx:[rbp-17] 
  # jump(.LABEL__output_unreached_ir_instructions_6__5)
  mov [rbp-17], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] mc_value.5:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] 
  # [discarded value]: ir_instruction_item.2
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] 
  # [discarded value]: ir_instruction_item.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] 
.LABEL__output_unreached_ir_instructions_6__7:
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_unreached_ir_instructions_6__end:
  mov rsp, rbp
  pop rbp
  ret

output_unreached_ir_instructions_6__stack_frame_size: .word 48

  .loc 2 107 1
  .text
generate_block_7:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_block_7__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_block_7__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  .loc 2 108 5
  # store_struct_member(block.1, is_being_generated, true)
  mov BYTE PTR [rsi+48], 1
  # [live values]: self.1:rdi block.1:rsi 
  .loc 2 109 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi block.1:rsi $1.1:rax 
  .loc 2 109 5
  # $2.1: @FILE = call(write_block_label_8, $1.1, block.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call write_block_label_8
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $2.1:rax 
  .loc 2 109 5
  # $3.1: @FILE = call(write_334, $2.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $3.1:rax 
  .loc 2 109 5
  # $4.1: @FILE = call(end_line_335, $3.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  .loc 2 110 26
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:rbx 
  # jump(.LABEL__generate_block_7__2)
  mov [rbp-24], rbx
.LABEL__generate_block_7__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.8)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  .loc 2 111 12
  # $6.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:rax 
  # jump($6.1, .LABEL__generate_block_7__3, .LABEL__generate_block_7__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_block_7__4
.LABEL__generate_block_7__3:
  .loc 2 112 9
  # call(generate_instruction_9, self.1, block_instruction.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call generate_instruction_9
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  # IR_Load_Variable_Instruction.2: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] IR_Load_Variable_Instruction.2:rax 
  .loc 2 113 13
  # $7.1: Boolean = call(is_338, block_instruction.2, IR_Load_Variable_Instruction.2)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Load_Variable_Instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $7.1:rax 
  .loc 2 113 13
  # $9.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:rbx 
  # jump($9.1, .LABEL__generate_block_7__7, .LABEL__generate_block_7__8)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_block_7__8
.LABEL__generate_block_7__7:
  .loc 2 113 76
  # $10.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $10.1:rbx 
  .loc 2 113 76
  # $9.2: Boolean = $10.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:r15:[rbp-26] 
  # jump(.LABEL__generate_block_7__8)
  mov [rbp-26], r15b
.LABEL__generate_block_7__8:
  .loc 2 113 13
  # $12.1: Boolean = phi($9.1, $9.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:rax 
  # jump($12.1, .LABEL__generate_block_7__5, .LABEL__generate_block_7__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_block_7__6
.LABEL__generate_block_7__5:
  .loc 2 113 118
  # $13.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $13.1:rbx $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 113 118
  # $14.1: @IR_Variable = load_struct_member($13.1, variable)
  mov r15, [rbx+32]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $14.1:r15 $9.2:[rbp-26] $12.1:[rbp-27] 
  # IR_Global_Variable.2: @Object_Type = load_variable(IR_Global_Variable)
  lea rbx, IR_Global_Variable[rip]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $14.1:r15 IR_Global_Variable.2:rbx $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 113 118
  # $12.2: Boolean = call(is_338, $14.1, IR_Global_Variable.2)
  mov rdi, r15
  mov rsi, rbx
  call is_338
  # [discarded value]: IR_Global_Variable.2
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:rax:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_block_7__6)
  mov [rbp-27], al
.LABEL__generate_block_7__6:
  .loc 2 113 13
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump($12.3, .LABEL__generate_block_7__9, .LABEL__generate_block_7__10)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__generate_block_7__10
.LABEL__generate_block_7__9:
  .loc 2 114 55
  # $16.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] $16.1:rbx 
  .loc 2 114 40
  # $17.1: @MC_Value = call(get_value_41, self.1, $16.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_41
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] $17.1:rax 
  .loc 2 114 13
  # call(spill_global_variable_44, self.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call spill_global_variable_44
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_block_7__10)
.LABEL__generate_block_7__10:
  .loc 2 116 9
  # $18.1: Int = call(discard_used_values_47, self.1)
  mov rdi, [rbp-8]
  call discard_used_values_47
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 117 9
  # call(output_live_values_48, self.1)
  mov rdi, [rbp-8]
  call output_live_values_48
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 118 9
  # call(output_used_registers_50, self.1)
  mov rdi, [rbp-8]
  call output_used_registers_50
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 119 29
  # block_instruction.8: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-24]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] block_instruction.8:rbx:[rbp-24] 
  # jump(.LABEL__generate_block_7__2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_block_7__2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] block_instruction.8:[rbp-24] 
  # [discarded value]: block_instruction.8
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
.LABEL__generate_block_7__4:
  .loc 2 121 5
  # store_struct_member(block.1, is_generated, true)
  mov rax, [rbp-16]
  mov BYTE PTR [rax+49], 1
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  .loc 2 122 9
  # $20.1: Int = call(discard_used_values_47, self.1)
  mov rdi, [rbp-8]
  call discard_used_values_47
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $20.1:rax 
  .loc 2 122 9
  # $21.1: Boolean = $20.1 > 0
  cmp rax, 0
  setg bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:rbx 
  # jump($21.1, .LABEL__generate_block_7__11, .LABEL__generate_block_7__12)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_block_7__12
.LABEL__generate_block_7__11:
  .loc 2 123 9
  # call(output_live_values_48, self.1)
  mov rdi, [rbp-8]
  call output_live_values_48
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  .loc 2 124 9
  # call(output_used_registers_50, self.1)
  mov rdi, [rbp-8]
  call output_used_registers_50
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # jump(.LABEL__generate_block_7__12)
.LABEL__generate_block_7__12:
  # return()
  jmp .LABEL__generate_block_7__end
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_block_7__end:
  mov rsp, rbp
  pop rbp
  ret

generate_block_7__stack_frame_size: .word 32

  .loc 2 128 1
  .text
write_block_label_8:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_block_label_8__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_block_label_8__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: file.1:rdi block.1:rsi 
  .loc 2 129 12
  # $1.1: @FILE = call(write_332, file.1, ".LABEL__")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_332
  # [discarded value]: file.1
  # [live values]: block.1:[rbp-8] $1.1:rax 
  .loc 2 129 41
  # $2.1: @IR_Function = load_struct_member(block.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  .loc 2 129 41
  # $3.1: @String = load_struct_member($2.1, name)
  mov r14, [r15+24]
  # [discarded value]: $2.1
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $3.1:r14 
  .loc 2 129 12
  # $4.1: @FILE = call(write_332, $1.1, $3.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: block.1:[rbp-8] $4.1:rax 
  .loc 2 129 12
  # $5.1: @FILE = call(write_334, $4.1, '_')
  mov rdi, rax
  mov sil, 95
  call write_334
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] $5.1:rax 
  .loc 2 129 79
  # $6.1: @IR_Function = load_struct_member(block.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $6.1:r15 
  .loc 2 129 79
  # $7.1: Int = load_struct_member($6.1, id)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $7.1:r14 
  .loc 2 129 12
  # $8.1: @FILE = call(write_331, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: block.1:[rbp-8] $8.1:rax 
  .loc 2 129 12
  # $9.1: @FILE = call(write_332, $8.1, "__")
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "__"
  call write_332
  # [discarded value]: $8.1
  # [live values]: block.1:[rbp-8] $9.1:rax 
  .loc 2 129 116
  # $10.1: Int = load_struct_member(block.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: block.1
  # [live values]: $9.1:rax $10.1:r15 
  .loc 2 129 12
  # $11.1: @FILE = call(write_331, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 2 129 5
  # return($11.1)
  mov [rbp-8], rax
  jmp .LABEL__write_block_label_8__end
  # [discarded value]: $11.1
  # [live values]: 
.LABEL__write_block_label_8__end:
  mov rsp, rbp
  pop rbp
  ret

write_block_label_8__stack_frame_size: .word 16

  .loc 2 132 1
  .text
generate_instruction_9:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_instruction_9__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_instruction_9__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 133 9
  # $1.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 133 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__generate_instruction_9__2, .LABEL__generate_instruction_9__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__generate_instruction_9__3
.LABEL__generate_instruction_9__2:
  .loc 2 134 9
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 134 9
  # $4.1: @FILE = call(write_332, $3.1, "  .loc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_332
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  .loc 2 134 49
  # $5.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $5.1:r15 
  .loc 2 134 49
  # $6.1: @Source = load_struct_member($5.1, source)
  mov r14, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $6.1:r14 
  .loc 2 134 49
  # $7.1: Int = load_struct_member($6.1, id)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $7.1:r15 
  .loc 2 134 9
  # $8.1: @FILE = call(write_331, $4.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $8.1:rax 
  .loc 2 134 9
  # $9.1: @FILE = call(write_334, $8.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $9.1:rax 
  .loc 2 134 98
  # $10.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $9.1:rax $10.1:r15 
  .loc 2 134 98
  # $11.1: Int = load_struct_member($10.1, line)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $9.1:rax $11.1:r14 
  .loc 2 134 9
  # $12.1: @FILE = call(write_331, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $12.1:rax 
  .loc 2 134 9
  # $13.1: @FILE = call(write_334, $12.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $13.1:rax 
  .loc 2 134 142
  # $14.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $13.1:rax $14.1:r15 
  .loc 2 134 142
  # $15.1: Int = load_struct_member($14.1, column)
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $13.1:rax $15.1:r14 
  .loc 2 134 9
  # $16.1: @FILE = call(write_331, $13.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 2 134 9
  # $17.1: @FILE = call(end_line_335, $16.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__generate_instruction_9__3)
.LABEL__generate_instruction_9__3:
  .loc 2 136 9
  # $18.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov rax, [rbp-17]
  mov bl, [rax+16]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:rbx 
  # jump($18.1, .LABEL__generate_instruction_9__4, .LABEL__generate_instruction_9__5)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__generate_instruction_9__5
.LABEL__generate_instruction_9__4:
  .loc 2 137 9
  # $19.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(instruction.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $19.1:rbx 
  .loc 2 137 26
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-17]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $19.1:rbx $20.1:r14 
  .loc 2 137 9
  # $21.1: @FILE = call($19.1, instruction.1, $20.1, "  # ")
  mov rdi, rax
  mov rsi, r14
  lea rdx, .LABEL__string_35[rip] # "  # "
  mov rax, rbx
  call rax
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # jump(.LABEL__generate_instruction_9__5)
.LABEL__generate_instruction_9__5:
  # IR_Add_Instruction.2: @Object_Type = load_variable(IR_Add_Instruction)
  lea rax, IR_Add_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] IR_Add_Instruction.2:rax 
  .loc 2 139 9
  # $22.1: Boolean = call(is_338, instruction.1, IR_Add_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Add_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:rax 
  # jump($22.1, .LABEL__generate_instruction_9__6, .LABEL__generate_instruction_9__8)
  test al, al
  mov [rbp-19], al
  jz .LABEL__generate_instruction_9__8
.LABEL__generate_instruction_9__6:
  .loc 2 140 39
  # $65.1: @IR_Add_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $65.1:rax 
  .loc 2 140 9
  # call(generate_add_instruction_10, self.1, $65.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_add_instruction_10
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # jump(.LABEL__generate_instruction_9__7)
.LABEL__generate_instruction_9__7:
  .loc 2 182 5
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # return()
  jmp .LABEL__generate_instruction_9__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
.LABEL__generate_instruction_9__8:
  # IR_Call_Instruction.2: @Object_Type = load_variable(IR_Call_Instruction)
  lea rax, IR_Call_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] IR_Call_Instruction.2:rax 
  .loc 2 141 16
  # $23.1: Boolean = call(is_338, instruction.1, IR_Call_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Call_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:rax 
  # jump($23.1, .LABEL__generate_instruction_9__9, .LABEL__generate_instruction_9__11)
  test al, al
  mov [rbp-20], al
  jz .LABEL__generate_instruction_9__11
.LABEL__generate_instruction_9__9:
  .loc 2 142 40
  # $64.1: @IR_Call_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $64.1:rax 
  .loc 2 142 9
  # call(generate_call_instruction_11, self.1, $64.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_call_instruction_11
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
.LABEL__generate_instruction_9__11:
  # IR_Cast_Instruction.2: @Object_Type = load_variable(IR_Cast_Instruction)
  lea rax, IR_Cast_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] IR_Cast_Instruction.2:rax 
  .loc 2 143 16
  # $24.1: Boolean = call(is_338, instruction.1, IR_Cast_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Cast_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:rax 
  # jump($24.1, .LABEL__generate_instruction_9__12, .LABEL__generate_instruction_9__14)
  test al, al
  mov [rbp-21], al
  jz .LABEL__generate_instruction_9__14
.LABEL__generate_instruction_9__12:
  .loc 2 144 40
  # $63.1: @IR_Cast_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $63.1:rax 
  .loc 2 144 9
  # call(generate_cast_instruction_12, self.1, $63.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_cast_instruction_12
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
.LABEL__generate_instruction_9__14:
  # IR_Conditional_Jump_Instruction.2: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea rax, IR_Conditional_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] IR_Conditional_Jump_Instruction.2:rax 
  .loc 2 145 16
  # $25.1: Boolean = call(is_338, instruction.1, IR_Conditional_Jump_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Conditional_Jump_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:rax 
  # jump($25.1, .LABEL__generate_instruction_9__15, .LABEL__generate_instruction_9__17)
  test al, al
  mov [rbp-22], al
  jz .LABEL__generate_instruction_9__17
.LABEL__generate_instruction_9__15:
  .loc 2 146 52
  # $62.1: @IR_Conditional_Jump_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $62.1:rax 
  .loc 2 146 9
  # call(generate_conditional_jump_instruction_13, self.1, $62.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_conditional_jump_instruction_13
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
.LABEL__generate_instruction_9__17:
  # IR_Comparison_Instruction.2: @Object_Type = load_variable(IR_Comparison_Instruction)
  lea rax, IR_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] IR_Comparison_Instruction.2:rax 
  .loc 2 147 16
  # $26.1: Boolean = call(is_338, instruction.1, IR_Comparison_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Comparison_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:rax 
  # jump($26.1, .LABEL__generate_instruction_9__18, .LABEL__generate_instruction_9__20)
  test al, al
  mov [rbp-23], al
  jz .LABEL__generate_instruction_9__20
.LABEL__generate_instruction_9__18:
  .loc 2 148 46
  # $61.1: @IR_Comparison_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $61.1:rax 
  .loc 2 148 9
  # call(generate_comparison_instruction_14, self.1, $61.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_comparison_instruction_14
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
.LABEL__generate_instruction_9__20:
  # IR_Direct_Jump_Instruction.2: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rax, IR_Direct_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] IR_Direct_Jump_Instruction.2:rax 
  .loc 2 149 16
  # $27.1: Boolean = call(is_338, instruction.1, IR_Direct_Jump_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Direct_Jump_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:rax 
  # jump($27.1, .LABEL__generate_instruction_9__21, .LABEL__generate_instruction_9__23)
  test al, al
  mov [rbp-24], al
  jz .LABEL__generate_instruction_9__23
.LABEL__generate_instruction_9__21:
  .loc 2 150 47
  # $60.1: @IR_Direct_Jump_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $60.1:rax 
  .loc 2 150 9
  # call(generate_direct_jump_instruction_15, self.1, $60.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_direct_jump_instruction_15
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
.LABEL__generate_instruction_9__23:
  # IR_Divide_Instruction.2: @Object_Type = load_variable(IR_Divide_Instruction)
  lea rax, IR_Divide_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] IR_Divide_Instruction.2:rax 
  .loc 2 151 16
  # $28.1: Boolean = call(is_338, instruction.1, IR_Divide_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Divide_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:rax 
  # jump($28.1, .LABEL__generate_instruction_9__24, .LABEL__generate_instruction_9__26)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_instruction_9__26
.LABEL__generate_instruction_9__24:
  .loc 2 152 42
  # $59.1: @IR_Divide_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $59.1:rax 
  .loc 2 152 9
  # call(generate_divide_instruction_16, self.1, $59.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_divide_instruction_16
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
.LABEL__generate_instruction_9__26:
  # IR_Load_Array_Item_Instruction.2: @Object_Type = load_variable(IR_Load_Array_Item_Instruction)
  lea rax, IR_Load_Array_Item_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] IR_Load_Array_Item_Instruction.2:rax 
  .loc 2 153 16
  # $29.1: Boolean = call(is_338, instruction.1, IR_Load_Array_Item_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Load_Array_Item_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:rax 
  # jump($29.1, .LABEL__generate_instruction_9__27, .LABEL__generate_instruction_9__29)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_instruction_9__29
.LABEL__generate_instruction_9__27:
  .loc 2 154 51
  # $58.1: @IR_Load_Array_Item_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $58.1:rax 
  .loc 2 154 9
  # call(generate_load_array_item_instruction_17, self.1, $58.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_array_item_instruction_17
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
.LABEL__generate_instruction_9__29:
  # IR_Load_Function_Address_Instruction.2: @Object_Type = load_variable(IR_Load_Function_Address_Instruction)
  lea rax, IR_Load_Function_Address_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] IR_Load_Function_Address_Instruction.2:rax 
  .loc 2 155 16
  # $30.1: Boolean = call(is_338, instruction.1, IR_Load_Function_Address_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Load_Function_Address_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:rax 
  # jump($30.1, .LABEL__generate_instruction_9__30, .LABEL__generate_instruction_9__32)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_instruction_9__32
.LABEL__generate_instruction_9__30:
  .loc 2 156 57
  # $57.1: @IR_Load_Function_Address_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $57.1:rax 
  .loc 2 156 9
  # call(generate_load_function_address_instruction_18, self.1, $57.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_function_address_instruction_18
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
.LABEL__generate_instruction_9__32:
  # IR_Load_Struct_Member_Instruction.2: @Object_Type = load_variable(IR_Load_Struct_Member_Instruction)
  lea rax, IR_Load_Struct_Member_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] IR_Load_Struct_Member_Instruction.2:rax 
  .loc 2 157 16
  # $31.1: Boolean = call(is_338, instruction.1, IR_Load_Struct_Member_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Load_Struct_Member_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:rax 
  # jump($31.1, .LABEL__generate_instruction_9__33, .LABEL__generate_instruction_9__35)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_instruction_9__35
.LABEL__generate_instruction_9__33:
  .loc 2 158 54
  # $56.1: @IR_Load_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $56.1:rax 
  .loc 2 158 9
  # call(generate_load_struct_member_instruction_20, self.1, $56.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_struct_member_instruction_20
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
.LABEL__generate_instruction_9__35:
  # IR_Load_Variable_Instruction.3: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] IR_Load_Variable_Instruction.3:rax 
  .loc 2 159 16
  # $32.1: Boolean = call(is_338, instruction.1, IR_Load_Variable_Instruction.3)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Load_Variable_Instruction.3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:rax 
  # jump($32.1, .LABEL__generate_instruction_9__36, .LABEL__generate_instruction_9__38)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_instruction_9__38
.LABEL__generate_instruction_9__36:
  .loc 2 160 49
  # $55.1: @IR_Load_Variable_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $55.1:rax 
  .loc 2 160 9
  # call(generate_load_variable_instruction_19, self.1, $55.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_variable_instruction_19
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
.LABEL__generate_instruction_9__38:
  # IR_Modulo_Instruction.2: @Object_Type = load_variable(IR_Modulo_Instruction)
  lea rax, IR_Modulo_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] IR_Modulo_Instruction.2:rax 
  .loc 2 161 16
  # $33.1: Boolean = call(is_338, instruction.1, IR_Modulo_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Modulo_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:rax 
  # jump($33.1, .LABEL__generate_instruction_9__39, .LABEL__generate_instruction_9__41)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_instruction_9__41
.LABEL__generate_instruction_9__39:
  .loc 2 162 42
  # $54.1: @IR_Modulo_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $54.1:rax 
  .loc 2 162 9
  # call(generate_modulo_instruction_21, self.1, $54.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_modulo_instruction_21
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
.LABEL__generate_instruction_9__41:
  # IR_Multiply_Instruction.2: @Object_Type = load_variable(IR_Multiply_Instruction)
  lea rax, IR_Multiply_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] IR_Multiply_Instruction.2:rax 
  .loc 2 163 16
  # $34.1: Boolean = call(is_338, instruction.1, IR_Multiply_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Multiply_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:rax 
  # jump($34.1, .LABEL__generate_instruction_9__42, .LABEL__generate_instruction_9__44)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_instruction_9__44
.LABEL__generate_instruction_9__42:
  .loc 2 164 44
  # $53.1: @IR_Multiply_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $53.1:rax 
  .loc 2 164 9
  # call(generate_multiply_instruction_22, self.1, $53.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_multiply_instruction_22
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
.LABEL__generate_instruction_9__44:
  # IR_New_Instruction.2: @Object_Type = load_variable(IR_New_Instruction)
  lea rax, IR_New_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] IR_New_Instruction.2:rax 
  .loc 2 165 16
  # $35.1: Boolean = call(is_338, instruction.1, IR_New_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_New_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:rax 
  # jump($35.1, .LABEL__generate_instruction_9__45, .LABEL__generate_instruction_9__47)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_instruction_9__47
.LABEL__generate_instruction_9__45:
  .loc 2 166 39
  # $52.1: @IR_New_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $52.1:rax 
  .loc 2 166 9
  # call(generate_new_instruction_23, self.1, $52.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_new_instruction_23
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
.LABEL__generate_instruction_9__47:
  # IR_Phi_Instruction.2: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] IR_Phi_Instruction.2:rax 
  .loc 2 167 16
  # $36.1: Boolean = call(is_338, instruction.1, IR_Phi_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Phi_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:rax 
  # jump($36.1, .LABEL__generate_instruction_9__48, .LABEL__generate_instruction_9__50)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_instruction_9__50
.LABEL__generate_instruction_9__48:
  .loc 2 168 39
  # $51.1: @IR_Phi_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $51.1:rax 
  .loc 2 168 9
  # call(generate_phi_instruction_24, self.1, $51.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_phi_instruction_24
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
.LABEL__generate_instruction_9__50:
  # IR_Return_Instruction.2: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] IR_Return_Instruction.2:rax 
  .loc 2 169 16
  # $37.1: Boolean = call(is_338, instruction.1, IR_Return_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Return_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:rax 
  # jump($37.1, .LABEL__generate_instruction_9__51, .LABEL__generate_instruction_9__53)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_instruction_9__53
.LABEL__generate_instruction_9__51:
  .loc 2 170 42
  # $50.1: @IR_Return_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $50.1:rax 
  .loc 2 170 9
  # call(generate_return_instruction_25, self.1, $50.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_return_instruction_25
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
.LABEL__generate_instruction_9__53:
  # IR_Set_Instruction.2: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] IR_Set_Instruction.2:rax 
  .loc 2 171 16
  # $38.1: Boolean = call(is_338, instruction.1, IR_Set_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Set_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:rax 
  # jump($38.1, .LABEL__generate_instruction_9__54, .LABEL__generate_instruction_9__56)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_instruction_9__56
.LABEL__generate_instruction_9__54:
  .loc 2 172 39
  # $49.1: @IR_Set_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $49.1:rax 
  .loc 2 172 9
  # call(generate_set_instruction_26, self.1, $49.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_set_instruction_26
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
.LABEL__generate_instruction_9__56:
  # IR_Store_Array_Item_Instruction.2: @Object_Type = load_variable(IR_Store_Array_Item_Instruction)
  lea rax, IR_Store_Array_Item_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] IR_Store_Array_Item_Instruction.2:rax 
  .loc 2 173 16
  # $39.1: Boolean = call(is_338, instruction.1, IR_Store_Array_Item_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Store_Array_Item_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:rax 
  # jump($39.1, .LABEL__generate_instruction_9__57, .LABEL__generate_instruction_9__59)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_instruction_9__59
.LABEL__generate_instruction_9__57:
  .loc 2 174 52
  # $48.1: @IR_Store_Array_Item_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $48.1:rax 
  .loc 2 174 9
  # call(generate_store_array_item_instruction_27, self.1, $48.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_store_array_item_instruction_27
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
.LABEL__generate_instruction_9__59:
  # IR_Store_Struct_Member_Instruction.2: @Object_Type = load_variable(IR_Store_Struct_Member_Instruction)
  lea rax, IR_Store_Struct_Member_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] IR_Store_Struct_Member_Instruction.2:rax 
  .loc 2 175 16
  # $40.1: Boolean = call(is_338, instruction.1, IR_Store_Struct_Member_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Store_Struct_Member_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:rax 
  # jump($40.1, .LABEL__generate_instruction_9__60, .LABEL__generate_instruction_9__62)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_instruction_9__62
.LABEL__generate_instruction_9__60:
  .loc 2 176 55
  # $47.1: @IR_Store_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $47.1:rax 
  .loc 2 176 9
  # call(generate_store_struct_member_instruction_28, self.1, $47.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_store_struct_member_instruction_28
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
.LABEL__generate_instruction_9__62:
  # IR_Substract_Instruction.2: @Object_Type = load_variable(IR_Substract_Instruction)
  lea rax, IR_Substract_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] IR_Substract_Instruction.2:rax 
  .loc 2 177 16
  # $41.1: Boolean = call(is_338, instruction.1, IR_Substract_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Substract_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:rax 
  # jump($41.1, .LABEL__generate_instruction_9__63, .LABEL__generate_instruction_9__65)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_instruction_9__65
.LABEL__generate_instruction_9__63:
  .loc 2 178 45
  # $46.1: @IR_Substract_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $46.1:rax 
  .loc 2 178 9
  # call(generate_substract_instruction_29, self.1, $46.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_substract_instruction_29
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
.LABEL__generate_instruction_9__65:
  .loc 2 180 20
  # $42.1: @String = call(clone_340, "Unsupported instruction: ")
  lea rdi, .LABEL__string_36[rip] # "Unsupported instruction: "
  call clone_340
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax 
  .loc 2 180 62
  # $43.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax $43.1:r15 
  .loc 2 180 62
  # $44.1: @String = load_struct_member_address($43.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax $44.1:r14 
  .loc 2 180 20
  # $45.1: @String = call(append_349, $42.1, $44.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $44.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $45.1:rax 
  .loc 2 180 9
  # call(abort_34, self.1, $45.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call abort_34
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_instruction_9__end:
  mov rsp, rbp
  pop rbp
  ret

generate_instruction_9__stack_frame_size: .word 48

  .loc 2 185 1
  .text
generate_add_instruction_10:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_add_instruction_10__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_add_instruction_10__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Add_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 186 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 187 47
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_227
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 187 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 188 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 188 5
  # $4.1: @MC_Value = call(map_variable_value_40, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_40
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 189 5
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 189 5
  # $6.1: @FILE = call(write_332, $5.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  .loc 2 189 44
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 189 5
  # $8.1: @FILE = call(write_332, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 189 5
  # $9.1: @FILE = call(write_332, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 189 100
  # $10.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  .loc 2 189 5
  # $11.1: @FILE = call(write_operand_33, $9.1, self.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_33
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: self.1
  # [live values]: $11.1:rax 
  .loc 2 189 5
  # $12.1: @FILE = call(end_line_335, $11.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_add_instruction_10__end
  # [live values]: 
.LABEL__generate_add_instruction_10__end:
  mov rsp, rbp
  pop rbp
  ret

generate_add_instruction_10__stack_frame_size: .word 32

  .loc 2 192 1
  .text
generate_call_instruction_11:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_call_instruction_11__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_call_instruction_11__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 193 9
  # $1.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rsi+65]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 193 9
  # $2.1: Boolean = $1.1 > 0
  cmp rax, 0
  setg bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__generate_call_instruction_11__2, .LABEL__generate_call_instruction_11__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__2:
  .loc 2 194 34
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-17]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 194 53
  # $4.1: @IR_Value = call(get_argument_value_184, instruction.1, 0)
  mov rdi, [rbp-9]
  xor rsi, rsi
  mov [rbp-25], rbx
  call get_argument_value_184
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $4.1:rax 
  .loc 2 194 9
  # call(generate_load_value_30, self.1, $3.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  .loc 2 195 13
  # $5.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $5.1:rbx 
  .loc 2 195 13
  # $6.1: Boolean = $5.1 > 1
  cmp rbx, 1
  setg r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:r15 
  # jump($6.1, .LABEL__generate_call_instruction_11__4, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__4:
  .loc 2 196 38
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-17]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $7.1:rbx 
  .loc 2 196 57
  # $8.1: @IR_Value = call(get_argument_value_184, instruction.1, 1)
  mov rdi, [rbp-9]
  mov rsi, 1
  mov [rbp-26], rbx
  call get_argument_value_184
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $7.1:[rbp-26] $8.1:rax 
  .loc 2 196 13
  # call(generate_load_value_30, self.1, $7.1, $8.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-26]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] 
  .loc 2 197 17
  # $9.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $9.1:rbx 
  .loc 2 197 17
  # $10.1: Boolean = $9.1 > 2
  cmp rbx, 2
  setg r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:r15 
  # jump($10.1, .LABEL__generate_call_instruction_11__6, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__6:
  .loc 2 198 42
  # $11.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-17]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $11.1:rbx 
  .loc 2 198 61
  # $12.1: @IR_Value = call(get_argument_value_184, instruction.1, 2)
  mov rdi, [rbp-9]
  mov rsi, 2
  mov [rbp-27], rbx
  call get_argument_value_184
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $11.1:[rbp-27] $12.1:rax 
  .loc 2 198 17
  # call(generate_load_value_30, self.1, $11.1, $12.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-27]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] 
  .loc 2 199 21
  # $13.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $13.1:rbx 
  .loc 2 199 21
  # $14.1: Boolean = $13.1 > 3
  cmp rbx, 3
  setg r15b
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:r15 
  # jump($14.1, .LABEL__generate_call_instruction_11__8, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__8:
  .loc 2 200 46
  # $15.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-17]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $15.1:rbx 
  .loc 2 200 65
  # $16.1: @IR_Value = call(get_argument_value_184, instruction.1, 3)
  mov rdi, [rbp-9]
  mov rsi, 3
  mov [rbp-28], rbx
  call get_argument_value_184
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $15.1:[rbp-28] $16.1:rax 
  .loc 2 200 21
  # call(generate_load_value_30, self.1, $15.1, $16.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-28]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] 
  .loc 2 201 25
  # $17.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $17.1:rbx 
  .loc 2 201 25
  # $18.1: Boolean = $17.1 > 4
  cmp rbx, 4
  setg r15b
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:r15 
  # jump($18.1, .LABEL__generate_call_instruction_11__10, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__10:
  .loc 2 202 50
  # $19.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-17]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $19.1:rbx 
  .loc 2 202 68
  # $20.1: @IR_Value = call(get_argument_value_184, instruction.1, 4)
  mov rdi, [rbp-9]
  mov rsi, 4
  mov [rbp-29], rbx
  call get_argument_value_184
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $19.1:[rbp-29] $20.1:rax 
  .loc 2 202 25
  # call(generate_load_value_30, self.1, $19.1, $20.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-29]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] 
  .loc 2 203 29
  # $21.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $21.1:rbx 
  .loc 2 203 29
  # $22.1: Boolean = $21.1 > 5
  cmp rbx, 5
  setg r15b
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:r15 
  # jump($22.1, .LABEL__generate_call_instruction_11__12, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-22], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__12:
  .loc 2 204 54
  # $23.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-17]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $23.1:rbx 
  .loc 2 204 72
  # $24.1: @IR_Value = call(get_argument_value_184, instruction.1, 5)
  mov rdi, [rbp-9]
  mov rsi, 5
  mov [rbp-30], rbx
  call get_argument_value_184
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $23.1:[rbp-30] $24.1:rax 
  .loc 2 204 29
  # call(generate_load_value_30, self.1, $23.1, $24.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-30]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump(.LABEL__generate_call_instruction_11__3)
.LABEL__generate_call_instruction_11__3:
  # IR_Direct_Call_Instruction.2: @Object_Type = load_variable(IR_Direct_Call_Instruction)
  lea rax, IR_Direct_Call_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] IR_Direct_Call_Instruction.2:rax $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 211 9
  # $25.1: Boolean = call(is_338, instruction.1, IR_Direct_Call_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Direct_Call_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:rax $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump($25.1, .LABEL__generate_call_instruction_11__14, .LABEL__generate_call_instruction_11__16)
  test al, al
  mov [rbp-23], al
  jz .LABEL__generate_call_instruction_11__16
.LABEL__generate_call_instruction_11__14:
  .loc 2 212 9
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 213 9
  # call(release_all_registers_45, self.1)
  mov rdi, [rbp-17]
  call release_all_registers_45
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 214 9
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $38.1:rbx 
  .loc 2 214 9
  # $39.1: @FILE = call(write_332, $38.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  call "
  call write_332
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax 
  .loc 2 214 65
  # $40.1: @IR_Direct_Call_Instruction = instruction.1
  mov rbx, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax $40.1:rbx 
  .loc 2 214 64
  # $41.1: @IR_Function = load_struct_member($40.1, function)
  mov r15, [rbx+73]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax $41.1:r15 
  .loc 2 214 9
  # $42.1: @FILE = call(write_function_label_4, $39.1, $41.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $41.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $42.1:rax 
  .loc 2 214 9
  # $43.1: @FILE = call(end_line_335, $42.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump(.LABEL__generate_call_instruction_11__15)
.LABEL__generate_call_instruction_11__15:
  .loc 2 223 9
  # $44.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $44.1:rbx 
  .loc 2 223 9
  # $45.1: Boolean = $44.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:r15 
  # jump($45.1, .LABEL__generate_call_instruction_11__20, .LABEL__generate_call_instruction_11__21)
  test r15b, r15b
  mov [rbp-24], r15b
  jz .LABEL__generate_call_instruction_11__21
.LABEL__generate_call_instruction_11__20:
  .loc 2 224 33
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] $46.1:rbx 
  .loc 2 224 59
  # $47.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r15, [rbp-17]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] $46.1:rbx $47.1:r14 
  .loc 2 224 9
  # $48.1: @MC_Value = call(map_variable_value_40, self.1, $46.1, $47.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # jump(.LABEL__generate_call_instruction_11__21)
.LABEL__generate_call_instruction_11__21:
  # return()
  jmp .LABEL__generate_call_instruction_11__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
.LABEL__generate_call_instruction_11__16:
  # IR_Dynamic_Call_Instruction.2: @Object_Type = load_variable(IR_Dynamic_Call_Instruction)
  lea rax, IR_Dynamic_Call_Instruction[rip]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] IR_Dynamic_Call_Instruction.2:rax 
  .loc 2 215 16
  # $26.1: Boolean = call(is_338, instruction.1, IR_Dynamic_Call_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Dynamic_Call_Instruction.2
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:rax 
  # jump($26.1, .LABEL__generate_call_instruction_11__17, .LABEL__generate_call_instruction_11__19)
  test al, al
  mov [rbp-24], al
  jz .LABEL__generate_call_instruction_11__19
.LABEL__generate_call_instruction_11__17:
  .loc 2 216 34
  # $29.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-17]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:rbx 
  .loc 2 216 54
  # $30.1: @IR_Dynamic_Call_Instruction = instruction.1
  mov r15, [rbp-9]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:rbx $30.1:r15 
  .loc 2 216 53
  # $31.1: @IR_Variable_Value = call(get_function_address_190, $30.1)
  mov rdi, r15
  mov [rbp-32], rbx
  call get_function_address_190
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:[rbp-32] $31.1:rax 
  .loc 2 216 9
  # call(generate_load_value_30, self.1, $29.1, $31.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-32]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $31.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 217 9
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 218 9
  # call(release_all_registers_45, self.1)
  mov rdi, [rbp-17]
  call release_all_registers_45
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 219 9
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $32.1:rbx 
  .loc 2 219 9
  # $33.1: @FILE = call(write_332, $32.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  call "
  call write_332
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax 
  .loc 2 219 49
  # $34.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rbp-17]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax $34.1:r15 
  .loc 2 219 49
  # $35.1: @String = load_struct_member($34.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $34.1
  # [live values]: self.1:rbx:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax $35.1:r14 
  .loc 2 219 9
  # $36.1: @FILE = call(write_332, $33.1, $35.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $35.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $36.1:rax 
  .loc 2 219 9
  # $37.1: @FILE = call(end_line_335, $36.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  # jump(.LABEL__generate_call_instruction_11__15)
  jmp .LABEL__generate_call_instruction_11__15
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
.LABEL__generate_call_instruction_11__19:
  .loc 2 221 15
  # $27.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $27.1:rbx 
  .loc 2 221 37
  # $28.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $27.1:rbx $28.1:r15 
  .loc 2 221 9
  # call(abort_141, $27.1, $28.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_call_instruction_11__end:
  mov rsp, rbp
  pop rbp
  ret

generate_call_instruction_11__stack_frame_size: .word 32

  .loc 2 228 1
  .text
generate_cast_instruction_12:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_cast_instruction_12__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_cast_instruction_12__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Cast_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 229 17
  # ir_value.1: @IR_Value = call(get_value_193, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_193
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  .loc 2 230 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rax 
  .loc 2 231 5
  # call(generate_load_value_30, self.1, result_register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  .loc 2 232 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $3.1:rbx 
  .loc 2 232 5
  # $4.1: @MC_Value = call(map_variable_value_40, self.1, $3.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-32]
  call map_variable_value_40
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  .loc 2 233 9
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $5.1:rbx 
  .loc 2 233 9
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:r15 
  # IR_Int_Type.2: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:r15 IR_Int_Type.2:rbx 
  .loc 2 233 9
  # $7.1: Boolean = call(is_338, $6.1, IR_Int_Type.2)
  mov rdi, r15
  mov rsi, rbx
  call is_338
  # [discarded value]: IR_Int_Type.2
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:rax 
  # jump($7.1, .LABEL__generate_cast_instruction_12__2, .LABEL__generate_cast_instruction_12__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__2:
  .loc 2 234 13
  # $8.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $8.1:rbx 
  # IR_Int32_Type.2: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $8.1:rbx IR_Int32_Type.2:r15 
  .loc 2 234 13
  # $9.1: Boolean = call(is_338, $8.1, IR_Int32_Type.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int32_Type.2
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__generate_cast_instruction_12__4, .LABEL__generate_cast_instruction_12__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_cast_instruction_12__5
.LABEL__generate_cast_instruction_12__4:
  .loc 2 235 13
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $10.1:rbx 
  .loc 2 235 13
  # $11.1: @FILE = call(write_332, $10.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # "  movsx "
  call write_332
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $11.1:rax 
  .loc 2 235 54
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $11.1:rax $12.1:r15 
  .loc 2 235 13
  # $13.1: @FILE = call(write_332, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $13.1:rax 
  .loc 2 235 13
  # $14.1: @FILE = call(write_332, $13.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $14.1:rax 
  .loc 2 235 96
  # $15.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $14.1:rax $15.1:r15 
  .loc 2 235 13
  # $16.1: @FILE = call(write_332, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $16.1:rax 
  .loc 2 235 13
  # $17.1: @FILE = call(end_line_335, $16.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
  .loc 2 236 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__generate_cast_instruction_12__5:
  .loc 2 238 13
  # $18.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $18.1:rbx 
  # IR_Int8_Type.2: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $18.1:rbx IR_Int8_Type.2:r15 
  .loc 2 238 13
  # $19.1: Boolean = call(is_338, $18.1, IR_Int8_Type.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int8_Type.2
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__generate_cast_instruction_12__7, .LABEL__generate_cast_instruction_12__3)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__7:
  .loc 2 239 13
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  .loc 2 239 13
  # $21.1: @FILE = call(write_332, $20.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # "  movsx "
  call write_332
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $21.1:rax 
  .loc 2 239 54
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $21.1:rax $22.1:r15 
  .loc 2 239 13
  # $23.1: @FILE = call(write_332, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $23.1:rax 
  .loc 2 239 13
  # $24.1: @FILE = call(write_332, $23.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $24.1:rax 
  .loc 2 239 96
  # $25.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $24.1:rax $25.1:r15 
  .loc 2 239 13
  # $26.1: @FILE = call(write_332, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $26.1:rax 
  .loc 2 239 13
  # $27.1: @FILE = call(end_line_335, $26.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] 
  .loc 2 240 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] 
.LABEL__generate_cast_instruction_12__3:
  .loc 2 243 9
  # $28.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $28.1:rbx $19.1:[rbp-35] 
  .loc 2 243 9
  # $29.1: @IR_Type = load_struct_member($28.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $29.1:r15 $19.1:[rbp-35] 
  # IR_Int32_Type.3: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $29.1:r15 IR_Int32_Type.3:rbx $19.1:[rbp-35] 
  .loc 2 243 9
  # $30.1: Boolean = call(is_338, $29.1, IR_Int32_Type.3)
  mov rdi, r15
  mov rsi, rbx
  call is_338
  # [discarded value]: IR_Int32_Type.3
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:rax $19.1:[rbp-35] 
  # jump($30.1, .LABEL__generate_cast_instruction_12__10, .LABEL__generate_cast_instruction_12__11)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__10:
  .loc 2 244 13
  # $31.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $31.1:rbx 
  # IR_Int_Type.3: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $31.1:rbx IR_Int_Type.3:r15 
  .loc 2 244 13
  # $32.1: Boolean = call(is_338, $31.1, IR_Int_Type.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int_Type.3
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:rax 
  # jump($32.1, .LABEL__generate_cast_instruction_12__12, .LABEL__generate_cast_instruction_12__13)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_cast_instruction_12__13
.LABEL__generate_cast_instruction_12__12:
  .loc 2 245 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] 
.LABEL__generate_cast_instruction_12__13:
  .loc 2 247 13
  # $33.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $33.1:rbx 
  # IR_Int8_Type.3: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $33.1:rbx IR_Int8_Type.3:r15 
  .loc 2 247 13
  # $34.1: Boolean = call(is_338, $33.1, IR_Int8_Type.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int8_Type.3
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:rax 
  # jump($34.1, .LABEL__generate_cast_instruction_12__15, .LABEL__generate_cast_instruction_12__11)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__15:
  .loc 2 248 13
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $35.1:rbx 
  .loc 2 248 13
  # $36.1: @FILE = call(write_332, $35.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # "  movsx "
  call write_332
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $36.1:rax 
  .loc 2 248 54
  # $37.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $36.1:rax $37.1:r15 
  .loc 2 248 13
  # $38.1: @FILE = call(write_332, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $38.1:rax 
  .loc 2 248 13
  # $39.1: @FILE = call(write_332, $38.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $39.1:rax 
  .loc 2 248 96
  # $40.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $39.1:rax $40.1:r15 
  .loc 2 248 13
  # $41.1: @FILE = call(write_332, $39.1, $40.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $41.1:rax 
  .loc 2 248 13
  # $42.1: @FILE = call(end_line_335, $41.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] 
  .loc 2 249 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] 
.LABEL__generate_cast_instruction_12__11:
  .loc 2 252 9
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $43.1:rbx $34.1:[rbp-38] 
  .loc 2 252 9
  # $44.1: @IR_Type = load_struct_member($43.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $44.1:r15 $34.1:[rbp-38] 
  # IR_Int8_Type.4: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $44.1:r15 IR_Int8_Type.4:rbx $34.1:[rbp-38] 
  .loc 2 252 9
  # $45.1: Boolean = call(is_338, $44.1, IR_Int8_Type.4)
  mov rdi, r15
  mov rsi, rbx
  call is_338
  # [discarded value]: IR_Int8_Type.4
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:rax $34.1:[rbp-38] 
  # jump($45.1, .LABEL__generate_cast_instruction_12__18, .LABEL__generate_cast_instruction_12__19)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_cast_instruction_12__19
.LABEL__generate_cast_instruction_12__18:
  .loc 2 253 13
  # $46.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $46.1:rbx 
  # IR_Int_Type.4: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $46.1:rbx IR_Int_Type.4:r15 
  .loc 2 253 13
  # $47.1: Boolean = call(is_338, $46.1, IR_Int_Type.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int_Type.4
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:rax 
  # jump($47.1, .LABEL__generate_cast_instruction_12__20, .LABEL__generate_cast_instruction_12__21)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_cast_instruction_12__21
.LABEL__generate_cast_instruction_12__20:
  .loc 2 254 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] 
.LABEL__generate_cast_instruction_12__21:
  .loc 2 256 13
  # $48.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $48.1:rbx 
  # IR_Int32_Type.4: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $48.1:rbx IR_Int32_Type.4:r15 
  .loc 2 256 13
  # $49.1: Boolean = call(is_338, $48.1, IR_Int32_Type.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int32_Type.4
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $49.1:rax 
  # jump($49.1, .LABEL__generate_cast_instruction_12__23, .LABEL__generate_cast_instruction_12__19)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_cast_instruction_12__19
.LABEL__generate_cast_instruction_12__23:
  .loc 2 257 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $49.1:[rbp-41] 
.LABEL__generate_cast_instruction_12__19:
  .loc 2 260 16
  # $50.1: @String = call(clone_340, "Cannot cast ")
  lea rdi, .LABEL__string_41[rip] # "Cannot cast "
  call clone_340
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $49.1:[rbp-41] 
  .loc 2 260 45
  # $51.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $51.1:r15 $49.1:[rbp-41] 
  .loc 2 260 45
  # $52.1: @Object_Type = load_struct_member($51.1, object_type)
  mov r14, [r15]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $52.1:r14 $49.1:[rbp-41] 
  .loc 2 260 45
  # $53.1: @String = load_struct_member_address($52.1, name)
  mov r15, r14
  add r15, 8
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $53.1:r15 $49.1:[rbp-41] 
  .loc 2 260 16
  # $54.1: @String = call(append_349, $50.1, $53.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $53.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $54.1:rax $49.1:[rbp-41] 
  .loc 2 260 16
  # $55.1: @String = call(append_349, $54.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # " to "
  call append_349
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $49.1:[rbp-41] 
  .loc 2 260 99
  # $56.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $56.1:r15 $49.1:[rbp-41] 
  .loc 2 260 99
  # $57.1: @IR_Type = load_struct_member($56.1, type)
  mov r14, [r15+8]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $57.1:r14 $49.1:[rbp-41] 
  .loc 2 260 99
  # $58.1: @Object_Type = load_struct_member($57.1, object_type)
  mov r15, [r14]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $58.1:r15 $49.1:[rbp-41] 
  .loc 2 260 99
  # $59.1: @String = load_struct_member_address($58.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $59.1:r14 $49.1:[rbp-41] 
  .loc 2 260 16
  # $60.1: @String = call(append_349, $55.1, $59.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $59.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $60.1:rax $49.1:[rbp-41] 
  .loc 2 260 5
  # call(abort_34, self.1, $60.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $49.1:[rbp-41] 
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [discarded value]: result_register.1
  # [discarded value]: ir_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_cast_instruction_12__end:
  mov rsp, rbp
  pop rbp
  ret

generate_cast_instruction_12__stack_frame_size: .word 48

  .loc 2 263 1
  .text
generate_conditional_jump_instruction_13:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_conditional_jump_instruction_13__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_conditional_jump_instruction_13__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Conditional_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 264 24
  # condition_value.1: @IR_Value = call(get_condition_value_195, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_condition_value_195
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax 
  .loc 2 265 9
  # $2.1: @IR_Type = load_struct_member(condition_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx 
  # IR_Boolean_Type.2: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx IR_Boolean_Type.2:r15 
  .loc 2 265 9
  # $3.1: Boolean = call(is_338, $2.1, IR_Boolean_Type.2)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Boolean_Type.2
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $3.1:rax 
  .loc 2 265 9
  # $4.1: Boolean = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:rbx 
  # jump($4.1, .LABEL__generate_conditional_jump_instruction_13__2, .LABEL__generate_conditional_jump_instruction_13__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__generate_conditional_jump_instruction_13__3
.LABEL__generate_conditional_jump_instruction_13__2:
  .loc 2 266 9
  # call(abort_34, self.1, "Unsupported value type")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Unsupported value type"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__generate_conditional_jump_instruction_13__3:
  # IR_Variable_Value.2: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] IR_Variable_Value.2:rax 
  .loc 2 269 9
  # $5.1: Boolean = call(is_338, condition_value.1, IR_Variable_Value.2)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__generate_conditional_jump_instruction_13__4, .LABEL__generate_conditional_jump_instruction_13__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_conditional_jump_instruction_13__6
.LABEL__generate_conditional_jump_instruction_13__4:
  .loc 2 270 28
  # condition_value.1: @IR_Variable_Value = condition_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:rax 
  .loc 2 271 21
  # mc_value.1: @MC_Value = call(get_value_41, self.1, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-34], rax
  call get_value_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax 
  .loc 2 272 13
  # $9.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax $9.1:rbx 
  # jump($9.1, .LABEL__generate_conditional_jump_instruction_13__7, .LABEL__generate_conditional_jump_instruction_13__8)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__generate_conditional_jump_instruction_13__8
.LABEL__generate_conditional_jump_instruction_13__7:
  .loc 2 273 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] 
.LABEL__generate_conditional_jump_instruction_13__8:
  .loc 2 275 30
  # condition_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $9.1:[rbp-43] condition_register.3:rbx 
  .loc 2 276 13
  # $11.1: Boolean = condition_register.3 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $9.1:[rbp-43] condition_register.3:rbx $11.1:r15 
  # jump($11.1, .LABEL__generate_conditional_jump_instruction_13__9, .LABEL__generate_conditional_jump_instruction_13__5)
  test r15b, r15b
  mov [rbp-51], rbx
  mov [rbp-52], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__5
.LABEL__generate_conditional_jump_instruction_13__9:
  .loc 2 277 34
  # condition_register.4: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:rax:[rbp-51] 
  .loc 2 278 13
  # call(generate_load_value_30, self.1, condition_register.4, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-34]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__5)
.LABEL__generate_conditional_jump_instruction_13__5:
  # condition_register.5: @MC_Register = phi(condition_register.2, condition_register.4, condition_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 5
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $13.1:rbx condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 5
  # $14.1: @FILE = call(write_332, $13.1, "  test ")
  mov rdi, rbx
  lea rsi, .LABEL__string_45[rip] # "  test "
  call write_332
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $14.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 45
  # $15.1: @String = load_struct_member(condition_register.5, name_b)
  mov rbx, [rbp-51]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:rbx:[rbp-51] $14.1:rax $15.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 5
  # $16.1: @FILE = call(write_332, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $16.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 5
  # $17.1: @FILE = call(write_332, $16.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $17.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 90
  # $18.1: @String = load_struct_member(condition_register.5, name_b)
  mov rbx, [rbp-51]
  mov r15, [rbx+32]
  # [discarded value]: condition_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $17.1:rax $18.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 5
  # $19.1: @FILE = call(write_332, $17.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $19.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 284 5
  # $20.1: @FILE = call(end_line_335, $19.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 285 5
  # call(release_all_registers_45, self.1)
  mov rdi, [rbp-8]
  call release_all_registers_45
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 9
  # $21.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $21.1:rbx condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 9
  # $22.1: Boolean = load_struct_member($21.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # jump($22.1, .LABEL__generate_conditional_jump_instruction_13__11, .LABEL__generate_conditional_jump_instruction_13__13)
  test r15b, r15b
  mov [rbp-53], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__13
.LABEL__generate_conditional_jump_instruction_13__11:
  .loc 2 287 9
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $33.1:rbx 
  .loc 2 287 9
  # $34.1: @FILE = call(write_332, $33.1, "  jnz ")
  mov rdi, rbx
  lea rsi, .LABEL__string_46[rip] # "  jnz "
  call write_332
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $34.1:rax 
  .loc 2 287 60
  # $35.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $34.1:rax $35.1:r15 
  .loc 2 287 9
  # $36.1: @FILE = call(write_block_label_8, $34.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $36.1:rax 
  .loc 2 287 9
  # $37.1: @FILE = call(end_line_335, $36.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 288 13
  # $38.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $38.1:rbx 
  .loc 2 288 13
  # $39.1: Boolean = load_struct_member($38.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:r15 
  # jump($39.1, .LABEL__generate_conditional_jump_instruction_13__16, .LABEL__generate_conditional_jump_instruction_13__17)
  test r15b, r15b
  mov [rbp-54], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__17
.LABEL__generate_conditional_jump_instruction_13__16:
  .loc 2 289 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
.LABEL__generate_conditional_jump_instruction_13__17:
  .loc 2 291 29
  # $40.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] $40.1:rbx 
  .loc 2 291 9
  # call(generate_block_7, self.1, $40.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__12)
.LABEL__generate_conditional_jump_instruction_13__12:
  # return()
  jmp .LABEL__generate_conditional_jump_instruction_13__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
.LABEL__generate_conditional_jump_instruction_13__13:
  .loc 2 293 9
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $23.1:rbx 
  .loc 2 293 9
  # $24.1: @FILE = call(write_332, $23.1, "  jz ")
  mov rdi, rbx
  lea rsi, .LABEL__string_47[rip] # "  jz "
  call write_332
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $24.1:rax 
  .loc 2 293 59
  # $25.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $24.1:rax $25.1:r15 
  .loc 2 293 9
  # $26.1: @FILE = call(write_block_label_8, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $26.1:rax 
  .loc 2 293 9
  # $27.1: @FILE = call(end_line_335, $26.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 294 29
  # $28.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $28.1:rbx 
  .loc 2 294 9
  # call(generate_block_7, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 295 13
  # $29.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $29.1:rbx 
  .loc 2 295 13
  # $30.1: Boolean = load_struct_member($29.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $30.1:r15 
  .loc 2 295 13
  # $31.1: Boolean = $30.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:rbx 
  # jump($31.1, .LABEL__generate_conditional_jump_instruction_13__14, .LABEL__generate_conditional_jump_instruction_13__12)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__generate_conditional_jump_instruction_13__12
.LABEL__generate_conditional_jump_instruction_13__14:
  .loc 2 296 33
  # $32.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] $32.1:rbx 
  .loc 2 296 13
  # call(generate_block_7, self.1, $32.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__12)
  jmp .LABEL__generate_conditional_jump_instruction_13__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [discarded value]: condition_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] 
  # [discarded value]: condition_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] 
  # [discarded value]: mc_value.1
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__generate_conditional_jump_instruction_13__6:
  .loc 2 281 30
  # condition_register.2: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:rax:[rbp-51] 
  .loc 2 282 9
  # call(generate_load_value_30, self.1, condition_register.2, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:[rbp-51] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__5)
  jmp .LABEL__generate_conditional_jump_instruction_13__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:[rbp-51] 
  # [discarded value]: condition_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [discarded value]: condition_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_conditional_jump_instruction_13__end:
  mov rsp, rbp
  pop rbp
  ret

generate_conditional_jump_instruction_13__stack_frame_size: .word 64

  .loc 2 301 1
  .text
generate_comparison_instruction_14:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_comparison_instruction_14__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_comparison_instruction_14__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Comparison_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 302 19
  # left_value.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_left_value_227
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:rax 
  .loc 2 303 20
  # right_value.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax 
  # IR_Variable_Value.3: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax IR_Variable_Value.3:rbx 
  .loc 2 304 9
  # $4.1: Boolean = call(is_338, left_value.1, IR_Variable_Value.3)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-32], rax
  call is_338
  # [discarded value]: IR_Variable_Value.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__generate_comparison_instruction_14__2, .LABEL__generate_comparison_instruction_14__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_comparison_instruction_14__3
.LABEL__generate_comparison_instruction_14__2:
  # IR_Variable_Value.4: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] IR_Variable_Value.4:rax 
  .loc 2 304 45
  # $4.2: Boolean = call(is_338, right_value.1, IR_Variable_Value.4)
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:rax:[rbp-33] 
  # jump(.LABEL__generate_comparison_instruction_14__3)
  mov [rbp-33], al
.LABEL__generate_comparison_instruction_14__3:
  .loc 2 304 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # jump($4.3, .LABEL__generate_comparison_instruction_14__4, .LABEL__generate_comparison_instruction_14__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__4:
  .loc 2 305 41
  # $6.1: @IR_Variable_Value = left_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $6.1:rax 
  .loc 2 305 26
  # mc_left_value.1: @MC_Value = call(get_value_41, self.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_41
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] mc_left_value.1:rax 
  .loc 2 306 13
  # $8.1: @MC_Register = load_struct_member(mc_left_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_left_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:rbx 
  .loc 2 306 13
  # $9.1: Boolean = $8.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__generate_comparison_instruction_14__6, .LABEL__generate_comparison_instruction_14__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__6:
  .loc 2 307 46
  # $10.1: @IR_Variable_Value = right_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $10.1:rax 
  .loc 2 307 31
  # mc_right_value.1: @MC_Value = call(get_value_41, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_41
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] mc_right_value.1:rax 
  .loc 2 308 17
  # $12.1: @MC_Register = load_struct_member(mc_right_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_right_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $12.1:rbx 
  .loc 2 308 17
  # $13.1: Boolean = $12.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:rax 
  # jump($13.1, .LABEL__generate_comparison_instruction_14__8, .LABEL__generate_comparison_instruction_14__5)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__8:
  .loc 2 309 29
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:rax 
  .loc 2 310 17
  # call(generate_load_value_30, self.1, register.1, left_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-43], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:[rbp-43] 
  .loc 2 311 41
  # $15.1: @IR_Variable_Value = left_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:[rbp-43] $15.1:rax 
  .loc 2 311 17
  # $16.1: @MC_Value = call(map_variable_value_40, self.1, $15.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # jump(.LABEL__generate_comparison_instruction_14__5)
.LABEL__generate_comparison_instruction_14__5:
  .loc 2 315 5
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $17.1:rbx $13.1:[rbp-35] 
  .loc 2 315 5
  # $18.1: @FILE = call(write_332, $17.1, "  cmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_48[rip] # "  cmp "
  call write_332
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $18.1:rax $13.1:[rbp-35] 
  .loc 2 315 5
  # $19.1: @FILE = call(write_operand_33, $18.1, self.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-24]
  call write_operand_33
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $19.1:rax $13.1:[rbp-35] 
  .loc 2 315 5
  # $20.1: @FILE = call(write_332, $19.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $20.1:rax $13.1:[rbp-35] 
  .loc 2 315 5
  # $21.1: @FILE = call(write_operand_33, $20.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-32]
  call write_operand_33
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $21.1:rax $13.1:[rbp-35] 
  .loc 2 315 5
  # $22.1: @FILE = call(end_line_335, $21.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  .loc 2 316 17
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rax $13.1:[rbp-35] 
  # IR_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Equals_Comparison_Instruction)
  lea rbx, IR_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rax IR_Equals_Comparison_Instruction.2:rbx $13.1:[rbp-35] 
  .loc 2 317 9
  # $24.1: Boolean = call(is_338, instruction.1, IR_Equals_Comparison_Instruction.2)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-43], rax
  call is_338
  # [discarded value]: IR_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:rax $13.1:[rbp-35] 
  # jump($24.1, .LABEL__generate_comparison_instruction_14__10, .LABEL__generate_comparison_instruction_14__12)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_comparison_instruction_14__12
.LABEL__generate_comparison_instruction_14__10:
  .loc 2 318 9
  # $69.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $69.1:rbx 
  .loc 2 318 9
  # $70.1: @FILE = call(write_332, $69.1, "  sete ")
  mov rdi, rbx
  lea rsi, .LABEL__string_49[rip] # "  sete "
  call write_332
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $70.1:rax 
  .loc 2 318 49
  # $71.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $70.1:rax $71.1:r15 
  .loc 2 318 9
  # $72.1: @FILE = call(write_332, $70.1, $71.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $71.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $72.1:rax 
  .loc 2 318 9
  # $73.1: @FILE = call(end_line_335, $72.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  .loc 2 319 33
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $74.1:rbx 
  .loc 2 319 9
  # $75.1: @MC_Value = call(map_variable_value_40, self.1, $74.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $75.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
.LABEL__generate_comparison_instruction_14__11:
  # return()
  jmp .LABEL__generate_comparison_instruction_14__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
.LABEL__generate_comparison_instruction_14__12:
  # IR_Greater_Comparison_Instruction.2: @Object_Type = load_variable(IR_Greater_Comparison_Instruction)
  lea rax, IR_Greater_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] IR_Greater_Comparison_Instruction.2:rax 
  .loc 2 320 16
  # $25.1: Boolean = call(is_338, instruction.1, IR_Greater_Comparison_Instruction.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Greater_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:rax 
  # jump($25.1, .LABEL__generate_comparison_instruction_14__13, .LABEL__generate_comparison_instruction_14__15)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_comparison_instruction_14__15
.LABEL__generate_comparison_instruction_14__13:
  .loc 2 321 9
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $62.1:rbx 
  .loc 2 321 9
  # $63.1: @FILE = call(write_332, $62.1, "  setg ")
  mov rdi, rbx
  lea rsi, .LABEL__string_50[rip] # "  setg "
  call write_332
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $63.1:rax 
  .loc 2 321 49
  # $64.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $63.1:rax $64.1:r15 
  .loc 2 321 9
  # $65.1: @FILE = call(write_332, $63.1, $64.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $65.1:rax 
  .loc 2 321 9
  # $66.1: @FILE = call(end_line_335, $65.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  .loc 2 322 33
  # $67.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $67.1:rbx 
  .loc 2 322 9
  # $68.1: @MC_Value = call(map_variable_value_40, self.1, $67.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $68.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
.LABEL__generate_comparison_instruction_14__15:
  # IR_Greater_Or_Equal_Comparison_Instruction.2: @Object_Type = load_variable(IR_Greater_Or_Equal_Comparison_Instruction)
  lea rax, IR_Greater_Or_Equal_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] IR_Greater_Or_Equal_Comparison_Instruction.2:rax 
  .loc 2 323 16
  # $26.1: Boolean = call(is_338, instruction.1, IR_Greater_Or_Equal_Comparison_Instruction.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Greater_Or_Equal_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:rax 
  # jump($26.1, .LABEL__generate_comparison_instruction_14__16, .LABEL__generate_comparison_instruction_14__18)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_comparison_instruction_14__18
.LABEL__generate_comparison_instruction_14__16:
  .loc 2 324 9
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $55.1:rbx 
  .loc 2 324 9
  # $56.1: @FILE = call(write_332, $55.1, "  setge ")
  mov rdi, rbx
  lea rsi, .LABEL__string_51[rip] # "  setge "
  call write_332
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $56.1:rax 
  .loc 2 324 50
  # $57.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $56.1:rax $57.1:r15 
  .loc 2 324 9
  # $58.1: @FILE = call(write_332, $56.1, $57.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $58.1:rax 
  .loc 2 324 9
  # $59.1: @FILE = call(end_line_335, $58.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  .loc 2 325 33
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $60.1:rbx 
  .loc 2 325 9
  # $61.1: @MC_Value = call(map_variable_value_40, self.1, $60.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
.LABEL__generate_comparison_instruction_14__18:
  # IR_Less_Comparison_Instruction.2: @Object_Type = load_variable(IR_Less_Comparison_Instruction)
  lea rax, IR_Less_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] IR_Less_Comparison_Instruction.2:rax 
  .loc 2 326 16
  # $27.1: Boolean = call(is_338, instruction.1, IR_Less_Comparison_Instruction.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Less_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:rax 
  # jump($27.1, .LABEL__generate_comparison_instruction_14__19, .LABEL__generate_comparison_instruction_14__21)
  test al, al
  mov [rbp-47], al
  jz .LABEL__generate_comparison_instruction_14__21
.LABEL__generate_comparison_instruction_14__19:
  .loc 2 327 9
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $48.1:rbx 
  .loc 2 327 9
  # $49.1: @FILE = call(write_332, $48.1, "  setl ")
  mov rdi, rbx
  lea rsi, .LABEL__string_52[rip] # "  setl "
  call write_332
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $49.1:rax 
  .loc 2 327 49
  # $50.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $49.1:rax $50.1:r15 
  .loc 2 327 9
  # $51.1: @FILE = call(write_332, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $51.1:rax 
  .loc 2 327 9
  # $52.1: @FILE = call(end_line_335, $51.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  .loc 2 328 33
  # $53.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $53.1:rbx 
  .loc 2 328 9
  # $54.1: @MC_Value = call(map_variable_value_40, self.1, $53.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
.LABEL__generate_comparison_instruction_14__21:
  # IR_Less_Or_Equal_Comparison_Instruction.2: @Object_Type = load_variable(IR_Less_Or_Equal_Comparison_Instruction)
  lea rax, IR_Less_Or_Equal_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] IR_Less_Or_Equal_Comparison_Instruction.2:rax 
  .loc 2 329 16
  # $28.1: Boolean = call(is_338, instruction.1, IR_Less_Or_Equal_Comparison_Instruction.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Less_Or_Equal_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:rax 
  # jump($28.1, .LABEL__generate_comparison_instruction_14__22, .LABEL__generate_comparison_instruction_14__24)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_comparison_instruction_14__24
.LABEL__generate_comparison_instruction_14__22:
  .loc 2 330 9
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $41.1:rbx 
  .loc 2 330 9
  # $42.1: @FILE = call(write_332, $41.1, "  setle ")
  mov rdi, rbx
  lea rsi, .LABEL__string_53[rip] # "  setle "
  call write_332
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $42.1:rax 
  .loc 2 330 50
  # $43.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $42.1:rax $43.1:r15 
  .loc 2 330 9
  # $44.1: @FILE = call(write_332, $42.1, $43.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $44.1:rax 
  .loc 2 330 9
  # $45.1: @FILE = call(end_line_335, $44.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  .loc 2 331 33
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $46.1:rbx 
  .loc 2 331 9
  # $47.1: @MC_Value = call(map_variable_value_40, self.1, $46.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
.LABEL__generate_comparison_instruction_14__24:
  # IR_Not_Equal_Comparison_Instruction.2: @Object_Type = load_variable(IR_Not_Equal_Comparison_Instruction)
  lea rax, IR_Not_Equal_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] IR_Not_Equal_Comparison_Instruction.2:rax 
  .loc 2 332 16
  # $29.1: Boolean = call(is_338, instruction.1, IR_Not_Equal_Comparison_Instruction.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Not_Equal_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:rax 
  # jump($29.1, .LABEL__generate_comparison_instruction_14__25, .LABEL__generate_comparison_instruction_14__27)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_comparison_instruction_14__27
.LABEL__generate_comparison_instruction_14__25:
  .loc 2 333 9
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $34.1:rbx 
  .loc 2 333 9
  # $35.1: @FILE = call(write_332, $34.1, "  setne ")
  mov rdi, rbx
  lea rsi, .LABEL__string_54[rip] # "  setne "
  call write_332
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $35.1:rax 
  .loc 2 333 50
  # $36.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $35.1:rax $36.1:r15 
  .loc 2 333 9
  # $37.1: @FILE = call(write_332, $35.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $37.1:rax 
  .loc 2 333 9
  # $38.1: @FILE = call(end_line_335, $37.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  .loc 2 334 33
  # $39.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $39.1:rbx 
  .loc 2 334 9
  # $40.1: @MC_Value = call(map_variable_value_40, self.1, $39.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_40
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
.LABEL__generate_comparison_instruction_14__27:
  .loc 2 336 20
  # $30.1: @String = call(clone_340, "Unsupported comparison instruction type: ")
  lea rdi, .LABEL__string_55[rip] # "Unsupported comparison instruction type: "
  call clone_340
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax 
  .loc 2 336 78
  # $31.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax $31.1:r15 
  .loc 2 336 78
  # $32.1: @String = load_struct_member_address($31.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax $32.1:r14 
  .loc 2 336 20
  # $33.1: @String = call(append_349, $30.1, $32.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $32.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $33.1:rax 
  .loc 2 336 9
  # call(abort_34, self.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $13.1:[rbp-35] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_comparison_instruction_14__end:
  mov rsp, rbp
  pop rbp
  ret

generate_comparison_instruction_14__stack_frame_size: .word 64

  .loc 2 340 1
  .text
generate_direct_jump_instruction_15:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_direct_jump_instruction_15__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_direct_jump_instruction_15__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Direct_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 341 5
  # call(release_all_registers_45, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_45
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 342 9
  # $1.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 342 9
  # $2.1: Boolean = load_struct_member($1.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__generate_direct_jump_instruction_15__2, .LABEL__generate_direct_jump_instruction_15__4)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__generate_direct_jump_instruction_15__4
.LABEL__generate_direct_jump_instruction_15__2:
  .loc 2 343 9
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $4.1:rbx 
  .loc 2 343 9
  # $5.1: @FILE = call(write_332, $4.1, "  jmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  jmp "
  call write_332
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  .loc 2 343 60
  # $6.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $2.1:[rbp-17] $5.1:rax $6.1:r15 
  .loc 2 343 9
  # $7.1: @FILE = call(write_block_label_8, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $7.1:rax 
  .loc 2 343 9
  # $8.1: @FILE = call(end_line_335, $7.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_direct_jump_instruction_15__3)
.LABEL__generate_direct_jump_instruction_15__3:
  # return()
  jmp .LABEL__generate_direct_jump_instruction_15__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
.LABEL__generate_direct_jump_instruction_15__4:
  .loc 2 345 29
  # $3.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 2 345 9
  # call(generate_block_7, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_direct_jump_instruction_15__3)
  jmp .LABEL__generate_direct_jump_instruction_15__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_direct_jump_instruction_15__end:
  mov rsp, rbp
  pop rbp
  ret

generate_direct_jump_instruction_15__stack_frame_size: .word 32

  .loc 2 349 1
  .text
generate_divide_instruction_16:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_divide_instruction_16__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_divide_instruction_16__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Divide_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 350 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 350 5
  # call(release_register_46, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_46
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 351 30
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  .loc 2 351 49
  # $3.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_227
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 2 351 5
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 352 5
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  .loc 2 352 5
  # store_struct_member($4.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 353 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  .loc 2 353 5
  # call(release_register_46, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 354 5
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  .loc 2 354 5
  # store_struct_member($6.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 355 5
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  .loc 2 355 5
  # $8.1: @FILE = call(write_332, $7.1, "  cqto")
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  cqto"
  call write_332
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 355 5
  # $9.1: @FILE = call(end_line_335, $8.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 356 20
  # right_value.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-8]
  call get_right_value_228
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  # IR_Constant_Value.2: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax IR_Constant_Value.2:rbx 
  .loc 2 357 9
  # $11.1: Boolean = call(is_338, right_value.1, IR_Constant_Value.2)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Constant_Value.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, .LABEL__generate_divide_instruction_16__2, .LABEL__generate_divide_instruction_16__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_divide_instruction_16__4
.LABEL__generate_divide_instruction_16__2:
  .loc 2 358 21
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 359 9
  # store_struct_member(register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 360 9
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-33], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 361 9
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $17.1:rbx 
  .loc 2 361 9
  # $18.1: @FILE = call(write_332, $17.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_332
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $18.1:rax 
  .loc 2 361 49
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rbx:[rbp-33] $18.1:rax $19.1:r15 
  .loc 2 361 9
  # $20.1: @FILE = call(write_332, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $20.1:rax 
  .loc 2 361 9
  # $21.1: @FILE = call(end_line_335, $20.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 362 9
  # store_struct_member(register.1, is_reserved, false)
  mov rax, [rbp-33]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_divide_instruction_16__3)
.LABEL__generate_divide_instruction_16__3:
  .loc 2 366 5
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $22.1:rbx 
  .loc 2 366 5
  # store_struct_member($22.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 367 5
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $23.1:rbx 
  .loc 2 367 5
  # store_struct_member($23.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 368 29
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 
  .loc 2 368 55
  # $25.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r14, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 $25.1:r14 
  .loc 2 368 5
  # $26.1: @MC_Value = call(map_variable_value_40, self.1, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_divide_instruction_16__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
.LABEL__generate_divide_instruction_16__4:
  .loc 2 364 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $12.1:rbx 
  .loc 2 364 9
  # $13.1: @FILE = call(write_332, $12.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_332
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $13.1:rax 
  .loc 2 364 9
  # $14.1: @FILE = call(write_operand_33, $13.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_33
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $14.1:rax 
  .loc 2 364 9
  # $15.1: @FILE = call(end_line_335, $14.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_divide_instruction_16__3)
  jmp .LABEL__generate_divide_instruction_16__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: right_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_divide_instruction_16__end:
  mov rsp, rbp
  pop rbp
  ret

generate_divide_instruction_16__stack_frame_size: .word 48

  .loc 2 371 1
  .text
generate_load_array_item_instruction_17:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_array_item_instruction_17__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_array_item_instruction_17__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 372 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 373 47
  # $2.1: @IR_Value = call(get_array_value_199, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_199
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 373 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 374 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 374 5
  # $4.1: @MC_Value = call(map_variable_value_40, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_40
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 375 50
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 375 50
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $6.1:r15 
  .loc 2 375 31
  # result_value_type_size.1: Int = call(get_type_size_54, self.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call get_type_size_54
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:rax 
  .loc 2 377 20
  # index_value.1: @IR_Value = call(get_index_value_200, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_index_value_200
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax 
  # IR_Constant_Value.3: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax IR_Constant_Value.3:rbx 
  .loc 2 378 9
  # $9.1: Boolean = call(is_338, index_value.1, IR_Constant_Value.3)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:rax 
  # jump($9.1, .LABEL__generate_load_array_item_instruction_17__2, .LABEL__generate_load_array_item_instruction_17__4)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_load_array_item_instruction_17__4
.LABEL__generate_load_array_item_instruction_17__2:
  .loc 2 379 24
  # index_value.1: @IR_Constant_Value = index_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax 
  .loc 2 380 13
  # $29.1: @Literal_Token = load_struct_member(index_value.1, literal)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax $29.1:rbx 
  # Integer_Token.2: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax $29.1:rbx Integer_Token.2:r15 
  .loc 2 380 13
  # $30.1: Boolean = call(is_338, $29.1, Integer_Token.2)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-49], rax
  call is_338
  # [discarded value]: Integer_Token.2
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $30.1:rax 
  .loc 2 380 13
  # $31.1: Boolean = $30.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:rbx 
  # jump($31.1, .LABEL__generate_load_array_item_instruction_17__7, .LABEL__generate_load_array_item_instruction_17__8)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__generate_load_array_item_instruction_17__8
.LABEL__generate_load_array_item_instruction_17__7:
  .loc 2 381 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] 
.LABEL__generate_load_array_item_instruction_17__8:
  .loc 2 383 25
  # $33.1: @Integer_Token = load_struct_member(index_value.1, literal)
  mov rax, [rbp-49]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] $33.1:rbx 
  .loc 2 383 24
  # index_value.1: Int = load_struct_member($33.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] index_value.1:r15 
  .loc 2 384 13
  # $35.1: Boolean = index_value.1 != 0
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] index_value.1:r15 $35.1:rbx 
  # jump($35.1, .LABEL__generate_load_array_item_instruction_17__9, .LABEL__generate_load_array_item_instruction_17__3)
  test bl, bl
  mov [rbp-51], bl
  mov [rbp-59], r15
  jz .LABEL__generate_load_array_item_instruction_17__3
.LABEL__generate_load_array_item_instruction_17__9:
  .loc 2 385 17
  # $36.1: Boolean = index_value.1 < 0
  cmp QWORD PTR [rbp-59], 0
  setl al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:rax 
  # jump($36.1, .LABEL__generate_load_array_item_instruction_17__11, .LABEL__generate_load_array_item_instruction_17__12)
  test al, al
  mov [rbp-60], al
  jz .LABEL__generate_load_array_item_instruction_17__12
.LABEL__generate_load_array_item_instruction_17__11:
  .loc 2 386 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
.LABEL__generate_load_array_item_instruction_17__12:
  .loc 2 388 13
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $37.1:rbx 
  .loc 2 388 13
  # $38.1: @FILE = call(write_332, $37.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_332
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $38.1:rax 
  .loc 2 388 52
  # $39.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $38.1:rax $39.1:r15 
  .loc 2 388 13
  # $40.1: @FILE = call(write_332, $38.1, $39.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $40.1:rax 
  .loc 2 388 13
  # $41.1: @FILE = call(write_332, $40.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $41.1:rax 
  .loc 2 388 94
  # $42.1: Int = index_value.1 * result_value_type_size.1
  mov rbx, [rbp-59]
  imul rbx, QWORD PTR [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $41.1:rax $42.1:rbx 
  .loc 2 388 13
  # $43.1: @FILE = call(write_331, $41.1, $42.1)
  mov rdi, rax
  mov rsi, rbx
  call write_331
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $43.1:rax 
  .loc 2 388 13
  # $44.1: @FILE = call(end_line_335, $43.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump(.LABEL__generate_load_array_item_instruction_17__3)
.LABEL__generate_load_array_item_instruction_17__3:
  .loc 2 399 16
  # $45.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] $45.1:rax index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # store_struct_member($45.1, register, result_register.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] $45.1:rax index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # store_struct_member($45.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] $45.1:rax index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  .loc 2 399 5
  # address.1: @MC_Register_Based_Address = $45.1
  mov [rbp-68], rax
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:rax index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  .loc 2 400 9
  # $46.1: Boolean = result_value_type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete r15b
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:rax $46.1:r15 index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump($46.1, .LABEL__generate_load_array_item_instruction_17__13, .LABEL__generate_load_array_item_instruction_17__15)
  test r15b, r15b
  mov [rbp-68], rax
  mov [rbp-69], r15b
  jz .LABEL__generate_load_array_item_instruction_17__15
.LABEL__generate_load_array_item_instruction_17__13:
  .loc 2 401 9
  # $70.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $70.1:rbx 
  .loc 2 401 9
  # $71.1: @FILE = call(write_332, $70.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $71.1:rax 
  .loc 2 401 48
  # $72.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $71.1:rax $72.1:r15 
  .loc 2 401 9
  # $73.1: @FILE = call(write_332, $71.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $73.1:rax 
  .loc 2 401 9
  # $74.1: @FILE = call(write_332, $73.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $74.1:rax 
  .loc 2 401 9
  # $75.1: @FILE = call(write_53, $74.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_53
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $75.1:rax 
  .loc 2 401 9
  # $76.1: @FILE = call(end_line_335, $75.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
.LABEL__generate_load_array_item_instruction_17__14:
  # return()
  jmp .LABEL__generate_load_array_item_instruction_17__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
.LABEL__generate_load_array_item_instruction_17__15:
  .loc 2 402 16
  # $47.1: Boolean = result_value_type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:rax 
  # jump($47.1, .LABEL__generate_load_array_item_instruction_17__16, .LABEL__generate_load_array_item_instruction_17__18)
  test al, al
  mov [rbp-70], al
  jz .LABEL__generate_load_array_item_instruction_17__18
.LABEL__generate_load_array_item_instruction_17__16:
  .loc 2 403 9
  # $63.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $63.1:rbx 
  .loc 2 403 9
  # $64.1: @FILE = call(write_332, $63.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $64.1:rax 
  .loc 2 403 48
  # $65.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $64.1:rax $65.1:r15 
  .loc 2 403 9
  # $66.1: @FILE = call(write_332, $64.1, $65.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $66.1:rax 
  .loc 2 403 9
  # $67.1: @FILE = call(write_332, $66.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $67.1:rax 
  .loc 2 403 9
  # $68.1: @FILE = call(write_53, $67.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_53
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $68.1:rax 
  .loc 2 403 9
  # $69.1: @FILE = call(end_line_335, $68.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
.LABEL__generate_load_array_item_instruction_17__18:
  .loc 2 404 16
  # $48.1: Boolean = result_value_type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:rax 
  # jump($48.1, .LABEL__generate_load_array_item_instruction_17__19, .LABEL__generate_load_array_item_instruction_17__21)
  test al, al
  mov [rbp-71], al
  jz .LABEL__generate_load_array_item_instruction_17__21
.LABEL__generate_load_array_item_instruction_17__19:
  .loc 2 405 9
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $56.1:rbx 
  .loc 2 405 9
  # $57.1: @FILE = call(write_332, $56.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $57.1:rax 
  .loc 2 405 48
  # $58.1: @String = load_struct_member(result_register.1, name_w)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $57.1:rax $58.1:r15 
  .loc 2 405 9
  # $59.1: @FILE = call(write_332, $57.1, $58.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $59.1:rax 
  .loc 2 405 9
  # $60.1: @FILE = call(write_332, $59.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $60.1:rax 
  .loc 2 405 9
  # $61.1: @FILE = call(write_53, $60.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_53
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $61.1:rax 
  .loc 2 405 9
  # $62.1: @FILE = call(end_line_335, $61.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
.LABEL__generate_load_array_item_instruction_17__21:
  .loc 2 407 9
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $49.1:rbx 
  .loc 2 407 9
  # $50.1: @FILE = call(write_332, $49.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $50.1:rax 
  .loc 2 407 48
  # $51.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $50.1:rax $51.1:r15 
  .loc 2 407 9
  # $52.1: @FILE = call(write_332, $50.1, $51.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $51.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $52.1:rax 
  .loc 2 407 9
  # $53.1: @FILE = call(write_332, $52.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $53.1:rax 
  .loc 2 407 9
  # $54.1: @FILE = call(write_53, $53.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_53
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $54.1:rax 
  .loc 2 407 9
  # $55.1: @FILE = call(end_line_335, $54.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] 
.LABEL__generate_load_array_item_instruction_17__4:
  .loc 2 391 27
  # index_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rax 
  .loc 2 392 50
  # $11.1: @IR_Value = call(get_index_value_200, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-49], rax
  call get_index_value_200
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $11.1:rax 
  .loc 2 392 9
  # call(generate_load_value_30, self.1, index_register.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-49]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] 
  .loc 2 393 13
  # $12.1: Boolean = result_value_type_size.1 > 1
  cmp QWORD PTR [rbp-32], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:rax 
  # jump($12.1, .LABEL__generate_load_array_item_instruction_17__5, .LABEL__generate_load_array_item_instruction_17__6)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_array_item_instruction_17__6
.LABEL__generate_load_array_item_instruction_17__5:
  .loc 2 394 13
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $13.1:rbx 
  .loc 2 394 13
  # $14.1: @FILE = call(write_332, $13.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_332
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $14.1:rax 
  .loc 2 394 53
  # $15.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rbx:[rbp-49] $12.1:[rbp-50] $14.1:rax $15.1:r15 
  .loc 2 394 13
  # $16.1: @FILE = call(write_332, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $16.1:rax 
  .loc 2 394 13
  # $17.1: @FILE = call(write_332, $16.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $17.1:rax 
  .loc 2 394 13
  # $18.1: @FILE = call(write_331, $17.1, result_value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_331
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $18.1:rax 
  .loc 2 394 13
  # $19.1: @FILE = call(end_line_335, $18.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__generate_load_array_item_instruction_17__6)
.LABEL__generate_load_array_item_instruction_17__6:
  .loc 2 396 9
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $20.1:rbx 
  .loc 2 396 9
  # $21.1: @FILE = call(write_332, $20.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_332
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $21.1:rax 
  .loc 2 396 48
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $21.1:rax $22.1:r15 
  .loc 2 396 9
  # $23.1: @FILE = call(write_332, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $23.1:rax 
  .loc 2 396 9
  # $24.1: @FILE = call(write_332, $23.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $24.1:rax 
  .loc 2 396 90
  # $25.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rbx:[rbp-49] $12.1:[rbp-50] $24.1:rax $25.1:r15 
  .loc 2 396 9
  # $26.1: @FILE = call(write_332, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $26.1:rax 
  .loc 2 396 9
  # $27.1: @FILE = call(end_line_335, $26.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__generate_load_array_item_instruction_17__3)
  jmp .LABEL__generate_load_array_item_instruction_17__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [discarded value]: index_value.1
  # [discarded value]: result_value_type_size.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_array_item_instruction_17__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_array_item_instruction_17__stack_frame_size: .word 80

  .loc 2 411 1
  .text
generate_load_function_address_instruction_18:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_function_address_instruction_18__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_function_address_instruction_18__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Function_Address_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 412 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 413 5
  # $2.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] result_register.1:rax $2.1:r15 
  .loc 2 413 5
  # $3.1: @FILE = call(write_332, $2.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-24], rax
  call write_332
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  .loc 2 413 44
  # $4.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] $3.1:rax $4.1:r15 
  .loc 2 413 5
  # $5.1: @FILE = call(write_332, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  .loc 2 413 5
  # $6.1: @FILE = call(write_332, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  .loc 2 413 101
  # $7.1: @IR_Function = load_struct_member(instruction.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] result_register.1:[rbp-24] $6.1:rax $7.1:r15 
  .loc 2 413 5
  # $8.1: @FILE = call(write_function_label_4, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $8.1:rax 
  .loc 2 413 5
  # $9.1: @FILE = call(write_332, $8.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_332
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $9.1:rax 
  .loc 2 413 5
  # $10.1: @FILE = call(end_line_335, $9.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 414 29
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] result_register.1:[rbp-24] $11.1:rbx 
  .loc 2 414 5
  # $12.1: @MC_Value = call(map_variable_value_40, self.1, $11.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_40
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: result_register.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_load_function_address_instruction_18__end
  # [live values]: 
.LABEL__generate_load_function_address_instruction_18__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_function_address_instruction_18__stack_frame_size: .word 32

  .loc 2 417 1
  .text
generate_load_variable_instruction_19:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_instruction_19__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_instruction_19__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 418 9
  # $1.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rax, [rsi+65]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # IR_Function_Parameter.2: @Object_Type = load_variable(IR_Function_Parameter)
  lea rbx, IR_Function_Parameter[rip]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax IR_Function_Parameter.2:rbx 
  .loc 2 418 9
  # $2.1: Boolean = call(is_338, $1.1, IR_Function_Parameter.2)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_338
  # [discarded value]: IR_Function_Parameter.2
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__generate_load_variable_instruction_19__2, .LABEL__generate_load_variable_instruction_19__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_load_variable_instruction_19__4
.LABEL__generate_load_variable_instruction_19__2:
  .loc 2 419 22
  # parameter.1: @IR_Function_Parameter = load_struct_member(instruction.1, variable)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx 
  .loc 2 420 28
  # $47.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov r15, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $47.1:r15 
  .loc 2 420 28
  # $48.1: @IR_Function = load_struct_member($47.1, function)
  mov r14, [r15+16]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $48.1:r14 
  .loc 2 420 28
  # $49.1: @List = load_struct_member($48.1, parameters)
  mov r15, [r14+32]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $49.1:r15 
  .loc 2 420 28
  # parameter_index.1: Int = call(index_of_320, $49.1, parameter.1)
  mov rdi, r15
  mov rsi, rbx
  call index_of_320
  # [discarded value]: $49.1
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:rax 
  .loc 2 421 13
  # $51.1: Boolean = parameter_index.1 < 0
  cmp rax, 0
  setl bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:rax $51.1:rbx 
  # jump($51.1, .LABEL__generate_load_variable_instruction_19__25, .LABEL__generate_load_variable_instruction_19__26)
  test bl, bl
  mov [rbp-25], rax
  mov [rbp-26], bl
  jz .LABEL__generate_load_variable_instruction_19__26
.LABEL__generate_load_variable_instruction_19__25:
  .loc 2 422 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] 
.LABEL__generate_load_variable_instruction_19__26:
  .loc 2 424 13
  # $52.1: Boolean = parameter_index.1 == 0
  cmp QWORD PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:rax 
  # jump($52.1, .LABEL__generate_load_variable_instruction_19__27, .LABEL__generate_load_variable_instruction_19__29)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_load_variable_instruction_19__29
.LABEL__generate_load_variable_instruction_19__27:
  .loc 2 425 37
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $74.1:rbx 
  .loc 2 425 63
  # $75.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov r15, [rbp-8]
  mov r14, [r15+57]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $74.1:rbx $75.1:r14 
  .loc 2 425 13
  # $76.1: @MC_Value = call(map_variable_value_40, self.1, $74.1, $75.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
.LABEL__generate_load_variable_instruction_19__3:
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] 
.LABEL__generate_load_variable_instruction_19__29:
  .loc 2 426 20
  # $53.1: Boolean = parameter_index.1 == 1
  cmp QWORD PTR [rbp-25], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:rax 
  # jump($53.1, .LABEL__generate_load_variable_instruction_19__30, .LABEL__generate_load_variable_instruction_19__32)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_load_variable_instruction_19__32
.LABEL__generate_load_variable_instruction_19__30:
  .loc 2 427 37
  # $71.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $71.1:rbx 
  .loc 2 427 63
  # $72.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov r15, [rbp-8]
  mov r14, [r15+49]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $71.1:rbx $72.1:r14 
  .loc 2 427 13
  # $73.1: @MC_Value = call(map_variable_value_40, self.1, $71.1, $72.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] 
.LABEL__generate_load_variable_instruction_19__32:
  .loc 2 428 20
  # $54.1: Boolean = parameter_index.1 == 2
  cmp QWORD PTR [rbp-25], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:rax 
  # jump($54.1, .LABEL__generate_load_variable_instruction_19__33, .LABEL__generate_load_variable_instruction_19__35)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_load_variable_instruction_19__35
.LABEL__generate_load_variable_instruction_19__33:
  .loc 2 429 37
  # $68.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $68.1:rbx 
  .loc 2 429 63
  # $69.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov r15, [rbp-8]
  mov r14, [r15+33]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $68.1:rbx $69.1:r14 
  .loc 2 429 13
  # $70.1: @MC_Value = call(map_variable_value_40, self.1, $68.1, $69.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] 
.LABEL__generate_load_variable_instruction_19__35:
  .loc 2 430 20
  # $55.1: Boolean = parameter_index.1 == 3
  cmp QWORD PTR [rbp-25], 3
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:rax 
  # jump($55.1, .LABEL__generate_load_variable_instruction_19__36, .LABEL__generate_load_variable_instruction_19__38)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_load_variable_instruction_19__38
.LABEL__generate_load_variable_instruction_19__36:
  .loc 2 431 37
  # $65.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $65.1:rbx 
  .loc 2 431 63
  # $66.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov r15, [rbp-8]
  mov r14, [r15+25]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $65.1:rbx $66.1:r14 
  .loc 2 431 13
  # $67.1: @MC_Value = call(map_variable_value_40, self.1, $65.1, $66.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] 
.LABEL__generate_load_variable_instruction_19__38:
  .loc 2 432 20
  # $56.1: Boolean = parameter_index.1 == 4
  cmp QWORD PTR [rbp-25], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:rax 
  # jump($56.1, .LABEL__generate_load_variable_instruction_19__39, .LABEL__generate_load_variable_instruction_19__41)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_load_variable_instruction_19__41
.LABEL__generate_load_variable_instruction_19__39:
  .loc 2 433 37
  # $62.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $62.1:rbx 
  .loc 2 433 63
  # $63.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov r15, [rbp-8]
  mov r14, [r15+81]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $62.1:rbx $63.1:r14 
  .loc 2 433 13
  # $64.1: @MC_Value = call(map_variable_value_40, self.1, $62.1, $63.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] 
.LABEL__generate_load_variable_instruction_19__41:
  .loc 2 434 20
  # $57.1: Boolean = parameter_index.1 == 5
  cmp QWORD PTR [rbp-25], 5
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:rax 
  # jump($57.1, .LABEL__generate_load_variable_instruction_19__42, .LABEL__generate_load_variable_instruction_19__44)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_load_variable_instruction_19__44
.LABEL__generate_load_variable_instruction_19__42:
  .loc 2 435 37
  # $59.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:[rbp-32] $59.1:rbx 
  .loc 2 435 63
  # $60.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov r15, [rbp-8]
  mov r14, [r15+89]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:[rbp-32] $59.1:rbx $60.1:r14 
  .loc 2 435 13
  # $61.1: @MC_Value = call(map_variable_value_40, self.1, $59.1, $60.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:[rbp-32] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:[rbp-32] 
.LABEL__generate_load_variable_instruction_19__44:
  .loc 2 437 24
  # $58.1: @String = call(clone_340, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call clone_340
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:[rbp-32] $58.1:rax 
  .loc 2 437 13
  # call(abort_34, self.1, $58.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] $57.1:[rbp-32] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] $56.1:[rbp-31] 
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] $55.1:[rbp-30] 
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] $54.1:[rbp-29] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] $53.1:[rbp-28] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] $52.1:[rbp-27] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $51.1:[rbp-26] 
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] 
  # [discarded value]: parameter_index.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__generate_load_variable_instruction_19__4:
  .loc 2 439 16
  # $3.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  # IR_Global_Variable.3: @Object_Type = load_variable(IR_Global_Variable)
  lea r15, IR_Global_Variable[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx IR_Global_Variable.3:r15 
  .loc 2 439 16
  # $4.1: Boolean = call(is_338, $3.1, IR_Global_Variable.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Global_Variable.3
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__generate_load_variable_instruction_19__5, .LABEL__generate_load_variable_instruction_19__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__generate_load_variable_instruction_19__7
.LABEL__generate_load_variable_instruction_19__5:
  .loc 2 440 30
  # ir_variable_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:rbx 
  .loc 2 441 21
  # mc_value.1: @MC_Value = call(get_value_41, self.1, ir_variable_value.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-26], rbx
  call get_value_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:rax 
  .loc 2 442 13
  # $12.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__generate_load_variable_instruction_19__8, .LABEL__generate_load_variable_instruction_19__9)
  test bl, bl
  mov [rbp-34], rax
  mov [rbp-35], bl
  jz .LABEL__generate_load_variable_instruction_19__9
.LABEL__generate_load_variable_instruction_19__8:
  .loc 2 443 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] 
.LABEL__generate_load_variable_instruction_19__9:
  .loc 2 445 20
  # address.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:rax:[rbp-34] $12.1:[rbp-35] address.1:rbx 
  .loc 2 446 13
  # $14.1: Boolean = address.1 != null
  cmp rbx, 0
  setne r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:rax:[rbp-34] $12.1:[rbp-35] address.1:rbx $14.1:r15 
  # jump($14.1, .LABEL__generate_load_variable_instruction_19__10, .LABEL__generate_load_variable_instruction_19__11)
  test r15b, r15b
  mov [rbp-43], rbx
  mov [rbp-44], r15b
  jz .LABEL__generate_load_variable_instruction_19__11
.LABEL__generate_load_variable_instruction_19__10:
  # MC_Global_Variable_Address.2: @Object_Type = load_variable(MC_Global_Variable_Address)
  lea rax, MC_Global_Variable_Address[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] MC_Global_Variable_Address.2:rax 
  .loc 2 447 17
  # $15.1: Boolean = call(is_338, address.1, MC_Global_Variable_Address.2)
  mov rdi, [rbp-43]
  mov rsi, rax
  call is_338
  # [discarded value]: MC_Global_Variable_Address.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $15.1:rax 
  .loc 2 447 17
  # $16.1: Boolean = $15.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:rbx 
  # jump($16.1, .LABEL__generate_load_variable_instruction_19__12, .LABEL__generate_load_variable_instruction_19__13)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__generate_load_variable_instruction_19__13
.LABEL__generate_load_variable_instruction_19__12:
  .loc 2 448 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] 
.LABEL__generate_load_variable_instruction_19__13:
  .loc 2 450 24
  # address.1: @MC_Global_Variable_Address = address.1
  mov rax, [rbp-43]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] address.1:rax 
  .loc 2 451 17
  # $18.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  mov rbx, [rax+8]
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] $18.1:rbx 
  .loc 2 451 40
  # $19.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rax, [rbp-26]
  mov r15, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:rax:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] $18.1:rbx $19.1:r15 
  .loc 2 451 17
  # $20.1: Boolean = $18.1 != $19.1
  cmp rbx, r15
  setne r14b
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:rax:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] $20.1:r14 
  # jump($20.1, .LABEL__generate_load_variable_instruction_19__14, .LABEL__generate_load_variable_instruction_19__15)
  test r14b, r14b
  mov [rbp-46], r14b
  jz .LABEL__generate_load_variable_instruction_19__15
.LABEL__generate_load_variable_instruction_19__14:
  .loc 2 452 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] $20.1:[rbp-46] 
.LABEL__generate_load_variable_instruction_19__15:
  .loc 2 454 13
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] $20.1:[rbp-46] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] $16.1:[rbp-45] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] 
.LABEL__generate_load_variable_instruction_19__11:
  .loc 2 456 24
  # ir_variable.1: @IR_Global_Variable = load_struct_member(instruction.1, variable)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rbx 
  .loc 2 457 13
  # $23.1: Boolean = load_struct_member(ir_variable.1, is_external)
  mov r15b, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rbx $23.1:r15 
  # jump($23.1, .LABEL__generate_load_variable_instruction_19__17, .LABEL__generate_load_variable_instruction_19__18)
  test r15b, r15b
  mov [rbp-52], rbx
  mov [rbp-53], r15b
  jz .LABEL__generate_load_variable_instruction_19__18
.LABEL__generate_load_variable_instruction_19__17:
  .loc 2 459 37
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $24.1:rbx 
  .loc 2 459 63
  # $25.1: @MC_Global_Variable_Address = new(MC_Global_Variable_Address)
  mov [rbp-61], rbx
  mov rdi, 16
  call malloc
  lea rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $24.1:[rbp-61] $25.1:rax 
  # store_struct_member($25.1, ir_variable, ir_variable.1)
  mov rbx, [rbp-52]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rbx:[rbp-52] $23.1:[rbp-53] $24.1:[rbp-61] $25.1:rax 
  .loc 2 459 13
  # call(map_variable_value_39, self.1, $24.1, $25.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-61]
  mov rdx, rax
  call map_variable_value_39
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] 
  .loc 2 460 13
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] 
.LABEL__generate_load_variable_instruction_19__18:
  .loc 2 462 13
  # $26.1: @IR_Type = load_struct_member(ir_variable.1, type)
  mov rax, [rbp-52]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rax:[rbp-52] $23.1:[rbp-53] $26.1:rbx 
  # IR_Pointer_Type.2: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rax:[rbp-52] $23.1:[rbp-53] $26.1:rbx IR_Pointer_Type.2:r15 
  .loc 2 462 13
  # $27.1: Boolean = call(is_338, $26.1, IR_Pointer_Type.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Pointer_Type.2
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:rax 
  # jump($27.1, .LABEL__generate_load_variable_instruction_19__20, .LABEL__generate_load_variable_instruction_19__21)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_load_variable_instruction_19__21
.LABEL__generate_load_variable_instruction_19__20:
  .loc 2 463 30
  # $29.1: @IR_Pointer_Type = load_struct_member(ir_variable.1, type)
  mov rax, [rbp-52]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rax:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $29.1:rbx 
  .loc 2 463 29
  # pointed_type.1: @IR_Type = load_struct_member($29.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rax:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] pointed_type.1:r15 
  .loc 2 464 17
  # $31.1: @String = load_struct_member(pointed_type.1, name)
  mov rbx, [r15+8]
  # [discarded value]: pointed_type.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rax:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $31.1:rbx 
  .loc 2 464 17
  # $32.1: Boolean = call(equals_341, $31.1, "Object_Type")
  mov rdi, rbx
  lea rsi, .LABEL__string_62[rip] # "Object_Type"
  call equals_341
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:rax 
  # jump($32.1, .LABEL__generate_load_variable_instruction_19__22, .LABEL__generate_load_variable_instruction_19__21)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_load_variable_instruction_19__21
.LABEL__generate_load_variable_instruction_19__22:
  .loc 2 465 36
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:rax 
  .loc 2 466 17
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:rax $34.1:r15 
  .loc 2 466 17
  # $35.1: @FILE = call(write_332, $34.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-63], rax
  call write_332
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $35.1:rax 
  .loc 2 466 56
  # $36.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-63]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:rbx:[rbp-63] $35.1:rax $36.1:r15 
  .loc 2 466 17
  # $37.1: @FILE = call(write_332, $35.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $37.1:rax 
  .loc 2 466 17
  # $38.1: @FILE = call(write_332, $37.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $38.1:rax 
  .loc 2 466 98
  # $39.1: @String = load_struct_member(ir_variable.1, name)
  mov rbx, [rbp-52]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:rbx:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $38.1:rax $39.1:r15 
  .loc 2 466 17
  # $40.1: @FILE = call(write_332, $38.1, $39.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $40.1:rax 
  .loc 2 466 17
  # $41.1: @FILE = call(write_332, $40.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_332
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $41.1:rax 
  .loc 2 466 17
  # $42.1: @FILE = call(end_line_335, $41.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] 
  .loc 2 467 41
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] result_register.1:[rbp-63] $43.1:rbx 
  .loc 2 467 17
  # $44.1: @MC_Value = call(map_variable_value_40, self.1, $43.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-63]
  call map_variable_value_40
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] 
  .loc 2 468 17
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] 
.LABEL__generate_load_variable_instruction_19__21:
  .loc 2 471 9
  # call(abort_34, self.1, "Unsupported non-external variable")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_63[rip] # "Unsupported non-external variable"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] $32.1:[rbp-55] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] $27.1:[rbp-54] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] $23.1:[rbp-53] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] ir_variable.1:[rbp-52] 
  # [discarded value]: ir_variable.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] $14.1:[rbp-44] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] address.1:[rbp-43] 
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] $12.1:[rbp-35] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] ir_variable_value.1:[rbp-26] mc_value.1:[rbp-34] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_variable_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__generate_load_variable_instruction_19__7:
  .loc 2 473 20
  # $5.1: @String = call(clone_340, "Unsupported variable type: ")
  lea rdi, .LABEL__string_64[rip] # "Unsupported variable type: "
  call clone_340
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 2 473 64
  # $6.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rax $6.1:r15 
  .loc 2 473 64
  # $7.1: @Object_Type = load_struct_member($6.1, object_type)
  mov r14, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rax $7.1:r14 
  .loc 2 473 64
  # $8.1: @String = load_struct_member_address($7.1, name)
  mov r15, r14
  add r15, 8
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rax $8.1:r15 
  .loc 2 473 20
  # $9.1: @String = call(append_349, $5.1, $8.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $8.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $9.1:rax 
  .loc 2 473 9
  # call(abort_34, self.1, $9.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_variable_instruction_19__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_instruction_19__stack_frame_size: .word 64

  .loc 2 477 1
  .text
generate_load_struct_member_instruction_20:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_struct_member_instruction_20__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_struct_member_instruction_20__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 478 32
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_205, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_205
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  # IR_Variable_Value.5: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax IR_Variable_Value.5:rbx 
  .loc 2 480 9
  # $2.1: Boolean = call(is_338, ir_struct_pointer_value.1, IR_Variable_Value.5)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Variable_Value.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_load_struct_member_instruction_20__2, .LABEL__generate_load_struct_member_instruction_20__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_load_struct_member_instruction_20__4
.LABEL__generate_load_struct_member_instruction_20__2:
  .loc 2 481 36
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:rax 
  .loc 2 482 36
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_41, self.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-33], rax
  call get_value_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax 
  .loc 2 483 13
  # $6.1: Boolean = mc_struct_pointer_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__generate_load_struct_member_instruction_20__5, .LABEL__generate_load_struct_member_instruction_20__6)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__generate_load_struct_member_instruction_20__6
.LABEL__generate_load_struct_member_instruction_20__5:
  .loc 2 484 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
.LABEL__generate_load_struct_member_instruction_20__6:
  .loc 2 486 35
  # struct_pointer_register.3: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:rbx 
  .loc 2 487 13
  # $8.1: Boolean = struct_pointer_register.3 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:rbx $8.1:r15 
  # jump($8.1, .LABEL__generate_load_struct_member_instruction_20__7, .LABEL__generate_load_struct_member_instruction_20__3)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__3
.LABEL__generate_load_struct_member_instruction_20__7:
  .loc 2 488 17
  # $9.1: @MC_Address = load_struct_member(mc_struct_pointer_value.1, address)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $9.1:rbx 
  .loc 2 488 17
  # $10.1: Boolean = $9.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:r15 
  # jump($10.1, .LABEL__generate_load_struct_member_instruction_20__9, .LABEL__generate_load_struct_member_instruction_20__10)
  test r15b, r15b
  mov [rbp-52], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__10
.LABEL__generate_load_struct_member_instruction_20__9:
  .loc 2 489 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] 
.LABEL__generate_load_struct_member_instruction_20__10:
  .loc 2 491 39
  # struct_pointer_register.4: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:rax:[rbp-50] 
  .loc 2 492 13
  # call(generate_load_value_30, self.1, struct_pointer_register.4, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 493 13
  # $12.1: @MC_Value = call(map_variable_value_40, self.1, ir_struct_pointer_value.1, struct_pointer_register.4)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, [rbp-50]
  call map_variable_value_40
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__3)
.LABEL__generate_load_struct_member_instruction_20__3:
  # struct_pointer_register.8: @MC_Register = phi(struct_pointer_register.2, struct_pointer_register.4, struct_pointer_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 501 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rax struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 502 29
  # $14.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rax $14.1:r15 struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 502 5
  # $15.1: @MC_Value = call(map_variable_value_40, self.1, $14.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  mov [rbp-60], rax
  call map_variable_value_40
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 503 50
  # $16.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] $16.1:rbx struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 503 34
  # struct_type_member_offset.1: Int = call(get_offset_32, self.1, $16.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_32
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:rax struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 504 9
  # $18.1: Boolean = load_struct_member(instruction.1, load_address)
  mov rbx, [rbp-16]
  mov r15b, [rbx+73]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:rax $18.1:r15 struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # jump($18.1, .LABEL__generate_load_struct_member_instruction_20__11, .LABEL__generate_load_struct_member_instruction_20__13)
  test r15b, r15b
  mov [rbp-68], rax
  mov [rbp-69], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__13
.LABEL__generate_load_struct_member_instruction_20__11:
  .loc 2 505 9
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $45.1:rbx 
  .loc 2 505 9
  # $46.1: @FILE = call(write_332, $45.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $46.1:rax 
  .loc 2 505 48
  # $47.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rbx:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $46.1:rax $47.1:r15 
  .loc 2 505 9
  # $48.1: @FILE = call(write_332, $46.1, $47.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $48.1:rax 
  .loc 2 505 9
  # $49.1: @FILE = call(write_332, $48.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $49.1:rax 
  .loc 2 505 90
  # $50.1: @String = load_struct_member(struct_pointer_register.8, name_q)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $49.1:rax $50.1:r15 
  .loc 2 505 9
  # $51.1: @FILE = call(write_332, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $51.1:rax 
  .loc 2 505 9
  # $52.1: @FILE = call(end_line_335, $51.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 506 13
  # $53.1: Boolean = struct_type_member_offset.1 > 0
  cmp QWORD PTR [rbp-68], 0
  setg al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:rax 
  # jump($53.1, .LABEL__generate_load_struct_member_instruction_20__26, .LABEL__generate_load_struct_member_instruction_20__12)
  test al, al
  mov [rbp-70], al
  jz .LABEL__generate_load_struct_member_instruction_20__12
.LABEL__generate_load_struct_member_instruction_20__26:
  .loc 2 507 13
  # $54.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $54.1:rbx 
  .loc 2 507 13
  # $55.1: @FILE = call(write_332, $54.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_332
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $55.1:rax 
  .loc 2 507 52
  # $56.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rbx:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $55.1:rax $56.1:r15 
  .loc 2 507 13
  # $57.1: @FILE = call(write_332, $55.1, $56.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $57.1:rax 
  .loc 2 507 13
  # $58.1: @FILE = call(write_332, $57.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $58.1:rax 
  .loc 2 507 13
  # $59.1: @FILE = call(write_331, $58.1, struct_type_member_offset.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_331
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $59.1:rax 
  .loc 2 507 13
  # $60.1: @FILE = call(end_line_335, $59.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__12)
.LABEL__generate_load_struct_member_instruction_20__12:
  .loc 2 525 5
  # store_struct_member(struct_pointer_register.8, is_reserved, false)
  mov rax, [rbp-50]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rax:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # return()
  jmp .LABEL__generate_load_struct_member_instruction_20__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
.LABEL__generate_load_struct_member_instruction_20__13:
  .loc 2 510 54
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $19.1:rbx 
  .loc 2 510 54
  # $20.1: @IR_Type = load_struct_member($19.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $20.1:r15 
  .loc 2 510 35
  # result_value_type_size.1: Int = call(get_type_size_54, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call get_type_size_54
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:rax 
  .loc 2 511 9
  # $22.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:rax $22.1:r15 
  .loc 2 511 9
  # $23.1: @FILE = call(write_332, $22.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  mov [rbp-77], rax
  call write_332
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] 
  .loc 2 512 13
  # $24.1: Boolean = result_value_type_size.1 == 8
  cmp QWORD PTR [rbp-77], 8
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:rax 
  # jump($24.1, .LABEL__generate_load_struct_member_instruction_20__14, .LABEL__generate_load_struct_member_instruction_20__16)
  test al, al
  mov [rbp-78], al
  jz .LABEL__generate_load_struct_member_instruction_20__16
.LABEL__generate_load_struct_member_instruction_20__14:
  .loc 2 513 13
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $37.1:rbx 
  .loc 2 513 36
  # $38.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-60]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $37.1:rbx $38.1:r14 
  .loc 2 513 13
  # $39.1: @FILE = call(write_332, $37.1, $38.1)
  mov rdi, rbx
  mov rsi, r14
  call write_332
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
.LABEL__generate_load_struct_member_instruction_20__15:
  .loc 2 523 9
  # $40.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $40.1:rbx 
  .loc 2 523 9
  # $41.1: @FILE = call(write_332, $40.1, ", ")
  mov rdi, rbx
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:rax 
  .loc 2 523 44
  # $42.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:[rbp-86] $42.1:rax 
  # store_struct_member($42.1, register, struct_pointer_register.8)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:[rbp-86] $42.1:rax 
  # store_struct_member($42.1, offset, struct_type_member_offset.1)
  mov r15, [rbp-68]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:r15:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:[rbp-86] $42.1:rax 
  .loc 2 523 9
  # $43.1: @FILE = call(write_53, $41.1, $42.1)
  mov rdi, [rbp-86]
  mov rsi, rax
  call write_53
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $43.1:rax 
  .loc 2 523 9
  # $44.1: @FILE = call(end_line_335, $43.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__12)
  jmp .LABEL__generate_load_struct_member_instruction_20__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
.LABEL__generate_load_struct_member_instruction_20__16:
  .loc 2 514 20
  # $25.1: Boolean = result_value_type_size.1 == 4
  cmp QWORD PTR [rbp-77], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:rax 
  # jump($25.1, .LABEL__generate_load_struct_member_instruction_20__17, .LABEL__generate_load_struct_member_instruction_20__19)
  test al, al
  mov [rbp-79], al
  jz .LABEL__generate_load_struct_member_instruction_20__19
.LABEL__generate_load_struct_member_instruction_20__17:
  .loc 2 515 13
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $34.1:rbx 
  .loc 2 515 36
  # $35.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-60]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $34.1:rbx $35.1:r14 
  .loc 2 515 13
  # $36.1: @FILE = call(write_332, $34.1, $35.1)
  mov rdi, rbx
  mov rsi, r14
  call write_332
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
.LABEL__generate_load_struct_member_instruction_20__19:
  .loc 2 516 20
  # $26.1: Boolean = result_value_type_size.1 == 2
  cmp QWORD PTR [rbp-77], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:rax 
  # jump($26.1, .LABEL__generate_load_struct_member_instruction_20__20, .LABEL__generate_load_struct_member_instruction_20__22)
  test al, al
  mov [rbp-80], al
  jz .LABEL__generate_load_struct_member_instruction_20__22
.LABEL__generate_load_struct_member_instruction_20__20:
  .loc 2 517 13
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $31.1:rbx 
  .loc 2 517 36
  # $32.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-60]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $31.1:rbx $32.1:r14 
  .loc 2 517 13
  # $33.1: @FILE = call(write_332, $31.1, $32.1)
  mov rdi, rbx
  mov rsi, r14
  call write_332
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
.LABEL__generate_load_struct_member_instruction_20__22:
  .loc 2 518 20
  # $27.1: Boolean = result_value_type_size.1 == 1
  cmp QWORD PTR [rbp-77], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:rax 
  # jump($27.1, .LABEL__generate_load_struct_member_instruction_20__23, .LABEL__generate_load_struct_member_instruction_20__25)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_load_struct_member_instruction_20__25
.LABEL__generate_load_struct_member_instruction_20__23:
  .loc 2 519 13
  # $28.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] $28.1:rbx 
  .loc 2 519 36
  # $29.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-60]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] $28.1:rbx $29.1:r14 
  .loc 2 519 13
  # $30.1: @FILE = call(write_332, $28.1, $29.1)
  mov rdi, rbx
  mov rsi, r14
  call write_332
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
.LABEL__generate_load_struct_member_instruction_20__25:
  .loc 2 521 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] 
  # [discarded value]: result_value_type_size.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: result_register.1
  # [discarded value]: struct_pointer_register.8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: struct_pointer_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] 
  # [discarded value]: struct_pointer_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] 
  # [discarded value]: mc_struct_pointer_value.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_load_struct_member_instruction_20__4:
  .loc 2 496 35
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 497 9
  # store_struct_member(struct_pointer_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 498 9
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:[rbp-50] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__3)
  jmp .LABEL__generate_load_struct_member_instruction_20__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:[rbp-50] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_struct_member_instruction_20__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_struct_member_instruction_20__stack_frame_size: .word 96

  .loc 2 528 1
  .text
generate_modulo_instruction_21:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_modulo_instruction_21__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_modulo_instruction_21__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Modulo_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 529 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 529 5
  # call(release_register_46, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_46
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 530 30
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  .loc 2 530 49
  # $3.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_227
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 2 530 5
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 531 5
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  .loc 2 531 5
  # store_struct_member($4.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 532 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  .loc 2 532 5
  # call(release_register_46, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 533 5
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  .loc 2 533 5
  # store_struct_member($6.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 534 5
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  .loc 2 534 5
  # $8.1: @FILE = call(write_332, $7.1, "  cqto")
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  cqto"
  call write_332
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 534 5
  # $9.1: @FILE = call(end_line_335, $8.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 535 20
  # right_value.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-8]
  call get_right_value_228
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  # IR_Constant_Value.4: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax IR_Constant_Value.4:rbx 
  .loc 2 536 9
  # $11.1: Boolean = call(is_338, right_value.1, IR_Constant_Value.4)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Constant_Value.4
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, .LABEL__generate_modulo_instruction_21__2, .LABEL__generate_modulo_instruction_21__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_modulo_instruction_21__4
.LABEL__generate_modulo_instruction_21__2:
  .loc 2 537 21
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 538 9
  # store_struct_member(register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 539 9
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-33], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 540 9
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $17.1:rbx 
  .loc 2 540 9
  # $18.1: @FILE = call(write_332, $17.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_332
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $18.1:rax 
  .loc 2 540 49
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rbx:[rbp-33] $18.1:rax $19.1:r15 
  .loc 2 540 9
  # $20.1: @FILE = call(write_332, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $20.1:rax 
  .loc 2 540 9
  # $21.1: @FILE = call(end_line_335, $20.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 541 9
  # store_struct_member(register.1, is_reserved, false)
  mov rax, [rbp-33]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
.LABEL__generate_modulo_instruction_21__3:
  .loc 2 545 5
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $22.1:rbx 
  .loc 2 545 5
  # store_struct_member($22.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 546 5
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $23.1:rbx 
  .loc 2 546 5
  # store_struct_member($23.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 547 29
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 
  .loc 2 547 55
  # $25.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov r14, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 $25.1:r14 
  .loc 2 547 5
  # $26.1: @MC_Value = call(map_variable_value_40, self.1, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_modulo_instruction_21__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
.LABEL__generate_modulo_instruction_21__4:
  .loc 2 543 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $12.1:rbx 
  .loc 2 543 9
  # $13.1: @FILE = call(write_332, $12.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_332
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $13.1:rax 
  .loc 2 543 9
  # $14.1: @FILE = call(write_operand_33, $13.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_33
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $14.1:rax 
  .loc 2 543 9
  # $15.1: @FILE = call(end_line_335, $14.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
  jmp .LABEL__generate_modulo_instruction_21__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: right_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_modulo_instruction_21__end:
  mov rsp, rbp
  pop rbp
  ret

generate_modulo_instruction_21__stack_frame_size: .word 48

  .loc 2 550 1
  .text
generate_multiply_instruction_22:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_multiply_instruction_22__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_multiply_instruction_22__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Multiply_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 551 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 552 47
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_227
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 552 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 553 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 553 5
  # $4.1: @MC_Value = call(map_variable_value_40, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_40
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 554 5
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 554 5
  # $6.1: @FILE = call(write_332, $5.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  .loc 2 554 45
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 554 5
  # $8.1: @FILE = call(write_332, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 554 5
  # $9.1: @FILE = call(write_332, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 554 101
  # $10.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  .loc 2 554 5
  # $11.1: @FILE = call(write_operand_33, $9.1, self.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_33
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: self.1
  # [live values]: $11.1:rax 
  .loc 2 554 5
  # $12.1: @FILE = call(end_line_335, $11.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_multiply_instruction_22__end
  # [live values]: 
.LABEL__generate_multiply_instruction_22__end:
  mov rsp, rbp
  pop rbp
  ret

generate_multiply_instruction_22__stack_frame_size: .word 32

  .loc 2 557 1
  .text
generate_new_instruction_23:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_new_instruction_23__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_new_instruction_23__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_New_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 558 5
  # call(release_all_registers_45, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_45
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 559 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $1.1:rbx 
  .loc 2 559 5
  # $2.1: @FILE = call(write_332, $1.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  .loc 2 559 44
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rbx, [rbp-16]
  mov r15, [rbx+57]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $3.1:r15 
  .loc 2 559 44
  # $4.1: @String = load_struct_member($3.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $4.1:r14 
  .loc 2 559 5
  # $5.1: @FILE = call(write_332, $2.1, $4.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  .loc 2 559 5
  # $6.1: @FILE = call(write_332, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  .loc 2 559 107
  # $7.1: @IR_Type = load_struct_member(instruction.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 559 88
  # $8.1: Int = call(get_type_size_54, self.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call get_type_size_54
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:[rbp-24] $8.1:rax 
  .loc 2 559 5
  # $9.1: @FILE = call(write_331, $6.1, $8.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call write_331
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 559 5
  # $10.1: @FILE = call(end_line_335, $9.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 560 9
  # $11.1: @IR_Value = call(get_size_value_210, instruction.1)
  mov rdi, [rbp-8]
  call get_size_value_210
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:rax 
  .loc 2 560 9
  # $12.1: Boolean = $11.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rbx 
  # jump($12.1, .LABEL__generate_new_instruction_23__2, .LABEL__generate_new_instruction_23__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__generate_new_instruction_23__3
.LABEL__generate_new_instruction_23__2:
  .loc 2 561 9
  # call(abort_34, self.1, "TODO: compute array size")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_65[rip] # "TODO: compute array size"
  call abort_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] 
.LABEL__generate_new_instruction_23__3:
  .loc 2 563 5
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $13.1:rbx 
  .loc 2 563 5
  # $14.1: @FILE = call(write_332, $13.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  call "
  call write_332
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $14.1:rax 
  .loc 2 563 5
  # $15.1: @FILE = call(write_332, $14.1, "malloc")
  mov rdi, rax
  lea rsi, .LABEL__string_66[rip] # "malloc"
  call write_332
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $15.1:rax 
  .loc 2 563 5
  # $16.1: @FILE = call(end_line_335, $15.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] 
  .loc 2 564 29
  # $17.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $12.1:[rbp-17] $17.1:rbx 
  .loc 2 564 55
  # $18.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r15, [rbp-16]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] $12.1:[rbp-17] $17.1:rbx $18.1:r14 
  .loc 2 564 5
  # $19.1: @MC_Value = call(map_variable_value_40, self.1, $17.1, $18.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_40
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] 
  .loc 2 566 9
  # $20.1: @IR_Type = load_struct_member(instruction.1, type)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $12.1:[rbp-17] $20.1:rbx 
  # IR_Struct_Type.2: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $12.1:[rbp-17] $20.1:rbx IR_Struct_Type.2:r15 
  .loc 2 566 9
  # $22.1: Boolean = call(is_338, $20.1, IR_Struct_Type.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.2
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:rax 
  # jump($22.1, .LABEL__generate_new_instruction_23__4, .LABEL__generate_new_instruction_23__5)
  test al, al
  mov [rbp-18], al
  jz .LABEL__generate_new_instruction_23__5
.LABEL__generate_new_instruction_23__4:
  .loc 2 566 49
  # $24.1: @IR_Struct_Type = load_struct_member(instruction.1, type)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $24.1:rbx 
  .loc 2 566 48
  # $22.2: Boolean = call(is_object_type_152, $24.1)
  mov rdi, rbx
  call is_object_type_152
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:rax:[rbp-18] 
  # jump(.LABEL__generate_new_instruction_23__5)
  mov [rbp-18], al
.LABEL__generate_new_instruction_23__5:
  .loc 2 566 9
  # $22.3: Boolean = phi($22.1, $22.2)
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] 
  # jump($22.3, .LABEL__generate_new_instruction_23__6, .LABEL__generate_new_instruction_23__7)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__generate_new_instruction_23__7
.LABEL__generate_new_instruction_23__6:
  .loc 2 567 21
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:rax 
  .loc 2 568 9
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:rax $27.1:r15 
  .loc 2 568 9
  # $28.1: @FILE = call(write_332, $27.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-26], rax
  call write_332
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $28.1:rax 
  .loc 2 568 48
  # $29.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:rbx:[rbp-26] $28.1:rax $29.1:r15 
  .loc 2 568 9
  # $30.1: @FILE = call(write_332, $28.1, $29.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $30.1:rax 
  .loc 2 568 9
  # $31.1: @FILE = call(write_332, $30.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $31.1:rax 
  .loc 2 568 94
  # $32.1: @IR_Type = load_struct_member(instruction.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $31.1:rax $32.1:r15 
  .loc 2 568 9
  # $33.1: @FILE = call(write_type_label_59, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call write_type_label_59
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $33.1:rax 
  .loc 2 568 9
  # $34.1: @FILE = call(write_332, $33.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_332
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $34.1:rax 
  .loc 2 568 9
  # $35.1: @FILE = call(end_line_335, $34.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] 
  .loc 2 569 9
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $36.1:rbx 
  .loc 2 569 9
  # $37.1: @FILE = call(write_332, $36.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $37.1:rax 
  .loc 2 569 89
  # $38.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rbp-16]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $37.1:rax $38.1:r15 
  .loc 2 569 48
  # $39.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov [rbp-34], rax
  mov [rbp-42], r15
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $37.1:[rbp-34] $38.1:[rbp-42] $39.1:rax 
  # store_struct_member($39.1, register, $38.1)
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $37.1:[rbp-34] $39.1:rax 
  # store_struct_member($39.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $37.1:[rbp-34] $39.1:rax 
  .loc 2 569 9
  # $40.1: @FILE = call(write_53, $37.1, $39.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call write_53
  # [discarded value]: $39.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $40.1:rax 
  .loc 2 569 9
  # $41.1: @FILE = call(write_332, $40.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] register.1:[rbp-26] $41.1:rax 
  .loc 2 569 127
  # $42.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] $41.1:rax $42.1:r15 
  .loc 2 569 9
  # $43.1: @FILE = call(write_332, $41.1, $42.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] $43.1:rax 
  .loc 2 569 9
  # $44.1: @FILE = call(end_line_335, $43.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] 
  # jump(.LABEL__generate_new_instruction_23__7)
.LABEL__generate_new_instruction_23__7:
  # return()
  jmp .LABEL__generate_new_instruction_23__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] $22.3:[rbp-18] 
  # [discarded value]: $22.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] $22.2:[rbp-18] 
  # [discarded value]: $22.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] $22.1:[rbp-18] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:[rbp-17] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_new_instruction_23__end:
  mov rsp, rbp
  pop rbp
  ret

generate_new_instruction_23__stack_frame_size: .word 48

  .loc 2 573 1
  .text
generate_phi_instruction_24:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_phi_instruction_24__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_phi_instruction_24__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Phi_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 574 24
  # $1.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 574 24
  # result_variable.1: @IR_Variable = load_struct_member($1.1, variable)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx 
  .loc 2 575 33
  # $3.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx $3.1:rax 
  .loc 2 575 33
  # instruction_values_entry.1: @IR_Values_Map_Entry = load_struct_member($3.1, first_entry)
  mov r15, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx instruction_values_entry.1:r15 
  # jump(.LABEL__generate_phi_instruction_24__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
.LABEL__generate_phi_instruction_24__2:
  # instruction_values_entry.2: @IR_Values_Map_Entry = phi(instruction_values_entry.1, instruction_values_entry.5)
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] 
  .loc 2 576 12
  # $5.1: Boolean = instruction_values_entry.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:rax 
  # jump($5.1, .LABEL__generate_phi_instruction_24__3, .LABEL__generate_phi_instruction_24__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_phi_instruction_24__4
.LABEL__generate_phi_instruction_24__3:
  .loc 2 577 30
  # instruction_value.1: @IR_Variable_Value = load_struct_member(instruction_values_entry.2, value)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx 
  .loc 2 578 32
  # $8.1: @IR_Variable = load_struct_member(instruction_value.1, variable)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx $8.1:r15 
  .loc 2 578 13
  # $9.1: Boolean = result_variable.1 != $8.1
  cmp QWORD PTR [rbp-8], r15
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx $9.1:r14 
  # jump($9.1, .LABEL__generate_phi_instruction_24__5, .LABEL__generate_phi_instruction_24__6)
  test r14b, r14b
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__generate_phi_instruction_24__6
.LABEL__generate_phi_instruction_24__5:
  .loc 2 579 32
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-24]
  call find_unused_register_37
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:rax 
  .loc 2 580 13
  # call(generate_load_value_30, self.1, result_register.1, instruction_value.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-41]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:[rbp-50] 
  .loc 2 581 37
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] instruction.1:rax:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:[rbp-50] $11.1:rbx 
  .loc 2 581 13
  # $12.1: @MC_Value = call(map_variable_value_40, self.1, $11.1, result_register.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov rdx, [rbp-50]
  call map_variable_value_40
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 582 13
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__generate_phi_instruction_24__6:
  .loc 2 584 36
  # instruction_values_entry.5: @IR_Values_Map_Entry = load_struct_member(instruction_values_entry.2, next_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] instruction_values_entry.5:rbx:[rbp-32] 
  # jump(.LABEL__generate_phi_instruction_24__2)
  mov [rbp-32], rbx
  jmp .LABEL__generate_phi_instruction_24__2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] instruction_values_entry.5:[rbp-32] 
  # [discarded value]: instruction_values_entry.5
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] 
  # [discarded value]: instruction_value.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] 
.LABEL__generate_phi_instruction_24__4:
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] 
  # [discarded value]: instruction_values_entry.2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] 
  # [discarded value]: instruction_values_entry.1
  # [discarded value]: result_variable.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_phi_instruction_24__end:
  mov rsp, rbp
  pop rbp
  ret

generate_phi_instruction_24__stack_frame_size: .word 64

  .loc 2 588 1
  .text
generate_return_instruction_25:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_return_instruction_25__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_return_instruction_25__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Return_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 589 21
  # return_value.1: @IR_Value = call(get_return_value_213, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_return_value_213
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax 
  .loc 2 590 9
  # $2.1: Boolean = return_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__generate_return_instruction_25__2, .LABEL__generate_return_instruction_25__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_return_instruction_25__3
.LABEL__generate_return_instruction_25__2:
  .loc 2 591 34
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rbx 
  .loc 2 591 9
  # call(generate_load_value_30, self.1, $3.1, return_value.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call generate_load_value_30
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # jump(.LABEL__generate_return_instruction_25__3)
.LABEL__generate_return_instruction_25__3:
  .loc 2 593 5
  # call(release_all_registers_45, self.1)
  mov rdi, [rbp-8]
  call release_all_registers_45
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  .loc 2 594 5
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $4.1:rbx 
  .loc 2 594 5
  # $5.1: @FILE = call(write_332, $4.1, "  jmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  jmp "
  call write_332
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax 
  .loc 2 594 63
  # $6.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax $6.1:r15 
  .loc 2 594 63
  # $7.1: @IR_Function = load_struct_member($6.1, function)
  mov r14, [r15+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax $7.1:r14 
  .loc 2 594 5
  # $8.1: @FILE = call(write_function_end_label_5, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r14
  call write_function_end_label_5
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $8.1:rax 
  .loc 2 594 5
  # $9.1: @FILE = call(end_line_335, $8.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_return_instruction_25__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [discarded value]: return_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_return_instruction_25__end:
  mov rsp, rbp
  pop rbp
  ret

generate_return_instruction_25__stack_frame_size: .word 32

  .loc 2 597 1
  .text
generate_set_instruction_26:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_set_instruction_26__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_set_instruction_26__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Set_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 598 17
  # ir_value.1: @IR_Value = call(get_value_216, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_216
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  # IR_Undefined_Value.2: @Object_Type = load_variable(IR_Undefined_Value)
  lea rbx, IR_Undefined_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax IR_Undefined_Value.2:rbx 
  .loc 2 599 9
  # $2.1: Boolean = call(is_338, ir_value.1, IR_Undefined_Value.2)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Undefined_Value.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_set_instruction_26__2, .LABEL__generate_set_instruction_26__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_set_instruction_26__3
.LABEL__generate_set_instruction_26__2:
  .loc 2 600 20
  # $3.1: @String = call(clone_340, "Looks like ")
  lea rdi, .LABEL__string_67[rip] # "Looks like "
  call clone_340
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 2 600 48
  # $4.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $4.1:r15 
  .loc 2 600 48
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  mov r14, [r15+32]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $5.1:r14 
  .loc 2 600 48
  # $6.1: @String = load_struct_member($5.1, name)
  mov r15, [r14+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $6.1:r15 
  .loc 2 600 20
  # $7.1: @String = call(append_349, $3.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $6.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $7.1:rax 
  .loc 2 600 20
  # $8.1: @String = call(append_349, $7.1, " is not properly initialized")
  mov rdi, rax
  lea rsi, .LABEL__string_68[rip] # " is not properly initialized"
  call append_349
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $8.1:rax 
  .loc 2 600 9
  # call(abort_34, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_set_instruction_26__3:
  .loc 2 602 9
  # $9.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $9.1:rbx 
  # IR_Struct_Type.3: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $9.1:rbx IR_Struct_Type.3:r15 
  .loc 2 602 9
  # $10.1: Boolean = call(is_338, $9.1, IR_Struct_Type.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.3
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:rax 
  # jump($10.1, .LABEL__generate_set_instruction_26__4, .LABEL__generate_set_instruction_26__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_set_instruction_26__6
.LABEL__generate_set_instruction_26__4:
  .loc 2 603 36
  # $20.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $20.1:rbx 
  .loc 2 603 21
  # mc_value.1: @MC_Value = call(get_value_41, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_41
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax 
  .loc 2 604 13
  # $22.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax $22.1:rbx 
  .loc 2 604 13
  # $23.1: Boolean = $22.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax $23.1:r15 
  # jump($23.1, .LABEL__generate_set_instruction_26__13, .LABEL__generate_set_instruction_26__14)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__generate_set_instruction_26__14
.LABEL__generate_set_instruction_26__13:
  .loc 2 605 87
  # $24.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] $24.1:rbx 
  .loc 2 605 68
  # $25.1: Int = call(get_type_size_54, self.1, $24.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_54
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] $25.1:rax 
  .loc 2 605 33
  # mc_value_address.1: @MC_Local_Variable_Address = call(create_local_variable_address_43, self.1, $25.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_local_variable_address_43
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] mc_value_address.1:rax 
  .loc 2 606 37
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] mc_value_address.1:rax $27.1:r15 
  .loc 2 606 13
  # call(map_variable_value_39, self.1, $27.1, mc_value_address.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  call map_variable_value_39
  # [discarded value]: $27.1
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # jump(.LABEL__generate_set_instruction_26__14)
.LABEL__generate_set_instruction_26__14:
  .loc 2 608 45
  # $28.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax:[rbp-34] $23.1:[rbp-35] $28.1:rbx 
  .loc 2 608 9
  # call(generate_store_value_31, self.1, ir_value.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  mov rdx, rbx
  call generate_store_value_31
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # jump(.LABEL__generate_set_instruction_26__5)
.LABEL__generate_set_instruction_26__5:
  # return()
  jmp .LABEL__generate_set_instruction_26__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__generate_set_instruction_26__6:
  # IR_Variable_Value.6: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] IR_Variable_Value.6:rax 
  .loc 2 611 13
  # $11.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.6)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.6
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__generate_set_instruction_26__7, .LABEL__generate_set_instruction_26__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_set_instruction_26__9
.LABEL__generate_set_instruction_26__7:
  .loc 2 612 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:rax 
  .loc 2 613 25
  # mc_value.1: @MC_Value = call(get_value_41, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-35], rax
  call get_value_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] mc_value.1:rax 
  .loc 2 614 31
  # result_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:rbx 
  .loc 2 615 17
  # $16.1: Boolean = result_register.3 != null
  cmp rbx, 0
  setne al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:rbx $16.1:rax 
  # jump($16.1, .LABEL__generate_set_instruction_26__10, .LABEL__generate_set_instruction_26__12)
  test al, al
  mov [rbp-36], al
  mov [rbp-44], rbx
  jz .LABEL__generate_set_instruction_26__12
.LABEL__generate_set_instruction_26__10:
  .loc 2 616 17
  # call(release_register_46, self.1, result_register.3)
  mov rdi, [rbp-8]
  mov rsi, [rbp-44]
  call release_register_46
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # jump(.LABEL__generate_set_instruction_26__8)
.LABEL__generate_set_instruction_26__8:
  # result_register.6: @MC_Register = phi(result_register.2, result_register.4, result_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.6:[rbp-44] 
  .loc 2 625 33
  # $18.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.6:[rbp-44] $18.1:rbx 
  .loc 2 625 9
  # $19.1: @MC_Value = call(map_variable_value_40, self.1, $18.1, result_register.6)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-44]
  call map_variable_value_40
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: result_register.6
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # jump(.LABEL__generate_set_instruction_26__5)
  jmp .LABEL__generate_set_instruction_26__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
.LABEL__generate_set_instruction_26__12:
  .loc 2 618 35
  # result_register.4: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:rax:[rbp-44] 
  .loc 2 619 17
  # call(generate_load_value_30, self.1, result_register.4, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-35]
  mov [rbp-44], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:[rbp-44] 
  # jump(.LABEL__generate_set_instruction_26__8)
  jmp .LABEL__generate_set_instruction_26__8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:[rbp-44] 
  # [discarded value]: result_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] 
  # [discarded value]: result_register.3
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__generate_set_instruction_26__9:
  .loc 2 622 31
  # result_register.2: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:rax:[rbp-44] 
  .loc 2 623 13
  # call(generate_load_value_30, self.1, result_register.2, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-44], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:[rbp-44] 
  # jump(.LABEL__generate_set_instruction_26__8)
  jmp .LABEL__generate_set_instruction_26__8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:[rbp-44] 
  # [discarded value]: result_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: ir_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_set_instruction_26__end:
  mov rsp, rbp
  pop rbp
  ret

generate_set_instruction_26__stack_frame_size: .word 48

  .loc 2 629 1
  .text
generate_store_array_item_instruction_27:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_array_item_instruction_27__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_array_item_instruction_27__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 630 25
  # address_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  .loc 2 631 5
  # store_struct_member(address_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  .loc 2 632 48
  # $2.1: @IR_Value = call(get_array_value_219, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_219
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $2.1:rax 
  .loc 2 632 5
  # call(generate_load_value_30, self.1, address_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] 
  .loc 2 634 17
  # ir_value.1: @IR_Value = call(get_value_221, instruction.1)
  mov rdi, [rbp-8]
  call get_value_221
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax 
  .loc 2 635 46
  # $4.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax $4.1:rbx 
  .loc 2 635 27
  # ir_value_type_size.1: Int = call(get_type_size_54, self.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call get_type_size_54
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:rax 
  .loc 2 637 20
  # index_value.1: @IR_Value = call(get_index_value_220, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-40], rax
  call get_index_value_220
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax 
  # IR_Constant_Value.5: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax IR_Constant_Value.5:rbx 
  .loc 2 638 9
  # $7.1: Boolean = call(is_338, index_value.1, IR_Constant_Value.5)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_338
  # [discarded value]: IR_Constant_Value.5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:rax 
  # jump($7.1, .LABEL__generate_store_array_item_instruction_27__2, .LABEL__generate_store_array_item_instruction_27__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_store_array_item_instruction_27__4
.LABEL__generate_store_array_item_instruction_27__2:
  .loc 2 639 24
  # index_value.1: @IR_Constant_Value = index_value.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax 
  .loc 2 640 13
  # $27.1: @Literal_Token = load_struct_member(index_value.1, literal)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax $27.1:rbx 
  # Integer_Token.3: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax $27.1:rbx Integer_Token.3:r15 
  .loc 2 640 13
  # $28.1: Boolean = call(is_338, $27.1, Integer_Token.3)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-57], rax
  call is_338
  # [discarded value]: Integer_Token.3
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $28.1:rax 
  .loc 2 640 13
  # $29.1: Boolean = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:rbx 
  # jump($29.1, .LABEL__generate_store_array_item_instruction_27__7, .LABEL__generate_store_array_item_instruction_27__8)
  test bl, bl
  mov [rbp-58], bl
  jz .LABEL__generate_store_array_item_instruction_27__8
.LABEL__generate_store_array_item_instruction_27__7:
  .loc 2 641 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] 
.LABEL__generate_store_array_item_instruction_27__8:
  .loc 2 643 25
  # $31.1: @Integer_Token = load_struct_member(index_value.1, literal)
  mov rax, [rbp-57]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] $31.1:rbx 
  .loc 2 643 24
  # index_value.1: Int = load_struct_member($31.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] index_value.1:r15 
  .loc 2 644 13
  # $33.1: Boolean = index_value.1 != 0
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] index_value.1:r15 $33.1:rbx 
  # jump($33.1, .LABEL__generate_store_array_item_instruction_27__9, .LABEL__generate_store_array_item_instruction_27__3)
  test bl, bl
  mov [rbp-59], bl
  mov [rbp-67], r15
  jz .LABEL__generate_store_array_item_instruction_27__3
.LABEL__generate_store_array_item_instruction_27__9:
  .loc 2 645 17
  # $34.1: Boolean = index_value.1 < 0
  cmp QWORD PTR [rbp-67], 0
  setl al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:rax 
  # jump($34.1, .LABEL__generate_store_array_item_instruction_27__11, .LABEL__generate_store_array_item_instruction_27__12)
  test al, al
  mov [rbp-68], al
  jz .LABEL__generate_store_array_item_instruction_27__12
.LABEL__generate_store_array_item_instruction_27__11:
  .loc 2 646 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
.LABEL__generate_store_array_item_instruction_27__12:
  .loc 2 648 13
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $35.1:rbx 
  .loc 2 648 13
  # $36.1: @FILE = call(write_332, $35.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_332
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $36.1:rax 
  .loc 2 648 52
  # $37.1: @String = load_struct_member(address_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $36.1:rax $37.1:r15 
  .loc 2 648 13
  # $38.1: @FILE = call(write_332, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $38.1:rax 
  .loc 2 648 13
  # $39.1: @FILE = call(write_332, $38.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $39.1:rax 
  .loc 2 648 95
  # $40.1: Int = index_value.1 * ir_value_type_size.1
  mov rbx, [rbp-67]
  imul rbx, QWORD PTR [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $39.1:rax $40.1:rbx 
  .loc 2 648 13
  # $41.1: @FILE = call(write_331, $39.1, $40.1)
  mov rdi, rax
  mov rsi, rbx
  call write_331
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $41.1:rax 
  .loc 2 648 13
  # $42.1: @FILE = call(end_line_335, $41.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # jump(.LABEL__generate_store_array_item_instruction_27__3)
.LABEL__generate_store_array_item_instruction_27__3:
  # IR_Variable_Value.7: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] IR_Variable_Value.7:rax index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  .loc 2 661 9
  # $43.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.7)
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:rax index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # jump($43.1, .LABEL__generate_store_array_item_instruction_27__13, .LABEL__generate_store_array_item_instruction_27__14)
  test al, al
  mov [rbp-69], al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__13:
  .loc 2 662 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:rax 
  .loc 2 663 21
  # mc_value.1: @MC_Value = call(get_value_41, self.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-77], rax
  call get_value_41
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] mc_value.1:rax 
  .loc 2 664 13
  # $46.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $46.1:rbx 
  .loc 2 664 13
  # $47.1: Boolean = $46.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:rax 
  # jump($47.1, .LABEL__generate_store_array_item_instruction_27__15, .LABEL__generate_store_array_item_instruction_27__14)
  test al, al
  mov [rbp-78], al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__15:
  .loc 2 665 25
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] register.1:rax 
  .loc 2 666 13
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-77]
  mov [rbp-86], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] register.1:[rbp-86] 
  .loc 2 667 13
  # $49.1: @MC_Value = call(map_variable_value_40, self.1, ir_value.1, register.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-77]
  mov rdx, [rbp-86]
  call map_variable_value_40
  # [discarded value]: $49.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # jump(.LABEL__generate_store_array_item_instruction_27__14)
.LABEL__generate_store_array_item_instruction_27__14:
  .loc 2 671 5
  # $50.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $50.1:rbx 
  .loc 2 671 5
  # $51.1: @FILE = call(write_332, $50.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $51.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  .loc 2 672 9
  # $52.1: Boolean = ir_value_type_size.1 == 8
  cmp QWORD PTR [rbp-40], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:rax 
  # jump($52.1, .LABEL__generate_store_array_item_instruction_27__17, .LABEL__generate_store_array_item_instruction_27__19)
  test al, al
  mov [rbp-79], al
  jz .LABEL__generate_store_array_item_instruction_27__19
.LABEL__generate_store_array_item_instruction_27__17:
  .loc 2 673 9
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $62.1:rbx 
  .loc 2 673 9
  # $63.1: @FILE = call(write_332, $62.1, "QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_69[rip] # "QWORD PTR "
  call write_332
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
.LABEL__generate_store_array_item_instruction_27__18:
  .loc 2 683 5
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:rbx 
  .loc 2 683 28
  # $65.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov [rbp-87], rbx
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:[rbp-87] $65.1:rax 
  # store_struct_member($65.1, register, address_register.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:[rbp-87] $65.1:rax 
  # store_struct_member($65.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:[rbp-87] $65.1:rax 
  .loc 2 683 5
  # $66.1: @FILE = call(write_53, $64.1, $65.1)
  mov rdi, [rbp-87]
  mov rsi, rax
  call write_53
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $66.1:rax 
  .loc 2 683 5
  # $67.1: @FILE = call(write_332, $66.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $67.1:rax 
  .loc 2 683 5
  # $68.1: @FILE = call(write_operand_33, $67.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-32]
  call write_operand_33
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $68.1:rax 
  .loc 2 683 5
  # $69.1: @FILE = call(end_line_335, $68.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  .loc 2 684 5
  # store_struct_member(address_register.1, is_reserved, false)
  mov rax, [rbp-24]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # return()
  jmp .LABEL__generate_store_array_item_instruction_27__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
.LABEL__generate_store_array_item_instruction_27__19:
  .loc 2 674 16
  # $53.1: Boolean = ir_value_type_size.1 == 4
  cmp QWORD PTR [rbp-40], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:rax 
  # jump($53.1, .LABEL__generate_store_array_item_instruction_27__20, .LABEL__generate_store_array_item_instruction_27__22)
  test al, al
  mov [rbp-80], al
  jz .LABEL__generate_store_array_item_instruction_27__22
.LABEL__generate_store_array_item_instruction_27__20:
  .loc 2 675 9
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $60.1:rbx 
  .loc 2 675 9
  # $61.1: @FILE = call(write_332, $60.1, "DWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_70[rip] # "DWORD PTR "
  call write_332
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
.LABEL__generate_store_array_item_instruction_27__22:
  .loc 2 676 16
  # $54.1: Boolean = ir_value_type_size.1 == 2
  cmp QWORD PTR [rbp-40], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:rax 
  # jump($54.1, .LABEL__generate_store_array_item_instruction_27__23, .LABEL__generate_store_array_item_instruction_27__25)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_store_array_item_instruction_27__25
.LABEL__generate_store_array_item_instruction_27__23:
  .loc 2 677 9
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $58.1:rbx 
  .loc 2 677 9
  # $59.1: @FILE = call(write_332, $58.1, "WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_71[rip] # "WORD PTR "
  call write_332
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
.LABEL__generate_store_array_item_instruction_27__25:
  .loc 2 678 16
  # $55.1: Boolean = ir_value_type_size.1 == 1
  cmp QWORD PTR [rbp-40], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:rax 
  # jump($55.1, .LABEL__generate_store_array_item_instruction_27__26, .LABEL__generate_store_array_item_instruction_27__28)
  test al, al
  mov [rbp-82], al
  jz .LABEL__generate_store_array_item_instruction_27__28
.LABEL__generate_store_array_item_instruction_27__26:
  .loc 2 679 9
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] $56.1:rbx 
  .loc 2 679 9
  # $57.1: @FILE = call(write_332, $56.1, "BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_72[rip] # "BYTE PTR "
  call write_332
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
.LABEL__generate_store_array_item_instruction_27__28:
  .loc 2 681 9
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] 
.LABEL__generate_store_array_item_instruction_27__4:
  .loc 2 651 27
  # index_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax 
  .loc 2 652 9
  # store_struct_member(index_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax 
  .loc 2 653 50
  # $9.1: @IR_Value = call(get_index_value_220, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-57], rax
  call get_index_value_220
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $9.1:rax 
  .loc 2 653 9
  # call(generate_load_value_30, self.1, index_register.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-57]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] 
  .loc 2 654 13
  # $10.1: Boolean = ir_value_type_size.1 > 1
  cmp QWORD PTR [rbp-40], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:rax 
  # jump($10.1, .LABEL__generate_store_array_item_instruction_27__5, .LABEL__generate_store_array_item_instruction_27__6)
  test al, al
  mov [rbp-58], al
  jz .LABEL__generate_store_array_item_instruction_27__6
.LABEL__generate_store_array_item_instruction_27__5:
  .loc 2 655 13
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $11.1:rbx 
  .loc 2 655 13
  # $12.1: @FILE = call(write_332, $11.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_332
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $12.1:rax 
  .loc 2 655 53
  # $13.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-57]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rbx:[rbp-57] $10.1:[rbp-58] $12.1:rax $13.1:r15 
  .loc 2 655 13
  # $14.1: @FILE = call(write_332, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $14.1:rax 
  .loc 2 655 13
  # $15.1: @FILE = call(write_332, $14.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $15.1:rax 
  .loc 2 655 13
  # $16.1: @FILE = call(write_331, $15.1, ir_value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_331
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $16.1:rax 
  .loc 2 655 13
  # $17.1: @FILE = call(end_line_335, $16.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # jump(.LABEL__generate_store_array_item_instruction_27__6)
.LABEL__generate_store_array_item_instruction_27__6:
  .loc 2 657 9
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $18.1:rbx 
  .loc 2 657 9
  # $19.1: @FILE = call(write_332, $18.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_332
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $19.1:rax 
  .loc 2 657 48
  # $20.1: @String = load_struct_member(address_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $19.1:rax $20.1:r15 
  .loc 2 657 9
  # $21.1: @FILE = call(write_332, $19.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $21.1:rax 
  .loc 2 657 9
  # $22.1: @FILE = call(write_332, $21.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $22.1:rax 
  .loc 2 657 91
  # $23.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-57]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rbx:[rbp-57] $10.1:[rbp-58] $22.1:rax $23.1:r15 
  .loc 2 657 9
  # $24.1: @FILE = call(write_332, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $24.1:rax 
  .loc 2 657 9
  # $25.1: @FILE = call(end_line_335, $24.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  .loc 2 658 9
  # store_struct_member(index_register.1, is_reserved, false)
  mov rax, [rbp-57]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax:[rbp-57] $10.1:[rbp-58] 
  # jump(.LABEL__generate_store_array_item_instruction_27__3)
  jmp .LABEL__generate_store_array_item_instruction_27__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: index_value.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: ir_value.1
  # [discarded value]: address_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_array_item_instruction_27__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_array_item_instruction_27__stack_frame_size: .word 96

  .loc 2 687 1
  .text
generate_store_struct_member_instruction_28:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_member_instruction_28__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_member_instruction_28__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 688 32
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_224, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_224
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  # IR_Variable_Value.8: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax IR_Variable_Value.8:rbx 
  .loc 2 689 9
  # $2.1: Boolean = call(is_338, ir_struct_pointer_value.1, IR_Variable_Value.8)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Variable_Value.8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  .loc 2 689 9
  # $3.1: Boolean = $2.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:rbx 
  # jump($3.1, .LABEL__generate_store_struct_member_instruction_28__2, .LABEL__generate_store_struct_member_instruction_28__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__generate_store_struct_member_instruction_28__3
.LABEL__generate_store_struct_member_instruction_28__2:
  .loc 2 690 9
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__generate_store_struct_member_instruction_28__3:
  .loc 2 692 32
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:rax 
  .loc 2 693 32
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_41, self.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-33], rax
  call get_value_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax 
  .loc 2 694 9
  # $6.1: Boolean = mc_struct_pointer_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__generate_store_struct_member_instruction_28__4, .LABEL__generate_store_struct_member_instruction_28__5)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__generate_store_struct_member_instruction_28__5
.LABEL__generate_store_struct_member_instruction_28__4:
  .loc 2 695 9
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
.LABEL__generate_store_struct_member_instruction_28__5:
  .loc 2 697 32
  # struct_pointer_register.1: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:rbx 
  .loc 2 698 9
  # $8.1: Boolean = struct_pointer_register.1 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:rbx $8.1:r15 
  # jump($8.1, .LABEL__generate_store_struct_member_instruction_28__6, .LABEL__generate_store_struct_member_instruction_28__7)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__generate_store_struct_member_instruction_28__7
.LABEL__generate_store_struct_member_instruction_28__6:
  .loc 2 699 35
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 700 9
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  .loc 2 701 9
  # $10.1: @MC_Value = call(map_variable_value_40, self.1, ir_struct_pointer_value.1, struct_pointer_register.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, [rbp-50]
  call map_variable_value_40
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__7)
.LABEL__generate_store_struct_member_instruction_28__7:
  # struct_pointer_register.5: @MC_Register = phi(struct_pointer_register.1, struct_pointer_register.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] 
  .loc 2 704 50
  # $11.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] $11.1:rbx 
  .loc 2 704 34
  # struct_type_member_offset.1: Int = call(get_offset_32, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_32
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:rax 
  .loc 2 705 17
  # ir_value.1: @IR_Value = call(get_value_225, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-59], rax
  call get_value_225
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax 
  # IR_Variable_Value.9: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax IR_Variable_Value.9:rbx 
  .loc 2 706 9
  # $15.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.9)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-67], rax
  call is_338
  # [discarded value]: IR_Variable_Value.9
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:rax 
  # jump($15.1, .LABEL__generate_store_struct_member_instruction_28__8, .LABEL__generate_store_struct_member_instruction_28__9)
  test al, al
  mov [rbp-68], al
  jz .LABEL__generate_store_struct_member_instruction_28__9
.LABEL__generate_store_struct_member_instruction_28__8:
  .loc 2 706 43
  # $16.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-67]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax:[rbp-67] $15.1:[rbp-68] $16.1:rbx 
  # IR_Struct_Type.4: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax:[rbp-67] $15.1:[rbp-68] $16.1:rbx IR_Struct_Type.4:r15 
  .loc 2 706 43
  # $17.1: Boolean = call(is_338, $16.1, IR_Struct_Type.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.4
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $17.1:rax 
  .loc 2 706 43
  # $15.2: Boolean = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:rbx:[rbp-68] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__9)
  mov [rbp-68], bl
.LABEL__generate_store_struct_member_instruction_28__9:
  .loc 2 706 9
  # $15.3: Boolean = phi($15.1, $15.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] 
  # jump($15.3, .LABEL__generate_store_struct_member_instruction_28__10, .LABEL__generate_store_struct_member_instruction_28__11)
  mov al, [rbp-68]
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__11
.LABEL__generate_store_struct_member_instruction_28__10:
  .loc 2 707 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-67]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:rax 
  .loc 2 708 21
  # mc_value.1: @MC_Value = call(get_value_41, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-76], rax
  call get_value_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] mc_value.1:rax 
  .loc 2 709 13
  # $21.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $21.1:rbx 
  .loc 2 709 13
  # $22.1: Boolean = $21.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:rax 
  # jump($22.1, .LABEL__generate_store_struct_member_instruction_28__12, .LABEL__generate_store_struct_member_instruction_28__11)
  test al, al
  mov [rbp-77], al
  jz .LABEL__generate_store_struct_member_instruction_28__11
.LABEL__generate_store_struct_member_instruction_28__12:
  .loc 2 710 25
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] register.1:rax 
  .loc 2 711 13
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-76]
  mov [rbp-85], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] register.1:[rbp-85] 
  .loc 2 712 13
  # $24.1: @MC_Value = call(map_variable_value_40, self.1, ir_value.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-76]
  mov rdx, [rbp-85]
  call map_variable_value_40
  # [discarded value]: $24.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__11)
.LABEL__generate_store_struct_member_instruction_28__11:
  .loc 2 715 35
  # $25.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] $25.1:rax 
  # store_struct_member($25.1, register, struct_pointer_register.5)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:rbx:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] $25.1:rax 
  # store_struct_member($25.1, offset, struct_type_member_offset.1)
  mov r15, [rbp-59]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:rbx:[rbp-50] struct_type_member_offset.1:r15:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] $25.1:rax 
  .loc 2 715 5
  # struct_type_member_address.1: @MC_Register_Based_Address = $25.1
  mov [rbp-85], rax
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:rbx:[rbp-50] struct_type_member_offset.1:r15:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] struct_type_member_address.1:rax 
  .loc 2 716 5
  # call(generate_store_value_31, self.1, ir_value.1, struct_type_member_address.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-67]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: struct_type_member_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] 
  # return()
  jmp .LABEL__generate_store_struct_member_instruction_28__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] $22.1:[rbp-77] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] ir_value.1:[rbp-76] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] $15.3:[rbp-68] 
  # [discarded value]: $15.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] $15.2:[rbp-68] 
  # [discarded value]: $15.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $15.1:[rbp-68] 
  # [discarded value]: $15.1
  # [discarded value]: ir_value.1
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: struct_pointer_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] $8.1:[rbp-51] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.1:[rbp-50] 
  # [discarded value]: struct_pointer_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] 
  # [discarded value]: mc_struct_pointer_value.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_struct_member_instruction_28__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_member_instruction_28__stack_frame_size: .word 96

  .loc 2 719 1
  .text
generate_substract_instruction_29:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_substract_instruction_29__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_substract_instruction_29__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Substract_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 720 24
  # result_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 721 19
  # left_value.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_227
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:rax 
  .loc 2 722 20
  # right_value.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_right_value_228
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.6: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.6:rbx 
  .loc 2 723 9
  # $4.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.6)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.6
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:rax 
  # jump($4.1, .LABEL__generate_substract_instruction_29__2, .LABEL__generate_substract_instruction_29__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__2:
  .loc 2 724 23
  # left_value.1: @IR_Constant_Value = left_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] left_value.1:rax 
  .loc 2 725 14
  # $7.1: @Integer_Token = load_struct_member(left_value.1, literal)
  mov rbx, [rax+32]
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $7.1:rbx 
  .loc 2 725 13
  # $8.1: Int = load_struct_member($7.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $8.1:rax 
  .loc 2 725 13
  # $9.1: Boolean = $8.1 == 0
  cmp rax, 0
  sete bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:rbx 
  # jump($9.1, .LABEL__generate_substract_instruction_29__4, .LABEL__generate_substract_instruction_29__3)
  test bl, bl
  mov [rbp-42], bl
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__4:
  .loc 2 726 13
  # call(generate_load_value_30, self.1, result_register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-40]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 727 13
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $10.1:rbx 
  .loc 2 727 13
  # $11.1: @FILE = call(write_332, $10.1, "  neg ")
  mov rdi, rbx
  lea rsi, .LABEL__string_73[rip] # "  neg "
  call write_332
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $11.1:rax 
  .loc 2 727 52
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $11.1:rax $12.1:r15 
  .loc 2 727 13
  # $13.1: @FILE = call(write_332, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $13.1:rax 
  .loc 2 727 13
  # $14.1: @FILE = call(end_line_335, $13.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 728 37
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $15.1:rbx 
  .loc 2 728 13
  # $16.1: @MC_Value = call(map_variable_value_40, self.1, $15.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_40
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 729 13
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__generate_substract_instruction_29__3:
  .loc 2 732 5
  # call(generate_load_value_30, self.1, result_register.1, left_value.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 733 29
  # $17.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $17.1:rbx 
  .loc 2 733 5
  # $18.1: @MC_Value = call(map_variable_value_40, self.1, $17.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_40
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  # IR_Constant_Value.7: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] IR_Constant_Value.7:rax 
  .loc 2 734 9
  # $19.1: Boolean = call(is_338, right_value.1, IR_Constant_Value.7)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:rax 
  # jump($19.1, .LABEL__generate_substract_instruction_29__7, .LABEL__generate_substract_instruction_29__8)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__7:
  .loc 2 735 24
  # right_value.1: @IR_Constant_Value = right_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] right_value.1:rax 
  .loc 2 736 14
  # $22.1: @Integer_Token = load_struct_member(right_value.1, literal)
  mov rbx, [rax+32]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $22.1:rbx 
  .loc 2 736 13
  # $23.1: Int = load_struct_member($22.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $23.1:rax 
  .loc 2 736 13
  # $24.1: Boolean = $23.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:rbx 
  # jump($24.1, .LABEL__generate_substract_instruction_29__9, .LABEL__generate_substract_instruction_29__8)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__9:
  .loc 2 737 13
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $25.1:rbx 
  .loc 2 737 13
  # $26.1: @FILE = call(write_332, $25.1, "  dec ")
  mov rdi, rbx
  lea rsi, .LABEL__string_74[rip] # "  dec "
  call write_332
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $26.1:rax 
  .loc 2 737 52
  # $27.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $26.1:rax $27.1:r15 
  .loc 2 737 13
  # $28.1: @FILE = call(write_332, $26.1, $27.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $28.1:rax 
  .loc 2 737 13
  # $29.1: @FILE = call(end_line_335, $28.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
  .loc 2 738 13
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
.LABEL__generate_substract_instruction_29__8:
  .loc 2 741 5
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $30.1:rbx 
  .loc 2 741 5
  # $31.1: @FILE = call(write_332, $30.1, "  sub ")
  mov rdi, rbx
  lea rsi, .LABEL__string_75[rip] # "  sub "
  call write_332
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $31.1:rax 
  .loc 2 741 44
  # $32.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $31.1:rax $32.1:r15 
  .loc 2 741 5
  # $33.1: @FILE = call(write_332, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $33.1:rax 
  .loc 2 741 5
  # $34.1: @FILE = call(write_332, $33.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $34.1:rax 
  .loc 2 741 5
  # $35.1: @FILE = call(write_operand_33, $34.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-40]
  call write_operand_33
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $35.1:rax 
  .loc 2 741 5
  # $36.1: @FILE = call(end_line_335, $35.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_substract_instruction_29__end:
  mov rsp, rbp
  pop rbp
  ret

generate_substract_instruction_29__stack_frame_size: .word 48

  .loc 2 744 1
  .text
generate_load_value_30:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_value_30__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_value_30__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx 
  .loc 2 745 9
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $1.1:rax 
  .loc 2 745 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $2.1:rbx 
  # jump($2.1, .LABEL__generate_load_value_30__2, .LABEL__generate_load_value_30__3)
  test bl, bl
  mov [rbp-8], rdx
  mov [rbp-9], bl
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__generate_load_value_30__3
.LABEL__generate_load_value_30__2:
  # IR_Variable_Value.10: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] IR_Variable_Value.10:rax 
  .loc 2 746 13
  # $3.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.10)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:rax 
  # jump($3.1, .LABEL__generate_load_value_30__4, .LABEL__generate_load_value_30__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__4:
  .loc 2 747 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax 
  .loc 2 748 29
  # $5.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-17]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax $5.1:r15 
  .loc 2 748 29
  # $6.1: @IR_Variable_Value = load_struct_member($5.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax $6.1:r14 
  .loc 2 748 17
  # $7.1: Boolean = ir_value.1 == $6.1
  cmp rax, r14
  sete r15b
  # [discarded value]: $6.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:r15 
  # jump($7.1, .LABEL__generate_load_value_30__6, .LABEL__generate_load_value_30__5)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__6:
  .loc 2 749 17
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__generate_load_value_30__5:
  .loc 2 752 9
  # call(release_register_46, self.1, register.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-17]
  call release_register_46
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # jump(.LABEL__generate_load_value_30__3)
.LABEL__generate_load_value_30__3:
  # IR_Constant_Value.8: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] IR_Constant_Value.8:rax $7.1:[rbp-27] 
  .loc 2 754 9
  # $8.1: Boolean = call(is_338, ir_value.1, IR_Constant_Value.8)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:rax $7.1:[rbp-27] 
  # jump($8.1, .LABEL__generate_load_value_30__9, .LABEL__generate_load_value_30__11)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_load_value_30__11
.LABEL__generate_load_value_30__9:
  .loc 2 755 21
  # ir_value.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax 
  .loc 2 756 13
  # $145.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax $145.1:rbx 
  # Boolean_Token.2: @Object_Type = load_variable(Boolean_Token)
  lea r15, Boolean_Token[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax $145.1:rbx Boolean_Token.2:r15 
  .loc 2 756 13
  # $146.1: Boolean = call(is_338, $145.1, Boolean_Token.2)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-36], rax
  call is_338
  # [discarded value]: Boolean_Token.2
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:rax 
  # jump($146.1, .LABEL__generate_load_value_30__59, .LABEL__generate_load_value_30__61)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_load_value_30__61
.LABEL__generate_load_value_30__59:
  .loc 2 757 24
  # literal.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] literal.1:rbx 
  .loc 2 758 17
  # $218.1: Boolean = load_struct_member(literal.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $218.1:r15 
  # jump($218.1, .LABEL__generate_load_value_30__80, .LABEL__generate_load_value_30__82)
  test r15b, r15b
  mov [rbp-38], r15b
  jz .LABEL__generate_load_value_30__82
.LABEL__generate_load_value_30__80:
  .loc 2 759 17
  # $226.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $226.1:rbx 
  .loc 2 759 17
  # $227.1: @FILE = call(write_332, $226.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $226.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $227.1:rax 
  .loc 2 759 56
  # $228.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $227.1:rax $228.1:r15 
  .loc 2 759 17
  # $229.1: @FILE = call(write_332, $227.1, $228.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $228.1
  # [discarded value]: $227.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $229.1:rax 
  .loc 2 759 17
  # $230.1: @FILE = call(write_332, $229.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $229.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $230.1:rax 
  .loc 2 759 17
  # $231.1: @FILE = call(write_331, $230.1, 1)
  mov rdi, rax
  mov rsi, 1
  call write_331
  # [discarded value]: $230.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $231.1:rax 
  .loc 2 759 17
  # $232.1: @FILE = call(end_line_335, $231.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $232.1
  # [discarded value]: $231.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
.LABEL__generate_load_value_30__10:
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] 
.LABEL__generate_load_value_30__82:
  .loc 2 761 17
  # $219.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $219.1:rbx 
  .loc 2 761 17
  # $220.1: @FILE = call(write_332, $219.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $219.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $220.1:rax 
  .loc 2 761 56
  # $221.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $220.1:rax $221.1:r15 
  .loc 2 761 17
  # $222.1: @FILE = call(write_332, $220.1, $221.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $221.1
  # [discarded value]: $220.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $222.1:rax 
  .loc 2 761 17
  # $223.1: @FILE = call(write_332, $222.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $222.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $223.1:rax 
  .loc 2 761 17
  # $224.1: @FILE = call(write_331, $223.1, 0)
  mov rdi, rax
  xor rsi, rsi
  call write_331
  # [discarded value]: $223.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] $224.1:rax 
  .loc 2 761 17
  # $225.1: @FILE = call(end_line_335, $224.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $225.1
  # [discarded value]: $224.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $218.1:[rbp-38] 
  # [discarded value]: $218.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] 
.LABEL__generate_load_value_30__61:
  .loc 2 763 20
  # $147.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $147.1:rbx 
  # Character_Token.2: @Object_Type = load_variable(Character_Token)
  lea r15, Character_Token[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $147.1:rbx Character_Token.2:r15 
  .loc 2 763 20
  # $148.1: Boolean = call(is_338, $147.1, Character_Token.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Character_Token.2
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:rax 
  # jump($148.1, .LABEL__generate_load_value_30__62, .LABEL__generate_load_value_30__64)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_load_value_30__64
.LABEL__generate_load_value_30__62:
  .loc 2 764 13
  # $205.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $205.1:rbx 
  .loc 2 764 13
  # $206.1: @FILE = call(write_332, $205.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $205.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $206.1:rax 
  .loc 2 764 52
  # $207.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $206.1:rax $207.1:r15 
  .loc 2 764 13
  # $208.1: @FILE = call(write_332, $206.1, $207.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $207.1
  # [discarded value]: $206.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $208.1:rax 
  .loc 2 764 13
  # $209.1: @FILE = call(write_332, $208.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $208.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $209.1:rax 
  .loc 2 764 88
  # $211.1: @Character_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-36]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $209.1:rax $211.1:r15 
  .loc 2 764 87
  # $212.1: Int8 = load_struct_member($211.1, value)
  mov r14b, [r15+32]
  # [discarded value]: $211.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $209.1:rax $212.1:r14 
  .loc 2 764 87
  # $213.1: Int = cast($212.1)
  mov r15b, r14b
  movsx r15, r15b
  # [discarded value]: $212.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $209.1:rax $213.1:r15 
  .loc 2 764 13
  # $214.1: @FILE = call(write_331, $209.1, $213.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $213.1
  # [discarded value]: $209.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $214.1:rax 
  .loc 2 764 13
  # $215.1: @FILE = call(end_line_335, $214.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $215.1
  # [discarded value]: $214.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] 
.LABEL__generate_load_value_30__64:
  .loc 2 765 20
  # $149.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $149.1:rbx 
  # Integer_Token.4: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $149.1:rbx Integer_Token.4:r15 
  .loc 2 765 20
  # $150.1: Boolean = call(is_338, $149.1, Integer_Token.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Integer_Token.4
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:rax 
  # jump($150.1, .LABEL__generate_load_value_30__65, .LABEL__generate_load_value_30__67)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_load_value_30__67
.LABEL__generate_load_value_30__65:
  .loc 2 766 24
  # literal.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:rbx 
  .loc 2 767 17
  # $187.1: Int = load_struct_member(literal.1, value)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:rbx $187.1:r15 
  .loc 2 767 17
  # $188.1: Boolean = $187.1 == 0
  cmp r15, 0
  sete r14b
  # [discarded value]: $187.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:rbx $188.1:r14 
  # jump($188.1, .LABEL__generate_load_value_30__77, .LABEL__generate_load_value_30__79)
  test r14b, r14b
  mov [rbp-47], rbx
  mov [rbp-48], r14b
  jz .LABEL__generate_load_value_30__79
.LABEL__generate_load_value_30__77:
  .loc 2 768 17
  # $197.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $197.1:rbx 
  .loc 2 768 17
  # $198.1: @FILE = call(write_332, $197.1, "  xor ")
  mov rdi, rbx
  lea rsi, .LABEL__string_76[rip] # "  xor "
  call write_332
  # [discarded value]: $197.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $198.1:rax 
  .loc 2 768 56
  # $199.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $198.1:rax $199.1:r15 
  .loc 2 768 17
  # $200.1: @FILE = call(write_332, $198.1, $199.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $199.1
  # [discarded value]: $198.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $200.1:rax 
  .loc 2 768 17
  # $201.1: @FILE = call(write_332, $200.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $200.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $201.1:rax 
  .loc 2 768 91
  # $202.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $201.1:rax $202.1:r15 
  .loc 2 768 17
  # $203.1: @FILE = call(write_332, $201.1, $202.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $202.1
  # [discarded value]: $201.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $203.1:rax 
  .loc 2 768 17
  # $204.1: @FILE = call(end_line_335, $203.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $204.1
  # [discarded value]: $203.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] 
.LABEL__generate_load_value_30__79:
  .loc 2 770 17
  # $189.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $189.1:rbx 
  .loc 2 770 17
  # $190.1: @FILE = call(write_332, $189.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $190.1:rax 
  .loc 2 770 56
  # $191.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $190.1:rax $191.1:r15 
  .loc 2 770 17
  # $192.1: @FILE = call(write_332, $190.1, $191.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $191.1
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $192.1:rax 
  .loc 2 770 17
  # $193.1: @FILE = call(write_332, $192.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $192.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $193.1:rax 
  .loc 2 770 91
  # $194.1: Int = load_struct_member(literal.1, value)
  mov rbx, [rbp-47]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:rbx:[rbp-47] $188.1:[rbp-48] $193.1:rax $194.1:r15 
  .loc 2 770 17
  # $195.1: @FILE = call(write_331, $193.1, $194.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $194.1
  # [discarded value]: $193.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] $195.1:rax 
  .loc 2 770 17
  # $196.1: @FILE = call(end_line_335, $195.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $196.1
  # [discarded value]: $195.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] $188.1:[rbp-48] 
  # [discarded value]: $188.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] literal.1:[rbp-47] 
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] 
.LABEL__generate_load_value_30__67:
  .loc 2 772 20
  # $151.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $151.1:rbx 
  # Null_Token.2: @Object_Type = load_variable(Null_Token)
  lea r15, Null_Token[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $151.1:rbx Null_Token.2:r15 
  .loc 2 772 20
  # $152.1: Boolean = call(is_338, $151.1, Null_Token.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Null_Token.2
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:rax 
  # jump($152.1, .LABEL__generate_load_value_30__68, .LABEL__generate_load_value_30__70)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_load_value_30__70
.LABEL__generate_load_value_30__68:
  .loc 2 773 13
  # $177.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $177.1:rbx 
  .loc 2 773 13
  # $178.1: @FILE = call(write_332, $177.1, "  xor ")
  mov rdi, rbx
  lea rsi, .LABEL__string_76[rip] # "  xor "
  call write_332
  # [discarded value]: $177.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $178.1:rax 
  .loc 2 773 52
  # $179.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $178.1:rax $179.1:r15 
  .loc 2 773 13
  # $180.1: @FILE = call(write_332, $178.1, $179.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $179.1
  # [discarded value]: $178.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $180.1:rax 
  .loc 2 773 13
  # $181.1: @FILE = call(write_332, $180.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $180.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $181.1:rax 
  .loc 2 773 87
  # $182.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $181.1:rax $182.1:r15 
  .loc 2 773 13
  # $183.1: @FILE = call(write_332, $181.1, $182.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $182.1
  # [discarded value]: $181.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $183.1:rax 
  .loc 2 773 13
  # $184.1: @FILE = call(end_line_335, $183.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $184.1
  # [discarded value]: $183.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] 
.LABEL__generate_load_value_30__70:
  .loc 2 774 20
  # $153.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $153.1:rbx 
  # String_Token.2: @Object_Type = load_variable(String_Token)
  lea r15, String_Token[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $153.1:rbx String_Token.2:r15 
  .loc 2 774 20
  # $154.1: Boolean = call(is_338, $153.1, String_Token.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: String_Token.2
  # [discarded value]: $153.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:rax 
  # jump($154.1, .LABEL__generate_load_value_30__71, .LABEL__generate_load_value_30__73)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_load_value_30__73
.LABEL__generate_load_value_30__71:
  .loc 2 775 46
  # $163.1: @String_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $163.1:rbx 
  .loc 2 775 26
  # mc_string.1: @MC_String = call(convert_string_55, self.1, $163.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  call convert_string_55
  # [discarded value]: $163.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:rax 
  .loc 2 776 13
  # $165.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:rax $165.1:r15 
  .loc 2 776 13
  # $166.1: @FILE = call(write_332, $165.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-49], rax
  call write_332
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $166.1:rax 
  .loc 2 776 52
  # $167.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $166.1:rax $167.1:r15 
  .loc 2 776 13
  # $168.1: @FILE = call(write_332, $166.1, $167.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $167.1
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $168.1:rax 
  .loc 2 776 13
  # $169.1: @FILE = call(write_332, $168.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $168.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $169.1:rax 
  .loc 2 776 13
  # $170.1: @FILE = call(write_string_label_57, $169.1, mc_string.1)
  mov rdi, rax
  mov rsi, [rbp-49]
  call write_string_label_57
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $170.1:rax 
  .loc 2 776 13
  # $171.1: @FILE = call(write_332, $170.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_332
  # [discarded value]: $170.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $171.1:rax 
  .loc 2 776 13
  # $172.1: @FILE = call(write_332, $171.1, " # ")
  mov rdi, rax
  lea rsi, .LABEL__string_77[rip] # " # "
  call write_332
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] mc_string.1:[rbp-49] $172.1:rax 
  .loc 2 776 145
  # $173.1: @String_Token = load_struct_member(mc_string.1, literal)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [discarded value]: mc_string.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $172.1:rax $173.1:r15 
  .loc 2 776 145
  # $174.1: @String = load_struct_member($173.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $173.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $172.1:rax $174.1:rbx 
  .loc 2 776 13
  # $175.1: @FILE = call(write_332, $172.1, $174.1)
  mov rdi, rax
  mov rsi, rbx
  call write_332
  # [discarded value]: $174.1
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $175.1:rax 
  .loc 2 776 13
  # $176.1: @FILE = call(end_line_335, $175.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $176.1
  # [discarded value]: $175.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] 
.LABEL__generate_load_value_30__73:
  .loc 2 777 20
  # $155.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $155.1:rbx 
  # Undefined_Token.2: @Object_Type = load_variable(Undefined_Token)
  lea r15, Undefined_Token[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $155.1:rbx Undefined_Token.2:r15 
  .loc 2 777 20
  # $156.1: Boolean = call(is_338, $155.1, Undefined_Token.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Undefined_Token.2
  # [discarded value]: $155.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:rax 
  # jump($156.1, .LABEL__generate_load_value_30__10, .LABEL__generate_load_value_30__76)
  test al, al
  mov [rbp-42], al
  jnz .LABEL__generate_load_value_30__10
.LABEL__generate_load_value_30__76:
  .loc 2 780 24
  # $157.1: @String = call(clone_340, "Unsupported literal type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported literal type: "
  call clone_340
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:[rbp-42] $157.1:rax 
  .loc 2 780 67
  # $158.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-36]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:[rbp-42] $157.1:rax $158.1:r15 
  .loc 2 780 67
  # $159.1: @Object_Type = load_struct_member($158.1, object_type)
  mov r14, [r15]
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:[rbp-42] $157.1:rax $159.1:r14 
  .loc 2 780 67
  # $160.1: @String = load_struct_member_address($159.1, name)
  mov r15, r14
  add r15, 8
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:[rbp-42] $157.1:rax $160.1:r15 
  .loc 2 780 24
  # $161.1: @String = call(append_349, $157.1, $160.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $160.1
  # [discarded value]: $157.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:[rbp-42] $161.1:rax 
  .loc 2 780 13
  # call(abort_34, self.1, $161.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_34
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] $156.1:[rbp-42] 
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] $154.1:[rbp-41] 
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] $152.1:[rbp-40] 
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] $150.1:[rbp-39] 
  # [discarded value]: $150.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] $148.1:[rbp-38] 
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $146.1:[rbp-37] 
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] 
.LABEL__generate_load_value_30__11:
  # IR_Variable_Value.11: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] IR_Variable_Value.11:rax 
  .loc 2 782 16
  # $9.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.11)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.11
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__generate_load_value_30__12, .LABEL__generate_load_value_30__14)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_load_value_30__14
.LABEL__generate_load_value_30__12:
  .loc 2 783 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value.1:rax 
  .loc 2 784 26
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value.1:rax ir_value_type.1:rbx 
  .loc 2 785 21
  # mc_value.1: @MC_Value = call(get_value_41, self.1, ir_value.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov [rbp-37], rbx
  call get_value_41
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax 
  .loc 2 786 13
  # $17.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__generate_load_value_30__15, .LABEL__generate_load_value_30__16)
  test bl, bl
  mov [rbp-45], rax
  mov [rbp-46], bl
  jz .LABEL__generate_load_value_30__16
.LABEL__generate_load_value_30__15:
  .loc 2 787 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] 
.LABEL__generate_load_value_30__16:
  .loc 2 789 9
  # store_struct_member(register.1, loaded_value, mc_value.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-45]
  mov QWORD PTR [rax+49], rbx
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] 
  .loc 2 790 13
  # $18.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $18.1:r15 
  .loc 2 790 13
  # $19.1: Boolean = $18.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:r14 
  # jump($19.1, .LABEL__generate_load_value_30__17, .LABEL__generate_load_value_30__19)
  test r14b, r14b
  mov [rbp-47], r14b
  jz .LABEL__generate_load_value_30__19
.LABEL__generate_load_value_30__17:
  # IR_Boolean_Type.4: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] IR_Boolean_Type.4:rax 
  .loc 2 791 17
  # $80.1: Boolean = call(is_338, ir_value_type.1, IR_Boolean_Type.4)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Boolean_Type.4
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:rax 
  # jump($80.1, .LABEL__generate_load_value_30__41, .LABEL__generate_load_value_30__43)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_load_value_30__43
.LABEL__generate_load_value_30__41:
  .loc 2 792 17
  # $135.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $135.1:rbx 
  .loc 2 792 17
  # $136.1: @FILE = call(write_332, $135.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $136.1:rax 
  .loc 2 792 56
  # $137.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $136.1:rax $137.1:r15 
  .loc 2 792 17
  # $138.1: @FILE = call(write_332, $136.1, $137.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $137.1
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $138.1:rax 
  .loc 2 792 17
  # $139.1: @FILE = call(write_332, $138.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $139.1:rax 
  .loc 2 792 91
  # $140.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $139.1:rax $140.1:r15 
  .loc 2 792 91
  # $141.1: @String = load_struct_member($140.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $140.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $139.1:rax $141.1:r14 
  .loc 2 792 17
  # $142.1: @FILE = call(write_332, $139.1, $141.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $141.1
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $142.1:rax 
  .loc 2 792 17
  # $143.1: @FILE = call(end_line_335, $142.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $143.1
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] 
.LABEL__generate_load_value_30__43:
  # IR_Function_Type.3: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] IR_Function_Type.3:rax 
  .loc 2 793 24
  # $81.1: Boolean = call(is_338, ir_value_type.1, IR_Function_Type.3)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Function_Type.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:rax 
  # jump($81.1, .LABEL__generate_load_value_30__44, .LABEL__generate_load_value_30__46)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_load_value_30__46
.LABEL__generate_load_value_30__44:
  .loc 2 794 17
  # $126.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $126.1:rbx 
  .loc 2 794 17
  # $127.1: @FILE = call(write_332, $126.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $127.1:rax 
  .loc 2 794 56
  # $128.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $127.1:rax $128.1:r15 
  .loc 2 794 17
  # $129.1: @FILE = call(write_332, $127.1, $128.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $128.1
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $129.1:rax 
  .loc 2 794 17
  # $130.1: @FILE = call(write_332, $129.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $130.1:rax 
  .loc 2 794 91
  # $131.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $130.1:rax $131.1:r15 
  .loc 2 794 91
  # $132.1: @String = load_struct_member($131.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $131.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $130.1:rax $132.1:r14 
  .loc 2 794 17
  # $133.1: @FILE = call(write_332, $130.1, $132.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $132.1
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $133.1:rax 
  .loc 2 794 17
  # $134.1: @FILE = call(end_line_335, $133.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $134.1
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] 
.LABEL__generate_load_value_30__46:
  # IR_Int_Type.6: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] IR_Int_Type.6:rax 
  .loc 2 795 24
  # $82.1: Boolean = call(is_338, ir_value_type.1, IR_Int_Type.6)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int_Type.6
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:rax 
  # jump($82.1, .LABEL__generate_load_value_30__47, .LABEL__generate_load_value_30__49)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_value_30__49
.LABEL__generate_load_value_30__47:
  .loc 2 796 17
  # $117.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $117.1:rbx 
  .loc 2 796 17
  # $118.1: @FILE = call(write_332, $117.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $118.1:rax 
  .loc 2 796 56
  # $119.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $118.1:rax $119.1:r15 
  .loc 2 796 17
  # $120.1: @FILE = call(write_332, $118.1, $119.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $119.1
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $120.1:rax 
  .loc 2 796 17
  # $121.1: @FILE = call(write_332, $120.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $121.1:rax 
  .loc 2 796 91
  # $122.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $121.1:rax $122.1:r15 
  .loc 2 796 91
  # $123.1: @String = load_struct_member($122.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $121.1:rax $123.1:r14 
  .loc 2 796 17
  # $124.1: @FILE = call(write_332, $121.1, $123.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $123.1
  # [discarded value]: $121.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $124.1:rax 
  .loc 2 796 17
  # $125.1: @FILE = call(end_line_335, $124.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $125.1
  # [discarded value]: $124.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] 
.LABEL__generate_load_value_30__49:
  # IR_Int32_Type.6: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] IR_Int32_Type.6:rax 
  .loc 2 797 24
  # $83.1: Boolean = call(is_338, ir_value_type.1, IR_Int32_Type.6)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int32_Type.6
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:rax 
  # jump($83.1, .LABEL__generate_load_value_30__50, .LABEL__generate_load_value_30__52)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_load_value_30__52
.LABEL__generate_load_value_30__50:
  .loc 2 798 17
  # $108.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $108.1:rbx 
  .loc 2 798 17
  # $109.1: @FILE = call(write_332, $108.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $109.1:rax 
  .loc 2 798 56
  # $110.1: @String = load_struct_member(register.1, name_d)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $109.1:rax $110.1:r15 
  .loc 2 798 17
  # $111.1: @FILE = call(write_332, $109.1, $110.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $110.1
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $111.1:rax 
  .loc 2 798 17
  # $112.1: @FILE = call(write_332, $111.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $112.1:rax 
  .loc 2 798 91
  # $113.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $112.1:rax $113.1:r15 
  .loc 2 798 91
  # $114.1: @String = load_struct_member($113.1, name_d)
  mov r14, [r15+16]
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $112.1:rax $114.1:r14 
  .loc 2 798 17
  # $115.1: @FILE = call(write_332, $112.1, $114.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $114.1
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $115.1:rax 
  .loc 2 798 17
  # $116.1: @FILE = call(end_line_335, $115.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $116.1
  # [discarded value]: $115.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] 
.LABEL__generate_load_value_30__52:
  # IR_Int8_Type.6: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] IR_Int8_Type.6:rax 
  .loc 2 799 24
  # $84.1: Boolean = call(is_338, ir_value_type.1, IR_Int8_Type.6)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int8_Type.6
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:rax 
  # jump($84.1, .LABEL__generate_load_value_30__53, .LABEL__generate_load_value_30__55)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_load_value_30__55
.LABEL__generate_load_value_30__53:
  .loc 2 800 17
  # $99.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $99.1:rbx 
  .loc 2 800 17
  # $100.1: @FILE = call(write_332, $99.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $100.1:rax 
  .loc 2 800 56
  # $101.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $100.1:rax $101.1:r15 
  .loc 2 800 17
  # $102.1: @FILE = call(write_332, $100.1, $101.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $101.1
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $102.1:rax 
  .loc 2 800 17
  # $103.1: @FILE = call(write_332, $102.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $103.1:rax 
  .loc 2 800 91
  # $104.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $103.1:rax $104.1:r15 
  .loc 2 800 91
  # $105.1: @String = load_struct_member($104.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $103.1:rax $105.1:r14 
  .loc 2 800 17
  # $106.1: @FILE = call(write_332, $103.1, $105.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $105.1
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $106.1:rax 
  .loc 2 800 17
  # $107.1: @FILE = call(end_line_335, $106.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $107.1
  # [discarded value]: $106.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] 
.LABEL__generate_load_value_30__55:
  # IR_Pointer_Type.4: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] IR_Pointer_Type.4:rax 
  .loc 2 801 24
  # $85.1: Boolean = call(is_338, ir_value_type.1, IR_Pointer_Type.4)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.4
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:rax 
  # jump($85.1, .LABEL__generate_load_value_30__56, .LABEL__generate_load_value_30__58)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_load_value_30__58
.LABEL__generate_load_value_30__56:
  .loc 2 802 17
  # $90.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $90.1:rbx 
  .loc 2 802 17
  # $91.1: @FILE = call(write_332, $90.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $91.1:rax 
  .loc 2 802 56
  # $92.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $91.1:rax $92.1:r15 
  .loc 2 802 17
  # $93.1: @FILE = call(write_332, $91.1, $92.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $92.1
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $93.1:rax 
  .loc 2 802 17
  # $94.1: @FILE = call(write_332, $93.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $94.1:rax 
  .loc 2 802 91
  # $95.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $94.1:rax $95.1:r15 
  .loc 2 802 91
  # $96.1: @String = load_struct_member($95.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $94.1:rax $96.1:r14 
  .loc 2 802 17
  # $97.1: @FILE = call(write_332, $94.1, $96.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $96.1
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $97.1:rax 
  .loc 2 802 17
  # $98.1: @FILE = call(end_line_335, $97.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $98.1
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] 
.LABEL__generate_load_value_30__58:
  .loc 2 804 28
  # $86.1: @String = call(clone_340, "Unsupported value type: ")
  lea rdi, .LABEL__string_79[rip] # "Unsupported value type: "
  call clone_340
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $86.1:rax 
  .loc 2 804 69
  # $87.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-37]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $86.1:rax $87.1:r15 
  .loc 2 804 69
  # $88.1: @String = load_struct_member_address($87.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $86.1:rax $88.1:r14 
  .loc 2 804 28
  # $89.1: @String = call(append_349, $86.1, $88.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $88.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] $89.1:rax 
  .loc 2 804 17
  # call(abort_34, self.1, $89.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_34
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] $85.1:[rbp-53] 
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] $84.1:[rbp-52] 
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] $83.1:[rbp-51] 
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] $82.1:[rbp-50] 
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] $81.1:[rbp-49] 
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $80.1:[rbp-48] 
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] 
.LABEL__generate_load_value_30__19:
  .loc 2 806 20
  # $20.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-45]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $20.1:rbx 
  .loc 2 806 20
  # $21.1: Boolean = $20.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:r15 
  # jump($21.1, .LABEL__generate_load_value_30__20, .LABEL__generate_load_value_30__22)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__generate_load_value_30__22
.LABEL__generate_load_value_30__20:
  .loc 2 807 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] 
.LABEL__generate_load_value_30__22:
  # IR_Boolean_Type.3: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] IR_Boolean_Type.3:rax 
  .loc 2 808 20
  # $22.1: Boolean = call(is_338, ir_value_type.1, IR_Boolean_Type.3)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Boolean_Type.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:rax 
  # jump($22.1, .LABEL__generate_load_value_30__23, .LABEL__generate_load_value_30__25)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_load_value_30__25
.LABEL__generate_load_value_30__23:
  .loc 2 809 13
  # $72.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $72.1:rbx 
  .loc 2 809 13
  # $73.1: @FILE = call(write_332, $72.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $73.1:rax 
  .loc 2 809 52
  # $74.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $73.1:rax $74.1:r15 
  .loc 2 809 13
  # $75.1: @FILE = call(write_332, $73.1, $74.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $74.1
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $75.1:rax 
  .loc 2 809 13
  # $76.1: @FILE = call(write_332, $75.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $76.1:rax 
  .loc 2 809 87
  # $77.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $76.1:rax $77.1:r15 
  .loc 2 809 13
  # $78.1: @FILE = call(write_53, $76.1, $77.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $77.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $78.1:rax 
  .loc 2 809 13
  # $79.1: @FILE = call(end_line_335, $78.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] 
.LABEL__generate_load_value_30__25:
  # IR_Function_Type.2: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] IR_Function_Type.2:rax 
  .loc 2 810 20
  # $23.1: Boolean = call(is_338, ir_value_type.1, IR_Function_Type.2)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Function_Type.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:rax 
  # jump($23.1, .LABEL__generate_load_value_30__26, .LABEL__generate_load_value_30__28)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_value_30__28
.LABEL__generate_load_value_30__26:
  .loc 2 811 13
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $64.1:rbx 
  .loc 2 811 13
  # $65.1: @FILE = call(write_332, $64.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $65.1:rax 
  .loc 2 811 52
  # $66.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $65.1:rax $66.1:r15 
  .loc 2 811 13
  # $67.1: @FILE = call(write_332, $65.1, $66.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $67.1:rax 
  .loc 2 811 13
  # $68.1: @FILE = call(write_332, $67.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $68.1:rax 
  .loc 2 811 87
  # $69.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $68.1:rax $69.1:r15 
  .loc 2 811 13
  # $70.1: @FILE = call(write_53, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $70.1:rax 
  .loc 2 811 13
  # $71.1: @FILE = call(end_line_335, $70.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $71.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] 
.LABEL__generate_load_value_30__28:
  # IR_Int_Type.5: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] IR_Int_Type.5:rax 
  .loc 2 812 20
  # $24.1: Boolean = call(is_338, ir_value_type.1, IR_Int_Type.5)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int_Type.5
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:rax 
  # jump($24.1, .LABEL__generate_load_value_30__29, .LABEL__generate_load_value_30__31)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_load_value_30__31
.LABEL__generate_load_value_30__29:
  .loc 2 813 13
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $56.1:rbx 
  .loc 2 813 13
  # $57.1: @FILE = call(write_332, $56.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $57.1:rax 
  .loc 2 813 52
  # $58.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $57.1:rax $58.1:r15 
  .loc 2 813 13
  # $59.1: @FILE = call(write_332, $57.1, $58.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $59.1:rax 
  .loc 2 813 13
  # $60.1: @FILE = call(write_332, $59.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $60.1:rax 
  .loc 2 813 87
  # $61.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $60.1:rax $61.1:r15 
  .loc 2 813 13
  # $62.1: @FILE = call(write_53, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $62.1:rax 
  .loc 2 813 13
  # $63.1: @FILE = call(end_line_335, $62.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] 
.LABEL__generate_load_value_30__31:
  # IR_Int32_Type.5: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] IR_Int32_Type.5:rax 
  .loc 2 814 20
  # $25.1: Boolean = call(is_338, ir_value_type.1, IR_Int32_Type.5)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int32_Type.5
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:rax 
  # jump($25.1, .LABEL__generate_load_value_30__32, .LABEL__generate_load_value_30__34)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_load_value_30__34
.LABEL__generate_load_value_30__32:
  .loc 2 815 13
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $48.1:rbx 
  .loc 2 815 13
  # $49.1: @FILE = call(write_332, $48.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $49.1:rax 
  .loc 2 815 52
  # $50.1: @String = load_struct_member(register.1, name_d)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $49.1:rax $50.1:r15 
  .loc 2 815 13
  # $51.1: @FILE = call(write_332, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $51.1:rax 
  .loc 2 815 13
  # $52.1: @FILE = call(write_332, $51.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $52.1:rax 
  .loc 2 815 87
  # $53.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $52.1:rax $53.1:r15 
  .loc 2 815 13
  # $54.1: @FILE = call(write_53, $52.1, $53.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $54.1:rax 
  .loc 2 815 13
  # $55.1: @FILE = call(end_line_335, $54.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] 
.LABEL__generate_load_value_30__34:
  # IR_Int8_Type.5: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] IR_Int8_Type.5:rax 
  .loc 2 816 20
  # $26.1: Boolean = call(is_338, ir_value_type.1, IR_Int8_Type.5)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int8_Type.5
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:rax 
  # jump($26.1, .LABEL__generate_load_value_30__35, .LABEL__generate_load_value_30__37)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_load_value_30__37
.LABEL__generate_load_value_30__35:
  .loc 2 817 13
  # $40.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $40.1:rbx 
  .loc 2 817 13
  # $41.1: @FILE = call(write_332, $40.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $41.1:rax 
  .loc 2 817 52
  # $42.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $41.1:rax $42.1:r15 
  .loc 2 817 13
  # $43.1: @FILE = call(write_332, $41.1, $42.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $43.1:rax 
  .loc 2 817 13
  # $44.1: @FILE = call(write_332, $43.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $44.1:rax 
  .loc 2 817 87
  # $45.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $44.1:rax $45.1:r15 
  .loc 2 817 13
  # $46.1: @FILE = call(write_53, $44.1, $45.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $46.1:rax 
  .loc 2 817 13
  # $47.1: @FILE = call(end_line_335, $46.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] 
.LABEL__generate_load_value_30__37:
  # IR_Pointer_Type.3: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] IR_Pointer_Type.3:rax 
  .loc 2 818 20
  # $27.1: Boolean = call(is_338, ir_value_type.1, IR_Pointer_Type.3)
  mov rdi, [rbp-37]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:rax 
  # jump($27.1, .LABEL__generate_load_value_30__38, .LABEL__generate_load_value_30__40)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_load_value_30__40
.LABEL__generate_load_value_30__38:
  .loc 2 819 13
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $32.1:rbx 
  .loc 2 819 13
  # $33.1: @FILE = call(write_332, $32.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $33.1:rax 
  .loc 2 819 52
  # $34.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $33.1:rax $34.1:r15 
  .loc 2 819 13
  # $35.1: @FILE = call(write_332, $33.1, $34.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $35.1:rax 
  .loc 2 819 13
  # $36.1: @FILE = call(write_332, $35.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $36.1:rax 
  .loc 2 819 87
  # $37.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $36.1:rax $37.1:r15 
  .loc 2 819 13
  # $38.1: @FILE = call(write_53, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $38.1:rax 
  .loc 2 819 13
  # $39.1: @FILE = call(end_line_335, $38.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] 
.LABEL__generate_load_value_30__40:
  .loc 2 821 24
  # $28.1: @String = call(clone_340, "Unsupported value type: ")
  lea rdi, .LABEL__string_79[rip] # "Unsupported value type: "
  call clone_340
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $28.1:rax 
  .loc 2 821 65
  # $29.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-37]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $28.1:rax $29.1:r15 
  .loc 2 821 65
  # $30.1: @String = load_struct_member_address($29.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $28.1:rax $30.1:r14 
  .loc 2 821 24
  # $31.1: @String = call(append_349, $28.1, $30.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] $31.1:rax 
  .loc 2 821 13
  # call(abort_34, self.1, $31.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_34
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] $27.1:[rbp-54] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] $26.1:[rbp-53] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] $25.1:[rbp-52] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] $24.1:[rbp-51] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] $23.1:[rbp-50] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] $22.1:[rbp-49] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] $21.1:[rbp-48] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] $19.1:[rbp-47] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $17.1:[rbp-46] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_value_type.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] 
.LABEL__generate_load_value_30__14:
  .loc 2 824 20
  # $10.1: @String = call(clone_340, "Unsupported value type: ")
  lea rdi, .LABEL__string_79[rip] # "Unsupported value type: "
  call clone_340
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:rax 
  .loc 2 824 61
  # $11.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:rbx:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:rax $11.1:r15 
  .loc 2 824 61
  # $12.1: @String = load_struct_member_address($11.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:rbx:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:rax $12.1:r14 
  .loc 2 824 20
  # $13.1: @String = call(append_349, $10.1, $12.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $13.1:rax 
  .loc 2 824 9
  # call(abort_34, self.1, $13.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_34
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] 
  # [discarded value]: ir_value.1
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_value_30__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_value_30__stack_frame_size: .word 64

  .loc 2 828 1
  .text
generate_store_value_31:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_value_31__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_value_31__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi ir_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx 
  .loc 2 829 22
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx ir_value_type.1:rax 
  # IR_Constant_Value.9: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx ir_value_type.1:rax IR_Constant_Value.9:rbx 
  .loc 2 830 9
  # $3.1: Boolean = call(is_338, ir_value.1, IR_Constant_Value.9)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov [rbp-32], rdx
  call is_338
  # [discarded value]: IR_Constant_Value.9
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__generate_store_value_31__2, .LABEL__generate_store_value_31__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_store_value_31__3
.LABEL__generate_store_value_31__2:
  .loc 2 830 44
  # $4.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $4.1:rax 
  .loc 2 830 43
  # $5.1: @Literal_Token = load_struct_member($4.1, literal)
  mov rbx, [rax+32]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $5.1:rbx 
  # String_Token.3: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $5.1:rbx String_Token.3:rax 
  .loc 2 830 43
  # $3.2: Boolean = call(is_338, $5.1, String_Token.3)
  mov rdi, rbx
  mov rsi, rax
  call is_338
  # [discarded value]: String_Token.3
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:rax:[rbp-33] 
  # jump(.LABEL__generate_store_value_31__3)
  mov [rbp-33], al
.LABEL__generate_store_value_31__3:
  .loc 2 830 9
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, .LABEL__generate_store_value_31__4, .LABEL__generate_store_value_31__6)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_store_value_31__6
.LABEL__generate_store_value_31__4:
  .loc 2 831 21
  # register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] register.1:rax 
  .loc 2 832 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-41], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] register.1:[rbp-41] 
  .loc 2 833 9
  # $186.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] register.1:[rbp-41] $186.1:rbx 
  .loc 2 833 9
  # $187.1: @FILE = call(write_332, $186.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $186.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] register.1:[rbp-41] $187.1:rax 
  .loc 2 833 9
  # $188.1: @FILE = call(write_53, $187.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $187.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] register.1:[rbp-41] $188.1:rax 
  .loc 2 833 9
  # $189.1: @FILE = call(write_332, $188.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $188.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] register.1:[rbp-41] $189.1:rax 
  .loc 2 833 75
  # $190.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-41]
  mov r15, [rbx+8]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $189.1:rax $190.1:r15 
  .loc 2 833 9
  # $191.1: @FILE = call(write_332, $189.1, $190.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $190.1
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $191.1:rax 
  .loc 2 833 9
  # $192.1: @FILE = call(end_line_335, $191.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $192.1
  # [discarded value]: $191.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump(.LABEL__generate_store_value_31__5)
.LABEL__generate_store_value_31__5:
  # return()
  jmp .LABEL__generate_store_value_31__end
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__generate_store_value_31__6:
  # IR_Int_Type.7: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] IR_Int_Type.7:rax 
  .loc 2 834 16
  # $7.1: Boolean = call(is_338, ir_value_type.1, IR_Int_Type.7)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int_Type.7
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:rax 
  # jump($7.1, .LABEL__generate_store_value_31__7, .LABEL__generate_store_value_31__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_store_value_31__9
.LABEL__generate_store_value_31__7:
  .loc 2 835 9
  # $179.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $179.1:rbx 
  .loc 2 835 9
  # $180.1: @FILE = call(write_332, $179.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_332
  # [discarded value]: $179.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $180.1:rax 
  .loc 2 835 9
  # $181.1: @FILE = call(write_53, $180.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $180.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $181.1:rax 
  .loc 2 835 9
  # $182.1: @FILE = call(write_332, $181.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $181.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $182.1:rax 
  .loc 2 835 9
  # $183.1: @FILE = call(write_operand_33, $182.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_33
  # [discarded value]: $182.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $183.1:rax 
  .loc 2 835 9
  # $184.1: @FILE = call(end_line_335, $183.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $184.1
  # [discarded value]: $183.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] 
.LABEL__generate_store_value_31__9:
  # IR_Int8_Type.7: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] IR_Int8_Type.7:rax 
  .loc 2 836 16
  # $8.1: Boolean = call(is_338, ir_value_type.1, IR_Int8_Type.7)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int8_Type.7
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:rax 
  # jump($8.1, .LABEL__generate_store_value_31__10, .LABEL__generate_store_value_31__12)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_store_value_31__12
.LABEL__generate_store_value_31__10:
  .loc 2 837 9
  # $173.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $173.1:rbx 
  .loc 2 837 9
  # $174.1: @FILE = call(write_332, $173.1, "  mov BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_81[rip] # "  mov BYTE PTR "
  call write_332
  # [discarded value]: $173.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $174.1:rax 
  .loc 2 837 9
  # $175.1: @FILE = call(write_53, $174.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $174.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $175.1:rax 
  .loc 2 837 9
  # $176.1: @FILE = call(write_332, $175.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $175.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $176.1:rax 
  .loc 2 837 9
  # $177.1: @FILE = call(write_operand_33, $176.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_33
  # [discarded value]: $176.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $177.1:rax 
  .loc 2 837 9
  # $178.1: @FILE = call(end_line_335, $177.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $178.1
  # [discarded value]: $177.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] 
.LABEL__generate_store_value_31__12:
  # IR_Pointer_Type.5: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] IR_Pointer_Type.5:rax 
  .loc 2 838 16
  # $9.1: Boolean = call(is_338, ir_value_type.1, IR_Pointer_Type.5)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:rax 
  # jump($9.1, .LABEL__generate_store_value_31__13, .LABEL__generate_store_value_31__15)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_store_value_31__15
.LABEL__generate_store_value_31__13:
  .loc 2 839 9
  # $167.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $167.1:rbx 
  .loc 2 839 9
  # $168.1: @FILE = call(write_332, $167.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_332
  # [discarded value]: $167.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $168.1:rax 
  .loc 2 839 9
  # $169.1: @FILE = call(write_53, $168.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $168.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $169.1:rax 
  .loc 2 839 9
  # $170.1: @FILE = call(write_332, $169.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $170.1:rax 
  .loc 2 839 9
  # $171.1: @FILE = call(write_operand_33, $170.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_33
  # [discarded value]: $170.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $171.1:rax 
  .loc 2 839 9
  # $172.1: @FILE = call(end_line_335, $171.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $172.1
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] 
.LABEL__generate_store_value_31__15:
  # IR_Null_Type.2: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] IR_Null_Type.2:rax 
  .loc 2 840 16
  # $10.1: Boolean = call(is_338, ir_value_type.1, IR_Null_Type.2)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Null_Type.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:rax 
  # jump($10.1, .LABEL__generate_store_value_31__16, .LABEL__generate_store_value_31__18)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_store_value_31__18
.LABEL__generate_store_value_31__16:
  .loc 2 841 9
  # $162.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $162.1:rbx 
  .loc 2 841 9
  # $163.1: @FILE = call(write_332, $162.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_332
  # [discarded value]: $162.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $163.1:rax 
  .loc 2 841 9
  # $164.1: @FILE = call(write_53, $163.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $163.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $164.1:rax 
  .loc 2 841 9
  # $165.1: @FILE = call(write_332, $164.1, ", 0")
  mov rdi, rax
  lea rsi, .LABEL__string_82[rip] # ", 0"
  call write_332
  # [discarded value]: $164.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $165.1:rax 
  .loc 2 841 9
  # $166.1: @FILE = call(end_line_335, $165.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $166.1
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] 
.LABEL__generate_store_value_31__18:
  # IR_Boolean_Type.5: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] IR_Boolean_Type.5:rax 
  .loc 2 842 16
  # $11.1: Boolean = call(is_338, ir_value_type.1, IR_Boolean_Type.5)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Boolean_Type.5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:rax 
  # jump($11.1, .LABEL__generate_store_value_31__19, .LABEL__generate_store_value_31__21)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_store_value_31__21
.LABEL__generate_store_value_31__19:
  .loc 2 843 9
  # $156.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $156.1:rbx 
  .loc 2 843 9
  # $157.1: @FILE = call(write_332, $156.1, "  mov BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_81[rip] # "  mov BYTE PTR "
  call write_332
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $157.1:rax 
  .loc 2 843 9
  # $158.1: @FILE = call(write_53, $157.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $157.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $158.1:rax 
  .loc 2 843 9
  # $159.1: @FILE = call(write_332, $158.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $159.1:rax 
  .loc 2 843 9
  # $160.1: @FILE = call(write_operand_33, $159.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_33
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $160.1:rax 
  .loc 2 843 9
  # $161.1: @FILE = call(end_line_335, $160.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $161.1
  # [discarded value]: $160.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] 
.LABEL__generate_store_value_31__21:
  # IR_Struct_Type.5: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] IR_Struct_Type.5:rax 
  .loc 2 844 16
  # $12.1: Boolean = call(is_338, ir_value_type.1, IR_Struct_Type.5)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Struct_Type.5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:rax 
  # jump($12.1, .LABEL__generate_store_value_31__22, .LABEL__generate_store_value_31__24)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_store_value_31__24
.LABEL__generate_store_value_31__22:
  .loc 2 845 24
  # struct_type.1: @IR_Struct_Type = ir_value_type.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:rax 
  # MC_Register_Based_Address.2: @Object_Type = load_variable(MC_Register_Based_Address)
  lea rbx, MC_Register_Based_Address[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:rax MC_Register_Based_Address.2:rbx 
  .loc 2 849 13
  # $25.1: Boolean = call(is_338, address.1, MC_Register_Based_Address.2)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-47], rax
  call is_338
  # [discarded value]: MC_Register_Based_Address.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:rax 
  # jump($25.1, .LABEL__generate_store_value_31__28, .LABEL__generate_store_value_31__30)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_store_value_31__30
.LABEL__generate_store_value_31__28:
  .loc 2 850 24
  # address.1: @MC_Register_Based_Address = address.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:rax 
  .loc 2 851 13
  # destination_register.3: @MC_Register = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:rax destination_register.3:rbx 
  .loc 2 852 76
  # $36.1: @MC_Register = load_struct_member(address.1, register)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:rax destination_register.3:rbx $36.1:r15 
  .loc 2 852 35
  # $37.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov [rbp-56], rax
  mov [rbp-64], rbx
  mov [rbp-72], r15
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:[rbp-56] destination_register.3:[rbp-64] $36.1:[rbp-72] $37.1:rax 
  # store_struct_member($37.1, register, $36.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:[rbp-56] destination_register.3:[rbp-64] $37.1:rax 
  # store_struct_member($37.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:[rbp-56] destination_register.3:[rbp-64] $37.1:rax 
  .loc 2 852 13
  # destination_address.3: @MC_Register_Based_Address = $37.1
  mov [rbp-72], rax
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] address.1:[rbp-56] destination_register.3:[rbp-64] destination_address.3:rax 
  .loc 2 853 48
  # destination_address_extra_offset.3: Int = load_struct_member(address.1, offset)
  mov rbx, [rbp-56]
  mov r15, [rbx+16]
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:rax destination_address_extra_offset.3:r15 
  # jump(.LABEL__generate_store_value_31__29)
  mov [rbp-72], rax
  mov [rbp-80], r15
.LABEL__generate_store_value_31__29:
  # destination_address.10: @MC_Register_Based_Address = phi(destination_address.2, destination_address.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] 
  # destination_address_extra_offset.10: Int = phi(destination_address_extra_offset.2, destination_address_extra_offset.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] 
  # destination_register.7: @MC_Register = phi(destination_register.2, destination_register.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] 
  # IR_Variable_Value.12: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] IR_Variable_Value.12:rax 
  .loc 2 861 13
  # $39.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.12)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.12
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:rax 
  # jump($39.1, .LABEL__generate_store_value_31__31, .LABEL__generate_store_value_31__33)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_store_value_31__33
.LABEL__generate_store_value_31__31:
  .loc 2 862 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] ir_value.1:rax 
  .loc 2 863 25
  # mc_value.1: @MC_Value = call(get_value_41, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_41
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:rax 
  .loc 2 864 17
  # $60.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:rax $60.1:rbx 
  # jump($60.1, .LABEL__generate_store_value_31__42, .LABEL__generate_store_value_31__43)
  test bl, bl
  mov [rbp-89], rax
  mov [rbp-90], bl
  jz .LABEL__generate_store_value_31__43
.LABEL__generate_store_value_31__42:
  .loc 2 865 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] 
.LABEL__generate_store_value_31__43:
  .loc 2 870 33
  # mc_value_address.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-89]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:rax:[rbp-89] $60.1:[rbp-90] mc_value_address.1:rbx 
  # MC_Register_Based_Address.3: @Object_Type = load_variable(MC_Register_Based_Address)
  lea r15, MC_Register_Based_Address[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:rax:[rbp-89] $60.1:[rbp-90] mc_value_address.1:rbx MC_Register_Based_Address.3:r15 
  .loc 2 871 17
  # $62.1: Boolean = call(is_338, mc_value_address.1, MC_Register_Based_Address.3)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-98], rbx
  call is_338
  # [discarded value]: MC_Register_Based_Address.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:rax 
  # jump($62.1, .LABEL__generate_store_value_31__44, .LABEL__generate_store_value_31__46)
  test al, al
  mov [rbp-99], al
  jz .LABEL__generate_store_value_31__46
.LABEL__generate_store_value_31__44:
  .loc 2 872 37
  # mc_value_address.1: @MC_Register_Based_Address = mc_value_address.1
  mov rax, [rbp-98]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:rax 
  .loc 2 873 17
  # source_register.3: @MC_Register = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:rax source_register.3:rbx 
  .loc 2 874 75
  # $73.1: @MC_Register = load_struct_member(mc_value_address.1, register)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:rax source_register.3:rbx $73.1:r15 
  .loc 2 874 34
  # $74.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov [rbp-107], rax
  mov [rbp-115], rbx
  mov [rbp-123], r15
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:[rbp-107] source_register.3:[rbp-115] $73.1:[rbp-123] $74.1:rax 
  # store_struct_member($74.1, register, $73.1)
  mov rbx, [rbp-123]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:[rbp-107] source_register.3:[rbp-115] $74.1:rax 
  # store_struct_member($74.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:[rbp-107] source_register.3:[rbp-115] $74.1:rax 
  .loc 2 874 17
  # source_address.3: @MC_Register_Based_Address = $74.1
  mov [rbp-123], rax
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] mc_value_address.1:[rbp-107] source_register.3:[rbp-115] source_address.3:rax 
  .loc 2 875 47
  # source_address_extra_offset.3: Int = load_struct_member(mc_value_address.1, offset)
  mov rbx, [rbp-107]
  mov r15, [rbx+16]
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:rax source_address_extra_offset.3:r15 
  # jump(.LABEL__generate_store_value_31__45)
  mov [rbp-123], rax
  mov [rbp-131], r15
.LABEL__generate_store_value_31__45:
  # source_register.9: @MC_Register = phi(source_register.2, source_register.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] 
  # source_address.9: @MC_Register_Based_Address = phi(source_address.2, source_address.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] 
  # source_address_extra_offset.9: Int = phi(source_address_extra_offset.2, source_address_extra_offset.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] 
  .loc 2 883 35
  # ir_value_type_size.1: Int = call(get_type_size_54, self.1, ir_value_type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call get_type_size_54
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:rax 
  .loc 2 884 30
  # data_register.1: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  mov [rbp-139], rax
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rax 
  .loc 2 885 13
  # store_struct_member(data_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rax 
  .loc 2 886 13
  # copied_bytes.1: Int = 0
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rax copied_bytes.1:rbx 
  # jump(.LABEL__generate_store_value_31__47)
  mov [rbp-147], rax
  mov [rbp-155], rbx
.LABEL__generate_store_value_31__47:
  # copied_bytes.2: Int = phi(copied_bytes.1, copied_bytes.4)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] 
  .loc 2 887 20
  # $78.1: Int = ir_value_type_size.1 - copied_bytes.2
  mov rax, [rbp-139]
  sub rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $78.1:rax 
  .loc 2 887 20
  # $79.1: Boolean = $78.1 >= 8
  cmp rax, 8
  setge bl
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:rbx 
  # jump($79.1, .LABEL__generate_store_value_31__48, .LABEL__generate_store_value_31__49)
  test bl, bl
  mov [rbp-156], bl
  jz .LABEL__generate_store_value_31__49
.LABEL__generate_store_value_31__48:
  .loc 2 888 41
  # $80.1: Int = source_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-131]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $80.1:rax 
  .loc 2 888 17
  # store_struct_member(source_address.9, offset, $80.1)
  mov rbx, [rbp-123]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] 
  .loc 2 889 17
  # $81.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $81.1:r15 
  .loc 2 889 17
  # $82.1: @FILE = call(write_332, $81.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $82.1:rax 
  .loc 2 889 56
  # $83.1: @String = load_struct_member(data_register.1, name_q)
  mov rbx, [rbp-147]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $82.1:rax $83.1:r15 
  .loc 2 889 17
  # $84.1: @FILE = call(write_332, $82.1, $83.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $84.1:rax 
  .loc 2 889 17
  # $85.1: @FILE = call(write_332, $84.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $85.1:rax 
  .loc 2 889 17
  # $86.1: @FILE = call(write_53, $85.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-123]
  call write_53
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $86.1:rax 
  .loc 2 889 17
  # $87.1: @FILE = call(end_line_335, $86.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] 
  .loc 2 890 46
  # $88.1: Int = destination_address_extra_offset.10 + copied_bytes.2
  mov rax, [rbp-80]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $88.1:rax 
  .loc 2 890 17
  # store_struct_member(destination_address.10, offset, $88.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] 
  .loc 2 891 17
  # $89.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $89.1:r15 
  .loc 2 891 17
  # $90.1: @FILE = call(write_332, $89.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $90.1:rax 
  .loc 2 891 17
  # $91.1: @FILE = call(write_53, $90.1, destination_address.10)
  mov rdi, rax
  mov rsi, [rbp-72]
  call write_53
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $91.1:rax 
  .loc 2 891 17
  # $92.1: @FILE = call(write_332, $91.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $92.1:rax 
  .loc 2 891 95
  # $93.1: @String = load_struct_member(data_register.1, name_q)
  mov rbx, [rbp-147]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $92.1:rax $93.1:r15 
  .loc 2 891 17
  # $94.1: @FILE = call(write_332, $92.1, $93.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $93.1
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $94.1:rax 
  .loc 2 891 17
  # $95.1: @FILE = call(end_line_335, $94.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $95.1
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] 
  .loc 2 892 32
  # copied_bytes.4: Int = copied_bytes.2 + 8
  mov rax, [rbp-155]
  add rax, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] copied_bytes.4:rax:[rbp-155] 
  # jump(.LABEL__generate_store_value_31__47)
  mov [rbp-155], rax
  jmp .LABEL__generate_store_value_31__47
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] copied_bytes.4:[rbp-155] 
  # [discarded value]: copied_bytes.4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] 
.LABEL__generate_store_value_31__49:
  .loc 2 894 17
  # $97.1: Int = ir_value_type_size.1 - copied_bytes.2
  mov rax, [rbp-139]
  sub rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $97.1:rax 
  .loc 2 894 17
  # $98.1: Boolean = $97.1 >= 4
  cmp rax, 4
  setge bl
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:rbx 
  # jump($98.1, .LABEL__generate_store_value_31__50, .LABEL__generate_store_value_31__51)
  test bl, bl
  mov [rbp-157], bl
  jz .LABEL__generate_store_value_31__51
.LABEL__generate_store_value_31__50:
  .loc 2 895 41
  # $99.1: Int = source_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-131]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $99.1:rax 
  .loc 2 895 17
  # store_struct_member(source_address.9, offset, $99.1)
  mov rbx, [rbp-123]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] 
  .loc 2 896 17
  # $100.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $100.1:r15 
  .loc 2 896 17
  # $101.1: @FILE = call(write_332, $100.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $101.1:rax 
  .loc 2 896 56
  # $102.1: @String = load_struct_member(data_register.1, name_d)
  mov rbx, [rbp-147]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $101.1:rax $102.1:r15 
  .loc 2 896 17
  # $103.1: @FILE = call(write_332, $101.1, $102.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $102.1
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $103.1:rax 
  .loc 2 896 17
  # $104.1: @FILE = call(write_332, $103.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $104.1:rax 
  .loc 2 896 17
  # $105.1: @FILE = call(write_53, $104.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-123]
  call write_53
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $105.1:rax 
  .loc 2 896 17
  # $106.1: @FILE = call(end_line_335, $105.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $106.1
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] 
  .loc 2 897 46
  # $107.1: Int = destination_address_extra_offset.10 + copied_bytes.2
  mov rax, [rbp-80]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $107.1:rax 
  .loc 2 897 17
  # store_struct_member(destination_address.10, offset, $107.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $107.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] 
  .loc 2 898 17
  # $108.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $108.1:r15 
  .loc 2 898 17
  # $109.1: @FILE = call(write_332, $108.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $109.1:rax 
  .loc 2 898 17
  # $110.1: @FILE = call(write_53, $109.1, destination_address.10)
  mov rdi, rax
  mov rsi, [rbp-72]
  call write_53
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $110.1:rax 
  .loc 2 898 17
  # $111.1: @FILE = call(write_332, $110.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $111.1:rax 
  .loc 2 898 95
  # $112.1: @String = load_struct_member(data_register.1, name_d)
  mov rbx, [rbp-147]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $111.1:rax $112.1:r15 
  .loc 2 898 17
  # $113.1: @FILE = call(write_332, $111.1, $112.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $112.1
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] $113.1:rax 
  .loc 2 898 17
  # $114.1: @FILE = call(end_line_335, $113.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $114.1
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] 
  .loc 2 899 32
  # copied_bytes.7: Int = copied_bytes.2 + 4
  mov rax, [rbp-155]
  add rax, 4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:rax:[rbp-155] 
  # jump(.LABEL__generate_store_value_31__51)
  mov [rbp-155], rax
.LABEL__generate_store_value_31__51:
  # copied_bytes.8: Int = phi(copied_bytes.7, copied_bytes.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] 
  .loc 2 901 17
  # $116.1: Int = ir_value_type_size.1 - copied_bytes.8
  mov rax, [rbp-139]
  sub rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $116.1:rax 
  .loc 2 901 17
  # $117.1: Boolean = $116.1 >= 2
  cmp rax, 2
  setge bl
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:rbx 
  # jump($117.1, .LABEL__generate_store_value_31__52, .LABEL__generate_store_value_31__53)
  test bl, bl
  mov [rbp-158], bl
  jz .LABEL__generate_store_value_31__53
.LABEL__generate_store_value_31__52:
  .loc 2 902 41
  # $118.1: Int = source_address_extra_offset.9 + copied_bytes.8
  mov rax, [rbp-131]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $118.1:rax 
  .loc 2 902 17
  # store_struct_member(source_address.9, offset, $118.1)
  mov rbx, [rbp-123]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] 
  .loc 2 903 17
  # $119.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $119.1:r15 
  .loc 2 903 17
  # $120.1: @FILE = call(write_332, $119.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $119.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $120.1:rax 
  .loc 2 903 56
  # $121.1: @String = load_struct_member(data_register.1, name_w)
  mov rbx, [rbp-147]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $120.1:rax $121.1:r15 
  .loc 2 903 17
  # $122.1: @FILE = call(write_332, $120.1, $121.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $121.1
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $122.1:rax 
  .loc 2 903 17
  # $123.1: @FILE = call(write_332, $122.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $123.1:rax 
  .loc 2 903 17
  # $124.1: @FILE = call(write_53, $123.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-123]
  call write_53
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $124.1:rax 
  .loc 2 903 17
  # $125.1: @FILE = call(end_line_335, $124.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $125.1
  # [discarded value]: $124.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] 
  .loc 2 904 46
  # $126.1: Int = destination_address_extra_offset.10 + copied_bytes.8
  mov rax, [rbp-80]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $126.1:rax 
  .loc 2 904 17
  # store_struct_member(destination_address.10, offset, $126.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] 
  .loc 2 905 17
  # $127.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $127.1:r15 
  .loc 2 905 17
  # $128.1: @FILE = call(write_332, $127.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $128.1:rax 
  .loc 2 905 17
  # $129.1: @FILE = call(write_53, $128.1, destination_address.10)
  mov rdi, rax
  mov rsi, [rbp-72]
  call write_53
  # [discarded value]: $128.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $129.1:rax 
  .loc 2 905 17
  # $130.1: @FILE = call(write_332, $129.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $130.1:rax 
  .loc 2 905 95
  # $131.1: @String = load_struct_member(data_register.1, name_w)
  mov rbx, [rbp-147]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $130.1:rax $131.1:r15 
  .loc 2 905 17
  # $132.1: @FILE = call(write_332, $130.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $131.1
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] $132.1:rax 
  .loc 2 905 17
  # $133.1: @FILE = call(end_line_335, $132.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $133.1
  # [discarded value]: $132.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] 
  .loc 2 906 32
  # copied_bytes.10: Int = copied_bytes.8 + 2
  mov rax, [rbp-155]
  add rax, 2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:rax:[rbp-155] 
  # jump(.LABEL__generate_store_value_31__53)
  mov [rbp-155], rax
.LABEL__generate_store_value_31__53:
  # copied_bytes.11: Int = phi(copied_bytes.8, copied_bytes.10)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] 
  .loc 2 908 17
  # $135.1: Int = ir_value_type_size.1 - copied_bytes.11
  mov rax, [rbp-139]
  sub rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $135.1:rax 
  .loc 2 908 17
  # $136.1: Boolean = $135.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:rbx 
  # jump($136.1, .LABEL__generate_store_value_31__54, .LABEL__generate_store_value_31__55)
  test bl, bl
  mov [rbp-159], bl
  jz .LABEL__generate_store_value_31__55
.LABEL__generate_store_value_31__54:
  .loc 2 909 41
  # $137.1: Int = source_address_extra_offset.9 + copied_bytes.11
  mov rax, [rbp-131]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $137.1:rax 
  .loc 2 909 17
  # store_struct_member(source_address.9, offset, $137.1)
  mov rbx, [rbp-123]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  .loc 2 910 17
  # $138.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:rbx:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $138.1:r15 
  .loc 2 910 17
  # $139.1: @FILE = call(write_332, $138.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $139.1:rax 
  .loc 2 910 56
  # $140.1: @String = load_struct_member(data_register.1, name_b)
  mov rbx, [rbp-147]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $139.1:rax $140.1:r15 
  .loc 2 910 17
  # $141.1: @FILE = call(write_332, $139.1, $140.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $140.1
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $141.1:rax 
  .loc 2 910 17
  # $142.1: @FILE = call(write_332, $141.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $142.1:rax 
  .loc 2 910 17
  # $143.1: @FILE = call(write_53, $142.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-123]
  call write_53
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $143.1:rax 
  .loc 2 910 17
  # $144.1: @FILE = call(end_line_335, $143.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $144.1
  # [discarded value]: $143.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  .loc 2 911 46
  # $145.1: Int = destination_address_extra_offset.10 + copied_bytes.11
  mov rax, [rbp-80]
  add rax, QWORD PTR [rbp-155]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $145.1:rax 
  .loc 2 911 17
  # store_struct_member(destination_address.10, offset, $145.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  .loc 2 912 17
  # $146.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rbx:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $146.1:r15 
  .loc 2 912 17
  # $147.1: @FILE = call(write_332, $146.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $147.1:rax 
  .loc 2 912 17
  # $148.1: @FILE = call(write_53, $147.1, destination_address.10)
  mov rdi, rax
  mov rsi, [rbp-72]
  call write_53
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $148.1:rax 
  .loc 2 912 17
  # $149.1: @FILE = call(write_332, $148.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $149.1:rax 
  .loc 2 912 95
  # $150.1: @String = load_struct_member(data_register.1, name_b)
  mov rbx, [rbp-147]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rbx:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $149.1:rax $150.1:r15 
  .loc 2 912 17
  # $151.1: @FILE = call(write_332, $149.1, $150.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $150.1
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $151.1:rax 
  .loc 2 912 17
  # $152.1: @FILE = call(end_line_335, $151.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $152.1
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  .loc 2 913 32
  # copied_bytes.13: Int = copied_bytes.11 + 1
  mov rax, [rbp-155]
  add rax, 1
  # [discarded value]: copied_bytes.13
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  # jump(.LABEL__generate_store_value_31__55)
.LABEL__generate_store_value_31__55:
  .loc 2 915 13
  # store_struct_member(data_register.1, is_reserved, false)
  mov rax, [rbp-147]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rax:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  .loc 2 916 17
  # $154.1: Boolean = source_register.9 != null
  cmp QWORD PTR [rbp-115], 0
  setne bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:rax:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:rbx 
  # jump($154.1, .LABEL__generate_store_value_31__56, .LABEL__generate_store_value_31__32)
  test bl, bl
  mov [rbp-160], bl
  jz .LABEL__generate_store_value_31__32
.LABEL__generate_store_value_31__56:
  .loc 2 917 17
  # store_struct_member(source_register.9, is_reserved, false)
  mov rax, [rbp-115]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:rax:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:[rbp-160] 
  # jump(.LABEL__generate_store_value_31__32)
.LABEL__generate_store_value_31__32:
  .loc 2 935 13
  # $155.1: Boolean = destination_register.7 != null
  cmp QWORD PTR [rbp-64], 0
  setne al
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] $155.1:rax mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:[rbp-160] 
  # jump($155.1, .LABEL__generate_store_value_31__58, .LABEL__generate_store_value_31__5)
  test al, al
  mov [rbp-161], al
  jz .LABEL__generate_store_value_31__5
.LABEL__generate_store_value_31__58:
  .loc 2 936 13
  # store_struct_member(destination_register.7, is_reserved, false)
  mov rax, [rbp-64]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:rax:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] $155.1:[rbp-161] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:[rbp-160] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] $155.1:[rbp-161] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:[rbp-160] 
  # [discarded value]: $155.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:[rbp-160] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] $154.1:[rbp-160] 
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] $136.1:[rbp-159] 
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] copied_bytes.11:[rbp-155] 
  # [discarded value]: copied_bytes.11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] copied_bytes.10:[rbp-155] 
  # [discarded value]: copied_bytes.10
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] $117.1:[rbp-158] 
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] copied_bytes.8:[rbp-155] 
  # [discarded value]: copied_bytes.8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] copied_bytes.7:[rbp-155] 
  # [discarded value]: copied_bytes.7
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] $98.1:[rbp-157] 
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] $79.1:[rbp-156] 
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] copied_bytes.2:[rbp-155] 
  # [discarded value]: copied_bytes.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] source_register.9:[rbp-115] source_address.9:[rbp-123] source_address_extra_offset.9:[rbp-131] ir_value_type_size.1:[rbp-139] data_register.1:[rbp-147] copied_bytes.1:[rbp-155] 
  # [discarded value]: copied_bytes.1
  # [discarded value]: data_register.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: source_address_extra_offset.9
  # [discarded value]: source_address.9
  # [discarded value]: source_register.9
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.3:[rbp-115] source_address.3:[rbp-123] source_address_extra_offset.3:[rbp-131] 
  # [discarded value]: source_address_extra_offset.3
  # [discarded value]: source_address.3
  # [discarded value]: source_register.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] 
.LABEL__generate_store_value_31__46:
  .loc 2 877 35
  # source_register.2: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rax:[rbp-115] 
  .loc 2 878 17
  # store_struct_member(source_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rax:[rbp-115] 
  .loc 2 879 17
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rax:[rbp-115] $64.1:r15 
  .loc 2 879 17
  # $65.1: @FILE = call(write_332, $64.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-115], rax
  call write_332
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] $65.1:rax 
  .loc 2 879 56
  # $66.1: @String = load_struct_member(source_register.2, name_q)
  mov rbx, [rbp-115]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rbx:[rbp-115] $65.1:rax $66.1:r15 
  .loc 2 879 17
  # $67.1: @FILE = call(write_332, $65.1, $66.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] $67.1:rax 
  .loc 2 879 17
  # $68.1: @FILE = call(write_332, $67.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] $68.1:rax 
  .loc 2 879 17
  # $69.1: @FILE = call(write_53, $68.1, mc_value_address.1)
  mov rdi, rax
  mov rsi, [rbp-98]
  call write_53
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] $69.1:rax 
  .loc 2 879 17
  # $70.1: @FILE = call(end_line_335, $69.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] 
  .loc 2 880 34
  # $71.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] $71.1:rax 
  # store_struct_member($71.1, register, source_register.2)
  mov rbx, [rbp-115]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rbx:[rbp-115] $71.1:rax 
  # store_struct_member($71.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rbx:[rbp-115] $71.1:rax 
  .loc 2 880 17
  # source_address.2: @MC_Register_Based_Address = $71.1
  mov [rbp-139], rax
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rbx:[rbp-115] source_address.2:rax:[rbp-123] 
  .loc 2 881 17
  # source_address_extra_offset.2: Int = 0
  xor r15, r15
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:rbx:[rbp-115] source_address.2:rax:[rbp-123] source_address_extra_offset.2:r15:[rbp-131] 
  # jump(.LABEL__generate_store_value_31__45)
  mov [rbp-123], rax
  mov [rbp-131], r15
  jmp .LABEL__generate_store_value_31__45
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] source_register.2:[rbp-115] source_address.2:[rbp-123] source_address_extra_offset.2:[rbp-131] 
  # [discarded value]: source_address_extra_offset.2
  # [discarded value]: source_address.2
  # [discarded value]: source_register.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] $62.1:[rbp-99] 
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] mc_value_address.1:[rbp-98] 
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] $60.1:[rbp-90] 
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] mc_value.1:[rbp-89] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] 
.LABEL__generate_store_value_31__33:
  # IR_Struct_Constructor_Value.2: @Object_Type = load_variable(IR_Struct_Constructor_Value)
  lea rax, IR_Struct_Constructor_Value[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] IR_Struct_Constructor_Value.2:rax 
  .loc 2 919 20
  # $40.1: Boolean = call(is_338, ir_value.1, IR_Struct_Constructor_Value.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Struct_Constructor_Value.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:rax 
  # jump($40.1, .LABEL__generate_store_value_31__34, .LABEL__generate_store_value_31__36)
  test al, al
  mov [rbp-82], al
  jz .LABEL__generate_store_value_31__36
.LABEL__generate_store_value_31__34:
  .loc 2 920 25
  # ir_value.1: @IR_Struct_Constructor_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] ir_value.1:rax 
  .loc 2 921 36
  # $46.1: @List = load_struct_member(ir_value.1, init_arguments)
  mov rbx, [rax+40]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] $46.1:rbx 
  .loc 2 921 36
  # init_arguments_item.1: @List_Item = load_struct_member($46.1, first_item)
  mov rax, [rbx]
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:rax 
  # jump(.LABEL__generate_store_value_31__37)
  mov [rbp-90], rax
.LABEL__generate_store_value_31__37:
  # init_arguments_item.2: @List_Item = phi(init_arguments_item.1, init_arguments_item.5)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] 
  .loc 2 922 20
  # $48.1: Boolean = init_arguments_item.2 != null
  cmp QWORD PTR [rbp-90], 0
  setne al
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:rax 
  # jump($48.1, .LABEL__generate_store_value_31__38, .LABEL__generate_store_value_31__32)
  test al, al
  mov [rbp-91], al
  jz .LABEL__generate_store_value_31__32
.LABEL__generate_store_value_31__38:
  .loc 2 923 34
  # init_argument.1: @IR_Call_Argument = load_struct_member(init_arguments_item.2, data)
  mov rax, [rbp-90]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:rax:[rbp-90] $48.1:[rbp-91] init_argument.1:rbx 
  .loc 2 924 62
  # $51.1: @String = load_struct_member(init_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:rax:[rbp-90] $48.1:[rbp-91] init_argument.1:rbx $51.1:r15 
  .loc 2 924 39
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $51.1)
  mov rdi, [rbp-47]
  mov rsi, r15
  mov [rbp-99], rbx
  call get_member_150
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:rax 
  .loc 2 925 21
  # $53.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:rax $53.1:rbx 
  # jump($53.1, .LABEL__generate_store_value_31__40, .LABEL__generate_store_value_31__41)
  test bl, bl
  mov [rbp-107], rax
  mov [rbp-108], bl
  jz .LABEL__generate_store_value_31__41
.LABEL__generate_store_value_31__40:
  .loc 2 926 21
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] 
.LABEL__generate_store_value_31__41:
  .loc 2 928 81
  # $54.1: Int = call(get_offset_32, self.1, struct_type_member.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-107]
  call get_offset_32
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] $54.1:rax 
  .loc 2 928 46
  # $55.1: Int = destination_address_extra_offset.10 + $54.1
  mov rbx, [rbp-80]
  add rbx, rax
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] $55.1:rbx 
  .loc 2 928 17
  # store_struct_member(destination_address.10, offset, $55.1)
  mov rax, [rbp-72]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rax:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] 
  .loc 2 929 43
  # $56.1: @IR_Value = load_struct_member(init_argument.1, value)
  mov rbx, [rbp-99]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:rax:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:rbx:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] $56.1:r15 
  .loc 2 929 17
  # call(generate_store_value_31, self.1, $56.1, destination_address.10)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] 
  .loc 2 930 39
  # init_arguments_item.5: @List_Item = load_struct_member(init_arguments_item.2, next_item)
  mov rax, [rbp-90]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] init_arguments_item.5:rbx:[rbp-90] 
  # jump(.LABEL__generate_store_value_31__37)
  mov [rbp-90], rbx
  jmp .LABEL__generate_store_value_31__37
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] init_arguments_item.5:[rbp-90] 
  # [discarded value]: init_arguments_item.5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] $53.1:[rbp-108] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] init_argument.1:[rbp-99] struct_type_member.1:[rbp-107] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: init_argument.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] $48.1:[rbp-91] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] init_arguments_item.2:[rbp-90] 
  # [discarded value]: init_arguments_item.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] init_arguments_item.1:[rbp-90] 
  # [discarded value]: init_arguments_item.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] 
.LABEL__generate_store_value_31__36:
  .loc 2 933 24
  # $41.1: @String = call(clone_340, "Unsupported value: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value: "
  call clone_340
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] $41.1:rax 
  .loc 2 933 60
  # $42.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:rbx:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] $41.1:rax $42.1:r15 
  .loc 2 933 60
  # $43.1: @String = load_struct_member_address($42.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] ir_value.1:rbx:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] $41.1:rax $43.1:r14 
  .loc 2 933 24
  # $44.1: @String = call(append_349, $41.1, $43.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $43.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] $44.1:rax 
  .loc 2 933 13
  # call(abort_34, self.1, $44.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] $40.1:[rbp-82] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] $39.1:[rbp-81] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] destination_address.10:[rbp-72] destination_address_extra_offset.10:[rbp-80] destination_register.7:[rbp-64] 
  # [discarded value]: destination_register.7
  # [discarded value]: destination_address_extra_offset.10
  # [discarded value]: destination_address.10
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.3:[rbp-64] destination_address.3:[rbp-72] destination_address_extra_offset.3:[rbp-80] 
  # [discarded value]: destination_address_extra_offset.3
  # [discarded value]: destination_address.3
  # [discarded value]: destination_register.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] 
.LABEL__generate_store_value_31__30:
  .loc 2 855 36
  # destination_register.2: @MC_Register = call(find_unused_register_37, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_37
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rax:[rbp-64] 
  .loc 2 856 13
  # store_struct_member(destination_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rax:[rbp-64] 
  .loc 2 857 13
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rax:[rbp-64] $27.1:r15 
  .loc 2 857 13
  # $28.1: @FILE = call(write_332, $27.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-64], rax
  call write_332
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] $28.1:rax 
  .loc 2 857 52
  # $29.1: @String = load_struct_member(destination_register.2, name_q)
  mov rbx, [rbp-64]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rbx:[rbp-64] $28.1:rax $29.1:r15 
  .loc 2 857 13
  # $30.1: @FILE = call(write_332, $28.1, $29.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] $30.1:rax 
  .loc 2 857 13
  # $31.1: @FILE = call(write_332, $30.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] $31.1:rax 
  .loc 2 857 13
  # $32.1: @FILE = call(write_53, $31.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] $32.1:rax 
  .loc 2 857 13
  # $33.1: @FILE = call(end_line_335, $32.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] 
  .loc 2 858 35
  # $34.1: @MC_Register_Based_Address = new(MC_Register_Based_Address)
  mov rdi, 24
  call malloc
  lea rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] $34.1:rax 
  # store_struct_member($34.1, register, destination_register.2)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rbx:[rbp-64] $34.1:rax 
  # store_struct_member($34.1, offset, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rbx:[rbp-64] $34.1:rax 
  .loc 2 858 13
  # destination_address.2: @MC_Register_Based_Address = $34.1
  mov [rbp-88], rax
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rbx:[rbp-64] destination_address.2:rax:[rbp-72] 
  .loc 2 859 13
  # destination_address_extra_offset.2: Int = 0
  xor r15, r15
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:rbx:[rbp-64] destination_address.2:rax:[rbp-72] destination_address_extra_offset.2:r15:[rbp-80] 
  # jump(.LABEL__generate_store_value_31__29)
  mov [rbp-72], rax
  mov [rbp-80], r15
  jmp .LABEL__generate_store_value_31__29
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] destination_register.2:[rbp-64] destination_address.2:[rbp-72] destination_address_extra_offset.2:[rbp-80] 
  # [discarded value]: destination_address_extra_offset.2
  # [discarded value]: destination_address.2
  # [discarded value]: destination_register.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] $25.1:[rbp-48] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] struct_type.1:[rbp-47] 
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] 
.LABEL__generate_store_value_31__24:
  # IR_Function_Type.4: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] IR_Function_Type.4:rax 
  .loc 2 938 16
  # $13.1: Boolean = call(is_338, ir_value_type.1, IR_Function_Type.4)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Function_Type.4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:rax 
  # jump($13.1, .LABEL__generate_store_value_31__25, .LABEL__generate_store_value_31__27)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_store_value_31__27
.LABEL__generate_store_value_31__25:
  .loc 2 939 9
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $18.1:rbx 
  .loc 2 939 9
  # $19.1: @FILE = call(write_332, $18.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_332
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $19.1:rax 
  .loc 2 939 9
  # $20.1: @FILE = call(write_53, $19.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_53
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $20.1:rax 
  .loc 2 939 9
  # $21.1: @FILE = call(write_332, $20.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $21.1:rax 
  .loc 2 939 9
  # $22.1: @FILE = call(write_operand_33, $21.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_33
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $22.1:rax 
  .loc 2 939 9
  # $23.1: @FILE = call(end_line_335, $22.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] 
  # jump(.LABEL__generate_store_value_31__5)
  jmp .LABEL__generate_store_value_31__5
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] 
.LABEL__generate_store_value_31__27:
  .loc 2 941 20
  # $14.1: @String = call(clone_340, "Unsupported value type: ")
  lea rdi, .LABEL__string_79[rip] # "Unsupported value type: "
  call clone_340
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $14.1:rax 
  .loc 2 941 61
  # $15.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $14.1:rax $15.1:r15 
  .loc 2 941 61
  # $16.1: @String = load_struct_member_address($15.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $14.1:rax $16.1:r14 
  .loc 2 941 20
  # $17.1: @String = call(append_349, $14.1, $16.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $16.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] $17.1:rax 
  .loc 2 941 9
  # call(abort_34, self.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] $13.1:[rbp-40] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] $12.1:[rbp-39] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] $11.1:[rbp-38] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:[rbp-37] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] $8.1:[rbp-35] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [discarded value]: ir_value_type.1
  # [discarded value]: address.1
  # [discarded value]: ir_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_value_31__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_value_31__stack_frame_size: .word 176

  .loc 2 945 1
  .text
get_offset_32:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_offset_32__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_offset_32__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  .loc 2 946 5
  # offset.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax 
  .loc 2 947 20
  # struct_type.1: @IR_Struct_Type = load_struct_member(struct_type_member.1, struct_type)
  mov rbx, [rsi]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx 
  .loc 2 948 9
  # $2.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov r15, [rbx+16]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $2.1:r15 
  .loc 2 948 9
  # $3.1: Boolean = $2.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $2.1
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $3.1:r14 
  # jump($3.1, .LABEL__get_offset_32__2, .LABEL__get_offset_32__3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-33], r14b
  jz .LABEL__get_offset_32__3
.LABEL__get_offset_32__2:
  .loc 2 949 37
  # $4.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] $4.1:rbx 
  .loc 2 949 18
  # offset.2: Int = call(get_type_size_54, self.1, $4.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_54
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:rax:[rbp-8] 
  # jump(.LABEL__get_offset_32__3)
  mov [rbp-8], rax
.LABEL__get_offset_32__3:
  # offset.7: Int = phi(offset.1, offset.2)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] 
  .loc 2 951 40
  # $6.1: @List = load_struct_member(struct_type.1, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] $6.1:rbx 
  .loc 2 951 40
  # current_struct_type_member_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:r15 
  # jump(.LABEL__get_offset_32__4)
  mov [rbp-41], r15
.LABEL__get_offset_32__4:
  # offset.6: Int = phi(offset.7, offset.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] 
  # current_struct_type_member_item.2: @List_Item = phi(current_struct_type_member_item.1, current_struct_type_member_item.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] 
  .loc 2 952 12
  # $8.1: Boolean = current_struct_type_member_item.2 != null
  cmp QWORD PTR [rbp-41], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:rax 
  # jump($8.1, .LABEL__get_offset_32__5, .LABEL__get_offset_32__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_offset_32__6
.LABEL__get_offset_32__5:
  .loc 2 953 39
  # current_struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(current_struct_type_member_item.2, data)
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rbx 
  .loc 2 954 13
  # $11.1: Boolean = current_struct_type_member.1 == struct_type_member.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rbx $11.1:r15 
  # jump($11.1, .LABEL__get_offset_32__7, .LABEL__get_offset_32__8)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__get_offset_32__8
.LABEL__get_offset_32__7:
  .loc 2 955 13
  # return(offset.6)
  mov rax, [rbp-8]
  jmp .LABEL__get_offset_32__end
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] 
.LABEL__get_offset_32__8:
  .loc 2 957 46
  # $12.1: @IR_Type = load_struct_member(current_struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rax:[rbp-50] $11.1:[rbp-51] $12.1:rbx 
  .loc 2 957 27
  # $13.1: Int = call(get_type_size_54, self.1, $12.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_54
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] $13.1:rax 
  .loc 2 957 18
  # offset.5: Int = offset.6 + $13.1
  mov rbx, [rbp-8]
  add rbx, rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:rbx:[rbp-8] 
  .loc 2 958 43
  # current_struct_type_member_item.5: @List_Item = load_struct_member(current_struct_type_member_item.2, next_item)
  mov rax, [rbp-41]
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:rbx:[rbp-8] current_struct_type_member_item.5:r15:[rbp-41] 
  # jump(.LABEL__get_offset_32__4)
  mov [rbp-8], rbx
  mov [rbp-41], r15
  jmp .LABEL__get_offset_32__4
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:[rbp-8] current_struct_type_member_item.5:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.5
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] 
  # [discarded value]: current_struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] 
.LABEL__get_offset_32__6:
  .loc 2 960 5
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.2
  # [discarded value]: offset.6
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.1
  # [discarded value]: offset.7
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] 
  # [discarded value]: offset.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [discarded value]: struct_type.1
  # [discarded value]: offset.1
  # [discarded value]: struct_type_member.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_offset_32__end:
  mov rsp, rbp
  pop rbp
  ret

get_offset_32__stack_frame_size: .word 64

  .loc 2 963 1
  .text
write_operand_33:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_operand_33__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_operand_33__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # generator.1: @MC_Generator = load_variable(generator)
  # [live values]: file.1:rdi generator.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx 
  # IR_Constant_Value.10: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx IR_Constant_Value.10:rax 
  .loc 2 964 9
  # $1.1: Boolean = call(is_338, ir_value.1, IR_Constant_Value.10)
  mov [rbp-8], rdi
  mov rdi, rdx
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_338
  # [discarded value]: IR_Constant_Value.10
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__write_operand_33__2, .LABEL__write_operand_33__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_operand_33__3
.LABEL__write_operand_33__2:
  .loc 2 965 21
  # ir_value.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax 
  .loc 2 966 13
  # $3.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax $3.1:rbx 
  # Boolean_Token.3: @Object_Type = load_variable(Boolean_Token)
  lea r15, Boolean_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax $3.1:rbx Boolean_Token.3:r15 
  .loc 2 966 13
  # $4.1: Boolean = call(is_338, $3.1, Boolean_Token.3)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-33], rax
  call is_338
  # [discarded value]: Boolean_Token.3
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:rax 
  # jump($4.1, .LABEL__write_operand_33__4, .LABEL__write_operand_33__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_operand_33__5
.LABEL__write_operand_33__4:
  .loc 2 967 18
  # $6.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $6.1:rbx 
  .loc 2 967 17
  # $7.1: Boolean = load_struct_member($6.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $7.1:r15 
  # jump($7.1, .LABEL__write_operand_33__6, .LABEL__write_operand_33__7)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__write_operand_33__7
.LABEL__write_operand_33__6:
  .loc 2 968 24
  # $8.1: @FILE = call(write_331, file.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call write_331
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] $8.1:rax 
  .loc 2 968 17
  # return($8.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] 
.LABEL__write_operand_33__7:
  .loc 2 970 20
  # $9.1: @FILE = call(write_331, file.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_331
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] $9.1:rax 
  .loc 2 970 13
  # return($9.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] 
.LABEL__write_operand_33__5:
  .loc 2 972 13
  # $10.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $10.1:rbx 
  # Character_Token.3: @Object_Type = load_variable(Character_Token)
  lea r15, Character_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $10.1:rbx Character_Token.3:r15 
  .loc 2 972 13
  # $11.1: Boolean = call(is_338, $10.1, Character_Token.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Character_Token.3
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__write_operand_33__10, .LABEL__write_operand_33__11)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_operand_33__11
.LABEL__write_operand_33__10:
  .loc 2 973 32
  # $13.1: @Character_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $13.1:rbx 
  .loc 2 973 31
  # $14.1: Int8 = load_struct_member($13.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $14.1:r15 
  .loc 2 973 31
  # $15.1: Int = cast($14.1)
  mov bl, r15b
  movsx rbx, bl
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $15.1:rbx 
  .loc 2 973 20
  # $16.1: @FILE = call(write_331, file.1, $15.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_331
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $16.1:rax 
  .loc 2 973 13
  # return($16.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] 
.LABEL__write_operand_33__11:
  .loc 2 975 13
  # $17.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx 
  # Integer_Token.5: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx Integer_Token.5:r15 
  .loc 2 975 13
  # $18.1: Boolean = call(is_338, $17.1, Integer_Token.5)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Integer_Token.5
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:rax 
  # jump($18.1, .LABEL__write_operand_33__13, .LABEL__write_operand_33__14)
  test al, al
  mov [rbp-36], al
  jz .LABEL__write_operand_33__14
.LABEL__write_operand_33__13:
  .loc 2 976 32
  # $20.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $20.1:rbx 
  .loc 2 976 31
  # $21.1: Int = load_struct_member($20.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $21.1:r15 
  .loc 2 976 20
  # $22.1: @FILE = call(write_331, file.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_331
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $22.1:rax 
  .loc 2 976 13
  # return($22.1)
  mov [rbp-44], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] 
.LABEL__write_operand_33__14:
  .loc 2 978 13
  # $23.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $23.1:rbx 
  # Null_Token.3: @Object_Type = load_variable(Null_Token)
  lea r15, Null_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $23.1:rbx Null_Token.3:r15 
  .loc 2 978 13
  # $24.1: Boolean = call(is_338, $23.1, Null_Token.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Null_Token.3
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:rax 
  # jump($24.1, .LABEL__write_operand_33__16, .LABEL__write_operand_33__17)
  test al, al
  mov [rbp-37], al
  jz .LABEL__write_operand_33__17
.LABEL__write_operand_33__16:
  .loc 2 979 20
  # $25.1: @FILE = call(write_331, file.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_331
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $25.1:rax 
  .loc 2 979 13
  # return($25.1)
  mov [rbp-45], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] 
.LABEL__write_operand_33__17:
  .loc 2 981 25
  # $26.1: @String = call(clone_340, "Unsupported constant literal: ")
  lea rdi, .LABEL__string_84[rip] # "Unsupported constant literal: "
  call clone_340
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax 
  .loc 2 981 72
  # $27.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-33]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $27.1:r15 
  .loc 2 981 72
  # $28.1: @Object_Type = load_struct_member($27.1, object_type)
  mov r14, [r15]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $28.1:r14 
  .loc 2 981 72
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r15, r14
  add r15, 8
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $29.1:r15 
  .loc 2 981 25
  # $30.1: @String = call(append_349, $26.1, $29.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $29.1
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $30.1:rax 
  .loc 2 981 9
  # call(abort_34, generator.1, $30.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_34
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] 
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] 
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] 
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__write_operand_33__3:
  # IR_Variable_Value.13: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] IR_Variable_Value.13:rax 
  .loc 2 983 9
  # $31.1: Boolean = call(is_338, ir_value.1, IR_Variable_Value.13)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.13
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:rax 
  # jump($31.1, .LABEL__write_operand_33__19, .LABEL__write_operand_33__20)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_operand_33__20
.LABEL__write_operand_33__19:
  .loc 2 984 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:rax 
  .loc 2 985 21
  # mc_value.1: @MC_Value = call(get_value_41, generator.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-34], rax
  call get_value_41
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax 
  .loc 2 986 13
  # $34.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax $34.1:rbx 
  # jump($34.1, .LABEL__write_operand_33__21, .LABEL__write_operand_33__22)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__write_operand_33__22
.LABEL__write_operand_33__21:
  .loc 2 987 13
  # call(abort_34, generator.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] 
.LABEL__write_operand_33__22:
  .loc 2 989 52
  # $35.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:rax:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] $35.1:rbx 
  .loc 2 989 28
  # value_type_size.1: Int = call(get_type_size_54, generator.1, $35.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_type_size_54
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax 
  .loc 2 990 13
  # $37.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax $37.1:r15 
  .loc 2 990 13
  # $38.1: Boolean = $37.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax $38.1:r14 
  # jump($38.1, .LABEL__write_operand_33__23, .LABEL__write_operand_33__24)
  test r14b, r14b
  mov [rbp-51], rax
  mov [rbp-52], r14b
  jz .LABEL__write_operand_33__24
.LABEL__write_operand_33__23:
  .loc 2 991 17
  # $39.1: Boolean = value_type_size.1 == 8
  cmp QWORD PTR [rbp-51], 8
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:rax 
  # jump($39.1, .LABEL__write_operand_33__25, .LABEL__write_operand_33__26)
  test al, al
  mov [rbp-53], al
  jz .LABEL__write_operand_33__26
.LABEL__write_operand_33__25:
  .loc 2 992 35
  # $40.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $40.1:rbx 
  .loc 2 992 35
  # $41.1: @String = load_struct_member($40.1, name_q)
  mov r15, [rbx+8]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $41.1:r15 
  .loc 2 992 24
  # $42.1: @FILE = call(write_332, file.1, $41.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_332
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $42.1:rax 
  .loc 2 992 17
  # return($42.1)
  mov [rbp-61], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] 
.LABEL__write_operand_33__26:
  .loc 2 994 17
  # $43.1: Boolean = value_type_size.1 == 4
  cmp QWORD PTR [rbp-51], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:rax 
  # jump($43.1, .LABEL__write_operand_33__28, .LABEL__write_operand_33__29)
  test al, al
  mov [rbp-54], al
  jz .LABEL__write_operand_33__29
.LABEL__write_operand_33__28:
  .loc 2 995 35
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $44.1:rbx 
  .loc 2 995 35
  # $45.1: @String = load_struct_member($44.1, name_d)
  mov r15, [rbx+16]
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $45.1:r15 
  .loc 2 995 24
  # $46.1: @FILE = call(write_332, file.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_332
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $46.1:rax 
  .loc 2 995 17
  # return($46.1)
  mov [rbp-62], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] 
.LABEL__write_operand_33__29:
  .loc 2 997 17
  # $47.1: Boolean = value_type_size.1 == 2
  cmp QWORD PTR [rbp-51], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:rax 
  # jump($47.1, .LABEL__write_operand_33__31, .LABEL__write_operand_33__32)
  test al, al
  mov [rbp-55], al
  jz .LABEL__write_operand_33__32
.LABEL__write_operand_33__31:
  .loc 2 998 35
  # $48.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $48.1:rbx 
  .loc 2 998 35
  # $49.1: @String = load_struct_member($48.1, name_w)
  mov r15, [rbx+24]
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $49.1:r15 
  .loc 2 998 24
  # $50.1: @FILE = call(write_332, file.1, $49.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_332
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $50.1:rax 
  .loc 2 998 17
  # return($50.1)
  mov [rbp-63], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] 
.LABEL__write_operand_33__32:
  .loc 2 1000 17
  # $51.1: Boolean = value_type_size.1 == 1
  cmp QWORD PTR [rbp-51], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:rax 
  # jump($51.1, .LABEL__write_operand_33__34, .LABEL__write_operand_33__35)
  test al, al
  mov [rbp-56], al
  jz .LABEL__write_operand_33__35
.LABEL__write_operand_33__34:
  .loc 2 1001 35
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $52.1:rbx 
  .loc 2 1001 35
  # $53.1: @String = load_struct_member($52.1, name_b)
  mov r15, [rbx+32]
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $53.1:r15 
  .loc 2 1001 24
  # $54.1: @FILE = call(write_332, file.1, $53.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_332
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $54.1:rax 
  .loc 2 1001 17
  # return($54.1)
  mov [rbp-64], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] 
.LABEL__write_operand_33__35:
  .loc 2 1003 29
  # $55.1: @String = call(clone_340, "Unsupported type size: ")
  lea rdi, .LABEL__string_85[rip] # "Unsupported type size: "
  call clone_340
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $55.1:rax 
  .loc 2 1003 29
  # $56.1: @String = call(append_348, $55.1, value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-51]
  call append_348
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $56.1:rax 
  .loc 2 1003 13
  # call(abort_34, generator.1, $56.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_34
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] 
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] 
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] 
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] 
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] 
.LABEL__write_operand_33__24:
  .loc 2 1005 13
  # $57.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-42]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $57.1:rbx 
  .loc 2 1005 13
  # $58.1: Boolean = $57.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:r15 
  # jump($58.1, .LABEL__write_operand_33__37, .LABEL__write_operand_33__38)
  test r15b, r15b
  mov [rbp-53], r15b
  jz .LABEL__write_operand_33__38
.LABEL__write_operand_33__37:
  .loc 2 1006 17
  # $59.1: Boolean = value_type_size.1 == 8
  cmp QWORD PTR [rbp-51], 8
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:rax 
  # jump($59.1, .LABEL__write_operand_33__39, .LABEL__write_operand_33__40)
  test al, al
  mov [rbp-54], al
  jz .LABEL__write_operand_33__40
.LABEL__write_operand_33__39:
  .loc 2 1007 24
  # $60.1: @FILE = call(write_332, file.1, "QWORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_69[rip] # "QWORD PTR "
  call write_332
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $60.1:rax 
  .loc 2 1007 55
  # $61.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $60.1:rax $61.1:r15 
  .loc 2 1007 24
  # $62.1: @FILE = call(write_53, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $62.1:rax 
  .loc 2 1007 17
  # return($62.1)
  mov [rbp-62], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] 
.LABEL__write_operand_33__40:
  .loc 2 1009 17
  # $63.1: Boolean = value_type_size.1 == 4
  cmp QWORD PTR [rbp-51], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:rax 
  # jump($63.1, .LABEL__write_operand_33__42, .LABEL__write_operand_33__43)
  test al, al
  mov [rbp-55], al
  jz .LABEL__write_operand_33__43
.LABEL__write_operand_33__42:
  .loc 2 1010 24
  # $64.1: @FILE = call(write_332, file.1, "DWORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_70[rip] # "DWORD PTR "
  call write_332
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $64.1:rax 
  .loc 2 1010 55
  # $65.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $64.1:rax $65.1:r15 
  .loc 2 1010 24
  # $66.1: @FILE = call(write_53, $64.1, $65.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $66.1:rax 
  .loc 2 1010 17
  # return($66.1)
  mov [rbp-63], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] 
.LABEL__write_operand_33__43:
  .loc 2 1012 17
  # $67.1: Boolean = value_type_size.1 == 2
  cmp QWORD PTR [rbp-51], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:rax 
  # jump($67.1, .LABEL__write_operand_33__45, .LABEL__write_operand_33__46)
  test al, al
  mov [rbp-56], al
  jz .LABEL__write_operand_33__46
.LABEL__write_operand_33__45:
  .loc 2 1013 24
  # $68.1: @FILE = call(write_332, file.1, "WORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_71[rip] # "WORD PTR "
  call write_332
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $68.1:rax 
  .loc 2 1013 54
  # $69.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $68.1:rax $69.1:r15 
  .loc 2 1013 24
  # $70.1: @FILE = call(write_53, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $70.1:rax 
  .loc 2 1013 17
  # return($70.1)
  mov [rbp-64], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] 
.LABEL__write_operand_33__46:
  .loc 2 1015 17
  # $71.1: Boolean = value_type_size.1 == 1
  cmp QWORD PTR [rbp-51], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:rax 
  # jump($71.1, .LABEL__write_operand_33__48, .LABEL__write_operand_33__49)
  test al, al
  mov [rbp-57], al
  jz .LABEL__write_operand_33__49
.LABEL__write_operand_33__48:
  .loc 2 1016 24
  # $72.1: @FILE = call(write_332, file.1, "BYTE PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_72[rip] # "BYTE PTR "
  call write_332
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $72.1:rax 
  .loc 2 1016 54
  # $73.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $72.1:rax $73.1:r15 
  .loc 2 1016 24
  # $74.1: @FILE = call(write_53, $72.1, $73.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $74.1:rax 
  .loc 2 1016 17
  # return($74.1)
  mov [rbp-65], rax
  jmp .LABEL__write_operand_33__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] 
.LABEL__write_operand_33__49:
  .loc 2 1018 29
  # $75.1: @String = call(clone_340, "Unsupported type size: ")
  lea rdi, .LABEL__string_85[rip] # "Unsupported type size: "
  call clone_340
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $75.1:rax 
  .loc 2 1018 29
  # $76.1: @String = call(append_348, $75.1, value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-51]
  call append_348
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $76.1:rax 
  .loc 2 1018 13
  # call(abort_34, generator.1, $76.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_34
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] 
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] 
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] 
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] 
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] 
.LABEL__write_operand_33__38:
  .loc 2 1020 9
  # call(abort_34, generator.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] 
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] 
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] 
  # [discarded value]: value_type_size.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] 
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] 
.LABEL__write_operand_33__20:
  .loc 2 1022 21
  # $77.1: @String = call(clone_340, "Unsupported value: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value: "
  call clone_340
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax 
  .loc 2 1022 57
  # $78.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax $78.1:r15 
  .loc 2 1022 57
  # $79.1: @String = load_struct_member_address($78.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax $79.1:r14 
  .loc 2 1022 21
  # $80.1: @String = call(append_349, $77.1, $79.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $79.1
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $80.1:rax 
  .loc 2 1022 5
  # call(abort_34, generator.1, $80.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_34
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] 
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: ir_value.1
  # [discarded value]: generator.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_operand_33__end:
  mov rsp, rbp
  pop rbp
  ret

write_operand_33__stack_frame_size: .word 80

  .loc 2 1025 1
  .text
abort_34:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_34__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_34__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: self.1:rdi message.1:rsi 
  .loc 2 1026 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: message.1:rsi $1.1:rax 
  .loc 2 1026 5
  # $2.1: @FILE = call(flush_336, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call flush_336
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] 
  .loc 2 1027 11
  # $3.1: @String = call(clone_340, "[Generator] ")
  lea rdi, .LABEL__string_86[rip] # "[Generator] "
  call clone_340
  # [live values]: message.1:[rbp-8] $3.1:rax 
  .loc 2 1027 11
  # $4.1: @String = call(append_349, $3.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_349
  # [discarded value]: $3.1
  # [discarded value]: message.1
  # [live values]: $4.1:rax 
  .loc 2 1027 5
  # call(abort_337, $4.1)
  mov rdi, rax
  call abort_337
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__abort_34__end:
  mov rsp, rbp
  pop rbp
  ret

abort_34__stack_frame_size: .word 16

  .loc 2 1056 1
  .text
create_mc_generator_35:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_generator_35__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_generator_35__1:
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: output_file_path.1:rdi 
  .loc 2 1059 29
  # $1.1: @Int8 = load_struct_member(output_file_path.1, data)
  mov rax, [rdi]
  # [live values]: output_file_path.1:rdi $1.1:rax 
  .loc 2 1059 52
  # $2.1: @Int8 = load_struct_member("w", data)
  lea rbx, .LABEL__string_9[rip] # "w"
  mov r15, [rbx]
  # [live values]: output_file_path.1:rdi $1.1:rax $2.1:r15 
  .loc 2 1059 23
  # $3.1: @FILE = call(fopen, $1.1, $2.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: output_file_path.1:[rbp-8] $3.1:rax 
  .loc 2 1034 34
  # $4.1: @MC_Register_RAX = new(MC_Register_RAX)
  mov [rbp-16], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RAX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_q, "rax")
  lea rbx, .LABEL__string_87[rip] # "rax"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_d, "eax")
  lea rbx, .LABEL__string_88[rip] # "eax"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_w, "ax")
  lea rbx, .LABEL__string_89[rip] # "ax"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_b, "al")
  lea rbx, .LABEL__string_90[rip] # "al"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  .loc 2 1035 34
  # $5.1: @MC_Register_RCX = new(MC_Register_RCX)
  mov [rbp-24], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RCX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_q, "rcx")
  lea rbx, .LABEL__string_91[rip] # "rcx"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_d, "ecx")
  lea rbx, .LABEL__string_92[rip] # "ecx"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_w, "cx")
  lea rbx, .LABEL__string_93[rip] # "cx"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_b, "cl")
  lea rbx, .LABEL__string_94[rip] # "cl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  .loc 2 1036 34
  # $6.1: @MC_Register_RDX = new(MC_Register_RDX)
  mov [rbp-32], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RDX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_q, "rdx")
  lea rbx, .LABEL__string_95[rip] # "rdx"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_d, "edx")
  lea rbx, .LABEL__string_96[rip] # "edx"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_w, "dx")
  lea rbx, .LABEL__string_97[rip] # "dx"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_b, "dl")
  lea rbx, .LABEL__string_98[rip] # "dl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  .loc 2 1037 34
  # $7.1: @MC_Register_RBX = new(MC_Register_RBX)
  mov [rbp-40], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RBX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_q, "rbx")
  lea rbx, .LABEL__string_99[rip] # "rbx"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_d, "ebx")
  lea rbx, .LABEL__string_100[rip] # "ebx"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_w, "bx")
  lea rbx, .LABEL__string_101[rip] # "bx"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_b, "bl")
  lea rbx, .LABEL__string_102[rip] # "bl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  .loc 2 1038 34
  # $8.1: @MC_Register_RSI = new(MC_Register_RSI)
  mov [rbp-48], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RSI[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_q, "rsi")
  lea rbx, .LABEL__string_103[rip] # "rsi"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_d, "esi")
  lea rbx, .LABEL__string_104[rip] # "esi"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_w, "si")
  lea rbx, .LABEL__string_105[rip] # "si"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_b, "sil")
  lea rbx, .LABEL__string_106[rip] # "sil"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  .loc 2 1039 34
  # $9.1: @MC_Register_RDI = new(MC_Register_RDI)
  mov [rbp-56], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RDI[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_q, "rdi")
  lea rbx, .LABEL__string_107[rip] # "rdi"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_d, "edi")
  lea rbx, .LABEL__string_108[rip] # "edi"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_w, "di")
  lea rbx, .LABEL__string_109[rip] # "di"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_b, "dil")
  lea rbx, .LABEL__string_110[rip] # "dil"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  .loc 2 1040 34
  # $10.1: @MC_Register_RSP = new(MC_Register_RSP)
  mov [rbp-64], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RSP[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_q, "rsp")
  lea rbx, .LABEL__string_111[rip] # "rsp"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_d, "esp")
  lea rbx, .LABEL__string_112[rip] # "esp"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_w, "sp")
  lea rbx, .LABEL__string_113[rip] # "sp"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_b, "spl")
  lea rbx, .LABEL__string_114[rip] # "spl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  .loc 2 1041 34
  # $11.1: @MC_Register_RBP = new(MC_Register_RBP)
  mov [rbp-72], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RBP[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_q, "rbp")
  lea rbx, .LABEL__string_115[rip] # "rbp"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_d, "ebp")
  lea rbx, .LABEL__string_116[rip] # "ebp"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_w, "bp")
  lea rbx, .LABEL__string_117[rip] # "bp"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_b, "bpl")
  lea rbx, .LABEL__string_118[rip] # "bpl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  .loc 2 1042 33
  # $12.1: @MC_Register_R8 = new(MC_Register_R8)
  mov [rbp-80], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R8[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_q, "r8")
  lea rbx, .LABEL__string_119[rip] # "r8"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_d, "r8d")
  lea rbx, .LABEL__string_120[rip] # "r8d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_w, "r8w")
  lea rbx, .LABEL__string_121[rip] # "r8w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_b, "r8b")
  lea rbx, .LABEL__string_122[rip] # "r8b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  .loc 2 1043 33
  # $13.1: @MC_Register_R9 = new(MC_Register_R9)
  mov [rbp-88], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R9[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_q, "r9")
  lea rbx, .LABEL__string_123[rip] # "r9"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_d, "r9d")
  lea rbx, .LABEL__string_124[rip] # "r9d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_w, "r9w")
  lea rbx, .LABEL__string_125[rip] # "r9w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_b, "r9b")
  lea rbx, .LABEL__string_126[rip] # "r9b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  .loc 2 1044 34
  # $14.1: @MC_Register_R10 = new(MC_Register_R10)
  mov [rbp-96], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R10[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_q, "r10")
  lea rbx, .LABEL__string_127[rip] # "r10"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_d, "r10d")
  lea rbx, .LABEL__string_128[rip] # "r10d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_w, "r10w")
  lea rbx, .LABEL__string_129[rip] # "r10w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_b, "r10b")
  lea rbx, .LABEL__string_130[rip] # "r10b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  .loc 2 1045 34
  # $15.1: @MC_Register_R11 = new(MC_Register_R11)
  mov [rbp-104], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R11[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_q, "r11")
  lea rbx, .LABEL__string_131[rip] # "r11"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_d, "r11d")
  lea rbx, .LABEL__string_132[rip] # "r11d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_w, "r11w")
  lea rbx, .LABEL__string_133[rip] # "r11w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_b, "r11b")
  lea rbx, .LABEL__string_134[rip] # "r11b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  .loc 2 1046 34
  # $16.1: @MC_Register_R12 = new(MC_Register_R12)
  mov [rbp-112], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R12[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_q, "r12")
  lea rbx, .LABEL__string_135[rip] # "r12"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_d, "r12d")
  lea rbx, .LABEL__string_136[rip] # "r12d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_w, "r12w")
  lea rbx, .LABEL__string_137[rip] # "r12w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_b, "r12b")
  lea rbx, .LABEL__string_138[rip] # "r12b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  .loc 2 1047 34
  # $17.1: @MC_Register_R13 = new(MC_Register_R13)
  mov [rbp-120], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R13[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_q, "r13")
  lea rbx, .LABEL__string_139[rip] # "r13"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_d, "r13d")
  lea rbx, .LABEL__string_140[rip] # "r13d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_w, "r13w")
  lea rbx, .LABEL__string_141[rip] # "r13w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_b, "r13b")
  lea rbx, .LABEL__string_142[rip] # "r13b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  .loc 2 1048 34
  # $18.1: @MC_Register_R14 = new(MC_Register_R14)
  mov [rbp-128], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R14[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, name_q, "r14")
  lea rbx, .LABEL__string_143[rip] # "r14"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, name_d, "r14d")
  lea rbx, .LABEL__string_144[rip] # "r14d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, name_w, "r14w")
  lea rbx, .LABEL__string_145[rip] # "r14w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, name_b, "r14b")
  lea rbx, .LABEL__string_146[rip] # "r14b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  .loc 2 1049 34
  # $19.1: @MC_Register_R15 = new(MC_Register_R15)
  mov [rbp-136], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R15[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, name_q, "r15")
  lea rbx, .LABEL__string_147[rip] # "r15"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, name_d, "r15d")
  lea rbx, .LABEL__string_148[rip] # "r15d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, name_w, "r15w")
  lea rbx, .LABEL__string_149[rip] # "r15w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, name_b, "r15b")
  lea rbx, .LABEL__string_150[rip] # "r15b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  .loc 2 1053 22
  # $20.1: @List = new(List)
  mov [rbp-144], rax
  mov rdi, 24
  call malloc
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:rax 
  # store_struct_member($20.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:rax 
  # store_struct_member($20.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:rax 
  # store_struct_member($20.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:rax 
  .loc 2 1057 12
  # $21.1: @MC_Generator = new(MC_Generator)
  mov [rbp-152], rax
  mov rdi, 177
  call malloc
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, output_file_path, output_file_path.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: output_file_path.1
  # [live values]: $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, output_file, $3.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, output_debug_comments, true)
  mov BYTE PTR [rax+16], 1
  # [live values]: $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rax, $4.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+17], rbx
  # [discarded value]: $4.1
  # [live values]: $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rcx, $5.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+25], rbx
  # [discarded value]: $5.1
  # [live values]: $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rdx, $6.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+33], rbx
  # [discarded value]: $6.1
  # [live values]: $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rbx, $7.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+41], rbx
  # [discarded value]: $7.1
  # [live values]: $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rsi, $8.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+49], rbx
  # [discarded value]: $8.1
  # [live values]: $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rdi, $9.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $9.1
  # [live values]: $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rsp, $10.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: $10.1
  # [live values]: $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_rbp, $11.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+73], rbx
  # [discarded value]: $11.1
  # [live values]: $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r8, $12.1)
  mov rbx, [rbp-88]
  mov QWORD PTR [rax+81], rbx
  # [discarded value]: $12.1
  # [live values]: $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r9, $13.1)
  mov rbx, [rbp-96]
  mov QWORD PTR [rax+89], rbx
  # [discarded value]: $13.1
  # [live values]: $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r10, $14.1)
  mov rbx, [rbp-104]
  mov QWORD PTR [rax+97], rbx
  # [discarded value]: $14.1
  # [live values]: $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r11, $15.1)
  mov rbx, [rbp-112]
  mov QWORD PTR [rax+105], rbx
  # [discarded value]: $15.1
  # [live values]: $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r12, $16.1)
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+113], rbx
  # [discarded value]: $16.1
  # [live values]: $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r13, $17.1)
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+121], rbx
  # [discarded value]: $17.1
  # [live values]: $18.1:[rbp-136] $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r14, $18.1)
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+129], rbx
  # [discarded value]: $18.1
  # [live values]: $19.1:[rbp-144] $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, register_r15, $19.1)
  mov rbx, [rbp-144]
  mov QWORD PTR [rax+137], rbx
  # [discarded value]: $19.1
  # [live values]: $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, first_value, null)
  mov QWORD PTR [rax+145], 0
  # [live values]: $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, last_value, null)
  mov QWORD PTR [rax+153], 0
  # [live values]: $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, stack_frame_size, 0)
  mov QWORD PTR [rax+161], 0
  # [live values]: $20.1:[rbp-152] $21.1:rax 
  # store_struct_member($21.1, strings, $20.1)
  mov rbx, [rbp-152]
  mov QWORD PTR [rax+169], rbx
  # [discarded value]: $20.1
  # [live values]: $21.1:rax 
  .loc 2 1057 5
  # return($21.1)
  mov [rbp-8], rax
  jmp .LABEL__create_mc_generator_35__end
  # [discarded value]: $21.1
  # [live values]: 
.LABEL__create_mc_generator_35__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_generator_35__stack_frame_size: .word 160

  .loc 2 1064 1
  .text
reset_36:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_36__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_36__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(.LABEL__reset_36__2)
  mov [rbp-8], rdi
.LABEL__reset_36__2:
  .loc 2 1065 12
  # $1.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 1065 12
  # $2.1: Boolean = $1.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__reset_36__3, .LABEL__reset_36__4)
  test r15b, r15b
  mov [rbp-9], r15b
  jz .LABEL__reset_36__4
.LABEL__reset_36__3:
  .loc 2 1066 18
  # value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1067 28
  # $4.1: @MC_Value = load_struct_member(value.1, next_value)
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx $4.1:r15 
  .loc 2 1067 9
  # store_struct_member(self.1, first_value, $4.1)
  mov QWORD PTR [rax+145], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1068 9
  # store_struct_member(value.1, prev_value, null)
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1069 9
  # store_struct_member(value.1, next_value, null)
  mov QWORD PTR [rbx+8], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1070 13
  # $5.1: @MC_Register = load_struct_member(value.1, register)
  mov r15, [rbx+32]
  # [discarded value]: value.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $5.1:r15 
  .loc 2 1070 13
  # $6.1: Boolean = $5.1 != null
  cmp r15, 0
  setne bl
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $6.1:rbx 
  # jump($6.1, .LABEL__reset_36__5, .LABEL__reset_36__2)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__reset_36__2
.LABEL__reset_36__5:
  .loc 2 1071 13
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-10] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__reset_36__4:
  .loc 2 1074 5
  # store_struct_member(self.1, last_value, null)
  mov rax, [rbp-8]
  mov QWORD PTR [rax+153], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] 
  .loc 2 1075 5
  # store_struct_member(self.1, stack_frame_size, 0)
  mov QWORD PTR [rax+161], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] 
  # return()
  jmp .LABEL__reset_36__end
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_36__end:
  mov rsp, rbp
  pop rbp
  ret

reset_36__stack_frame_size: .word 16

  .loc 2 1078 1
  .text
find_unused_register_37:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR find_unused_register_37__stack_frame_size[rip]
  sub rsp, rax
.LABEL__find_unused_register_37__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1079 9
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1079 9
  # $2.1: Boolean = load_struct_member($1.1, is_reserved)
  mov bl, [rax+40]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 2 1079 9
  # $4.1: Boolean = $2.1 == false
  cmp bl, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $4.1:rax 
  # jump($4.1, .LABEL__find_unused_register_37__2, .LABEL__find_unused_register_37__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__find_unused_register_37__3
.LABEL__find_unused_register_37__2:
  .loc 2 1079 51
  # $5.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $5.1:rbx 
  .loc 2 1079 51
  # $6.1: @MC_Value = load_struct_member($5.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $6.1:r15 
  .loc 2 1079 51
  # $4.2: Boolean = $6.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:rbx:[rbp-1] 
  # jump(.LABEL__find_unused_register_37__3)
  mov [rbp-1], bl
.LABEL__find_unused_register_37__3:
  .loc 2 1079 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # jump($4.3, .LABEL__find_unused_register_37__4, .LABEL__find_unused_register_37__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__find_unused_register_37__5
.LABEL__find_unused_register_37__4:
  .loc 2 1080 16
  # $8.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $8.1:rbx 
  .loc 2 1080 9
  # return($8.1)
  mov rax, rbx
  mov [rbp-17], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
.LABEL__find_unused_register_37__5:
  .loc 2 1082 9
  # $9.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $9.1:rbx 
  .loc 2 1082 9
  # $10.1: Boolean = load_struct_member($9.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $10.1:r15 
  .loc 2 1082 9
  # $12.1: Boolean = $10.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:rbx 
  # jump($12.1, .LABEL__find_unused_register_37__7, .LABEL__find_unused_register_37__8)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__find_unused_register_37__8
.LABEL__find_unused_register_37__7:
  .loc 2 1082 51
  # $13.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $13.1:rbx 
  .loc 2 1082 51
  # $14.1: @MC_Value = load_struct_member($13.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $14.1:r15 
  .loc 2 1082 51
  # $12.2: Boolean = $14.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:rbx:[rbp-10] 
  # jump(.LABEL__find_unused_register_37__8)
  mov [rbp-10], bl
.LABEL__find_unused_register_37__8:
  .loc 2 1082 9
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # jump($12.3, .LABEL__find_unused_register_37__9, .LABEL__find_unused_register_37__10)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__find_unused_register_37__10
.LABEL__find_unused_register_37__9:
  .loc 2 1083 16
  # $16.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $16.1:rbx 
  .loc 2 1083 9
  # return($16.1)
  mov rax, rbx
  mov [rbp-18], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
.LABEL__find_unused_register_37__10:
  .loc 2 1085 9
  # $17.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $17.1:rbx 
  .loc 2 1085 9
  # $18.1: Boolean = load_struct_member($17.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $18.1:r15 
  .loc 2 1085 9
  # $20.1: Boolean = $18.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:rbx 
  # jump($20.1, .LABEL__find_unused_register_37__12, .LABEL__find_unused_register_37__13)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__find_unused_register_37__13
.LABEL__find_unused_register_37__12:
  .loc 2 1085 51
  # $21.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $21.1:rbx 
  .loc 2 1085 51
  # $22.1: @MC_Value = load_struct_member($21.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $22.1:r15 
  .loc 2 1085 51
  # $20.2: Boolean = $22.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:rbx:[rbp-11] 
  # jump(.LABEL__find_unused_register_37__13)
  mov [rbp-11], bl
.LABEL__find_unused_register_37__13:
  .loc 2 1085 9
  # $20.3: Boolean = phi($20.1, $20.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # jump($20.3, .LABEL__find_unused_register_37__14, .LABEL__find_unused_register_37__15)
  mov al, [rbp-11]
  test al, al
  jz .LABEL__find_unused_register_37__15
.LABEL__find_unused_register_37__14:
  .loc 2 1086 16
  # $24.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $24.1:rbx 
  .loc 2 1086 9
  # return($24.1)
  mov rax, rbx
  mov [rbp-19], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
.LABEL__find_unused_register_37__15:
  .loc 2 1088 9
  # $25.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $25.1:rbx 
  .loc 2 1088 9
  # $26.1: Boolean = load_struct_member($25.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $26.1:r15 
  .loc 2 1088 9
  # $28.1: Boolean = $26.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:rbx 
  # jump($28.1, .LABEL__find_unused_register_37__17, .LABEL__find_unused_register_37__18)
  test bl, bl
  mov [rbp-12], bl
  jz .LABEL__find_unused_register_37__18
.LABEL__find_unused_register_37__17:
  .loc 2 1088 51
  # $29.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $29.1:rbx 
  .loc 2 1088 51
  # $30.1: @MC_Value = load_struct_member($29.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $29.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $30.1:r15 
  .loc 2 1088 51
  # $28.2: Boolean = $30.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:rbx:[rbp-12] 
  # jump(.LABEL__find_unused_register_37__18)
  mov [rbp-12], bl
.LABEL__find_unused_register_37__18:
  .loc 2 1088 9
  # $28.3: Boolean = phi($28.1, $28.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # jump($28.3, .LABEL__find_unused_register_37__19, .LABEL__find_unused_register_37__20)
  mov al, [rbp-12]
  test al, al
  jz .LABEL__find_unused_register_37__20
.LABEL__find_unused_register_37__19:
  .loc 2 1089 16
  # $32.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $32.1:rbx 
  .loc 2 1089 9
  # return($32.1)
  mov rax, rbx
  mov [rbp-20], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
.LABEL__find_unused_register_37__20:
  .loc 2 1091 9
  # $33.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $33.1:rbx 
  .loc 2 1091 9
  # $34.1: Boolean = load_struct_member($33.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $34.1:r15 
  .loc 2 1091 9
  # $36.1: Boolean = $34.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:rbx 
  # jump($36.1, .LABEL__find_unused_register_37__22, .LABEL__find_unused_register_37__23)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__find_unused_register_37__23
.LABEL__find_unused_register_37__22:
  .loc 2 1091 51
  # $37.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $37.1:rbx 
  .loc 2 1091 51
  # $38.1: @MC_Value = load_struct_member($37.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $37.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $38.1:r15 
  .loc 2 1091 51
  # $36.2: Boolean = $38.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $38.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:rbx:[rbp-13] 
  # jump(.LABEL__find_unused_register_37__23)
  mov [rbp-13], bl
.LABEL__find_unused_register_37__23:
  .loc 2 1091 9
  # $36.3: Boolean = phi($36.1, $36.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # jump($36.3, .LABEL__find_unused_register_37__24, .LABEL__find_unused_register_37__25)
  mov al, [rbp-13]
  test al, al
  jz .LABEL__find_unused_register_37__25
.LABEL__find_unused_register_37__24:
  .loc 2 1092 16
  # $40.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $40.1:rbx 
  .loc 2 1092 9
  # return($40.1)
  mov rax, rbx
  mov [rbp-21], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
.LABEL__find_unused_register_37__25:
  .loc 2 1094 9
  # $41.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $41.1:rbx 
  .loc 2 1094 9
  # $42.1: Boolean = load_struct_member($41.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $41.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $42.1:r15 
  .loc 2 1094 9
  # $44.1: Boolean = $42.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $42.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:rbx 
  # jump($44.1, .LABEL__find_unused_register_37__27, .LABEL__find_unused_register_37__28)
  test bl, bl
  mov [rbp-14], bl
  jz .LABEL__find_unused_register_37__28
.LABEL__find_unused_register_37__27:
  .loc 2 1094 51
  # $45.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $45.1:rbx 
  .loc 2 1094 51
  # $46.1: @MC_Value = load_struct_member($45.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $45.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $46.1:r15 
  .loc 2 1094 51
  # $44.2: Boolean = $46.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $46.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:rbx:[rbp-14] 
  # jump(.LABEL__find_unused_register_37__28)
  mov [rbp-14], bl
.LABEL__find_unused_register_37__28:
  .loc 2 1094 9
  # $44.3: Boolean = phi($44.1, $44.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # jump($44.3, .LABEL__find_unused_register_37__29, .LABEL__find_unused_register_37__30)
  mov al, [rbp-14]
  test al, al
  jz .LABEL__find_unused_register_37__30
.LABEL__find_unused_register_37__29:
  .loc 2 1095 16
  # $48.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $48.1:rbx 
  .loc 2 1095 9
  # return($48.1)
  mov rax, rbx
  mov [rbp-22], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
.LABEL__find_unused_register_37__30:
  .loc 2 1097 9
  # $49.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $49.1:rbx 
  .loc 2 1097 9
  # $50.1: Boolean = load_struct_member($49.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $49.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $50.1:r15 
  .loc 2 1097 9
  # $52.1: Boolean = $50.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $50.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:rbx 
  # jump($52.1, .LABEL__find_unused_register_37__32, .LABEL__find_unused_register_37__33)
  test bl, bl
  mov [rbp-15], bl
  jz .LABEL__find_unused_register_37__33
.LABEL__find_unused_register_37__32:
  .loc 2 1097 51
  # $53.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $53.1:rbx 
  .loc 2 1097 51
  # $54.1: @MC_Value = load_struct_member($53.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $54.1:r15 
  .loc 2 1097 51
  # $52.2: Boolean = $54.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:rbx:[rbp-15] 
  # jump(.LABEL__find_unused_register_37__33)
  mov [rbp-15], bl
.LABEL__find_unused_register_37__33:
  .loc 2 1097 9
  # $52.3: Boolean = phi($52.1, $52.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # jump($52.3, .LABEL__find_unused_register_37__34, .LABEL__find_unused_register_37__35)
  mov al, [rbp-15]
  test al, al
  jz .LABEL__find_unused_register_37__35
.LABEL__find_unused_register_37__34:
  .loc 2 1098 16
  # $56.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $56.1:rbx 
  .loc 2 1098 9
  # return($56.1)
  mov rax, rbx
  mov [rbp-23], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
.LABEL__find_unused_register_37__35:
  .loc 2 1100 9
  # $57.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $57.1:rbx 
  .loc 2 1100 9
  # $58.1: Boolean = load_struct_member($57.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $57.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $58.1:r15 
  .loc 2 1100 9
  # $60.1: Boolean = $58.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $58.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:rbx 
  # jump($60.1, .LABEL__find_unused_register_37__37, .LABEL__find_unused_register_37__38)
  test bl, bl
  mov [rbp-16], bl
  jz .LABEL__find_unused_register_37__38
.LABEL__find_unused_register_37__37:
  .loc 2 1100 51
  # $61.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $61.1:rbx 
  .loc 2 1100 51
  # $62.1: @MC_Value = load_struct_member($61.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $61.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $62.1:r15 
  .loc 2 1100 51
  # $60.2: Boolean = $62.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $62.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:rbx:[rbp-16] 
  # jump(.LABEL__find_unused_register_37__38)
  mov [rbp-16], bl
.LABEL__find_unused_register_37__38:
  .loc 2 1100 9
  # $60.3: Boolean = phi($60.1, $60.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # jump($60.3, .LABEL__find_unused_register_37__39, .LABEL__find_unused_register_37__40)
  mov al, [rbp-16]
  test al, al
  jz .LABEL__find_unused_register_37__40
.LABEL__find_unused_register_37__39:
  .loc 2 1101 16
  # $64.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $64.1:rbx 
  .loc 2 1101 9
  # return($64.1)
  mov rax, rbx
  mov [rbp-24], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
.LABEL__find_unused_register_37__40:
  .loc 2 1103 9
  # $65.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $65.1:rbx 
  .loc 2 1103 9
  # $66.1: Boolean = load_struct_member($65.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $65.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $66.1:r15 
  .loc 2 1103 9
  # $68.1: Boolean = $66.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $66.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:rbx 
  # jump($68.1, .LABEL__find_unused_register_37__42, .LABEL__find_unused_register_37__43)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__find_unused_register_37__43
.LABEL__find_unused_register_37__42:
  .loc 2 1103 50
  # $69.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $69.1:rbx 
  .loc 2 1103 50
  # $70.1: @MC_Value = load_struct_member($69.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $69.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $70.1:r15 
  .loc 2 1103 50
  # $68.2: Boolean = $70.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $70.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:rbx:[rbp-17] 
  # jump(.LABEL__find_unused_register_37__43)
  mov [rbp-17], bl
.LABEL__find_unused_register_37__43:
  .loc 2 1103 9
  # $68.3: Boolean = phi($68.1, $68.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # jump($68.3, .LABEL__find_unused_register_37__44, .LABEL__find_unused_register_37__45)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__find_unused_register_37__45
.LABEL__find_unused_register_37__44:
  .loc 2 1104 16
  # $72.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $72.1:rbx 
  .loc 2 1104 9
  # return($72.1)
  mov rax, rbx
  mov [rbp-25], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
.LABEL__find_unused_register_37__45:
  .loc 2 1106 9
  # $73.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $73.1:rbx 
  .loc 2 1106 9
  # $74.1: Boolean = load_struct_member($73.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $73.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $74.1:r15 
  .loc 2 1106 9
  # $76.1: Boolean = $74.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $74.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:rbx 
  # jump($76.1, .LABEL__find_unused_register_37__47, .LABEL__find_unused_register_37__48)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__find_unused_register_37__48
.LABEL__find_unused_register_37__47:
  .loc 2 1106 50
  # $77.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $77.1:rbx 
  .loc 2 1106 50
  # $78.1: @MC_Value = load_struct_member($77.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $77.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $78.1:r15 
  .loc 2 1106 50
  # $76.2: Boolean = $78.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $78.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:rbx:[rbp-18] 
  # jump(.LABEL__find_unused_register_37__48)
  mov [rbp-18], bl
.LABEL__find_unused_register_37__48:
  .loc 2 1106 9
  # $76.3: Boolean = phi($76.1, $76.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # jump($76.3, .LABEL__find_unused_register_37__49, .LABEL__find_unused_register_37__50)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__find_unused_register_37__50
.LABEL__find_unused_register_37__49:
  .loc 2 1107 16
  # $80.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $80.1:rbx 
  .loc 2 1107 9
  # return($80.1)
  mov rax, rbx
  mov [rbp-26], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
.LABEL__find_unused_register_37__50:
  .loc 2 1109 9
  # $81.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $81.1:rbx 
  .loc 2 1109 9
  # $82.1: Boolean = load_struct_member($81.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $81.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $82.1:r15 
  .loc 2 1109 9
  # $84.1: Boolean = $82.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $82.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:rbx 
  # jump($84.1, .LABEL__find_unused_register_37__52, .LABEL__find_unused_register_37__53)
  test bl, bl
  mov [rbp-19], bl
  jz .LABEL__find_unused_register_37__53
.LABEL__find_unused_register_37__52:
  .loc 2 1109 51
  # $85.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $85.1:rbx 
  .loc 2 1109 51
  # $86.1: @MC_Value = load_struct_member($85.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $85.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $86.1:r15 
  .loc 2 1109 51
  # $84.2: Boolean = $86.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:rbx:[rbp-19] 
  # jump(.LABEL__find_unused_register_37__53)
  mov [rbp-19], bl
.LABEL__find_unused_register_37__53:
  .loc 2 1109 9
  # $84.3: Boolean = phi($84.1, $84.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # jump($84.3, .LABEL__find_unused_register_37__54, .LABEL__find_unused_register_37__55)
  mov al, [rbp-19]
  test al, al
  jz .LABEL__find_unused_register_37__55
.LABEL__find_unused_register_37__54:
  .loc 2 1110 16
  # $88.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $88.1:rbx 
  .loc 2 1110 9
  # return($88.1)
  mov rax, rbx
  mov [rbp-27], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
.LABEL__find_unused_register_37__55:
  .loc 2 1112 9
  # $89.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $89.1:rbx 
  .loc 2 1112 9
  # $90.1: Boolean = load_struct_member($89.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $89.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $90.1:r15 
  .loc 2 1112 9
  # $92.1: Boolean = $90.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $90.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:rbx 
  # jump($92.1, .LABEL__find_unused_register_37__57, .LABEL__find_unused_register_37__58)
  test bl, bl
  mov [rbp-20], bl
  jz .LABEL__find_unused_register_37__58
.LABEL__find_unused_register_37__57:
  .loc 2 1112 51
  # $93.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $93.1:rbx 
  .loc 2 1112 51
  # $94.1: @MC_Value = load_struct_member($93.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $93.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $94.1:r15 
  .loc 2 1112 51
  # $92.2: Boolean = $94.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $94.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:rbx:[rbp-20] 
  # jump(.LABEL__find_unused_register_37__58)
  mov [rbp-20], bl
.LABEL__find_unused_register_37__58:
  .loc 2 1112 9
  # $92.3: Boolean = phi($92.1, $92.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # jump($92.3, .LABEL__find_unused_register_37__59, .LABEL__find_unused_register_37__60)
  mov al, [rbp-20]
  test al, al
  jz .LABEL__find_unused_register_37__60
.LABEL__find_unused_register_37__59:
  .loc 2 1113 16
  # $96.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $96.1:rbx 
  .loc 2 1113 9
  # return($96.1)
  mov rax, rbx
  mov [rbp-28], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
.LABEL__find_unused_register_37__60:
  .loc 2 1115 9
  # $97.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $97.1:rbx 
  .loc 2 1115 9
  # $98.1: Boolean = load_struct_member($97.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $97.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $98.1:r15 
  .loc 2 1115 9
  # $100.1: Boolean = $98.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $98.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:rbx 
  # jump($100.1, .LABEL__find_unused_register_37__62, .LABEL__find_unused_register_37__63)
  test bl, bl
  mov [rbp-21], bl
  jz .LABEL__find_unused_register_37__63
.LABEL__find_unused_register_37__62:
  .loc 2 1115 51
  # $101.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $101.1:rbx 
  .loc 2 1115 51
  # $102.1: @MC_Value = load_struct_member($101.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $101.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $102.1:r15 
  .loc 2 1115 51
  # $100.2: Boolean = $102.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $102.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:rbx:[rbp-21] 
  # jump(.LABEL__find_unused_register_37__63)
  mov [rbp-21], bl
.LABEL__find_unused_register_37__63:
  .loc 2 1115 9
  # $100.3: Boolean = phi($100.1, $100.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # jump($100.3, .LABEL__find_unused_register_37__64, .LABEL__find_unused_register_37__65)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__find_unused_register_37__65
.LABEL__find_unused_register_37__64:
  .loc 2 1116 16
  # $104.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $104.1:rbx 
  .loc 2 1116 9
  # return($104.1)
  mov rax, rbx
  mov [rbp-29], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
.LABEL__find_unused_register_37__65:
  .loc 2 1118 9
  # $105.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $105.1:rbx 
  .loc 2 1118 9
  # $106.1: Boolean = load_struct_member($105.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $105.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $106.1:r15 
  .loc 2 1118 9
  # $108.1: Boolean = $106.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $106.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:rbx 
  # jump($108.1, .LABEL__find_unused_register_37__67, .LABEL__find_unused_register_37__68)
  test bl, bl
  mov [rbp-22], bl
  jz .LABEL__find_unused_register_37__68
.LABEL__find_unused_register_37__67:
  .loc 2 1118 51
  # $109.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $109.1:rbx 
  .loc 2 1118 51
  # $110.1: @MC_Value = load_struct_member($109.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $109.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $110.1:r15 
  .loc 2 1118 51
  # $108.2: Boolean = $110.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $110.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:rbx:[rbp-22] 
  # jump(.LABEL__find_unused_register_37__68)
  mov [rbp-22], bl
.LABEL__find_unused_register_37__68:
  .loc 2 1118 9
  # $108.3: Boolean = phi($108.1, $108.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # jump($108.3, .LABEL__find_unused_register_37__69, .LABEL__find_unused_register_37__70)
  mov al, [rbp-22]
  test al, al
  jz .LABEL__find_unused_register_37__70
.LABEL__find_unused_register_37__69:
  .loc 2 1119 16
  # $112.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $112.1:rbx 
  .loc 2 1119 9
  # return($112.1)
  mov rax, rbx
  mov [rbp-30], rbx
  jmp .LABEL__find_unused_register_37__end
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
.LABEL__find_unused_register_37__70:
  .loc 2 1121 5
  # call(abort_34, self.1, "All registered are used")
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_151[rip] # "All registered are used"
  call abort_34
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # [discarded value]: $108.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [discarded value]: $108.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] 
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # [discarded value]: $100.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [discarded value]: $100.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] 
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # [discarded value]: $92.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [discarded value]: $92.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] 
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # [discarded value]: $84.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [discarded value]: $84.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] 
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # [discarded value]: $76.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [discarded value]: $76.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # [discarded value]: $68.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [discarded value]: $68.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # [discarded value]: $60.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [discarded value]: $60.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] 
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # [discarded value]: $52.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [discarded value]: $52.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # [discarded value]: $44.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [discarded value]: $44.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # [discarded value]: $36.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [discarded value]: $36.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # [discarded value]: $28.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [discarded value]: $28.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # [discarded value]: $20.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [discarded value]: $20.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__find_unused_register_37__end:
  mov rsp, rbp
  pop rbp
  ret

find_unused_register_37__stack_frame_size: .word 32

  .loc 2 1124 1
  .text
create_mc_value_38:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_value_38__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_value_38__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_instruction.1: @IR_Instruction = load_variable(ir_instruction)
  # [live values]: self.1:rdi ir_instruction.1:rsi 
  .loc 2 1126 22
  # $1.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rax, [rdi+153]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax 
  .loc 2 1127 29
  # $2.1: @IR_Variable_Value = load_struct_member(ir_instruction.1, result_value)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax $2.1:rbx 
  .loc 2 1125 17
  # $3.1: @MC_Value = new(MC_Value)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 48
  call malloc
  # [live values]: self.1:[rbp-32] ir_instruction.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, prev_value, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] ir_instruction.1:[rbp-24] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, next_value, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] ir_instruction.1:[rbp-24] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, ir_instruction, ir_instruction.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-32] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, ir_variable_value, $2.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, register, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, address, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-32] $3.1:rax 
  .loc 2 1125 5
  # mc_value.1: @MC_Value = $3.1
  mov [rbp-40], rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] mc_value.1:rax 
  .loc 2 1130 9
  # $4.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rbx, [rbp-32]
  mov r15, [rbx+145]
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $4.1:r15 
  .loc 2 1130 9
  # $5.1: Boolean = $4.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $5.1:r14 
  # jump($5.1, .LABEL__create_mc_value_38__2, .LABEL__create_mc_value_38__4)
  test r14b, r14b
  mov [rbp-40], rax
  mov [rbp-41], r14b
  jz .LABEL__create_mc_value_38__4
.LABEL__create_mc_value_38__2:
  .loc 2 1131 9
  # store_struct_member(self.1, first_value, mc_value.1)
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+145], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] $5.1:[rbp-41] 
  # jump(.LABEL__create_mc_value_38__3)
.LABEL__create_mc_value_38__3:
  .loc 2 1135 5
  # store_struct_member(self.1, last_value, mc_value.1)
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+153], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] $5.1:[rbp-41] 
  # return()
  jmp .LABEL__create_mc_value_38__end
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
.LABEL__create_mc_value_38__4:
  .loc 2 1133 9
  # $6.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rax, [rbp-32]
  mov rbx, [rax+153]
  # [live values]: self.1:rax:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] $6.1:rbx 
  .loc 2 1133 9
  # store_struct_member($6.1, next_value, mc_value.1)
  mov r15, [rbp-40]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-32] mc_value.1:r15:[rbp-40] $5.1:[rbp-41] 
  # jump(.LABEL__create_mc_value_38__3)
  jmp .LABEL__create_mc_value_38__3
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: mc_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_mc_value_38__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_value_38__stack_frame_size: .word 48

  .loc 2 1138 1
  .text
map_variable_value_39:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_39__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_39__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx 
  .loc 2 1139 9
  # $1.1: Boolean = address.1 == null
  cmp rdx, 0
  sete al
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx $1.1:rax 
  # jump($1.1, .LABEL__map_variable_value_39__2, .LABEL__map_variable_value_39__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__map_variable_value_39__3
.LABEL__map_variable_value_39__2:
  .loc 2 1140 9
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__map_variable_value_39__3:
  .loc 2 1142 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-25]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__map_variable_value_39__4)
  mov [rbp-33], rbx
.LABEL__map_variable_value_39__4:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.7)
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] 
  .loc 2 1143 12
  # $3.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:rax 
  # jump($3.1, .LABEL__map_variable_value_39__5, .LABEL__map_variable_value_39__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__map_variable_value_39__6
.LABEL__map_variable_value_39__5:
  .loc 2 1144 13
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-33]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $4.1:rbx 
  .loc 2 1144 13
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  mov r15, [rbx+32]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $5.1:r15 
  .loc 2 1144 52
  # $6.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rbx, [rbp-17]
  mov r14, [rbx+32]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:rbx:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $5.1:r15 $6.1:r14 
  .loc 2 1144 13
  # $7.1: Boolean = $5.1 == $6.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:rbx:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:r13 
  # jump($7.1, .LABEL__map_variable_value_39__7, .LABEL__map_variable_value_39__8)
  test r13b, r13b
  mov [rbp-35], r13b
  jz .LABEL__map_variable_value_39__8
.LABEL__map_variable_value_39__7:
  .loc 2 1145 17
  # $8.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-33]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $8.1:rbx 
  .loc 2 1145 17
  # $9.1: Boolean = $8.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:r15 
  # jump($9.1, .LABEL__map_variable_value_39__9, .LABEL__map_variable_value_39__10)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__map_variable_value_39__10
.LABEL__map_variable_value_39__9:
  .loc 2 1146 17
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
.LABEL__map_variable_value_39__10:
  .loc 2 1148 13
  # store_struct_member(mc_value.2, address, address.1)
  mov rax, [rbp-33]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:rbx:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # jump(.LABEL__map_variable_value_39__8)
.LABEL__map_variable_value_39__8:
  .loc 2 1150 20
  # mc_value.7: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] mc_value.7:rbx:[rbp-33] 
  # jump(.LABEL__map_variable_value_39__4)
  mov [rbp-33], rbx
  jmp .LABEL__map_variable_value_39__4
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] mc_value.7:[rbp-33] 
  # [discarded value]: mc_value.7
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] 
.LABEL__map_variable_value_39__6:
  # return()
  jmp .LABEL__map_variable_value_39__end
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] 
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] 
  # [discarded value]: address.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__map_variable_value_39__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_39__stack_frame_size: .word 48

  .loc 2 1154 1
  .text
map_variable_value_40:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_40__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_40__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx 
  .loc 2 1155 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rdi+145]
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx mc_value.1:rax 
  # jump(.LABEL__map_variable_value_40__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__map_variable_value_40__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.8)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  .loc 2 1156 12
  # $3.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__map_variable_value_40__5, .LABEL__map_variable_value_40__6)
  test al, al
  mov [rbp-33], al
  jz .LABEL__map_variable_value_40__6
.LABEL__map_variable_value_40__5:
  .loc 2 1156 32
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $4.1:rbx 
  .loc 2 1156 32
  # $3.2: Boolean = $4.1 != ir_variable_value.1
  cmp rbx, QWORD PTR [rbp-24]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $3.2:r15:[rbp-33] 
  # jump(.LABEL__map_variable_value_40__6)
  mov [rbp-33], r15b
.LABEL__map_variable_value_40__6:
  .loc 2 1156 12
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, .LABEL__map_variable_value_40__3, .LABEL__map_variable_value_40__4)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__map_variable_value_40__4
.LABEL__map_variable_value_40__3:
  .loc 2 1157 13
  # $6.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $6.1:rbx $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1157 13
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1157 52
  # $8.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rbx, [rbp-24]
  mov r14, [rbx+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $8.1:r14 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1157 13
  # $10.1: Boolean = $7.1 == $8.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:r13 $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($10.1, .LABEL__map_variable_value_40__7, .LABEL__map_variable_value_40__8)
  test r13b, r13b
  mov [rbp-34], r13b
  jz .LABEL__map_variable_value_40__8
.LABEL__map_variable_value_40__7:
  .loc 2 1157 82
  # $11.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $11.1:rbx 
  .loc 2 1157 82
  # $10.2: Boolean = $11.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:r15:[rbp-34] 
  # jump(.LABEL__map_variable_value_40__8)
  mov [rbp-34], r15b
.LABEL__map_variable_value_40__8:
  .loc 2 1157 13
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, .LABEL__map_variable_value_40__9, .LABEL__map_variable_value_40__10)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__map_variable_value_40__10
.LABEL__map_variable_value_40__9:
  .loc 2 1158 35
  # $13.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] $13.1:rbx 
  .loc 2 1158 13
  # call(release_register_46, self.1, $13.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump(.LABEL__map_variable_value_40__10)
.LABEL__map_variable_value_40__10:
  .loc 2 1160 20
  # mc_value.8: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] mc_value.8:rbx:[rbp-8] 
  # jump(.LABEL__map_variable_value_40__2)
  mov [rbp-8], rbx
  jmp .LABEL__map_variable_value_40__2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] mc_value.8:[rbp-8] 
  # [discarded value]: mc_value.8
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__map_variable_value_40__4:
  .loc 2 1162 9
  # $15.1: Boolean = mc_value.2 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:rax $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($15.1, .LABEL__map_variable_value_40__11, .LABEL__map_variable_value_40__12)
  test al, al
  mov [rbp-34], al
  jz .LABEL__map_variable_value_40__12
.LABEL__map_variable_value_40__11:
  .loc 2 1163 9
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__map_variable_value_40__12:
  .loc 2 1165 9
  # $16.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rbp-16]
  mov rbx, [rax+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $16.1:rbx 
  .loc 2 1165 9
  # $17.1: Boolean = $16.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:r15 
  # jump($17.1, .LABEL__map_variable_value_40__13, .LABEL__map_variable_value_40__14)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__map_variable_value_40__14
.LABEL__map_variable_value_40__13:
  .loc 2 1166 20
  # $18.1: @String = call(clone_340, "Register ")
  lea rdi, .LABEL__string_152[rip] # "Register "
  call clone_340
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $18.1:rax 
  .loc 2 1166 46
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $18.1:rax $19.1:r15 
  .loc 2 1166 20
  # $20.1: @String = call(append_349, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $20.1:rax 
  .loc 2 1166 20
  # $21.1: @String = call(append_349, $20.1, " already mapped to variable: ")
  mov rdi, rax
  lea rsi, .LABEL__string_153[rip] # " already mapped to variable: "
  call append_349
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax 
  .loc 2 1166 110
  # $22.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $22.1:r15 
  .loc 2 1166 110
  # $23.1: @IR_Variable_Value = load_struct_member($22.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $23.1:r14 
  .loc 2 1166 110
  # $24.1: @IR_Variable = load_struct_member($23.1, variable)
  mov r15, [r14+32]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $24.1:r15 
  .loc 2 1166 110
  # $25.1: @String = load_struct_member($24.1, name)
  mov r14, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $25.1:r14 
  .loc 2 1166 20
  # $26.1: @String = call(append_349, $21.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $26.1:rax 
  .loc 2 1166 20
  # $27.1: @String = call(append_347, $26.1, '.')
  mov rdi, rax
  mov sil, 46
  call append_347
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax 
  .loc 2 1166 177
  # $28.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $28.1:r15 
  .loc 2 1166 177
  # $29.1: @IR_Variable_Value = load_struct_member($28.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $29.1:r14 
  .loc 2 1166 177
  # $30.1: Int = load_struct_member($29.1, version)
  mov r15, [r14+40]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $30.1:r15 
  .loc 2 1166 20
  # $31.1: @String = call(append_348, $27.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call append_348
  # [discarded value]: $30.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $31.1:rax 
  .loc 2 1166 9
  # call(abort_34, self.1, $31.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_34
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
.LABEL__map_variable_value_40__14:
  .loc 2 1168 5
  # store_struct_member(mc_value.2, register, register.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  .loc 2 1169 5
  # store_struct_member(register.1, value, mc_value.2)
  mov QWORD PTR [rbx+41], rax
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  .loc 2 1170 5
  # return(mc_value.2)
  jmp .LABEL__map_variable_value_40__end
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: register.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__map_variable_value_40__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_40__stack_frame_size: .word 48

  .loc 2 1173 1
  .text
get_value_41:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_41__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_41__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  .loc 2 1174 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rdi+145]
  # [discarded value]: self.1
  # [live values]: ir_variable_value.1:rsi mc_value.1:rax 
  # jump(.LABEL__get_value_41__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_value_41__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  .loc 2 1175 12
  # $3.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_value_41__5, .LABEL__get_value_41__6)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_value_41__6
.LABEL__get_value_41__5:
  .loc 2 1175 32
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $4.1:rbx 
  .loc 2 1175 32
  # $3.2: Boolean = $4.1 != ir_variable_value.1
  cmp rbx, QWORD PTR [rbp-16]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $3.2:r15:[rbp-17] 
  # jump(.LABEL__get_value_41__6)
  mov [rbp-17], r15b
.LABEL__get_value_41__6:
  .loc 2 1175 12
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__get_value_41__3, .LABEL__get_value_41__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__get_value_41__4
.LABEL__get_value_41__3:
  .loc 2 1176 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:rbx:[rbp-8] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump(.LABEL__get_value_41__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_value_41__2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:[rbp-8] $3.2:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
.LABEL__get_value_41__4:
  .loc 2 1178 5
  # return(mc_value.2)
  mov rax, [rbp-8]
  jmp .LABEL__get_value_41__end
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: mc_value.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_variable_value.1
  # [live values]: 
.LABEL__get_value_41__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_41__stack_frame_size: .word 32

  .loc 2 1181 1
  .text
spill_local_variable_42:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_local_variable_42__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_local_variable_42__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  .loc 2 1182 9
  # $1.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  .loc 2 1182 9
  # $2.1: @IR_Variable = load_struct_member($1.1, variable)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx 
  # IR_Global_Variable.4: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx IR_Global_Variable.4:rax 
  .loc 2 1182 9
  # $3.1: Boolean = call(is_338, $2.1, IR_Global_Variable.4)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Global_Variable.4
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__spill_local_variable_42__2, .LABEL__spill_local_variable_42__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__spill_local_variable_42__3
.LABEL__spill_local_variable_42__2:
  .loc 2 1184 9
  # call(abort_34, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_34
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__spill_local_variable_42__3:
  .loc 2 1186 46
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $3.1:[rbp-17] $4.1:rbx 
  .loc 2 1186 46
  # $5.1: @IR_Type = load_struct_member($4.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $3.1:[rbp-17] $5.1:r15 
  .loc 2 1186 27
  # variable_type_size.1: Int = call(get_type_size_54, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call get_type_size_54
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:rax 
  .loc 2 1187 9
  # $7.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:rax $7.1:r15 
  .loc 2 1187 9
  # $8.1: Boolean = $7.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:rax $8.1:r14 
  # jump($8.1, .LABEL__spill_local_variable_42__4, .LABEL__spill_local_variable_42__5)
  test r14b, r14b
  mov [rbp-25], rax
  mov [rbp-26], r14b
  jz .LABEL__spill_local_variable_42__5
.LABEL__spill_local_variable_42__4:
  .loc 2 1188 33
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $9.1:rbx 
  .loc 2 1188 61
  # $10.1: @MC_Local_Variable_Address = call(create_local_variable_address_43, self.1, variable_type_size.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-25]
  mov [rbp-34], rbx
  call create_local_variable_address_43
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-34] $10.1:rax 
  .loc 2 1188 9
  # call(map_variable_value_39, self.1, $9.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-34]
  mov rdx, rax
  call map_variable_value_39
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] 
  # jump(.LABEL__spill_local_variable_42__5)
.LABEL__spill_local_variable_42__5:
  .loc 2 1190 9
  # $11.1: Boolean = variable_type_size.1 == 8
  cmp QWORD PTR [rbp-25], 8
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__spill_local_variable_42__6, .LABEL__spill_local_variable_42__8)
  test al, al
  mov [rbp-27], al
  jz .LABEL__spill_local_variable_42__8
.LABEL__spill_local_variable_42__6:
  .loc 2 1191 9
  # $42.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $42.1:rbx 
  .loc 2 1191 9
  # $43.1: @FILE = call(write_332, $42.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $43.1:rax 
  .loc 2 1191 48
  # $44.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $43.1:rax $44.1:r15 
  .loc 2 1191 9
  # $45.1: @FILE = call(write_53, $43.1, $44.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $45.1:rax 
  .loc 2 1191 9
  # $46.1: @FILE = call(write_332, $45.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $46.1:rax 
  .loc 2 1191 84
  # $47.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $46.1:rax $47.1:r15 
  .loc 2 1191 84
  # $48.1: @String = load_struct_member($47.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $46.1:rax $48.1:r14 
  .loc 2 1191 9
  # $49.1: @FILE = call(write_332, $46.1, $48.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $48.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $49.1:rax 
  .loc 2 1191 9
  # $50.1: @FILE = call(end_line_335, $49.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # jump(.LABEL__spill_local_variable_42__7)
.LABEL__spill_local_variable_42__7:
  # return()
  jmp .LABEL__spill_local_variable_42__end
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__spill_local_variable_42__8:
  .loc 2 1192 16
  # $12.1: Boolean = variable_type_size.1 == 4
  cmp QWORD PTR [rbp-25], 4
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:rax 
  # jump($12.1, .LABEL__spill_local_variable_42__9, .LABEL__spill_local_variable_42__11)
  test al, al
  mov [rbp-28], al
  jz .LABEL__spill_local_variable_42__11
.LABEL__spill_local_variable_42__9:
  .loc 2 1193 9
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $33.1:rbx 
  .loc 2 1193 9
  # $34.1: @FILE = call(write_332, $33.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $34.1:rax 
  .loc 2 1193 48
  # $35.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $34.1:rax $35.1:r15 
  .loc 2 1193 9
  # $36.1: @FILE = call(write_53, $34.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $36.1:rax 
  .loc 2 1193 9
  # $37.1: @FILE = call(write_332, $36.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $37.1:rax 
  .loc 2 1193 84
  # $38.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $37.1:rax $38.1:r15 
  .loc 2 1193 84
  # $39.1: @String = load_struct_member($38.1, name_d)
  mov r14, [r15+16]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $37.1:rax $39.1:r14 
  .loc 2 1193 9
  # $40.1: @FILE = call(write_332, $37.1, $39.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $39.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $40.1:rax 
  .loc 2 1193 9
  # $41.1: @FILE = call(end_line_335, $40.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] 
  # jump(.LABEL__spill_local_variable_42__7)
  jmp .LABEL__spill_local_variable_42__7
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] 
.LABEL__spill_local_variable_42__11:
  .loc 2 1194 16
  # $13.1: Boolean = variable_type_size.1 == 2
  cmp QWORD PTR [rbp-25], 2
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:rax 
  # jump($13.1, .LABEL__spill_local_variable_42__12, .LABEL__spill_local_variable_42__14)
  test al, al
  mov [rbp-29], al
  jz .LABEL__spill_local_variable_42__14
.LABEL__spill_local_variable_42__12:
  .loc 2 1195 9
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $24.1:rbx 
  .loc 2 1195 9
  # $25.1: @FILE = call(write_332, $24.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $25.1:rax 
  .loc 2 1195 48
  # $26.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $25.1:rax $26.1:r15 
  .loc 2 1195 9
  # $27.1: @FILE = call(write_53, $25.1, $26.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $27.1:rax 
  .loc 2 1195 9
  # $28.1: @FILE = call(write_332, $27.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $28.1:rax 
  .loc 2 1195 84
  # $29.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $28.1:rax $29.1:r15 
  .loc 2 1195 84
  # $30.1: @String = load_struct_member($29.1, name_w)
  mov r14, [r15+24]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $28.1:rax $30.1:r14 
  .loc 2 1195 9
  # $31.1: @FILE = call(write_332, $28.1, $30.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $31.1:rax 
  .loc 2 1195 9
  # $32.1: @FILE = call(end_line_335, $31.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] 
  # jump(.LABEL__spill_local_variable_42__7)
  jmp .LABEL__spill_local_variable_42__7
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] 
.LABEL__spill_local_variable_42__14:
  .loc 2 1196 16
  # $14.1: Boolean = variable_type_size.1 == 1
  cmp QWORD PTR [rbp-25], 1
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:rax 
  # jump($14.1, .LABEL__spill_local_variable_42__15, .LABEL__spill_local_variable_42__7)
  test al, al
  mov [rbp-30], al
  jz .LABEL__spill_local_variable_42__7
.LABEL__spill_local_variable_42__15:
  .loc 2 1197 9
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $15.1:rbx 
  .loc 2 1197 9
  # $16.1: @FILE = call(write_332, $15.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_332
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $16.1:rax 
  .loc 2 1197 48
  # $17.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $16.1:rax $17.1:r15 
  .loc 2 1197 9
  # $18.1: @FILE = call(write_53, $16.1, $17.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $18.1:rax 
  .loc 2 1197 9
  # $19.1: @FILE = call(write_332, $18.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $19.1:rax 
  .loc 2 1197 84
  # $20.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $19.1:rax $20.1:r15 
  .loc 2 1197 84
  # $21.1: @String = load_struct_member($20.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $19.1:rax $21.1:r14 
  .loc 2 1197 9
  # $22.1: @FILE = call(write_332, $19.1, $21.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $21.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] $22.1:rax 
  .loc 2 1197 9
  # $23.1: @FILE = call(end_line_335, $22.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] 
  # jump(.LABEL__spill_local_variable_42__7)
  jmp .LABEL__spill_local_variable_42__7
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] $14.1:[rbp-30] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] $13.1:[rbp-29] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:[rbp-28] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] variable_type_size.1:[rbp-25] 
  # [discarded value]: variable_type_size.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__spill_local_variable_42__end:
  mov rsp, rbp
  pop rbp
  ret

spill_local_variable_42__stack_frame_size: .word 48

  .loc 2 1201 1
  .text
create_local_variable_address_43:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_local_variable_address_43__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_local_variable_address_43__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_type_size.1: Int = load_variable(variable_type_size)
  # [live values]: self.1:rdi variable_type_size.1:rsi 
  .loc 2 1202 5
  # offset.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi variable_type_size.1:rsi offset.1:rax 
  .loc 2 1203 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rbx, [rdi+145]
  # [live values]: self.1:rdi variable_type_size.1:rsi offset.1:rax mc_value.1:rbx 
  # jump(.LABEL__create_local_variable_address_43__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__create_local_variable_address_43__2:
  # offset.8: Int = phi(offset.1, offset.9)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] 
  .loc 2 1204 12
  # $2.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__create_local_variable_address_43__3, .LABEL__create_local_variable_address_43__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_local_variable_address_43__4
.LABEL__create_local_variable_address_43__3:
  .loc 2 1205 29
  # mc_value_address.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx 
  .loc 2 1206 13
  # $5.1: Boolean = mc_value_address.1 != null
  cmp rbx, 0
  setne r15b
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx $5.1:r15 
  # jump($5.1, .LABEL__create_local_variable_address_43__5, .LABEL__create_local_variable_address_43__6)
  test r15b, r15b
  mov [rbp-41], rbx
  mov [rbp-42], r15b
  jz .LABEL__create_local_variable_address_43__6
.LABEL__create_local_variable_address_43__5:
  # MC_Local_Variable_Address.2: @Object_Type = load_variable(MC_Local_Variable_Address)
  lea rax, MC_Local_Variable_Address[rip]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] MC_Local_Variable_Address.2:rax 
  .loc 2 1206 41
  # $5.2: Boolean = call(is_338, mc_value_address.1, MC_Local_Variable_Address.2)
  mov rdi, [rbp-41]
  mov rsi, rax
  call is_338
  # [discarded value]: MC_Local_Variable_Address.2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:rax:[rbp-42] 
  # jump(.LABEL__create_local_variable_address_43__6)
  mov [rbp-42], al
.LABEL__create_local_variable_address_43__6:
  .loc 2 1206 13
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] 
  # jump($5.3, .LABEL__create_local_variable_address_43__7, .LABEL__create_local_variable_address_43__8)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__create_local_variable_address_43__8
.LABEL__create_local_variable_address_43__7:
  .loc 2 1207 33
  # mc_value_address.1: @MC_Local_Variable_Address = mc_value_address.1
  mov rax, [rbp-41]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax 
  .loc 2 1208 26
  # $8.1: Int = load_struct_member(mc_value_address.1, offset)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax $8.1:rbx 
  .loc 2 1208 17
  # $9.1: Boolean = offset.8 > $8.1
  cmp QWORD PTR [rbp-8], rbx
  setg r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax $9.1:r15 
  # jump($9.1, .LABEL__create_local_variable_address_43__9, .LABEL__create_local_variable_address_43__8)
  test r15b, r15b
  mov [rbp-50], rax
  mov [rbp-51], r15b
  jz .LABEL__create_local_variable_address_43__8
.LABEL__create_local_variable_address_43__9:
  .loc 2 1209 26
  # offset.3: Int = load_struct_member(mc_value_address.1, offset)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax:[rbp-50] $9.1:[rbp-51] offset.3:rbx:[rbp-8] 
  # jump(.LABEL__create_local_variable_address_43__8)
  mov [rbp-8], rbx
.LABEL__create_local_variable_address_43__8:
  # offset.9: Int = phi(offset.3, offset.8)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] offset.3:[rbp-8] 
  .loc 2 1212 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] mc_value.5:rbx:[rbp-16] offset.3:[rbp-8] 
  # jump(.LABEL__create_local_variable_address_43__2)
  mov [rbp-16], rbx
  jmp .LABEL__create_local_variable_address_43__2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] mc_value.5:[rbp-16] offset.3:[rbp-8] 
  # [discarded value]: mc_value.5
  # [discarded value]: offset.9
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.3:[rbp-8] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.3:[rbp-8] 
  # [discarded value]: offset.3
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] 
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] 
  # [discarded value]: $5.1
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] 
.LABEL__create_local_variable_address_43__4:
  .loc 2 1214 14
  # offset.5: Int = offset.8 - variable_type_size.1
  mov rax, [rbp-8]
  sub rax, QWORD PTR [rbp-24]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] 
  .loc 2 1215 9
  # $13.1: Int =  - offset.5
  mov rbx, rax
  neg rbx
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $13.1:rbx 
  .loc 2 1215 19
  # $14.1: Int = load_struct_member(self.1, stack_frame_size)
  mov r15, [rbp-32]
  mov r14, [r15+161]
  # [live values]: self.1:r15:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $13.1:rbx $14.1:r14 
  .loc 2 1215 9
  # $15.1: Boolean = $13.1 > $14.1
  cmp rbx, r14
  setg r13b
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $15.1:r13 
  # jump($15.1, .LABEL__create_local_variable_address_43__11, .LABEL__create_local_variable_address_43__12)
  test r13b, r13b
  mov [rbp-8], rax
  mov [rbp-34], r13b
  jz .LABEL__create_local_variable_address_43__12
.LABEL__create_local_variable_address_43__11:
  .loc 2 1216 33
  # $16.1: Int =  - offset.5
  mov rax, [rbp-8]
  neg rax
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $16.1:rax 
  .loc 2 1216 9
  # store_struct_member(self.1, stack_frame_size, $16.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rbx+161], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # jump(.LABEL__create_local_variable_address_43__12)
.LABEL__create_local_variable_address_43__12:
  .loc 2 1218 53
  # $17.1: @MC_Register = load_struct_member(self.1, register_rbp)
  mov rax, [rbp-32]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $17.1:rbx 
  .loc 2 1218 12
  # $18.1: @MC_Local_Variable_Address = new(MC_Local_Variable_Address)
  mov [rbp-42], rbx
  mov rdi, 24
  call malloc
  lea rbx, MC_Local_Variable_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $17.1:[rbp-42] $18.1:rax 
  # store_struct_member($18.1, register, $17.1)
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $18.1:rax 
  # store_struct_member($18.1, offset, offset.5)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rbx:[rbp-8] $15.1:[rbp-34] $18.1:rax 
  .loc 2 1218 5
  # return($18.1)
  mov [rbp-42], rax
  jmp .LABEL__create_local_variable_address_43__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] 
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [discarded value]: offset.8
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: offset.1
  # [discarded value]: variable_type_size.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_local_variable_address_43__end:
  mov rsp, rbp
  pop rbp
  ret

create_local_variable_address_43__stack_frame_size: .word 64

  .loc 2 1221 1
  .text
spill_global_variable_44:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_global_variable_44__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_global_variable_44__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  .loc 2 1222 16
  # $1.1: @String = call(clone_340, "TODO: spill global variable ")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_154[rip] # "TODO: spill global variable "
  mov [rbp-16], rsi
  call clone_340
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $1.1:rax 
  .loc 2 1222 61
  # $2.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] $1.1:rax $2.1:r15 
  .loc 2 1222 61
  # $3.1: @IR_Variable = load_struct_member($2.1, variable)
  mov rbx, [r15+32]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:rax $3.1:rbx 
  .loc 2 1222 61
  # $4.1: @String = load_struct_member($3.1, name)
  mov r15, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $1.1:rax $4.1:r15 
  .loc 2 1222 16
  # $5.1: @String = call(append_349, $1.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $4.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  .loc 2 1222 5
  # call(abort_34, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $5.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__spill_global_variable_44__end:
  mov rsp, rbp
  pop rbp
  ret

spill_global_variable_44__stack_frame_size: .word 16

  .loc 2 1225 1
  .text
release_all_registers_45:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_all_registers_45__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_all_registers_45__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1226 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1226 5
  # call(release_register_46, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call release_register_46
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1227 27
  # $2.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $2.1:rbx 
  .loc 2 1227 5
  # call(release_register_46, self.1, $2.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1228 27
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 1228 5
  # call(release_register_46, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1229 27
  # $4.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  .loc 2 1229 5
  # call(release_register_46, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1230 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1230 5
  # call(release_register_46, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1231 27
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  .loc 2 1231 5
  # call(release_register_46, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1232 27
  # $7.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  .loc 2 1232 5
  # call(release_register_46, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1233 27
  # $8.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  .loc 2 1233 5
  # call(release_register_46, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1234 27
  # $9.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  .loc 2 1234 5
  # call(release_register_46, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1235 27
  # $10.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  .loc 2 1235 5
  # call(release_register_46, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1236 27
  # $11.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  .loc 2 1236 5
  # call(release_register_46, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1237 27
  # $12.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  .loc 2 1237 5
  # call(release_register_46, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1238 27
  # $13.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  .loc 2 1238 5
  # call(release_register_46, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1239 27
  # $14.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-8]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 2 1239 5
  # call(release_register_46, self.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_46
  # [discarded value]: $14.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__release_all_registers_45__end
  # [live values]: 
.LABEL__release_all_registers_45__end:
  mov rsp, rbp
  pop rbp
  ret

release_all_registers_45__stack_frame_size: .word 16

  .loc 2 1242 1
  .text
release_register_46:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_register_46__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_register_46__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  .loc 2 1243 17
  # mc_value.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax 
  .loc 2 1244 9
  # $2.1: Boolean = mc_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__release_register_46__2, .LABEL__release_register_46__3)
  test bl, bl
  mov [rbp-8], rax
  mov [rbp-9], bl
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__release_register_46__3
.LABEL__release_register_46__2:
  .loc 2 1245 13
  # $3.1: @MC_Value = load_struct_member(register.1, loaded_value)
  mov rax, [rbp-17]
  mov rbx, [rax+49]
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 2 1245 13
  # $4.1: Boolean = $3.1 != mc_value.1
  cmp rbx, QWORD PTR [rbp-8]
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:r15 
  # jump($4.1, .LABEL__release_register_46__4, .LABEL__release_register_46__5)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__release_register_46__5
.LABEL__release_register_46__4:
  .loc 2 1246 13
  # persist_value.1: Boolean = false
  mov al, 0
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rax 
  .loc 2 1248 47
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rbx:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rax $5.1:r15 
  .loc 2 1248 47
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  mov r14, [r15+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rbx:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rax $6.1:r14 
  .loc 2 1248 47
  # ir_value_user_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rbx:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rax ir_value_user_instruction_item.1:r15 
  # jump(.LABEL__release_register_46__6)
  mov [rbp-27], al
  mov [rbp-35], r15
.LABEL__release_register_46__6:
  # ir_value_user_instruction_item.2: @List_Item = phi(ir_value_user_instruction_item.1, ir_value_user_instruction_item.5)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] 
  .loc 2 1249 20
  # $8.1: Boolean = ir_value_user_instruction_item.2 != null
  cmp QWORD PTR [rbp-35], 0
  setne al
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:rax 
  # jump($8.1, .LABEL__release_register_46__7, .LABEL__release_register_46__8)
  test al, al
  mov [rbp-36], al
  jz .LABEL__release_register_46__8
.LABEL__release_register_46__7:
  .loc 2 1250 46
  # ir_value_user_instruction.1: @IR_Instruction = load_struct_member(ir_value_user_instruction_item.2, data)
  mov rax, [rbp-35]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:rax:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:rbx 
  .loc 2 1251 21
  # $11.1: Boolean = load_struct_member(ir_value_user_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:rax:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:rbx $11.1:r15 
  .loc 2 1251 21
  # $13.1: Boolean = $11.1 == false
  cmp r15b, 0
  sete r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:rax:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:rbx $13.1:r14 
  # jump($13.1, .LABEL__release_register_46__10, .LABEL__release_register_46__9)
  test r14b, r14b
  mov [rbp-44], rbx
  mov [rbp-45], r14b
  jz .LABEL__release_register_46__9
.LABEL__release_register_46__10:
  .loc 2 1251 21
  # $13.3: Boolean = phi($13.1, $13.2)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] 
  # jump($13.3, .LABEL__release_register_46__11, .LABEL__release_register_46__12)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__release_register_46__12
.LABEL__release_register_46__11:
  .loc 2 1252 21
  # persist_value.2: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] persist_value.2:rax:[rbp-27] 
  # jump(.LABEL__release_register_46__8)
  mov [rbp-27], al
.LABEL__release_register_46__8:
  # persist_value.3: Boolean = phi(persist_value.2, persist_value.1)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # jump(persist_value.3, .LABEL__release_register_46__14, .LABEL__release_register_46__5)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__release_register_46__5
.LABEL__release_register_46__14:
  .loc 2 1259 17
  # call(spill_local_variable_42, self.1, mc_value.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-8]
  call spill_local_variable_42
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # jump(.LABEL__release_register_46__5)
.LABEL__release_register_46__5:
  .loc 2 1263 9
  # store_struct_member(mc_value.1, register, null)
  mov rax, [rbp-8]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  .loc 2 1264 9
  # store_struct_member(register.1, value, null)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+41], 0
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  .loc 2 1265 9
  # store_struct_member(register.1, loaded_value, null)
  mov QWORD PTR [rbx+49], 0
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # jump(.LABEL__release_register_46__3)
.LABEL__release_register_46__3:
  # return()
  jmp .LABEL__release_register_46__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] persist_value.3:[rbp-27] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # [discarded value]: persist_value.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] persist_value.2:[rbp-27] 
  # [discarded value]: persist_value.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] 
.LABEL__release_register_46__12:
  .loc 2 1255 50
  # ir_value_user_instruction_item.5: @List_Item = load_struct_member(ir_value_user_instruction_item.2, next_item)
  mov rax, [rbp-35]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] ir_value_user_instruction_item.5:rbx:[rbp-35] 
  # jump(.LABEL__release_register_46__6)
  mov [rbp-35], rbx
  jmp .LABEL__release_register_46__6
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] ir_value_user_instruction_item.5:[rbp-35] 
  # [discarded value]: ir_value_user_instruction_item.5
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.3:[rbp-45] 
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] 
.LABEL__release_register_46__9:
  # IR_Phi_Instruction.3: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] IR_Phi_Instruction.3:rax 
  .loc 2 1251 72
  # $13.2: Boolean = call(is_338, ir_value_user_instruction.1, IR_Phi_Instruction.3)
  mov rdi, [rbp-44]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Phi_Instruction.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:rax:[rbp-45] 
  # jump(.LABEL__release_register_46__10)
  mov [rbp-45], al
  jmp .LABEL__release_register_46__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] ir_value_user_instruction.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [discarded value]: ir_value_user_instruction.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] $8.1:[rbp-36] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] ir_value_user_instruction_item.2:[rbp-35] 
  # [discarded value]: ir_value_user_instruction_item.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-27] ir_value_user_instruction_item.1:[rbp-35] 
  # [discarded value]: ir_value_user_instruction_item.1
  # [discarded value]: persist_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__release_register_46__end:
  mov rsp, rbp
  pop rbp
  ret

release_register_46__stack_frame_size: .word 48

  .loc 2 1269 1
  .text
discard_used_values_47:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR discard_used_values_47__stack_frame_size[rip]
  sub rsp, rax
.LABEL__discard_used_values_47__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1270 5
  # removed_values.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi removed_values.1:rax 
  .loc 2 1272 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rbx, [rdi+153]
  # [live values]: self.1:rdi removed_values.1:rax mc_value.1:rbx 
  # jump(.LABEL__discard_used_values_47__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rdi
.LABEL__discard_used_values_47__2:
  # removed_values.5: Int = phi(removed_values.1, removed_values.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.19)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  .loc 2 1273 12
  # $2.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__discard_used_values_47__3, .LABEL__discard_used_values_47__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__discard_used_values_47__4
.LABEL__discard_used_values_47__3:
  .loc 2 1274 13
  # $3.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $3.1:rbx 
  .loc 2 1274 13
  # $5.1: Boolean = load_struct_member($3.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__discard_used_values_47__5, .LABEL__discard_used_values_47__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__discard_used_values_47__6
.LABEL__discard_used_values_47__5:
  .loc 2 1274 53
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 1274 53
  # $7.1: @IR_Block = load_struct_member($6.1, parent_block)
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 2 1274 53
  # $5.2: Boolean = load_struct_member($7.1, is_being_generated)
  mov bl, [r15+48]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:rbx:[rbp-26] 
  # jump(.LABEL__discard_used_values_47__6)
  mov [rbp-26], bl
.LABEL__discard_used_values_47__6:
  .loc 2 1274 13
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] 
  # jump($5.3, .LABEL__discard_used_values_47__7, .LABEL__discard_used_values_47__8)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__discard_used_values_47__8
.LABEL__discard_used_values_47__7:
  .loc 2 1275 13
  # discard_value.1: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:rax 
  .loc 2 1276 13
  # value_is_phi_argument.1: Boolean = false
  mov bl, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:rax value_is_phi_argument.1:rbx 
  .loc 2 1278 38
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:rax value_is_phi_argument.1:rbx $9.1:r14 
  .loc 2 1278 38
  # $10.1: @List = load_struct_member($9.1, user_instructions)
  mov r13, [r14+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:rax value_is_phi_argument.1:rbx $10.1:r13 
  .loc 2 1278 38
  # user_instruction_item.1: @List_Item = load_struct_member($10.1, first_item)
  mov r14, [r13]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:rax value_is_phi_argument.1:rbx user_instruction_item.1:r14 
  # jump(.LABEL__discard_used_values_47__9)
  mov [rbp-27], al
  mov [rbp-28], bl
  mov [rbp-36], r14
.LABEL__discard_used_values_47__9:
  # value_is_phi_argument.5: Boolean = phi(value_is_phi_argument.1, value_is_phi_argument.7)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] 
  # user_instruction_item.7: @List_Item = phi(user_instruction_item.1, user_instruction_item.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] 
  # discard_value.2: Boolean = phi(discard_value.1, discard_value.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] 
  .loc 2 1279 20
  # $12.1: Boolean = discard_value.2
  mov al, [rbp-27]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:rax 
  # jump($12.1, .LABEL__discard_used_values_47__12, .LABEL__discard_used_values_47__13)
  test al, al
  mov [rbp-37], al
  jz .LABEL__discard_used_values_47__13
.LABEL__discard_used_values_47__12:
  .loc 2 1279 37
  # $12.2: Boolean = user_instruction_item.7 != null
  cmp QWORD PTR [rbp-36], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:rax:[rbp-37] 
  # jump(.LABEL__discard_used_values_47__13)
  mov [rbp-37], al
.LABEL__discard_used_values_47__13:
  .loc 2 1279 20
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] 
  # jump($12.3, .LABEL__discard_used_values_47__10, .LABEL__discard_used_values_47__11)
  mov al, [rbp-37]
  test al, al
  jz .LABEL__discard_used_values_47__11
.LABEL__discard_used_values_47__10:
  .loc 2 1280 37
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instruction_item.7, data)
  mov rax, [rbp-36]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:rax:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rbx $12.2:[rbp-37] $12.3:[rbp-37] 
  # IR_Phi_Instruction.4: @Object_Type = load_variable(IR_Phi_Instruction)
  lea r15, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:rax:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rbx IR_Phi_Instruction.4:r15 $12.2:[rbp-37] $12.3:[rbp-37] 
  .loc 2 1281 21
  # $16.1: Boolean = call(is_338, user_instruction.1, IR_Phi_Instruction.4)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-45], rbx
  call is_338
  # [discarded value]: IR_Phi_Instruction.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:rax $12.2:[rbp-37] $12.3:[rbp-37] 
  # jump($16.1, .LABEL__discard_used_values_47__14, .LABEL__discard_used_values_47__15)
  test al, al
  mov [rbp-46], al
  jz .LABEL__discard_used_values_47__15
.LABEL__discard_used_values_47__14:
  .loc 2 1282 21
  # value_is_phi_argument.2: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:rax:[rbp-28] 
  # jump(.LABEL__discard_used_values_47__15)
  mov [rbp-28], al
.LABEL__discard_used_values_47__15:
  # value_is_phi_argument.7: Boolean = phi(value_is_phi_argument.2, value_is_phi_argument.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] 
  .loc 2 1284 21
  # $17.1: Boolean = load_struct_member(user_instruction.1, is_generated)
  mov rax, [rbp-45]
  mov bl, [rax+56]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rax:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $17.1:rbx 
  .loc 2 1284 21
  # $18.1: Boolean = $17.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rax:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:r15 
  # jump($18.1, .LABEL__discard_used_values_47__16, .LABEL__discard_used_values_47__18)
  test r15b, r15b
  mov [rbp-47], r15b
  jz .LABEL__discard_used_values_47__18
.LABEL__discard_used_values_47__16:
  .loc 2 1286 21
  # discard_value.4: Boolean = false
  mov al, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] discard_value.4:rax:[rbp-27] 
  # jump(.LABEL__discard_used_values_47__17)
  mov [rbp-27], al
.LABEL__discard_used_values_47__17:
  # discard_value.6: Boolean = phi(discard_value.4, discard_value.3, discard_value.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] discard_value.4:[rbp-27] discard_value.6:[rbp-27] 
  .loc 2 1291 41
  # user_instruction_item.5: @List_Item = load_struct_member(user_instruction_item.7, next_item)
  mov rax, [rbp-36]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] discard_value.4:[rbp-27] discard_value.6:[rbp-27] user_instruction_item.5:rbx:[rbp-36] 
  # jump(.LABEL__discard_used_values_47__9)
  mov [rbp-36], rbx
  jmp .LABEL__discard_used_values_47__9
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] discard_value.4:[rbp-27] discard_value.6:[rbp-27] user_instruction_item.5:[rbp-36] 
  # [discarded value]: user_instruction_item.5
  # [discarded value]: discard_value.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] discard_value.4:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] discard_value.4:[rbp-27] 
  # [discarded value]: discard_value.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] 
.LABEL__discard_used_values_47__18:
  .loc 2 1287 28
  # $19.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  mov rax, [rbp-45]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rax:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $19.1:rbx 
  .loc 2 1287 61
  # $20.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rax:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $19.1:rbx $20.1:r14 
  .loc 2 1287 61
  # $21.1: @IR_Block = load_struct_member($20.1, parent_block)
  mov r13, [r14+32]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rax:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $19.1:rbx $21.1:r13 
  .loc 2 1287 28
  # $23.1: Boolean = $19.1 != $21.1
  cmp rbx, r13
  setne r14b
  # [discarded value]: $21.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:rax:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:r14 
  # jump($23.1, .LABEL__discard_used_values_47__19, .LABEL__discard_used_values_47__20)
  test r14b, r14b
  mov [rbp-48], r14b
  jz .LABEL__discard_used_values_47__20
.LABEL__discard_used_values_47__19:
  .loc 2 1287 101
  # $24.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $24.1:rbx 
  .loc 2 1287 101
  # $25.1: @IR_Block = load_struct_member($24.1, parent_block)
  mov r15, [rbx+32]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $25.1:r15 
  .loc 2 1287 101
  # $26.1: Boolean = load_struct_member($25.1, is_generated)
  mov bl, [r15+49]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $26.1:rbx 
  .loc 2 1287 101
  # $23.2: Boolean = $26.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:r15:[rbp-48] 
  # jump(.LABEL__discard_used_values_47__20)
  mov [rbp-48], r15b
.LABEL__discard_used_values_47__20:
  .loc 2 1287 28
  # $23.3: Boolean = phi($23.1, $23.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:[rbp-48] $23.3:[rbp-48] 
  # jump($23.3, .LABEL__discard_used_values_47__21, .LABEL__discard_used_values_47__17)
  mov al, [rbp-48]
  test al, al
  jz .LABEL__discard_used_values_47__17
.LABEL__discard_used_values_47__21:
  .loc 2 1289 21
  # discard_value.3: Boolean = false
  mov al, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:[rbp-48] $23.3:[rbp-48] discard_value.3:rax:[rbp-27] 
  # jump(.LABEL__discard_used_values_47__17)
  mov [rbp-27], al
  jmp .LABEL__discard_used_values_47__17
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:[rbp-48] $23.3:[rbp-48] discard_value.3:[rbp-27] 
  # [discarded value]: discard_value.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:[rbp-48] $23.3:[rbp-48] 
  # [discarded value]: $23.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:[rbp-48] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] $23.2:[rbp-48] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] $23.1:[rbp-48] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] $18.1:[rbp-47] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] value_is_phi_argument.7:[rbp-28] 
  # [discarded value]: value_is_phi_argument.7
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] value_is_phi_argument.2:[rbp-28] 
  # [discarded value]: value_is_phi_argument.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $16.1:[rbp-46] $12.2:[rbp-37] $12.3:[rbp-37] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] user_instruction.1:[rbp-45] $12.2:[rbp-37] $12.3:[rbp-37] 
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] 
.LABEL__discard_used_values_47__11:
  # jump(discard_value.2, .LABEL__discard_used_values_47__23, .LABEL__discard_used_values_47__8)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__discard_used_values_47__8
.LABEL__discard_used_values_47__23:
  .loc 2 1295 21
  # $29.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $29.1:rbx 
  .loc 2 1295 21
  # $30.1: Boolean = $29.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:r15 
  # jump($30.1, .LABEL__discard_used_values_47__25, .LABEL__discard_used_values_47__26)
  test r15b, r15b
  mov [rbp-38], r15b
  jz .LABEL__discard_used_values_47__26
.LABEL__discard_used_values_47__25:
  # jump(value_is_phi_argument.5, .LABEL__discard_used_values_47__27, .LABEL__discard_used_values_47__28)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__discard_used_values_47__28
.LABEL__discard_used_values_47__27:
  .loc 2 1297 25
  # call(spill_local_variable_42, self.1, mc_value.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call spill_local_variable_42
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  # jump(.LABEL__discard_used_values_47__28)
.LABEL__discard_used_values_47__28:
  .loc 2 1300 21
  # $31.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $31.1:rbx 
  .loc 2 1300 21
  # store_struct_member($31.1, value, null)
  mov QWORD PTR [rbx+41], 0
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  .loc 2 1301 21
  # store_struct_member(mc_value.2, register, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  # jump(.LABEL__discard_used_values_47__26)
.LABEL__discard_used_values_47__26:
  .loc 2 1305 21
  # $32.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $32.1:rbx 
  .loc 2 1305 21
  # $33.1: Boolean = $32.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:r15 
  # jump($33.1, .LABEL__discard_used_values_47__29, .LABEL__discard_used_values_47__31)
  test r15b, r15b
  mov [rbp-39], r15b
  jz .LABEL__discard_used_values_47__31
.LABEL__discard_used_values_47__29:
  .loc 2 1306 21
  # $35.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $35.1:rbx 
  .loc 2 1306 54
  # $36.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $35.1:rbx $36.1:r15 
  .loc 2 1306 21
  # store_struct_member($35.1, next_value, $36.1)
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] 
  # jump(.LABEL__discard_used_values_47__30)
.LABEL__discard_used_values_47__30:
  .loc 2 1310 21
  # $37.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $37.1:rbx 
  .loc 2 1310 21
  # $38.1: Boolean = $37.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:r15 
  # jump($38.1, .LABEL__discard_used_values_47__32, .LABEL__discard_used_values_47__34)
  test r15b, r15b
  mov [rbp-40], r15b
  jz .LABEL__discard_used_values_47__34
.LABEL__discard_used_values_47__32:
  .loc 2 1311 21
  # $40.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] $40.1:rbx 
  .loc 2 1311 54
  # $41.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov r15, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] $40.1:rbx $41.1:r15 
  .loc 2 1311 21
  # store_struct_member($40.1, prev_value, $41.1)
  mov QWORD PTR [rbx], r15
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] 
  # jump(.LABEL__discard_used_values_47__33)
.LABEL__discard_used_values_47__33:
  .loc 2 1315 34
  # removed_values.3: Int = removed_values.5 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:rax:[rbp-8] 
  .loc 2 1317 21
  # $43.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov rbx, [rbp-24]
  mov r15b, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:rax:[rbp-8] $43.1:r15 
  # jump($43.1, .LABEL__discard_used_values_47__35, .LABEL__discard_used_values_47__8)
  test r15b, r15b
  mov [rbp-8], rax
  mov [rbp-41], r15b
  jz .LABEL__discard_used_values_47__8
.LABEL__discard_used_values_47__35:
  .loc 2 1318 21
  # $44.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $44.1:rbx 
  .loc 2 1318 21
  # $45.1: @FILE = call(write_332, $44.1, "  # [discarded value]: ")
  mov rdi, rbx
  lea rsi, .LABEL__string_155[rip] # "  # [discarded value]: "
  call write_332
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $45.1:rax 
  .loc 2 1318 77
  # $46.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $45.1:rax $46.1:r15 
  .loc 2 1318 77
  # $47.1: @IR_Variable = load_struct_member($46.1, variable)
  mov r14, [r15+32]
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $45.1:rax $47.1:r14 
  .loc 2 1318 77
  # $48.1: @String = load_struct_member($47.1, name)
  mov r15, [r14+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $45.1:rax $48.1:r15 
  .loc 2 1318 21
  # $49.1: @FILE = call(write_332, $45.1, $48.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $48.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $49.1:rax 
  .loc 2 1318 21
  # $50.1: @FILE = call(write_334, $49.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $50.1:rax 
  .loc 2 1318 136
  # $51.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $50.1:rax $51.1:r15 
  .loc 2 1318 136
  # $52.1: Int = load_struct_member($51.1, version)
  mov r14, [r15+40]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $50.1:rax $52.1:r14 
  .loc 2 1318 21
  # $53.1: @FILE = call(write_331, $50.1, $52.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $52.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] $53.1:rax 
  .loc 2 1318 21
  # $54.1: @FILE = call(end_line_335, $53.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] 
  # jump(.LABEL__discard_used_values_47__8)
.LABEL__discard_used_values_47__8:
  # removed_values.6: Int = phi(removed_values.3, removed_values.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] removed_values.6:[rbp-8] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] 
  .loc 2 1323 20
  # mc_value.19: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] removed_values.6:[rbp-8] mc_value.19:rbx:[rbp-16] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] 
  # jump(.LABEL__discard_used_values_47__2)
  mov [rbp-16], rbx
  jmp .LABEL__discard_used_values_47__2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] removed_values.6:[rbp-8] mc_value.19:[rbp-16] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] 
  # [discarded value]: mc_value.19
  # [discarded value]: removed_values.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] $43.1:[rbp-41] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] 
.LABEL__discard_used_values_47__34:
  .loc 2 1313 39
  # $39.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] $39.1:rbx 
  .loc 2 1313 21
  # store_struct_member(self.1, last_value, $39.1)
  mov r15, [rbp-24]
  mov QWORD PTR [r15+153], rbx
  # [discarded value]: $39.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] 
  # jump(.LABEL__discard_used_values_47__33)
  jmp .LABEL__discard_used_values_47__33
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $38.1:[rbp-40] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] 
.LABEL__discard_used_values_47__31:
  .loc 2 1308 40
  # $34.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] $34.1:rbx 
  .loc 2 1308 21
  # store_struct_member(self.1, first_value, $34.1)
  mov r15, [rbp-24]
  mov QWORD PTR [r15+145], rbx
  # [discarded value]: $34.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] 
  # jump(.LABEL__discard_used_values_47__30)
  jmp .LABEL__discard_used_values_47__30
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] $33.1:[rbp-39] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] $30.1:[rbp-38] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] $12.3:[rbp-37] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] $12.2:[rbp-37] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] value_is_phi_argument.5:[rbp-28] user_instruction_item.7:[rbp-36] discard_value.2:[rbp-27] $12.1:[rbp-37] 
  # [discarded value]: $12.1
  # [discarded value]: discard_value.2
  # [discarded value]: user_instruction_item.7
  # [discarded value]: value_is_phi_argument.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] discard_value.1:[rbp-27] value_is_phi_argument.1:[rbp-28] user_instruction_item.1:[rbp-36] 
  # [discarded value]: user_instruction_item.1
  # [discarded value]: value_is_phi_argument.1
  # [discarded value]: discard_value.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $5.3:[rbp-26] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] 
.LABEL__discard_used_values_47__4:
  .loc 2 1326 5
  # return(removed_values.5)
  mov rax, [rbp-8]
  jmp .LABEL__discard_used_values_47__end
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [discarded value]: removed_values.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: removed_values.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__discard_used_values_47__end:
  mov rsp, rbp
  pop rbp
  ret

discard_used_values_47__stack_frame_size: .word 48

  .loc 2 1329 1
  .text
output_live_values_48:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_48__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_48__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1330 29
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1330 5
  # call(output_live_values_49, self.1, $1.1)
  mov rsi, rax
  call output_live_values_49
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__output_live_values_48__end
  # [live values]: 
.LABEL__output_live_values_48__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_48__stack_frame_size: .word 0

  .loc 2 1333 1
  .text
output_live_values_49:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_49__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_49__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # output_file.1: @FILE = load_variable(output_file)
  # [live values]: self.1:rdi output_file.1:rsi 
  .loc 2 1334 9
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov al, [rdi+16]
  # [live values]: self.1:rdi output_file.1:rsi $1.1:rax 
  .loc 2 1334 9
  # $2.1: Boolean = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi output_file.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__output_live_values_49__2, .LABEL__output_live_values_49__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__output_live_values_49__3
.LABEL__output_live_values_49__2:
  .loc 2 1335 9
  # return()
  jmp .LABEL__output_live_values_49__end
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__output_live_values_49__3:
  .loc 2 1337 5
  # $3.1: @FILE = call(write_332, output_file.1, "  # [live values]: ")
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_156[rip] # "  # [live values]: "
  call write_332
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
  .loc 2 1338 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-17]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__output_live_values_49__5)
  mov [rbp-25], rbx
.LABEL__output_live_values_49__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.9)
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] 
  .loc 2 1339 12
  # $5.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__output_live_values_49__6, .LABEL__output_live_values_49__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__output_live_values_49__7
.LABEL__output_live_values_49__6:
  .loc 2 1340 13
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 1340 13
  # $7.1: Boolean = load_struct_member($6.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  # jump($7.1, .LABEL__output_live_values_49__8, .LABEL__output_live_values_49__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__output_live_values_49__9
.LABEL__output_live_values_49__8:
  .loc 2 1341 31
  # $8.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rbx 
  .loc 2 1341 31
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  mov r15, [rbx+32]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:r15 
  .loc 2 1341 31
  # $10.1: @String = load_struct_member($9.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $10.1:rbx 
  .loc 2 1341 13
  # $11.1: @FILE = call(write_332, output_file.1, $10.1)
  mov rdi, [rbp-9]
  mov rsi, rbx
  call write_332
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $11.1:rax 
  .loc 2 1341 13
  # $12.1: @FILE = call(write_334, $11.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax 
  .loc 2 1341 90
  # $13.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax $13.1:r15 
  .loc 2 1341 90
  # $14.1: Int = load_struct_member($13.1, version)
  mov r14, [r15+40]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax $14.1:r14 
  .loc 2 1341 13
  # $15.1: @FILE = call(write_331, $12.1, $14.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  .loc 2 1342 17
  # $16.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $16.1:rbx 
  .loc 2 1342 17
  # $17.1: Boolean = $16.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:r15 
  # jump($17.1, .LABEL__output_live_values_49__10, .LABEL__output_live_values_49__11)
  test r15b, r15b
  mov [rbp-28], r15b
  jz .LABEL__output_live_values_49__11
.LABEL__output_live_values_49__10:
  .loc 2 1343 17
  # $18.1: @FILE = call(write_334, output_file.1, ':')
  mov rdi, [rbp-9]
  mov sil, 58
  call write_334
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax 
  .loc 2 1343 46
  # $19.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rbx, [rbp-25]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax $19.1:r15 
  .loc 2 1343 46
  # $20.1: @String = load_struct_member($19.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax $20.1:r14 
  .loc 2 1343 17
  # $21.1: @FILE = call(write_332, $18.1, $20.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # jump(.LABEL__output_live_values_49__11)
.LABEL__output_live_values_49__11:
  .loc 2 1345 17
  # $22.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $22.1:rbx 
  .loc 2 1345 17
  # $23.1: Boolean = $22.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:r15 
  # jump($23.1, .LABEL__output_live_values_49__12, .LABEL__output_live_values_49__13)
  test r15b, r15b
  mov [rbp-29], r15b
  jz .LABEL__output_live_values_49__13
.LABEL__output_live_values_49__12:
  .loc 2 1346 17
  # $24.1: @FILE = call(write_334, output_file.1, ':')
  mov rdi, [rbp-9]
  mov sil, 58
  call write_334
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] $24.1:rax 
  .loc 2 1346 46
  # $25.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rbx, [rbp-25]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] $24.1:rax $25.1:r15 
  .loc 2 1346 17
  # $26.1: @FILE = call(write_53, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_53
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_49__13)
.LABEL__output_live_values_49__13:
  .loc 2 1348 13
  # $27.1: @FILE = call(write_334, output_file.1, ' ')
  mov rdi, [rbp-9]
  mov sil, 32
  call write_334
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_49__9)
.LABEL__output_live_values_49__9:
  .loc 2 1350 20
  # mc_value.9: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] mc_value.9:rbx:[rbp-25] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_49__5)
  mov [rbp-25], rbx
  jmp .LABEL__output_live_values_49__5
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] mc_value.9:[rbp-25] $23.1:[rbp-29] 
  # [discarded value]: mc_value.9
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__output_live_values_49__7:
  .loc 2 1352 5
  # $29.1: @FILE = call(end_line_335, output_file.1)
  mov rdi, [rbp-9]
  call end_line_335
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
  # return()
  jmp .LABEL__output_live_values_49__end
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] 
  # [discarded value]: output_file.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_live_values_49__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_49__stack_frame_size: .word 32

  .loc 2 1355 1
  .text
output_used_registers_50:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_registers_50__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_registers_50__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(true, .LABEL__output_used_registers_50__2, .LABEL__output_used_registers_50__3)
  mov al, 1
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__output_used_registers_50__3
.LABEL__output_used_registers_50__2:
  .loc 2 1357 9
  # return()
  jmp .LABEL__output_used_registers_50__end
  # [live values]: self.1:[rbp-8] 
.LABEL__output_used_registers_50__3:
  .loc 2 1359 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 1359 5
  # $2.1: @FILE = call(write_332, $1.1, "  # [used registers]: ")
  mov rdi, rbx
  lea rsi, .LABEL__string_157[rip] # "  # [used registers]: "
  call write_332
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1360 31
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 1360 5
  # call(output_used_register_51, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1361 31
  # $4.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  .loc 2 1361 5
  # call(output_used_register_51, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1362 31
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1362 5
  # call(output_used_register_51, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1363 31
  # $6.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  .loc 2 1363 5
  # call(output_used_register_51, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1364 31
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  .loc 2 1364 5
  # call(output_used_register_51, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1365 31
  # $8.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  .loc 2 1365 5
  # call(output_used_register_51, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1366 31
  # $9.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  .loc 2 1366 5
  # call(output_used_register_51, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1367 31
  # $10.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  .loc 2 1367 5
  # call(output_used_register_51, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1368 31
  # $11.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  .loc 2 1368 5
  # call(output_used_register_51, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1369 31
  # $12.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  .loc 2 1369 5
  # call(output_used_register_51, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1370 31
  # $13.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  .loc 2 1370 5
  # call(output_used_register_51, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1371 31
  # $14.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 2 1371 5
  # call(output_used_register_51, self.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1372 31
  # $15.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $15.1:rbx 
  .loc 2 1372 5
  # call(output_used_register_51, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1373 31
  # $16.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-8]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-8] $16.1:rbx 
  .loc 2 1373 5
  # call(output_used_register_51, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_51
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1374 5
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $17.1:rbx 
  .loc 2 1374 5
  # $18.1: @FILE = call(end_line_335, $17.1)
  mov rdi, rbx
  call end_line_335
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__output_used_registers_50__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_registers_50__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_registers_50__stack_frame_size: .word 16

  .loc 2 1377 1
  .text
output_used_register_51:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_register_51__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_register_51__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  .loc 2 1378 9
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi $1.1:rax 
  .loc 2 1378 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__output_used_register_51__2, .LABEL__output_used_register_51__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__output_used_register_51__3
.LABEL__output_used_register_51__2:
  .loc 2 1379 9
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 1379 32
  # $4.1: @String = load_struct_member(register.1, name_q)
  mov r15, [rbp-9]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-17] register.1:r15:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r14 
  .loc 2 1379 9
  # $5.1: @FILE = call(write_332, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r14
  call write_332
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $5.1:rax 
  .loc 2 1379 9
  # $6.1: @FILE = call(write_334, $5.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $6.1:rax 
  .loc 2 1379 66
  # $7.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-9]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $7.1:r15 
  .loc 2 1379 66
  # $8.1: @IR_Variable_Value = load_struct_member($7.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $8.1:r14 
  .loc 2 1379 66
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  mov r15, [r14+32]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $9.1:r15 
  .loc 2 1379 66
  # $10.1: @String = load_struct_member($9.1, name)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $10.1:r14 
  .loc 2 1379 9
  # $11.1: @FILE = call(write_332, $6.1, $10.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $10.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $11.1:rax 
  .loc 2 1379 9
  # $12.1: @FILE = call(write_334, $11.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $12.1:rax 
  .loc 2 1379 131
  # $13.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-9]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $13.1:r15 
  .loc 2 1379 131
  # $14.1: @IR_Variable_Value = load_struct_member($13.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $14.1:r14 
  .loc 2 1379 131
  # $15.1: Int = load_struct_member($14.1, version)
  mov r15, [r14+40]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $15.1:r15 
  .loc 2 1379 9
  # $16.1: @FILE = call(write_331, $12.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $15.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 2 1379 9
  # $17.1: @FILE = call(write_334, $16.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__output_used_register_51__3)
.LABEL__output_used_register_51__3:
  # return()
  jmp .LABEL__output_used_register_51__end
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] 
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_register_51__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_register_51__stack_frame_size: .word 32

  .loc 2 1402 1
  .text
init_52:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_52__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_52__1:
  # self.1: @MC_Register = load_variable(self)
  # [live values]: self.1:rdi 
  # name_q.1: @String = load_variable(name_q)
  # [live values]: self.1:rdi name_q.1:rsi 
  # name_d.1: @String = load_variable(name_d)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx 
  # name_w.1: @String = load_variable(name_w)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx 
  # name_b.1: @String = load_variable(name_b)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  .loc 2 1403 5
  # store_struct_member(self.1, name_q, name_q.1)
  mov QWORD PTR [rdi+8], rsi
  # [discarded value]: name_q.1
  # [live values]: self.1:rdi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  .loc 2 1404 5
  # store_struct_member(self.1, name_d, name_d.1)
  mov QWORD PTR [rdi+16], rdx
  # [discarded value]: name_d.1
  # [live values]: self.1:rdi name_w.1:rcx name_b.1:r8 
  .loc 2 1405 5
  # store_struct_member(self.1, name_w, name_w.1)
  mov QWORD PTR [rdi+24], rcx
  # [discarded value]: name_w.1
  # [live values]: self.1:rdi name_b.1:r8 
  .loc 2 1406 5
  # store_struct_member(self.1, name_b, name_b.1)
  mov QWORD PTR [rdi+32], r8
  # [discarded value]: name_b.1
  # [live values]: self.1:rdi 
  .loc 2 1407 5
  # store_struct_member(self.1, is_reserved, false)
  mov BYTE PTR [rdi+40], 0
  # [live values]: self.1:rdi 
  .loc 2 1408 5
  # store_struct_member(self.1, value, null)
  mov QWORD PTR [rdi+41], 0
  # [live values]: self.1:rdi 
  .loc 2 1409 5
  # store_struct_member(self.1, loaded_value, null)
  mov QWORD PTR [rdi+49], 0
  # [live values]: self.1:rdi 
  .loc 2 1410 5
  # return(self.1)
  mov rax, rdi
  mov [rbp-8], rdi
  jmp .LABEL__init_52__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_52__end:
  mov rsp, rbp
  pop rbp
  ret

init_52__stack_frame_size: .word 16

  .loc 2 1464 1
  .text
write_53:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_53__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_53__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: file.1:rdi address.1:rsi 
  # MC_Global_Variable_Address.3: @Object_Type = load_variable(MC_Global_Variable_Address)
  lea rax, MC_Global_Variable_Address[rip]
  # [live values]: file.1:rdi address.1:rsi MC_Global_Variable_Address.3:rax 
  .loc 2 1465 9
  # $1.1: Boolean = call(is_338, address.1, MC_Global_Variable_Address.3)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: MC_Global_Variable_Address.3
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_53__2, .LABEL__write_53__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_53__3
.LABEL__write_53__2:
  .loc 2 1466 20
  # address.1: @MC_Global_Variable_Address = address.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] address.1:rax 
  .loc 2 1467 27
  # $3.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  mov rbx, [rax+8]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $3.1:rbx 
  .loc 2 1467 27
  # $4.1: @String = load_struct_member($3.1, name)
  mov rax, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  .loc 2 1467 16
  # $5.1: @FILE = call(write_332, file.1, $4.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_332
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 2 1467 16
  # $6.1: @FILE = call(write_332, $5.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_332
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $6.1:rax 
  .loc 2 1467 9
  # return($6.1)
  mov [rbp-25], rax
  jmp .LABEL__write_53__end
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_53__3:
  # MC_Register_Based_Address.4: @Object_Type = load_variable(MC_Register_Based_Address)
  lea rax, MC_Register_Based_Address[rip]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] MC_Register_Based_Address.4:rax 
  .loc 2 1469 9
  # $7.1: Boolean = call(is_338, address.1, MC_Register_Based_Address.4)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: MC_Register_Based_Address.4
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__write_53__5, .LABEL__write_53__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_53__6
.LABEL__write_53__5:
  .loc 2 1470 20
  # address.1: @MC_Register_Based_Address = address.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax 
  .loc 2 1471 9
  # $9.1: @FILE = call(write_334, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  mov [rbp-26], rax
  call write_334
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $9.1:rax 
  .loc 2 1471 31
  # $10.1: @MC_Register = load_struct_member(address.1, register)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $9.1:rax $10.1:r15 
  .loc 2 1471 31
  # $11.1: @String = load_struct_member($10.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $9.1:rax $11.1:r14 
  .loc 2 1471 9
  # $12.1: @FILE = call(write_332, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] 
  .loc 2 1472 13
  # $13.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $13.1:rbx 
  .loc 2 1472 13
  # $14.1: Boolean = $13.1 > 0
  cmp rbx, 0
  setg r15b
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:r15 
  # jump($14.1, .LABEL__write_53__7, .LABEL__write_53__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__write_53__9
.LABEL__write_53__7:
  .loc 2 1473 13
  # $19.1: @FILE = call(write_334, file.1, '+')
  mov rdi, [rbp-8]
  mov sil, 43
  call write_334
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $19.1:rax 
  .loc 2 1473 35
  # $20.1: Int = load_struct_member(address.1, offset)
  mov rbx, [rbp-26]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $14.1:[rbp-27] $19.1:rax $20.1:r15 
  .loc 2 1473 13
  # $21.1: @FILE = call(write_331, $19.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # jump(.LABEL__write_53__8)
.LABEL__write_53__8:
  .loc 2 1477 16
  # $22.1: @FILE = call(write_334, file.1, ']')
  mov rdi, [rbp-8]
  mov sil, 93
  call write_334
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $22.1:rax 
  .loc 2 1477 9
  # return($22.1)
  mov [rbp-35], rax
  jmp .LABEL__write_53__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
.LABEL__write_53__9:
  .loc 2 1474 20
  # $15.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $15.1:rbx 
  .loc 2 1474 20
  # $16.1: Boolean = $15.1 < 0
  cmp rbx, 0
  setl r15b
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $16.1:r15 
  # jump($16.1, .LABEL__write_53__10, .LABEL__write_53__8)
  test r15b, r15b
  mov [rbp-28], r15b
  jz .LABEL__write_53__8
.LABEL__write_53__10:
  .loc 2 1475 24
  # $17.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] $17.1:rbx 
  .loc 2 1475 13
  # $18.1: @FILE = call(write_331, file.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_331
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] 
  # jump(.LABEL__write_53__8)
  jmp .LABEL__write_53__8
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] 
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] 
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__write_53__6:
  .loc 2 1479 11
  # $23.1: @String = call(clone_340, "Unsupported type: ")
  lea rdi, .LABEL__string_158[rip] # "Unsupported type: "
  call clone_340
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax 
  .loc 2 1479 46
  # $24.1: @Object_Type = load_struct_member(address.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax $24.1:r15 
  .loc 2 1479 46
  # $25.1: @String = load_struct_member_address($24.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax $25.1:r14 
  .loc 2 1479 11
  # $26.1: @String = call(append_349, $23.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $25.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $26.1:rax 
  .loc 2 1479 5
  # call(abort_337, $26.1)
  mov rdi, rax
  call abort_337
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [discarded value]: address.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_53__end:
  mov rsp, rbp
  pop rbp
  ret

write_53__stack_frame_size: .word 48

  .loc 2 1494 1
  .text
get_type_size_54:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_type_size_54__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_type_size_54__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_type.1: @IR_Type = load_variable(ir_type)
  # [live values]: self.1:rdi ir_type.1:rsi 
  # IR_Boolean_Type.6: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:rdi ir_type.1:rsi IR_Boolean_Type.6:rax 
  .loc 2 1495 9
  # $1.1: Boolean = call(is_338, ir_type.1, IR_Boolean_Type.6)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Boolean_Type.6
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__get_type_size_54__2, .LABEL__get_type_size_54__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_type_size_54__3
.LABEL__get_type_size_54__2:
  .loc 2 1496 9
  # return(1)
  mov rax, 1
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__get_type_size_54__3:
  # IR_Function_Type.5: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] IR_Function_Type.5:rax 
  .loc 2 1498 9
  # $2.1: Boolean = call(is_338, ir_type.1, IR_Function_Type.5)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Function_Type.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  # jump($2.1, .LABEL__get_type_size_54__5, .LABEL__get_type_size_54__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__get_type_size_54__6
.LABEL__get_type_size_54__5:
  .loc 2 1499 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
.LABEL__get_type_size_54__6:
  # IR_Int_Type.8: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] IR_Int_Type.8:rax 
  .loc 2 1501 9
  # $3.1: Boolean = call(is_338, ir_type.1, IR_Int_Type.8)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int_Type.8
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:rax 
  # jump($3.1, .LABEL__get_type_size_54__8, .LABEL__get_type_size_54__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__get_type_size_54__9
.LABEL__get_type_size_54__8:
  .loc 2 1502 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
.LABEL__get_type_size_54__9:
  # IR_Int16_Type.2: @Object_Type = load_variable(IR_Int16_Type)
  lea rax, IR_Int16_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] IR_Int16_Type.2:rax 
  .loc 2 1504 9
  # $4.1: Boolean = call(is_338, ir_type.1, IR_Int16_Type.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int16_Type.2
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:rax 
  # jump($4.1, .LABEL__get_type_size_54__11, .LABEL__get_type_size_54__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__get_type_size_54__12
.LABEL__get_type_size_54__11:
  .loc 2 1505 9
  # return(2)
  mov rax, 2
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] 
.LABEL__get_type_size_54__12:
  # IR_Int32_Type.7: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] IR_Int32_Type.7:rax 
  .loc 2 1507 9
  # $5.1: Boolean = call(is_338, ir_type.1, IR_Int32_Type.7)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int32_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:rax 
  # jump($5.1, .LABEL__get_type_size_54__14, .LABEL__get_type_size_54__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__get_type_size_54__15
.LABEL__get_type_size_54__14:
  .loc 2 1508 9
  # return(4)
  mov rax, 4
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] 
.LABEL__get_type_size_54__15:
  # IR_Int8_Type.8: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] IR_Int8_Type.8:rax 
  .loc 2 1510 9
  # $6.1: Boolean = call(is_338, ir_type.1, IR_Int8_Type.8)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int8_Type.8
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:rax 
  # jump($6.1, .LABEL__get_type_size_54__17, .LABEL__get_type_size_54__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__get_type_size_54__18
.LABEL__get_type_size_54__17:
  .loc 2 1511 9
  # return(1)
  mov rax, 1
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] 
.LABEL__get_type_size_54__18:
  # IR_Null_Type.3: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] IR_Null_Type.3:rax 
  .loc 2 1513 9
  # $7.1: Boolean = call(is_338, ir_type.1, IR_Null_Type.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Null_Type.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:rax 
  # jump($7.1, .LABEL__get_type_size_54__20, .LABEL__get_type_size_54__21)
  test al, al
  mov [rbp-23], al
  jz .LABEL__get_type_size_54__21
.LABEL__get_type_size_54__20:
  .loc 2 1514 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] 
.LABEL__get_type_size_54__21:
  # IR_Pointer_Type.6: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] IR_Pointer_Type.6:rax 
  .loc 2 1516 9
  # $8.1: Boolean = call(is_338, ir_type.1, IR_Pointer_Type.6)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.6
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:rax 
  # jump($8.1, .LABEL__get_type_size_54__23, .LABEL__get_type_size_54__24)
  test al, al
  mov [rbp-24], al
  jz .LABEL__get_type_size_54__24
.LABEL__get_type_size_54__23:
  .loc 2 1517 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] 
.LABEL__get_type_size_54__24:
  # IR_Struct_Type.6: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] IR_Struct_Type.6:rax 
  .loc 2 1519 9
  # $9.1: Boolean = call(is_338, ir_type.1, IR_Struct_Type.6)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Struct_Type.6
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:rax 
  # jump($9.1, .LABEL__get_type_size_54__26, .LABEL__get_type_size_54__27)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_type_size_54__27
.LABEL__get_type_size_54__26:
  .loc 2 1520 20
  # ir_type.1: @IR_Struct_Type = ir_type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax 
  .loc 2 1521 9
  # size.1: Int = 0
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx 
  .loc 2 1522 13
  # $11.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx $11.1:r15 
  .loc 2 1522 13
  # $12.1: Boolean = $11.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx $12.1:r14 
  # jump($12.1, .LABEL__get_type_size_54__28, .LABEL__get_type_size_54__29)
  test r14b, r14b
  mov [rbp-33], rax
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__get_type_size_54__29
.LABEL__get_type_size_54__28:
  .loc 2 1523 46
  # $13.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $13.1:rbx 
  .loc 2 1523 27
  # $14.1: Int = call(get_type_size_54, self.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_54
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $14.1:rax 
  .loc 2 1523 20
  # size.3: Int = size.1 + $14.1
  mov rbx, [rbp-41]
  add rbx, rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:rbx:[rbp-41] 
  # jump(.LABEL__get_type_size_54__29)
  mov [rbp-41], rbx
.LABEL__get_type_size_54__29:
  # size.8: Int = phi(size.1, size.3)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] 
  .loc 2 1525 32
  # $16.1: @List = load_struct_member(ir_type.1, members)
  mov rax, [rbp-33]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] $16.1:rbx 
  .loc 2 1525 32
  # struct_type_members.1: @List_Iterator = call(create_iterator_324, $16.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:rax 
  # jump(.LABEL__get_type_size_54__30)
  mov [rbp-50], rax
.LABEL__get_type_size_54__30:
  # size.7: Int = phi(size.8, size.5)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] 
  .loc 2 1526 16
  # $18.1: Boolean = call(has_next_327, struct_type_members.1)
  mov rdi, [rbp-50]
  call has_next_327
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:rax 
  # jump($18.1, .LABEL__get_type_size_54__31, .LABEL__get_type_size_54__32)
  test al, al
  mov [rbp-51], al
  jz .LABEL__get_type_size_54__32
.LABEL__get_type_size_54__31:
  .loc 2 1527 35
  # struct_type_member.1: @IR_Struct_Type_Member = call(next_328, struct_type_members.1)
  mov rdi, [rbp-50]
  call next_328
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] struct_type_member.1:rax 
  .loc 2 1528 46
  # $21.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rbx, [rax+16]
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $21.1:rbx 
  .loc 2 1528 27
  # $22.1: Int = call(get_type_size_54, self.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_54
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $22.1:rax 
  .loc 2 1528 20
  # size.5: Int = size.7 + $22.1
  mov rbx, [rbp-41]
  add rbx, rax
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] size.5:rbx:[rbp-41] 
  # jump(.LABEL__get_type_size_54__30)
  mov [rbp-41], rbx
  jmp .LABEL__get_type_size_54__30
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] size.5:[rbp-41] 
  # [discarded value]: size.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] 
.LABEL__get_type_size_54__32:
  .loc 2 1530 9
  # return(size.7)
  mov rax, [rbp-41]
  jmp .LABEL__get_type_size_54__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] 
  # [discarded value]: size.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] 
  # [discarded value]: struct_type_members.1
  # [discarded value]: size.8
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] 
  # [discarded value]: size.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] 
  # [discarded value]: size.1
  # [discarded value]: ir_type.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] 
.LABEL__get_type_size_54__27:
  .loc 2 1532 16
  # $24.1: @String = call(clone_340, "Unsupported type: ")
  lea rdi, .LABEL__string_158[rip] # "Unsupported type: "
  call clone_340
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax 
  .loc 2 1532 51
  # $25.1: @Object_Type = load_struct_member(ir_type.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax $25.1:r15 
  .loc 2 1532 51
  # $26.1: @String = load_struct_member_address($25.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax $26.1:r14 
  .loc 2 1532 16
  # $27.1: @String = call(append_349, $24.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $26.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $27.1:rax 
  .loc 2 1532 5
  # call(abort_34, self.1, $27.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_34
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [discarded value]: ir_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_type_size_54__end:
  mov rsp, rbp
  pop rbp
  ret

get_type_size_54__stack_frame_size: .word 64

  .loc 2 1540 1
  .text
convert_string_55:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_string_55__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_string_55__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # literal.1: @String_Token = load_variable(literal)
  # [live values]: self.1:rdi literal.1:rsi 
  .loc 2 1541 20
  # $1.1: @List = load_struct_member(self.1, strings)
  mov rax, [rdi+169]
  # [live values]: self.1:rdi literal.1:rsi $1.1:rax 
  .loc 2 1541 20
  # string_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi literal.1:rsi string_item.1:rbx 
  # jump(.LABEL__convert_string_55__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__convert_string_55__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.5)
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  .loc 2 1542 12
  # $3.1: Boolean = string_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__convert_string_55__3, .LABEL__convert_string_55__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_string_55__4
.LABEL__convert_string_55__3:
  .loc 2 1543 19
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx 
  .loc 2 1544 13
  # $6.1: @String_Token = load_struct_member(string.1, literal)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $6.1:r15 
  .loc 2 1544 13
  # $7.1: @String = load_struct_member($6.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $7.1:r14 
  .loc 2 1544 42
  # $8.1: @String = load_struct_member(literal.1, lexeme)
  mov r15, [rbp-16]
  mov r13, [r15+8]
  # [live values]: self.1:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $7.1:r14 $8.1:r13 
  .loc 2 1544 13
  # $9.1: Boolean = call(equals_341, $7.1, $8.1)
  mov rdi, r14
  mov rsi, r13
  mov [rbp-33], rbx
  call equals_341
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__convert_string_55__5, .LABEL__convert_string_55__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_string_55__6
.LABEL__convert_string_55__5:
  .loc 2 1545 13
  # return(string.1)
  mov rax, [rbp-33]
  jmp .LABEL__convert_string_55__end
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__convert_string_55__6:
  .loc 2 1547 23
  # string_item.5: @List_Item = load_struct_member(string_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] string_item.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_string_55__2)
  mov [rbp-8], rbx
  jmp .LABEL__convert_string_55__2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] string_item.5:[rbp-8] 
  # [discarded value]: string_item.5
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] 
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] 
.LABEL__convert_string_55__4:
  .loc 2 1549 34
  # $11.1: @List = load_struct_member(self.1, strings)
  mov rax, [rbp-24]
  mov rbx, [rax+169]
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $11.1:rbx 
  .loc 2 1549 34
  # $12.1: Int = load_struct_member($11.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $12.1:r15 
  .loc 2 1549 15
  # $13.1: @MC_String = new(MC_String)
  mov [rbp-33], r15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $12.1:[rbp-33] $13.1:rax 
  # store_struct_member($13.1, id, $12.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $13.1:rax 
  # store_struct_member($13.1, literal, literal.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] literal.1:rbx:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $13.1:rax 
  .loc 2 1549 5
  # string.1: @MC_String = $13.1
  mov [rbp-33], rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] literal.1:rbx:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:rax 
  .loc 2 1550 5
  # $14.1: @List = load_struct_member(self.1, strings)
  mov r15, [rbp-24]
  mov r14, [r15+169]
  # [live values]: self.1:r15:[rbp-24] literal.1:rbx:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:rax $14.1:r14 
  .loc 2 1550 5
  # call(append_313, $14.1, string.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-33], rax
  call append_313
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] 
  .loc 2 1551 5
  # return(string.1)
  mov rax, [rbp-33]
  jmp .LABEL__convert_string_55__end
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [discarded value]: string_item.1
  # [discarded value]: literal.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_string_55__end:
  mov rsp, rbp
  pop rbp
  ret

convert_string_55__stack_frame_size: .word 48

  .loc 2 1554 1
  .text
generate_strings_56:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_strings_56__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_strings_56__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1555 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1555 5
  # $2.1: @FILE = call(end_line_335, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call end_line_335
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 2 1555 5
  # $3.1: @FILE = call(write_332, $2.1, "  .section .rodata")
  mov rdi, rax
  lea rsi, .LABEL__string_159[rip] # "  .section .rodata"
  call write_332
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 2 1555 5
  # $4.1: @FILE = call(end_line_335, $3.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1556 20
  # $5.1: @List = load_struct_member(self.1, strings)
  mov rax, [rbp-8]
  mov rbx, [rax+169]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1556 20
  # string_item.1: @List_Item = load_struct_member($5.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] string_item.1:r15 
  # jump(.LABEL__generate_strings_56__2)
  mov [rbp-16], r15
.LABEL__generate_strings_56__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.4)
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  .loc 2 1557 12
  # $7.1: Boolean = string_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:rax 
  # jump($7.1, .LABEL__generate_strings_56__3, .LABEL__generate_strings_56__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_strings_56__4
.LABEL__generate_strings_56__3:
  .loc 2 1558 19
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] $7.1:[rbp-17] string.1:rbx 
  .loc 2 1560 9
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-8]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] $7.1:[rbp-17] string.1:rbx $10.1:r14 
  .loc 2 1560 9
  # $11.1: @FILE = call(end_line_335, $10.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call end_line_335
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1561 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $12.1:rbx 
  .loc 2 1561 9
  # $13.1: @FILE = call(write_332, $12.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_160[rip] # "  .align 8"
  call write_332
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $13.1:rax 
  .loc 2 1561 9
  # $14.1: @FILE = call(end_line_335, $13.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1562 9
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $15.1:rbx 
  .loc 2 1562 9
  # $16.1: @FILE = call(write_string_label_57, $15.1, string.1)
  mov rdi, rbx
  mov rsi, [rbp-25]
  call write_string_label_57
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $16.1:rax 
  .loc 2 1562 9
  # $17.1: @FILE = call(write_334, $16.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $17.1:rax 
  .loc 2 1562 9
  # $18.1: @FILE = call(end_line_335, $17.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1563 9
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $19.1:rbx 
  .loc 2 1563 9
  # $20.1: @FILE = call(write_332, $19.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $20.1:rax 
  .loc 2 1563 9
  # $21.1: @FILE = call(write_string_label_57, $20.1, string.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call write_string_label_57
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $21.1:rax 
  .loc 2 1563 9
  # $22.1: @FILE = call(write_332, $21.1, "__data")
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "__data"
  call write_332
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $22.1:rax 
  .loc 2 1563 9
  # $23.1: @FILE = call(end_line_335, $22.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1564 9
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $24.1:rbx 
  .loc 2 1564 9
  # $25.1: @FILE = call(write_332, $24.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $25.1:rax 
  .loc 2 1564 50
  # $26.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $26.1:r15 
  .loc 2 1564 50
  # $27.1: @String = load_struct_member($26.1, value)
  mov r14, [r15+32]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $27.1:r14 
  .loc 2 1564 50
  # $28.1: Int = load_struct_member($27.1, length)
  mov r15, [r14+16]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $28.1:r15 
  .loc 2 1564 50
  # $29.1: Int = $28.1 + 1
  mov r14, r15
  add r14, 1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $29.1:r14 
  .loc 2 1564 9
  # $30.1: @FILE = call(write_331, $25.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $29.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $30.1:rax 
  .loc 2 1564 9
  # $31.1: @FILE = call(end_line_335, $30.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1565 9
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $32.1:rbx 
  .loc 2 1565 9
  # $33.1: @FILE = call(write_332, $32.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $33.1:rax 
  .loc 2 1565 50
  # $34.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $34.1:r15 
  .loc 2 1565 50
  # $35.1: @String = load_struct_member($34.1, value)
  mov r14, [r15+32]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $35.1:r14 
  .loc 2 1565 50
  # $36.1: Int = load_struct_member($35.1, length)
  mov r15, [r14+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $36.1:r15 
  .loc 2 1565 9
  # $37.1: @FILE = call(write_331, $33.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $36.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $37.1:rax 
  .loc 2 1565 9
  # $38.1: @FILE = call(end_line_335, $37.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1566 9
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $39.1:rbx 
  .loc 2 1566 9
  # $40.1: @FILE = call(write_string_label_57, $39.1, string.1)
  mov rdi, rbx
  mov rsi, [rbp-25]
  call write_string_label_57
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $40.1:rax 
  .loc 2 1566 9
  # $41.1: @FILE = call(write_332, $40.1, "__data: .string ")
  mov rdi, rax
  lea rsi, .LABEL__string_163[rip] # "__data: .string "
  call write_332
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $41.1:rax 
  .loc 2 1566 85
  # $42.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $41.1:rax $42.1:r15 
  .loc 2 1566 85
  # $43.1: @String = load_struct_member($42.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $41.1:rax $43.1:rbx 
  .loc 2 1566 9
  # $44.1: @FILE = call(write_332, $41.1, $43.1)
  mov rdi, rax
  mov rsi, rbx
  call write_332
  # [discarded value]: $43.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $44.1:rax 
  .loc 2 1566 9
  # $45.1: @FILE = call(end_line_335, $44.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
  .loc 2 1568 23
  # string_item.4: @List_Item = load_struct_member(string_item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string_item.4:rbx:[rbp-16] 
  # jump(.LABEL__generate_strings_56__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_strings_56__2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string_item.4:[rbp-16] 
  # [discarded value]: string_item.4
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
.LABEL__generate_strings_56__4:
  # return()
  jmp .LABEL__generate_strings_56__end
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [discarded value]: string_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_strings_56__end:
  mov rsp, rbp
  pop rbp
  ret

generate_strings_56__stack_frame_size: .word 32

  .loc 2 1572 1
  .text
write_string_label_57:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_string_label_57__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_string_label_57__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @MC_String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  .loc 2 1573 12
  # $1.1: @FILE = call(write_332, file.1, ".LABEL__string_")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_164[rip] # ".LABEL__string_"
  call write_332
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  .loc 2 1573 48
  # $2.1: Int = load_struct_member(string.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: string.1
  # [live values]: $1.1:rax $2.1:r15 
  .loc 2 1573 12
  # $3.1: @FILE = call(write_331, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 2 1573 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__write_string_label_57__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__write_string_label_57__end:
  mov rsp, rbp
  pop rbp
  ret

write_string_label_57__stack_frame_size: .word 16

  .loc 2 1576 1
  .text
generate_object_types_58:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_object_types_58__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_object_types_58__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # types.1: @List = load_variable(types)
  # [live values]: self.1:rdi types.1:rsi 
  .loc 2 1577 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi types.1:rsi $1.1:rax 
  .loc 2 1577 5
  # $2.1: @FILE = call(end_line_335, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_335
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $2.1:rax 
  .loc 2 1577 5
  # $3.1: @FILE = call(write_332, $2.1, "  .section .rodata")
  mov rdi, rax
  lea rsi, .LABEL__string_159[rip] # "  .section .rodata"
  call write_332
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $3.1:rax 
  .loc 2 1577 5
  # $4.1: @FILE = call(end_line_335, $3.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  .loc 2 1578 18
  # type_item.1: @List_Item = load_struct_member(types.1, first_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-8] type_item.1:rbx 
  # jump(.LABEL__generate_object_types_58__2)
  mov [rbp-16], rbx
.LABEL__generate_object_types_58__2:
  # type_item.2: @List_Item = phi(type_item.1, type_item.5)
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  .loc 2 1579 12
  # $6.1: Boolean = type_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__generate_object_types_58__3, .LABEL__generate_object_types_58__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_object_types_58__4
.LABEL__generate_object_types_58__3:
  .loc 2 1580 17
  # type.1: @IR_Type = load_struct_member(type_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:rax:[rbp-16] $6.1:[rbp-17] type.1:rbx 
  # IR_Struct_Type.7: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:rax:[rbp-16] $6.1:[rbp-17] type.1:rbx IR_Struct_Type.7:r15 
  .loc 2 1581 13
  # $9.1: Boolean = call(is_338, type.1, IR_Struct_Type.7)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-25], rbx
  call is_338
  # [discarded value]: IR_Struct_Type.7
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__generate_object_types_58__5, .LABEL__generate_object_types_58__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_object_types_58__6
.LABEL__generate_object_types_58__5:
  .loc 2 1582 21
  # type.1: @IR_Struct_Type = type.1
  mov rax, [rbp-25]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax 
  .loc 2 1583 17
  # $11.1: Boolean = call(is_object_type_152, type.1)
  mov rdi, rax
  mov [rbp-34], rax
  call is_object_type_152
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__generate_object_types_58__7, .LABEL__generate_object_types_58__6)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_object_types_58__6
.LABEL__generate_object_types_58__7:
  .loc 2 1584 17
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $12.1:rbx 
  .loc 2 1584 17
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rbx
  call end_line_335
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1585 17
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $14.1:rbx 
  .loc 2 1585 17
  # $15.1: @FILE = call(write_332, $14.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_160[rip] # "  .align 8"
  call write_332
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $15.1:rax 
  .loc 2 1585 17
  # $16.1: @FILE = call(end_line_335, $15.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1586 17
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx 
  .loc 2 1586 17
  # $18.1: @FILE = call(write_type_label_59, $17.1, type.1)
  mov rdi, rbx
  mov rsi, [rbp-34]
  call write_type_label_59
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $18.1:rax 
  .loc 2 1586 17
  # $19.1: @FILE = call(write_334, $18.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $19.1:rax 
  .loc 2 1586 17
  # $20.1: @FILE = call(end_line_335, $19.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1587 17
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $21.1:rbx 
  .loc 2 1587 17
  # $22.1: @FILE = call(write_332, $21.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $22.1:rax 
  .loc 2 1587 17
  # $23.1: @FILE = call(write_331, $22.1, 0)
  mov rdi, rax
  xor rsi, rsi
  call write_331
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $23.1:rax 
  .loc 2 1587 17
  # $24.1: @FILE = call(end_line_335, $23.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1588 17
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $25.1:rbx 
  .loc 2 1588 17
  # $26.1: @FILE = call(write_332, $25.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_165[rip] # "  .quad .LABEL__"
  call write_332
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $26.1:rax 
  .loc 2 1588 66
  # $27.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $26.1:rax $27.1:r15 
  .loc 2 1588 17
  # $28.1: @FILE = call(write_332, $26.1, $27.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $28.1:rax 
  .loc 2 1588 17
  # $29.1: @FILE = call(write_332, $28.1, "__type_name__data")
  mov rdi, rax
  lea rsi, .LABEL__string_166[rip] # "__type_name__data"
  call write_332
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $29.1:rax 
  .loc 2 1588 17
  # $30.1: @FILE = call(end_line_335, $29.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1589 17
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $31.1:rbx 
  .loc 2 1589 17
  # $32.1: @FILE = call(write_332, $31.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $32.1:rax 
  .loc 2 1589 58
  # $33.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $32.1:rax $33.1:r15 
  .loc 2 1589 58
  # $34.1: Int = load_struct_member($33.1, length)
  mov r14, [r15+16]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $32.1:rax $34.1:r14 
  .loc 2 1589 58
  # $35.1: Int = $34.1 + 1
  mov r15, r14
  add r15, 1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $32.1:rax $35.1:r15 
  .loc 2 1589 17
  # $36.1: @FILE = call(write_331, $32.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $35.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $36.1:rax 
  .loc 2 1589 17
  # $37.1: @FILE = call(end_line_335, $36.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1590 17
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $38.1:rbx 
  .loc 2 1590 17
  # $39.1: @FILE = call(write_332, $38.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $39.1:rax 
  .loc 2 1590 58
  # $40.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $39.1:rax $40.1:r15 
  .loc 2 1590 58
  # $41.1: Int = load_struct_member($40.1, length)
  mov r14, [r15+16]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $39.1:rax $41.1:r14 
  .loc 2 1590 17
  # $42.1: @FILE = call(write_331, $39.1, $41.1)
  mov rdi, rax
  mov rsi, r14
  call write_331
  # [discarded value]: $41.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $42.1:rax 
  .loc 2 1590 17
  # $43.1: @FILE = call(end_line_335, $42.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1591 21
  # $44.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax:[rbp-34] $11.1:[rbp-35] $44.1:rbx 
  .loc 2 1591 21
  # $45.1: Boolean = $44.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax:[rbp-34] $11.1:[rbp-35] $45.1:r15 
  # jump($45.1, .LABEL__generate_object_types_58__9, .LABEL__generate_object_types_58__11)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__generate_object_types_58__11
.LABEL__generate_object_types_58__9:
  .loc 2 1592 21
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $49.1:rbx 
  .loc 2 1592 21
  # $50.1: @FILE = call(write_332, $49.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  .quad "
  call write_332
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $50.1:rax 
  .loc 2 1592 62
  # $51.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  mov rbx, [rbp-34]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $50.1:rax $51.1:r15 
  .loc 2 1592 62
  # $52.1: @String = load_struct_member($51.1, name)
  mov r14, [r15+8]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $50.1:rax $52.1:r14 
  .loc 2 1592 21
  # $53.1: @FILE = call(write_332, $50.1, $52.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $52.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $53.1:rax 
  .loc 2 1592 21
  # $54.1: @FILE = call(end_line_335, $53.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_58__10)
.LABEL__generate_object_types_58__10:
  .loc 2 1596 17
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $55.1:rbx 
  .loc 2 1596 17
  # $56.1: @FILE = call(write_332, $55.1, ".LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_332
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $56.1:rax 
  .loc 2 1596 58
  # $57.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $56.1:rax $57.1:r15 
  .loc 2 1596 17
  # $58.1: @FILE = call(write_332, $56.1, $57.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $58.1:rax 
  .loc 2 1596 17
  # $59.1: @FILE = call(write_332, $58.1, "__type_name__data: .string \"")
  mov rdi, rax
  lea rsi, .LABEL__string_167[rip] # "__type_name__data: .string \""
  call write_332
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $59.1:rax 
  .loc 2 1596 114
  # $60.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $59.1:rax $60.1:r15 
  .loc 2 1596 17
  # $61.1: @FILE = call(write_332, $59.1, $60.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $61.1:rax 
  .loc 2 1596 17
  # $62.1: @FILE = call(write_334, $61.1, '"')
  mov rdi, rax
  mov sil, 34
  call write_334
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $62.1:rax 
  .loc 2 1596 17
  # $63.1: @FILE = call(end_line_335, $62.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_58__6)
.LABEL__generate_object_types_58__6:
  .loc 2 1599 21
  # type_item.5: @List_Item = load_struct_member(type_item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] type_item.5:rbx:[rbp-16] $45.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_58__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_object_types_58__2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] type_item.5:[rbp-16] $45.1:[rbp-36] 
  # [discarded value]: type_item.5
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
.LABEL__generate_object_types_58__11:
  .loc 2 1594 21
  # $46.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $46.1:rbx 
  .loc 2 1594 21
  # $47.1: @FILE = call(write_332, $46.1, "  .quad 0")
  mov rdi, rbx
  lea rsi, .LABEL__string_168[rip] # "  .quad 0"
  call write_332
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] $47.1:rax 
  .loc 2 1594 21
  # $48.1: @FILE = call(end_line_335, $47.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_58__10)
  jmp .LABEL__generate_object_types_58__10
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $45.1:[rbp-36] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] 
.LABEL__generate_object_types_58__4:
  # return()
  jmp .LABEL__generate_object_types_58__end
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [discarded value]: type_item.2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [discarded value]: type_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_object_types_58__end:
  mov rsp, rbp
  pop rbp
  ret

generate_object_types_58__stack_frame_size: .word 48

  .loc 2 1603 1
  .text
write_type_label_59:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_type_label_59__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_type_label_59__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  .loc 2 1604 23
  # $1.1: @String = load_struct_member(type.1, name)
  mov rax, [rsi+8]
  # [discarded value]: type.1
  # [live values]: file.1:rdi $1.1:rax 
  .loc 2 1604 12
  # $2.1: @FILE = call(write_332, file.1, $1.1)
  mov rsi, rax
  call write_332
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: $2.1:rax 
  .loc 2 1604 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_type_label_59__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_type_label_59__end:
  mov rsp, rbp
  pop rbp
  ret

write_type_label_59__stack_frame_size: .word 16

  .loc 3 3 1
  .text
build_60:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_60__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_60__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  .loc 3 4 16
  # builder.1: @IR_Builder = call(create_ir_builder_62, compilation_unit.1)
  mov [rbp-8], rdi
  call create_ir_builder_62
  # [live values]: compilation_unit.1:[rbp-8] builder.1:rax 
  .loc 3 5 5
  # call(build_75, builder.1)
  mov rdi, rax
  mov [rbp-16], rax
  call build_75
  # [live values]: compilation_unit.1:[rbp-8] builder.1:[rbp-16] 
  .loc 3 7 19
  # $2.1: @List = load_struct_member(compilation_unit.1, sources)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [discarded value]: compilation_unit.1
  # [live values]: builder.1:[rbp-16] $2.1:rbx 
  .loc 3 8 27
  # $3.1: @List = load_struct_member(builder.1, named_functions)
  mov rax, [rbp-16]
  mov r15, [rax+24]
  # [live values]: builder.1:rax:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 3 9 23
  # $4.1: @List = load_struct_member(builder.1, named_types)
  mov r14, [rax+16]
  # [discarded value]: builder.1
  # [live values]: $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 3 6 12
  # $5.1: @IR_Build = new(IR_Build)
  mov [rbp-8], rbx
  mov [rbp-16], r14
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  # [live values]: $2.1:[rbp-8] $3.1:[rbp-24] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, sources, $2.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $2.1
  # [live values]: $3.1:[rbp-24] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, named_functions, $3.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, named_types, $4.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  .loc 3 6 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__build_60__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__build_60__end:
  mov rsp, rbp
  pop rbp
  ret

build_60__stack_frame_size: .word 32

  .loc 3 19 1
  .text
dump_61:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_61__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_61__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: build.1:rdi file.1:rsi 
  .loc 3 20 18
  # $1.1: @List = load_struct_member(build.1, named_functions)
  mov rax, [rdi+8]
  # [discarded value]: build.1
  # [live values]: file.1:rsi $1.1:rax 
  .loc 3 20 18
  # functions.1: @List_Iterator = call(create_iterator_324, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_324
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] functions.1:rax 
  # jump(.LABEL__dump_61__2)
  mov [rbp-16], rax
.LABEL__dump_61__2:
  .loc 3 21 12
  # $3.1: Boolean = call(has_next_327, functions.1)
  mov rdi, [rbp-16]
  call has_next_327
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__dump_61__3, .LABEL__dump_61__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__dump_61__4
.LABEL__dump_61__3:
  .loc 3 22 21
  # function.1: @IR_Function = call(next_328, functions.1)
  mov rdi, [rbp-16]
  call next_328
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax 
  .loc 3 23 13
  # $6.1: Boolean = load_struct_member(function.1, is_external)
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax $6.1:rbx 
  .loc 3 23 13
  # $7.1: Boolean = $6.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax $7.1:r15 
  # jump($7.1, .LABEL__dump_61__5, .LABEL__dump_61__2)
  test r15b, r15b
  mov [rbp-25], rax
  mov [rbp-26], r15b
  jz .LABEL__dump_61__2
.LABEL__dump_61__5:
  .loc 3 24 13
  # call(dump_169, function.1, file.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-8]
  call dump_169
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  .loc 3 25 13
  # $8.1: @FILE = call(end_line_335, file.1)
  mov rdi, [rbp-8]
  call end_line_335
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  # jump(.LABEL__dump_61__2)
  jmp .LABEL__dump_61__2
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] 
  # [discarded value]: function.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__dump_61__4:
  # return()
  jmp .LABEL__dump_61__end
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [discarded value]: functions.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_61__end:
  mov rsp, rbp
  pop rbp
  ret

dump_61__stack_frame_size: .word 32

  .loc 3 51 1
  .text
create_ir_builder_62:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_builder_62__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_builder_62__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  .loc 3 52 20
  # $1.1: @List = new(List)
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  .loc 3 52 5
  # named_types.1: @List = $1.1
  mov [rbp-16], rax
  # [discarded value]: $1.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:rax 
  .loc 3 53 24
  # $2.1: @IR_Any_Type = new(IR_Any_Type)
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Any_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, name, "Any")
  lea rbx, .LABEL__string_169[rip] # "Any"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $2.1:rax 
  .loc 3 53 5
  # call(append_313, named_types.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $2.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 54 24
  # $3.1: @IR_Boolean_Type = new(IR_Boolean_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Boolean_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, name, "Boolean")
  lea rbx, .LABEL__string_170[rip] # "Boolean"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  .loc 3 54 5
  # call(append_313, named_types.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $3.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 55 24
  # $4.1: @IR_Int_Type = new(IR_Int_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Int_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name, "Int")
  lea rbx, .LABEL__string_171[rip] # "Int"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $4.1:rax 
  .loc 3 55 5
  # call(append_313, named_types.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $4.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 56 24
  # $5.1: @IR_Int8_Type = new(IR_Int8_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Int8_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, name, "Int8")
  lea rbx, .LABEL__string_172[rip] # "Int8"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $5.1:rax 
  .loc 3 56 5
  # call(append_313, named_types.1, $5.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $5.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 57 24
  # $6.1: @IR_Int16_Type = new(IR_Int16_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Int16_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, name, "Int16")
  lea rbx, .LABEL__string_173[rip] # "Int16"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $6.1:rax 
  .loc 3 57 5
  # call(append_313, named_types.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $6.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 58 24
  # $7.1: @IR_Int32_Type = new(IR_Int32_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Int32_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $7.1:rax 
  # store_struct_member($7.1, name, "Int32")
  lea rbx, .LABEL__string_174[rip] # "Int32"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $7.1:rax 
  .loc 3 58 5
  # call(append_313, named_types.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $7.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 59 24
  # $8.1: @IR_Int64_Type = new(IR_Int64_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Int64_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $8.1:rax 
  # store_struct_member($8.1, name, "Int64")
  lea rbx, .LABEL__string_175[rip] # "Int64"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $8.1:rax 
  .loc 3 59 5
  # call(append_313, named_types.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $8.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 60 24
  # $9.1: @IR_Nothing_Type = new(IR_Nothing_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Nothing_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $9.1:rax 
  # store_struct_member($9.1, name, "Nothing")
  lea rbx, .LABEL__string_176[rip] # "Nothing"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $9.1:rax 
  .loc 3 60 5
  # call(append_313, named_types.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $9.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 61 24
  # $10.1: @IR_Null_Type = new(IR_Null_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Null_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $10.1:rax 
  # store_struct_member($10.1, name, "Null")
  lea rbx, .LABEL__string_177[rip] # "Null"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $10.1:rax 
  .loc 3 61 5
  # call(append_313, named_types.1, $10.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $10.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 62 24
  # $11.1: @IR_Undefined_Type = new(IR_Undefined_Type)
  mov rdi, 16
  call malloc
  lea rbx, IR_Undefined_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $11.1:rax 
  # store_struct_member($11.1, name, "Undefined")
  lea rbx, .LABEL__string_178[rip] # "Undefined"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $11.1:rax 
  .loc 3 62 5
  # call(append_313, named_types.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_313
  # [discarded value]: $11.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 42 24
  # $12.1: @List = new(List)
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # store_struct_member($12.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # store_struct_member($12.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # store_struct_member($12.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  .loc 3 43 27
  # $13.1: @List = new(List)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  .loc 3 64 19
  # $14.1: @IR_Builder_Context = new(IR_Builder_Context)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:[rbp-32] $14.1:rax 
  # store_struct_member($14.1, parent, null)
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:[rbp-32] $14.1:rax 
  # store_struct_member($14.1, variables, $12.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $12.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $13.1:[rbp-32] $14.1:rax 
  # store_struct_member($14.1, named_values, $13.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $13.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:rax 
  .loc 3 34 30
  # $15.1: @List = new(List)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # store_struct_member($15.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # store_struct_member($15.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # store_struct_member($15.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  .loc 3 37 25
  # $16.1: @Counter = new(Counter)
  mov [rbp-32], rax
  mov rdi, 8
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:rax 
  # store_struct_member($16.1, value, 0)
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:rax 
  .loc 3 63 12
  # $17.1: @IR_Builder = new(IR_Builder)
  mov [rbp-40], rax
  mov rdi, 56
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, context, $14.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $14.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, compilation_unit, compilation_unit.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: compilation_unit.1
  # [live values]: named_types.1:[rbp-16] $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, named_types, named_types.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: named_types.1
  # [live values]: $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, named_functions, $15.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $15.1
  # [live values]: $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, current_block, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, current_loop, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, counter, $16.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+48], rbx
  # [discarded value]: $16.1
  # [live values]: $17.1:rax 
  .loc 3 63 5
  # return($17.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_builder_62__end
  # [discarded value]: $17.1
  # [live values]: 
.LABEL__create_ir_builder_62__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_builder_62__stack_frame_size: .word 48

  .loc 3 70 1
  .text
get_named_type_63:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_type_63__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_type_63__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 71 20
  # $1.1: @List = load_struct_member(self.1, named_types)
  mov rax, [rdi+16]
  # [discarded value]: self.1
  # [live values]: name.1:rsi $1.1:rax 
  .loc 3 71 20
  # named_types.1: @List_Iterator = call(create_iterator_324, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_324
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-8] named_types.1:rax 
  # jump(.LABEL__get_named_type_63__2)
  mov [rbp-16], rax
.LABEL__get_named_type_63__2:
  .loc 3 72 12
  # $3.1: Boolean = call(has_next_327, named_types.1)
  mov rdi, [rbp-16]
  call has_next_327
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__get_named_type_63__3, .LABEL__get_named_type_63__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_named_type_63__4
.LABEL__get_named_type_63__3:
  .loc 3 73 23
  # named_type.1: @IR_Type = call(next_328, named_types.1)
  mov rdi, [rbp-16]
  call next_328
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:rax 
  .loc 3 74 25
  # $6.1: @String = load_struct_member(named_type.1, name)
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:rax $6.1:rbx 
  .loc 3 74 13
  # $7.1: Boolean = call(equals_341, name.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-25], rax
  call equals_341
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__get_named_type_63__5, .LABEL__get_named_type_63__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_named_type_63__2
.LABEL__get_named_type_63__5:
  .loc 3 75 13
  # return(named_type.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_named_type_63__end
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:[rbp-25] 
  # [discarded value]: named_type.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__get_named_type_63__4:
  .loc 3 78 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_named_type_63__end
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [discarded value]: named_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_type_63__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_type_63__stack_frame_size: .word 32

  .loc 3 81 1
  .text
add_variable_64:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_variable_64__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_variable_64__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 3 82 5
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: variable.1:rsi $1.1:rax 
  .loc 3 82 5
  # $2.1: @List = load_struct_member($1.1, variables)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: variable.1:rsi $2.1:rbx 
  .loc 3 82 5
  # call(prepend_314, $2.1, variable.1)
  mov rdi, rbx
  mov [rbp-8], rsi
  call prepend_314
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-8] 
  .loc 3 83 5
  # return(variable.1)
  mov rax, [rbp-8]
  jmp .LABEL__add_variable_64__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__add_variable_64__end:
  mov rsp, rbp
  pop rbp
  ret

add_variable_64__stack_frame_size: .word 16

  .loc 3 86 1
  .text
get_variable_65:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_65__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_65__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 87 16
  # context.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: name.1:rsi context.1:rax 
  # jump(.LABEL__get_variable_65__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_variable_65__2:
  # context.2: @IR_Builder_Context = phi(context.1, context.4)
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] 
  .loc 3 89 22
  # $2.1: @List = load_struct_member(context.2, variables)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:rax:[rbp-8] $2.1:rbx 
  .loc 3 89 22
  # variables.1: @List_Iterator = call(create_iterator_324, $2.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:rax 
  # jump(.LABEL__get_variable_65__4)
  mov [rbp-24], rax
.LABEL__get_variable_65__4:
  .loc 3 90 16
  # $4.1: Boolean = call(has_next_327, variables.1)
  mov rdi, [rbp-24]
  call has_next_327
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__get_variable_65__5, .LABEL__get_variable_65__6)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_variable_65__6
.LABEL__get_variable_65__5:
  .loc 3 91 25
  # variable.1: @IR_Variable = call(next_328, variables.1)
  mov rdi, [rbp-24]
  call next_328
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:rax 
  .loc 3 92 29
  # $7.1: @String = load_struct_member(variable.1, name)
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:rax $7.1:rbx 
  .loc 3 92 17
  # $8.1: Boolean = call(equals_341, name.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-33], rax
  call equals_341
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__get_variable_65__7, .LABEL__get_variable_65__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__get_variable_65__4
.LABEL__get_variable_65__7:
  .loc 3 93 17
  # return(variable.1)
  mov rax, [rbp-33]
  jmp .LABEL__get_variable_65__end
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] 
  # [discarded value]: variable.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__get_variable_65__6:
  .loc 3 96 19
  # context.4: @IR_Builder_Context = load_struct_member(context.2, parent)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:rbx:[rbp-8] 
  .loc 3 97 13
  # $10.1: Boolean = context.4 == null
  cmp rbx, 0
  sete al
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:rbx:[rbp-8] $10.1:rax 
  # jump($10.1, .LABEL__get_variable_65__10, .LABEL__get_variable_65__2)
  test al, al
  mov [rbp-26], al
  mov [rbp-8], rbx
  jz .LABEL__get_variable_65__2
.LABEL__get_variable_65__10:
  .loc 3 98 13
  # return(null)
  xor rax, rax
  jmp .LABEL__get_variable_65__end
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:[rbp-8] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:[rbp-8] 
  # [discarded value]: context.4
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [discarded value]: variables.1
  # [discarded value]: context.2
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [discarded value]: context.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_variable_65__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_65__stack_frame_size: .word 48

  .loc 3 103 1
  .text
get_variable_value_66:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_66__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_66__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # IR_Global_Variable.5: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:rdi variable.1:rsi IR_Global_Variable.5:rax 
  .loc 3 104 9
  # $1.1: Boolean = call(is_338, variable.1, IR_Global_Variable.5)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Global_Variable.5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__get_variable_value_66__2, .LABEL__get_variable_value_66__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_variable_value_66__3
.LABEL__get_variable_value_66__2:
  .loc 3 105 64
  # $2.1: @IR_Variable_Value = call(create_variable_value_67, self.1, variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 105 28
  # $3.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction_207, $2.1)
  mov rdi, rax
  call create_ir_load_variable_instruction_207
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 105 16
  # $5.1: @IR_Variable_Value = call(append_74, self.1, $3.1, null)
  mov rdi, [rbp-8]
  mov rsi, rax
  xor rdx, rdx
  call append_74
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 3 105 9
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__get_variable_value_66__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__get_variable_value_66__3:
  .loc 3 107 34
  # $6.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $6.1:rbx 
  .loc 3 107 34
  # current_block_instruction.1: @IR_Instruction = load_struct_member($6.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:r15 
  # jump(.LABEL__get_variable_value_66__5)
  mov [rbp-25], r15
.LABEL__get_variable_value_66__5:
  # current_block_instruction.2: @IR_Instruction = phi(current_block_instruction.1, current_block_instruction.7)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] 
  .loc 3 108 12
  # $8.1: Boolean = current_block_instruction.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__get_variable_value_66__6, .LABEL__get_variable_value_66__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_variable_value_66__7
.LABEL__get_variable_value_66__6:
  .loc 3 109 13
  # $9.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $9.1:rbx 
  .loc 3 109 13
  # $11.1: Boolean = $9.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:r15 
  # jump($11.1, .LABEL__get_variable_value_66__8, .LABEL__get_variable_value_66__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__get_variable_value_66__9
.LABEL__get_variable_value_66__8:
  .loc 3 109 63
  # $12.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:rbx 
  .loc 3 109 63
  # $13.1: @IR_Variable = load_struct_member($12.1, variable)
  mov r15, [rbx+32]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $13.1:r15 
  .loc 3 109 63
  # $11.2: Boolean = $13.1 == variable.1
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:rbx:[rbp-27] 
  # jump(.LABEL__get_variable_value_66__9)
  mov [rbp-27], bl
.LABEL__get_variable_value_66__9:
  .loc 3 109 13
  # $11.3: Boolean = phi($11.1, $11.2)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
  # jump($11.3, .LABEL__get_variable_value_66__10, .LABEL__get_variable_value_66__11)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__get_variable_value_66__11
.LABEL__get_variable_value_66__10:
  .loc 3 110 20
  # $15.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] $15.1:rbx 
  .loc 3 110 13
  # return($15.1)
  mov rax, rbx
  mov [rbp-35], rbx
  jmp .LABEL__get_variable_value_66__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
.LABEL__get_variable_value_66__11:
  .loc 3 112 37
  # current_block_instruction.7: @IR_Instruction = load_struct_member(current_block_instruction.2, prev_instruction)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] current_block_instruction.7:rbx:[rbp-25] 
  # jump(.LABEL__get_variable_value_66__5)
  mov [rbp-25], rbx
  jmp .LABEL__get_variable_value_66__5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] current_block_instruction.7:[rbp-25] 
  # [discarded value]: current_block_instruction.7
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
  # [discarded value]: $11.3
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] 
.LABEL__get_variable_value_66__7:
  .loc 3 114 20
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:rbx 
  .loc 3 114 73
  # $18.1: @IR_Variable_Value = call(create_variable_value_67, self.1, variable.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-34], rbx
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:[rbp-34] $18.1:rax 
  .loc 3 114 47
  # $19.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_241, $18.1)
  mov rdi, rax
  call create_ir_phi_instruction_241
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:[rbp-34] $19.1:rax 
  .loc 3 114 20
  # instruction.1: @IR_Instruction = call(prepend_162, $17.1, $19.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call prepend_162
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] instruction.1:rax 
  .loc 3 115 12
  # $21.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $21.1:rbx 
  .loc 3 115 5
  # return($21.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__get_variable_value_66__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] 
  # [discarded value]: current_block_instruction.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] 
  # [discarded value]: current_block_instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: variable.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_variable_value_66__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_66__stack_frame_size: .word 48

  .loc 3 118 1
  .text
create_variable_value_67:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_variable_value_67__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_variable_value_67__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: variable.1:rsi 
  .loc 3 119 41
  # $1.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rsi+16]
  # [live values]: variable.1:rsi $1.1:rax 
  .loc 5 231 47
  # $2.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_variable_value_160)
  lea rbx, dump_ir_variable_value_160[rip]
  # [live values]: variable.1:rsi $1.1:rax $2.1:rbx 
  .loc 5 158 32
  # $3.1: @List = new(List)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov rdi, 24
  call malloc
  # [live values]: variable.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: variable.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: variable.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: variable.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  .loc 3 119 12
  # $4.1: @IR_Variable_Value = new(IR_Variable_Value)
  mov [rbp-32], rax
  mov rdi, 48
  call malloc
  lea rbx, IR_Variable_Value[rip]
  mov [rax], rbx
  # [live values]: variable.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, type, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: variable.1:[rbp-24] $2.1:[rbp-16] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, user_instructions, $3.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $3.1
  # [live values]: variable.1:[rbp-24] $2.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, dump, $2.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-24] $4.1:rax 
  .loc 3 119 12
  # $5.1: @IR_Variable_Value = call(init_159, $4.1, variable.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call init_159
  # [discarded value]: $4.1
  # [discarded value]: variable.1
  # [live values]: $5.1:rax 
  .loc 3 119 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__create_variable_value_67__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__create_variable_value_67__end:
  mov rsp, rbp
  pop rbp
  ret

create_variable_value_67__stack_frame_size: .word 32

  .loc 3 122 1
  .text
get_named_function_68:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_68__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_68__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  .loc 3 123 41
  # $1.1: @String = load_struct_member(name.1, lexeme)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx $1.1:rax 
  .loc 3 123 17
  # function.1: @IR_Function = call(get_named_function_69, self.1, $1.1, argument_types.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdx
  call get_named_function_69
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax 
  .loc 3 124 9
  # $3.1: Boolean = function.1 == null
  cmp rax, 0
  sete bl
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__get_named_function_68__2, .LABEL__get_named_function_68__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__get_named_function_68__3
.LABEL__get_named_function_68__2:
  .loc 3 125 20
  # $4.1: @String = call(clone_340, "Undefined function: ")
  lea rdi, .LABEL__string_179[rip] # "Undefined function: "
  call clone_340
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $4.1:rax 
  .loc 3 125 57
  # $5.1: @String = load_struct_member(name.1, lexeme)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: name.1:rbx:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $4.1:rax $5.1:r15 
  .loc 3 125 20
  # $6.1: @String = call(append_349, $4.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $6.1:rax 
  .loc 3 125 20
  # message.1: @String = call(append_349, $6.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_180[rip] # " :: ("
  call append_349
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:rax 
  .loc 3 126 27
  # argument_types.1: @List_Iterator = call(create_iterator_324, argument_types.1)
  mov rdi, [rbp-16]
  mov [rbp-33], rax
  call create_iterator_324
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:rax 
  # jump(.LABEL__get_named_function_68__4)
  mov [rbp-41], rax
.LABEL__get_named_function_68__4:
  .loc 3 127 16
  # $9.1: Boolean = call(has_next_327, argument_types.1)
  mov rdi, [rbp-41]
  call has_next_327
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:rax 
  # jump($9.1, .LABEL__get_named_function_68__5, .LABEL__get_named_function_68__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_68__6
.LABEL__get_named_function_68__5:
  .loc 3 128 30
  # argument_type.1: @IR_Type = call(next_328, argument_types.1)
  mov rdi, [rbp-41]
  call next_328
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] argument_type.1:rax 
  .loc 3 129 28
  # $12.1: @String = load_struct_member(argument_type.1, name)
  mov rbx, [rax+8]
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $12.1:rbx 
  .loc 3 129 13
  # $13.1: @String = call(append_349, message.1, $12.1)
  mov rdi, [rbp-33]
  mov rsi, rbx
  call append_349
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  .loc 3 130 17
  # $14.1: Boolean = call(has_next_327, argument_types.1)
  mov rdi, [rbp-41]
  call has_next_327
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:rax 
  # jump($14.1, .LABEL__get_named_function_68__7, .LABEL__get_named_function_68__4)
  test al, al
  mov [rbp-43], al
  jz .LABEL__get_named_function_68__4
.LABEL__get_named_function_68__7:
  .loc 3 131 17
  # $15.1: @String = call(append_349, message.1, ", ")
  mov rdi, [rbp-33]
  lea rsi, .LABEL__string_38[rip] # ", "
  call append_349
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # jump(.LABEL__get_named_function_68__4)
  jmp .LABEL__get_named_function_68__4
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [discarded value]: $14.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__get_named_function_68__6:
  .loc 3 134 9
  # $16.1: @String = call(append_349, message.1, ")")
  mov rdi, [rbp-33]
  lea rsi, .LABEL__string_181[rip] # ")"
  call append_349
  # [discarded value]: $16.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  .loc 3 135 15
  # $17.1: @Source_Location = load_struct_member(name.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:rax:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $17.1:rbx 
  .loc 3 135 9
  # call(abort_309, $17.1, message.1)
  mov rdi, rbx
  mov rsi, [rbp-33]
  call abort_309
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] 
  # [discarded value]: argument_types.1
  # [discarded value]: message.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__get_named_function_68__3:
  .loc 3 137 5
  # return(function.1)
  mov rax, [rbp-24]
  jmp .LABEL__get_named_function_68__end
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: function.1
  # [discarded value]: argument_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_68__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_68__stack_frame_size: .word 48

  .loc 3 140 1
  .text
get_named_function_69:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_69__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_69__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  .loc 3 141 5
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx function.1:rax 
  .loc 3 142 24
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi argument_types.1:rdx function.1:rax $1.1:rbx 
  .loc 3 142 24
  # named_functions.1: @List_Iterator = call(create_iterator_324, $1.1)
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_324
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(.LABEL__get_named_function_69__2)
  mov [rbp-32], rax
.LABEL__get_named_function_69__2:
  # function.5: @IR_Function = phi(function.1, function.5, function.3)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  .loc 3 143 12
  # $3.1: Boolean = call(has_next_327, named_functions.1)
  mov rdi, [rbp-32]
  call has_next_327
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_function_69__3, .LABEL__get_named_function_69__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_named_function_69__4
.LABEL__get_named_function_69__3:
  .loc 3 144 27
  # named_function.1: @IR_Function = call(next_328, named_functions.1)
  mov rdi, [rbp-32]
  call next_328
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax 
  .loc 3 145 25
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax $6.1:rbx 
  .loc 3 145 13
  # $7.1: Boolean = call(equals_341, name.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-41], rax
  call equals_341
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:rax 
  # jump($7.1, .LABEL__get_named_function_69__5, .LABEL__get_named_function_69__2)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_69__2
.LABEL__get_named_function_69__5:
  .loc 3 146 13
  # is_match.1: Boolean = true
  mov al, 1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:rax 
  .loc 3 147 31
  # argument_types.1: @List_Iterator = call(create_iterator_324, argument_types.1)
  mov rdi, [rbp-16]
  mov [rbp-43], al
  call create_iterator_324
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:rax 
  .loc 3 148 42
  # $9.1: @List = load_struct_member(named_function.1, parameters)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rbx:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:rax $9.1:r15 
  .loc 3 148 42
  # named_function_parameters.1: @List_Iterator = call(create_iterator_324, $9.1)
  mov rdi, r15
  mov [rbp-51], rax
  call create_iterator_324
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:rax 
  # jump(.LABEL__get_named_function_69__7)
  mov [rbp-59], rax
.LABEL__get_named_function_69__7:
  .loc 3 149 20
  # $12.1: Boolean = call(has_next_327, argument_types.1)
  mov rdi, [rbp-51]
  call has_next_327
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:rax 
  # jump($12.1, .LABEL__get_named_function_69__10, .LABEL__get_named_function_69__11)
  test al, al
  mov [rbp-60], al
  jz .LABEL__get_named_function_69__11
.LABEL__get_named_function_69__10:
  .loc 3 149 49
  # $12.2: Boolean = call(has_next_327, named_function_parameters.1)
  mov rdi, [rbp-59]
  call has_next_327
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:rax:[rbp-60] 
  # jump(.LABEL__get_named_function_69__11)
  mov [rbp-60], al
.LABEL__get_named_function_69__11:
  .loc 3 149 20
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] $12.3:[rbp-60] 
  # jump($12.3, .LABEL__get_named_function_69__8, .LABEL__get_named_function_69__9)
  mov al, [rbp-60]
  test al, al
  jz .LABEL__get_named_function_69__9
.LABEL__get_named_function_69__8:
  .loc 3 150 34
  # argument_type.1: @IR_Type = call(next_328, argument_types.1)
  mov rdi, [rbp-51]
  call next_328
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 151 45
  # named_function_parameter.1: @IR_Function_Parameter = call(next_328, named_function_parameters.1)
  mov rdi, [rbp-59]
  mov [rbp-68], rax
  call next_328
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:[rbp-68] named_function_parameter.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 152 21
  # $18.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  mov rbx, [rax+16]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:[rbp-68] $18.1:rbx $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 152 21
  # $19.1: Boolean = call(accepts_71, $18.1, argument_type.1)
  mov rdi, rbx
  mov rsi, [rbp-68]
  call accepts_71
  # [discarded value]: $18.1
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $19.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 152 21
  # $20.1: Boolean = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:rbx $12.2:[rbp-60] $12.3:[rbp-60] 
  # jump($20.1, .LABEL__get_named_function_69__12, .LABEL__get_named_function_69__7)
  test bl, bl
  mov [rbp-61], bl
  jz .LABEL__get_named_function_69__7
.LABEL__get_named_function_69__12:
  .loc 3 153 21
  # is_match.2: Boolean = false
  mov al, 0
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:rax:[rbp-43] 
  # jump(.LABEL__get_named_function_69__9)
  mov [rbp-43], al
.LABEL__get_named_function_69__9:
  # $21.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-43]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:rax $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # jump($21.1, .LABEL__get_named_function_69__17, .LABEL__get_named_function_69__18)
  test al, al
  mov [rbp-62], al
  jz .LABEL__get_named_function_69__18
.LABEL__get_named_function_69__17:
  .loc 3 157 29
  # $22.1: Boolean = call(has_next_327, argument_types.1)
  mov rdi, [rbp-51]
  call has_next_327
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $22.1:rax 
  .loc 3 157 29
  # $21.2: Boolean = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:rbx:[rbp-62] 
  # jump(.LABEL__get_named_function_69__18)
  mov [rbp-62], bl
.LABEL__get_named_function_69__18:
  .loc 3 157 17
  # $24.1: Boolean = phi($21.1, $21.2)
  mov al, [rbp-62]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:rax 
  # jump($24.1, .LABEL__get_named_function_69__15, .LABEL__get_named_function_69__16)
  test al, al
  mov [rbp-63], al
  jz .LABEL__get_named_function_69__16
.LABEL__get_named_function_69__15:
  .loc 3 157 67
  # $25.1: Boolean = call(has_next_327, named_function_parameters.1)
  mov rdi, [rbp-59]
  call has_next_327
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $25.1:rax $21.2:[rbp-62] $24.1:[rbp-63] 
  .loc 3 157 67
  # $24.2: Boolean = $25.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:rbx:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # jump(.LABEL__get_named_function_69__16)
  mov [rbp-63], bl
.LABEL__get_named_function_69__16:
  .loc 3 157 17
  # $24.3: Boolean = phi($24.1, $24.2)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # jump($24.3, .LABEL__get_named_function_69__19, .LABEL__get_named_function_69__2)
  mov al, [rbp-63]
  test al, al
  jz .LABEL__get_named_function_69__2
.LABEL__get_named_function_69__19:
  .loc 3 158 21
  # $27.1: Boolean = function.5 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:rax 
  # jump($27.1, .LABEL__get_named_function_69__21, .LABEL__get_named_function_69__22)
  test al, al
  mov [rbp-64], al
  jz .LABEL__get_named_function_69__22
.LABEL__get_named_function_69__21:
  .loc 3 159 21
  # call(abort_337, name.1)
  mov rdi, [rbp-24]
  call abort_337
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] 
.LABEL__get_named_function_69__22:
  .loc 3 161 17
  # function.3: @IR_Function = named_function.1
  mov rax, [rbp-41]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] function.3:rax:[rbp-8] 
  # jump(.LABEL__get_named_function_69__2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_69__2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] 
  # [discarded value]: $27.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] 
  # [discarded value]: $21.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: $21.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] 
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] $12.3:[rbp-60] 
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [discarded value]: named_function_parameters.1
  # [discarded value]: argument_types.1
  # [discarded value]: is_match.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] 
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
.LABEL__get_named_function_69__4:
  .loc 3 165 5
  # return(function.5)
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_69__end
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: named_functions.1
  # [discarded value]: function.1
  # [discarded value]: argument_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_69__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_69__stack_frame_size: .word 80

  .loc 3 168 1
  .text
get_named_function_70:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_70__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_70__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # function_type.1: @IR_Function_Type = load_variable(function_type)
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx 
  .loc 3 169 5
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx function.1:rax 
  .loc 3 170 24
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi function_type.1:rdx function.1:rax $1.1:rbx 
  .loc 3 170 24
  # named_functions.1: @List_Iterator = call(create_iterator_324, $1.1)
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_324
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(.LABEL__get_named_function_70__2)
  mov [rbp-32], rax
.LABEL__get_named_function_70__2:
  # function.5: @IR_Function = phi(function.1, function.3, function.5)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  .loc 3 171 12
  # $3.1: Boolean = call(has_next_327, named_functions.1)
  mov rdi, [rbp-32]
  call has_next_327
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_function_70__3, .LABEL__get_named_function_70__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_named_function_70__4
.LABEL__get_named_function_70__3:
  .loc 3 172 27
  # named_function.1: @IR_Function = call(next_328, named_functions.1)
  mov rdi, [rbp-32]
  call next_328
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax 
  .loc 3 173 25
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax $6.1:rbx 
  .loc 3 173 13
  # $8.1: Boolean = call(equals_341, name.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-41], rax
  call equals_341
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:rax 
  # jump($8.1, .LABEL__get_named_function_70__7, .LABEL__get_named_function_70__8)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_70__8
.LABEL__get_named_function_70__7:
  .loc 3 173 49
  # $9.1: @IR_Type = load_struct_member(named_function.1, return_type)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $9.1:rbx 
  .loc 3 173 83
  # $10.1: @IR_Type = load_struct_member(function_type.1, return_type)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: name.1:[rbp-24] function_type.1:r15:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $9.1:rbx $10.1:r14 
  .loc 3 173 49
  # $8.2: Boolean = call(equals_144, $9.1, $10.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_144
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:rax:[rbp-42] 
  # jump(.LABEL__get_named_function_70__8)
  mov [rbp-42], al
.LABEL__get_named_function_70__8:
  .loc 3 173 13
  # $12.1: Boolean = phi($8.1, $8.2)
  mov al, [rbp-42]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:rax 
  # jump($12.1, .LABEL__get_named_function_70__5, .LABEL__get_named_function_70__6)
  test al, al
  mov [rbp-43], al
  jz .LABEL__get_named_function_70__6
.LABEL__get_named_function_70__5:
  .loc 3 173 113
  # $13.1: @List = load_struct_member(named_function.1, parameters)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $13.1:rbx $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 173 113
  # $14.1: Int = load_struct_member($13.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 173 147
  # $15.1: @List = load_struct_member(function_type.1, parameters)
  mov rbx, [rbp-16]
  mov r14, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $15.1:r14 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 173 147
  # $16.1: Int = load_struct_member($15.1, size)
  mov r13, [r14+16]
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $16.1:r13 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 173 113
  # $12.2: Boolean = $14.1 == $16.1
  cmp r15, r13
  sete r14b
  # [discarded value]: $16.1
  # [discarded value]: $14.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $12.2:r14:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # jump(.LABEL__get_named_function_70__6)
  mov [rbp-43], r14b
.LABEL__get_named_function_70__6:
  .loc 3 173 13
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # jump($12.3, .LABEL__get_named_function_70__9, .LABEL__get_named_function_70__2)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__get_named_function_70__2
.LABEL__get_named_function_70__9:
  .loc 3 174 13
  # is_match.1: Boolean = true
  mov al, 1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:rax 
  .loc 3 175 41
  # $18.1: @List = load_struct_member(function_type.1, parameters)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:rax $18.1:r15 
  .loc 3 175 41
  # function_type_parameters.1: @List_Iterator = call(create_iterator_324, $18.1)
  mov rdi, r15
  mov [rbp-44], al
  call create_iterator_324
  # [discarded value]: $18.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:rax 
  .loc 3 176 42
  # $20.1: @List = load_struct_member(named_function.1, parameters)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rbx:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:rax $20.1:r15 
  .loc 3 176 42
  # named_function_parameters.1: @List_Iterator = call(create_iterator_324, $20.1)
  mov rdi, r15
  mov [rbp-52], rax
  call create_iterator_324
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:rax 
  # jump(.LABEL__get_named_function_70__11)
  mov [rbp-60], rax
.LABEL__get_named_function_70__11:
  .loc 3 177 20
  # $23.1: Boolean = call(has_next_327, function_type_parameters.1)
  mov rdi, [rbp-52]
  call has_next_327
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:rax 
  # jump($23.1, .LABEL__get_named_function_70__14, .LABEL__get_named_function_70__15)
  test al, al
  mov [rbp-61], al
  jz .LABEL__get_named_function_70__15
.LABEL__get_named_function_70__14:
  .loc 3 177 59
  # $23.2: Boolean = call(has_next_327, named_function_parameters.1)
  mov rdi, [rbp-60]
  call has_next_327
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:rax:[rbp-61] 
  # jump(.LABEL__get_named_function_70__15)
  mov [rbp-61], al
.LABEL__get_named_function_70__15:
  .loc 3 177 20
  # $23.3: Boolean = phi($23.1, $23.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] $23.3:[rbp-61] 
  # jump($23.3, .LABEL__get_named_function_70__12, .LABEL__get_named_function_70__13)
  mov al, [rbp-61]
  test al, al
  jz .LABEL__get_named_function_70__13
.LABEL__get_named_function_70__12:
  .loc 3 178 44
  # function_type_parameter.1: @IR_Function_Type_Parameter = call(next_328, function_type_parameters.1)
  mov rdi, [rbp-52]
  call next_328
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 179 45
  # named_function_parameter.1: @IR_Function_Parameter = call(next_328, named_function_parameters.1)
  mov rdi, [rbp-60]
  mov [rbp-69], rax
  call next_328
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:[rbp-69] named_function_parameter.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 180 21
  # $29.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  mov rbx, [rax+16]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:[rbp-69] $29.1:rbx $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 180 58
  # $30.1: @IR_Type = load_struct_member(function_type_parameter.1, type)
  mov rax, [rbp-69]
  mov r15, [rax+8]
  # [discarded value]: function_type_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $29.1:rbx $30.1:r15 $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 180 21
  # $31.1: Boolean = call(equals_144, $29.1, $30.1)
  mov rdi, rbx
  mov rsi, r15
  call equals_144
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 180 21
  # $32.1: Boolean = $31.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:rbx $23.2:[rbp-61] $23.3:[rbp-61] 
  # jump($32.1, .LABEL__get_named_function_70__16, .LABEL__get_named_function_70__11)
  test bl, bl
  mov [rbp-62], bl
  jz .LABEL__get_named_function_70__11
.LABEL__get_named_function_70__16:
  .loc 3 181 21
  # is_match.2: Boolean = false
  mov al, 0
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:rax:[rbp-44] 
  # jump(.LABEL__get_named_function_70__13)
  mov [rbp-44], al
.LABEL__get_named_function_70__13:
  # $33.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-44]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:rax $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # jump($33.1, .LABEL__get_named_function_70__21, .LABEL__get_named_function_70__22)
  test al, al
  mov [rbp-63], al
  jz .LABEL__get_named_function_70__22
.LABEL__get_named_function_70__21:
  .loc 3 185 29
  # $34.1: Boolean = call(has_next_327, function_type_parameters.1)
  mov rdi, [rbp-52]
  call has_next_327
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $34.1:rax 
  .loc 3 185 29
  # $33.2: Boolean = $34.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:rbx:[rbp-63] 
  # jump(.LABEL__get_named_function_70__22)
  mov [rbp-63], bl
.LABEL__get_named_function_70__22:
  .loc 3 185 17
  # $36.1: Boolean = phi($33.1, $33.2)
  mov al, [rbp-63]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] $36.1:rax 
  # jump($36.1, .LABEL__get_named_function_70__19, .LABEL__get_named_function_70__20)
  test al, al
  mov [rbp-64], al
  jz .LABEL__get_named_function_70__20
.LABEL__get_named_function_70__19:
  .loc 3 185 77
  # $37.1: Boolean = call(has_next_327, named_function_parameters.1)
  mov rdi, [rbp-60]
  call has_next_327
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $37.1:rax $33.2:[rbp-63] $36.1:[rbp-64] 
  .loc 3 185 77
  # $36.2: Boolean = $37.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $37.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:rbx:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # jump(.LABEL__get_named_function_70__20)
  mov [rbp-64], bl
.LABEL__get_named_function_70__20:
  .loc 3 185 17
  # $36.3: Boolean = phi($36.1, $36.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # jump($36.3, .LABEL__get_named_function_70__23, .LABEL__get_named_function_70__2)
  mov al, [rbp-64]
  test al, al
  jz .LABEL__get_named_function_70__2
.LABEL__get_named_function_70__23:
  .loc 3 186 21
  # $39.1: Boolean = function.5 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:rax 
  # jump($39.1, .LABEL__get_named_function_70__25, .LABEL__get_named_function_70__26)
  test al, al
  mov [rbp-65], al
  jz .LABEL__get_named_function_70__26
.LABEL__get_named_function_70__25:
  .loc 3 187 21
  # call(abort_337, name.1)
  mov rdi, [rbp-24]
  call abort_337
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] 
.LABEL__get_named_function_70__26:
  .loc 3 189 17
  # function.3: @IR_Function = named_function.1
  mov rax, [rbp-41]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] function.3:rax:[rbp-8] 
  # jump(.LABEL__get_named_function_70__2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_70__2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] 
  # [discarded value]: $39.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [discarded value]: $36.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [discarded value]: $36.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [discarded value]: $36.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] 
  # [discarded value]: $33.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [discarded value]: $33.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] 
  # [discarded value]: $32.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] $23.3:[rbp-61] 
  # [discarded value]: $23.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] 
  # [discarded value]: $23.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] 
  # [discarded value]: $23.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] 
  # [discarded value]: named_function_parameters.1
  # [discarded value]: function_type_parameters.1
  # [discarded value]: is_match.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] 
  # [discarded value]: $8.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
.LABEL__get_named_function_70__4:
  .loc 3 193 5
  # return(function.5)
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_70__end
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: named_functions.1
  # [discarded value]: function.1
  # [discarded value]: function_type.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_70__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_70__stack_frame_size: .word 80

  .loc 3 196 1
  .text
accepts_71:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_71__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_71__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 3 197 9
  # $2.1: Boolean = self.1 == other.1
  cmp rdi, rsi
  sete al
  # [live values]: self.1:rdi other.1:rsi $2.1:rax 
  # jump($2.1, .LABEL__accepts_71__3, .LABEL__accepts_71__2)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__accepts_71__2
.LABEL__accepts_71__3:
  .loc 3 197 9
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # jump($2.3, .LABEL__accepts_71__4, .LABEL__accepts_71__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__accepts_71__5
.LABEL__accepts_71__4:
  .loc 3 198 9
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
.LABEL__accepts_71__5:
  # IR_Pointer_Type.7: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] IR_Pointer_Type.7:rax 
  .loc 3 200 9
  # $4.1: Boolean = call(is_338, self.1, IR_Pointer_Type.7)
  mov rdi, [rbp-17]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.7
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__accepts_71__7, .LABEL__accepts_71__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_71__8
.LABEL__accepts_71__7:
  .loc 3 201 17
  # self.1: @IR_Pointer_Type = self.1
  mov rax, [rbp-17]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax 
  .loc 3 202 13
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax $6.1:rbx 
  # IR_Pointer_Type.8: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax $6.1:rbx IR_Pointer_Type.8:r15 
  .loc 3 202 13
  # $7.1: Boolean = call(is_338, $6.1, IR_Pointer_Type.8)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-26], rax
  call is_338
  # [discarded value]: IR_Pointer_Type.8
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__accepts_71__9, .LABEL__accepts_71__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__accepts_71__10
.LABEL__accepts_71__9:
  .loc 3 203 13
  # stop.1: Boolean = true
  mov al, 1
  # [discarded value]: stop.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # jump(.LABEL__accepts_71__10)
.LABEL__accepts_71__10:
  # IR_Pointer_Type.9: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] IR_Pointer_Type.9:rax 
  .loc 3 205 13
  # $8.1: Boolean = call(is_338, other.1, IR_Pointer_Type.9)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.9
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # jump($8.1, .LABEL__accepts_71__11, .LABEL__accepts_71__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__accepts_71__12
.LABEL__accepts_71__11:
  .loc 3 206 22
  # other.1: @IR_Pointer_Type = other.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax 
  .loc 3 207 17
  # $10.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rbx, [rbp-26]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $10.1:r15 
  .loc 3 207 38
  # $11.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov r14, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $10.1:r15 $11.1:r14 
  .loc 3 207 17
  # $12.1: Boolean = $10.1 == $11.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $12.1:r13 
  # jump($12.1, .LABEL__accepts_71__13, .LABEL__accepts_71__14)
  test r13b, r13b
  mov [rbp-36], rax
  mov [rbp-37], r13b
  jz .LABEL__accepts_71__14
.LABEL__accepts_71__13:
  .loc 3 208 17
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] 
.LABEL__accepts_71__14:
  .loc 3 210 17
  # $13.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $13.1:rbx 
  # IR_Any_Type.2: @Object_Type = load_variable(IR_Any_Type)
  lea r15, IR_Any_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $13.1:rbx IR_Any_Type.2:r15 
  .loc 3 210 17
  # $14.1: Boolean = call(is_338, $13.1, IR_Any_Type.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Any_Type.2
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:rax 
  # jump($14.1, .LABEL__accepts_71__16, .LABEL__accepts_71__17)
  test al, al
  mov [rbp-38], al
  jz .LABEL__accepts_71__17
.LABEL__accepts_71__16:
  .loc 3 211 17
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] 
.LABEL__accepts_71__17:
  .loc 3 213 17
  # $15.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $15.1:rbx 
  # IR_Struct_Type.8: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $15.1:rbx IR_Struct_Type.8:r15 
  .loc 3 213 17
  # $17.1: Boolean = call(is_338, $15.1, IR_Struct_Type.8)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.8
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:rax 
  # jump($17.1, .LABEL__accepts_71__19, .LABEL__accepts_71__20)
  test al, al
  mov [rbp-39], al
  jz .LABEL__accepts_71__20
.LABEL__accepts_71__19:
  .loc 3 213 57
  # $18.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov rax, [rbp-36]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $18.1:rbx 
  # IR_Struct_Type.9: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $18.1:rbx IR_Struct_Type.9:r15 
  .loc 3 213 57
  # $17.2: Boolean = call(is_338, $18.1, IR_Struct_Type.9)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.9
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:rax:[rbp-39] 
  # jump(.LABEL__accepts_71__20)
  mov [rbp-39], al
.LABEL__accepts_71__20:
  .loc 3 213 17
  # $17.3: Boolean = phi($17.1, $17.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
  # jump($17.3, .LABEL__accepts_71__21, .LABEL__accepts_71__22)
  mov al, [rbp-39]
  test al, al
  jz .LABEL__accepts_71__22
.LABEL__accepts_71__21:
  .loc 3 214 25
  # $21.1: @IR_Struct_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $21.1:rbx 
  .loc 3 214 76
  # $23.1: @IR_Struct_Type = load_struct_member(other.1, pointed_type)
  mov r15, [rbp-36]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:r15:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $21.1:rbx $23.1:r14 
  .loc 3 214 24
  # $24.1: Boolean = call(is_base_type_151, $21.1, $23.1)
  mov rdi, rbx
  mov rsi, r14
  call is_base_type_151
  # [discarded value]: $23.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $24.1:rax 
  .loc 3 214 17
  # return($24.1)
  mov [rbp-40], al
  jmp .LABEL__accepts_71__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
.LABEL__accepts_71__22:
  .loc 3 216 20
  # $25.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $25.1:rbx 
  .loc 3 216 46
  # $26.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov r15, [rbp-36]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:r15:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $25.1:rbx $26.1:r14 
  .loc 3 216 20
  # $27.1: Boolean = call(accepts_71, $25.1, $26.1)
  mov rdi, rbx
  mov rsi, r14
  call accepts_71
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $27.1:rax 
  .loc 3 216 13
  # return($27.1)
  mov [rbp-40], al
  jmp .LABEL__accepts_71__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
  # [discarded value]: $17.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] 
  # [discarded value]: $17.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] 
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] 
.LABEL__accepts_71__12:
  # IR_Null_Type.4: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] IR_Null_Type.4:rax 
  .loc 3 218 13
  # $28.1: Boolean = call(is_338, other.1, IR_Null_Type.4)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Null_Type.4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:rax 
  # jump($28.1, .LABEL__accepts_71__25, .LABEL__accepts_71__26)
  test al, al
  mov [rbp-29], al
  jz .LABEL__accepts_71__26
.LABEL__accepts_71__25:
  .loc 3 219 13
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:[rbp-29] 
.LABEL__accepts_71__26:
  .loc 3 221 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:[rbp-29] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] 
.LABEL__accepts_71__8:
  # IR_Function_Type.6: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] IR_Function_Type.6:rax 
  .loc 3 223 9
  # $29.1: Boolean = call(is_338, self.1, IR_Function_Type.6)
  mov rdi, [rbp-17]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Function_Type.6
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:rax 
  # jump($29.1, .LABEL__accepts_71__29, .LABEL__accepts_71__30)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_71__30
.LABEL__accepts_71__29:
  # IR_Null_Type.5: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] IR_Null_Type.5:rax 
  .loc 3 224 13
  # $30.1: Boolean = call(is_338, other.1, IR_Null_Type.5)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Null_Type.5
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:rax 
  # jump($30.1, .LABEL__accepts_71__31, .LABEL__accepts_71__30)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_71__30
.LABEL__accepts_71__31:
  .loc 3 225 13
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] 
.LABEL__accepts_71__30:
  .loc 3 228 5
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_71__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_71__2:
  # IR_Undefined_Type.2: @Object_Type = load_variable(IR_Undefined_Type)
  lea rax, IR_Undefined_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] IR_Undefined_Type.2:rax 
  .loc 3 197 26
  # $2.2: Boolean = call(is_338, other.1, IR_Undefined_Type.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Undefined_Type.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(.LABEL__accepts_71__3)
  mov [rbp-1], al
  jmp .LABEL__accepts_71__3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__accepts_71__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_71__stack_frame_size: .word 48

  .loc 3 231 1
  .text
create_temp_variable_72:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_variable_72__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_variable_72__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 232 35
  # $1.1: @String = call(clone_340, "$")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_182[rip] # "$"
  mov [rbp-16], rsi
  call clone_340
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  .loc 3 232 53
  # $2.1: @Counter = load_struct_member(self.1, counter)
  mov rbx, [rbp-8]
  mov r15, [rbx+48]
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 3 232 53
  # $3.1: Int = call(next_142, $2.1)
  mov rdi, r15
  mov [rbp-24], rax
  call next_142
  # [discarded value]: $2.1
  # [live values]: type.1:[rbp-16] $1.1:[rbp-24] $3.1:rax 
  .loc 3 232 35
  # $4.1: @String = call(append_348, $1.1, $3.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_348
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-16] $4.1:rax 
  .loc 5 389 21
  # $5.1: @List = new(List)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  .loc 3 232 12
  # $6.1: @IR_Variable = new(IR_Variable)
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Variable[rip]
  mov [rax], rbx
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name, $4.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: type.1:[rbp-16] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, type, type.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: type.1
  # [live values]: $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, values, $5.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 3 232 5
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__create_temp_variable_72__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__create_temp_variable_72__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_variable_72__stack_frame_size: .word 32

  .loc 3 235 1
  .text
create_temp_value_73:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_value_73__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_value_73__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 236 39
  # $1.1: @IR_Variable = call(create_temp_variable_72, self.1, type.1)
  mov [rbp-8], rdi
  call create_temp_variable_72
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 3 236 12
  # $2.1: @IR_Variable_Value = call(create_variable_value_67, self.1, $1.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_variable_value_67
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 3 236 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_temp_value_73__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_temp_value_73__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_value_73__stack_frame_size: .word 16

  .loc 3 239 1
  .text
append_74:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_74__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_74__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi instruction.1:rsi location.1:rdx 
  .loc 3 240 5
  # store_struct_member(instruction.1, location, location.1)
  mov QWORD PTR [rsi+8], rdx
  # [discarded value]: location.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 3 241 5
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: instruction.1:rsi $1.1:rax 
  .loc 3 241 5
  # $2.1: @IR_Instruction = call(append_163, $1.1, instruction.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call append_163
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] 
  .loc 3 242 12
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rbx 
  .loc 3 242 5
  # return($3.1)
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__append_74__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__append_74__end:
  mov rsp, rbp
  pop rbp
  ret

append_74__stack_frame_size: .word 16

  .loc 3 245 1
  .text
build_75:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_75__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_75__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 3 246 14
  # $1.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 246 14
  # $2.1: @List = load_struct_member($1.1, types)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 3 246 14
  # types.1: @List_Iterator = call(create_iterator_324, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:rax 
  # jump(.LABEL__build_75__2)
  mov [rbp-16], rax
.LABEL__build_75__2:
  .loc 3 247 12
  # $4.1: Boolean = call(has_next_327, types.1)
  mov rdi, [rbp-16]
  call has_next_327
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:rax 
  # jump($4.1, .LABEL__build_75__3, .LABEL__build_75__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__build_75__4
.LABEL__build_75__3:
  .loc 3 248 22
  # statement.1: @AST_Statement = call(next_328, types.1)
  mov rdi, [rbp-16]
  call next_328
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] statement.1:rax 
  .loc 3 249 9
  # $7.1: @IR_Type = call(convert_type_statement_76, self.1, statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_type_statement_76
  # [discarded value]: $7.1
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
  # jump(.LABEL__build_75__2)
  jmp .LABEL__build_75__2
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__build_75__4:
  .loc 3 252 25
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] $8.1:rbx 
  .loc 3 252 25
  # $9.1: @List = load_struct_member($8.1, global_variables)
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] $9.1:r15 
  .loc 3 252 25
  # global_variables.1: @List_Iterator = call(create_iterator_324, $9.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:rax 
  # jump(.LABEL__build_75__5)
  mov [rbp-25], rax
.LABEL__build_75__5:
  .loc 3 253 12
  # $11.1: Boolean = call(has_next_327, global_variables.1)
  mov rdi, [rbp-25]
  call has_next_327
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__build_75__6, .LABEL__build_75__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__build_75__7
.LABEL__build_75__6:
  .loc 3 254 31
  # variable_statement.1: @AST_Variable_Statement = call(next_328, global_variables.1)
  mov rdi, [rbp-25]
  call next_328
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] variable_statement.1:rax 
  .loc 3 255 9
  # call(create_global_variable_83, self.1, variable_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_global_variable_83
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
  # jump(.LABEL__build_75__5)
  jmp .LABEL__build_75__5
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__build_75__7:
  .loc 3 258 18
  # $14.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] $14.1:rbx 
  .loc 3 258 18
  # $15.1: @List = load_struct_member($14.1, functions)
  mov r15, [rbx+24]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] $15.1:r15 
  .loc 3 258 18
  # functions.1: @List_Iterator = call(create_iterator_324, $15.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:rax 
  # jump(.LABEL__build_75__8)
  mov [rbp-34], rax
.LABEL__build_75__8:
  .loc 3 259 12
  # $17.1: Boolean = call(has_next_327, functions.1)
  mov rdi, [rbp-34]
  call has_next_327
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:rax 
  # jump($17.1, .LABEL__build_75__9, .LABEL__build_75__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__build_75__10
.LABEL__build_75__9:
  .loc 3 260 31
  # function_statement.1: @AST_Function_Statement = call(next_328, functions.1)
  mov rdi, [rbp-34]
  call next_328
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] function_statement.1:rax 
  .loc 3 261 9
  # $20.1: @IR_Function = call(create_function_84, self.1, function_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_function_84
  # [discarded value]: $20.1
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__build_75__8)
  jmp .LABEL__build_75__8
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__build_75__10:
  .loc 3 264 18
  # $21.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] $21.1:rbx 
  .loc 3 264 18
  # $22.1: @List = load_struct_member($21.1, functions)
  mov r15, [rbx+24]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] $22.1:r15 
  .loc 3 264 18
  # functions.1: @List_Iterator = call(create_iterator_324, $22.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:rax 
  # jump(.LABEL__build_75__11)
  mov [rbp-43], rax
.LABEL__build_75__11:
  .loc 3 265 12
  # $24.1: Boolean = call(has_next_327, functions.1)
  mov rdi, [rbp-43]
  call has_next_327
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:rax 
  # jump($24.1, .LABEL__build_75__12, .LABEL__build_75__13)
  test al, al
  mov [rbp-44], al
  jz .LABEL__build_75__13
.LABEL__build_75__12:
  .loc 3 266 31
  # function_statement.1: @AST_Function_Statement = call(next_328, functions.1)
  mov rdi, [rbp-43]
  call next_328
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] function_statement.1:rax 
  .loc 3 267 9
  # call(build_function_85, self.1, function_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call build_function_85
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
  # jump(.LABEL__build_75__11)
  jmp .LABEL__build_75__11
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
.LABEL__build_75__13:
  # return()
  jmp .LABEL__build_75__end
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] 
  # [discarded value]: global_variables.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [discarded value]: types.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__build_75__end:
  mov rsp, rbp
  pop rbp
  ret

build_75__stack_frame_size: .word 48

  .loc 3 271 1
  .text
convert_type_statement_76:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_type_statement_76__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_type_statement_76__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # AST_Struct_Statement.2: @Object_Type = load_variable(AST_Struct_Statement)
  lea rax, AST_Struct_Statement[rip]
  # [live values]: self.1:rdi statement.1:rsi AST_Struct_Statement.2:rax 
  .loc 3 272 9
  # $1.1: Boolean = call(is_338, statement.1, AST_Struct_Statement.2)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Struct_Statement.2
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_type_statement_76__2, .LABEL__convert_type_statement_76__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_type_statement_76__3
.LABEL__convert_type_statement_76__2:
  .loc 3 273 46
  # $2.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 273 16
  # $3.1: @IR_Type = call(convert_struct_statement_77, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_struct_statement_77
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 273 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_type_statement_76__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_type_statement_76__3:
  .loc 3 275 11
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:rbx 
  .loc 3 275 31
  # $5.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:rbx $5.1:r15 
  .loc 3 275 5
  # call(abort_141, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_type_statement_76__end:
  mov rsp, rbp
  pop rbp
  ret

convert_type_statement_76__stack_frame_size: .word 32

  .loc 3 278 1
  .text
convert_struct_statement_77:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_statement_77__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_statement_77__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_statement.1: @AST_Struct_Statement = load_variable(struct_statement)
  # [live values]: self.1:rdi struct_statement.1:rsi 
  .loc 3 279 20
  # $1.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi struct_statement.1:rsi $1.1:rax 
  .loc 3 279 20
  # struct_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi struct_statement.1:rsi struct_name.1:rbx 
  .loc 3 280 13
  # type.1: @IR_Type = call(get_named_type_63, self.1, struct_name.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax 
  .loc 3 281 9
  # $4.1: Boolean = type.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_struct_statement_77__2, .LABEL__convert_struct_statement_77__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_struct_statement_77__3
.LABEL__convert_struct_statement_77__2:
  # IR_Struct_Type.10: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] IR_Struct_Type.10:rax 
  .loc 3 282 13
  # $6.1: Boolean = call(is_338, type.1, IR_Struct_Type.10)
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Struct_Type.10
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:rax 
  # jump($6.1, .LABEL__convert_struct_statement_77__4, .LABEL__convert_struct_statement_77__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_struct_statement_77__5
.LABEL__convert_struct_statement_77__4:
  .loc 3 282 41
  # $7.1: @IR_Struct_Type = type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $7.1:rax 
  .loc 3 282 40
  # $8.1: @AST_Struct_Statement = load_struct_member($7.1, statement)
  mov rbx, [rax+32]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $8.1:rbx 
  .loc 3 282 40
  # $6.2: Boolean = $8.1 == struct_statement.1
  cmp rbx, QWORD PTR [rbp-8]
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:rax:[rbp-34] 
  # jump(.LABEL__convert_struct_statement_77__5)
  mov [rbp-34], al
.LABEL__convert_struct_statement_77__5:
  .loc 3 282 13
  # $6.3: Boolean = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # jump($6.3, .LABEL__convert_struct_statement_77__6, .LABEL__convert_struct_statement_77__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_struct_statement_77__7
.LABEL__convert_struct_statement_77__6:
  .loc 3 283 13
  # return(type.1)
  mov rax, [rbp-32]
  jmp .LABEL__convert_struct_statement_77__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
.LABEL__convert_struct_statement_77__7:
  .loc 3 285 15
  # $10.1: @Source_Location = load_struct_member(struct_statement.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $10.1:rbx 
  .loc 3 285 42
  # $11.1: @String = call(clone_340, "Duplicate type declaration: ")
  lea rdi, .LABEL__string_183[rip] # "Duplicate type declaration: "
  mov [rbp-42], rbx
  call clone_340
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $10.1:[rbp-42] $11.1:rax 
  .loc 3 285 42
  # $12.1: @String = call(append_349, $11.1, struct_name.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_349
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $10.1:[rbp-42] $12.1:rax 
  .loc 3 285 9
  # call(abort_309, $10.1, $12.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_309
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_struct_statement_77__3:
  .loc 3 287 13
  # type.1: @IR_Struct_Type = call(create_ir_struct_type_148, struct_name.1, struct_statement.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_ir_struct_type_148
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rax 
  .loc 3 288 5
  # $14.1: @List = load_struct_member(self.1, named_types)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rax $14.1:r15 
  .loc 3 288 5
  # call(append_313, $14.1, type.1)
  mov rdi, r15
  mov rsi, rax
  mov [rbp-41], rax
  call append_313
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] 
  .loc 3 289 9
  # $15.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $15.1:rbx 
  .loc 3 289 9
  # $16.1: Boolean = $15.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:r15 
  # jump($16.1, .LABEL__convert_struct_statement_77__9, .LABEL__convert_struct_statement_77__10)
  test r15b, r15b
  mov [rbp-42], r15b
  jz .LABEL__convert_struct_statement_77__10
.LABEL__convert_struct_statement_77__9:
  .loc 3 290 46
  # $17.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] $17.1:rbx 
  .loc 3 290 22
  # base_type.1: @IR_Type = call(convert_value_type_78, self.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call convert_value_type_78
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:rax 
  # IR_Struct_Type.11: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:rax IR_Struct_Type.11:rbx 
  .loc 3 291 14
  # $19.1: Boolean = call(is_338, base_type.1, IR_Struct_Type.11)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-50], rax
  call is_338
  # [discarded value]: IR_Struct_Type.11
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:rax 
  .loc 3 291 13
  # $20.1: Boolean = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:rbx 
  # jump($20.1, .LABEL__convert_struct_statement_77__11, .LABEL__convert_struct_statement_77__12)
  test bl, bl
  mov [rbp-51], bl
  jz .LABEL__convert_struct_statement_77__12
.LABEL__convert_struct_statement_77__11:
  .loc 3 292 19
  # $21.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $21.1:rbx 
  .loc 3 292 19
  # $22.1: @Source_Location = load_struct_member($21.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $22.1:r15 
  .loc 3 292 13
  # call(abort_309, $22.1, "Not a struct type.")
  mov rdi, r15
  lea rsi, .LABEL__string_184[rip] # "Not a struct type."
  call abort_309
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
.LABEL__convert_struct_statement_77__12:
  .loc 3 294 26
  # $23.1: @IR_Struct_Type = base_type.1
  mov rax, [rbp-50]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $23.1:rax 
  .loc 3 294 9
  # store_struct_member(type.1, base_type, $23.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rbx:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
  # jump(.LABEL__convert_struct_statement_77__10)
.LABEL__convert_struct_statement_77__10:
  .loc 3 296 9
  # $24.1: @List = load_struct_member(struct_statement.1, members)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $24.1:rbx 
  .loc 3 296 9
  # $25.1: Boolean = $24.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:r15 
  # jump($25.1, .LABEL__convert_struct_statement_77__13, .LABEL__convert_struct_statement_77__14)
  test r15b, r15b
  mov [rbp-52], r15b
  jz .LABEL__convert_struct_statement_77__14
.LABEL__convert_struct_statement_77__13:
  .loc 3 297 27
  # $26.1: @List = load_struct_member(struct_statement.1, members)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] $26.1:rbx 
  .loc 3 297 27
  # struct_members.1: @List_Iterator = call(create_iterator_324, $26.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:rax 
  # jump(.LABEL__convert_struct_statement_77__15)
  mov [rbp-60], rax
.LABEL__convert_struct_statement_77__15:
  .loc 3 298 16
  # $28.1: Boolean = call(has_next_327, struct_members.1)
  mov rdi, [rbp-60]
  call has_next_327
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:rax 
  # jump($28.1, .LABEL__convert_struct_statement_77__16, .LABEL__convert_struct_statement_77__14)
  test al, al
  mov [rbp-61], al
  jz .LABEL__convert_struct_statement_77__14
.LABEL__convert_struct_statement_77__16:
  .loc 3 299 30
  # struct_member.1: @AST_Struct_Member = call(next_328, struct_members.1)
  mov rdi, [rbp-60]
  call next_328
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member.1:rax 
  .loc 3 300 35
  # $31.1: @Identifier_Token = load_struct_member(struct_member.1, name)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member.1:rax $31.1:rbx 
  .loc 3 300 35
  # struct_member_name.1: @String = load_struct_member($31.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member.1:rax struct_member_name.1:r15 
  .loc 3 301 59
  # $33.1: @AST_Type = load_struct_member(struct_member.1, type)
  mov rbx, [rax+16]
  # [discarded value]: struct_member.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member_name.1:r15 $33.1:rbx 
  .loc 3 301 35
  # struct_member_type.1: @IR_Type = call(convert_value_type_78, self.1, $33.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-69], r15
  call convert_value_type_78
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member_name.1:[rbp-69] struct_member_type.1:rax 
  .loc 3 302 13
  # $35.1: @IR_Struct_Type_Member = call(add_member_149, type.1, struct_member_name.1, struct_member_type.1)
  mov rdi, [rbp-41]
  mov rsi, [rbp-69]
  mov rdx, rax
  call add_member_149
  # [discarded value]: $35.1
  # [discarded value]: struct_member_type.1
  # [discarded value]: struct_member_name.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] 
  # jump(.LABEL__convert_struct_statement_77__15)
  jmp .LABEL__convert_struct_statement_77__15
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] 
.LABEL__convert_struct_statement_77__14:
  .loc 3 305 9
  # $36.1: Boolean = call(is_object_type_152, type.1)
  mov rdi, [rbp-41]
  call is_object_type_152
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:rax $28.1:[rbp-61] 
  # jump($36.1, .LABEL__convert_struct_statement_77__18, .LABEL__convert_struct_statement_77__19)
  test al, al
  mov [rbp-62], al
  jz .LABEL__convert_struct_statement_77__19
.LABEL__convert_struct_statement_77__18:
  .loc 3 308 28
  # $37.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $37.1:rbx 
  .loc 3 308 28
  # $38.1: @Source_Location = load_struct_member($37.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:r15 
  .loc 3 309 24
  # $39.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:r15 $39.1:rbx 
  .loc 3 312 32
  # $40.1: @Identifier_Token = new(Identifier_Token)
  mov [rbp-70], rbx
  mov [rbp-78], r15
  mov rdi, 32
  call malloc
  lea rbx, Identifier_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:rax 
  # store_struct_member($40.1, lexeme, "Object_Type")
  lea rbx, .LABEL__string_62[rip] # "Object_Type"
  mov [rax+8], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:rax 
  # store_struct_member($40.1, location, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:rax 
  # store_struct_member($40.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:rax 
  .loc 3 311 36
  # $41.1: @AST_Named_Type = new(AST_Named_Type)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Named_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:[rbp-86] $41.1:rax 
  # store_struct_member($41.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:[rbp-86] $41.1:rax 
  # store_struct_member($41.1, name, $40.1)
  mov rbx, [rbp-86]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $41.1:rax 
  .loc 3 310 24
  # $42.1: @AST_Pointer_Type = new(AST_Pointer_Type)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $41.1:[rbp-86] $42.1:rax 
  # store_struct_member($42.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $41.1:[rbp-86] $42.1:rax 
  # store_struct_member($42.1, pointed_type, $41.1)
  mov rbx, [rbp-86]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $42.1:rax 
  .loc 3 307 13
  # $43.1: @AST_Variable_Statement = new(AST_Variable_Statement)
  mov [rbp-86], rax
  mov rdi, 41
  call malloc
  lea rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $42.1:[rbp-86] $43.1:rax 
  # store_struct_member($43.1, location, $38.1)
  mov rbx, [rbp-78]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $39.1:[rbp-70] $42.1:[rbp-86] $43.1:rax 
  # store_struct_member($43.1, name, $39.1)
  mov rbx, [rbp-70]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $42.1:[rbp-86] $43.1:rax 
  # store_struct_member($43.1, type, $42.1)
  mov rbx, [rbp-86]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $43.1:rax 
  # store_struct_member($43.1, value_expression, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $43.1:rax 
  # store_struct_member($43.1, is_external, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $43.1:rax 
  .loc 3 306 9
  # call(create_global_variable_83, self.1, $43.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_global_variable_83
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] 
  # jump(.LABEL__convert_struct_statement_77__19)
.LABEL__convert_struct_statement_77__19:
  .loc 3 318 5
  # return(type.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_struct_statement_77__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] 
  # [discarded value]: base_type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [discarded value]: type.1
  # [discarded value]: struct_name.1
  # [discarded value]: struct_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_statement_77__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_statement_77__stack_frame_size: .word 96

  .loc 3 321 1
  .text
convert_value_type_78:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_value_type_78__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_value_type_78__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # AST_Array_Type.2: @Object_Type = load_variable(AST_Array_Type)
  lea rax, AST_Array_Type[rip]
  # [live values]: self.1:rdi type.1:rsi AST_Array_Type.2:rax 
  .loc 3 322 9
  # $1.1: Boolean = call(is_338, type.1, AST_Array_Type.2)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Array_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_value_type_78__2, .LABEL__convert_value_type_78__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_value_type_78__3
.LABEL__convert_value_type_78__2:
  .loc 3 323 40
  # $2.1: @AST_Array_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 323 16
  # $3.1: @IR_Type = call(convert_array_type_79, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_type_79
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 323 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_value_type_78__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_value_type_78__3:
  # AST_Function_Type.2: @Object_Type = load_variable(AST_Function_Type)
  lea rax, AST_Function_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] AST_Function_Type.2:rax 
  .loc 3 325 9
  # $4.1: Boolean = call(is_338, type.1, AST_Function_Type.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Function_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_value_type_78__5, .LABEL__convert_value_type_78__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_value_type_78__6
.LABEL__convert_value_type_78__5:
  .loc 3 326 43
  # $5.1: @AST_Function_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 326 16
  # $6.1: @IR_Type = call(convert_function_type_80, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_function_type_80
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 326 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_value_type_78__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_value_type_78__6:
  # AST_Named_Type.2: @Object_Type = load_variable(AST_Named_Type)
  lea rax, AST_Named_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] AST_Named_Type.2:rax 
  .loc 3 328 9
  # $7.1: Boolean = call(is_338, type.1, AST_Named_Type.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Named_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__convert_value_type_78__8, .LABEL__convert_value_type_78__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_value_type_78__9
.LABEL__convert_value_type_78__8:
  .loc 3 329 40
  # $8.1: @AST_Named_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $8.1:rax 
  .loc 3 329 16
  # $9.1: @IR_Type = call(convert_named_type_81, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_named_type_81
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $9.1:rax 
  .loc 3 329 9
  # return($9.1)
  mov [rbp-27], rax
  jmp .LABEL__convert_value_type_78__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__convert_value_type_78__9:
  # AST_Pointer_Type.2: @Object_Type = load_variable(AST_Pointer_Type)
  lea rax, AST_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] AST_Pointer_Type.2:rax 
  .loc 3 331 9
  # $10.1: Boolean = call(is_338, type.1, AST_Pointer_Type.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Pointer_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__convert_value_type_78__11, .LABEL__convert_value_type_78__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_value_type_78__12
.LABEL__convert_value_type_78__11:
  .loc 3 332 42
  # $11.1: @AST_Pointer_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  .loc 3 332 16
  # $12.1: @IR_Type = call(convert_pointer_type_82, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_pointer_type_82
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $12.1:rax 
  .loc 3 332 9
  # return($12.1)
  mov [rbp-28], rax
  jmp .LABEL__convert_value_type_78__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__convert_value_type_78__12:
  .loc 3 334 11
  # $13.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx 
  .loc 3 334 26
  # $14.1: @Object_Type = load_struct_member(type.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx $14.1:r15 
  .loc 3 334 5
  # call(abort_141, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_value_type_78__end:
  mov rsp, rbp
  pop rbp
  ret

convert_value_type_78__stack_frame_size: .word 32

  .loc 3 337 1
  .text
convert_array_type_79:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_type_79__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_type_79__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Array_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 338 57
  # $1.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  .loc 3 338 33
  # $2.1: @IR_Type = call(convert_value_type_78, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call convert_value_type_78
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-8] $2.1:rax 
  .loc 3 338 74
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [discarded value]: type.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 3 338 12
  # $4.1: @IR_Type = call(create_ir_array_type_146, $2.1, $3.1)
  mov rdi, rax
  mov rsi, r15
  call create_ir_array_type_146
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $4.1:rax 
  .loc 3 338 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_array_type_79__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__convert_array_type_79__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_type_79__stack_frame_size: .word 16

  .loc 3 341 1
  .text
convert_function_type_80:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_function_type_80__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_function_type_80__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Function_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 342 19
  # $1.1: @List = new(List)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  .loc 3 342 5
  # parameters.1: @List = $1.1
  mov [rbp-24], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:rax 
  .loc 3 343 33
  # $2.1: @List = load_struct_member(type.1, parameters)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax $2.1:r15 
  .loc 3 343 33
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r14, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax function_parameters_item.1:r14 
  # jump(.LABEL__convert_function_type_80__2)
  mov [rbp-24], rax
  mov [rbp-32], r14
.LABEL__convert_function_type_80__2:
  # function_parameters_item.2: @List_Item = phi(function_parameters_item.1, function_parameters_item.4)
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  .loc 3 344 12
  # $4.1: Boolean = function_parameters_item.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__convert_function_type_80__3, .LABEL__convert_function_type_80__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_function_type_80__4
.LABEL__convert_function_type_80__3:
  .loc 3 345 31
  # function_parameter.1: @AST_Function_Parameter = load_struct_member(function_parameters_item.2, data)
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx 
  .loc 3 346 65
  # $7.1: @Identifier_Token = load_struct_member(function_parameter.1, name)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx $7.1:r15 
  .loc 3 346 65
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx $8.1:r14 
  .loc 3 346 128
  # $9.1: @AST_Type = load_struct_member(function_parameter.1, type)
  mov r15, [rbx+16]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] $8.1:r14 $9.1:r15 
  .loc 3 346 104
  # $10.1: @IR_Type = call(convert_value_type_78, self.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-41], r14
  call convert_value_type_78
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $8.1:[rbp-41] $10.1:rax 
  .loc 3 346 27
  # $11.1: @IR_Function_Type_Parameter = new(IR_Function_Type_Parameter)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $8.1:[rbp-41] $10.1:[rbp-49] $11.1:rax 
  # store_struct_member($11.1, name, $8.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $10.1:[rbp-49] $11.1:rax 
  # store_struct_member($11.1, type, $10.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $11.1:rax 
  .loc 3 346 9
  # call(append_313, parameters.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_313
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
  .loc 3 347 36
  # function_parameters_item.4: @List_Item = load_struct_member(function_parameters_item.2, next_item)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] function_parameters_item.4:rbx:[rbp-32] 
  # jump(.LABEL__convert_function_type_80__2)
  mov [rbp-32], rbx
  jmp .LABEL__convert_function_type_80__2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] function_parameters_item.4:[rbp-32] 
  # [discarded value]: function_parameters_item.4
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_function_type_80__4:
  .loc 3 349 72
  # $13.1: @AST_Type = load_struct_member(type.1, return_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] type.1:rax:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $13.1:rbx 
  .loc 3 349 48
  # $14.1: @IR_Type = call(convert_value_type_78, self.1, $13.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call convert_value_type_78
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $14.1:rax 
  .loc 3 349 12
  # $15.1: @IR_Function_Type = call(create_ir_function_type_147, parameters.1, $14.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_ir_function_type_147
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $15.1:rax 
  .loc 3 349 5
  # return($15.1)
  mov [rbp-41], rax
  jmp .LABEL__convert_function_type_80__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # [discarded value]: function_parameters_item.2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [discarded value]: function_parameters_item.1
  # [discarded value]: parameters.1
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_function_type_80__end:
  mov rsp, rbp
  pop rbp
  ret

convert_function_type_80__stack_frame_size: .word 64

  .loc 3 352 1
  .text
convert_named_type_81:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_named_type_81__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_named_type_81__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Named_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 353 18
  # type_name.1: @Identifier_Token = load_struct_member(type.1, name)
  mov rax, [rsi+16]
  # [discarded value]: type.1
  # [live values]: self.1:rdi type_name.1:rax 
  .loc 3 354 33
  # $2.1: @String = load_struct_member(type_name.1, lexeme)
  mov rbx, [rax+8]
  # [live values]: self.1:rdi type_name.1:rax $2.1:rbx 
  .loc 3 354 13
  # type.1: @IR_Type = call(get_named_type_63, self.1, $2.1)
  mov rsi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdi
  call get_named_type_63
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax 
  .loc 3 355 9
  # $4.1: Boolean = type.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_named_type_81__2, .LABEL__convert_named_type_81__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__convert_named_type_81__3
.LABEL__convert_named_type_81__2:
  .loc 3 356 18
  # $5.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 356 18
  # $6.1: @List = load_struct_member($5.1, types)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] $6.1:r15 
  .loc 3 356 18
  # types.1: @List_Iterator = call(create_iterator_324, $6.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:rax 
  # jump(.LABEL__convert_named_type_81__4)
  mov [rbp-33], rax
.LABEL__convert_named_type_81__4:
  .loc 3 357 16
  # $8.1: Boolean = call(has_next_327, types.1)
  mov rdi, [rbp-33]
  call has_next_327
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__convert_named_type_81__5, .LABEL__convert_named_type_81__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_named_type_81__6
.LABEL__convert_named_type_81__5:
  .loc 3 358 26
  # statement.1: @AST_Statement = call(next_328, types.1)
  mov rdi, [rbp-33]
  call next_328
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax 
  # AST_Struct_Statement.3: @Object_Type = load_variable(AST_Struct_Statement)
  lea rbx, AST_Struct_Statement[rip]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax AST_Struct_Statement.3:rbx 
  .loc 3 359 17
  # $11.1: Boolean = call(is_338, statement.1, AST_Struct_Statement.3)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-42], rax
  call is_338
  # [discarded value]: AST_Struct_Statement.3
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:rax 
  # jump($11.1, .LABEL__convert_named_type_81__7, .LABEL__convert_named_type_81__9)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_named_type_81__9
.LABEL__convert_named_type_81__7:
  .loc 3 360 30
  # statement.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax 
  .loc 3 361 21
  # $15.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax $15.1:rbx 
  .loc 3 361 21
  # $16.1: @String = load_struct_member($15.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax $16.1:r15 
  .loc 3 361 50
  # $17.1: @String = load_struct_member(type_name.1, lexeme)
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] type_name.1:rbx:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax $16.1:r15 $17.1:r14 
  .loc 3 361 21
  # $18.1: Boolean = call(equals_341, $16.1, $17.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-51], rax
  call equals_341
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] $18.1:rax 
  # jump($18.1, .LABEL__convert_named_type_81__10, .LABEL__convert_named_type_81__4)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_named_type_81__4
.LABEL__convert_named_type_81__10:
  .loc 3 362 28
  # $19.1: @IR_Type = call(convert_struct_statement_77, self.1, statement.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-51]
  call convert_struct_statement_77
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] $18.1:[rbp-52] $19.1:rax 
  .loc 3 362 21
  # return($19.1)
  mov [rbp-60], rax
  jmp .LABEL__convert_named_type_81__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] $18.1:[rbp-52] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] 
.LABEL__convert_named_type_81__9:
  .loc 3 365 23
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax:[rbp-42] $11.1:[rbp-43] $12.1:rbx 
  .loc 3 365 43
  # $13.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax:[rbp-42] $11.1:[rbp-43] $12.1:rbx $13.1:r15 
  .loc 3 365 17
  # call(abort_141, $12.1, $13.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] 
.LABEL__convert_named_type_81__6:
  .loc 3 368 15
  # $20.1: @Source_Location = load_struct_member(type_name.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type_name.1:rax:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:rbx 
  .loc 3 368 35
  # $21.1: @String = call(clone_340, "Unknown type: ")
  lea rdi, .LABEL__string_185[rip] # "Unknown type: "
  mov [rbp-42], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:[rbp-42] $21.1:rax 
  .loc 3 368 66
  # $22.1: @String = load_struct_member(type_name.1, lexeme)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type_name.1:rbx:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:[rbp-42] $21.1:rax $22.1:r15 
  .loc 3 368 35
  # $23.1: @String = call(append_349, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:[rbp-42] $23.1:rax 
  .loc 3 368 9
  # call(abort_309, $20.1, $23.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_309
  # [discarded value]: $23.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] 
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__convert_named_type_81__3:
  .loc 3 370 5
  # return(type.1)
  mov rax, [rbp-24]
  jmp .LABEL__convert_named_type_81__end
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [discarded value]: type_name.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_named_type_81__end:
  mov rsp, rbp
  pop rbp
  ret

convert_named_type_81__stack_frame_size: .word 64

  .loc 3 373 1
  .text
convert_pointer_type_82:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_pointer_type_82__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_pointer_type_82__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Pointer_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 374 59
  # $1.1: @AST_Type = load_struct_member(type.1, pointed_type)
  mov rax, [rsi+16]
  # [discarded value]: type.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 374 35
  # $2.1: @IR_Type = call(convert_value_type_78, self.1, $1.1)
  mov rsi, rax
  call convert_value_type_78
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 3 374 12
  # $3.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $2.1)
  mov rdi, rax
  call create_ir_pointer_type_145
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  .loc 3 374 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_pointer_type_82__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__convert_pointer_type_82__end:
  mov rsp, rbp
  pop rbp
  ret

convert_pointer_type_82__stack_frame_size: .word 16

  .loc 3 377 1
  .text
create_global_variable_83:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_global_variable_83__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_global_variable_83__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  .loc 3 378 22
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi variable_statement.1:rsi $1.1:rax 
  .loc 3 378 22
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx 
  .loc 3 380 9
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $3.1:rax 
  .loc 3 380 9
  # $4.1: Boolean = $3.1 != null
  cmp rax, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $4.1:r15 
  # jump($4.1, .LABEL__create_global_variable_83__2, .LABEL__create_global_variable_83__4)
  test r15b, r15b
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-25], r15b
  jz .LABEL__create_global_variable_83__4
.LABEL__create_global_variable_83__2:
  .loc 3 381 49
  # $6.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] $6.1:rbx 
  .loc 3 381 25
  # variable_type.2: @IR_Type = call(convert_value_type_78, self.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call convert_value_type_78
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:rax 
  # jump(.LABEL__create_global_variable_83__3)
  mov [rbp-33], rax
.LABEL__create_global_variable_83__3:
  .loc 3 385 73
  # $8.1: Boolean = load_struct_member(variable_statement.1, is_external)
  mov rax, [rbp-16]
  mov bl, [rax+40]
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] $8.1:rbx 
  .loc 3 385 17
  # variable.1: @IR_Global_Variable = call(create_ir_global_variable_170, variable_name.1, variable_type.2, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov dl, bl
  call create_ir_global_variable_170
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:rax 
  .loc 3 386 9
  # $10.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] variable_statement.1:rbx:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:rax $10.1:r15 
  .loc 3 386 9
  # $11.1: Boolean = $10.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] variable_statement.1:rbx:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:rax $11.1:r14 
  # jump($11.1, .LABEL__create_global_variable_83__5, .LABEL__create_global_variable_83__6)
  test r14b, r14b
  mov [rbp-41], rax
  mov [rbp-42], r14b
  jz .LABEL__create_global_variable_83__6
.LABEL__create_global_variable_83__5:
  .loc 3 387 15
  # $12.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] $11.1:[rbp-42] $12.1:rbx 
  .loc 3 387 15
  # $13.1: @Source_Location = load_struct_member($12.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] $11.1:[rbp-42] $13.1:r15 
  .loc 3 387 9
  # call(abort_309, $13.1, "Initialized global variables are not supported yet.")
  mov rdi, r15
  lea rsi, .LABEL__string_186[rip] # "Initialized global variables are not supported yet."
  call abort_309
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] $11.1:[rbp-42] 
.LABEL__create_global_variable_83__6:
  .loc 3 389 5
  # $14.1: @IR_Variable = call(add_variable_64, self.1, variable.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-41]
  call add_variable_64
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] $11.1:[rbp-42] 
  .loc 3 390 5
  # $15.1: @IR_Variable_Value = call(create_variable_value_67, self.1, variable.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-41]
  call create_variable_value_67
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] $11.1:[rbp-42] 
  # return()
  jmp .LABEL__create_global_variable_83__end
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] $11.1:[rbp-42] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] variable.1:[rbp-41] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] variable_type.2:[rbp-33] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] 
.LABEL__create_global_variable_83__4:
  .loc 3 383 15
  # $5.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 383 9
  # call(abort_309, $5.1, "Type inference is not supported yet.")
  mov rdi, rbx
  lea rsi, .LABEL__string_187[rip] # "Type inference is not supported yet."
  call abort_309
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [discarded value]: variable_name.1
  # [discarded value]: variable_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_global_variable_83__end:
  mov rsp, rbp
  pop rbp
  ret

create_global_variable_83__stack_frame_size: .word 48

  .loc 3 393 1
  .text
create_function_84:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_function_84__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_function_84__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  .loc 3 395 14
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  .loc 3 395 14
  # $2.1: Int = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  .loc 3 395 14
  # $3.1: Int = $2.1 + 1
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax 
  .loc 3 396 20
  # $4.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rbx, [rsi+8]
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax $4.1:rbx 
  .loc 3 397 18
  # $5.1: @List = new(List)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  .loc 3 398 16
  # $6.1: @Identifier_Token = load_struct_member(function_statement.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $6.1:r15 
  .loc 3 398 16
  # $7.1: @String = load_struct_member($6.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $7.1:r14 
  .loc 3 399 22
  # $8.1: @List = new(List)
  mov [rbp-40], rax
  mov [rbp-48], r14
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  .loc 3 400 47
  # $9.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $9.1:r15 
  .loc 3 400 47
  # $10.1: @AST_Type = load_struct_member($9.1, return_type)
  mov r14, [r15+24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $10.1:r14 
  .loc 3 400 23
  # $11.1: @IR_Type = call(convert_value_type_78, self.1, $10.1)
  mov rdi, [rbp-32]
  mov rsi, r14
  mov [rbp-56], rax
  call convert_value_type_78
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax 
  .loc 3 401 23
  # $12.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $12.1:r15 
  .loc 3 401 23
  # $13.1: Boolean = $12.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $13.1:r14 
  .loc 3 394 17
  # $14.1: @IR_Function = new(IR_Function)
  mov [rbp-64], rax
  mov [rbp-65], r14b
  mov rdi, 65
  call malloc
  lea rbx, IR_Function[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, id, $3.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, location, $4.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, name, $7.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, parameters, $8.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, return_type, $11.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+40], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, is_external, $13.1)
  mov bl, [rbp-65]
  mov BYTE PTR [rax+56], bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $14.1:rax 
  # store_struct_member($14.1, blocks, $5.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $14.1:rax 
  .loc 3 394 5
  # function.1: @IR_Function = $14.1
  mov [rbp-40], rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax 
  .loc 3 405 19
  # $15.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $15.1:r15 
  .loc 3 405 19
  # $16.1: @List = load_struct_member($15.1, parameters)
  mov r14, [r15+16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $16.1:r14 
  .loc 3 405 19
  # parameters.1: @List_Iterator = call(create_iterator_324, $16.1)
  mov rdi, r14
  mov [rbp-40], rax
  call create_iterator_324
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:rax 
  .loc 3 406 33
  # $18.1: @List = new(List)
  mov [rbp-48], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  .loc 3 406 5
  # function_type_parameters.1: @List = $18.1
  mov [rbp-56], rax
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:rax 
  # jump(.LABEL__create_function_84__2)
  mov [rbp-56], rax
.LABEL__create_function_84__2:
  .loc 3 407 12
  # $19.1: Boolean = call(has_next_327, parameters.1)
  mov rdi, [rbp-48]
  call has_next_327
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:rax 
  # jump($19.1, .LABEL__create_function_84__3, .LABEL__create_function_84__4)
  test al, al
  mov [rbp-57], al
  jz .LABEL__create_function_84__4
.LABEL__create_function_84__3:
  .loc 3 408 22
  # parameter.1: @AST_Function_Parameter = call(next_328, parameters.1)
  mov rdi, [rbp-48]
  call next_328
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rax 
  .loc 3 409 51
  # $22.1: @AST_Type = load_struct_member(parameter.1, type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rax $22.1:rbx 
  .loc 3 409 27
  # parameter_type.1: @IR_Type = call(convert_value_type_78, self.1, $22.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-65], rax
  call convert_value_type_78
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:[rbp-65] parameter_type.1:rax 
  .loc 3 410 27
  # $24.1: @Identifier_Token = load_struct_member(parameter.1, name)
  mov rbx, [rbp-65]
  mov r15, [rbx+8]
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:rax $24.1:r15 
  .loc 3 410 27
  # parameter_name.1: @String = load_struct_member($24.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:rax parameter_name.1:rbx 
  .loc 5 389 21
  # $26.1: @List = new(List)
  mov [rbp-65], rax
  mov [rbp-73], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:rax 
  # store_struct_member($26.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:rax 
  # store_struct_member($26.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:rax 
  # store_struct_member($26.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:rax 
  .loc 3 411 31
  # $27.1: @IR_Function_Parameter = new(IR_Function_Parameter)
  mov [rbp-81], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Function_Parameter[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:[rbp-81] $27.1:rax 
  # store_struct_member($27.1, name, parameter_name.1)
  mov rbx, [rbp-73]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:rbx:[rbp-73] $26.1:[rbp-81] $27.1:rax 
  # store_struct_member($27.1, type, parameter_type.1)
  mov r15, [rbp-65]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r15:[rbp-65] parameter_name.1:rbx:[rbp-73] $26.1:[rbp-81] $27.1:rax 
  # store_struct_member($27.1, values, $26.1)
  mov r14, [rbp-81]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r15:[rbp-65] parameter_name.1:rbx:[rbp-73] $27.1:rax 
  .loc 3 411 9
  # function_parameter.1: @IR_Function_Parameter = $27.1
  mov [rbp-81], rax
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r15:[rbp-65] parameter_name.1:rbx:[rbp-73] function_parameter.1:rax 
  .loc 3 412 9
  # $28.1: @List = load_struct_member(function.1, parameters)
  mov r14, [rbp-40]
  mov r13, [r14+32]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:r14:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r15:[rbp-65] parameter_name.1:rbx:[rbp-73] function_parameter.1:rax $28.1:r13 
  .loc 3 412 9
  # call(append_313, $28.1, function_parameter.1)
  mov rdi, r13
  mov rsi, rax
  call append_313
  # [discarded value]: $28.1
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] 
  .loc 3 413 41
  # $29.1: @IR_Function_Type_Parameter = new(IR_Function_Type_Parameter)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $29.1:rax 
  # store_struct_member($29.1, name, parameter_name.1)
  mov rbx, [rbp-73]
  mov QWORD PTR [rax], rbx
  # [discarded value]: parameter_name.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] $29.1:rax 
  # store_struct_member($29.1, type, parameter_type.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: parameter_type.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $29.1:rax 
  .loc 3 413 9
  # call(append_313, function_type_parameters.1, $29.1)
  mov rdi, [rbp-56]
  mov rsi, rax
  call append_313
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  # jump(.LABEL__create_function_84__2)
  jmp .LABEL__create_function_84__2
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
.LABEL__create_function_84__4:
  .loc 3 416 5
  # store_struct_member(function_statement.1, ir_function, function.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 417 5
  # $30.1: @List = load_struct_member(self.1, named_functions)
  mov r15, [rbp-32]
  mov r14, [r15+24]
  # [live values]: self.1:r15:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $30.1:r14 
  .loc 3 417 5
  # call(append_313, $30.1, function.1)
  mov rdi, r14
  mov rsi, rbx
  call append_313
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 419 71
  # $31.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $31.1:rbx 
  .loc 3 419 21
  # $32.1: @IR_Function_Type = call(create_ir_function_type_147, function_type_parameters.1, $31.1)
  mov rdi, [rbp-56]
  mov rsi, rbx
  call create_ir_function_type_147
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $32.1:rax 
  .loc 3 419 5
  # store_struct_member(function.1, type, $32.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rbx+48], rax
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 421 5
  # return(function.1)
  mov rax, rbx
  jmp .LABEL__create_function_84__end
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [discarded value]: function_type_parameters.1
  # [discarded value]: parameters.1
  # [discarded value]: function.1
  # [discarded value]: function_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_function_84__end:
  mov rsp, rbp
  pop rbp
  ret

create_function_84__stack_frame_size: .word 96

  .loc 3 424 1
  .text
build_function_85:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_function_85__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_function_85__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  .loc 3 425 9
  # $1.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  .loc 3 425 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__build_function_85__2, .LABEL__build_function_85__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__build_function_85__3
.LABEL__build_function_85__2:
  .loc 3 426 9
  # return()
  jmp .LABEL__build_function_85__end
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__build_function_85__3:
  .loc 3 429 17
  # function.1: @IR_Function = load_struct_member(function_statement.1, ir_function)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:rbx 
  .loc 3 431 52
  # $4.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov r15, [rbp-17]
  mov r14, [r15]
  # [live values]: self.1:r15:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:rbx $4.1:r14 
  .loc 3 42 24
  # $5.1: @List = new(List)
  mov [rbp-25], rbx
  mov [rbp-33], r14
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  .loc 3 43 27
  # $6.1: @List = new(List)
  mov [rbp-41], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  .loc 3 431 20
  # $7.1: @IR_Builder_Context = new(IR_Builder_Context)
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:[rbp-49] $7.1:rax 
  # store_struct_member($7.1, parent, $4.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $5.1:[rbp-41] $6.1:[rbp-49] $7.1:rax 
  # store_struct_member($7.1, variables, $5.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $6.1:[rbp-49] $7.1:rax 
  # store_struct_member($7.1, named_values, $6.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $7.1:rax 
  .loc 3 431 5
  # store_struct_member(self.1, context, $7.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 432 5
  # $8.1: @Counter = load_struct_member(self.1, counter)
  mov rax, [rbx+48]
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $8.1:rax 
  .loc 3 432 5
  # $9.1: @Counter = call(reset_143, $8.1)
  mov rdi, rax
  call reset_143
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 434 26
  # $10.1: @IR_Block = call(create_block_168, function.1)
  mov rdi, [rbp-25]
  call create_block_168
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $10.1:rax 
  .loc 3 434 5
  # store_struct_member(self.1, current_block, $10.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 436 28
  # $11.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-25]
  mov r15, [rax+32]
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] $11.1:r15 
  .loc 3 436 28
  # function_parameters.1: @List_Iterator = call(create_iterator_324, $11.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:rax 
  # jump(.LABEL__build_function_85__5)
  mov [rbp-33], rax
.LABEL__build_function_85__5:
  .loc 3 437 12
  # $13.1: Boolean = call(has_next_327, function_parameters.1)
  mov rdi, [rbp-33]
  call has_next_327
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:rax 
  # jump($13.1, .LABEL__build_function_85__6, .LABEL__build_function_85__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__build_function_85__7
.LABEL__build_function_85__6:
  .loc 3 438 31
  # function_parameter.1: @IR_Function_Parameter = call(next_328, function_parameters.1)
  mov rdi, [rbp-33]
  call next_328
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:rax 
  .loc 3 439 9
  # $16.1: @IR_Variable = call(add_variable_64, self.1, function_parameter.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov [rbp-42], rax
  call add_variable_64
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:[rbp-42] 
  .loc 3 440 9
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:[rbp-42] $17.1:rbx 
  .loc 3 440 71
  # $18.1: @IR_Variable_Value = call(create_variable_value_67, self.1, function_parameter.1)
  mov rdi, rax
  mov rsi, [rbp-42]
  mov [rbp-50], rbx
  call create_variable_value_67
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $17.1:[rbp-50] $18.1:rax 
  .loc 3 440 35
  # $19.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction_207, $18.1)
  mov rdi, rax
  call create_ir_load_variable_instruction_207
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $17.1:[rbp-50] $19.1:rax 
  .loc 3 440 9
  # $20.1: @IR_Instruction = call(append_163, $17.1, $19.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call append_163
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  # jump(.LABEL__build_function_85__5)
  jmp .LABEL__build_function_85__5
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
.LABEL__build_function_85__7:
  .loc 3 443 34
  # $21.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $21.1:rbx 
  .loc 3 443 5
  # call(convert_block_statement_93, self.1, $21.1)
  mov rdi, [rbp-17]
  mov rsi, rbx
  call convert_block_statement_93
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  .loc 3 444 9
  # $22.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $22.1:rbx 
  .loc 3 444 9
  # $23.1: @IR_Instruction = load_struct_member($22.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $23.1:r15 
  .loc 3 444 9
  # $25.1: Boolean = $23.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:rbx 
  # jump($25.1, .LABEL__build_function_85__9, .LABEL__build_function_85__8)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__build_function_85__8
.LABEL__build_function_85__9:
  .loc 3 444 9
  # $25.3: Boolean = phi($25.1, $25.2)
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] 
  # jump($25.3, .LABEL__build_function_85__10, .LABEL__build_function_85__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__build_function_85__11
.LABEL__build_function_85__10:
  .loc 3 445 13
  # $30.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $30.1:rbx 
  .loc 3 445 13
  # $31.1: @List = load_struct_member($30.1, predecessors)
  mov r15, [rbx+24]
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $31.1:r15 
  .loc 3 445 13
  # $32.1: Int = load_struct_member($31.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $32.1:rbx 
  .loc 3 445 13
  # $34.1: Boolean = $32.1 == 0
  cmp rbx, 0
  sete r15b
  # [discarded value]: $32.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:r15 
  # jump($34.1, .LABEL__build_function_85__12, .LABEL__build_function_85__13)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__build_function_85__13
.LABEL__build_function_85__12:
  .loc 3 445 58
  # $35.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $35.1:rbx 
  .loc 3 445 58
  # $36.1: Int = load_struct_member($35.1, id)
  mov r15, [rbx+8]
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $36.1:r15 
  .loc 3 445 58
  # $34.2: Boolean = $36.1 != 1
  cmp r15, 1
  setne bl
  # [discarded value]: $36.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:rbx:[rbp-36] 
  # jump(.LABEL__build_function_85__13)
  mov [rbp-36], bl
.LABEL__build_function_85__13:
  .loc 3 445 13
  # $34.3: Boolean = phi($34.1, $34.2)
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # jump($34.3, .LABEL__build_function_85__14, .LABEL__build_function_85__16)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__build_function_85__16
.LABEL__build_function_85__14:
  .loc 3 447 13
  # $43.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-25]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $43.1:rbx 
  .loc 3 447 36
  # $44.1: @IR_Block = load_struct_member(self.1, current_block)
  mov r15, [rbp-17]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $43.1:rbx $44.1:r14 
  .loc 3 447 13
  # $45.1: @List = call(remove_315, $43.1, $44.1)
  mov rdi, rbx
  mov rsi, r14
  call remove_315
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $45.1:rax 
  .loc 3 447 13
  # $46.1: @List = call(prune_317, $45.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # jump(.LABEL__build_function_85__11)
.LABEL__build_function_85__11:
  .loc 3 454 5
  # store_struct_member(self.1, current_block, null)
  mov rax, [rbp-17]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 456 5
  # call(remove_redundant_blocks_86, self.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call remove_redundant_blocks_86
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 457 5
  # call(populate_phi_instructions_87, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call populate_phi_instructions_87
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 458 5
  # call(remove_trivial_phi_instructions_89, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call remove_trivial_phi_instructions_89
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 459 5
  # call(remove_redundant_set_instructions_90, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call remove_redundant_set_instructions_90
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 461 20
  # $47.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $47.1:rbx $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 461 20
  # $48.1: @IR_Builder_Context = load_struct_member($47.1, parent)
  mov r15, [rbx]
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $48.1:r15 $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 461 5
  # store_struct_member(self.1, context, $48.1)
  mov QWORD PTR [rax], r15
  # [discarded value]: $48.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # return()
  jmp .LABEL__build_function_85__end
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
.LABEL__build_function_85__16:
  .loc 3 448 20
  # $38.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $38.1:rbx 
  # IR_Nothing_Type.3: @Object_Type = load_variable(IR_Nothing_Type)
  lea r15, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $38.1:rbx IR_Nothing_Type.3:r15 
  .loc 3 448 20
  # $39.1: Boolean = call(is_338, $38.1, IR_Nothing_Type.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Nothing_Type.3
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:rax 
  # jump($39.1, .LABEL__build_function_85__17, .LABEL__build_function_85__19)
  test al, al
  mov [rbp-37], al
  jz .LABEL__build_function_85__19
.LABEL__build_function_85__17:
  .loc 3 449 25
  # $41.1: @IR_Return_Instruction = call(create_ir_return_instruction_212, null)
  xor rdi, rdi
  call create_ir_return_instruction_212
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] $41.1:rax 
  .loc 3 449 13
  # $42.1: @IR_Variable_Value = call(append_74, self.1, $41.1, null)
  mov rdi, [rbp-17]
  mov rsi, rax
  xor rdx, rdx
  call append_74
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
  # jump(.LABEL__build_function_85__11)
  jmp .LABEL__build_function_85__11
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
.LABEL__build_function_85__19:
  .loc 3 451 19
  # $40.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] $40.1:rbx 
  .loc 3 451 13
  # call(abort_309, $40.1, "Missing return statement")
  mov rdi, rbx
  lea rsi, .LABEL__string_188[rip] # "Missing return statement"
  call abort_309
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # [discarded value]: $34.3
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] 
  # [discarded value]: $34.2
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] 
  # [discarded value]: $25.3
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
.LABEL__build_function_85__8:
  .loc 3 444 56
  # $26.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $26.1:rbx 
  .loc 3 444 56
  # $27.1: @IR_Instruction = load_struct_member($26.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $27.1:r15 
  .loc 3 444 56
  # $28.1: Boolean = call(is_exit_instruction_173, $27.1)
  mov rdi, r15
  call is_exit_instruction_173
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $28.1:rax 
  .loc 3 444 56
  # $25.2: Boolean = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.2:rbx:[rbp-35] 
  # jump(.LABEL__build_function_85__9)
  mov [rbp-35], bl
  jmp .LABEL__build_function_85__9
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.2:[rbp-35] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] 
  # [discarded value]: function_parameters.1
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] 
  # [discarded value]: function_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__build_function_85__end:
  mov rsp, rbp
  pop rbp
  ret

build_function_85__stack_frame_size: .word 64

  .loc 3 464 1
  .text
remove_redundant_blocks_86:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_blocks_86__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_blocks_86__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_redundant_blocks_86__2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_blocks_86__2:
  .loc 3 466 9
  # repeat.1: Boolean = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 468 19
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 468 19
  # $2.1: @List = call(prune_317, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_317
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 468 19
  # blocks.1: @List_Iterator = call(create_iterator_324, $2.1)
  mov rdi, rax
  call create_iterator_324
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(.LABEL__remove_redundant_blocks_86__4)
  mov [rbp-17], rax
.LABEL__remove_redundant_blocks_86__4:
  .loc 3 470 16
  # $4.1: Boolean = call(has_next_327, blocks.1)
  mov rdi, [rbp-17]
  call has_next_327
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__remove_redundant_blocks_86__5, .LABEL__remove_redundant_blocks_86__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_redundant_blocks_86__6
.LABEL__remove_redundant_blocks_86__5:
  .loc 3 471 22
  # block.1: @IR_Block = call(next_328, blocks.1)
  mov rdi, [rbp-17]
  call next_328
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax 
  .loc 3 472 17
  # $7.1: Int = load_struct_member(block.1, id)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax $7.1:rbx 
  .loc 3 472 17
  # $8.1: Boolean = $7.1 != 1
  cmp rbx, 1
  setne r15b
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax $8.1:r15 
  # jump($8.1, .LABEL__remove_redundant_blocks_86__7, .LABEL__remove_redundant_blocks_86__4)
  test r15b, r15b
  mov [rbp-26], rax
  mov [rbp-27], r15b
  jz .LABEL__remove_redundant_blocks_86__4
.LABEL__remove_redundant_blocks_86__7:
  .loc 3 473 21
  # $9.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $9.1:rbx 
  .loc 3 473 21
  # $10.1: Int = load_struct_member($9.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $10.1:r15 
  .loc 3 473 21
  # $11.1: Boolean = $10.1 == 0
  cmp r15, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:rbx 
  # jump($11.1, .LABEL__remove_redundant_blocks_86__9, .LABEL__remove_redundant_blocks_86__10)
  test bl, bl
  mov [rbp-28], bl
  jz .LABEL__remove_redundant_blocks_86__10
.LABEL__remove_redundant_blocks_86__9:
  .loc 3 475 25
  # $12.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $12.1:rbx 
  .loc 3 475 25
  # $13.1: Boolean = $12.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:r15 
  # jump($13.1, .LABEL__remove_redundant_blocks_86__11, .LABEL__remove_redundant_blocks_86__13)
  test r15b, r15b
  mov [rbp-29], r15b
  jz .LABEL__remove_redundant_blocks_86__13
.LABEL__remove_redundant_blocks_86__11:
  .loc 3 476 25
  # call(remove_current_326, blocks.1)
  mov rdi, [rbp-17]
  call remove_current_326
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # jump(.LABEL__remove_redundant_blocks_86__10)
.LABEL__remove_redundant_blocks_86__10:
  .loc 3 488 21
  # $32.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $32.1:rbx 
  .loc 3 488 48
  # $33.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $32.1:rbx $33.1:r15 
  .loc 3 488 21
  # $35.1: Boolean = $32.1 == $33.1
  cmp rbx, r15
  sete r14b
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:r14 
  # jump($35.1, .LABEL__remove_redundant_blocks_86__20, .LABEL__remove_redundant_blocks_86__21)
  test r14b, r14b
  mov [rbp-30], r14b
  jz .LABEL__remove_redundant_blocks_86__21
.LABEL__remove_redundant_blocks_86__20:
  .loc 3 488 74
  # $36.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $36.1:rbx 
  # IR_Direct_Jump_Instruction.4: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea r15, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $36.1:rbx IR_Direct_Jump_Instruction.4:r15 
  .loc 3 488 74
  # $35.2: Boolean = call(is_338, $36.1, IR_Direct_Jump_Instruction.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Direct_Jump_Instruction.4
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:rax:[rbp-30] 
  # jump(.LABEL__remove_redundant_blocks_86__21)
  mov [rbp-30], al
.LABEL__remove_redundant_blocks_86__21:
  .loc 3 488 21
  # $35.3: Boolean = phi($35.1, $35.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] 
  # jump($35.3, .LABEL__remove_redundant_blocks_86__22, .LABEL__remove_redundant_blocks_86__4)
  mov al, [rbp-30]
  test al, al
  jz .LABEL__remove_redundant_blocks_86__4
.LABEL__remove_redundant_blocks_86__22:
  .loc 3 490 42
  # $38.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] $38.1:rbx 
  .loc 3 490 42
  # block_predecessor.1: @IR_Block = call(last_323, $38.1)
  mov rdi, rbx
  call last_323
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax 
  .loc 3 491 41
  # $42.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rbp-26]
  mov r15, [rbx+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax $42.1:r15 
  .loc 3 491 40
  # block_successor.1: @IR_Block = load_struct_member($42.1, block)
  mov r14, [r15+65]
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 
  .loc 3 492 25
  # $44.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 $44.1:r15 
  # IR_Conditional_Jump_Instruction.3: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea r13, IR_Conditional_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 $44.1:r15 IR_Conditional_Jump_Instruction.3:r13 
  .loc 3 492 25
  # $45.1: Boolean = call(is_338, $44.1, IR_Conditional_Jump_Instruction.3)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-38], rax
  mov [rbp-46], r14
  call is_338
  # [discarded value]: IR_Conditional_Jump_Instruction.3
  # [discarded value]: $44.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:rax 
  # jump($45.1, .LABEL__remove_redundant_blocks_86__24, .LABEL__remove_redundant_blocks_86__25)
  test al, al
  mov [rbp-47], al
  jz .LABEL__remove_redundant_blocks_86__25
.LABEL__remove_redundant_blocks_86__24:
  .loc 3 493 25
  # $46.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $46.1:rbx 
  .loc 3 493 25
  # $47.1: @List = call(remove_315, $46.1, block_predecessor.1)
  mov rdi, rbx
  mov rsi, [rbp-38]
  call remove_315
  # [discarded value]: $46.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $47.1:rax 
  .loc 3 493 25
  # $48.1: @List = call(prune_317, $47.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
  .loc 3 494 58
  # block_predecessor_instruction.1: @IR_Conditional_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx 
  .loc 3 495 29
  # $51.1: @IR_Block = load_struct_member(block_predecessor_instruction.1, false_block)
  mov r15, [rbx+73]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx $51.1:r15 
  .loc 3 495 29
  # $52.1: Boolean = $51.1 == block.1
  cmp r15, QWORD PTR [rbp-26]
  sete r14b
  # [discarded value]: $51.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx $52.1:r14 
  # jump($52.1, .LABEL__remove_redundant_blocks_86__26, .LABEL__remove_redundant_blocks_86__28)
  test r14b, r14b
  mov [rbp-55], rbx
  mov [rbp-56], r14b
  jz .LABEL__remove_redundant_blocks_86__28
.LABEL__remove_redundant_blocks_86__26:
  .loc 3 496 29
  # store_struct_member(block_predecessor_instruction.1, false_block, block_successor.1)
  mov rax, [rbp-55]
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+73], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rbx:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rax:[rbp-55] $52.1:[rbp-56] 
  # jump(.LABEL__remove_redundant_blocks_86__27)
.LABEL__remove_redundant_blocks_86__27:
  .loc 3 500 25
  # $53.1: @List = load_struct_member(block_successor.1, predecessors)
  mov rax, [rbp-46]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rax:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $53.1:rbx 
  .loc 3 500 25
  # $54.1: @List = call(remove_315, $53.1, block.1)
  mov rdi, rbx
  mov rsi, [rbp-26]
  call remove_315
  # [discarded value]: $53.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $54.1:rax 
  .loc 3 500 25
  # $55.1: @List = call(prune_317, $54.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $54.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $55.1:rax 
  .loc 3 500 25
  # call(append_313, $55.1, block_predecessor.1)
  mov rdi, rax
  mov rsi, [rbp-38]
  call append_313
  # [discarded value]: $55.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  .loc 3 501 25
  # repeat.3: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_86__6)
  mov [rbp-9], al
.LABEL__remove_redundant_blocks_86__6:
  # repeat.5: Boolean = phi(repeat.2, repeat.3, repeat.4, repeat.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] repeat.5:[rbp-9] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  .loc 3 516 13
  # $66.1: Boolean = repeat.5 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $66.1:rax $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # jump($66.1, .LABEL__remove_redundant_blocks_86__3, .LABEL__remove_redundant_blocks_86__2)
  test al, al
  mov [rbp-57], al
  jz .LABEL__remove_redundant_blocks_86__2
.LABEL__remove_redundant_blocks_86__3:
  # return()
  jmp .LABEL__remove_redundant_blocks_86__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $66.1:[rbp-57] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [discarded value]: $66.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
.LABEL__remove_redundant_blocks_86__28:
  .loc 3 498 29
  # store_struct_member(block_predecessor_instruction.1, true_block, block_successor.1)
  mov rax, [rbp-55]
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+65], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rbx:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rax:[rbp-55] $52.1:[rbp-56] 
  # jump(.LABEL__remove_redundant_blocks_86__27)
  jmp .LABEL__remove_redundant_blocks_86__27
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  # [discarded value]: $52.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] 
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
.LABEL__remove_redundant_blocks_86__25:
  .loc 3 504 25
  # $56.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $56.1:rbx 
  # IR_Direct_Jump_Instruction.5: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea r15, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $56.1:rbx IR_Direct_Jump_Instruction.5:r15 
  .loc 3 504 25
  # $57.1: Boolean = call(is_338, $56.1, IR_Direct_Jump_Instruction.5)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Direct_Jump_Instruction.5
  # [discarded value]: $56.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:rax 
  # jump($57.1, .LABEL__remove_redundant_blocks_86__30, .LABEL__remove_redundant_blocks_86__4)
  test al, al
  mov [rbp-48], al
  jz .LABEL__remove_redundant_blocks_86__4
.LABEL__remove_redundant_blocks_86__30:
  .loc 3 505 25
  # $58.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $58.1:rbx 
  .loc 3 505 25
  # $59.1: @List = call(remove_315, $58.1, block_predecessor.1)
  mov rdi, rbx
  mov rsi, [rbp-38]
  call remove_315
  # [discarded value]: $58.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $59.1:rax 
  .loc 3 505 25
  # $60.1: @List = call(prune_317, $59.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 506 58
  # block_predecessor_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] block_predecessor_instruction.1:rbx 
  .loc 3 507 25
  # store_struct_member(block_predecessor_instruction.1, block, block_successor.1)
  mov r15, [rbp-46]
  mov QWORD PTR [rbx+65], r15
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:r15:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 508 25
  # $63.1: @List = load_struct_member(block_successor.1, predecessors)
  mov rbx, [r15+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:r15:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $63.1:rbx 
  .loc 3 508 25
  # $64.1: @List = call(remove_315, $63.1, block.1)
  mov rdi, rbx
  mov rsi, [rbp-26]
  call remove_315
  # [discarded value]: $63.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $64.1:rax 
  .loc 3 508 25
  # $65.1: @List = call(prune_317, $64.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $64.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $65.1:rax 
  .loc 3 508 25
  # call(append_313, $65.1, block_predecessor.1)
  mov rdi, rax
  mov rsi, [rbp-38]
  call append_313
  # [discarded value]: $65.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 509 25
  # repeat.4: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] repeat.4:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_86__6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_86__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  # [discarded value]: $57.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] 
  # [discarded value]: block_successor.1
  # [discarded value]: block_predecessor.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] 
  # [discarded value]: $35.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] 
  # [discarded value]: $35.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] 
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
.LABEL__remove_redundant_blocks_86__13:
  .loc 3 477 32
  # $14.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx 
  .loc 3 477 58
  # $15.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov r15, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx $15.1:r15 
  .loc 3 477 32
  # $17.1: Boolean = $14.1 == $15.1
  cmp rbx, r15
  sete r14b
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:r14 
  # jump($17.1, .LABEL__remove_redundant_blocks_86__14, .LABEL__remove_redundant_blocks_86__15)
  test r14b, r14b
  mov [rbp-30], r14b
  jz .LABEL__remove_redundant_blocks_86__15
.LABEL__remove_redundant_blocks_86__14:
  .loc 3 477 85
  # $18.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $18.1:rbx 
  # IR_Direct_Jump_Instruction.3: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea r15, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $18.1:rbx IR_Direct_Jump_Instruction.3:r15 
  .loc 3 477 85
  # $17.2: Boolean = call(is_338, $18.1, IR_Direct_Jump_Instruction.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Direct_Jump_Instruction.3
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:rax:[rbp-30] 
  # jump(.LABEL__remove_redundant_blocks_86__15)
  mov [rbp-30], al
.LABEL__remove_redundant_blocks_86__15:
  .loc 3 477 32
  # $17.3: Boolean = phi($17.1, $17.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  # jump($17.3, .LABEL__remove_redundant_blocks_86__16, .LABEL__remove_redundant_blocks_86__18)
  mov al, [rbp-30]
  test al, al
  jz .LABEL__remove_redundant_blocks_86__18
.LABEL__remove_redundant_blocks_86__16:
  .loc 3 478 46
  # block_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx 
  .loc 3 479 25
  # $26.1: @IR_Block = load_struct_member(block_instruction.1, block)
  mov r15, [rbx+65]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx $26.1:r15 
  .loc 3 479 25
  # $27.1: @List = load_struct_member($26.1, predecessors)
  mov r14, [r15+24]
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx $27.1:r14 
  .loc 3 479 25
  # $28.1: @List = call(remove_315, $27.1, block.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-38], rbx
  call remove_315
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:[rbp-38] 
  .loc 3 480 25
  # $29.1: @IR_Block = load_struct_member(block_instruction.1, block)
  mov rax, [rbp-38]
  mov rbx, [rax+65]
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $29.1:rbx 
  .loc 3 480 25
  # $30.1: @List = load_struct_member($29.1, predecessors)
  mov rax, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $30.1:rax 
  .loc 3 480 25
  # $31.1: @List = call(prune_317, $30.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  .loc 3 481 25
  # call(remove_current_326, blocks.1)
  mov rdi, [rbp-17]
  call remove_current_326
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  .loc 3 482 25
  # repeat.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_86__6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_86__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
.LABEL__remove_redundant_blocks_86__18:
  .loc 3 485 31
  # $20.1: @Source_Location = load_struct_member(function.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: function.1:rax:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:rbx 
  .loc 3 485 50
  # $21.1: @String = call(clone_340, "Found non-empty unreachable block: block.")
  lea rdi, .LABEL__string_189[rip] # "Found non-empty unreachable block: block."
  mov [rbp-38], rbx
  call clone_340
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $21.1:rax 
  .loc 3 485 108
  # $22.1: Int = load_struct_member(block.1, id)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $21.1:rax $22.1:r15 
  .loc 3 485 50
  # $23.1: @String = call(append_348, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call append_348
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $23.1:rax 
  .loc 3 485 25
  # call(abort_309, $20.1, $23.1)
  mov rdi, [rbp-38]
  mov rsi, rax
  call abort_309
  # [discarded value]: $23.1
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  # [discarded value]: $17.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] 
  # [discarded value]: $17.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] 
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] 
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] 
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_blocks_86__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_blocks_86__stack_frame_size: .word 64

  .loc 3 522 1
  .text
populate_phi_instructions_87:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR populate_phi_instructions_87__stack_frame_size[rip]
  sub rsp, rax
.LABEL__populate_phi_instructions_87__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  .loc 3 523 15
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rsi+57]
  # [discarded value]: function.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 523 15
  # blocks.1: @List_Iterator = call(create_iterator_324, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_324
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] blocks.1:rax 
  # jump(.LABEL__populate_phi_instructions_87__2)
  mov [rbp-16], rax
.LABEL__populate_phi_instructions_87__2:
  .loc 3 524 12
  # $3.1: Boolean = call(has_next_327, blocks.1)
  mov rdi, [rbp-16]
  call has_next_327
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__populate_phi_instructions_87__3, .LABEL__populate_phi_instructions_87__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__populate_phi_instructions_87__4
.LABEL__populate_phi_instructions_87__3:
  .loc 3 525 18
  # block.1: @IR_Block = call(next_328, blocks.1)
  mov rdi, [rbp-16]
  call next_328
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax 
  .loc 3 526 30
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__populate_phi_instructions_87__5)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__populate_phi_instructions_87__5:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  .loc 3 527 16
  # $8.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__populate_phi_instructions_87__8, .LABEL__populate_phi_instructions_87__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__populate_phi_instructions_87__9
.LABEL__populate_phi_instructions_87__8:
  # IR_Phi_Instruction.5: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] IR_Phi_Instruction.5:rax 
  .loc 3 527 45
  # $8.2: Boolean = call(is_338, block_instruction.2, IR_Phi_Instruction.5)
  mov rdi, [rbp-33]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Phi_Instruction.5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:rax:[rbp-34] 
  # jump(.LABEL__populate_phi_instructions_87__9)
  mov [rbp-34], al
.LABEL__populate_phi_instructions_87__9:
  .loc 3 527 16
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] $8.3:[rbp-34] 
  # jump($8.3, .LABEL__populate_phi_instructions_87__6, .LABEL__populate_phi_instructions_87__2)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__populate_phi_instructions_87__2
.LABEL__populate_phi_instructions_87__6:
  .loc 3 528 28
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  mov rax, [rbp-33]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 529 17
  # $11.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $11.1:rbx $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 529 17
  # $12.1: @IR_Values_Map_Entry = load_struct_member($11.1, first_entry)
  mov r15, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $12.1:r15 $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 529 17
  # $13.1: Boolean = $12.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $13.1:rbx $8.2:[rbp-34] $8.3:[rbp-34] 
  # jump($13.1, .LABEL__populate_phi_instructions_87__10, .LABEL__populate_phi_instructions_87__11)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__populate_phi_instructions_87__11
.LABEL__populate_phi_instructions_87__10:
  .loc 3 530 39
  # $14.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] $14.1:rbx 
  .loc 3 530 39
  # block_predecessors.1: @List_Iterator = call(create_iterator_324, $14.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:rax 
  # jump(.LABEL__populate_phi_instructions_87__12)
  mov [rbp-51], rax
.LABEL__populate_phi_instructions_87__12:
  .loc 3 531 24
  # $16.1: Boolean = call(has_next_327, block_predecessors.1)
  mov rdi, [rbp-51]
  call has_next_327
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:rax 
  # jump($16.1, .LABEL__populate_phi_instructions_87__13, .LABEL__populate_phi_instructions_87__11)
  test al, al
  mov [rbp-52], al
  jz .LABEL__populate_phi_instructions_87__11
.LABEL__populate_phi_instructions_87__13:
  .loc 3 532 42
  # block_predecessor.1: @IR_Block = call(next_328, block_predecessors.1)
  mov rdi, [rbp-51]
  call next_328
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax 
  .loc 3 533 89
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-42]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rbx:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax $19.1:r15 
  .loc 3 533 89
  # $20.1: @IR_Variable = load_struct_member($19.1, variable)
  mov r14, [r15+32]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rbx:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax $20.1:r14 
  .loc 3 533 40
  # $21.1: @IR_Value = call(get_block_variable_value_88, self.1, block_predecessor.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r14
  call get_block_variable_value_88
  # [discarded value]: $20.1
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] $21.1:rax 
  .loc 3 533 21
  # call(append_242, instruction.1, $21.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_242
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
  # jump(.LABEL__populate_phi_instructions_87__12)
  jmp .LABEL__populate_phi_instructions_87__12
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
.LABEL__populate_phi_instructions_87__11:
  .loc 3 536 33
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] block_instruction.6:rbx:[rbp-33] $16.1:[rbp-52] 
  # jump(.LABEL__populate_phi_instructions_87__5)
  mov [rbp-33], rbx
  jmp .LABEL__populate_phi_instructions_87__5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] block_instruction.6:[rbp-33] $16.1:[rbp-52] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] 
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__populate_phi_instructions_87__4:
  # return()
  jmp .LABEL__populate_phi_instructions_87__end
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [discarded value]: blocks.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__populate_phi_instructions_87__end:
  mov rsp, rbp
  pop rbp
  ret

populate_phi_instructions_87__stack_frame_size: .word 64

  .loc 3 541 1
  .text
get_block_variable_value_88:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_block_variable_value_88__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_block_variable_value_88__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx 
  .loc 3 542 26
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rsi+40]
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx block_instruction.1:rax 
  # jump(.LABEL__get_block_variable_value_88__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__get_block_variable_value_88__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.7)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  .loc 3 543 12
  # $2.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_block_variable_value_88__3, .LABEL__get_block_variable_value_88__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_block_variable_value_88__4
.LABEL__get_block_variable_value_88__3:
  .loc 3 544 13
  # $3.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $3.1:rbx 
  .loc 3 544 13
  # $5.1: Boolean = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:r15 
  # jump($5.1, .LABEL__get_block_variable_value_88__5, .LABEL__get_block_variable_value_88__6)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__get_block_variable_value_88__6
.LABEL__get_block_variable_value_88__5:
  .loc 3 544 55
  # $6.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $6.1:rbx 
  .loc 3 544 55
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $7.1:r15 
  .loc 3 544 55
  # $5.2: Boolean = $7.1 == variable.1
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:rbx:[rbp-34] 
  # jump(.LABEL__get_block_variable_value_88__6)
  mov [rbp-34], bl
.LABEL__get_block_variable_value_88__6:
  .loc 3 544 13
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
  # jump($5.3, .LABEL__get_block_variable_value_88__7, .LABEL__get_block_variable_value_88__8)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__get_block_variable_value_88__8
.LABEL__get_block_variable_value_88__7:
  .loc 3 545 20
  # $9.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] $9.1:rbx 
  .loc 3 545 13
  # return($9.1)
  mov rax, rbx
  mov [rbp-42], rbx
  jmp .LABEL__get_block_variable_value_88__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
.LABEL__get_block_variable_value_88__8:
  .loc 3 547 29
  # block_instruction.7: @IR_Instruction = load_struct_member(block_instruction.2, prev_instruction)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] block_instruction.7:rbx:[rbp-8] 
  # jump(.LABEL__get_block_variable_value_88__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_block_variable_value_88__2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] block_instruction.7:[rbp-8] 
  # [discarded value]: block_instruction.7
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] 
.LABEL__get_block_variable_value_88__4:
  .loc 3 549 9
  # $11.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $11.1:rbx 
  .loc 3 549 9
  # $12.1: Int = load_struct_member($11.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $12.1:r15 
  .loc 3 549 9
  # $13.1: Boolean = $12.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:rbx 
  # jump($13.1, .LABEL__get_block_variable_value_88__10, .LABEL__get_block_variable_value_88__11)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__get_block_variable_value_88__11
.LABEL__get_block_variable_value_88__10:
  .loc 3 550 46
  # $14.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $14.1:rbx 
  .loc 3 550 46
  # $16.1: @IR_Block = call(last_323, $14.1)
  mov rdi, rbx
  call last_323
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $16.1:rax 
  .loc 3 550 16
  # $17.1: @IR_Value = call(get_block_variable_value_88, self.1, $16.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_88
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $17.1:rax 
  .loc 3 550 9
  # return($17.1)
  mov [rbp-42], rax
  jmp .LABEL__get_block_variable_value_88__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] 
.LABEL__get_block_variable_value_88__11:
  .loc 3 552 46
  # $18.1: @IR_Variable_Value = call(create_variable_value_67, self.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  call create_variable_value_67
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $18.1:rax 
  .loc 3 552 20
  # instruction.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_241, $18.1)
  mov rdi, rax
  call create_ir_phi_instruction_241
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:rax 
  .loc 3 553 5
  # $20.1: @IR_Instruction = call(prepend_162, block.1, instruction.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-42], rax
  call prepend_162
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] 
  .loc 3 554 27
  # $21.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] $21.1:rbx 
  .loc 3 554 27
  # block_predecessors.1: @List_Iterator = call(create_iterator_324, $21.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:rax 
  # jump(.LABEL__get_block_variable_value_88__13)
  mov [rbp-50], rax
.LABEL__get_block_variable_value_88__13:
  .loc 3 555 12
  # $23.1: Boolean = call(has_next_327, block_predecessors.1)
  mov rdi, [rbp-50]
  call has_next_327
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:rax 
  # jump($23.1, .LABEL__get_block_variable_value_88__14, .LABEL__get_block_variable_value_88__15)
  test al, al
  mov [rbp-51], al
  jz .LABEL__get_block_variable_value_88__15
.LABEL__get_block_variable_value_88__14:
  .loc 3 556 30
  # block_predecessor.1: @IR_Block = call(next_328, block_predecessors.1)
  mov rdi, [rbp-50]
  call next_328
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] block_predecessor.1:rax 
  .loc 3 557 28
  # $26.1: @IR_Value = call(get_block_variable_value_88, self.1, block_predecessor.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_88
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] $26.1:rax 
  .loc 3 557 9
  # call(append_242, instruction.1, $26.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_242
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
  # jump(.LABEL__get_block_variable_value_88__13)
  jmp .LABEL__get_block_variable_value_88__13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
.LABEL__get_block_variable_value_88__15:
  .loc 3 559 12
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:rax:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] $27.1:rbx 
  .loc 3 559 5
  # return($27.1)
  mov rax, rbx
  mov [rbp-59], rbx
  jmp .LABEL__get_block_variable_value_88__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] 
  # [discarded value]: block_predecessors.1
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [discarded value]: block_instruction.1
  # [discarded value]: variable.1
  # [discarded value]: block.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_block_variable_value_88__end:
  mov rsp, rbp
  pop rbp
  ret

get_block_variable_value_88__stack_frame_size: .word 64

  .loc 3 562 1
  .text
remove_trivial_phi_instructions_89:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_trivial_phi_instructions_89__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_trivial_phi_instructions_89__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_trivial_phi_instructions_89__2)
  mov [rbp-8], rsi
.LABEL__remove_trivial_phi_instructions_89__2:
  .loc 3 564 9
  # repeat.1: Boolean = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 566 19
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 566 19
  # $2.1: @List = call(prune_317, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_317
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 566 19
  # blocks.1: @List_Iterator = call(create_iterator_324, $2.1)
  mov rdi, rax
  call create_iterator_324
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  .loc 3 569 9
  # $4.1: @Any = call(next_328, blocks.1)
  mov rdi, rax
  mov [rbp-17], rax
  call next_328
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # jump(.LABEL__remove_trivial_phi_instructions_89__4)
.LABEL__remove_trivial_phi_instructions_89__4:
  # repeat.4: Boolean = phi(repeat.1, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  .loc 3 571 16
  # $5.1: Boolean = call(has_next_327, blocks.1)
  mov rdi, [rbp-17]
  call has_next_327
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__remove_trivial_phi_instructions_89__5, .LABEL__remove_trivial_phi_instructions_89__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_trivial_phi_instructions_89__6
.LABEL__remove_trivial_phi_instructions_89__5:
  .loc 3 572 22
  # block.1: @IR_Block = call(next_328, blocks.1)
  mov rdi, [rbp-17]
  call next_328
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:rax 
  .loc 3 573 34
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__remove_trivial_phi_instructions_89__7)
  mov [rbp-26], rax
  mov [rbp-34], rbx
.LABEL__remove_trivial_phi_instructions_89__7:
  # repeat.6: Boolean = phi(repeat.4, repeat.7)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] 
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] 
  .loc 3 574 20
  # $10.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:rax 
  # jump($10.1, .LABEL__remove_trivial_phi_instructions_89__10, .LABEL__remove_trivial_phi_instructions_89__11)
  test al, al
  mov [rbp-35], al
  jz .LABEL__remove_trivial_phi_instructions_89__11
.LABEL__remove_trivial_phi_instructions_89__10:
  # IR_Phi_Instruction.6: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] IR_Phi_Instruction.6:rax 
  .loc 3 574 49
  # $10.2: Boolean = call(is_338, block_instruction.2, IR_Phi_Instruction.6)
  mov rdi, [rbp-34]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Phi_Instruction.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:rax:[rbp-35] 
  # jump(.LABEL__remove_trivial_phi_instructions_89__11)
  mov [rbp-35], al
.LABEL__remove_trivial_phi_instructions_89__11:
  .loc 3 574 20
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump($10.3, .LABEL__remove_trivial_phi_instructions_89__8, .LABEL__remove_trivial_phi_instructions_89__4)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_89__4
.LABEL__remove_trivial_phi_instructions_89__8:
  .loc 3 575 32
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  mov rax, [rbp-34]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 576 21
  # $13.1: Boolean = call(is_trivial_244, instruction.1)
  mov rdi, rax
  mov [rbp-43], rax
  call is_trivial_244
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:rax $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump($13.1, .LABEL__remove_trivial_phi_instructions_89__12, .LABEL__remove_trivial_phi_instructions_89__13)
  test al, al
  mov [rbp-44], al
  jz .LABEL__remove_trivial_phi_instructions_89__13
.LABEL__remove_trivial_phi_instructions_89__12:
  .loc 3 578 21
  # $14.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rbp-43]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $14.1:rbx 
  .loc 3 578 62
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov r15, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $14.1:rbx $15.1:r15 
  .loc 3 578 21
  # call(remove_values_179, $14.1, $15.1)
  mov rdi, rbx
  mov rsi, r15
  call remove_values_179
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump(.LABEL__remove_trivial_phi_instructions_89__13)
.LABEL__remove_trivial_phi_instructions_89__13:
  .loc 3 580 21
  # $16.1: Boolean = call(is_redundant_243, instruction.1)
  mov rdi, [rbp-43]
  call is_redundant_243
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:rax 
  # jump($16.1, .LABEL__remove_trivial_phi_instructions_89__14, .LABEL__remove_trivial_phi_instructions_89__15)
  test al, al
  mov [rbp-45], al
  jz .LABEL__remove_trivial_phi_instructions_89__15
.LABEL__remove_trivial_phi_instructions_89__14:
  .loc 3 582 34
  # old_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-43]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:rbx 
  .loc 3 583 34
  # $18.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov r15, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:rbx $18.1:r15 
  .loc 3 583 34
  # $19.1: @IR_Values_Map_Entry = load_struct_member($18.1, first_entry)
  mov r14, [r15]
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:rbx $19.1:r14 
  .loc 3 583 34
  # new_value.1: @IR_Value = load_struct_member($19.1, value)
  mov r15, [r14+8]
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:rbx new_value.1:r15 
  .loc 3 584 42
  # $21.1: @List = load_struct_member(old_value.1, user_instructions)
  mov r14, [rbx+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:rbx new_value.1:r15 $21.1:r14 
  .loc 3 584 42
  # user_instructions.1: @List_Iterator = call(create_iterator_324, $21.1)
  mov rdi, r14
  mov [rbp-53], rbx
  mov [rbp-61], r15
  call create_iterator_324
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:rax 
  # jump(.LABEL__remove_trivial_phi_instructions_89__16)
  mov [rbp-69], rax
.LABEL__remove_trivial_phi_instructions_89__16:
  .loc 3 585 28
  # $23.1: Boolean = call(has_next_327, user_instructions.1)
  mov rdi, [rbp-69]
  call has_next_327
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:rax 
  # jump($23.1, .LABEL__remove_trivial_phi_instructions_89__17, .LABEL__remove_trivial_phi_instructions_89__18)
  test al, al
  mov [rbp-70], al
  jz .LABEL__remove_trivial_phi_instructions_89__18
.LABEL__remove_trivial_phi_instructions_89__17:
  .loc 3 586 45
  # user_instruction.1: @IR_Instruction = call(next_328, user_instructions.1)
  mov rdi, [rbp-69]
  call next_328
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] user_instruction.1:rax 
  .loc 3 587 25
  # call(replace_operand_value_175, user_instruction.1, old_value.1, new_value.1)
  mov rdi, rax
  mov rsi, [rbp-53]
  mov rdx, [rbp-61]
  call replace_operand_value_175
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] 
  # jump(.LABEL__remove_trivial_phi_instructions_89__16)
  jmp .LABEL__remove_trivial_phi_instructions_89__16
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] 
.LABEL__remove_trivial_phi_instructions_89__18:
  .loc 3 589 21
  # $26.1: @List = load_struct_member(new_value.1, user_instructions)
  mov rax, [rbp-61]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:rax:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] $26.1:rbx 
  .loc 3 589 21
  # $27.1: @List = call(remove_all_316, $26.1, instruction.1)
  mov rdi, rbx
  mov rsi, [rbp-43]
  call remove_all_316
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] $27.1:rax 
  .loc 3 589 21
  # $28.1: @List = call(prune_317, $27.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] 
  .loc 3 590 21
  # call(remove_166, block.1, instruction.1)
  mov rdi, [rbp-26]
  mov rsi, [rbp-43]
  call remove_166
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] 
  .loc 3 591 21
  # repeat.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_trivial_phi_instructions_89__15)
  mov [rbp-9], al
.LABEL__remove_trivial_phi_instructions_89__15:
  # repeat.7: Boolean = phi(repeat.2, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] $23.1:[rbp-70] repeat.2:[rbp-9] 
  .loc 3 593 37
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] block_instruction.6:rbx:[rbp-34] $23.1:[rbp-70] repeat.2:[rbp-9] 
  # jump(.LABEL__remove_trivial_phi_instructions_89__7)
  mov [rbp-34], rbx
  jmp .LABEL__remove_trivial_phi_instructions_89__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] block_instruction.6:[rbp-34] $23.1:[rbp-70] repeat.2:[rbp-9] 
  # [discarded value]: block_instruction.6
  # [discarded value]: repeat.7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] repeat.2:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $23.1:[rbp-70] 
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] 
  # [discarded value]: user_instructions.1
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] $16.1:[rbp-45] 
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $13.1:[rbp-44] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $10.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [discarded value]: $10.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [discarded value]: block_instruction.2
  # [discarded value]: repeat.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] 
.LABEL__remove_trivial_phi_instructions_89__6:
  .loc 3 597 13
  # $30.1: Boolean = repeat.4 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] $30.1:rax 
  # jump($30.1, .LABEL__remove_trivial_phi_instructions_89__3, .LABEL__remove_trivial_phi_instructions_89__2)
  test al, al
  mov [rbp-19], al
  jz .LABEL__remove_trivial_phi_instructions_89__2
.LABEL__remove_trivial_phi_instructions_89__3:
  # return()
  jmp .LABEL__remove_trivial_phi_instructions_89__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] $30.1:[rbp-19] 
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_trivial_phi_instructions_89__end:
  mov rsp, rbp
  pop rbp
  ret

remove_trivial_phi_instructions_89__stack_frame_size: .word 80

  .loc 3 603 1
  .text
remove_redundant_set_instructions_90:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_set_instructions_90__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_set_instructions_90__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_redundant_set_instructions_90__2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_set_instructions_90__2:
  .loc 3 605 9
  # repeat.1: Boolean = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 607 19
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 607 19
  # $2.1: @List = call(prune_317, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_317
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 607 19
  # blocks.1: @List_Iterator = call(create_iterator_324, $2.1)
  mov rdi, rax
  call create_iterator_324
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(.LABEL__remove_redundant_set_instructions_90__4)
  mov [rbp-17], rax
.LABEL__remove_redundant_set_instructions_90__4:
  # repeat.5: Boolean = phi(repeat.1, repeat.3, repeat.2, repeat.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  .loc 3 608 16
  # $4.1: Boolean = call(has_next_327, blocks.1)
  mov rdi, [rbp-17]
  call has_next_327
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:rax 
  # jump($4.1, .LABEL__remove_redundant_set_instructions_90__5, .LABEL__remove_redundant_set_instructions_90__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_redundant_set_instructions_90__6
.LABEL__remove_redundant_set_instructions_90__5:
  .loc 3 609 22
  # block.1: @IR_Block = call(next_328, blocks.1)
  mov rdi, [rbp-17]
  call next_328
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:rax 
  .loc 3 611 34
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__remove_redundant_set_instructions_90__7)
  mov [rbp-26], rax
  mov [rbp-34], rbx
.LABEL__remove_redundant_set_instructions_90__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.11)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  .loc 3 612 20
  # $8.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:rax 
  # jump($8.1, .LABEL__remove_redundant_set_instructions_90__8, .LABEL__remove_redundant_set_instructions_90__4)
  test al, al
  mov [rbp-35], al
  jz .LABEL__remove_redundant_set_instructions_90__4
.LABEL__remove_redundant_set_instructions_90__8:
  # IR_Set_Instruction.3: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] IR_Set_Instruction.3:rax 
  .loc 3 613 21
  # $9.1: Boolean = call(is_338, block_instruction.2, IR_Set_Instruction.3)
  mov rdi, [rbp-34]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Set_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:rax 
  # jump($9.1, .LABEL__remove_redundant_set_instructions_90__10, .LABEL__remove_redundant_set_instructions_90__11)
  test al, al
  mov [rbp-36], al
  jz .LABEL__remove_redundant_set_instructions_90__11
.LABEL__remove_redundant_set_instructions_90__10:
  .loc 3 614 42
  # block_instruction.1: @IR_Set_Instruction = block_instruction.2
  mov rax, [rbp-34]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:rax 
  .loc 3 615 25
  # $11.1: @IR_Value = call(get_value_216, block_instruction.1)
  mov rdi, rax
  mov [rbp-44], rax
  call get_value_216
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $11.1:rax 
  # IR_Undefined_Value.3: @Object_Type = load_variable(IR_Undefined_Value)
  lea rbx, IR_Undefined_Value[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $11.1:rax IR_Undefined_Value.3:rbx 
  .loc 3 615 25
  # $13.1: Boolean = call(is_338, $11.1, IR_Undefined_Value.3)
  mov rdi, rax
  mov rsi, rbx
  call is_338
  # [discarded value]: IR_Undefined_Value.3
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__remove_redundant_set_instructions_90__12, .LABEL__remove_redundant_set_instructions_90__13)
  test al, al
  mov [rbp-45], al
  jz .LABEL__remove_redundant_set_instructions_90__13
.LABEL__remove_redundant_set_instructions_90__12:
  .loc 3 615 81
  # $14.1: @IR_Variable_Value = load_struct_member(block_instruction.1, result_value)
  mov rax, [rbp-44]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:rax:[rbp-44] $13.1:[rbp-45] $14.1:rbx 
  .loc 3 615 81
  # $15.1: @List = load_struct_member($14.1, user_instructions)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:rax:[rbp-44] $13.1:[rbp-45] $15.1:r15 
  .loc 3 615 81
  # $16.1: Int = load_struct_member($15.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:rax:[rbp-44] $13.1:[rbp-45] $16.1:rbx 
  .loc 3 615 81
  # $13.2: Boolean = $16.1 == 0
  cmp rbx, 0
  sete r15b
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:r15:[rbp-45] 
  # jump(.LABEL__remove_redundant_set_instructions_90__13)
  mov [rbp-45], r15b
.LABEL__remove_redundant_set_instructions_90__13:
  .loc 3 615 25
  # $13.3: Boolean = phi($13.1, $13.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  # jump($13.3, .LABEL__remove_redundant_set_instructions_90__14, .LABEL__remove_redundant_set_instructions_90__11)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_90__11
.LABEL__remove_redundant_set_instructions_90__14:
  .loc 3 616 25
  # call(remove_166, block.1, block_instruction.1)
  mov rdi, [rbp-26]
  mov rsi, [rbp-44]
  call remove_166
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  .loc 3 617 25
  # repeat.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_set_instructions_90__4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_90__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
.LABEL__remove_redundant_set_instructions_90__11:
  .loc 3 621 21
  # $18.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $18.1:rbx $13.2:[rbp-45] $13.3:[rbp-45] 
  .loc 3 621 21
  # $20.1: Boolean = $18.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:r15 $13.2:[rbp-45] $13.3:[rbp-45] 
  # jump($20.1, .LABEL__remove_redundant_set_instructions_90__17, .LABEL__remove_redundant_set_instructions_90__18)
  test r15b, r15b
  mov [rbp-46], r15b
  jz .LABEL__remove_redundant_set_instructions_90__18
.LABEL__remove_redundant_set_instructions_90__17:
  .loc 3 621 63
  # $21.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:rbx 
  .loc 3 621 63
  # $22.1: @List = load_struct_member($21.1, user_instructions)
  mov r15, [rbx+16]
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $22.1:r15 
  .loc 3 621 63
  # $23.1: Int = load_struct_member($22.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $23.1:rbx 
  .loc 3 621 63
  # $20.2: Boolean = $23.1 == 1
  cmp rbx, 1
  sete r15b
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:r15:[rbp-46] 
  # jump(.LABEL__remove_redundant_set_instructions_90__18)
  mov [rbp-46], r15b
.LABEL__remove_redundant_set_instructions_90__18:
  .loc 3 621 21
  # $20.3: Boolean = phi($20.1, $20.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] 
  # jump($20.3, .LABEL__remove_redundant_set_instructions_90__19, .LABEL__remove_redundant_set_instructions_90__20)
  mov al, [rbp-46]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_90__20
.LABEL__remove_redundant_set_instructions_90__19:
  .loc 3 622 41
  # $25.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] $25.1:rbx 
  .loc 3 622 41
  # $26.1: @List = load_struct_member($25.1, user_instructions)
  mov r15, [rbx+16]
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] $26.1:r15 
  .loc 3 622 41
  # user_instruction.1: @IR_Instruction = call(first_322, $26.1)
  mov rdi, r15
  call first_322
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:rax 
  # IR_Set_Instruction.4: @Object_Type = load_variable(IR_Set_Instruction)
  lea rbx, IR_Set_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:rax IR_Set_Instruction.4:rbx 
  .loc 3 623 25
  # $30.1: Boolean = call(is_338, user_instruction.1, IR_Set_Instruction.4)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-54], rax
  call is_338
  # [discarded value]: IR_Set_Instruction.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:rax 
  # jump($30.1, .LABEL__remove_redundant_set_instructions_90__21, .LABEL__remove_redundant_set_instructions_90__22)
  test al, al
  mov [rbp-55], al
  jz .LABEL__remove_redundant_set_instructions_90__22
.LABEL__remove_redundant_set_instructions_90__21:
  .loc 3 623 68
  # $31.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  mov rax, [rbp-54]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:rax:[rbp-54] $30.1:[rbp-55] $31.1:rbx 
  .loc 3 623 68
  # $30.2: Boolean = $31.1 == block.1
  cmp rbx, QWORD PTR [rbp-26]
  sete r15b
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:rax:[rbp-54] $30.1:[rbp-55] $30.2:r15:[rbp-55] 
  # jump(.LABEL__remove_redundant_set_instructions_90__22)
  mov [rbp-55], r15b
.LABEL__remove_redundant_set_instructions_90__22:
  .loc 3 623 25
  # $30.3: Boolean = phi($30.1, $30.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] 
  # jump($30.3, .LABEL__remove_redundant_set_instructions_90__23, .LABEL__remove_redundant_set_instructions_90__20)
  mov al, [rbp-55]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_90__20
.LABEL__remove_redundant_set_instructions_90__23:
  .loc 3 624 45
  # user_instruction.1: @IR_Set_Instruction = user_instruction.1
  mov rax, [rbp-54]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:rax 
  .loc 3 625 29
  # $34.1: @IR_Value = call(get_value_216, user_instruction.1)
  mov rdi, rax
  mov [rbp-63], rax
  call get_value_216
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $34.1:rax 
  .loc 3 625 62
  # $36.1: @IR_Value = load_struct_member(block_instruction.2, result_value)
  mov rbx, [rbp-34]
  mov r15, [rbx+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rbx:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $34.1:rax $36.1:r15 
  .loc 3 625 29
  # $37.1: Boolean = $34.1 == $36.1
  cmp rax, r15
  sete r14b
  # [discarded value]: $36.1
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rbx:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:r14 
  # jump($37.1, .LABEL__remove_redundant_set_instructions_90__25, .LABEL__remove_redundant_set_instructions_90__20)
  test r14b, r14b
  mov [rbp-64], r14b
  jz .LABEL__remove_redundant_set_instructions_90__20
.LABEL__remove_redundant_set_instructions_90__25:
  .loc 3 626 29
  # call(remove_166, block.1, user_instruction.1)
  mov rdi, [rbp-26]
  mov rsi, [rbp-63]
  call remove_166
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:[rbp-64] 
  .loc 3 627 62
  # $38.1: @IR_Variable_Value = load_struct_member(user_instruction.1, result_value)
  mov rax, [rbp-63]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:rax:[rbp-63] $37.1:[rbp-64] $38.1:rbx 
  .loc 3 627 29
  # store_struct_member(block_instruction.2, result_value, $38.1)
  mov r15, [rbp-34]
  mov QWORD PTR [r15+16], rbx
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:rax:[rbp-63] $37.1:[rbp-64] 
  .loc 3 628 29
  # repeat.3: Boolean = true
  mov bl, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:rax:[rbp-63] $37.1:[rbp-64] repeat.3:rbx:[rbp-9] 
  # jump(.LABEL__remove_redundant_set_instructions_90__4)
  mov [rbp-9], bl
  jmp .LABEL__remove_redundant_set_instructions_90__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:[rbp-64] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:[rbp-64] 
.LABEL__remove_redundant_set_instructions_90__20:
  .loc 3 633 37
  # block_instruction.11: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] block_instruction.11:rbx:[rbp-34] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:[rbp-64] 
  # jump(.LABEL__remove_redundant_set_instructions_90__7)
  mov [rbp-34], rbx
  jmp .LABEL__remove_redundant_set_instructions_90__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] block_instruction.11:[rbp-34] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:[rbp-64] 
  # [discarded value]: block_instruction.11
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] $37.1:[rbp-64] 
  # [discarded value]: $37.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] user_instruction.1:[rbp-63] 
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] $30.3:[rbp-55] 
  # [discarded value]: $30.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] $30.2:[rbp-55] 
  # [discarded value]: $30.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] user_instruction.1:[rbp-54] $30.1:[rbp-55] 
  # [discarded value]: $30.1
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] $20.3:[rbp-46] 
  # [discarded value]: $20.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] $20.2:[rbp-46] 
  # [discarded value]: $20.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $20.1:[rbp-46] $13.2:[rbp-45] $13.3:[rbp-45] 
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  # [discarded value]: $13.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [discarded value]: $13.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] block_instruction.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] 
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] 
.LABEL__remove_redundant_set_instructions_90__6:
  .loc 3 637 13
  # $40.1: Boolean = repeat.5 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] $40.1:rax 
  # jump($40.1, .LABEL__remove_redundant_set_instructions_90__3, .LABEL__remove_redundant_set_instructions_90__2)
  test al, al
  mov [rbp-19], al
  jz .LABEL__remove_redundant_set_instructions_90__2
.LABEL__remove_redundant_set_instructions_90__3:
  # return()
  jmp .LABEL__remove_redundant_set_instructions_90__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] $40.1:[rbp-19] 
  # [discarded value]: $40.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_set_instructions_90__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_set_instructions_90__stack_frame_size: .word 64

  .loc 3 643 1
  .text
convert_statement_91:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_statement_91__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_statement_91__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 644 9
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 644 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_statement_91__2, .LABEL__convert_statement_91__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_statement_91__3
.LABEL__convert_statement_91__2:
  .loc 3 645 15
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 3 645 41
  # $4.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r15 
  .loc 3 645 41
  # $5.1: @String = load_struct_member_address($4.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx $5.1:r14 
  .loc 3 645 35
  # $6.1: @String = call(clone_340, $5.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call clone_340
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $6.1:rax 
  .loc 3 645 35
  # $7.1: @String = call(append_349, $6.1, " requires a basic block.")
  mov rdi, rax
  lea rsi, .LABEL__string_190[rip] # " requires a basic block."
  call append_349
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $7.1:rax 
  .loc 3 645 9
  # call(abort_309, $3.1, $7.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_309
  # [discarded value]: $7.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_statement_91__3:
  # AST_Assignment_Statement.2: @Object_Type = load_variable(AST_Assignment_Statement)
  lea rax, AST_Assignment_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] AST_Assignment_Statement.2:rax 
  .loc 3 647 9
  # $8.1: Boolean = call(is_338, statement.1, AST_Assignment_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Assignment_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:rax 
  # jump($8.1, .LABEL__convert_statement_91__4, .LABEL__convert_statement_91__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_statement_91__6
.LABEL__convert_statement_91__4:
  .loc 3 648 43
  # $27.1: @AST_Assignment_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $27.1:rax 
  .loc 3 648 9
  # call(convert_assignment_statement_92, self.1, $27.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_assignment_statement_92
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
  # jump(.LABEL__convert_statement_91__5)
.LABEL__convert_statement_91__5:
  # return()
  jmp .LABEL__convert_statement_91__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
.LABEL__convert_statement_91__6:
  # AST_Block_Statement.2: @Object_Type = load_variable(AST_Block_Statement)
  lea rax, AST_Block_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] AST_Block_Statement.2:rax 
  .loc 3 649 16
  # $9.1: Boolean = call(is_338, statement.1, AST_Block_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Block_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:rax 
  # jump($9.1, .LABEL__convert_statement_91__7, .LABEL__convert_statement_91__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_statement_91__9
.LABEL__convert_statement_91__7:
  .loc 3 650 38
  # $26.1: @AST_Block_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $26.1:rax 
  .loc 3 650 9
  # call(convert_block_statement_93, self.1, $26.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_block_statement_93
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] 
.LABEL__convert_statement_91__9:
  # AST_Break_Statement.2: @Object_Type = load_variable(AST_Break_Statement)
  lea rax, AST_Break_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] AST_Break_Statement.2:rax 
  .loc 3 651 16
  # $10.1: Boolean = call(is_338, statement.1, AST_Break_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Break_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__convert_statement_91__10, .LABEL__convert_statement_91__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_statement_91__12
.LABEL__convert_statement_91__10:
  .loc 3 652 38
  # $25.1: @AST_Break_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $25.1:rax 
  .loc 3 652 9
  # call(convert_break_statement_94, self.1, $25.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_break_statement_94
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__convert_statement_91__12:
  # AST_Expression_Statement.2: @Object_Type = load_variable(AST_Expression_Statement)
  lea rax, AST_Expression_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] AST_Expression_Statement.2:rax 
  .loc 3 653 16
  # $11.1: Boolean = call(is_338, statement.1, AST_Expression_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Expression_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  # jump($11.1, .LABEL__convert_statement_91__13, .LABEL__convert_statement_91__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__convert_statement_91__15
.LABEL__convert_statement_91__13:
  .loc 3 654 43
  # $24.1: @AST_Expression_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $24.1:rax 
  .loc 3 654 9
  # call(convert_expression_statement_95, self.1, $24.1, null)
  mov rdi, [rbp-17]
  mov rsi, rax
  xor rdx, rdx
  call convert_expression_statement_95
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] 
.LABEL__convert_statement_91__15:
  # AST_If_Statement.2: @Object_Type = load_variable(AST_If_Statement)
  lea rax, AST_If_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] AST_If_Statement.2:rax 
  .loc 3 655 16
  # $12.1: Boolean = call(is_338, statement.1, AST_If_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_If_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:rax 
  # jump($12.1, .LABEL__convert_statement_91__16, .LABEL__convert_statement_91__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__convert_statement_91__18
.LABEL__convert_statement_91__16:
  .loc 3 656 35
  # $23.1: @AST_If_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $23.1:rax 
  .loc 3 656 9
  # call(convert_if_statement_96, self.1, $23.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_if_statement_96
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] 
.LABEL__convert_statement_91__18:
  # AST_Loop_Statement.2: @Object_Type = load_variable(AST_Loop_Statement)
  lea rax, AST_Loop_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] AST_Loop_Statement.2:rax 
  .loc 3 657 16
  # $13.1: Boolean = call(is_338, statement.1, AST_Loop_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Loop_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:rax 
  # jump($13.1, .LABEL__convert_statement_91__19, .LABEL__convert_statement_91__21)
  test al, al
  mov [rbp-23], al
  jz .LABEL__convert_statement_91__21
.LABEL__convert_statement_91__19:
  .loc 3 658 37
  # $22.1: @AST_Loop_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $22.1:rax 
  .loc 3 658 9
  # call(convert_loop_statement_97, self.1, $22.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_loop_statement_97
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] 
.LABEL__convert_statement_91__21:
  # AST_Return_Statement.2: @Object_Type = load_variable(AST_Return_Statement)
  lea rax, AST_Return_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] AST_Return_Statement.2:rax 
  .loc 3 659 16
  # $14.1: Boolean = call(is_338, statement.1, AST_Return_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Return_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:rax 
  # jump($14.1, .LABEL__convert_statement_91__22, .LABEL__convert_statement_91__24)
  test al, al
  mov [rbp-24], al
  jz .LABEL__convert_statement_91__24
.LABEL__convert_statement_91__22:
  .loc 3 660 39
  # $21.1: @AST_Return_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $21.1:rax 
  .loc 3 660 9
  # call(convert_return_statement_98, self.1, $21.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_return_statement_98
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] 
.LABEL__convert_statement_91__24:
  # AST_Variable_Statement.2: @Object_Type = load_variable(AST_Variable_Statement)
  lea rax, AST_Variable_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] AST_Variable_Statement.2:rax 
  .loc 3 661 16
  # $15.1: Boolean = call(is_338, statement.1, AST_Variable_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:rax 
  # jump($15.1, .LABEL__convert_statement_91__25, .LABEL__convert_statement_91__27)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_statement_91__27
.LABEL__convert_statement_91__25:
  .loc 3 662 41
  # $20.1: @AST_Variable_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $20.1:rax 
  .loc 3 662 9
  # call(convert_variable_statement_99, self.1, $20.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_variable_statement_99
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] 
.LABEL__convert_statement_91__27:
  # AST_While_Statement.2: @Object_Type = load_variable(AST_While_Statement)
  lea rax, AST_While_Statement[rip]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] AST_While_Statement.2:rax 
  .loc 3 663 16
  # $16.1: Boolean = call(is_338, statement.1, AST_While_Statement.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_While_Statement.2
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:rax 
  # jump($16.1, .LABEL__convert_statement_91__28, .LABEL__convert_statement_91__30)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_statement_91__30
.LABEL__convert_statement_91__28:
  .loc 3 664 38
  # $19.1: @AST_While_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] $19.1:rax 
  .loc 3 664 9
  # call(convert_while_statement_100, self.1, $19.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_while_statement_100
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] 
  # jump(.LABEL__convert_statement_91__5)
  jmp .LABEL__convert_statement_91__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] 
.LABEL__convert_statement_91__30:
  .loc 3 666 15
  # $17.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] $17.1:rbx 
  .loc 3 666 35
  # $18.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] $17.1:rbx $18.1:r15 
  .loc 3 666 9
  # call(abort_141, $17.1, $18.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_statement_91__end:
  mov rsp, rbp
  pop rbp
  ret

convert_statement_91__stack_frame_size: .word 32

  .loc 3 670 1
  .text
convert_assignment_statement_92:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_assignment_statement_92__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_assignment_statement_92__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # assignment_statement.1: @AST_Assignment_Statement = load_variable(assignment_statement)
  # [live values]: self.1:rdi assignment_statement.1:rsi 
  .loc 3 671 9
  # $1.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax 
  # AST_Array_Access_Expression.2: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rbx, AST_Array_Access_Expression[rip]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax AST_Array_Access_Expression.2:rbx 
  .loc 3 671 9
  # $2.1: Boolean = call(is_338, $1.1, AST_Array_Access_Expression.2)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_338
  # [discarded value]: AST_Array_Access_Expression.2
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_assignment_statement_92__2, .LABEL__convert_assignment_statement_92__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_assignment_statement_92__4
.LABEL__convert_assignment_statement_92__2:
  .loc 3 672 36
  # array_access_expression.1: @AST_Array_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_access_expression.1:rbx 
  .loc 3 673 59
  # $70.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_access_expression.1:rbx $70.1:r15 
  .loc 3 673 101
  # $71.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-25], rbx
  mov [rbp-33], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_access_expression.1:[rbp-25] $70.1:[rbp-33] $71.1:rax 
  .loc 3 673 35
  # array_item_index_value.1: @IR_Value = call(convert_expression_101, self.1, $70.1, $71.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $71.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_access_expression.1:[rbp-25] array_item_index_value.1:rax 
  .loc 3 674 58
  # $73.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [discarded value]: array_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:rax $73.1:r15 
  .loc 3 674 26
  # array_address.1: @IR_Value = call(convert_expression_address_102, self.1, $73.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-25], rax
  call convert_expression_address_102
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax 
  .loc 3 675 13
  # $75.1: @IR_Type = load_struct_member(array_address.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax $75.1:rbx 
  # IR_Pointer_Type.12: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax $75.1:rbx IR_Pointer_Type.12:r15 
  .loc 3 675 13
  # $76.1: Boolean = call(is_338, $75.1, IR_Pointer_Type.12)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-33], rax
  call is_338
  # [discarded value]: IR_Pointer_Type.12
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $76.1:rax 
  .loc 3 675 13
  # $77.1: Boolean = $76.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:rbx 
  # jump($77.1, .LABEL__convert_assignment_statement_92__19, .LABEL__convert_assignment_statement_92__20)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__convert_assignment_statement_92__20
.LABEL__convert_assignment_statement_92__19:
  .loc 3 676 19
  # $78.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $78.1:rbx 
  .loc 3 676 50
  # $79.1: @String = call(clone_340, "Not an array pointer")
  lea rdi, .LABEL__string_191[rip] # "Not an array pointer"
  mov [rbp-42], rbx
  call clone_340
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $78.1:[rbp-42] $79.1:rax 
  .loc 3 676 13
  # call(abort_309, $78.1, $79.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_309
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
.LABEL__convert_assignment_statement_92__20:
  .loc 3 678 29
  # $81.1: @IR_Pointer_Type = load_struct_member(array_address.1, type)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $77.1:[rbp-34] $81.1:rbx 
  .loc 3 678 28
  # array_item_type.1: @IR_Type = load_struct_member($81.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $77.1:[rbp-34] array_item_type.1:r15 
  .loc 3 679 42
  # $83.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rbx, [rbp-16]
  mov r14, [rbx+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $77.1:[rbp-34] array_item_type.1:r15 $83.1:r14 
  .loc 3 679 18
  # value.1: @IR_Value = call(convert_expression_101, self.1, $83.1, array_item_type.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov rdx, r15
  call convert_expression_101
  # [discarded value]: $83.1
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] value.1:rax 
  .loc 3 680 21
  # $85.1: @IR_Store_Array_Item_Instruction = call(create_ir_store_array_item_instruction_218, array_address.1, array_item_index_value.1, value.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, rax
  call create_ir_store_array_item_instruction_218
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $85.1:rax 
  .loc 3 680 107
  # $86.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $85.1:rax $86.1:r15 
  .loc 3 680 9
  # $87.1: @IR_Variable_Value = call(append_74, self.1, $85.1, $86.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
  # jump(.LABEL__convert_assignment_statement_92__3)
.LABEL__convert_assignment_statement_92__3:
  # return()
  jmp .LABEL__convert_assignment_statement_92__end
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] 
  # [discarded value]: array_address.1
  # [discarded value]: array_item_index_value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_assignment_statement_92__4:
  .loc 3 681 16
  # $3.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  # AST_Member_Access_Expression.2: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea r15, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx AST_Member_Access_Expression.2:r15 
  .loc 3 681 16
  # $4.1: Boolean = call(is_338, $3.1, AST_Member_Access_Expression.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: AST_Member_Access_Expression.2
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_assignment_statement_92__5, .LABEL__convert_assignment_statement_92__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_assignment_statement_92__7
.LABEL__convert_assignment_statement_92__5:
  .loc 3 682 37
  # member_access_expression.1: @AST_Member_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx 
  .loc 3 683 65
  # $28.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx $28.1:r15 
  .loc 3 683 33
  # object_address_value.1: @IR_Value = call(convert_expression_address_102, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-26], rbx
  call convert_expression_address_102
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax 
  .loc 3 684 13
  # $30.1: @IR_Type = load_struct_member(object_address_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax $30.1:rbx 
  # IR_Pointer_Type.10: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax $30.1:rbx IR_Pointer_Type.10:r15 
  .loc 3 684 13
  # $31.1: Boolean = call(is_338, $30.1, IR_Pointer_Type.10)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-34], rax
  call is_338
  # [discarded value]: IR_Pointer_Type.10
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $31.1:rax 
  .loc 3 684 13
  # $32.1: Boolean = $31.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:rbx 
  # jump($32.1, .LABEL__convert_assignment_statement_92__13, .LABEL__convert_assignment_statement_92__14)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__convert_assignment_statement_92__14
.LABEL__convert_assignment_statement_92__13:
  .loc 3 685 19
  # $33.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:rbx 
  .loc 3 685 50
  # $34.1: @String = call(clone_340, "Not a '")
  lea rdi, .LABEL__string_192[rip] # "Not a '"
  mov [rbp-43], rbx
  call clone_340
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $34.1:rax 
  # IR_Pointer_Type.11: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $34.1:rax IR_Pointer_Type.11:rbx 
  .loc 3 685 74
  # $35.1: @String = load_struct_member_address(IR_Pointer_Type.11, name)
  mov r15, rbx
  add r15, 8
  # [discarded value]: IR_Pointer_Type.11
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $34.1:rax $35.1:r15 
  .loc 3 685 50
  # $36.1: @String = call(append_349, $34.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $36.1:rax 
  .loc 3 685 50
  # $37.1: @String = call(append_349, $36.1, "' value")
  mov rdi, rax
  lea rsi, .LABEL__string_193[rip] # "' value"
  call append_349
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $37.1:rax 
  .loc 3 685 13
  # call(abort_309, $33.1, $37.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_309
  # [discarded value]: $37.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] 
.LABEL__convert_assignment_statement_92__14:
  .loc 3 687 25
  # $39.1: @IR_Pointer_Type = load_struct_member(object_address_value.1, type)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] $39.1:rbx 
  .loc 3 687 24
  # object_type.1: @IR_Type = load_struct_member($39.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] object_type.1:r15 
  # IR_Struct_Type.12: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] object_type.1:r15 IR_Struct_Type.12:rbx 
  .loc 3 688 13
  # $41.1: Boolean = call(is_338, object_type.1, IR_Struct_Type.12)
  mov rdi, r15
  mov rsi, rbx
  mov [rbp-43], r15
  call is_338
  # [discarded value]: IR_Struct_Type.12
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $41.1:rax 
  .loc 3 688 13
  # $42.1: Boolean = $41.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:rbx 
  # jump($42.1, .LABEL__convert_assignment_statement_92__15, .LABEL__convert_assignment_statement_92__16)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__convert_assignment_statement_92__16
.LABEL__convert_assignment_statement_92__15:
  .loc 3 689 19
  # $43.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:rbx 
  .loc 3 689 50
  # $44.1: @String = call(clone_340, "Not a '")
  lea rdi, .LABEL__string_192[rip] # "Not a '"
  mov [rbp-52], rbx
  call clone_340
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $44.1:rax 
  # IR_Struct_Type.13: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $44.1:rax IR_Struct_Type.13:rbx 
  .loc 3 689 74
  # $45.1: @String = load_struct_member_address(IR_Struct_Type.13, name)
  mov r15, rbx
  add r15, 8
  # [discarded value]: IR_Struct_Type.13
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $44.1:rax $45.1:r15 
  .loc 3 689 50
  # $46.1: @String = call(append_349, $44.1, $45.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $46.1:rax 
  .loc 3 689 50
  # $47.1: @String = call(append_349, $46.1, "' value")
  mov rdi, rax
  lea rsi, .LABEL__string_193[rip] # "' value"
  call append_349
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $47.1:rax 
  .loc 3 689 13
  # call(abort_309, $43.1, $47.1)
  mov rdi, [rbp-52]
  mov rsi, rax
  call abort_309
  # [discarded value]: $47.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] 
.LABEL__convert_assignment_statement_92__16:
  .loc 3 691 25
  # struct_type.1: @IR_Struct_Type = object_type.1
  mov rax, [rbp-43]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:rax 
  .loc 3 692 54
  # $49.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-26]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:rax $49.1:r15 
  .loc 3 692 54
  # $50.1: @String = load_struct_member($49.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:rax $50.1:r14 
  .loc 3 692 31
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $50.1)
  mov rdi, rax
  mov rsi, r14
  mov [rbp-52], rax
  call get_member_150
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:rax 
  .loc 3 693 13
  # $52.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:rax $52.1:rbx 
  # jump($52.1, .LABEL__convert_assignment_statement_92__17, .LABEL__convert_assignment_statement_92__18)
  test bl, bl
  mov [rbp-60], rax
  mov [rbp-61], bl
  jz .LABEL__convert_assignment_statement_92__18
.LABEL__convert_assignment_statement_92__17:
  .loc 3 694 13
  # call(dump_struct_members_121, struct_type.1)
  mov rdi, [rbp-52]
  call dump_struct_members_121
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
  .loc 3 695 19
  # $53.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $53.1:rbx 
  .loc 3 695 19
  # $54.1: @Source_Location = load_struct_member($53.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:r15 
  .loc 3 695 72
  # $55.1: @String = load_struct_member(object_type.1, name)
  mov rbx, [rbp-43]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:rbx:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:r15 $55.1:r14 
  .loc 3 695 66
  # $56.1: @String = call(clone_340, $55.1)
  mov rdi, r14
  mov [rbp-69], r15
  call clone_340
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $56.1:rax 
  .loc 3 695 66
  # $57.1: @String = call(append_349, $56.1, " doesn't have a '")
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # " doesn't have a '"
  call append_349
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $57.1:rax 
  .loc 3 695 125
  # $58.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-26]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $57.1:rax $58.1:r15 
  .loc 3 695 125
  # $59.1: @String = load_struct_member($58.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $57.1:rax $59.1:r14 
  .loc 3 695 66
  # $60.1: @String = call(append_349, $57.1, $59.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $59.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $60.1:rax 
  .loc 3 695 66
  # $61.1: @String = call(append_349, $60.1, "' member")
  mov rdi, rax
  lea rsi, .LABEL__string_195[rip] # "' member"
  call append_349
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $61.1:rax 
  .loc 3 695 13
  # call(abort_309, $54.1, $61.1)
  mov rdi, [rbp-69]
  mov rsi, rax
  call abort_309
  # [discarded value]: $61.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
.LABEL__convert_assignment_statement_92__18:
  .loc 3 697 42
  # $62.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $62.1:rbx 
  .loc 3 697 81
  # $63.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-60]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:r15:[rbp-60] $52.1:[rbp-61] $62.1:rbx $63.1:r14 
  .loc 3 697 18
  # value.1: @IR_Value = call(convert_expression_101, self.1, $62.1, $63.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_101
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] value.1:rax 
  .loc 3 698 21
  # $65.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction_223, object_address_value.1, struct_type_member.1, value.1)
  mov rdi, [rbp-34]
  mov rsi, [rbp-60]
  mov rdx, rax
  call create_ir_store_struct_member_instruction_223
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $65.1:rax 
  .loc 3 698 113
  # $66.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $65.1:rax $66.1:r15 
  .loc 3 698 9
  # $67.1: @IR_Variable_Value = call(append_74, self.1, $65.1, $66.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
  # jump(.LABEL__convert_assignment_statement_92__3)
  jmp .LABEL__convert_assignment_statement_92__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] 
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] 
  # [discarded value]: object_address_value.1
  # [discarded value]: member_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_assignment_statement_92__7:
  .loc 3 699 16
  # $5.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  # AST_Variable_Expression.2: @Object_Type = load_variable(AST_Variable_Expression)
  lea r15, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx AST_Variable_Expression.2:r15 
  .loc 3 699 16
  # $6.1: Boolean = call(is_338, $5.1, AST_Variable_Expression.2)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: AST_Variable_Expression.2
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  # jump($6.1, .LABEL__convert_assignment_statement_92__8, .LABEL__convert_assignment_statement_92__10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_assignment_statement_92__10
.LABEL__convert_assignment_statement_92__8:
  .loc 3 700 32
  # variable_expression.1: @AST_Variable_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx 
  .loc 3 701 26
  # $12.1: @Identifier_Token = load_struct_member(variable_expression.1, name)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx $12.1:r15 
  .loc 3 701 26
  # variable_name.1: @String = load_struct_member($12.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx variable_name.1:r14 
  .loc 3 702 21
  # variable.1: @IR_Variable = call(get_variable_65, self.1, variable_name.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-27], rbx
  mov [rbp-35], r14
  call get_variable_65
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:rax 
  .loc 3 703 13
  # $15.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:rax $15.1:rbx 
  # jump($15.1, .LABEL__convert_assignment_statement_92__11, .LABEL__convert_assignment_statement_92__12)
  test bl, bl
  mov [rbp-43], rax
  mov [rbp-44], bl
  jz .LABEL__convert_assignment_statement_92__12
.LABEL__convert_assignment_statement_92__11:
  .loc 3 704 19
  # $16.1: @Source_Location = load_struct_member(variable_expression.1, location)
  mov rax, [rbp-27]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rax:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:rbx 
  .loc 3 704 49
  # $17.1: @String = call(clone_340, "Undeclared variable: ")
  lea rdi, .LABEL__string_196[rip] # "Undeclared variable: "
  mov [rbp-52], rbx
  call clone_340
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:[rbp-52] $17.1:rax 
  .loc 3 704 49
  # $18.1: @String = call(append_349, $17.1, variable_name.1)
  mov rdi, rax
  mov rsi, [rbp-35]
  call append_349
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:[rbp-52] $18.1:rax 
  .loc 3 704 13
  # call(abort_309, $16.1, $18.1)
  mov rdi, [rbp-52]
  mov rsi, rax
  call abort_309
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
.LABEL__convert_assignment_statement_92__12:
  .loc 3 706 42
  # $19.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $19.1:rbx 
  .loc 3 706 81
  # $20.1: @IR_Type = load_struct_member(variable.1, type)
  mov r15, [rbp-43]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:r15:[rbp-43] $15.1:[rbp-44] $19.1:rbx $20.1:r14 
  .loc 3 706 18
  # value.1: @IR_Value = call(convert_expression_101, self.1, $19.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_101
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] value.1:rax 
  .loc 3 707 47
  # $22.1: @IR_Variable_Value = call(create_variable_value_67, self.1, variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-43]
  mov [rbp-52], rax
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] value.1:[rbp-52] $22.1:rax 
  .loc 3 707 21
  # $23.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, $22.1, value.1)
  mov rdi, rax
  mov rsi, [rbp-52]
  call create_ir_set_instruction_215
  # [discarded value]: $22.1
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $23.1:rax 
  .loc 3 707 93
  # $24.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $23.1:rax $24.1:r15 
  .loc 3 707 9
  # $25.1: @IR_Variable_Value = call(append_74, self.1, $23.1, $24.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
  # jump(.LABEL__convert_assignment_statement_92__3)
  jmp .LABEL__convert_assignment_statement_92__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] 
  # [discarded value]: variable.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] 
.LABEL__convert_assignment_statement_92__10:
  .loc 3 709 15
  # $7.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx 
  .loc 3 709 46
  # $8.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx $8.1:r15 
  .loc 3 709 46
  # $9.1: @Object_Type = load_struct_member($8.1, object_type)
  mov r14, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx $9.1:r14 
  .loc 3 709 9
  # call(abort_141, $7.1, $9.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [discarded value]: assignment_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_assignment_statement_92__end:
  mov rsp, rbp
  pop rbp
  ret

convert_assignment_statement_92__stack_frame_size: .word 80

  .loc 3 713 1
  .text
convert_block_statement_93:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_block_statement_93__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_block_statement_93__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Block_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 714 52
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 714 81
  # $2.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rbx, [rdi]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $2.1:rbx 
  .loc 3 714 81
  # $3.1: @List = load_struct_member($2.1, named_values)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $3.1:r15 
  .loc 3 42 24
  # $4.1: @List = new(List)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  .loc 3 714 20
  # $5.1: @IR_Builder_Context = new(IR_Builder_Context)
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, parent, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, variables, $4.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $3.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, named_values, $3.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $5.1:rax 
  .loc 3 714 5
  # store_struct_member(self.1, context, $5.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-16] 
  .loc 3 715 25
  # $6.1: @List = load_struct_member(statement.1, statements)
  mov rax, [rbp-16]
  mov r15, [rax+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-24] $6.1:r15 
  .loc 3 715 25
  # block_statements.1: @List_Iterator = call(create_iterator_324, $6.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] block_statements.1:rax 
  # jump(.LABEL__convert_block_statement_93__2)
  mov [rbp-32], rax
.LABEL__convert_block_statement_93__2:
  .loc 3 716 12
  # $8.1: Boolean = call(has_next_327, block_statements.1)
  mov rdi, [rbp-32]
  call has_next_327
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:rax 
  # jump($8.1, .LABEL__convert_block_statement_93__3, .LABEL__convert_block_statement_93__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_block_statement_93__4
.LABEL__convert_block_statement_93__3:
  .loc 3 717 28
  # block_statement.1: @AST_Statement = call(next_328, block_statements.1)
  mov rdi, [rbp-32]
  call next_328
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] block_statement.1:rax 
  .loc 3 718 9
  # call(convert_statement_91, self.1, block_statement.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_statement_91
  # [discarded value]: block_statement.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # jump(.LABEL__convert_block_statement_93__2)
  jmp .LABEL__convert_block_statement_93__2
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
.LABEL__convert_block_statement_93__4:
  .loc 3 720 20
  # $11.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rbp-24]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] $11.1:rbx 
  .loc 3 720 20
  # $12.1: @IR_Builder_Context = load_struct_member($11.1, parent)
  mov r15, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] $12.1:r15 
  .loc 3 720 5
  # store_struct_member(self.1, context, $12.1)
  mov QWORD PTR [rax], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # return()
  jmp .LABEL__convert_block_statement_93__end
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [discarded value]: block_statements.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_block_statement_93__end:
  mov rsp, rbp
  pop rbp
  ret

convert_block_statement_93__stack_frame_size: .word 48

  .loc 3 723 1
  .text
convert_break_statement_94:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_break_statement_94__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_break_statement_94__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Break_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 724 9
  # $1.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 724 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_break_statement_94__2, .LABEL__convert_break_statement_94__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_break_statement_94__3
.LABEL__convert_break_statement_94__2:
  .loc 3 725 15
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 3 725 9
  # call(abort_309, $3.1, "Break outside of a loop?")
  mov rdi, rbx
  lea rsi, .LABEL__string_197[rip] # "Break outside of a loop?"
  call abort_309
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_break_statement_94__3:
  .loc 3 727 5
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 3 727 36
  # $5.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx $5.1:r15 
  .loc 3 727 36
  # $6.1: @IR_Block = load_struct_member($5.1, end_block)
  mov r14, [r15+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx $6.1:r14 
  .loc 3 727 5
  # $7.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $4.1, $6.1)
  mov rdi, rbx
  mov rsi, r14
  call append_jump_164
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  .loc 3 728 26
  # $8.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:rbx 
  .loc 3 728 26
  # $9.1: @IR_Function = load_struct_member($8.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $9.1:r15 
  .loc 3 728 26
  # $10.1: @IR_Block = call(create_block_168, $9.1)
  mov rdi, r15
  call create_block_168
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $10.1:rax 
  .loc 3 728 5
  # store_struct_member(self.1, current_block, $10.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_break_statement_94__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_break_statement_94__end:
  mov rsp, rbp
  pop rbp
  ret

convert_break_statement_94__stack_frame_size: .word 32

  .loc 3 731 1
  .text
convert_expression_statement_95:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_statement_95__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_statement_95__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Expression_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi statement.1:rsi expected_type.1:rdx 
  .loc 3 732 29
  # $1.1: @AST_Expression = load_struct_member(statement.1, expression)
  mov rax, [rsi+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rdi expected_type.1:rdx $1.1:rax 
  .loc 3 732 5
  # $2.1: @IR_Value = call(convert_expression_101, self.1, $1.1, expected_type.1)
  mov rsi, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: expected_type.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_expression_statement_95__end
  # [live values]: 
.LABEL__convert_expression_statement_95__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_statement_95__stack_frame_size: .word 0

  .loc 3 735 1
  .text
convert_if_statement_96:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_if_statement_96__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_if_statement_96__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_If_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 736 48
  # $1.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 736 80
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 736 24
  # condition_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:rax 
  .loc 3 737 19
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $4.1:r15 
  .loc 3 737 19
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $5.1:r14 
  .loc 3 737 19
  # true_block.1: @IR_Block = call(create_block_168, $5.1)
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_168
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax 
  .loc 3 738 18
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $7.1:r15 
  .loc 3 738 18
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $8.1:r14 
  .loc 3 738 18
  # end_block.1: @IR_Block = call(create_block_168, $8.1)
  mov rdi, r14
  mov [rbp-40], rax
  call create_block_168
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax 
  .loc 3 739 9
  # $10.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $10.1:r15 
  .loc 3 739 9
  # $11.1: Boolean = $10.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $11.1:r14 
  # jump($11.1, .LABEL__convert_if_statement_96__2, .LABEL__convert_if_statement_96__4)
  test r14b, r14b
  mov [rbp-48], rax
  mov [rbp-49], r14b
  jz .LABEL__convert_if_statement_96__4
.LABEL__convert_if_statement_96__2:
  .loc 3 740 24
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $14.1:rbx 
  .loc 3 740 24
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $15.1:r15 
  .loc 3 740 24
  # false_block.1: @IR_Block = call(create_block_168, $15.1)
  mov rdi, r15
  call create_block_168
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:rax 
  .loc 3 741 9
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:rax $17.1:r15 
  .loc 3 741 9
  # $18.1: @IR_Conditional_Jump_Instruction = call(append_jump_165, $17.1, condition_value.1, true_block.1, false_block.1)
  mov rdi, r15
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, rax
  mov [rbp-57], rax
  call append_jump_165
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:[rbp-57] 
  .loc 3 742 9
  # store_struct_member(self.1, current_block, false_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: false_block.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  .loc 3 743 32
  # $19.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $19.1:r15 
  .loc 3 743 9
  # call(convert_statement_91, self.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call convert_statement_91
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  .loc 3 744 13
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $20.1:rbx 
  .loc 3 744 13
  # $21.1: @IR_Instruction = load_struct_member($20.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $21.1:r15 
  .loc 3 744 13
  # $22.1: Boolean = call(is_exit_instruction_173, $21.1)
  mov rdi, r15
  call is_exit_instruction_173
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $22.1:rax 
  .loc 3 744 13
  # $23.1: Boolean = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:rbx 
  # jump($23.1, .LABEL__convert_if_statement_96__5, .LABEL__convert_if_statement_96__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__convert_if_statement_96__3
.LABEL__convert_if_statement_96__5:
  .loc 3 745 13
  # $24.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $24.1:rbx 
  .loc 3 745 13
  # $25.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $24.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_164
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # jump(.LABEL__convert_if_statement_96__3)
.LABEL__convert_if_statement_96__3:
  .loc 3 750 5
  # store_struct_member(self.1, current_block, true_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  .loc 3 751 28
  # $26.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  mov r15, [rbp-8]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-24] statement.1:r15:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $26.1:r14 
  .loc 3 751 5
  # call(convert_statement_91, self.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call convert_statement_91
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  .loc 3 752 9
  # $27.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $27.1:rbx 
  .loc 3 752 9
  # $28.1: @IR_Instruction = load_struct_member($27.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $28.1:r15 
  .loc 3 752 9
  # $29.1: Boolean = call(is_exit_instruction_173, $28.1)
  mov rdi, r15
  call is_exit_instruction_173
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $29.1:rax 
  .loc 3 752 9
  # $30.1: Boolean = $29.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:rbx 
  # jump($30.1, .LABEL__convert_if_statement_96__7, .LABEL__convert_if_statement_96__8)
  test bl, bl
  mov [rbp-51], bl
  jz .LABEL__convert_if_statement_96__8
.LABEL__convert_if_statement_96__7:
  .loc 3 753 9
  # $31.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] $31.1:rbx 
  .loc 3 753 9
  # $32.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $31.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_164
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # jump(.LABEL__convert_if_statement_96__8)
.LABEL__convert_if_statement_96__8:
  .loc 3 755 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rbx:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # return()
  jmp .LABEL__convert_if_statement_96__end
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
.LABEL__convert_if_statement_96__4:
  .loc 3 748 9
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $12.1:rbx 
  .loc 3 748 9
  # $13.1: @IR_Conditional_Jump_Instruction = call(append_jump_165, $12.1, condition_value.1, true_block.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, [rbp-48]
  call append_jump_165
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  # jump(.LABEL__convert_if_statement_96__3)
  jmp .LABEL__convert_if_statement_96__3
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [discarded value]: end_block.1
  # [discarded value]: true_block.1
  # [discarded value]: condition_value.1
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_if_statement_96__end:
  mov rsp, rbp
  pop rbp
  ret

convert_if_statement_96__stack_frame_size: .word 64

  .loc 3 758 1
  .text
convert_loop_statement_97:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_loop_statement_97__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_loop_statement_97__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Loop_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 759 19
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 759 19
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  .loc 3 759 19
  # loop_block.1: @IR_Block = call(create_block_168, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_168
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax 
  .loc 3 760 18
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $4.1:r15 
  .loc 3 760 18
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $5.1:r14 
  .loc 3 760 18
  # end_block.1: @IR_Block = call(create_block_168, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_168
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax 
  .loc 3 761 5
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 761 5
  # $8.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $7.1, loop_block.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_jump_164
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 762 5
  # store_struct_member(self.1, current_block, loop_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 763 46
  # $9.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] $9.1:r15 
  .loc 3 763 25
  # $10.1: @IR_Loop = new(IR_Loop)
  mov [rbp-40], r15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, parent, $9.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, end_block, end_block.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rbx:[rbp-32] $10.1:rax 
  .loc 3 763 5
  # store_struct_member(self.1, current_loop, $10.1)
  mov r15, [rbp-8]
  mov QWORD PTR [r15+40], rax
  # [discarded value]: $10.1
  # [live values]: self.1:r15:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rbx:[rbp-32] 
  .loc 3 764 34
  # $11.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rax, [rbp-16]
  mov r14, [rax+16]
  # [discarded value]: statement.1
  # [live values]: self.1:r15:[rbp-8] loop_block.1:[rbp-24] end_block.1:rbx:[rbp-32] $11.1:r14 
  .loc 3 764 5
  # call(convert_block_statement_93, self.1, $11.1)
  mov rdi, r15
  mov rsi, r14
  call convert_block_statement_93
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 765 5
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] $12.1:rbx 
  .loc 3 765 5
  # $13.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $12.1, loop_block.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_164
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: loop_block.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-32] 
  .loc 3 766 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  .loc 3 767 25
  # $14.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 3 767 25
  # $15.1: @IR_Loop = load_struct_member($14.1, parent)
  mov r15, [rbx]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] $15.1:r15 
  .loc 3 767 5
  # store_struct_member(self.1, current_loop, $15.1)
  mov QWORD PTR [rax+40], r15
  # [discarded value]: $15.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_loop_statement_97__end
  # [live values]: 
.LABEL__convert_loop_statement_97__end:
  mov rsp, rbp
  pop rbp
  ret

convert_loop_statement_97__stack_frame_size: .word 48

  .loc 3 770 1
  .text
convert_return_statement_98:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_return_statement_98__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_return_statement_98__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Return_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 771 9
  # $1.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 771 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_return_statement_98__2, .LABEL__convert_return_statement_98__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_return_statement_98__4
.LABEL__convert_return_statement_98__2:
  .loc 3 772 49
  # $6.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 3 772 77
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov r15, [rbp-17]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $7.1:r14 
  .loc 3 772 77
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r13, [r14+16]
  # [discarded value]: $7.1
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $8.1:r13 
  .loc 3 772 77
  # $9.1: @IR_Type = load_struct_member($8.1, return_type)
  mov r14, [r13+40]
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $9.1:r14 
  .loc 3 772 25
  # return_value.1: @IR_Value = call(convert_expression_101, self.1, $6.1, $9.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_101
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] return_value.1:rax 
  .loc 3 773 21
  # $11.1: @IR_Return_Instruction = call(create_ir_return_instruction_212, return_value.1)
  mov rdi, rax
  call create_ir_return_instruction_212
  # [discarded value]: return_value.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $11.1:rax 
  .loc 3 773 65
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] statement.1:rbx:[rbp-9] $2.1:[rbp-1] $11.1:rax $12.1:r15 
  .loc 3 773 9
  # $13.1: @IR_Variable_Value = call(append_74, self.1, $11.1, $12.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__convert_return_statement_98__3)
.LABEL__convert_return_statement_98__3:
  .loc 3 777 26
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $14.1:rbx 
  .loc 3 777 26
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $15.1:r15 
  .loc 3 777 26
  # $16.1: @IR_Block = call(create_block_168, $15.1)
  mov rdi, r15
  call create_block_168
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 3 777 5
  # store_struct_member(self.1, current_block, $16.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_return_statement_98__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_return_statement_98__4:
  .loc 3 775 21
  # $3.1: @IR_Return_Instruction = call(create_ir_return_instruction_212, null)
  xor rdi, rdi
  call create_ir_return_instruction_212
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:rax 
  .loc 3 775 57
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] statement.1:rbx:[rbp-9] $2.1:[rbp-1] $3.1:rax $4.1:r15 
  .loc 3 775 9
  # $5.1: @IR_Variable_Value = call(append_74, self.1, $3.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__convert_return_statement_98__3)
  jmp .LABEL__convert_return_statement_98__3
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_return_statement_98__end:
  mov rsp, rbp
  pop rbp
  ret

convert_return_statement_98__stack_frame_size: .word 32

  .loc 3 780 1
  .text
convert_variable_statement_99:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_statement_99__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_statement_99__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  .loc 3 781 22
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi variable_statement.1:rsi $1.1:rax 
  .loc 3 781 22
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx 
  .loc 3 782 5
  # variable_type.1: @IR_Type = null
  xor rax, rax
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx variable_type.1:rax 
  .loc 3 783 9
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov r15, [rsi+24]
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx variable_type.1:rax $3.1:r15 
  .loc 3 783 9
  # $4.1: Boolean = $3.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx variable_type.1:rax $4.1:r14 
  # jump($4.1, .LABEL__convert_variable_statement_99__2, .LABEL__convert_variable_statement_99__3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-33], r14b
  jz .LABEL__convert_variable_statement_99__3
.LABEL__convert_variable_statement_99__2:
  .loc 3 784 49
  # $5.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] $5.1:rbx 
  .loc 3 784 25
  # variable_type.2: @IR_Type = call(convert_value_type_78, self.1, $5.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call convert_value_type_78
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:rax:[rbp-8] 
  # jump(.LABEL__convert_variable_statement_99__3)
  mov [rbp-8], rax
.LABEL__convert_variable_statement_99__3:
  # variable_type.15: @IR_Type = phi(variable_type.1, variable_type.2)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] 
  .loc 3 786 5
  # variable_value.1: @IR_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:rax 
  .loc 3 787 9
  # $7.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] variable_statement.1:rbx:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:rax $7.1:r15 
  .loc 3 787 9
  # $8.1: Boolean = $7.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rbx:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:rax $8.1:r14 
  # jump($8.1, .LABEL__convert_variable_statement_99__4, .LABEL__convert_variable_statement_99__5)
  test r14b, r14b
  mov [rbp-41], rax
  mov [rbp-42], r14b
  jz .LABEL__convert_variable_statement_99__5
.LABEL__convert_variable_statement_99__4:
  .loc 3 788 50
  # $9.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] $9.1:rbx 
  .loc 3 788 26
  # variable_value.2: @IR_Value = call(convert_expression_101, self.1, $9.1, variable_type.15)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov rdx, [rbp-8]
  call convert_expression_101
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:rax:[rbp-41] 
  # jump(.LABEL__convert_variable_statement_99__5)
  mov [rbp-41], rax
.LABEL__convert_variable_statement_99__5:
  # variable_value.13: @IR_Value = phi(variable_value.1, variable_value.2)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] 
  .loc 3 790 9
  # $11.1: Boolean = variable_type.15 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:rax 
  # jump($11.1, .LABEL__convert_variable_statement_99__6, .LABEL__convert_variable_statement_99__8)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_variable_statement_99__8
.LABEL__convert_variable_statement_99__6:
  .loc 3 791 13
  # $19.1: Boolean = variable_value.13 != null
  cmp QWORD PTR [rbp-41], 0
  setne al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:rax 
  # jump($19.1, .LABEL__convert_variable_statement_99__13, .LABEL__convert_variable_statement_99__7)
  test al, al
  mov [rbp-44], al
  jz .LABEL__convert_variable_statement_99__7
.LABEL__convert_variable_statement_99__13:
  .loc 3 792 39
  # $20.1: @IR_Type = load_struct_member(variable_value.13, type)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rax:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $20.1:rbx 
  .loc 3 792 17
  # $21.1: Boolean = call(accepts_71, variable_type.15, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call accepts_71
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $21.1:rax 
  .loc 3 792 17
  # $22.1: Boolean = $21.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:rbx 
  # jump($22.1, .LABEL__convert_variable_statement_99__15, .LABEL__convert_variable_statement_99__16)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__convert_variable_statement_99__16
.LABEL__convert_variable_statement_99__15:
  .loc 3 793 23
  # $23.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $23.1:rbx 
  .loc 3 793 23
  # $24.1: @Source_Location = load_struct_member($23.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:r15 
  .loc 3 793 69
  # $25.1: @String = call(clone_340, "Cannot assign a '")
  lea rdi, .LABEL__string_198[rip] # "Cannot assign a '"
  mov [rbp-53], r15
  call clone_340
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $25.1:rax 
  .loc 3 793 103
  # $26.1: @IR_Type = load_struct_member(variable_value.13, type)
  mov rbx, [rbp-41]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rbx:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $25.1:rax $26.1:r15 
  .loc 3 793 103
  # $27.1: @String = load_struct_member($26.1, name)
  mov r14, [r15+8]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rbx:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $25.1:rax $27.1:r14 
  .loc 3 793 69
  # $28.1: @String = call(append_349, $25.1, $27.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $27.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $28.1:rax 
  .loc 3 793 69
  # $29.1: @String = call(append_349, $28.1, "' value to a '")
  mov rdi, rax
  lea rsi, .LABEL__string_199[rip] # "' value to a '"
  call append_349
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $29.1:rax 
  .loc 3 793 161
  # $30.1: @String = load_struct_member(variable_type.15, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:rbx:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $29.1:rax $30.1:r15 
  .loc 3 793 69
  # $31.1: @String = call(append_349, $29.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $31.1:rax 
  .loc 3 793 69
  # $32.1: @String = call(append_349, $31.1, "' variable")
  mov rdi, rax
  lea rsi, .LABEL__string_200[rip] # "' variable"
  call append_349
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $24.1:[rbp-53] $32.1:rax 
  .loc 3 793 17
  # call(abort_309, $24.1, $32.1)
  mov rdi, [rbp-53]
  mov rsi, rax
  call abort_309
  # [discarded value]: $32.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] 
.LABEL__convert_variable_statement_99__16:
  .loc 3 795 38
  # $33.1: @IR_Type = load_struct_member(variable_value.13, type)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rax:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $33.1:rbx 
  .loc 3 795 17
  # $34.1: Boolean = call(equals_144, variable_type.15, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call equals_144
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:rax 
  # jump($34.1, .LABEL__convert_variable_statement_99__17, .LABEL__convert_variable_statement_99__7)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_variable_statement_99__7
.LABEL__convert_variable_statement_99__17:
  # stderr.2: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] stderr.2:stderr[rip] 
  .loc 3 796 30
  # $35.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] stderr.2:stderr[rip] $35.1:rbx 
  .loc 3 796 30
  # $36.1: @Source_Location = load_struct_member($35.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] stderr.2:stderr[rip] $36.1:r15 
  .loc 3 796 17
  # $37.1: @FILE = call(write_312, stderr.2, $36.1)
  mov rdi, stderr[rip]
  mov rsi, r15
  call write_312
  # [discarded value]: $36.1
  # [discarded value]: stderr.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] $37.1:rax 
  .loc 3 796 17
  # $38.1: @FILE = call(write_332, $37.1, ": Redundant type declaration")
  mov rdi, rax
  lea rsi, .LABEL__string_201[rip] # ": Redundant type declaration"
  call write_332
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] $38.1:rax 
  .loc 3 796 17
  # $39.1: @FILE = call(end_line_335, $38.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] 
  # jump(.LABEL__convert_variable_statement_99__7)
.LABEL__convert_variable_statement_99__7:
  # variable_type.9: @IR_Type = phi(variable_type.5, variable_type.15)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $22.1:[rbp-45] $34.1:[rbp-46] 
  # IR_Any_Type.3: @Object_Type = load_variable(IR_Any_Type)
  lea rax, IR_Any_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] IR_Any_Type.3:rax $22.1:[rbp-45] $34.1:[rbp-46] 
  .loc 3 808 9
  # $41.1: Boolean = call(is_338, variable_type.9, IR_Any_Type.3)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Any_Type.3
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:rax $22.1:[rbp-45] $34.1:[rbp-46] 
  # jump($41.1, .LABEL__convert_variable_statement_99__22, .LABEL__convert_variable_statement_99__21)
  test al, al
  mov [rbp-47], al
  jz .LABEL__convert_variable_statement_99__21
.LABEL__convert_variable_statement_99__22:
  .loc 3 808 9
  # $43.1: Boolean = phi($41.1, $41.2)
  mov al, [rbp-47]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.1:rax 
  # jump($43.1, .LABEL__convert_variable_statement_99__20, .LABEL__convert_variable_statement_99__19)
  test al, al
  mov [rbp-48], al
  jz .LABEL__convert_variable_statement_99__19
.LABEL__convert_variable_statement_99__20:
  .loc 3 808 9
  # $43.3: Boolean = phi($43.1, $43.2)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] 
  # jump($43.3, .LABEL__convert_variable_statement_99__23, .LABEL__convert_variable_statement_99__24)
  mov al, [rbp-48]
  test al, al
  jz .LABEL__convert_variable_statement_99__24
.LABEL__convert_variable_statement_99__23:
  .loc 3 809 15
  # $45.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $45.1:rbx 
  .loc 3 809 44
  # $46.1: @String = call(clone_340, "Invalid variable type: ")
  lea rdi, .LABEL__string_202[rip] # "Invalid variable type: "
  mov [rbp-56], rbx
  call clone_340
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $45.1:[rbp-56] $46.1:rax 
  .loc 3 809 84
  # $47.1: @String = load_struct_member(variable_type.9, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:rbx:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $45.1:[rbp-56] $46.1:rax $47.1:r15 
  .loc 3 809 44
  # $48.1: @String = call(append_349, $46.1, $47.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $45.1:[rbp-56] $48.1:rax 
  .loc 3 809 9
  # call(abort_309, $45.1, $48.1)
  mov rdi, [rbp-56]
  mov rsi, rax
  call abort_309
  # [discarded value]: $48.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] 
.LABEL__convert_variable_statement_99__24:
  .loc 5 389 21
  # $49.1: @List = new(List)
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:rax 
  # store_struct_member($49.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:rax 
  # store_struct_member($49.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:rax 
  # store_struct_member($49.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:rax 
  .loc 3 811 17
  # $50.1: @IR_Variable = new(IR_Variable)
  mov [rbp-56], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Variable[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:[rbp-56] $50.1:rax 
  # store_struct_member($50.1, name, variable_name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:[rbp-56] $50.1:rax 
  # store_struct_member($50.1, type, variable_type.9)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:r15:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $49.1:[rbp-56] $50.1:rax 
  # store_struct_member($50.1, values, $49.1)
  mov r14, [rbp-56]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:r15:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] $50.1:rax 
  .loc 3 811 5
  # variable.1: @IR_Variable = $50.1
  mov [rbp-56], rax
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:r15:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:rax 
  .loc 3 812 5
  # $51.1: @IR_Variable = call(add_variable_64, self.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov [rbp-56], rax
  call add_variable_64
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] 
  .loc 3 813 9
  # $52.1: Boolean = variable_value.13 == null
  cmp QWORD PTR [rbp-41], 0
  sete al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:rax 
  # jump($52.1, .LABEL__convert_variable_statement_99__25, .LABEL__convert_variable_statement_99__26)
  test al, al
  mov [rbp-57], al
  jz .LABEL__convert_variable_statement_99__26
.LABEL__convert_variable_statement_99__25:
  .loc 5 181 48
  # $53.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_undefined_value_155)
  lea rax, dump_ir_undefined_value_155[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:rax 
  .loc 5 158 32
  # $54.1: @List = new(List)
  mov [rbp-65], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $54.1:rax 
  # store_struct_member($54.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $54.1:rax 
  # store_struct_member($54.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $54.1:rax 
  # store_struct_member($54.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $54.1:rax 
  .loc 3 814 26
  # $55.1: @IR_Undefined_Value = new(IR_Undefined_Value)
  mov [rbp-73], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $54.1:[rbp-73] $55.1:rax 
  # store_struct_member($55.1, type, variable_type.9)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:rbx:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $54.1:[rbp-73] $55.1:rax 
  # store_struct_member($55.1, user_instructions, $54.1)
  mov r15, [rbp-73]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:rbx:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $53.1:[rbp-65] $55.1:rax 
  # store_struct_member($55.1, dump, $53.1)
  mov r15, [rbp-65]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:rbx:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] $55.1:rax 
  .loc 3 814 9
  # variable_value.11: @IR_Value = $55.1
  mov [rbp-65], rax
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:rbx:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:rax:[rbp-41] 
  # jump(.LABEL__convert_variable_statement_99__26)
  mov [rbp-41], rax
.LABEL__convert_variable_statement_99__26:
  # variable_value.12: @IR_Value = phi(variable_value.11, variable_value.13)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] variable_value.12:[rbp-41] 
  .loc 3 816 43
  # $56.1: @IR_Variable_Value = call(create_variable_value_67, self.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-56]
  call create_variable_value_67
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] variable_value.12:[rbp-41] $56.1:rax 
  .loc 3 816 17
  # $57.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, $56.1, variable_value.12)
  mov rdi, rax
  mov rsi, [rbp-41]
  call create_ir_set_instruction_215
  # [discarded value]: $56.1
  # [discarded value]: variable_value.12
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] $57.1:rax 
  .loc 3 816 98
  # $58.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:rbx:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] $57.1:rax $58.1:r15 
  .loc 3 816 5
  # $59.1: @IR_Variable_Value = call(append_74, self.1, $57.1, $58.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] 
  # return()
  jmp .LABEL__convert_variable_statement_99__end
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] variable_value.11:[rbp-41] 
  # [discarded value]: variable_value.11
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] $52.1:[rbp-57] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] variable.1:[rbp-56] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.3:[rbp-48] $43.1:[rbp-48] 
  # [discarded value]: $43.3
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.1:[rbp-48] 
.LABEL__convert_variable_statement_99__19:
  # IR_Undefined_Type.3: @Object_Type = load_variable(IR_Undefined_Type)
  lea rax, IR_Undefined_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] IR_Undefined_Type.3:rax $43.1:[rbp-48] 
  .loc 3 808 79
  # $43.2: Boolean = call(is_338, variable_type.9, IR_Undefined_Type.3)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Undefined_Type.3
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.2:rax:[rbp-48] $43.1:[rbp-48] 
  # jump(.LABEL__convert_variable_statement_99__20)
  mov [rbp-48], al
  jmp .LABEL__convert_variable_statement_99__20
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.2:[rbp-48] $43.1:[rbp-48] 
  # [discarded value]: $43.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $43.1:[rbp-48] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] 
.LABEL__convert_variable_statement_99__21:
  # IR_Nothing_Type.4: @Object_Type = load_variable(IR_Nothing_Type)
  lea rax, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] IR_Nothing_Type.4:rax 
  .loc 3 808 42
  # $41.2: Boolean = call(is_338, variable_type.9, IR_Nothing_Type.4)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Nothing_Type.4
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $41.2:rax:[rbp-47] 
  # jump(.LABEL__convert_variable_statement_99__22)
  mov [rbp-47], al
  jmp .LABEL__convert_variable_statement_99__22
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] $41.2:[rbp-47] 
  # [discarded value]: $41.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] variable_type.9:[rbp-8] $41.1:[rbp-47] $22.1:[rbp-45] $34.1:[rbp-46] 
  # [discarded value]: $41.1
  # [discarded value]: variable_type.9
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] $34.1:[rbp-46] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] $22.1:[rbp-45] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $19.1:[rbp-44] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] 
.LABEL__convert_variable_statement_99__8:
  .loc 3 800 13
  # $12.1: Boolean = variable_value.13 == null
  cmp QWORD PTR [rbp-41], 0
  sete al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:rax 
  # jump($12.1, .LABEL__convert_variable_statement_99__9, .LABEL__convert_variable_statement_99__10)
  test al, al
  mov [rbp-44], al
  jz .LABEL__convert_variable_statement_99__10
.LABEL__convert_variable_statement_99__9:
  .loc 3 801 19
  # $13.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:rbx 
  .loc 3 801 13
  # call(abort_309, $13.1, "Invalid state")
  mov rdi, rbx
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_309
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] 
.LABEL__convert_variable_statement_99__10:
  .loc 3 803 13
  # $14.1: @IR_Type = load_struct_member(variable_value.13, type)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rax:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $14.1:rbx 
  # IR_Null_Type.6: @Object_Type = load_variable(IR_Null_Type)
  lea r15, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rax:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $14.1:rbx IR_Null_Type.6:r15 
  .loc 3 803 13
  # $15.1: Boolean = call(is_338, $14.1, IR_Null_Type.6)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Null_Type.6
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:rax 
  # jump($15.1, .LABEL__convert_variable_statement_99__11, .LABEL__convert_variable_statement_99__12)
  test al, al
  mov [rbp-45], al
  jz .LABEL__convert_variable_statement_99__12
.LABEL__convert_variable_statement_99__11:
  .loc 3 804 19
  # $16.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:[rbp-45] $16.1:rbx 
  .loc 3 804 19
  # $17.1: @Source_Location = load_struct_member($16.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:[rbp-45] $17.1:r15 
  .loc 3 804 13
  # call(abort_309, $17.1, "Cannot infer type from null value")
  mov rdi, r15
  lea rsi, .LABEL__string_203[rip] # "Cannot infer type from null value"
  call abort_309
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:[rbp-45] 
.LABEL__convert_variable_statement_99__12:
  .loc 3 806 25
  # variable_type.5: @IR_Type = load_struct_member(variable_value.13, type)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:rax:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:[rbp-45] variable_type.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_variable_statement_99__7)
  mov [rbp-8], rbx
  jmp .LABEL__convert_variable_statement_99__7
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:[rbp-45] variable_type.5:[rbp-8] 
  # [discarded value]: variable_type.5
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] $15.1:[rbp-45] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] $12.1:[rbp-44] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] $11.1:[rbp-43] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] variable_value.13:[rbp-41] 
  # [discarded value]: variable_value.13
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] variable_value.2:[rbp-41] 
  # [discarded value]: variable_value.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-41] 
  # [discarded value]: variable_value.1
  # [discarded value]: variable_type.15
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] variable_type.2:[rbp-8] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] 
  # [discarded value]: variable_type.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_statement_99__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_statement_99__stack_frame_size: .word 80

  .loc 3 819 1
  .text
convert_while_statement_100:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_while_statement_100__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_while_statement_100__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_While_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 820 24
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 820 24
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  .loc 3 820 24
  # condition_block.1: @IR_Block = call(create_block_168, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_168
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax 
  .loc 3 821 19
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $4.1:r15 
  .loc 3 821 19
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $5.1:r14 
  .loc 3 821 19
  # loop_block.1: @IR_Block = call(create_block_168, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_168
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax 
  .loc 3 822 18
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $7.1:r15 
  .loc 3 822 18
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $8.1:r14 
  .loc 3 822 18
  # end_block.1: @IR_Block = call(create_block_168, $8.1)
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_168
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax 
  .loc 3 823 5
  # $10.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax $10.1:r15 
  .loc 3 823 5
  # $11.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $10.1, condition_block.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-40], rax
  call append_jump_164
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 824 5
  # store_struct_member(self.1, current_block, condition_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 825 48
  # $12.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] statement.1:r15:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:r14 
  .loc 3 825 80
  # $13.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, rax
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-48], r14
  call get_named_type_63
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:[rbp-48] $13.1:rax 
  .loc 3 825 24
  # condition_value.1: @IR_Value = call(convert_expression_101, self.1, $12.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax 
  .loc 3 826 5
  # $15.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax $15.1:r15 
  .loc 3 826 5
  # $16.1: @IR_Conditional_Jump_Instruction = call(append_jump_165, $15.1, condition_value.1, loop_block.1, end_block.1)
  mov rdi, r15
  mov rsi, rax
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call append_jump_165
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 827 5
  # store_struct_member(self.1, current_block, loop_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: loop_block.1
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  .loc 3 828 46
  # $17.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:rbx 
  .loc 3 828 25
  # $18.1: @IR_Loop = new(IR_Loop)
  mov [rbp-48], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, parent, $17.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $18.1:rax 
  # store_struct_member($18.1, end_block, end_block.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:rbx:[rbp-40] $18.1:rax 
  .loc 3 828 5
  # store_struct_member(self.1, current_loop, $18.1)
  mov r15, [rbp-8]
  mov QWORD PTR [r15+40], rax
  # [discarded value]: $18.1
  # [live values]: self.1:r15:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:rbx:[rbp-40] 
  .loc 3 829 34
  # $19.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rax, [rbp-16]
  mov r14, [rax+24]
  # [discarded value]: statement.1
  # [live values]: self.1:r15:[rbp-8] condition_block.1:[rbp-24] end_block.1:rbx:[rbp-40] $19.1:r14 
  .loc 3 829 5
  # call(convert_block_statement_93, self.1, $19.1)
  mov rdi, r15
  mov rsi, r14
  call convert_block_statement_93
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  .loc 3 830 5
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] $20.1:rbx 
  .loc 3 830 5
  # $21.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $20.1, condition_block.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_164
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: condition_block.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-40] 
  .loc 3 831 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  .loc 3 832 25
  # $22.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $22.1:rbx 
  .loc 3 832 25
  # $23.1: @IR_Loop = load_struct_member($22.1, parent)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] $23.1:r15 
  .loc 3 832 5
  # store_struct_member(self.1, current_loop, $23.1)
  mov QWORD PTR [rax+40], r15
  # [discarded value]: $23.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_while_statement_100__end
  # [live values]: 
.LABEL__convert_while_statement_100__end:
  mov rsp, rbp
  pop rbp
  ret

convert_while_statement_100__stack_frame_size: .word 48

  .loc 3 835 1
  .text
convert_expression_101:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_101__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_101__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  # AST_Add_Expression.2: @Object_Type = load_variable(AST_Add_Expression)
  lea rax, AST_Add_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx AST_Add_Expression.2:rax 
  .loc 3 837 9
  # $1.1: Boolean = call(is_338, expression.1, AST_Add_Expression.2)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_338
  # [discarded value]: AST_Add_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__convert_expression_101__2, .LABEL__convert_expression_101__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_expression_101__4
.LABEL__convert_expression_101__2:
  .loc 3 838 45
  # $68.1: @AST_Add_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $68.1:rax 
  .loc 3 838 17
  # value.23: @IR_Value = call(convert_add_expression_103, self.1, $68.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_add_expression_103
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:rax 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
.LABEL__convert_expression_101__3:
  # value.26: @IR_Value = phi(value.23, value.22, value.21, value.20, value.19, value.18, value.17, value.16, value.15, value.14, value.13, value.12, value.11, value.10, value.9, value.8, value.7, value.6, value.5, value.4, value.3, value.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] 
  .loc 3 884 9
  # $71.1: Boolean = expected_type.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:rax 
  # jump($71.1, .LABEL__convert_expression_101__68, .LABEL__convert_expression_101__69)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_expression_101__69
.LABEL__convert_expression_101__68:
  .loc 3 884 56
  # $72.1: @IR_Type = load_struct_member(value.26, type)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:rax:[rbp-33] $71.1:[rbp-34] $72.1:rbx 
  .loc 3 884 34
  # $73.1: Boolean = call(accepts_71, expected_type.1, $72.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call accepts_71
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $73.1:rax 
  .loc 3 884 34
  # $71.2: Boolean = $73.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_expression_101__69)
  mov [rbp-34], bl
.LABEL__convert_expression_101__69:
  .loc 3 884 9
  # $71.3: Boolean = phi($71.1, $71.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] 
  # jump($71.3, .LABEL__convert_expression_101__70, .LABEL__convert_expression_101__71)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_expression_101__71
.LABEL__convert_expression_101__70:
  .loc 3 885 15
  # $75.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:rbx 
  .loc 3 885 36
  # $76.1: @String = call(clone_340, "Not an \"")
  lea rdi, .LABEL__string_204[rip] # "Not an \""
  mov [rbp-42], rbx
  call clone_340
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $76.1:rax 
  .loc 3 885 62
  # $77.1: @String = load_struct_member(expected_type.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:rbx:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $76.1:rax $77.1:r15 
  .loc 3 885 36
  # $78.1: @String = call(append_349, $76.1, $77.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $77.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $78.1:rax 
  .loc 3 885 36
  # $79.1: @String = call(append_349, $78.1, "\" expression")
  mov rdi, rax
  lea rsi, .LABEL__string_205[rip] # "\" expression"
  call append_349
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $79.1:rax 
  .loc 3 885 9
  # call(abort_309, $75.1, $79.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_309
  # [discarded value]: $79.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] 
.LABEL__convert_expression_101__71:
  .loc 3 887 5
  # return(value.26)
  mov rax, [rbp-33]
  jmp .LABEL__convert_expression_101__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] 
  # [discarded value]: $71.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] 
  # [discarded value]: $71.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] 
  # [discarded value]: $71.1
  # [discarded value]: value.26
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] 
  # [discarded value]: value.23
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__convert_expression_101__4:
  # AST_Array_Access_Expression.3: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rax, AST_Array_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] AST_Array_Access_Expression.3:rax 
  .loc 3 839 16
  # $2.1: Boolean = call(is_338, expression.1, AST_Array_Access_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Array_Access_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:rax 
  # jump($2.1, .LABEL__convert_expression_101__5, .LABEL__convert_expression_101__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_expression_101__7
.LABEL__convert_expression_101__5:
  .loc 3 840 54
  # $66.1: @AST_Array_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $66.1:rax 
  .loc 3 840 17
  # value.22: @IR_Value = call(convert_array_access_expression_104, self.1, $66.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_access_expression_104
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] value.22:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] value.22:[rbp-33] 
  # [discarded value]: value.22
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
.LABEL__convert_expression_101__7:
  # AST_Atomic_Expression.2: @Object_Type = load_variable(AST_Atomic_Expression)
  lea rax, AST_Atomic_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] AST_Atomic_Expression.2:rax 
  .loc 3 841 16
  # $3.1: Boolean = call(is_338, expression.1, AST_Atomic_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Atomic_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:rax 
  # jump($3.1, .LABEL__convert_expression_101__8, .LABEL__convert_expression_101__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_expression_101__10
.LABEL__convert_expression_101__8:
  .loc 3 842 42
  # $63.1: @AST_Atomic_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $63.1:rax 
  .loc 3 842 41
  # $64.1: @AST_Expression = load_struct_member($63.1, expression)
  mov rbx, [rax+16]
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $64.1:rbx 
  .loc 3 842 17
  # value.21: @IR_Value = call(convert_expression_101, self.1, $64.1, expected_type.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call convert_expression_101
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] value.21:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] value.21:[rbp-33] 
  # [discarded value]: value.21
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] 
.LABEL__convert_expression_101__10:
  # AST_Call_Expression.2: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] AST_Call_Expression.2:rax 
  .loc 3 843 16
  # $4.1: Boolean = call(is_338, expression.1, AST_Call_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Call_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:rax 
  # jump($4.1, .LABEL__convert_expression_101__11, .LABEL__convert_expression_101__13)
  test al, al
  mov [rbp-36], al
  jz .LABEL__convert_expression_101__13
.LABEL__convert_expression_101__11:
  .loc 3 844 46
  # $61.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $61.1:rax 
  .loc 3 844 17
  # value.20: @IR_Value = call(convert_call_expression_105, self.1, $61.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_call_expression_105
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] value.20:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] value.20:[rbp-33] 
  # [discarded value]: value.20
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] 
.LABEL__convert_expression_101__13:
  # AST_Cast_Expression.2: @Object_Type = load_variable(AST_Cast_Expression)
  lea rax, AST_Cast_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] AST_Cast_Expression.2:rax 
  .loc 3 845 16
  # $5.1: Boolean = call(is_338, expression.1, AST_Cast_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Cast_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:rax 
  # jump($5.1, .LABEL__convert_expression_101__14, .LABEL__convert_expression_101__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__convert_expression_101__16
.LABEL__convert_expression_101__14:
  .loc 3 846 46
  # $59.1: @AST_Cast_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $59.1:rax 
  .loc 3 846 17
  # value.19: @IR_Value = call(convert_cast_expression_110, self.1, $59.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_cast_expression_110
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] value.19:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] value.19:[rbp-33] 
  # [discarded value]: value.19
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] 
.LABEL__convert_expression_101__16:
  # AST_Divide_Expression.2: @Object_Type = load_variable(AST_Divide_Expression)
  lea rax, AST_Divide_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] AST_Divide_Expression.2:rax 
  .loc 3 847 16
  # $6.1: Boolean = call(is_338, expression.1, AST_Divide_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Divide_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:rax 
  # jump($6.1, .LABEL__convert_expression_101__17, .LABEL__convert_expression_101__19)
  test al, al
  mov [rbp-38], al
  jz .LABEL__convert_expression_101__19
.LABEL__convert_expression_101__17:
  .loc 3 848 48
  # $57.1: @AST_Divide_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $57.1:rax 
  .loc 3 848 17
  # value.18: @IR_Value = call(convert_divide_expression_111, self.1, $57.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_divide_expression_111
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] value.18:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] value.18:[rbp-33] 
  # [discarded value]: value.18
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] 
.LABEL__convert_expression_101__19:
  # AST_Equals_Expression.2: @Object_Type = load_variable(AST_Equals_Expression)
  lea rax, AST_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] AST_Equals_Expression.2:rax 
  .loc 3 849 16
  # $7.1: Boolean = call(is_338, expression.1, AST_Equals_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:rax 
  # jump($7.1, .LABEL__convert_expression_101__20, .LABEL__convert_expression_101__22)
  test al, al
  mov [rbp-39], al
  jz .LABEL__convert_expression_101__22
.LABEL__convert_expression_101__20:
  .loc 3 850 48
  # $55.1: @AST_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $55.1:rax 
  .loc 3 850 17
  # value.17: @IR_Value = call(convert_equals_expression_112, self.1, $55.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_equals_expression_112
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] value.17:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] value.17:[rbp-33] 
  # [discarded value]: value.17
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] 
.LABEL__convert_expression_101__22:
  # AST_Greater_Than_Expression.2: @Object_Type = load_variable(AST_Greater_Than_Expression)
  lea rax, AST_Greater_Than_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] AST_Greater_Than_Expression.2:rax 
  .loc 3 851 16
  # $8.1: Boolean = call(is_338, expression.1, AST_Greater_Than_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Greater_Than_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:rax 
  # jump($8.1, .LABEL__convert_expression_101__23, .LABEL__convert_expression_101__25)
  test al, al
  mov [rbp-40], al
  jz .LABEL__convert_expression_101__25
.LABEL__convert_expression_101__23:
  .loc 3 852 54
  # $53.1: @AST_Greater_Than_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $53.1:rax 
  .loc 3 852 17
  # value.16: @IR_Value = call(convert_greater_than_expression_113, self.1, $53.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_expression_113
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] value.16:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] value.16:[rbp-33] 
  # [discarded value]: value.16
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] 
.LABEL__convert_expression_101__25:
  # AST_Greater_Than_Or_Equals_Expression.2: @Object_Type = load_variable(AST_Greater_Than_Or_Equals_Expression)
  lea rax, AST_Greater_Than_Or_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] AST_Greater_Than_Or_Equals_Expression.2:rax 
  .loc 3 853 16
  # $9.1: Boolean = call(is_338, expression.1, AST_Greater_Than_Or_Equals_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Greater_Than_Or_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:rax 
  # jump($9.1, .LABEL__convert_expression_101__26, .LABEL__convert_expression_101__28)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_expression_101__28
.LABEL__convert_expression_101__26:
  .loc 3 854 64
  # $51.1: @AST_Greater_Than_Or_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $51.1:rax 
  .loc 3 854 17
  # value.15: @IR_Value = call(convert_greater_than_or_equals_expression_114, self.1, $51.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_or_equals_expression_114
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] value.15:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] value.15:[rbp-33] 
  # [discarded value]: value.15
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] 
.LABEL__convert_expression_101__28:
  # AST_Less_Than_Expression.2: @Object_Type = load_variable(AST_Less_Than_Expression)
  lea rax, AST_Less_Than_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] AST_Less_Than_Expression.2:rax 
  .loc 3 855 16
  # $10.1: Boolean = call(is_338, expression.1, AST_Less_Than_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Less_Than_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:rax 
  # jump($10.1, .LABEL__convert_expression_101__29, .LABEL__convert_expression_101__31)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_expression_101__31
.LABEL__convert_expression_101__29:
  .loc 3 856 51
  # $49.1: @AST_Less_Than_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $49.1:rax 
  .loc 3 856 17
  # value.14: @IR_Value = call(convert_less_than_expression_115, self.1, $49.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_expression_115
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] value.14:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] value.14:[rbp-33] 
  # [discarded value]: value.14
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] 
.LABEL__convert_expression_101__31:
  # AST_Less_Than_Or_Equals_Expression.2: @Object_Type = load_variable(AST_Less_Than_Or_Equals_Expression)
  lea rax, AST_Less_Than_Or_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] AST_Less_Than_Or_Equals_Expression.2:rax 
  .loc 3 857 16
  # $11.1: Boolean = call(is_338, expression.1, AST_Less_Than_Or_Equals_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Less_Than_Or_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:rax 
  # jump($11.1, .LABEL__convert_expression_101__32, .LABEL__convert_expression_101__34)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_expression_101__34
.LABEL__convert_expression_101__32:
  .loc 3 858 61
  # $47.1: @AST_Less_Than_Or_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $47.1:rax 
  .loc 3 858 17
  # value.13: @IR_Value = call(convert_less_than_or_equals_expression_116, self.1, $47.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_or_equals_expression_116
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] value.13:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] value.13:[rbp-33] 
  # [discarded value]: value.13
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] 
.LABEL__convert_expression_101__34:
  # AST_Literal_Expression.2: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] AST_Literal_Expression.2:rax 
  .loc 3 859 16
  # $12.1: Boolean = call(is_338, expression.1, AST_Literal_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Literal_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:rax 
  # jump($12.1, .LABEL__convert_expression_101__35, .LABEL__convert_expression_101__37)
  test al, al
  mov [rbp-44], al
  jz .LABEL__convert_expression_101__37
.LABEL__convert_expression_101__35:
  .loc 3 860 49
  # $45.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $45.1:rax 
  .loc 3 860 17
  # value.12: @IR_Value = call(convert_literal_expression_117, self.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_literal_expression_117
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] value.12:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] value.12:[rbp-33] 
  # [discarded value]: value.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] 
.LABEL__convert_expression_101__37:
  # AST_Logic_And_Expression.2: @Object_Type = load_variable(AST_Logic_And_Expression)
  lea rax, AST_Logic_And_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] AST_Logic_And_Expression.2:rax 
  .loc 3 861 16
  # $13.1: Boolean = call(is_338, expression.1, AST_Logic_And_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Logic_And_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__convert_expression_101__38, .LABEL__convert_expression_101__40)
  test al, al
  mov [rbp-45], al
  jz .LABEL__convert_expression_101__40
.LABEL__convert_expression_101__38:
  .loc 3 862 51
  # $43.1: @AST_Logic_And_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $43.1:rax 
  .loc 3 862 17
  # value.11: @IR_Value = call(convert_logic_and_expression_118, self.1, $43.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_and_expression_118
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] value.11:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] value.11:[rbp-33] 
  # [discarded value]: value.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] 
.LABEL__convert_expression_101__40:
  # AST_Logic_Or_Expression.2: @Object_Type = load_variable(AST_Logic_Or_Expression)
  lea rax, AST_Logic_Or_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] AST_Logic_Or_Expression.2:rax 
  .loc 3 863 16
  # $14.1: Boolean = call(is_338, expression.1, AST_Logic_Or_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Logic_Or_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:rax 
  # jump($14.1, .LABEL__convert_expression_101__41, .LABEL__convert_expression_101__43)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_expression_101__43
.LABEL__convert_expression_101__41:
  .loc 3 864 50
  # $41.1: @AST_Logic_Or_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $41.1:rax 
  .loc 3 864 17
  # value.10: @IR_Value = call(convert_logic_or_expression_119, self.1, $41.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_or_expression_119
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] value.10:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] value.10:[rbp-33] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
.LABEL__convert_expression_101__43:
  # AST_Member_Access_Expression.3: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] AST_Member_Access_Expression.3:rax 
  .loc 3 865 16
  # $15.1: Boolean = call(is_338, expression.1, AST_Member_Access_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Member_Access_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:rax 
  # jump($15.1, .LABEL__convert_expression_101__44, .LABEL__convert_expression_101__46)
  test al, al
  mov [rbp-47], al
  jz .LABEL__convert_expression_101__46
.LABEL__convert_expression_101__44:
  .loc 3 866 55
  # $39.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $39.1:rax 
  .loc 3 866 17
  # value.9: @IR_Value = call(convert_member_access_expression_120, self.1, $39.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_120
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] value.9:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] value.9:[rbp-33] 
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] 
.LABEL__convert_expression_101__46:
  # AST_Modulo_Expression.2: @Object_Type = load_variable(AST_Modulo_Expression)
  lea rax, AST_Modulo_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] AST_Modulo_Expression.2:rax 
  .loc 3 867 16
  # $16.1: Boolean = call(is_338, expression.1, AST_Modulo_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Modulo_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:rax 
  # jump($16.1, .LABEL__convert_expression_101__47, .LABEL__convert_expression_101__49)
  test al, al
  mov [rbp-48], al
  jz .LABEL__convert_expression_101__49
.LABEL__convert_expression_101__47:
  .loc 3 868 48
  # $37.1: @AST_Modulo_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $37.1:rax 
  .loc 3 868 17
  # value.8: @IR_Value = call(convert_modulo_expression_123, self.1, $37.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_modulo_expression_123
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] value.8:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] value.8:[rbp-33] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] 
.LABEL__convert_expression_101__49:
  # AST_Multiply_Expression.2: @Object_Type = load_variable(AST_Multiply_Expression)
  lea rax, AST_Multiply_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] AST_Multiply_Expression.2:rax 
  .loc 3 869 16
  # $17.1: Boolean = call(is_338, expression.1, AST_Multiply_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Multiply_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:rax 
  # jump($17.1, .LABEL__convert_expression_101__50, .LABEL__convert_expression_101__52)
  test al, al
  mov [rbp-49], al
  jz .LABEL__convert_expression_101__52
.LABEL__convert_expression_101__50:
  .loc 3 870 50
  # $35.1: @AST_Multiply_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $35.1:rax 
  .loc 3 870 17
  # value.7: @IR_Value = call(convert_multiply_expression_124, self.1, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_multiply_expression_124
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] value.7:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] value.7:[rbp-33] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] 
.LABEL__convert_expression_101__52:
  # AST_Negate_Expression.2: @Object_Type = load_variable(AST_Negate_Expression)
  lea rax, AST_Negate_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] AST_Negate_Expression.2:rax 
  .loc 3 871 16
  # $18.1: Boolean = call(is_338, expression.1, AST_Negate_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Negate_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:rax 
  # jump($18.1, .LABEL__convert_expression_101__53, .LABEL__convert_expression_101__55)
  test al, al
  mov [rbp-50], al
  jz .LABEL__convert_expression_101__55
.LABEL__convert_expression_101__53:
  .loc 3 872 48
  # $33.1: @AST_Negate_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $33.1:rax 
  .loc 3 872 17
  # value.6: @IR_Value = call(convert_negate_expression_125, self.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_negate_expression_125
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] value.6:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] value.6:[rbp-33] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] 
.LABEL__convert_expression_101__55:
  # AST_New_Expression.2: @Object_Type = load_variable(AST_New_Expression)
  lea rax, AST_New_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] AST_New_Expression.2:rax 
  .loc 3 873 16
  # $19.1: Boolean = call(is_338, expression.1, AST_New_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_New_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:rax 
  # jump($19.1, .LABEL__convert_expression_101__56, .LABEL__convert_expression_101__58)
  test al, al
  mov [rbp-51], al
  jz .LABEL__convert_expression_101__58
.LABEL__convert_expression_101__56:
  .loc 3 874 45
  # $31.1: @AST_New_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $31.1:rax 
  .loc 3 874 17
  # value.5: @IR_Value = call(convert_new_expression_126, self.1, $31.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_new_expression_126
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] value.5:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] value.5:[rbp-33] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] 
.LABEL__convert_expression_101__58:
  # AST_Not_Equals_Expression.2: @Object_Type = load_variable(AST_Not_Equals_Expression)
  lea rax, AST_Not_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] AST_Not_Equals_Expression.2:rax 
  .loc 3 875 16
  # $20.1: Boolean = call(is_338, expression.1, AST_Not_Equals_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Not_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:rax 
  # jump($20.1, .LABEL__convert_expression_101__59, .LABEL__convert_expression_101__61)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_expression_101__61
.LABEL__convert_expression_101__59:
  .loc 3 876 52
  # $29.1: @AST_Not_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $29.1:rax 
  .loc 3 876 17
  # value.4: @IR_Value = call(convert_not_equals_expression_132, self.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_not_equals_expression_132
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] value.4:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] value.4:[rbp-33] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] 
.LABEL__convert_expression_101__61:
  # AST_Substract_Expression.2: @Object_Type = load_variable(AST_Substract_Expression)
  lea rax, AST_Substract_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] AST_Substract_Expression.2:rax 
  .loc 3 877 16
  # $21.1: Boolean = call(is_338, expression.1, AST_Substract_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Substract_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:rax 
  # jump($21.1, .LABEL__convert_expression_101__62, .LABEL__convert_expression_101__64)
  test al, al
  mov [rbp-53], al
  jz .LABEL__convert_expression_101__64
.LABEL__convert_expression_101__62:
  .loc 3 878 51
  # $27.1: @AST_Substract_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $27.1:rax 
  .loc 3 878 17
  # value.3: @IR_Value = call(convert_substract_expression_133, self.1, $27.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_substract_expression_133
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] value.3:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] value.3:[rbp-33] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] 
.LABEL__convert_expression_101__64:
  # AST_Variable_Expression.3: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] AST_Variable_Expression.3:rax 
  .loc 3 879 16
  # $22.1: Boolean = call(is_338, expression.1, AST_Variable_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:rax 
  # jump($22.1, .LABEL__convert_expression_101__65, .LABEL__convert_expression_101__67)
  test al, al
  mov [rbp-54], al
  jz .LABEL__convert_expression_101__67
.LABEL__convert_expression_101__65:
  .loc 3 880 50
  # $25.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] $25.1:rax 
  .loc 3 880 17
  # value.2: @IR_Value = call(convert_variable_expression_134, self.1, $25.1, expected_type.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  call convert_variable_expression_134
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] value.2:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_101__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_101__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] value.2:[rbp-33] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] 
.LABEL__convert_expression_101__67:
  .loc 3 882 15
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] $23.1:rbx 
  .loc 3 882 36
  # $24.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] $23.1:rbx $24.1:r15 
  .loc 3 882 9
  # call(abort_141, $23.1, $24.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_expression_101__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_101__stack_frame_size: .word 64

  .loc 3 890 1
  .text
convert_expression_address_102:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_address_102__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_address_102__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Member_Access_Expression.4: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Member_Access_Expression.4:rax 
  .loc 3 891 9
  # $1.1: Boolean = call(is_338, expression.1, AST_Member_Access_Expression.4)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Member_Access_Expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_expression_address_102__2, .LABEL__convert_expression_address_102__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_expression_address_102__3
.LABEL__convert_expression_address_102__2:
  .loc 3 892 62
  # $2.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 892 16
  # $3.1: @IR_Value = call(convert_member_access_expression_address_122, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_address_122
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 892 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_expression_address_102__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_expression_address_102__3:
  # AST_Variable_Expression.4: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] AST_Variable_Expression.4:rax 
  .loc 3 894 9
  # $4.1: Boolean = call(is_338, expression.1, AST_Variable_Expression.4)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_expression_address_102__5, .LABEL__convert_expression_address_102__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_expression_address_102__6
.LABEL__convert_expression_address_102__5:
  .loc 3 895 57
  # $5.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 895 16
  # $6.1: @IR_Value = call(convert_variable_expression_address_135, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_variable_expression_address_135
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 895 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_expression_address_102__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_expression_address_102__6:
  .loc 3 897 11
  # $7.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rbx 
  .loc 3 897 32
  # $8.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rbx $8.1:r15 
  .loc 3 897 5
  # call(abort_141, $7.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_expression_address_102__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_address_102__stack_frame_size: .word 32

  .loc 3 900 1
  .text
convert_add_expression_103:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_add_expression_103__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_add_expression_103__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Add_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 901 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 901 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 901 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 902 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 902 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 902 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.11: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.11:rbx 
  .loc 3 903 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.11)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.11
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_add_expression_103__2, .LABEL__convert_add_expression_103__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_add_expression_103__3
.LABEL__convert_add_expression_103__2:
  # IR_Constant_Value.12: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.12:rax 
  .loc 3 903 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.12)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.12
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_add_expression_103__3)
  mov [rbp-41], al
.LABEL__convert_add_expression_103__3:
  .loc 3 903 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_add_expression_103__4, .LABEL__convert_add_expression_103__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_add_expression_103__5
.LABEL__convert_add_expression_103__4:
  .loc 3 904 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 904 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_add_expression_103__5:
  .loc 3 906 85
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 906 62
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 832 61
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_add_instruction_229)
  lea rbx, dump_ir_add_instruction_229[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 906 24
  # $15.1: @IR_Add_Instruction = new(IR_Add_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Add_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 906 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 906 134
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 906 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 906 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_add_expression_103__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_add_expression_103__end:
  mov rsp, rbp
  pop rbp
  ret

convert_add_expression_103__stack_frame_size: .word 80

  .loc 3 909 1
  .text
convert_array_access_expression_104:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_access_expression_104__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_access_expression_104__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # array_access_expression.1: @AST_Array_Access_Expression = load_variable(array_access_expression)
  # [live values]: self.1:rdi array_access_expression.1:rsi 
  .loc 3 910 44
  # $1.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi array_access_expression.1:rsi $1.1:rax 
  .loc 3 910 86
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 910 20
  # index_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:rax 
  .loc 3 911 45
  # $4.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:rax $4.1:r15 
  .loc 3 911 21
  # object_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, null)
  mov rdi, [rbp-24]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-32], rax
  call convert_expression_101
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax 
  .loc 3 912 26
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax object_value_type.1:rbx 
  # IR_Pointer_Type.13: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax object_value_type.1:rbx IR_Pointer_Type.13:r15 
  .loc 3 913 10
  # $7.1: Boolean = call(is_338, object_value_type.1, IR_Pointer_Type.13)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  mov [rbp-48], rbx
  call is_338
  # [discarded value]: IR_Pointer_Type.13
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:rax 
  .loc 3 913 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:rbx 
  # jump($8.1, .LABEL__convert_array_access_expression_104__2, .LABEL__convert_array_access_expression_104__3)
  test bl, bl
  mov [rbp-49], bl
  jz .LABEL__convert_array_access_expression_104__3
.LABEL__convert_array_access_expression_104__2:
  .loc 3 914 15
  # $9.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rax:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $9.1:rbx 
  .loc 3 914 49
  # $10.1: @String = call(clone_340, "Not an IR_Pointer_Type value: ")
  lea rdi, .LABEL__string_207[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-57], rbx
  call clone_340
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $9.1:[rbp-57] $10.1:rax 
  .loc 3 914 96
  # $11.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:rbx:[rbp-48] $8.1:[rbp-49] $9.1:[rbp-57] $10.1:rax $11.1:r15 
  .loc 3 914 49
  # $12.1: @String = call(append_349, $10.1, $11.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $9.1:[rbp-57] $12.1:rax 
  .loc 3 914 9
  # call(abort_309, $9.1, $12.1)
  mov rdi, [rbp-57]
  mov rsi, rax
  call abort_309
  # [discarded value]: $12.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] 
.LABEL__convert_array_access_expression_104__3:
  .loc 3 916 26
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] object_value_type.1:rax 
  .loc 3 917 85
  # $14.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $14.1:rbx 
  .loc 3 917 62
  # $15.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $14.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $15.1:rax 
  .loc 3 917 24
  # $16.1: @IR_Load_Array_Item_Instruction = call(create_ir_load_array_item_instruction_198, $15.1, object_value.1, index_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov rdx, [rbp-32]
  call create_ir_load_array_item_instruction_198
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $16.1:rax 
  .loc 3 917 146
  # $17.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $16.1:rax $17.1:r15 
  .loc 3 917 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $18.1:rax 
  .loc 3 917 5
  # return($18.1)
  mov [rbp-57], rax
  jmp .LABEL__convert_array_access_expression_104__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] 
  # [discarded value]: object_value_type.1
  # [discarded value]: object_value.1
  # [discarded value]: index_value.1
  # [discarded value]: array_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_array_access_expression_104__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_access_expression_104__stack_frame_size: .word 64

  .loc 3 920 1
  .text
convert_call_expression_105:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_expression_105__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_expression_105__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  .loc 3 921 9
  # $1.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax 
  # AST_Atomic_Expression.3: @Object_Type = load_variable(AST_Atomic_Expression)
  lea rbx, AST_Atomic_Expression[rip]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax AST_Atomic_Expression.3:rbx 
  .loc 3 921 9
  # $2.1: Boolean = call(is_338, $1.1, AST_Atomic_Expression.3)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_338
  # [discarded value]: AST_Atomic_Expression.3
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_call_expression_105__2, .LABEL__convert_call_expression_105__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_call_expression_105__3
.LABEL__convert_call_expression_105__2:
  .loc 3 922 49
  # $3.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 3 922 25
  # callee_value.1: @IR_Value = call(convert_expression_101, self.1, $3.1, null)
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  call convert_expression_101
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax 
  .loc 3 923 13
  # $5.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax $5.1:rbx 
  # IR_Function_Type.7: @Object_Type = load_variable(IR_Function_Type)
  lea r15, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax $5.1:rbx IR_Function_Type.7:r15 
  .loc 3 923 13
  # $6.1: Boolean = call(is_338, $5.1, IR_Function_Type.7)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-25], rax
  call is_338
  # [discarded value]: IR_Function_Type.7
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $6.1:rax 
  .loc 3 923 13
  # $7.1: Boolean = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:rbx 
  # jump($7.1, .LABEL__convert_call_expression_105__4, .LABEL__convert_call_expression_105__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__convert_call_expression_105__5
.LABEL__convert_call_expression_105__4:
  .loc 3 924 19
  # $8.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:rbx 
  .loc 3 924 45
  # $9.1: @String = call(clone_340, "Values of type ")
  lea rdi, .LABEL__string_208[rip] # "Values of type "
  mov [rbp-34], rbx
  call clone_340
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax 
  .loc 3 924 77
  # $10.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rbx:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax $10.1:r15 
  .loc 3 924 77
  # $11.1: @String = load_struct_member($10.1, name)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rbx:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax $11.1:r14 
  .loc 3 924 45
  # $12.1: @String = call(append_349, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $12.1:rax 
  .loc 3 924 45
  # $13.1: @String = call(append_349, $12.1, " are not callable")
  mov rdi, rax
  lea rsi, .LABEL__string_209[rip] # " are not callable"
  call append_349
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $13.1:rax 
  .loc 3 924 13
  # call(abort_309, $8.1, $13.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_309
  # [discarded value]: $13.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] 
.LABEL__convert_call_expression_105__5:
  .loc 3 926 16
  # $14.1: @IR_Value = call(convert_dynamic_call_expression_107, self.1, call_expression.1, callee_value.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-25]
  xor rcx, rcx
  call convert_dynamic_call_expression_107
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $14.1:rax 
  .loc 3 926 9
  # return($14.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_call_expression_105__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] 
  # [discarded value]: callee_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_call_expression_105__3:
  .loc 3 928 9
  # $15.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $15.1:rbx 
  # AST_Member_Access_Expression.5: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea r15, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $15.1:rbx AST_Member_Access_Expression.5:r15 
  .loc 3 928 9
  # $16.1: Boolean = call(is_338, $15.1, AST_Member_Access_Expression.5)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: AST_Member_Access_Expression.5
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:rax 
  # jump($16.1, .LABEL__convert_call_expression_105__7, .LABEL__convert_call_expression_105__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_call_expression_105__8
.LABEL__convert_call_expression_105__7:
  .loc 3 929 30
  # callee_expression.1: @AST_Member_Access_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rbx 
  .loc 3 930 49
  # $19.1: @AST_Expression = load_struct_member(callee_expression.1, object_expression)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rbx $19.1:r15 
  .loc 3 930 25
  # callee_value.1: @IR_Value = call(convert_expression_101, self.1, $19.1, null)
  mov rdi, [rbp-8]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-26], rbx
  call convert_expression_101
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax 
  .loc 3 931 30
  # callee_value_type.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax callee_value_type.1:rbx 
  # IR_Pointer_Type.14: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax callee_value_type.1:rbx IR_Pointer_Type.14:r15 
  .loc 3 932 13
  # $22.1: Boolean = call(is_338, callee_value_type.1, IR_Pointer_Type.14)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-34], rax
  mov [rbp-42], rbx
  call is_338
  # [discarded value]: IR_Pointer_Type.14
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:rax 
  # jump($22.1, .LABEL__convert_call_expression_105__9, .LABEL__convert_call_expression_105__10)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_call_expression_105__10
.LABEL__convert_call_expression_105__9:
  .loc 3 933 34
  # callee_value_type.1: @IR_Pointer_Type = callee_value_type.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax 
  .loc 3 934 17
  # $24.1: @IR_Type = load_struct_member(callee_value_type.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax $24.1:rbx 
  # IR_Struct_Type.14: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax $24.1:rbx IR_Struct_Type.14:r15 
  .loc 3 934 17
  # $25.1: Boolean = call(is_338, $24.1, IR_Struct_Type.14)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-51], rax
  call is_338
  # [discarded value]: IR_Struct_Type.14
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:rax 
  # jump($25.1, .LABEL__convert_call_expression_105__11, .LABEL__convert_call_expression_105__10)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_call_expression_105__10
.LABEL__convert_call_expression_105__11:
  .loc 3 935 40
  # $27.1: @IR_Struct_Type = load_struct_member(callee_value_type.1, pointed_type)
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx 
  .loc 3 935 102
  # $28.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov r15, [rbp-26]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:r15:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx $28.1:r14 
  .loc 3 935 102
  # $29.1: @String = load_struct_member($28.1, lexeme)
  mov r13, [r14+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:r15:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx $29.1:r13 
  .loc 3 935 39
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, $27.1, $29.1)
  mov rdi, rbx
  mov rsi, r13
  call get_member_150
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax 
  .loc 3 936 21
  # $32.1: Boolean = struct_type_member.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax $32.1:rbx 
  # jump($32.1, .LABEL__convert_call_expression_105__13, .LABEL__convert_call_expression_105__14)
  test bl, bl
  mov [rbp-60], rax
  mov [rbp-61], bl
  jz .LABEL__convert_call_expression_105__14
.LABEL__convert_call_expression_105__13:
  .loc 3 936 51
  # $33.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-60]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $33.1:rbx 
  # IR_Function_Type.8: @Object_Type = load_variable(IR_Function_Type)
  lea r15, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $33.1:rbx IR_Function_Type.8:r15 
  .loc 3 936 51
  # $32.2: Boolean = call(is_338, $33.1, IR_Function_Type.8)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Function_Type.8
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:rax:[rbp-61] 
  # jump(.LABEL__convert_call_expression_105__14)
  mov [rbp-61], al
.LABEL__convert_call_expression_105__14:
  .loc 3 936 21
  # $32.3: Boolean = phi($32.1, $32.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  # jump($32.3, .LABEL__convert_call_expression_105__15, .LABEL__convert_call_expression_105__10)
  mov al, [rbp-61]
  test al, al
  jz .LABEL__convert_call_expression_105__10
.LABEL__convert_call_expression_105__15:
  .loc 3 937 120
  # $35.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-60]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $35.1:rbx 
  .loc 3 937 97
  # $36.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $36.1:rax 
  .loc 3 937 56
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_204, $36.1, callee_value.1, struct_type_member.1, false)
  mov rdi, rax
  mov rsi, [rbp-34]
  mov rdx, [rbp-60]
  mov cl, 0
  call create_ir_load_struct_member_instruction_204
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $37.1:rax 
  .loc 3 937 188
  # $38.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rbx:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $37.1:rax $38.1:r15 
  .loc 3 937 44
  # call_function_value.1: @IR_Variable_Value = call(append_74, self.1, $37.1, $38.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] call_function_value.1:rax 
  .loc 3 938 28
  # $40.1: @IR_Value = call(convert_dynamic_call_expression_107, self.1, call_expression.1, call_function_value.1, callee_value.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  mov rcx, [rbp-34]
  call convert_dynamic_call_expression_107
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $40.1:rax 
  .loc 3 938 21
  # return($40.1)
  mov [rbp-69], rax
  jmp .LABEL__convert_call_expression_105__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
.LABEL__convert_call_expression_105__10:
  .loc 3 942 69
  # $41.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rax:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] $41.1:rbx struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  .loc 3 942 16
  # $42.1: @IR_Value = call(convert_direct_call_expression_106, self.1, call_expression.1, $41.1, callee_value.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  mov rcx, [rbp-34]
  call convert_direct_call_expression_106
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] $42.1:rax struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  .loc 3 942 9
  # return($42.1)
  mov [rbp-69], rax
  jmp .LABEL__convert_call_expression_105__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  # [discarded value]: $32.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] 
  # [discarded value]: $32.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] 
  # [discarded value]: $32.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] 
  # [discarded value]: callee_value_type.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] 
  # [discarded value]: callee_value_type.1
  # [discarded value]: callee_value.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] 
.LABEL__convert_call_expression_105__8:
  .loc 3 944 9
  # $43.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $43.1:rbx 
  # AST_Variable_Expression.5: @Object_Type = load_variable(AST_Variable_Expression)
  lea r15, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $43.1:rbx AST_Variable_Expression.5:r15 
  .loc 3 944 9
  # $44.1: Boolean = call(is_338, $43.1, AST_Variable_Expression.5)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: AST_Variable_Expression.5
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:rax 
  # jump($44.1, .LABEL__convert_call_expression_105__19, .LABEL__convert_call_expression_105__20)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_call_expression_105__20
.LABEL__convert_call_expression_105__19:
  .loc 3 945 30
  # callee_expression.1: @AST_Variable_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx 
  .loc 3 946 39
  # $47.1: @Identifier_Token = load_struct_member(callee_expression.1, name)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx $47.1:r15 
  .loc 3 946 39
  # $48.1: @String = load_struct_member($47.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx $48.1:r14 
  .loc 3 946 21
  # variable.1: @IR_Variable = call(get_variable_65, self.1, $48.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-27], rbx
  call get_variable_65
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax 
  .loc 3 947 13
  # $51.1: Boolean = variable.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax $51.1:rbx 
  # jump($51.1, .LABEL__convert_call_expression_105__21, .LABEL__convert_call_expression_105__22)
  test bl, bl
  mov [rbp-35], rax
  mov [rbp-36], bl
  jz .LABEL__convert_call_expression_105__22
.LABEL__convert_call_expression_105__21:
  .loc 3 947 33
  # $52.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-35]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax:[rbp-35] $51.1:[rbp-36] $52.1:rbx 
  # IR_Function_Type.9: @Object_Type = load_variable(IR_Function_Type)
  lea r15, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax:[rbp-35] $51.1:[rbp-36] $52.1:rbx IR_Function_Type.9:r15 
  .loc 3 947 33
  # $51.2: Boolean = call(is_338, $52.1, IR_Function_Type.9)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Function_Type.9
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:rax:[rbp-36] 
  # jump(.LABEL__convert_call_expression_105__22)
  mov [rbp-36], al
.LABEL__convert_call_expression_105__22:
  .loc 3 947 13
  # $51.3: Boolean = phi($51.1, $51.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
  # jump($51.3, .LABEL__convert_call_expression_105__23, .LABEL__convert_call_expression_105__24)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_call_expression_105__24
.LABEL__convert_call_expression_105__23:
  .loc 3 948 36
  # call_function_value.1: @IR_Value = call(convert_expression_101, self.1, callee_expression.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-27]
  xor rdx, rdx
  call convert_expression_101
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] call_function_value.1:rax 
  .loc 3 949 20
  # $55.1: @IR_Value = call(convert_dynamic_call_expression_107, self.1, call_expression.1, call_function_value.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  xor rcx, rcx
  call convert_dynamic_call_expression_107
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $55.1:rax 
  .loc 3 949 13
  # return($55.1)
  mov [rbp-44], rax
  jmp .LABEL__convert_call_expression_105__end
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
.LABEL__convert_call_expression_105__24:
  .loc 3 951 69
  # $56.1: @Identifier_Token = load_struct_member(callee_expression.1, name)
  mov rax, [rbp-27]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rax:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $56.1:rbx 
  .loc 3 951 16
  # $57.1: @IR_Value = call(convert_direct_call_expression_106, self.1, call_expression.1, $56.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  xor rcx, rcx
  call convert_direct_call_expression_106
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $57.1:rax 
  .loc 3 951 9
  # return($57.1)
  mov [rbp-44], rax
  jmp .LABEL__convert_call_expression_105__end
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
  # [discarded value]: $51.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] 
  # [discarded value]: $51.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] 
  # [discarded value]: $51.1
  # [discarded value]: variable.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] 
.LABEL__convert_call_expression_105__20:
  .loc 3 953 11
  # $58.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx 
  .loc 3 953 37
  # $59.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx $59.1:r15 
  .loc 3 953 37
  # $60.1: @Object_Type = load_struct_member($59.1, object_type)
  mov r14, [r15]
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx $60.1:r14 
  .loc 3 953 5
  # call(abort_141, $58.1, $60.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_call_expression_105__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_expression_105__stack_frame_size: .word 80

  .loc 3 956 1
  .text
convert_direct_call_expression_106:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_direct_call_expression_106__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_direct_call_expression_106__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # callee_name.1: @Identifier_Token = load_variable(callee_name)
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx first_argument.1:rcx 
  .loc 3 957 33
  # $1.1: @String = load_struct_member(callee_name.1, lexeme)
  mov rax, [rdx+8]
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx first_argument.1:rcx $1.1:rax 
  .loc 3 957 13
  # type.1: @IR_Type = call(get_named_type_63, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call get_named_type_63
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax 
  .loc 3 958 9
  # $4.1: Boolean = type.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_direct_call_expression_106__2, .LABEL__convert_direct_call_expression_106__3)
  test bl, bl
  mov [rbp-40], rax
  mov [rbp-41], bl
  jz .LABEL__convert_direct_call_expression_106__3
.LABEL__convert_direct_call_expression_106__2:
  # IR_Struct_Type.15: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] IR_Struct_Type.15:rax 
  .loc 3 958 25
  # $4.2: Boolean = call(is_338, type.1, IR_Struct_Type.15)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Struct_Type.15
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:rax:[rbp-41] 
  # jump(.LABEL__convert_direct_call_expression_106__3)
  mov [rbp-41], al
.LABEL__convert_direct_call_expression_106__3:
  .loc 3 958 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
  # jump($4.3, .LABEL__convert_direct_call_expression_106__4, .LABEL__convert_direct_call_expression_106__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_direct_call_expression_106__5
.LABEL__convert_direct_call_expression_106__4:
  .loc 3 959 13
  # $6.1: Boolean = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:rax 
  # jump($6.1, .LABEL__convert_direct_call_expression_106__6, .LABEL__convert_direct_call_expression_106__7)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_direct_call_expression_106__7
.LABEL__convert_direct_call_expression_106__6:
  .loc 3 960 19
  # $7.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $7.1:rbx 
  .loc 3 960 13
  # call(abort_309, $7.1, "Invalid type literal syntax")
  mov rdi, rbx
  lea rsi, .LABEL__string_210[rip] # "Invalid type literal syntax"
  call abort_309
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] 
.LABEL__convert_direct_call_expression_106__7:
  .loc 3 962 76
  # $8.1: @IR_Struct_Type = type.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $8.1:rax 
  .loc 3 962 16
  # $9.1: @IR_Struct_Constructor_Value = call(convert_struct_constructor_expression_131, self.1, call_expression.1, $8.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-8]
  mov rdx, rax
  call convert_struct_constructor_expression_131
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $9.1:rax 
  .loc 3 962 9
  # return($9.1)
  mov [rbp-50], rax
  jmp .LABEL__convert_direct_call_expression_106__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
.LABEL__convert_direct_call_expression_106__5:
  .loc 3 965 51
  # $10.1: @List = load_struct_member(call_expression.1, arguments)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $10.1:rbx 
  .loc 3 965 23
  # call_arguments.1: @List = call(convert_call_arguments_109, self.1, $10.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call convert_call_arguments_109
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rax 
  .loc 3 966 9
  # $12.1: Boolean = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_direct_call_expression_106__9, .LABEL__convert_direct_call_expression_106__10)
  test bl, bl
  mov [rbp-49], rax
  mov [rbp-50], bl
  jz .LABEL__convert_direct_call_expression_106__10
.LABEL__convert_direct_call_expression_106__9:
  .loc 3 967 32
  # $13.1: @IR_Call_Argument = new(IR_Call_Argument)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] $13.1:rax 
  # store_struct_member($13.1, name, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] $13.1:rax 
  # store_struct_member($13.1, value, first_argument.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:rbx:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] $13.1:rax 
  .loc 3 967 9
  # call(prepend_314, call_arguments.1, $13.1)
  mov rdi, [rbp-49]
  mov rsi, rax
  call prepend_314
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__convert_direct_call_expression_106__10)
.LABEL__convert_direct_call_expression_106__10:
  .loc 3 970 5
  # call_function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax 
  .loc 3 971 29
  # $14.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax $14.1:r15 
  .loc 3 971 29
  # named_functions_item.1: @List_Item = load_struct_member($14.1, first_item)
  mov r14, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax named_functions_item.1:r14 
  # jump(.LABEL__convert_direct_call_expression_106__11)
  mov [rbp-58], rax
  mov [rbp-66], r14
.LABEL__convert_direct_call_expression_106__11:
  # call_function.8: @IR_Function = phi(call_function.1, call_function.9)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] 
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] 
  .loc 3 972 12
  # $16.1: Boolean = named_functions_item.2 != null
  cmp QWORD PTR [rbp-66], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:rax 
  # jump($16.1, .LABEL__convert_direct_call_expression_106__12, .LABEL__convert_direct_call_expression_106__13)
  test al, al
  mov [rbp-67], al
  jz .LABEL__convert_direct_call_expression_106__13
.LABEL__convert_direct_call_expression_106__12:
  .loc 3 973 27
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-66]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx 
  .loc 3 974 13
  # $19.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx $19.1:r15 
  .loc 3 974 40
  # $20.1: @String = load_struct_member(callee_name.1, lexeme)
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:r14:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx $19.1:r15 $20.1:r13 
  .loc 3 974 13
  # $21.1: Boolean = call(equals_341, $19.1, $20.1)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-75], rbx
  call equals_341
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:rax 
  # jump($21.1, .LABEL__convert_direct_call_expression_106__14, .LABEL__convert_direct_call_expression_106__15)
  test al, al
  mov [rbp-76], al
  jz .LABEL__convert_direct_call_expression_106__15
.LABEL__convert_direct_call_expression_106__14:
  .loc 3 975 17
  # $22.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  mov rax, [rbp-75]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:rax:[rbp-75] $21.1:[rbp-76] $22.1:rbx 
  .loc 3 975 17
  # $23.1: Boolean = call(accepts_108, $22.1, call_arguments.1)
  mov rdi, rbx
  mov rsi, [rbp-49]
  call accepts_108
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:rax 
  # jump($23.1, .LABEL__convert_direct_call_expression_106__16, .LABEL__convert_direct_call_expression_106__15)
  test al, al
  mov [rbp-77], al
  jz .LABEL__convert_direct_call_expression_106__15
.LABEL__convert_direct_call_expression_106__16:
  .loc 3 976 21
  # $24.1: Boolean = call_function.8 != null
  cmp QWORD PTR [rbp-58], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:rax 
  # jump($24.1, .LABEL__convert_direct_call_expression_106__18, .LABEL__convert_direct_call_expression_106__19)
  test al, al
  mov [rbp-78], al
  jz .LABEL__convert_direct_call_expression_106__19
.LABEL__convert_direct_call_expression_106__18:
  .loc 3 977 27
  # $25.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] $25.1:rbx 
  .loc 3 977 21
  # call(abort_309, $25.1, "Found at least two matching functions")
  mov rdi, rbx
  lea rsi, .LABEL__string_211[rip] # "Found at least two matching functions"
  call abort_309
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] 
.LABEL__convert_direct_call_expression_106__19:
  .loc 3 979 17
  # call_function.3: @IR_Function = named_function.1
  mov rax, [rbp-75]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:rax:[rbp-58] 
  # jump(.LABEL__convert_direct_call_expression_106__15)
  mov [rbp-58], rax
.LABEL__convert_direct_call_expression_106__15:
  # call_function.9: @IR_Function = phi(call_function.8, call_function.3)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] $24.1:[rbp-78] call_function.3:[rbp-58] 
  .loc 3 982 32
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-66]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] named_functions_item.5:rbx:[rbp-66] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # jump(.LABEL__convert_direct_call_expression_106__11)
  mov [rbp-66], rbx
  jmp .LABEL__convert_direct_call_expression_106__11
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] named_functions_item.5:[rbp-66] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [discarded value]: named_functions_item.5
  # [discarded value]: call_function.9
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [discarded value]: call_function.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] 
.LABEL__convert_direct_call_expression_106__13:
  .loc 3 984 9
  # $27.1: Boolean = call_function.8 == null
  cmp QWORD PTR [rbp-58], 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:rax 
  # jump($27.1, .LABEL__convert_direct_call_expression_106__20, .LABEL__convert_direct_call_expression_106__21)
  test al, al
  mov [rbp-68], al
  jz .LABEL__convert_direct_call_expression_106__21
.LABEL__convert_direct_call_expression_106__20:
  .loc 3 985 33
  # $28.1: @List = load_struct_member(self.1, named_functions)
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] $28.1:rbx 
  .loc 3 985 33
  # named_functions_item.1: @List_Item = load_struct_member($28.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:r15 
  # jump(.LABEL__convert_direct_call_expression_106__22)
  mov [rbp-76], r15
.LABEL__convert_direct_call_expression_106__22:
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] 
  .loc 3 986 16
  # $30.1: Boolean = named_functions_item.2 != null
  cmp QWORD PTR [rbp-76], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:rax 
  # jump($30.1, .LABEL__convert_direct_call_expression_106__23, .LABEL__convert_direct_call_expression_106__24)
  test al, al
  mov [rbp-77], al
  jz .LABEL__convert_direct_call_expression_106__24
.LABEL__convert_direct_call_expression_106__23:
  .loc 3 987 31
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-76]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx 
  .loc 3 988 17
  # $33.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx $33.1:r15 
  .loc 3 988 44
  # $34.1: @String = load_struct_member(callee_name.1, lexeme)
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:r14:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx $33.1:r15 $34.1:r13 
  .loc 3 988 17
  # $35.1: Boolean = call(equals_341, $33.1, $34.1)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-85], rbx
  call equals_341
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:rax 
  # jump($35.1, .LABEL__convert_direct_call_expression_106__25, .LABEL__convert_direct_call_expression_106__26)
  test al, al
  mov [rbp-86], al
  jz .LABEL__convert_direct_call_expression_106__26
.LABEL__convert_direct_call_expression_106__25:
  # stderr.3: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] stderr.3:stderr[rip] 
  .loc 3 989 17
  # $36.1: @FILE = call(end_line_335, stderr.3)
  mov rdi, stderr[rip]
  call end_line_335
  # [discarded value]: stderr.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $36.1:rax 
  .loc 3 989 41
  # $37.1: @Source_Location = load_struct_member(named_function.1, location)
  mov rbx, [rbp-85]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $36.1:rax $37.1:r15 
  .loc 3 989 17
  # $38.1: @FILE = call(write_312, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_312
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $38.1:rax 
  .loc 3 989 17
  # $39.1: @FILE = call(write_332, $38.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $39.1:rax 
  .loc 3 989 84
  # $40.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rbp-85]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $39.1:rax $40.1:r15 
  .loc 3 989 17
  # $41.1: @FILE = call(write_332, $39.1, $40.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $41.1:rax 
  .loc 3 989 17
  # $42.1: @FILE = call(write_332, $41.1, " :: ")
  mov rdi, rax
  lea rsi, .LABEL__string_213[rip] # " :: "
  call write_332
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $42.1:rax 
  .loc 3 989 125
  # $43.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  mov rbx, [rbp-85]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $42.1:rax $43.1:r15 
  .loc 3 989 125
  # $44.1: @String = load_struct_member($43.1, name)
  mov r14, [r15+8]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $42.1:rax $44.1:r14 
  .loc 3 989 17
  # $45.1: @FILE = call(write_332, $42.1, $44.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $44.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $45.1:rax 
  .loc 3 989 17
  # $46.1: @FILE = call(end_line_335, $45.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # jump(.LABEL__convert_direct_call_expression_106__26)
.LABEL__convert_direct_call_expression_106__26:
  .loc 3 991 36
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-76]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] named_functions_item.5:rbx:[rbp-76] 
  # jump(.LABEL__convert_direct_call_expression_106__22)
  mov [rbp-76], rbx
  jmp .LABEL__convert_direct_call_expression_106__22
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] named_functions_item.5:[rbp-76] 
  # [discarded value]: named_functions_item.5
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] 
.LABEL__convert_direct_call_expression_106__24:
  .loc 3 993 20
  # $48.1: @String = call(clone_340, "Found no matching function: ")
  lea rdi, .LABEL__string_214[rip] # "Found no matching function: "
  call clone_340
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $48.1:rax 
  .loc 3 993 65
  # $49.1: @String = load_struct_member(callee_name.1, lexeme)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:rbx:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $48.1:rax $49.1:r15 
  .loc 3 993 20
  # $50.1: @String = call(append_349, $48.1, $49.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $50.1:rax 
  .loc 3 993 20
  # message.1: @String = call(append_349, $50.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_180[rip] # " :: ("
  call append_349
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax 
  .loc 3 994 32
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rbx, [rbp-49]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rbx:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax call_arguments_item.1:r15 
  .loc 3 995 13
  # $53.1: Boolean = call_arguments_item.1 != null
  cmp r15, 0
  setne r14b
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rbx:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax call_arguments_item.1:r15 $53.1:r14 
  # jump($53.1, .LABEL__convert_direct_call_expression_106__29, .LABEL__convert_direct_call_expression_106__28)
  test r14b, r14b
  mov [rbp-85], rax
  mov [rbp-86], r14b
  mov [rbp-94], r15
  jz .LABEL__convert_direct_call_expression_106__28
.LABEL__convert_direct_call_expression_106__29:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.4, call_arguments_item.1)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] 
  .loc 3 997 34
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-94]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx 
  .loc 3 998 21
  # $56.1: @String = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx $56.1:r15 
  .loc 3 998 21
  # $57.1: Boolean = $56.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx $57.1:r14 
  # jump($57.1, .LABEL__convert_direct_call_expression_106__31, .LABEL__convert_direct_call_expression_106__32)
  test r14b, r14b
  mov [rbp-102], rbx
  mov [rbp-103], r14b
  jz .LABEL__convert_direct_call_expression_106__32
.LABEL__convert_direct_call_expression_106__31:
  .loc 3 999 36
  # $58.1: @String = load_struct_member(call_argument.1, name)
  mov rax, [rbp-102]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $58.1:rbx 
  .loc 3 999 21
  # $59.1: @String = call(append_349, message.1, $58.1)
  mov rdi, [rbp-85]
  mov rsi, rbx
  call append_349
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] $59.1:rax 
  .loc 3 999 21
  # $60.1: @String = call(append_349, $59.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call append_349
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # jump(.LABEL__convert_direct_call_expression_106__32)
.LABEL__convert_direct_call_expression_106__32:
  .loc 3 1001 32
  # $61.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rax, [rbp-102]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $61.1:rbx 
  .loc 3 1001 32
  # $62.1: @IR_Type = load_struct_member($61.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $62.1:r15 
  .loc 3 1001 32
  # $63.1: @String = load_struct_member($62.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $63.1:rbx 
  .loc 3 1001 17
  # $64.1: @String = call(append_349, message.1, $63.1)
  mov rdi, [rbp-85]
  mov rsi, rbx
  call append_349
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  .loc 3 1002 39
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-94]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:rbx:[rbp-94] 
  .loc 3 1003 21
  # $66.1: Boolean = call_arguments_item.4 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:rbx:[rbp-94] $66.1:rax 
  # jump($66.1, .LABEL__convert_direct_call_expression_106__28, .LABEL__convert_direct_call_expression_106__34)
  test al, al
  mov [rbp-104], al
  mov [rbp-94], rbx
  jz .LABEL__convert_direct_call_expression_106__34
.LABEL__convert_direct_call_expression_106__28:
  .loc 3 1009 9
  # $68.1: @String = call(append_349, message.1, ") -> Any")
  mov rdi, [rbp-85]
  lea rsi, .LABEL__string_215[rip] # ") -> Any"
  call append_349
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  .loc 3 1010 15
  # $69.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] $69.1:rbx call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  .loc 3 1010 9
  # call(abort_309, $69.1, message.1)
  mov rdi, rbx
  mov rsi, [rbp-85]
  call abort_309
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
.LABEL__convert_direct_call_expression_106__34:
  .loc 3 1006 17
  # $67.1: @String = call(append_349, message.1, ", ")
  mov rdi, [rbp-85]
  lea rsi, .LABEL__string_38[rip] # ", "
  call append_349
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  # jump(.LABEL__convert_direct_call_expression_106__29)
  jmp .LABEL__convert_direct_call_expression_106__29
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] 
  # [discarded value]: call_argument.1
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] 
  # [discarded value]: named_functions_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] 
  # [discarded value]: named_functions_item.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] 
.LABEL__convert_direct_call_expression_106__21:
  .loc 3 1013 5
  # result_value.1: @IR_Variable_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax 
  .loc 3 1014 9
  # $70.1: @IR_Type = load_struct_member(call_function.8, return_type)
  mov rbx, [rbp-58]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rbx:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax $70.1:r15 
  # IR_Nothing_Type.5: @Object_Type = load_variable(IR_Nothing_Type)
  lea r14, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rbx:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax $70.1:r15 IR_Nothing_Type.5:r14 
  .loc 3 1014 9
  # $71.1: Boolean = call(is_338, $70.1, IR_Nothing_Type.5)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-76], rax
  call is_338
  # [discarded value]: IR_Nothing_Type.5
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $71.1:rax 
  .loc 3 1014 9
  # $72.1: Boolean = $71.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:rbx 
  # jump($72.1, .LABEL__convert_direct_call_expression_106__36, .LABEL__convert_direct_call_expression_106__37)
  test bl, bl
  mov [rbp-77], bl
  jz .LABEL__convert_direct_call_expression_106__37
.LABEL__convert_direct_call_expression_106__36:
  .loc 3 1015 47
  # $73.1: @IR_Type = load_struct_member(call_function.8, return_type)
  mov rax, [rbp-58]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rax:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] $73.1:rbx 
  .loc 3 1015 24
  # result_value.2: @IR_Variable_Value = call(create_temp_value_73, self.1, $73.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:rax:[rbp-76] 
  # jump(.LABEL__convert_direct_call_expression_106__37)
  mov [rbp-76], rax
.LABEL__convert_direct_call_expression_106__37:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] result_value.3:[rbp-76] 
  .loc 3 1017 24
  # $75.1: @IR_Call_Instruction = call(create_ir_direct_call_instruction_187, result_value.3, call_arguments.1, call_function.8)
  mov rdi, [rbp-76]
  mov rsi, [rbp-49]
  mov rdx, [rbp-58]
  call create_ir_direct_call_instruction_187
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $75.1:rax 
  .loc 3 1017 104
  # $76.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $75.1:rax $76.1:r15 
  .loc 3 1017 12
  # $77.1: @IR_Variable_Value = call(append_74, self.1, $75.1, $76.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $77.1:rax 
  .loc 3 1017 5
  # return($77.1)
  mov [rbp-85], rax
  jmp .LABEL__convert_direct_call_expression_106__end
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] 
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] 
  # [discarded value]: named_functions_item.2
  # [discarded value]: call_function.8
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] 
  # [discarded value]: named_functions_item.1
  # [discarded value]: call_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] 
  # [discarded value]: $4.1
  # [discarded value]: type.1
  # [discarded value]: first_argument.1
  # [discarded value]: callee_name.1
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_direct_call_expression_106__end:
  mov rsp, rbp
  pop rbp
  ret

convert_direct_call_expression_106__stack_frame_size: .word 112

  .loc 3 1020 1
  .text
convert_dynamic_call_expression_107:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_dynamic_call_expression_107__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_dynamic_call_expression_107__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # call_function.1: @IR_Value = load_variable(call_function)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx 
  .loc 3 1021 51
  # $1.1: @List = load_struct_member(call_expression.1, arguments)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx $1.1:rax 
  .loc 3 1021 23
  # call_arguments.1: @List = call(convert_call_arguments_109, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call convert_call_arguments_109
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax 
  .loc 3 1022 9
  # $3.1: Boolean = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__convert_dynamic_call_expression_107__2, .LABEL__convert_dynamic_call_expression_107__3)
  test bl, bl
  mov [rbp-40], rax
  mov [rbp-41], bl
  jz .LABEL__convert_dynamic_call_expression_107__3
.LABEL__convert_dynamic_call_expression_107__2:
  .loc 3 1023 32
  # $4.1: @IR_Call_Argument = new(IR_Call_Argument)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] $4.1:rax 
  # store_struct_member($4.1, name, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] $4.1:rax 
  # store_struct_member($4.1, value, first_argument.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:rbx:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] $4.1:rax 
  .loc 3 1023 9
  # call(prepend_314, call_arguments.1, $4.1)
  mov rdi, [rbp-40]
  mov rsi, rax
  call prepend_314
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # jump(.LABEL__convert_dynamic_call_expression_107__3)
.LABEL__convert_dynamic_call_expression_107__3:
  .loc 3 1025 27
  # call_function_type.1: @IR_Function_Type = load_struct_member(call_function.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:rax:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx 
  .loc 3 1026 9
  # $7.1: Boolean = call(accepts_108, call_function_type.1, call_arguments.1)
  mov rdi, rbx
  mov rsi, [rbp-40]
  mov [rbp-49], rbx
  call accepts_108
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $7.1:rax 
  .loc 3 1026 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:rbx 
  # jump($8.1, .LABEL__convert_dynamic_call_expression_107__4, .LABEL__convert_dynamic_call_expression_107__5)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__convert_dynamic_call_expression_107__5
.LABEL__convert_dynamic_call_expression_107__4:
  .loc 3 1027 15
  # $9.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] $9.1:rbx 
  .loc 3 1027 9
  # call(abort_309, $9.1, "Unsupported arguments")
  mov rdi, rbx
  lea rsi, .LABEL__string_216[rip] # "Unsupported arguments"
  call abort_309
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] 
.LABEL__convert_dynamic_call_expression_107__5:
  .loc 3 1029 5
  # result_value.1: @IR_Variable_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:rax 
  .loc 3 1030 9
  # $10.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  mov rbx, [rbp-49]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx:[rbp-49] $8.1:[rbp-50] result_value.1:rax $10.1:r15 
  # IR_Nothing_Type.6: @Object_Type = load_variable(IR_Nothing_Type)
  lea r14, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx:[rbp-49] $8.1:[rbp-50] result_value.1:rax $10.1:r15 IR_Nothing_Type.6:r14 
  .loc 3 1030 9
  # $11.1: Boolean = call(is_338, $10.1, IR_Nothing_Type.6)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-58], rax
  call is_338
  # [discarded value]: IR_Nothing_Type.6
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $11.1:rax 
  .loc 3 1030 9
  # $12.1: Boolean = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:rbx 
  # jump($12.1, .LABEL__convert_dynamic_call_expression_107__6, .LABEL__convert_dynamic_call_expression_107__7)
  test bl, bl
  mov [rbp-59], bl
  jz .LABEL__convert_dynamic_call_expression_107__7
.LABEL__convert_dynamic_call_expression_107__6:
  .loc 3 1031 47
  # $13.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  mov rax, [rbp-49]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rax:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] $13.1:rbx 
  .loc 3 1031 24
  # result_value.2: @IR_Variable_Value = call(create_temp_value_73, self.1, $13.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:rax:[rbp-58] 
  # jump(.LABEL__convert_dynamic_call_expression_107__7)
  mov [rbp-58], rax
.LABEL__convert_dynamic_call_expression_107__7:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] result_value.3:[rbp-58] 
  .loc 3 1033 89
  # $15.1: @IR_Variable_Value = call_function.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] result_value.3:[rbp-58] $15.1:rax 
  .loc 3 1033 24
  # $16.1: @IR_Call_Instruction = call(create_ir_dynamic_call_instruction_189, result_value.3, call_arguments.1, $15.1)
  mov rdi, [rbp-58]
  mov rsi, [rbp-40]
  mov rdx, rax
  call create_ir_dynamic_call_instruction_189
  # [discarded value]: $15.1
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $16.1:rax 
  .loc 3 1033 127
  # $17.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $16.1:rax $17.1:r15 
  .loc 3 1033 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $18.1:rax 
  .loc 3 1033 5
  # return($18.1)
  mov [rbp-67], rax
  jmp .LABEL__convert_dynamic_call_expression_107__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] 
  # [discarded value]: call_function_type.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [discarded value]: call_arguments.1
  # [discarded value]: first_argument.1
  # [discarded value]: call_function.1
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_dynamic_call_expression_107__end:
  mov rsp, rbp
  pop rbp
  ret

convert_dynamic_call_expression_107__stack_frame_size: .word 80

  .loc 3 1036 1
  .text
accepts_108:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_108__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_108__1:
  # self.1: @IR_Function_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 3 1037 28
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rsi]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  .loc 3 1038 33
  # $2.1: @List = load_struct_member(self.1, parameters)
  mov rbx, [rdi+16]
  # [discarded value]: self.1
  # [live values]: call_arguments_item.1:rax $2.1:rbx 
  .loc 3 1038 33
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $2.1
  # [live values]: call_arguments_item.1:rax function_parameters_item.1:r15 
  # jump(.LABEL__accepts_108__2)
  mov [rbp-8], rax
  mov [rbp-16], r15
.LABEL__accepts_108__2:
  # function_parameters_item.9: @List_Item = phi(function_parameters_item.1, function_parameters_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] 
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] 
  .loc 3 1039 12
  # $5.1: Boolean = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, .LABEL__accepts_108__7, .LABEL__accepts_108__8)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_108__8
.LABEL__accepts_108__7:
  .loc 3 1039 43
  # $5.2: Boolean = function_parameters_item.9 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__accepts_108__8)
  mov [rbp-17], al
.LABEL__accepts_108__8:
  .loc 3 1039 12
  # $7.1: Boolean = phi($5.1, $5.2)
  mov al, [rbp-17]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__accepts_108__5, .LABEL__accepts_108__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_108__6
.LABEL__accepts_108__5:
  .loc 3 1039 80
  # $9.1: @IR_Function_Type_Parameter = load_struct_member(function_parameters_item.9, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $9.1:rbx $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1039 79
  # $10.1: @IR_Type = load_struct_member($9.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $10.1:r15 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1039 156
  # $12.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rbx, [rbp-8]
  mov r14, [rbx+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $12.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1039 155
  # $13.1: @IR_Value = load_struct_member($12.1, value)
  mov r13, [r14+8]
  # [discarded value]: $12.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $13.1:r13 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1039 155
  # $14.1: @IR_Type = load_struct_member($13.1, type)
  mov r14, [r13+8]
  # [discarded value]: $13.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $14.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1039 79
  # $7.2: Boolean = call(accepts_71, $10.1, $14.1)
  mov rdi, r15
  mov rsi, r14
  call accepts_71
  # [discarded value]: $14.1
  # [discarded value]: $10.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:rax:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(.LABEL__accepts_108__6)
  mov [rbp-18], al
.LABEL__accepts_108__6:
  .loc 3 1039 12
  # $7.3: Boolean = phi($7.1, $7.2)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($7.3, .LABEL__accepts_108__3, .LABEL__accepts_108__4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__accepts_108__4
.LABEL__accepts_108__3:
  .loc 3 1040 31
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1041 36
  # function_parameters_item.5: @List_Item = load_struct_member(function_parameters_item.9, next_item)
  mov rax, [rbp-16]
  mov r15, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] function_parameters_item.5:r15:[rbp-16] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(.LABEL__accepts_108__2)
  mov [rbp-8], rbx
  mov [rbp-16], r15
  jmp .LABEL__accepts_108__2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:[rbp-8] function_parameters_item.5:[rbp-16] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: function_parameters_item.5
  # [discarded value]: call_arguments_item.5
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
.LABEL__accepts_108__4:
  .loc 3 1043 12
  # $19.1: Boolean = call_arguments_item.2 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:rax $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($19.1, .LABEL__accepts_108__9, .LABEL__accepts_108__10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_108__10
.LABEL__accepts_108__9:
  .loc 3 1043 43
  # $19.2: Boolean = function_parameters_item.9 == null
  cmp QWORD PTR [rbp-16], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:rax:[rbp-19] 
  # jump(.LABEL__accepts_108__10)
  mov [rbp-19], al
.LABEL__accepts_108__10:
  .loc 3 1043 12
  # $19.3: Boolean = phi($19.1, $19.2)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] $19.3:[rbp-19] 
  .loc 3 1043 5
  # return($19.3)
  mov al, [rbp-19]
  jmp .LABEL__accepts_108__end
  # [discarded value]: $19.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [discarded value]: $19.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $19.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: call_arguments_item.2
  # [discarded value]: function_parameters_item.9
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [discarded value]: function_parameters_item.1
  # [discarded value]: call_arguments_item.1
  # [live values]: 
.LABEL__accepts_108__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_108__stack_frame_size: .word 32

  .loc 3 1046 1
  .text
convert_call_arguments_109:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_arguments_109__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_arguments_109__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # ast_call_arguments.1: @List = load_variable(ast_call_arguments)
  # [live values]: self.1:rdi ast_call_arguments.1:rsi 
  .loc 3 1047 5
  # has_named_arguments.1: Boolean = false
  mov al, 0
  # [live values]: self.1:rdi ast_call_arguments.1:rsi has_named_arguments.1:rax 
  .loc 3 1048 23
  # $1.1: @List = new(List)
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  .loc 3 1048 5
  # call_arguments.1: @List = $1.1
  mov [rbp-25], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] call_arguments.1:rax 
  .loc 3 1049 32
  # ast_call_arguments_item.1: @List_Item = load_struct_member(ast_call_arguments.1, first_item)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [discarded value]: ast_call_arguments.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:rax ast_call_arguments_item.1:r15 
  # jump(.LABEL__convert_call_arguments_109__2)
  mov [rbp-25], rax
  mov [rbp-33], r15
.LABEL__convert_call_arguments_109__2:
  # has_named_arguments.4: Boolean = phi(has_named_arguments.1, has_named_arguments.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] 
  # ast_call_arguments_item.2: @List_Item = phi(ast_call_arguments_item.1, ast_call_arguments_item.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  .loc 3 1050 12
  # $3.1: Boolean = ast_call_arguments_item.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:rax 
  # jump($3.1, .LABEL__convert_call_arguments_109__3, .LABEL__convert_call_arguments_109__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_call_arguments_109__4
.LABEL__convert_call_arguments_109__3:
  .loc 3 1051 26
  # call_argument.1: @AST_Call_Argument = load_struct_member(ast_call_arguments_item.2, data)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx 
  .loc 3 1052 56
  # $6.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx $6.1:r15 
  .loc 3 1052 32
  # call_argument_value.1: @IR_Value = call(convert_expression_101, self.1, $6.1, null)
  mov rdi, [rbp-17]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-42], rbx
  call convert_expression_101
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:rax 
  .loc 3 1053 13
  # $8.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rbx, [rbp-42]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx:[rbp-42] call_argument_value.1:rax $8.1:r15 
  .loc 3 1053 13
  # $9.1: Boolean = $8.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx:[rbp-42] call_argument_value.1:rax $9.1:r14 
  # jump($9.1, .LABEL__convert_call_arguments_109__5, .LABEL__convert_call_arguments_109__7)
  test r14b, r14b
  mov [rbp-50], rax
  mov [rbp-51], r14b
  jz .LABEL__convert_call_arguments_109__7
.LABEL__convert_call_arguments_109__5:
  .loc 3 1054 63
  # $13.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rax, [rbp-42]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $13.1:rbx 
  .loc 3 1054 63
  # $14.1: @String = load_struct_member($13.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $14.1:r15 
  .loc 3 1054 35
  # $15.1: @IR_Call_Argument = new(IR_Call_Argument)
  mov [rbp-59], r15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $14.1:[rbp-59] $15.1:rax 
  # store_struct_member($15.1, name, $14.1)
  mov rbx, [rbp-59]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $15.1:rax 
  # store_struct_member($15.1, value, call_argument_value.1)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:rbx:[rbp-50] $9.1:[rbp-51] $15.1:rax 
  .loc 3 1054 13
  # call(append_313, call_arguments.1, $15.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_313
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
  .loc 3 1055 13
  # has_named_arguments.3: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:rax:[rbp-1] 
  # jump(.LABEL__convert_call_arguments_109__6)
  mov [rbp-1], al
.LABEL__convert_call_arguments_109__6:
  # has_named_arguments.5: Boolean = phi(has_named_arguments.3, has_named_arguments.4)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] 
  .loc 3 1062 35
  # ast_call_arguments_item.5: @List_Item = load_struct_member(ast_call_arguments_item.2, next_item)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:rbx:[rbp-33] 
  # jump(.LABEL__convert_call_arguments_109__2)
  mov [rbp-33], rbx
  jmp .LABEL__convert_call_arguments_109__2
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.5
  # [discarded value]: has_named_arguments.5
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] 
  # [discarded value]: has_named_arguments.3
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__convert_call_arguments_109__7:
  # jump(has_named_arguments.4, .LABEL__convert_call_arguments_109__8, .LABEL__convert_call_arguments_109__9)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__convert_call_arguments_109__9
.LABEL__convert_call_arguments_109__8:
  .loc 3 1058 23
  # $10.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $10.1:rbx 
  .loc 3 1058 23
  # $11.1: @Source_Location = load_struct_member($10.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $11.1:r15 
  .loc 3 1058 17
  # call(abort_309, $11.1, "Positional arguments cannot be added after named ones")
  mov rdi, r15
  lea rsi, .LABEL__string_217[rip] # "Positional arguments cannot be added after named ones"
  call abort_309
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__convert_call_arguments_109__9:
  .loc 3 1060 35
  # $12.1: @IR_Call_Argument = new(IR_Call_Argument)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $12.1:rax 
  # store_struct_member($12.1, name, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $12.1:rax 
  # store_struct_member($12.1, value, call_argument_value.1)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:rbx:[rbp-50] $9.1:[rbp-51] $12.1:rax 
  .loc 3 1060 13
  # call(append_313, call_arguments.1, $12.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_313
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
  # jump(.LABEL__convert_call_arguments_109__6)
  jmp .LABEL__convert_call_arguments_109__6
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] 
  # [discarded value]: call_argument_value.1
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] 
.LABEL__convert_call_arguments_109__4:
  .loc 3 1064 5
  # return(call_arguments.1)
  mov rax, [rbp-25]
  jmp .LABEL__convert_call_arguments_109__end
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.2
  # [discarded value]: has_named_arguments.4
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.1
  # [discarded value]: call_arguments.1
  # [discarded value]: has_named_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_call_arguments_109__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_arguments_109__stack_frame_size: .word 64

  .loc 3 1067 1
  .text
convert_cast_expression_110:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_cast_expression_110__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_cast_expression_110__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # cast_expression.1: @AST_Cast_Expression = load_variable(cast_expression)
  # [live values]: self.1:rdi cast_expression.1:rsi 
  .loc 3 1068 38
  # $1.1: @AST_Expression = load_struct_member(cast_expression.1, value_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi cast_expression.1:rsi $1.1:rax 
  .loc 3 1068 14
  # value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_101
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax 
  .loc 3 1069 68
  # $3.1: @AST_Type = load_struct_member(cast_expression.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:rax $3.1:r15 
  .loc 3 1069 44
  # $4.1: @IR_Type = call(convert_value_type_78, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call convert_value_type_78
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] $4.1:rax 
  .loc 3 1069 21
  # result_value.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax 
  .loc 3 1070 9
  # $6.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:rax $6.1:r15 
  # IR_Pointer_Type.15: @Object_Type = load_variable(IR_Pointer_Type)
  lea r14, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:rax $6.1:r15 IR_Pointer_Type.15:r14 
  .loc 3 1070 9
  # $8.1: Boolean = call(is_338, $6.1, IR_Pointer_Type.15)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call is_338
  # [discarded value]: IR_Pointer_Type.15
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:rax 
  # jump($8.1, .LABEL__convert_cast_expression_110__2, .LABEL__convert_cast_expression_110__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_cast_expression_110__3
.LABEL__convert_cast_expression_110__2:
  .loc 3 1070 43
  # $9.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $9.1:rbx 
  # IR_Pointer_Type.16: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $9.1:rbx IR_Pointer_Type.16:r15 
  .loc 3 1070 43
  # $8.2: Boolean = call(is_338, $9.1, IR_Pointer_Type.16)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Pointer_Type.16
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:rax:[rbp-33] 
  # jump(.LABEL__convert_cast_expression_110__3)
  mov [rbp-33], al
.LABEL__convert_cast_expression_110__3:
  .loc 3 1070 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # jump($8.3, .LABEL__convert_cast_expression_110__4, .LABEL__convert_cast_expression_110__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_cast_expression_110__5
.LABEL__convert_cast_expression_110__4:
  .loc 3 1071 28
  # $11.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_set_instruction_215
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $11.1:rax 
  .loc 3 1071 76
  # $12.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $11.1:rax $12.1:r15 
  .loc 3 1071 16
  # $13.1: @IR_Variable_Value = call(append_74, self.1, $11.1, $12.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $13.1:rax 
  .loc 3 1071 9
  # return($13.1)
  mov [rbp-41], rax
  jmp .LABEL__convert_cast_expression_110__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
.LABEL__convert_cast_expression_110__5:
  .loc 3 1073 9
  # $14.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $14.1:rbx 
  # IR_Int_Type.9: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $14.1:rbx IR_Int_Type.9:r15 
  .loc 3 1073 9
  # $16.1: Boolean = call(is_338, $14.1, IR_Int_Type.9)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int_Type.9
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:rax 
  # jump($16.1, .LABEL__convert_cast_expression_110__7, .LABEL__convert_cast_expression_110__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_cast_expression_110__8
.LABEL__convert_cast_expression_110__7:
  .loc 3 1073 40
  # $17.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $17.1:rbx 
  # IR_Int32_Type.8: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $17.1:rbx IR_Int32_Type.8:r15 
  .loc 3 1073 40
  # $19.1: Boolean = call(is_338, $17.1, IR_Int32_Type.8)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int32_Type.8
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__convert_cast_expression_110__10, .LABEL__convert_cast_expression_110__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_cast_expression_110__9
.LABEL__convert_cast_expression_110__10:
  .loc 3 1073 40
  # $16.2: Boolean = phi($19.1, $19.2)
  mov al, [rbp-35]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:rax:[rbp-34] 
  # jump(.LABEL__convert_cast_expression_110__8)
  mov [rbp-34], al
.LABEL__convert_cast_expression_110__8:
  .loc 3 1073 9
  # $16.3: Boolean = phi($16.1, $16.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
  # jump($16.3, .LABEL__convert_cast_expression_110__11, .LABEL__convert_cast_expression_110__12)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_cast_expression_110__12
.LABEL__convert_cast_expression_110__11:
  .loc 3 1074 28
  # $22.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_192, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_192
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $22.1:rax 
  .loc 3 1074 77
  # $23.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $22.1:rax $23.1:r15 
  .loc 3 1074 16
  # $24.1: @IR_Variable_Value = call(append_74, self.1, $22.1, $23.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $24.1:rax 
  .loc 3 1074 9
  # return($24.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_cast_expression_110__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
.LABEL__convert_cast_expression_110__12:
  .loc 3 1076 9
  # $25.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $25.1:rbx 
  # IR_Int32_Type.9: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $25.1:rbx IR_Int32_Type.9:r15 
  .loc 3 1076 9
  # $27.1: Boolean = call(is_338, $25.1, IR_Int32_Type.9)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int32_Type.9
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:rax 
  # jump($27.1, .LABEL__convert_cast_expression_110__14, .LABEL__convert_cast_expression_110__15)
  test al, al
  mov [rbp-36], al
  jz .LABEL__convert_cast_expression_110__15
.LABEL__convert_cast_expression_110__14:
  .loc 3 1076 42
  # $28.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rbx 
  # IR_Int_Type.10: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rbx IR_Int_Type.10:r15 
  .loc 3 1076 42
  # $30.1: Boolean = call(is_338, $28.1, IR_Int_Type.10)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int_Type.10
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:rax 
  # jump($30.1, .LABEL__convert_cast_expression_110__17, .LABEL__convert_cast_expression_110__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__convert_cast_expression_110__16
.LABEL__convert_cast_expression_110__17:
  .loc 3 1076 42
  # $27.2: Boolean = phi($30.1, $30.2)
  mov al, [rbp-37]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:rax:[rbp-36] 
  # jump(.LABEL__convert_cast_expression_110__15)
  mov [rbp-36], al
.LABEL__convert_cast_expression_110__15:
  .loc 3 1076 9
  # $27.3: Boolean = phi($27.1, $27.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
  # jump($27.3, .LABEL__convert_cast_expression_110__18, .LABEL__convert_cast_expression_110__19)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_cast_expression_110__19
.LABEL__convert_cast_expression_110__18:
  .loc 3 1077 28
  # $33.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_192, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_192
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $33.1:rax 
  .loc 3 1077 77
  # $34.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $33.1:rax $34.1:r15 
  .loc 3 1077 16
  # $35.1: @IR_Variable_Value = call(append_74, self.1, $33.1, $34.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $35.1:rax 
  .loc 3 1077 9
  # return($35.1)
  mov [rbp-45], rax
  jmp .LABEL__convert_cast_expression_110__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
.LABEL__convert_cast_expression_110__19:
  .loc 3 1079 9
  # $36.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $36.1:rbx 
  # IR_Int8_Type.11: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $36.1:rbx IR_Int8_Type.11:r15 
  .loc 3 1079 9
  # $38.1: Boolean = call(is_338, $36.1, IR_Int8_Type.11)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int8_Type.11
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:rax 
  # jump($38.1, .LABEL__convert_cast_expression_110__21, .LABEL__convert_cast_expression_110__22)
  test al, al
  mov [rbp-38], al
  jz .LABEL__convert_cast_expression_110__22
.LABEL__convert_cast_expression_110__21:
  .loc 3 1079 41
  # $39.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rbx 
  # IR_Int_Type.11: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rbx IR_Int_Type.11:r15 
  .loc 3 1079 41
  # $41.1: Boolean = call(is_338, $39.1, IR_Int_Type.11)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int_Type.11
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:rax 
  # jump($41.1, .LABEL__convert_cast_expression_110__24, .LABEL__convert_cast_expression_110__23)
  test al, al
  mov [rbp-39], al
  jz .LABEL__convert_cast_expression_110__23
.LABEL__convert_cast_expression_110__24:
  .loc 3 1079 41
  # $38.2: Boolean = phi($41.1, $41.2)
  mov al, [rbp-39]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:rax:[rbp-38] 
  # jump(.LABEL__convert_cast_expression_110__22)
  mov [rbp-38], al
.LABEL__convert_cast_expression_110__22:
  .loc 3 1079 9
  # $38.3: Boolean = phi($38.1, $38.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
  # jump($38.3, .LABEL__convert_cast_expression_110__25, .LABEL__convert_cast_expression_110__26)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__convert_cast_expression_110__26
.LABEL__convert_cast_expression_110__25:
  .loc 3 1080 28
  # $44.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_192, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_192
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $44.1:rax 
  .loc 3 1080 77
  # $45.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $44.1:rax $45.1:r15 
  .loc 3 1080 16
  # $46.1: @IR_Variable_Value = call(append_74, self.1, $44.1, $45.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $46.1:rax 
  .loc 3 1080 9
  # return($46.1)
  mov [rbp-47], rax
  jmp .LABEL__convert_cast_expression_110__end
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
.LABEL__convert_cast_expression_110__26:
  .loc 3 1082 11
  # $47.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rax:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:rbx 
  .loc 3 1082 37
  # $48.1: @String = call(clone_340, "Cannot cast ")
  lea rdi, .LABEL__string_41[rip] # "Cannot cast "
  mov [rbp-47], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax 
  .loc 3 1082 66
  # $49.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $49.1:r15 
  .loc 3 1082 66
  # $50.1: @String = load_struct_member($49.1, name)
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $50.1:r14 
  .loc 3 1082 37
  # $51.1: @String = call(append_349, $48.1, $50.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $50.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $51.1:rax 
  .loc 3 1082 37
  # $52.1: @String = call(append_349, $51.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # " to "
  call append_349
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax 
  .loc 3 1082 105
  # $53.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $53.1:r15 
  .loc 3 1082 105
  # $54.1: @String = load_struct_member($53.1, name)
  mov r14, [r15+8]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $54.1:r14 
  .loc 3 1082 37
  # $55.1: @String = call(append_349, $52.1, $54.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $54.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $55.1:rax 
  .loc 3 1082 5
  # call(abort_309, $47.1, $55.1)
  mov rdi, [rbp-47]
  mov rsi, rax
  call abort_309
  # [discarded value]: $55.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
  # [discarded value]: $38.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [discarded value]: $38.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
.LABEL__convert_cast_expression_110__23:
  .loc 3 1079 78
  # $42.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rbx 
  # IR_Int32_Type.10: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rbx IR_Int32_Type.10:r15 
  .loc 3 1079 78
  # $41.2: Boolean = call(is_338, $42.1, IR_Int32_Type.10)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int32_Type.10
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:rax:[rbp-39] 
  # jump(.LABEL__convert_cast_expression_110__24)
  mov [rbp-39], al
  jmp .LABEL__convert_cast_expression_110__24
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:[rbp-39] 
  # [discarded value]: $41.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
  # [discarded value]: $27.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
.LABEL__convert_cast_expression_110__16:
  .loc 3 1076 79
  # $31.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rbx 
  # IR_Int8_Type.10: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rbx IR_Int8_Type.10:r15 
  .loc 3 1076 79
  # $30.2: Boolean = call(is_338, $31.1, IR_Int8_Type.10)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int8_Type.10
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:rax:[rbp-37] 
  # jump(.LABEL__convert_cast_expression_110__17)
  mov [rbp-37], al
  jmp .LABEL__convert_cast_expression_110__17
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:[rbp-37] 
  # [discarded value]: $30.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
.LABEL__convert_cast_expression_110__9:
  .loc 3 1073 79
  # $20.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  # IR_Int8_Type.9: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx IR_Int8_Type.9:r15 
  .loc 3 1073 79
  # $19.2: Boolean = call(is_338, $20.1, IR_Int8_Type.9)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Int8_Type.9
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:rax:[rbp-35] 
  # jump(.LABEL__convert_cast_expression_110__10)
  mov [rbp-35], al
  jmp .LABEL__convert_cast_expression_110__10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:[rbp-35] 
  # [discarded value]: $19.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [discarded value]: result_value.1
  # [discarded value]: value.1
  # [discarded value]: cast_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_cast_expression_110__end:
  mov rsp, rbp
  pop rbp
  ret

convert_cast_expression_110__stack_frame_size: .word 48

  .loc 3 1085 1
  .text
convert_divide_expression_111:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_divide_expression_111__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_divide_expression_111__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Divide_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1086 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1086 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1086 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1087 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1087 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1087 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.13: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.13:rbx 
  .loc 3 1088 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.13)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.13
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_divide_expression_111__2, .LABEL__convert_divide_expression_111__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_divide_expression_111__3
.LABEL__convert_divide_expression_111__2:
  # IR_Constant_Value.14: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.14:rax 
  .loc 3 1088 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.14)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.14
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_divide_expression_111__3)
  mov [rbp-41], al
.LABEL__convert_divide_expression_111__3:
  .loc 3 1088 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_divide_expression_111__4, .LABEL__convert_divide_expression_111__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_divide_expression_111__5
.LABEL__convert_divide_expression_111__4:
  .loc 3 1089 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1089 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_divide_expression_111__5:
  .loc 3 1091 88
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1091 65
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 844 64
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_divide_instruction_230)
  lea rbx, dump_ir_divide_instruction_230[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1091 24
  # $15.1: @IR_Divide_Instruction = new(IR_Divide_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Divide_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1091 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1091 137
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1091 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1091 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_divide_expression_111__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_divide_expression_111__end:
  mov rsp, rbp
  pop rbp
  ret

convert_divide_expression_111__stack_frame_size: .word 80

  .loc 3 1094 1
  .text
convert_equals_expression_112:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_equals_expression_112__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_equals_expression_112__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1095 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1095 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_101
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1096 44
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  .loc 3 1096 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $3.1, null)
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_101
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  .loc 3 1097 9
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  .loc 3 1097 32
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1097 9
  # $7.1: Boolean = call(equals_144, $5.1, $6.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call equals_144
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  .loc 3 1097 9
  # $9.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, .LABEL__convert_equals_expression_112__2, .LABEL__convert_equals_expression_112__3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_equals_expression_112__3
.LABEL__convert_equals_expression_112__2:
  .loc 3 1097 63
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx 
  # IR_Pointer_Type.17: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx IR_Pointer_Type.17:r15 
  .loc 3 1097 63
  # $12.1: Boolean = call(is_338, $10.1, IR_Pointer_Type.17)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Pointer_Type.17
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_equals_expression_112__4, .LABEL__convert_equals_expression_112__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_equals_expression_112__5
.LABEL__convert_equals_expression_112__4:
  .loc 3 1097 102
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  # IR_Null_Type.7: @Object_Type = load_variable(IR_Null_Type)
  lea r15, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx IR_Null_Type.7:r15 
  .loc 3 1097 102
  # $14.1: Boolean = call(is_338, $13.1, IR_Null_Type.7)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Null_Type.7
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  .loc 3 1097 102
  # $12.2: Boolean = $14.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_equals_expression_112__5)
  mov [rbp-34], bl
.LABEL__convert_equals_expression_112__5:
  .loc 3 1097 63
  # $9.2: Boolean = phi($12.1, $12.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax:[rbp-33] 
  # jump(.LABEL__convert_equals_expression_112__3)
  mov [rbp-33], al
.LABEL__convert_equals_expression_112__3:
  .loc 3 1097 9
  # $9.3: Boolean = phi($9.1, $9.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, .LABEL__convert_equals_expression_112__6, .LABEL__convert_equals_expression_112__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_equals_expression_112__7
.LABEL__convert_equals_expression_112__6:
  .loc 3 1098 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rbx 
  .loc 3 1098 9
  # call(abort_309, $16.1, "Operands are not the same type")
  mov rdi, rbx
  lea rsi, .LABEL__string_218[rip] # "Operands are not the same type"
  call abort_309
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_equals_expression_112__7:
  # IR_Constant_Value.15: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] IR_Constant_Value.15:rax 
  .loc 3 1100 9
  # $18.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.15)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.15
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, .LABEL__convert_equals_expression_112__8, .LABEL__convert_equals_expression_112__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_equals_expression_112__9
.LABEL__convert_equals_expression_112__8:
  # IR_Constant_Value.16: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] IR_Constant_Value.16:rax 
  .loc 3 1100 45
  # $18.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.16)
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.16
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(.LABEL__convert_equals_expression_112__9)
  mov [rbp-35], al
.LABEL__convert_equals_expression_112__9:
  .loc 3 1100 9
  # $18.3: Boolean = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, .LABEL__convert_equals_expression_112__10, .LABEL__convert_equals_expression_112__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_equals_expression_112__11
.LABEL__convert_equals_expression_112__10:
  .loc 3 1101 15
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $20.1:rbx 
  .loc 3 1101 9
  # call(abort_309, $20.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
.LABEL__convert_equals_expression_112__11:
  .loc 3 1103 99
  # $21.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $21.1:rax 
  .loc 3 1103 76
  # $22.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $21.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax 
  .loc 5 853 79
  # $23.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_equal_comparison_instruction_231)
  lea rbx, dump_ir_equal_comparison_instruction_231[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax $23.1:rbx 
  .loc 5 407 38
  # $24.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-43], rax
  mov [rbp-51], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  .loc 3 1103 24
  # $25.1: @IR_Equals_Comparison_Instruction = new(IR_Equals_Comparison_Instruction)
  mov [rbp-59], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:[rbp-59] $25.1:rax 
  # store_struct_member($25.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:[rbp-59] $25.1:rax 
  # store_struct_member($25.1, result_value, $22.1)
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $24.1:[rbp-59] $25.1:rax 
  # store_struct_member($25.1, operand_values, $24.1)
  mov rbx, [rbp-59]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, dump, $23.1)
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax 
  .loc 3 1103 24
  # $26.1: @IR_Binary_Instruction = call(init_226, $25.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_226
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $26.1:rax 
  .loc 3 1103 163
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $26.1:rax $27.1:r15 
  .loc 3 1103 12
  # $28.1: @IR_Variable_Value = call(append_74, self.1, $26.1, $27.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $28.1:rax 
  .loc 3 1103 5
  # return($28.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_equals_expression_112__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: $9.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_equals_expression_112__end:
  mov rsp, rbp
  pop rbp
  ret

convert_equals_expression_112__stack_frame_size: .word 64

  .loc 3 1106 1
  .text
convert_greater_than_expression_113:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_expression_113__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_expression_113__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1107 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1107 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1107 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1108 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1108 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1108 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.17: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.17:rbx 
  .loc 3 1109 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.17)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.17
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_greater_than_expression_113__2, .LABEL__convert_greater_than_expression_113__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_greater_than_expression_113__3
.LABEL__convert_greater_than_expression_113__2:
  # IR_Constant_Value.18: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.18:rax 
  .loc 3 1109 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.18)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.18
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_greater_than_expression_113__3)
  mov [rbp-41], al
.LABEL__convert_greater_than_expression_113__3:
  .loc 3 1109 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_greater_than_expression_113__4, .LABEL__convert_greater_than_expression_113__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_greater_than_expression_113__5
.LABEL__convert_greater_than_expression_113__4:
  .loc 3 1110 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1110 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_greater_than_expression_113__5:
  .loc 3 1112 100
  # $11.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1112 77
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 862 80
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_greater_comparison_instruction_232)
  lea rbx, dump_ir_greater_comparison_instruction_232[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1112 24
  # $15.1: @IR_Greater_Comparison_Instruction = new(IR_Greater_Comparison_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Greater_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1112 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1112 164
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1112 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1112 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_greater_than_expression_113__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_greater_than_expression_113__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_expression_113__stack_frame_size: .word 80

  .loc 3 1115 1
  .text
convert_greater_than_or_equals_expression_114:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_or_equals_expression_114__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_or_equals_expression_114__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1116 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1116 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1116 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1117 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1117 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1117 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.19: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.19:rbx 
  .loc 3 1118 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.19)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.19
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_greater_than_or_equals_expression_114__2, .LABEL__convert_greater_than_or_equals_expression_114__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_greater_than_or_equals_expression_114__3
.LABEL__convert_greater_than_or_equals_expression_114__2:
  # IR_Constant_Value.20: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.20:rax 
  .loc 3 1118 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.20)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.20
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_greater_than_or_equals_expression_114__3)
  mov [rbp-41], al
.LABEL__convert_greater_than_or_equals_expression_114__3:
  .loc 3 1118 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_greater_than_or_equals_expression_114__4, .LABEL__convert_greater_than_or_equals_expression_114__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_greater_than_or_equals_expression_114__5
.LABEL__convert_greater_than_or_equals_expression_114__4:
  .loc 3 1119 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1119 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_greater_than_or_equals_expression_114__5:
  .loc 3 1121 109
  # $11.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1121 86
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 871 89
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_greater_or_equal_comparison_instruction_233)
  lea rbx, dump_ir_greater_or_equal_comparison_instruction_233[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1121 24
  # $15.1: @IR_Greater_Or_Equal_Comparison_Instruction = new(IR_Greater_Or_Equal_Comparison_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Greater_Or_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1121 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1121 173
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1121 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1121 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_greater_than_or_equals_expression_114__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_greater_than_or_equals_expression_114__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_or_equals_expression_114__stack_frame_size: .word 80

  .loc 3 1124 1
  .text
convert_less_than_expression_115:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_expression_115__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_expression_115__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1125 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1125 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1125 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1126 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1126 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1126 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.21: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.21:rbx 
  .loc 3 1127 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.21)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.21
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_less_than_expression_115__2, .LABEL__convert_less_than_expression_115__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_less_than_expression_115__3
.LABEL__convert_less_than_expression_115__2:
  # IR_Constant_Value.22: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.22:rax 
  .loc 3 1127 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.22)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.22
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_less_than_expression_115__3)
  mov [rbp-41], al
.LABEL__convert_less_than_expression_115__3:
  .loc 3 1127 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_less_than_expression_115__4, .LABEL__convert_less_than_expression_115__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_less_than_expression_115__5
.LABEL__convert_less_than_expression_115__4:
  .loc 3 1128 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1128 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_less_than_expression_115__5:
  .loc 3 1130 97
  # $11.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1130 74
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 880 77
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_less_comparison_instruction_234)
  lea rbx, dump_ir_less_comparison_instruction_234[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1130 24
  # $15.1: @IR_Less_Comparison_Instruction = new(IR_Less_Comparison_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Less_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1130 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1130 161
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1130 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1130 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_less_than_expression_115__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_less_than_expression_115__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_expression_115__stack_frame_size: .word 80

  .loc 3 1133 1
  .text
convert_less_than_or_equals_expression_116:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_or_equals_expression_116__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_or_equals_expression_116__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1134 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1134 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1134 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1135 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1135 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1135 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.23: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.23:rbx 
  .loc 3 1136 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.23)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.23
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_less_than_or_equals_expression_116__2, .LABEL__convert_less_than_or_equals_expression_116__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_less_than_or_equals_expression_116__3
.LABEL__convert_less_than_or_equals_expression_116__2:
  # IR_Constant_Value.24: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.24:rax 
  .loc 3 1136 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.24)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.24
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_less_than_or_equals_expression_116__3)
  mov [rbp-41], al
.LABEL__convert_less_than_or_equals_expression_116__3:
  .loc 3 1136 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_less_than_or_equals_expression_116__4, .LABEL__convert_less_than_or_equals_expression_116__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_less_than_or_equals_expression_116__5
.LABEL__convert_less_than_or_equals_expression_116__4:
  .loc 3 1137 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1137 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_less_than_or_equals_expression_116__5:
  .loc 3 1139 106
  # $11.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1139 83
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 889 86
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_less_or_equal_comparison_instruction_235)
  lea rbx, dump_ir_less_or_equal_comparison_instruction_235[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1139 24
  # $15.1: @IR_Less_Or_Equal_Comparison_Instruction = new(IR_Less_Or_Equal_Comparison_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Less_Or_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1139 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1139 170
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1139 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1139 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_less_than_or_equals_expression_116__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_less_than_or_equals_expression_116__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_or_equals_expression_116__stack_frame_size: .word 80

  .loc 3 1142 1
  .text
convert_literal_expression_117:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_literal_expression_117__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_literal_expression_117__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1143 9
  # $1.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # Boolean_Token.4: @Object_Type = load_variable(Boolean_Token)
  lea rbx, Boolean_Token[rip]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax Boolean_Token.4:rbx 
  .loc 3 1143 9
  # $2.1: Boolean = call(is_338, $1.1, Boolean_Token.4)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_338
  # [discarded value]: Boolean_Token.4
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_literal_expression_117__2, .LABEL__convert_literal_expression_117__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_literal_expression_117__3
.LABEL__convert_literal_expression_117__2:
  .loc 3 1144 45
  # $3.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 3 1144 87
  # $4.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $4.1:r15 
  .loc 5 188 47
  # $5.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea r14, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $4.1:r15 $5.1:r14 
  .loc 5 158 32
  # $6.1: @List = new(List)
  mov [rbp-25], rax
  mov [rbp-33], r14
  mov [rbp-41], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-41] $5.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-41] $5.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-41] $5.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-41] $5.1:[rbp-33] $6.1:rax 
  .loc 3 1144 16
  # $7.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-49], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-41] $5.1:[rbp-33] $6.1:[rbp-49] $7.1:rax 
  # store_struct_member($7.1, type, $3.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-41] $5.1:[rbp-33] $6.1:[rbp-49] $7.1:rax 
  # store_struct_member($7.1, user_instructions, $6.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-41] $5.1:[rbp-33] $7.1:rax 
  # store_struct_member($7.1, dump, $5.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-41] $7.1:rax 
  # store_struct_member($7.1, literal, $4.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 3 1144 9
  # return($7.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_literal_expression_117__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_literal_expression_117__3:
  .loc 3 1146 9
  # $8.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $8.1:rbx 
  # Character_Token.4: @Object_Type = load_variable(Character_Token)
  lea r15, Character_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $8.1:rbx Character_Token.4:r15 
  .loc 3 1146 9
  # $9.1: Boolean = call(is_338, $8.1, Character_Token.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Character_Token.4
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:rax 
  # jump($9.1, .LABEL__convert_literal_expression_117__5, .LABEL__convert_literal_expression_117__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_literal_expression_117__6
.LABEL__convert_literal_expression_117__5:
  .loc 3 1147 45
  # $10.1: @IR_Type = call(get_named_type_63, self.1, "Int8")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_172[rip] # "Int8"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:rax 
  .loc 3 1147 84
  # $11.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:rax $11.1:r15 
  .loc 5 188 47
  # $12.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea r14, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:rax $11.1:r15 $12.1:r14 
  .loc 5 158 32
  # $13.1: @List = new(List)
  mov [rbp-26], rax
  mov [rbp-34], r14
  mov [rbp-42], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-42] $12.1:[rbp-34] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-42] $12.1:[rbp-34] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-42] $12.1:[rbp-34] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-42] $12.1:[rbp-34] $13.1:rax 
  .loc 3 1147 16
  # $14.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-50], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-42] $12.1:[rbp-34] $13.1:[rbp-50] $14.1:rax 
  # store_struct_member($14.1, type, $10.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-42] $12.1:[rbp-34] $13.1:[rbp-50] $14.1:rax 
  # store_struct_member($14.1, user_instructions, $13.1)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-42] $12.1:[rbp-34] $14.1:rax 
  # store_struct_member($14.1, dump, $12.1)
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-42] $14.1:rax 
  # store_struct_member($14.1, literal, $11.1)
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $14.1:rax 
  .loc 3 1147 9
  # return($14.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_literal_expression_117__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] 
.LABEL__convert_literal_expression_117__6:
  .loc 3 1149 9
  # $15.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $15.1:rbx 
  # Integer_Token.6: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $15.1:rbx Integer_Token.6:r15 
  .loc 3 1149 9
  # $16.1: Boolean = call(is_338, $15.1, Integer_Token.6)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Integer_Token.6
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:rax 
  # jump($16.1, .LABEL__convert_literal_expression_117__8, .LABEL__convert_literal_expression_117__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_literal_expression_117__9
.LABEL__convert_literal_expression_117__8:
  .loc 3 1150 45
  # $17.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_171[rip] # "Int"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:rax 
  .loc 3 1150 83
  # $18.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:rax $18.1:r15 
  .loc 5 188 47
  # $19.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea r14, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:rax $18.1:r15 $19.1:r14 
  .loc 5 158 32
  # $20.1: @List = new(List)
  mov [rbp-27], rax
  mov [rbp-35], r14
  mov [rbp-43], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-43] $19.1:[rbp-35] $20.1:rax 
  # store_struct_member($20.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-43] $19.1:[rbp-35] $20.1:rax 
  # store_struct_member($20.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-43] $19.1:[rbp-35] $20.1:rax 
  # store_struct_member($20.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-43] $19.1:[rbp-35] $20.1:rax 
  .loc 3 1150 16
  # $21.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-51], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-43] $19.1:[rbp-35] $20.1:[rbp-51] $21.1:rax 
  # store_struct_member($21.1, type, $17.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $18.1:[rbp-43] $19.1:[rbp-35] $20.1:[rbp-51] $21.1:rax 
  # store_struct_member($21.1, user_instructions, $20.1)
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $18.1:[rbp-43] $19.1:[rbp-35] $21.1:rax 
  # store_struct_member($21.1, dump, $19.1)
  mov rbx, [rbp-35]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $18.1:[rbp-43] $21.1:rax 
  # store_struct_member($21.1, literal, $18.1)
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $21.1:rax 
  .loc 3 1150 9
  # return($21.1)
  mov [rbp-27], rax
  jmp .LABEL__convert_literal_expression_117__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] 
.LABEL__convert_literal_expression_117__9:
  .loc 3 1152 9
  # $22.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $22.1:rbx 
  # Null_Token.4: @Object_Type = load_variable(Null_Token)
  lea r15, Null_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $22.1:rbx Null_Token.4:r15 
  .loc 3 1152 9
  # $23.1: Boolean = call(is_338, $22.1, Null_Token.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Null_Token.4
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:rax 
  # jump($23.1, .LABEL__convert_literal_expression_117__11, .LABEL__convert_literal_expression_117__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_literal_expression_117__12
.LABEL__convert_literal_expression_117__11:
  .loc 3 1153 45
  # $24.1: @IR_Type = call(get_named_type_63, self.1, "Null")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_177[rip] # "Null"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:rax 
  .loc 3 1153 84
  # $25.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:rax $25.1:r15 
  .loc 5 188 47
  # $26.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea r14, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:rax $25.1:r15 $26.1:r14 
  .loc 5 158 32
  # $27.1: @List = new(List)
  mov [rbp-28], rax
  mov [rbp-36], r14
  mov [rbp-44], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-44] $26.1:[rbp-36] $27.1:rax 
  # store_struct_member($27.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-44] $26.1:[rbp-36] $27.1:rax 
  # store_struct_member($27.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-44] $26.1:[rbp-36] $27.1:rax 
  # store_struct_member($27.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-44] $26.1:[rbp-36] $27.1:rax 
  .loc 3 1153 16
  # $28.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-52], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-44] $26.1:[rbp-36] $27.1:[rbp-52] $28.1:rax 
  # store_struct_member($28.1, type, $24.1)
  mov rbx, [rbp-28]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $25.1:[rbp-44] $26.1:[rbp-36] $27.1:[rbp-52] $28.1:rax 
  # store_struct_member($28.1, user_instructions, $27.1)
  mov rbx, [rbp-52]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $25.1:[rbp-44] $26.1:[rbp-36] $28.1:rax 
  # store_struct_member($28.1, dump, $26.1)
  mov rbx, [rbp-36]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $25.1:[rbp-44] $28.1:rax 
  # store_struct_member($28.1, literal, $25.1)
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $28.1:rax 
  .loc 3 1153 9
  # return($28.1)
  mov [rbp-28], rax
  jmp .LABEL__convert_literal_expression_117__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] 
.LABEL__convert_literal_expression_117__12:
  .loc 3 1155 9
  # $29.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $29.1:rbx 
  # String_Token.4: @Object_Type = load_variable(String_Token)
  lea r15, String_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $29.1:rbx String_Token.4:r15 
  .loc 3 1155 9
  # $30.1: Boolean = call(is_338, $29.1, String_Token.4)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: String_Token.4
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:rax 
  # jump($30.1, .LABEL__convert_literal_expression_117__14, .LABEL__convert_literal_expression_117__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__convert_literal_expression_117__15
.LABEL__convert_literal_expression_117__14:
  .loc 3 1156 68
  # $31.1: @IR_Type = call(get_named_type_63, self.1, "String")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_219[rip] # "String"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $31.1:rax 
  .loc 3 1156 45
  # $32.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $31.1)
  mov rdi, rax
  call create_ir_pointer_type_145
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:rax 
  .loc 3 1156 110
  # $33.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:rax $33.1:r15 
  .loc 5 188 47
  # $34.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea r14, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:rax $33.1:r15 $34.1:r14 
  .loc 5 158 32
  # $35.1: @List = new(List)
  mov [rbp-29], rax
  mov [rbp-37], r14
  mov [rbp-45], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-45] $34.1:[rbp-37] $35.1:rax 
  # store_struct_member($35.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-45] $34.1:[rbp-37] $35.1:rax 
  # store_struct_member($35.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-45] $34.1:[rbp-37] $35.1:rax 
  # store_struct_member($35.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-45] $34.1:[rbp-37] $35.1:rax 
  .loc 3 1156 16
  # $36.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-53], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-45] $34.1:[rbp-37] $35.1:[rbp-53] $36.1:rax 
  # store_struct_member($36.1, type, $32.1)
  mov rbx, [rbp-29]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $33.1:[rbp-45] $34.1:[rbp-37] $35.1:[rbp-53] $36.1:rax 
  # store_struct_member($36.1, user_instructions, $35.1)
  mov rbx, [rbp-53]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $33.1:[rbp-45] $34.1:[rbp-37] $36.1:rax 
  # store_struct_member($36.1, dump, $34.1)
  mov rbx, [rbp-37]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $33.1:[rbp-45] $36.1:rax 
  # store_struct_member($36.1, literal, $33.1)
  mov rbx, [rbp-45]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $36.1:rax 
  .loc 3 1156 9
  # return($36.1)
  mov [rbp-29], rax
  jmp .LABEL__convert_literal_expression_117__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] 
.LABEL__convert_literal_expression_117__15:
  .loc 3 1158 9
  # $37.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $37.1:rbx 
  # Undefined_Token.3: @Object_Type = load_variable(Undefined_Token)
  lea r15, Undefined_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $37.1:rbx Undefined_Token.3:r15 
  .loc 3 1158 9
  # $38.1: Boolean = call(is_338, $37.1, Undefined_Token.3)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: Undefined_Token.3
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:rax 
  # jump($38.1, .LABEL__convert_literal_expression_117__17, .LABEL__convert_literal_expression_117__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__convert_literal_expression_117__18
.LABEL__convert_literal_expression_117__17:
  .loc 3 1159 45
  # $39.1: @IR_Type = call(get_named_type_63, self.1, "Undefined")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_178[rip] # "Undefined"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:rax 
  .loc 3 1159 89
  # $40.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:rax $40.1:r15 
  .loc 5 188 47
  # $41.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea r14, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:rax $40.1:r15 $41.1:r14 
  .loc 5 158 32
  # $42.1: @List = new(List)
  mov [rbp-30], rax
  mov [rbp-38], r14
  mov [rbp-46], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:[rbp-46] $41.1:[rbp-38] $42.1:rax 
  # store_struct_member($42.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:[rbp-46] $41.1:[rbp-38] $42.1:rax 
  # store_struct_member($42.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:[rbp-46] $41.1:[rbp-38] $42.1:rax 
  # store_struct_member($42.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:[rbp-46] $41.1:[rbp-38] $42.1:rax 
  .loc 3 1159 16
  # $43.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-54], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:[rbp-46] $41.1:[rbp-38] $42.1:[rbp-54] $43.1:rax 
  # store_struct_member($43.1, type, $39.1)
  mov rbx, [rbp-30]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $40.1:[rbp-46] $41.1:[rbp-38] $42.1:[rbp-54] $43.1:rax 
  # store_struct_member($43.1, user_instructions, $42.1)
  mov rbx, [rbp-54]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $40.1:[rbp-46] $41.1:[rbp-38] $43.1:rax 
  # store_struct_member($43.1, dump, $41.1)
  mov rbx, [rbp-38]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $40.1:[rbp-46] $43.1:rax 
  # store_struct_member($43.1, literal, $40.1)
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $43.1:rax 
  .loc 3 1159 9
  # return($43.1)
  mov [rbp-30], rax
  jmp .LABEL__convert_literal_expression_117__end
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] 
.LABEL__convert_literal_expression_117__18:
  .loc 3 1161 11
  # $44.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $44.1:rbx 
  .loc 3 1161 32
  # $45.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $44.1:rbx $45.1:r15 
  .loc 3 1161 32
  # $46.1: @Object_Type = load_struct_member($45.1, object_type)
  mov r14, [r15]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $44.1:rbx $46.1:r14 
  .loc 3 1161 5
  # call(abort_141, $44.1, $46.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $46.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_literal_expression_117__end:
  mov rsp, rbp
  pop rbp
  ret

convert_literal_expression_117__stack_frame_size: .word 64

  .loc 3 1164 1
  .text
convert_logic_and_expression_118:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_and_expression_118__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_and_expression_118__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_And_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1165 19
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1165 19
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1165 19
  # next_block.1: @IR_Block = call(create_block_168, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_168
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  .loc 3 1166 18
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  .loc 3 1166 18
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  .loc 3 1166 18
  # end_block.1: @IR_Block = call(create_block_168, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_168
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  .loc 3 1167 43
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 1167 71
  # $8.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  .loc 3 1167 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $7.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  .loc 3 1168 50
  # $10.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-40], rax
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  .loc 3 1168 24
  # result_variable.1: @IR_Variable = call(create_temp_variable_72, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_72
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  .loc 3 1169 26
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_67, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  .loc 3 1170 17
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, result_value_left.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_215
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  .loc 3 1170 75
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  .loc 3 1170 5
  # $15.1: @IR_Variable_Value = call(append_74, self.1, $13.1, $14.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  .loc 3 1171 5
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  .loc 3 1171 5
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_165, $16.1, result_value_left.1, next_block.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call append_jump_165
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: result_value_left.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1172 5
  # store_struct_member(self.1, current_block, next_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1173 44
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  .loc 3 1173 73
  # $19.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, rax
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-56], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  .loc 3 1173 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $18.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  .loc 3 1174 43
  # $21.1: @IR_Variable_Value = call(create_variable_value_67, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  .loc 3 1174 17
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, $21.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_215
  # [discarded value]: $21.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  .loc 3 1174 102
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  .loc 3 1174 5
  # $24.1: @IR_Variable_Value = call(append_74, self.1, $22.1, $23.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1175 5
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  .loc 3 1175 5
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $25.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_164
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1176 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  .loc 3 1177 50
  # $27.1: @IR_Variable_Value = call(create_variable_value_67, self.1, result_variable.1)
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_67
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  .loc 3 1177 24
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_241, $27.1)
  mov rdi, rax
  call create_ir_phi_instruction_241
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  .loc 3 1177 96
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  .loc 3 1177 12
  # $30.1: @IR_Variable_Value = call(append_74, self.1, $28.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: self.1
  # [live values]: $30.1:rax 
  .loc 3 1177 5
  # return($30.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_logic_and_expression_118__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_and_expression_118__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_and_expression_118__stack_frame_size: .word 64

  .loc 3 1180 1
  .text
convert_logic_or_expression_119:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_or_expression_119__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_or_expression_119__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_Or_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1181 19
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1181 19
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1181 19
  # next_block.1: @IR_Block = call(create_block_168, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_168
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  .loc 3 1182 18
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  .loc 3 1182 18
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  .loc 3 1182 18
  # end_block.1: @IR_Block = call(create_block_168, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_168
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  .loc 3 1183 43
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 1183 71
  # $8.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  .loc 3 1183 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $7.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  .loc 3 1184 50
  # $10.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-40], rax
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  .loc 3 1184 24
  # result_variable.1: @IR_Variable = call(create_temp_variable_72, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_72
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  .loc 3 1185 26
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_67, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  .loc 3 1186 17
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, result_value_left.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_215
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  .loc 3 1186 75
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  .loc 3 1186 5
  # $15.1: @IR_Variable_Value = call(append_74, self.1, $13.1, $14.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  .loc 3 1187 5
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  .loc 3 1187 5
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_165, $16.1, result_value_left.1, end_block.1, next_block.1)
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  mov rcx, [rbp-24]
  call append_jump_165
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: result_value_left.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1188 5
  # store_struct_member(self.1, current_block, next_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1189 44
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  .loc 3 1189 73
  # $19.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, rax
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  mov [rbp-56], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  .loc 3 1189 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $18.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  .loc 3 1190 43
  # $21.1: @IR_Variable_Value = call(create_variable_value_67, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_67
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  .loc 3 1190 17
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_215, $21.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_215
  # [discarded value]: $21.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  .loc 3 1190 102
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  .loc 3 1190 5
  # $24.1: @IR_Variable_Value = call(append_74, self.1, $22.1, $23.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1191 5
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  .loc 3 1191 5
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_164, $25.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_164
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1192 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  .loc 3 1193 50
  # $27.1: @IR_Variable_Value = call(create_variable_value_67, self.1, result_variable.1)
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_67
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  .loc 3 1193 24
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_241, $27.1)
  mov rdi, rax
  call create_ir_phi_instruction_241
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  .loc 3 1193 96
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  .loc 3 1193 12
  # $30.1: @IR_Variable_Value = call(append_74, self.1, $28.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: self.1
  # [live values]: $30.1:rax 
  .loc 3 1193 5
  # return($30.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_logic_or_expression_119__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_or_expression_119__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_or_expression_119__stack_frame_size: .word 64

  .loc 3 1196 1
  .text
convert_member_access_expression_120:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_120__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_120__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  .loc 3 1197 45
  # $1.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi member_access_expression.1:rsi $1.1:rax 
  .loc 3 1197 21
  # object_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_101
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax 
  .loc 3 1198 26
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx 
  # IR_Pointer_Type.18: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx IR_Pointer_Type.18:r15 
  .loc 3 1199 10
  # $4.1: Boolean = call(is_338, object_value_type.1, IR_Pointer_Type.18)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  mov [rbp-32], rbx
  call is_338
  # [discarded value]: IR_Pointer_Type.18
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:rax 
  .loc 3 1199 9
  # $5.1: Boolean = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:rbx 
  # jump($5.1, .LABEL__convert_member_access_expression_120__2, .LABEL__convert_member_access_expression_120__3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_member_access_expression_120__3
.LABEL__convert_member_access_expression_120__2:
  .loc 3 1200 15
  # $6.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] $6.1:rbx 
  .loc 3 1200 50
  # $7.1: @String = call(clone_340, "Not an IR_Pointer_Type value: ")
  lea rdi, .LABEL__string_207[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-41], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] $6.1:[rbp-41] $7.1:rax 
  .loc 3 1200 97
  # $8.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:rbx:[rbp-32] $5.1:[rbp-33] $6.1:[rbp-41] $7.1:rax $8.1:r15 
  .loc 3 1200 50
  # $9.1: @String = call(append_349, $7.1, $8.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] $6.1:[rbp-41] $9.1:rax 
  .loc 3 1200 9
  # call(abort_309, $6.1, $9.1)
  mov rdi, [rbp-41]
  mov rsi, rax
  call abort_309
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] 
.LABEL__convert_member_access_expression_120__3:
  .loc 3 1202 26
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rax 
  .loc 3 1203 10
  # $11.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rax $11.1:rbx 
  # IR_Struct_Type.16: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rax $11.1:rbx IR_Struct_Type.16:r15 
  .loc 3 1203 10
  # $12.1: Boolean = call(is_338, $11.1, IR_Struct_Type.16)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-41], rax
  call is_338
  # [discarded value]: IR_Struct_Type.16
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $12.1:rax 
  .loc 3 1203 9
  # $13.1: Boolean = $12.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:rbx 
  # jump($13.1, .LABEL__convert_member_access_expression_120__4, .LABEL__convert_member_access_expression_120__5)
  test bl, bl
  mov [rbp-42], bl
  jz .LABEL__convert_member_access_expression_120__5
.LABEL__convert_member_access_expression_120__4:
  .loc 3 1204 15
  # $14.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] $14.1:rbx 
  .loc 3 1204 50
  # $15.1: @String = call(clone_340, "Not a IR_Struct_Type pointer value: ")
  lea rdi, .LABEL__string_220[rip] # "Not a IR_Struct_Type pointer value: "
  mov [rbp-50], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] $14.1:[rbp-50] $15.1:rax 
  .loc 3 1204 103
  # $16.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-41]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rbx:[rbp-41] $13.1:[rbp-42] $14.1:[rbp-50] $15.1:rax $16.1:r15 
  .loc 3 1204 50
  # $17.1: @String = call(append_349, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] $14.1:[rbp-50] $17.1:rax 
  .loc 3 1204 9
  # call(abort_309, $14.1, $17.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call abort_309
  # [discarded value]: $17.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] 
.LABEL__convert_member_access_expression_120__5:
  .loc 3 1206 20
  # struct_type.1: @IR_Struct_Type = load_struct_member(object_value_type.1, pointed_type)
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rax:[rbp-41] $13.1:[rbp-42] struct_type.1:rbx 
  .loc 3 1207 50
  # $20.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov r15, [rbp-8]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:r15:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rax:[rbp-41] $13.1:[rbp-42] struct_type.1:rbx $20.1:r14 
  .loc 3 1207 50
  # $21.1: @String = load_struct_member($20.1, lexeme)
  mov r13, [r14+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:r15:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:rax:[rbp-41] $13.1:[rbp-42] struct_type.1:rbx $21.1:r13 
  .loc 3 1207 27
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $21.1)
  mov rdi, rbx
  mov rsi, r13
  mov [rbp-50], rbx
  call get_member_150
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:rax 
  .loc 3 1208 9
  # $23.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:rax $23.1:rbx 
  # jump($23.1, .LABEL__convert_member_access_expression_120__6, .LABEL__convert_member_access_expression_120__7)
  test bl, bl
  mov [rbp-58], rax
  mov [rbp-59], bl
  jz .LABEL__convert_member_access_expression_120__7
.LABEL__convert_member_access_expression_120__6:
  .loc 3 1209 9
  # call(dump_struct_members_121, struct_type.1)
  mov rdi, [rbp-50]
  call dump_struct_members_121
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] 
  .loc 3 1210 15
  # $24.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $24.1:rbx 
  .loc 3 1210 15
  # $25.1: @Source_Location = load_struct_member($24.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:r15 
  .loc 3 1210 68
  # $26.1: @String = load_struct_member(struct_type.1, name)
  mov rbx, [rbp-50]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:rbx:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:r15 $26.1:r14 
  .loc 3 1210 62
  # $27.1: @String = call(clone_340, $26.1)
  mov rdi, r14
  mov [rbp-67], r15
  call clone_340
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:[rbp-67] $27.1:rax 
  .loc 3 1210 62
  # $28.1: @String = call(append_349, $27.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_221[rip] # " has no such member: "
  call append_349
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:[rbp-67] $28.1:rax 
  .loc 3 1210 125
  # $29.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:[rbp-67] $28.1:rax $29.1:r15 
  .loc 3 1210 125
  # $30.1: @String = load_struct_member($29.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:[rbp-67] $28.1:rax $30.1:r14 
  .loc 3 1210 62
  # $31.1: @String = call(append_349, $28.1, $30.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $25.1:[rbp-67] $31.1:rax 
  .loc 3 1210 9
  # call(abort_309, $25.1, $31.1)
  mov rdi, [rbp-67]
  mov rsi, rax
  call abort_309
  # [discarded value]: $31.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] 
.LABEL__convert_member_access_expression_120__7:
  .loc 3 1212 9
  # $32.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:rax:[rbp-58] $23.1:[rbp-59] $32.1:rbx 
  # IR_Struct_Type.17: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:rax:[rbp-58] $23.1:[rbp-59] $32.1:rbx IR_Struct_Type.17:r15 
  .loc 3 1212 9
  # $33.1: Boolean = call(is_338, $32.1, IR_Struct_Type.17)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.17
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:rax 
  # jump($33.1, .LABEL__convert_member_access_expression_120__8, .LABEL__convert_member_access_expression_120__9)
  test al, al
  mov [rbp-60], al
  jz .LABEL__convert_member_access_expression_120__9
.LABEL__convert_member_access_expression_120__8:
  .loc 3 1213 115
  # $34.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:rax:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $34.1:rbx 
  .loc 3 1213 92
  # $35.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $34.1)
  mov rdi, rbx
  call create_ir_pointer_type_145
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $35.1:rax 
  .loc 3 1213 69
  # $36.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $35.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $36.1:rax 
  .loc 3 1213 28
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_204, $36.1, object_value.1, struct_type_member.1, true)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-58]
  mov cl, 1
  call create_ir_load_struct_member_instruction_204
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $37.1:rax 
  .loc 3 1213 183
  # $38.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $37.1:rax $38.1:r15 
  .loc 3 1213 16
  # $39.1: @IR_Variable_Value = call(append_74, self.1, $37.1, $38.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $39.1:rax 
  .loc 3 1213 9
  # return($39.1)
  mov [rbp-68], rax
  jmp .LABEL__convert_member_access_expression_120__end
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] 
.LABEL__convert_member_access_expression_120__9:
  .loc 3 1215 88
  # $40.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:rax:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $40.1:rbx 
  .loc 3 1215 65
  # $41.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $40.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $41.1:rax 
  .loc 3 1215 24
  # $42.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_204, $41.1, object_value.1, struct_type_member.1, false)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-58]
  mov cl, 0
  call create_ir_load_struct_member_instruction_204
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $42.1:rax 
  .loc 3 1215 156
  # $43.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $42.1:rax $43.1:r15 
  .loc 3 1215 12
  # $44.1: @IR_Variable_Value = call(append_74, self.1, $42.1, $43.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] $44.1:rax 
  .loc 3 1215 5
  # return($44.1)
  mov [rbp-68], rax
  jmp .LABEL__convert_member_access_expression_120__end
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] $33.1:[rbp-60] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] $23.1:[rbp-59] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] struct_type.1:[rbp-50] struct_type_member.1:[rbp-58] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] $13.1:[rbp-42] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] object_value_type.1:[rbp-41] 
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:[rbp-33] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [discarded value]: object_value_type.1
  # [discarded value]: object_value.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_member_access_expression_120__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_120__stack_frame_size: .word 80

  .loc 3 1218 1
  .text
dump_struct_members_121:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_struct_members_121__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_struct_members_121__1:
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: struct_type.1:rdi 
  # stderr.4: @FILE = load_variable(stderr)
  # [live values]: struct_type.1:rdi stderr.4:stderr[rip] 
  .loc 3 1219 5
  # $1.1: @FILE = call(end_line_335, stderr.4)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_335
  # [discarded value]: $1.1
  # [discarded value]: stderr.4
  # [live values]: struct_type.1:[rbp-8] 
  # jump(.LABEL__dump_struct_members_121__2)
.LABEL__dump_struct_members_121__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.6)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 3 1220 12
  # $2.1: Boolean = struct_type.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__dump_struct_members_121__3, .LABEL__dump_struct_members_121__4)
  test al, al
  mov [rbp-9], al
  jz .LABEL__dump_struct_members_121__4
.LABEL__dump_struct_members_121__3:
  .loc 3 1221 37
  # $3.1: @AST_Struct_Statement = load_struct_member(struct_type.2, statement)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 3 1221 37
  # $4.1: @List = load_struct_member($3.1, members)
  mov r15, [rbx+32]
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] $4.1:r15 
  .loc 3 1221 37
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:rbx 
  # jump(.LABEL__dump_struct_members_121__5)
  mov [rbp-17], rbx
.LABEL__dump_struct_members_121__5:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] 
  .loc 3 1222 16
  # $6.1: Boolean = struct_type_members_item.2 != null
  cmp QWORD PTR [rbp-17], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:rax 
  # jump($6.1, .LABEL__dump_struct_members_121__6, .LABEL__dump_struct_members_121__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__dump_struct_members_121__7
.LABEL__dump_struct_members_121__6:
  .loc 3 1223 35
  # struct_type_member.1: @AST_Struct_Member = load_struct_member(struct_type_members_item.2, data)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx 
  .loc 3 1224 40
  # $9.1: @Identifier_Token = load_struct_member(struct_type_member.1, name)
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx $9.1:r15 
  .loc 3 1224 40
  # struct_type_member_name.1: @String = load_struct_member($9.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx struct_type_member_name.1:r14 
  .loc 3 1225 40
  # $11.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.2, struct_type_member_name.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-26], rbx
  mov [rbp-34], r14
  call get_member_150
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] $11.1:rax 
  .loc 3 1225 40
  # struct_type_member_type.1: @IR_Type = load_struct_member($11.1, type)
  mov rbx, [rax+16]
  # [discarded value]: $11.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx 
  # stderr.5: @FILE = load_variable(stderr)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx stderr.5:stderr[rip] 
  .loc 3 1226 26
  # $13.1: @Source_Location = load_struct_member(struct_type_member.1, location)
  mov rax, [rbp-26]
  mov r15, [rax]
  # [discarded value]: struct_type_member.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx stderr.5:stderr[rip] $13.1:r15 
  .loc 3 1226 13
  # $14.1: @FILE = call(write_312, stderr.5, $13.1)
  mov rdi, stderr[rip]
  mov rsi, r15
  mov [rbp-42], rbx
  call write_312
  # [discarded value]: $13.1
  # [discarded value]: stderr.5
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $14.1:rax 
  .loc 3 1226 13
  # $15.1: @FILE = call(write_332, $14.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $14.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $15.1:rax 
  .loc 3 1226 73
  # $16.1: @String = load_struct_member(struct_type.2, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rbx:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $15.1:rax $16.1:r15 
  .loc 3 1226 13
  # $17.1: @FILE = call(write_332, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $17.1:rax 
  .loc 3 1226 13
  # $18.1: @FILE = call(write_334, $17.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $17.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $18.1:rax 
  .loc 3 1226 13
  # $19.1: @FILE = call(write_332, $18.1, struct_type_member_name.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_332
  # [discarded value]: $18.1
  # [discarded value]: struct_type_member_name.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_type.1:[rbp-42] $19.1:rax 
  .loc 3 1226 13
  # $20.1: @FILE = call(write_332, $19.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $19.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_type.1:[rbp-42] $20.1:rax 
  .loc 3 1226 151
  # $21.1: @String = load_struct_member(struct_type_member_type.1, name)
  mov rbx, [rbp-42]
  mov r15, [rbx+8]
  # [discarded value]: struct_type_member_type.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] $20.1:rax $21.1:r15 
  .loc 3 1226 13
  # $22.1: @FILE = call(write_332, $20.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] $22.1:rax 
  .loc 3 1226 13
  # $23.1: @FILE = call(end_line_335, $22.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
  .loc 3 1227 40
  # struct_type_members_item.4: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_members_item.4:rbx:[rbp-17] 
  # jump(.LABEL__dump_struct_members_121__5)
  mov [rbp-17], rbx
  jmp .LABEL__dump_struct_members_121__5
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_members_item.4:[rbp-17] 
  # [discarded value]: struct_type_members_item.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
.LABEL__dump_struct_members_121__7:
  .loc 3 1229 23
  # struct_type.6: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type.6:rbx:[rbp-8] 
  # jump(.LABEL__dump_struct_members_121__2)
  mov [rbp-8], rbx
  jmp .LABEL__dump_struct_members_121__2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type.6:[rbp-8] 
  # [discarded value]: struct_type.6
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
.LABEL__dump_struct_members_121__4:
  # return()
  jmp .LABEL__dump_struct_members_121__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__dump_struct_members_121__end:
  mov rsp, rbp
  pop rbp
  ret

dump_struct_members_121__stack_frame_size: .word 48

  .loc 3 1233 1
  .text
convert_member_access_expression_address_122:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_address_122__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_address_122__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  .loc 3 1234 20
  # result_type.1: @IR_Type = call(deduce_expression_type_136, self.1, member_access_expression.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call deduce_expression_type_136
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax 
  # IR_Pointer_Type.19: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax IR_Pointer_Type.19:rbx 
  .loc 3 1235 9
  # $2.1: Boolean = call(is_338, result_type.1, IR_Pointer_Type.19)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Pointer_Type.19
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__convert_member_access_expression_address_122__2, .LABEL__convert_member_access_expression_address_122__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_member_access_expression_address_122__3
.LABEL__convert_member_access_expression_address_122__2:
  .loc 3 1236 16
  # $3.1: @IR_Value = call(convert_member_access_expression_120, self.1, member_access_expression.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call convert_member_access_expression_120
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 3 1236 9
  # return($3.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_member_access_expression_address_122__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__convert_member_access_expression_address_122__3:
  .loc 3 1238 11
  # $4.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:rbx 
  .loc 3 1238 46
  # $5.1: @Object_Type = load_struct_member(result_type.1, object_type)
  mov r15, [rbp-24]
  mov r14, [r15]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:r15:[rbp-24] $2.1:[rbp-25] $4.1:rbx $5.1:r14 
  .loc 3 1238 5
  # call(abort_141, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [discarded value]: result_type.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_member_access_expression_address_122__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_address_122__stack_frame_size: .word 48

  .loc 3 1241 1
  .text
convert_modulo_expression_123:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_modulo_expression_123__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_modulo_expression_123__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Modulo_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1242 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1242 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1242 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1243 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1243 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1243 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.25: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.25:rbx 
  .loc 3 1244 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.25)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.25
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_modulo_expression_123__2, .LABEL__convert_modulo_expression_123__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_modulo_expression_123__3
.LABEL__convert_modulo_expression_123__2:
  # IR_Constant_Value.26: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.26:rax 
  .loc 3 1244 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.26)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.26
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_modulo_expression_123__3)
  mov [rbp-41], al
.LABEL__convert_modulo_expression_123__3:
  .loc 3 1244 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_modulo_expression_123__4, .LABEL__convert_modulo_expression_123__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_modulo_expression_123__5
.LABEL__convert_modulo_expression_123__4:
  .loc 3 1245 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1245 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_modulo_expression_123__5:
  .loc 3 1247 88
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1247 65
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 898 64
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_modulo_instruction_236)
  lea rbx, dump_ir_modulo_instruction_236[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1247 24
  # $15.1: @IR_Modulo_Instruction = new(IR_Modulo_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Modulo_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1247 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1247 137
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1247 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1247 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_modulo_expression_123__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_modulo_expression_123__end:
  mov rsp, rbp
  pop rbp
  ret

convert_modulo_expression_123__stack_frame_size: .word 80

  .loc 3 1250 1
  .text
convert_multiply_expression_124:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_multiply_expression_124__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_multiply_expression_124__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Multiply_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1251 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1251 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1251 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1252 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1252 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1252 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.27: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.27:rbx 
  .loc 3 1253 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.27)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.27
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_multiply_expression_124__2, .LABEL__convert_multiply_expression_124__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_multiply_expression_124__3
.LABEL__convert_multiply_expression_124__2:
  # IR_Constant_Value.28: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.28:rax 
  .loc 3 1253 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.28)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.28
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_multiply_expression_124__3)
  mov [rbp-41], al
.LABEL__convert_multiply_expression_124__3:
  .loc 3 1253 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_multiply_expression_124__4, .LABEL__convert_multiply_expression_124__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_multiply_expression_124__5
.LABEL__convert_multiply_expression_124__4:
  .loc 3 1254 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1254 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_multiply_expression_124__5:
  .loc 3 1256 90
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1256 67
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 907 66
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_multiply_instruction_237)
  lea rbx, dump_ir_multiply_instruction_237[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1256 24
  # $15.1: @IR_Multiply_Instruction = new(IR_Multiply_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Multiply_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1256 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1256 139
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1256 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1256 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_multiply_expression_124__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_multiply_expression_124__end:
  mov rsp, rbp
  pop rbp
  ret

convert_multiply_expression_124__stack_frame_size: .word 80

  .loc 3 1259 1
  .text
convert_negate_expression_125:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_negate_expression_125__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_negate_expression_125__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Negate_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1260 38
  # $1.1: @AST_Expression = load_struct_member(expression.1, expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1260 61
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1260 14
  # value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rax 
  .loc 3 1262 76
  # $4.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rax $4.1:rbx 
  .loc 3 1262 53
  # $5.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $4.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-32], rax
  call create_temp_value_73
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:rax 
  .loc 5 925 67
  # $6.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_substract_instruction_239)
  lea rbx, dump_ir_substract_instruction_239[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:rax $6.1:rbx 
  .loc 5 407 38
  # $7.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-40], rax
  mov [rbp-48], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  .loc 3 1262 9
  # $8.1: @IR_Substract_Instruction = new(IR_Substract_Instruction)
  mov [rbp-56], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:[rbp-56] $8.1:rax 
  # store_struct_member($8.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:[rbp-56] $8.1:rax 
  # store_struct_member($8.1, result_value, $5.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $6.1:[rbp-48] $7.1:[rbp-56] $8.1:rax 
  # store_struct_member($8.1, operand_values, $7.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $6.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $6.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $6.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $6.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, dump, $6.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:rax 
  .loc 3 1264 24
  # $9.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rbx:[rbp-32] $8.1:rax $9.1:r15 
  .loc 3 1265 69
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov r14, [rbp-8]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-24] expression.1:r14:[rbp-8] value.1:rbx:[rbp-32] $8.1:rax $9.1:r15 $10.1:r13 
  .loc 3 1265 27
  # $11.1: @Integer_Token = new(Integer_Token)
  mov [rbp-40], rax
  mov [rbp-48], r13
  mov [rbp-56], r15
  mov rdi, 40
  call malloc
  lea rbx, Integer_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, lexeme, "")
  lea rbx, .LABEL__string_222[rip] # ""
  mov [rax+8], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, location, $10.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:rax 
  # store_struct_member($11.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:rax 
  # store_struct_member($11.1, value, 0)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:rax 
  .loc 5 188 47
  # $12.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_constant_value_156)
  lea rbx, dump_ir_constant_value_156[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:rax $12.1:rbx 
  .loc 5 158 32
  # $13.1: @List = new(List)
  mov [rbp-64], rax
  mov [rbp-72], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:[rbp-64] $12.1:[rbp-72] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:[rbp-64] $12.1:[rbp-72] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:[rbp-64] $12.1:[rbp-72] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:[rbp-64] $12.1:[rbp-72] $13.1:rax 
  .loc 3 1263 13
  # $14.1: @IR_Constant_Value = new(IR_Constant_Value)
  mov [rbp-80], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $9.1:[rbp-56] $11.1:[rbp-64] $12.1:[rbp-72] $13.1:[rbp-80] $14.1:rax 
  # store_struct_member($14.1, type, $9.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $11.1:[rbp-64] $12.1:[rbp-72] $13.1:[rbp-80] $14.1:rax 
  # store_struct_member($14.1, user_instructions, $13.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $11.1:[rbp-64] $12.1:[rbp-72] $14.1:rax 
  # store_struct_member($14.1, dump, $12.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $11.1:[rbp-64] $14.1:rax 
  # store_struct_member($14.1, literal, $11.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $8.1:[rbp-40] $14.1:rax 
  .loc 3 1262 9
  # $15.1: @IR_Binary_Instruction = call(init_226, $8.1, $14.1, value.1)
  mov rdi, [rbp-40]
  mov rsi, rax
  mov rdx, [rbp-32]
  call init_226
  # [discarded value]: $14.1
  # [discarded value]: $8.1
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $15.1:rax 
  .loc 3 1269 9
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-24] $15.1:rax $16.1:r15 
  .loc 3 1261 12
  # $17.1: @IR_Variable_Value = call(append_74, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: self.1
  # [live values]: $17.1:rax 
  .loc 3 1261 5
  # return($17.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_negate_expression_125__end
  # [discarded value]: $17.1
  # [live values]: 
.LABEL__convert_negate_expression_125__end:
  mov rsp, rbp
  pop rbp
  ret

convert_negate_expression_125__stack_frame_size: .word 80

  .loc 3 1273 1
  .text
convert_new_expression_126:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_new_expression_126__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_new_expression_126__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1274 37
  # $1.1: @AST_Type = load_struct_member(expression.1, type)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1274 13
  # type.1: @IR_Type = call(convert_value_type_78, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_value_type_78
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax 
  # IR_Array_Type.2: @Object_Type = load_variable(IR_Array_Type)
  lea rbx, IR_Array_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax IR_Array_Type.2:rbx 
  .loc 3 1275 9
  # $3.1: Boolean = call(is_338, type.1, IR_Array_Type.2)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_338
  # [discarded value]: IR_Array_Type.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__convert_new_expression_126__2, .LABEL__convert_new_expression_126__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_new_expression_126__3
.LABEL__convert_new_expression_126__2:
  .loc 3 1276 17
  # type.1: @IR_Array_Type = type.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:rax 
  .loc 3 1277 47
  # $5.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:rax $5.1:rbx 
  .loc 3 1277 69
  # $6.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-33], rax
  mov [rbp-41], rbx
  call get_named_type_63
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  .loc 3 1277 23
  # size_value.1: @IR_Value = call(convert_expression_101, self.1, $5.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-41]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] size_value.1:rax 
  .loc 3 1280 63
  # $8.1: @IR_Type = load_struct_member(type.1, pointed_type)
  mov rbx, [rbp-33]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:rbx:[rbp-33] size_value.1:rax $8.1:r15 
  .loc 3 1280 40
  # $9.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $8.1)
  mov rdi, r15
  mov [rbp-41], rax
  call create_ir_pointer_type_145
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] size_value.1:[rbp-41] $9.1:rax 
  .loc 3 1280 17
  # $10.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] size_value.1:[rbp-41] $10.1:rax 
  .loc 3 1281 17
  # $11.1: @IR_Type = load_struct_member(type.1, pointed_type)
  mov rbx, [rbp-33]
  mov r15, [rbx+16]
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] size_value.1:[rbp-41] $10.1:rax $11.1:r15 
  .loc 3 1279 13
  # $12.1: @IR_New_Instruction = call(create_ir_new_instruction_209, $10.1, $11.1, size_value.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-41]
  call create_ir_new_instruction_209
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: size_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $12.1:rax 
  .loc 3 1284 13
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $12.1:rax $13.1:r15 
  .loc 3 1278 16
  # $14.1: @IR_Variable_Value = call(append_74, self.1, $12.1, $13.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $14.1:rax 
  .loc 3 1278 9
  # return($14.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_new_expression_126__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__convert_new_expression_126__3:
  # IR_Struct_Type.18: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] IR_Struct_Type.18:rax 
  .loc 3 1287 9
  # $15.1: Boolean = call(is_338, type.1, IR_Struct_Type.18)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Struct_Type.18
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:rax 
  # jump($15.1, .LABEL__convert_new_expression_126__5, .LABEL__convert_new_expression_126__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_new_expression_126__6
.LABEL__convert_new_expression_126__5:
  .loc 3 1288 17
  # type.1: @IR_Struct_Type = type.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:rax 
  .loc 3 1289 27
  # $17.1: @List = new(List)
  mov [rbp-34], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] $17.1:rax 
  # store_struct_member($17.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] $17.1:rax 
  # store_struct_member($17.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] $17.1:rax 
  # store_struct_member($17.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] $17.1:rax 
  .loc 3 1289 9
  # init_arguments.1: @List = $17.1
  mov [rbp-42], rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:rax 
  .loc 3 1290 60
  # $18.1: @List = load_struct_member(expression.1, init_arguments)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:rax $18.1:r15 
  .loc 3 1290 9
  # call(prepare_struct_init_arguments_127, self.1, init_arguments.1, $18.1, type.1, type.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  mov rcx, [rbp-34]
  mov r8, [rbp-34]
  mov [rbp-42], rax
  call prepare_struct_init_arguments_127
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:[rbp-42] 
  .loc 3 1291 86
  # $19.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, type.1)
  mov rdi, [rbp-34]
  call create_ir_pointer_type_145
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:[rbp-42] $19.1:rax 
  .loc 3 1291 63
  # $20.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $19.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:[rbp-42] $20.1:rax 
  .loc 3 1291 37
  # $21.1: @IR_New_Instruction = call(create_ir_new_instruction_209, $20.1, type.1, null)
  mov rdi, rax
  mov rsi, [rbp-34]
  xor rdx, rdx
  call create_ir_new_instruction_209
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:[rbp-42] $21.1:rax 
  .loc 3 1291 130
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:[rbp-42] $21.1:rax $22.1:r15 
  .loc 3 1291 25
  # result_value.1: @IR_Variable_Value = call(append_74, self.1, $21.1, $22.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_arguments.1:[rbp-42] result_value.1:rax 
  .loc 3 1292 9
  # call(apply_struct_init_arguments_129, self.1, result_value.1, type.1, init_arguments.1, expression.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-34]
  mov rcx, [rbp-42]
  mov r8, [rbp-8]
  mov [rbp-50], rax
  call apply_struct_init_arguments_129
  # [discarded value]: init_arguments.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] result_value.1:[rbp-50] 
  .loc 3 1293 9
  # return(result_value.1)
  mov rax, [rbp-50]
  jmp .LABEL__convert_new_expression_126__end
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] 
.LABEL__convert_new_expression_126__6:
  .loc 3 1295 11
  # $24.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:rbx 
  .loc 3 1295 32
  # $25.1: @String = call(clone_340, "Unsupported type: ")
  lea rdi, .LABEL__string_158[rip] # "Unsupported type: "
  mov [rbp-34], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:[rbp-34] $25.1:rax 
  .loc 3 1295 67
  # $26.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rbx:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:[rbp-34] $25.1:rax $26.1:r15 
  .loc 3 1295 32
  # $27.1: @String = call(append_349, $25.1, $26.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:[rbp-34] $27.1:rax 
  .loc 3 1295 5
  # call(abort_309, $24.1, $27.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_309
  # [discarded value]: $27.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_new_expression_126__end:
  mov rsp, rbp
  pop rbp
  ret

convert_new_expression_126__stack_frame_size: .word 64

  .loc 3 1298 1
  .text
prepare_struct_init_arguments_127:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepare_struct_init_arguments_127__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepare_struct_init_arguments_127__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # init_arguments.1: @List = load_variable(init_arguments)
  # [live values]: self.1:rdi init_arguments.1:rsi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi init_arguments.1:rsi call_arguments.1:rdx 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi init_arguments.1:rsi call_arguments.1:rdx struct_type.1:rcx 
  # base_type.1: @IR_Struct_Type = load_variable(base_type)
  # [live values]: self.1:rdi init_arguments.1:rsi call_arguments.1:rdx struct_type.1:rcx base_type.1:r8 
  .loc 3 1299 28
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rdx]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi init_arguments.1:rsi struct_type.1:rcx base_type.1:r8 call_arguments_item.1:rax 
  # jump(.LABEL__prepare_struct_init_arguments_127__2)
  mov [rbp-8], rax
  mov [rbp-16], rcx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-40], r8
.LABEL__prepare_struct_init_arguments_127__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  .loc 3 1300 12
  # $2.1: Boolean = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__prepare_struct_init_arguments_127__3, .LABEL__prepare_struct_init_arguments_127__4)
  test al, al
  mov [rbp-41], al
  jz .LABEL__prepare_struct_init_arguments_127__4
.LABEL__prepare_struct_init_arguments_127__3:
  .loc 3 1301 26
  # call_argument.1: @AST_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx 
  .loc 3 1302 13
  # $5.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx $5.1:r15 
  .loc 3 1302 13
  # $6.1: Boolean = $5.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx $6.1:r14 
  # jump($6.1, .LABEL__prepare_struct_init_arguments_127__5, .LABEL__prepare_struct_init_arguments_127__6)
  test r14b, r14b
  mov [rbp-49], rbx
  mov [rbp-50], r14b
  jz .LABEL__prepare_struct_init_arguments_127__6
.LABEL__prepare_struct_init_arguments_127__5:
  .loc 3 1303 19
  # $7.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] $7.1:rbx 
  .loc 3 1303 19
  # $8.1: @Source_Location = load_struct_member($7.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] $8.1:r15 
  .loc 3 1303 13
  # call(abort_309, $8.1, "Struct init argument without name")
  mov rdi, r15
  lea rsi, .LABEL__string_223[rip] # "Struct init argument without name"
  call abort_309
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] 
.LABEL__prepare_struct_init_arguments_127__6:
  .loc 3 1305 31
  # $9.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rax, [rbp-49]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] $9.1:rbx 
  .loc 3 1305 31
  # call_argument_name.1: @String = load_struct_member($9.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] call_argument_name.1:r15 
  .loc 3 1306 13
  # $11.1: @IR_Call_Argument = call(get_named_argument_128, init_arguments.1, call_argument_name.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov [rbp-58], r15
  call get_named_argument_128
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $11.1:rax 
  .loc 3 1306 13
  # $12.1: Boolean = $11.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:rbx 
  # jump($12.1, .LABEL__prepare_struct_init_arguments_127__7, .LABEL__prepare_struct_init_arguments_127__8)
  test bl, bl
  mov [rbp-59], bl
  jz .LABEL__prepare_struct_init_arguments_127__8
.LABEL__prepare_struct_init_arguments_127__7:
  .loc 3 1307 35
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, call_argument_name.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-58]
  call get_member_150
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:rax 
  .loc 3 1308 17
  # $14.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:rax $14.1:rbx 
  # jump($14.1, .LABEL__prepare_struct_init_arguments_127__9, .LABEL__prepare_struct_init_arguments_127__10)
  test bl, bl
  mov [rbp-67], rax
  mov [rbp-68], bl
  jz .LABEL__prepare_struct_init_arguments_127__10
.LABEL__prepare_struct_init_arguments_127__9:
  .loc 3 1309 23
  # $15.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rax, [rbp-49]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $15.1:rbx 
  .loc 3 1309 23
  # $16.1: @Source_Location = load_struct_member($15.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $16.1:r15 
  .loc 3 1309 58
  # $17.1: @String = load_struct_member(struct_type.1, name)
  mov rbx, [rbp-16]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:rbx:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $16.1:r15 $17.1:r14 
  .loc 3 1309 52
  # $18.1: @String = call(clone_340, $17.1)
  mov rdi, r14
  mov [rbp-76], r15
  call clone_340
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $16.1:[rbp-76] $18.1:rax 
  .loc 3 1309 52
  # $19.1: @String = call(append_349, $18.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_221[rip] # " has no such member: "
  call append_349
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $16.1:[rbp-76] $19.1:rax 
  .loc 3 1309 52
  # $20.1: @String = call(append_349, $19.1, call_argument_name.1)
  mov rdi, rax
  mov rsi, [rbp-58]
  call append_349
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $16.1:[rbp-76] $20.1:rax 
  .loc 3 1309 17
  # call(abort_309, $16.1, $20.1)
  mov rdi, [rbp-76]
  mov rsi, rax
  call abort_309
  # [discarded value]: $20.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] 
.LABEL__prepare_struct_init_arguments_127__10:
  .loc 3 1311 115
  # $21.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $21.1:rbx 
  .loc 3 1311 147
  # $22.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-67]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:r15:[rbp-67] $14.1:[rbp-68] $21.1:rbx $22.1:r14 
  .loc 3 1311 91
  # $23.1: @IR_Value = call(convert_expression_101, self.1, $21.1, $22.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_101
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $23.1:rax 
  .loc 3 1311 35
  # $24.1: @IR_Call_Argument = new(IR_Call_Argument)
  mov [rbp-76], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $23.1:[rbp-76] $24.1:rax 
  # store_struct_member($24.1, name, call_argument_name.1)
  mov rbx, [rbp-58]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:rbx:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $23.1:[rbp-76] $24.1:rax 
  # store_struct_member($24.1, value, $23.1)
  mov r15, [rbp-76]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:rbx:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] $24.1:rax 
  .loc 3 1311 13
  # call(append_313, init_arguments.1, $24.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_313
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] 
  # jump(.LABEL__prepare_struct_init_arguments_127__8)
.LABEL__prepare_struct_init_arguments_127__8:
  .loc 3 1313 31
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] call_arguments_item.5:rbx:[rbp-8] 
  # jump(.LABEL__prepare_struct_init_arguments_127__2)
  mov [rbp-8], rbx
  jmp .LABEL__prepare_struct_init_arguments_127__2
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] call_arguments_item.5:[rbp-8] 
  # [discarded value]: call_arguments_item.5
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] $14.1:[rbp-68] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] struct_type_member.1:[rbp-67] 
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] $12.1:[rbp-59] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] call_argument_name.1:[rbp-58] 
  # [discarded value]: call_argument_name.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] $6.1:[rbp-50] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] 
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] 
.LABEL__prepare_struct_init_arguments_127__4:
  .loc 3 1315 9
  # $26.1: Boolean = base_type.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:rax 
  # jump($26.1, .LABEL__prepare_struct_init_arguments_127__11, .LABEL__prepare_struct_init_arguments_127__12)
  test al, al
  mov [rbp-42], al
  jz .LABEL__prepare_struct_init_arguments_127__12
.LABEL__prepare_struct_init_arguments_127__11:
  .loc 3 1316 60
  # $27.1: @AST_Struct_Statement = load_struct_member(base_type.1, statement)
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:[rbp-42] $27.1:rbx 
  .loc 3 1316 60
  # $28.1: @List = load_struct_member($27.1, init_arguments)
  mov r15, [rbx+40]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:[rbp-42] $28.1:r15 
  .loc 3 1316 109
  # $29.1: @IR_Struct_Type = load_struct_member(base_type.1, base_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:[rbp-42] $28.1:r15 $29.1:rbx 
  .loc 3 1316 9
  # call(prepare_struct_init_arguments_127, self.1, init_arguments.1, $28.1, struct_type.1, $29.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  mov rdx, r15
  mov rcx, [rbp-16]
  mov r8, rbx
  call prepare_struct_init_arguments_127
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:[rbp-42] 
  # jump(.LABEL__prepare_struct_init_arguments_127__12)
.LABEL__prepare_struct_init_arguments_127__12:
  # return()
  jmp .LABEL__prepare_struct_init_arguments_127__end
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $26.1:[rbp-42] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: base_type.1
  # [discarded value]: struct_type.1
  # [discarded value]: init_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepare_struct_init_arguments_127__end:
  mov rsp, rbp
  pop rbp
  ret

prepare_struct_init_arguments_127__stack_frame_size: .word 80

  .loc 3 1320 1
  .text
get_named_argument_128:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_argument_128__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_argument_128__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: list.1:rdi name.1:rsi 
  .loc 3 1321 18
  # list_item.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: name.1:rsi list_item.1:rax 
  # jump(.LABEL__get_named_argument_128__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_named_argument_128__2:
  # list_item.2: @List_Item = phi(list_item.1, list_item.5)
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  .loc 3 1322 12
  # $2.1: Boolean = list_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_named_argument_128__3, .LABEL__get_named_argument_128__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_named_argument_128__4
.LABEL__get_named_argument_128__3:
  .loc 3 1323 26
  # call_argument.1: @IR_Call_Argument = load_struct_member(list_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx 
  .loc 3 1324 25
  # $5.1: @String = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx $5.1:r15 
  .loc 3 1324 13
  # $6.1: Boolean = call(equals_341, name.1, $5.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-25], rbx
  call equals_341
  # [discarded value]: $5.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:rax 
  # jump($6.1, .LABEL__get_named_argument_128__5, .LABEL__get_named_argument_128__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_named_argument_128__6
.LABEL__get_named_argument_128__5:
  .loc 3 1325 13
  # return(call_argument.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_named_argument_128__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] 
.LABEL__get_named_argument_128__6:
  .loc 3 1327 21
  # list_item.5: @List_Item = load_struct_member(list_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] list_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_named_argument_128__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_named_argument_128__2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] list_item.5:[rbp-8] 
  # [discarded value]: list_item.5
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] 
  # [discarded value]: call_argument.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_named_argument_128__4:
  .loc 3 1329 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_named_argument_128__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [discarded value]: list_item.2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [discarded value]: list_item.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_argument_128__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_argument_128__stack_frame_size: .word 32

  .loc 3 1332 1
  .text
apply_struct_init_arguments_129:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR apply_struct_init_arguments_129__stack_frame_size[rip]
  sub rsp, rax
.LABEL__apply_struct_init_arguments_129__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # object_address_value.1: @IR_Value = load_variable(object_address_value)
  # [live values]: self.1:rdi object_address_value.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx expression.1:r8 
  .loc 3 1333 9
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rdx+16]
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx expression.1:r8 $1.1:rax 
  .loc 3 1333 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx expression.1:r8 $2.1:rbx 
  # jump($2.1, .LABEL__apply_struct_init_arguments_129__2, .LABEL__apply_struct_init_arguments_129__3)
  test bl, bl
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-17], bl
  mov [rbp-25], rsi
  mov [rbp-33], rdi
  mov [rbp-41], r8
  jz .LABEL__apply_struct_init_arguments_129__3
.LABEL__apply_struct_init_arguments_129__2:
  .loc 3 1334 64
  # $3.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:rax:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] $3.1:rbx 
  .loc 3 1334 9
  # call(apply_struct_init_arguments_129, self.1, object_address_value.1, $3.1, call_arguments.1, expression.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, rbx
  mov rcx, [rbp-8]
  mov r8, [rbp-41]
  call apply_struct_init_arguments_129
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] 
  # jump(.LABEL__apply_struct_init_arguments_129__3)
.LABEL__apply_struct_init_arguments_129__3:
  .loc 3 1336 33
  # $4.1: @List = load_struct_member(struct_type.1, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:rax:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] $4.1:rbx 
  .loc 3 1336 33
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:rax:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:r15 
  # jump(.LABEL__apply_struct_init_arguments_129__4)
  mov [rbp-49], r15
.LABEL__apply_struct_init_arguments_129__4:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.5)
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] 
  .loc 3 1337 12
  # $6.1: Boolean = struct_type_members_item.2 != null
  cmp QWORD PTR [rbp-49], 0
  setne al
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:rax 
  # jump($6.1, .LABEL__apply_struct_init_arguments_129__5, .LABEL__apply_struct_init_arguments_129__6)
  test al, al
  mov [rbp-50], al
  jz .LABEL__apply_struct_init_arguments_129__6
.LABEL__apply_struct_init_arguments_129__5:
  .loc 3 1338 31
  # struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(struct_type_members_item.2, data)
  mov rax, [rbp-49]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:rax:[rbp-49] $6.1:[rbp-50] struct_type_member.1:rbx 
  .loc 3 1339 36
  # struct_type_member_name.1: @String = load_struct_member(struct_type_member.1, name)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:rax:[rbp-49] $6.1:[rbp-50] struct_type_member.1:rbx struct_type_member_name.1:r15 
  .loc 3 1340 26
  # call_argument.1: @IR_Call_Argument = call(get_named_argument_128, call_arguments.1, struct_type_member_name.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-58], rbx
  mov [rbp-66], r15
  call get_named_argument_128
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:rax 
  .loc 3 1341 13
  # $11.1: Boolean = call_argument.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:rax $11.1:rbx 
  # jump($11.1, .LABEL__apply_struct_init_arguments_129__7, .LABEL__apply_struct_init_arguments_129__9)
  test bl, bl
  mov [rbp-74], rax
  mov [rbp-75], bl
  jz .LABEL__apply_struct_init_arguments_129__9
.LABEL__apply_struct_init_arguments_129__7:
  .loc 3 1342 36
  # call_argument_value.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rax, [rbp-74]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:rax:[rbp-74] $11.1:[rbp-75] call_argument_value.1:rbx 
  .loc 3 1343 17
  # $22.1: @IR_Type = load_struct_member(call_argument_value.1, type)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:rax:[rbp-74] $11.1:[rbp-75] call_argument_value.1:rbx $22.1:r15 
  # IR_Undefined_Type.4: @Object_Type = load_variable(IR_Undefined_Type)
  lea r14, IR_Undefined_Type[rip]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:rax:[rbp-74] $11.1:[rbp-75] call_argument_value.1:rbx $22.1:r15 IR_Undefined_Type.4:r14 
  .loc 3 1343 17
  # $23.1: Boolean = call(is_338, $22.1, IR_Undefined_Type.4)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-83], rbx
  call is_338
  # [discarded value]: IR_Undefined_Type.4
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $23.1:rax 
  .loc 3 1343 17
  # $24.1: Boolean = $23.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:rbx 
  # jump($24.1, .LABEL__apply_struct_init_arguments_129__10, .LABEL__apply_struct_init_arguments_129__8)
  test bl, bl
  mov [rbp-84], bl
  jz .LABEL__apply_struct_init_arguments_129__8
.LABEL__apply_struct_init_arguments_129__10:
  .loc 3 1344 29
  # $25.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction_223, object_address_value.1, struct_type_member.1, call_argument_value.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-58]
  mov rdx, [rbp-83]
  call create_ir_store_struct_member_instruction_223
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:[rbp-84] $25.1:rax 
  .loc 3 1344 17
  # $26.1: @IR_Variable_Value = call(append_74, self.1, $25.1, null)
  mov rdi, [rbp-33]
  mov rsi, rax
  xor rdx, rdx
  call append_74
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:[rbp-84] 
  # jump(.LABEL__apply_struct_init_arguments_129__8)
.LABEL__apply_struct_init_arguments_129__8:
  .loc 3 1349 36
  # struct_type_members_item.5: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:[rbp-84] struct_type_members_item.5:rbx:[rbp-49] 
  # jump(.LABEL__apply_struct_init_arguments_129__4)
  mov [rbp-49], rbx
  jmp .LABEL__apply_struct_init_arguments_129__4
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:[rbp-84] struct_type_members_item.5:[rbp-49] 
  # [discarded value]: struct_type_members_item.5
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:[rbp-84] 
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] $24.1:[rbp-84] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] call_argument_value.1:[rbp-83] 
  # [discarded value]: call_argument_value.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] 
.LABEL__apply_struct_init_arguments_129__9:
  # stdout.7: @FILE = load_variable(stdout)
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] stdout.7:stdout[rip] 
  .loc 3 1347 26
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:rax:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] stdout.7:stdout[rip] $12.1:rbx 
  .loc 3 1347 13
  # $13.1: @FILE = call(write_312, stdout.7, $12.1)
  mov rdi, stdout[rip]
  mov rsi, rbx
  call write_312
  # [discarded value]: $12.1
  # [discarded value]: stdout.7
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $13.1:rax 
  .loc 3 1347 13
  # $14.1: @FILE = call(write_332, $13.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $14.1:rax 
  .loc 3 1347 65
  # $15.1: @String = load_struct_member(struct_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:rbx:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $14.1:rax $15.1:r15 
  .loc 3 1347 13
  # $16.1: @FILE = call(write_332, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $16.1:rax 
  .loc 3 1347 13
  # $17.1: @FILE = call(write_334, $16.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $17.1:rax 
  .loc 3 1347 13
  # $18.1: @FILE = call(write_332, $17.1, struct_type_member_name.1)
  mov rdi, rax
  mov rsi, [rbp-66]
  call write_332
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $18.1:rax 
  .loc 3 1347 13
  # $19.1: @FILE = call(write_332, $18.1, " is not initialized")
  mov rdi, rax
  lea rsi, .LABEL__string_224[rip] # " is not initialized"
  call write_332
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] $19.1:rax 
  .loc 3 1347 13
  # $20.1: @FILE = call(end_line_335, $19.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] 
  # jump(.LABEL__apply_struct_init_arguments_129__8)
  jmp .LABEL__apply_struct_init_arguments_129__8
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] $11.1:[rbp-75] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] struct_type_member.1:[rbp-58] struct_type_member_name.1:[rbp-66] call_argument.1:[rbp-74] 
  # [discarded value]: call_argument.1
  # [discarded value]: struct_type_member_name.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] 
.LABEL__apply_struct_init_arguments_129__6:
  # return()
  jmp .LABEL__apply_struct_init_arguments_129__end
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] $6.1:[rbp-50] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] struct_type_members_item.2:[rbp-49] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] 
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] struct_type_members_item.1:[rbp-49] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-33] object_address_value.1:[rbp-25] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-41] 
  # [discarded value]: expression.1
  # [discarded value]: call_arguments.1
  # [discarded value]: struct_type.1
  # [discarded value]: object_address_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__apply_struct_init_arguments_129__end:
  mov rsp, rbp
  pop rbp
  ret

apply_struct_init_arguments_129__stack_frame_size: .word 96

  .loc 3 1359 1
  .text
get_130:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_130__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_130__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # struct_member.1: @IR_Struct_Type_Member = load_variable(struct_member)
  # [live values]: list.1:rdi struct_member.1:rsi 
  .loc 3 1360 18
  # list_item.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: struct_member.1:rsi list_item.1:rax 
  # jump(.LABEL__get_130__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_130__2:
  # list_item.2: @List_Item = phi(list_item.1, list_item.5)
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  .loc 3 1361 12
  # $2.1: Boolean = list_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_130__3, .LABEL__get_130__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_130__4
.LABEL__get_130__3:
  .loc 3 1362 32
  # struct_member_value.1: @IR_Struct_Member_Value = load_struct_member(list_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] struct_member_value.1:rbx 
  .loc 3 1363 13
  # $5.1: @IR_Struct_Type_Member = load_struct_member(struct_member_value.1, struct_member)
  mov r15, [rbx]
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] struct_member_value.1:rbx $5.1:r15 
  .loc 3 1363 13
  # $6.1: Boolean = $5.1 == struct_member.1
  cmp r15, QWORD PTR [rbp-16]
  sete r14b
  # [discarded value]: $5.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] struct_member_value.1:rbx $6.1:r14 
  # jump($6.1, .LABEL__get_130__5, .LABEL__get_130__6)
  test r14b, r14b
  mov [rbp-25], rbx
  mov [rbp-26], r14b
  jz .LABEL__get_130__6
.LABEL__get_130__5:
  .loc 3 1364 13
  # return(struct_member_value.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_130__end
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] struct_member_value.1:[rbp-25] $6.1:[rbp-26] 
.LABEL__get_130__6:
  .loc 3 1366 21
  # list_item.5: @List_Item = load_struct_member(list_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] struct_member_value.1:[rbp-25] $6.1:[rbp-26] list_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_130__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_130__2
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] struct_member_value.1:[rbp-25] $6.1:[rbp-26] list_item.5:[rbp-8] 
  # [discarded value]: list_item.5
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] struct_member_value.1:[rbp-25] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] struct_member_value.1:[rbp-25] 
  # [discarded value]: struct_member_value.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_130__4:
  .loc 3 1368 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_130__end
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [discarded value]: list_item.2
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] 
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] 
  # [discarded value]: list_item.1
  # [discarded value]: struct_member.1
  # [live values]: 
.LABEL__get_130__end:
  mov rsp, rbp
  pop rbp
  ret

get_130__stack_frame_size: .word 32

  .loc 3 1371 1
  .text
convert_struct_constructor_expression_131:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_constructor_expression_131__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_constructor_expression_131__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi call_expression.1:rsi struct_type.1:rdx 
  .loc 3 1372 23
  # $1.1: @List = new(List)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] call_expression.1:[rbp-16] struct_type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] call_expression.1:[rbp-16] struct_type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] call_expression.1:[rbp-16] struct_type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] call_expression.1:[rbp-16] struct_type.1:[rbp-8] $1.1:rax 
  .loc 3 1372 5
  # init_arguments.1: @List = $1.1
  mov [rbp-32], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] call_expression.1:[rbp-16] struct_type.1:[rbp-8] init_arguments.1:rax 
  .loc 3 1373 56
  # $2.1: @List = load_struct_member(call_expression.1, arguments)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [discarded value]: call_expression.1
  # [live values]: self.1:[rbp-24] struct_type.1:[rbp-8] init_arguments.1:rax $2.1:r15 
  .loc 3 1373 5
  # call(prepare_struct_init_arguments_127, self.1, init_arguments.1, $2.1, struct_type.1, struct_type.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  mov rcx, [rbp-8]
  mov r8, [rbp-8]
  mov [rbp-32], rax
  call prepare_struct_init_arguments_127
  # [discarded value]: $2.1
  # [discarded value]: self.1
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] 
  .loc 5 200 66
  # $3.1: (value: @IR_Value, file: @FILE) -> @FILE = load_function_address(dump_ir_struct_constructor_value_157)
  lea rax, dump_ir_struct_constructor_value_157[rip]
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:rax 
  .loc 5 197 30
  # $4.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-40], rax
  mov rdi, 16
  call malloc
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:rax 
  # store_struct_member($4.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:rax 
  # store_struct_member($4.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:rax 
  .loc 5 158 32
  # $5.1: @List = new(List)
  mov [rbp-48], rax
  mov rdi, 24
  call malloc
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $5.1:rax 
  .loc 3 1374 12
  # $6.1: @IR_Struct_Constructor_Value = new(IR_Struct_Constructor_Value)
  mov [rbp-56], rax
  mov rdi, 48
  call malloc
  lea rbx, IR_Struct_Constructor_Value[rip]
  mov [rax], rbx
  # [live values]: struct_type.1:[rbp-8] init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $5.1:[rbp-56] $6.1:rax 
  # store_struct_member($6.1, type, struct_type.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: struct_type.1
  # [live values]: init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $5.1:[rbp-56] $6.1:rax 
  # store_struct_member($6.1, user_instructions, $5.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $5.1
  # [live values]: init_arguments.1:[rbp-32] $3.1:[rbp-40] $4.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, dump, $3.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $3.1
  # [live values]: init_arguments.1:[rbp-32] $4.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, values, $4.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $4.1
  # [live values]: init_arguments.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, init_arguments, init_arguments.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+40], rbx
  # [discarded value]: init_arguments.1
  # [live values]: $6.1:rax 
  .loc 3 1374 12
  # $7.1: @IR_Struct_Constructor_Value = call(init_158, $6.1)
  mov rdi, rax
  call init_158
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 3 1374 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_struct_constructor_expression_131__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__convert_struct_constructor_expression_131__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_constructor_expression_131__stack_frame_size: .word 64

  .loc 3 1377 1
  .text
convert_not_equals_expression_132:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_not_equals_expression_132__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_not_equals_expression_132__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Not_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1378 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1378 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_101
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1379 44
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  .loc 3 1379 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $3.1, null)
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_101
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  .loc 3 1380 9
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  .loc 3 1380 32
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1380 9
  # $7.1: Boolean = call(equals_144, $5.1, $6.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call equals_144
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  .loc 3 1380 9
  # $9.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, .LABEL__convert_not_equals_expression_132__2, .LABEL__convert_not_equals_expression_132__3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_not_equals_expression_132__3
.LABEL__convert_not_equals_expression_132__2:
  .loc 3 1380 63
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx 
  # IR_Pointer_Type.20: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx IR_Pointer_Type.20:r15 
  .loc 3 1380 63
  # $12.1: Boolean = call(is_338, $10.1, IR_Pointer_Type.20)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Pointer_Type.20
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_not_equals_expression_132__4, .LABEL__convert_not_equals_expression_132__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_not_equals_expression_132__5
.LABEL__convert_not_equals_expression_132__4:
  .loc 3 1380 102
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  # IR_Null_Type.8: @Object_Type = load_variable(IR_Null_Type)
  lea r15, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx IR_Null_Type.8:r15 
  .loc 3 1380 102
  # $14.1: Boolean = call(is_338, $13.1, IR_Null_Type.8)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Null_Type.8
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  .loc 3 1380 102
  # $12.2: Boolean = $14.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_not_equals_expression_132__5)
  mov [rbp-34], bl
.LABEL__convert_not_equals_expression_132__5:
  .loc 3 1380 63
  # $9.2: Boolean = phi($12.1, $12.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax:[rbp-33] 
  # jump(.LABEL__convert_not_equals_expression_132__3)
  mov [rbp-33], al
.LABEL__convert_not_equals_expression_132__3:
  .loc 3 1380 9
  # $9.3: Boolean = phi($9.1, $9.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, .LABEL__convert_not_equals_expression_132__6, .LABEL__convert_not_equals_expression_132__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_not_equals_expression_132__7
.LABEL__convert_not_equals_expression_132__6:
  .loc 3 1381 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rbx 
  .loc 3 1381 9
  # call(abort_309, $16.1, "Operands are not the same type")
  mov rdi, rbx
  lea rsi, .LABEL__string_218[rip] # "Operands are not the same type"
  call abort_309
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_not_equals_expression_132__7:
  # IR_Constant_Value.29: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] IR_Constant_Value.29:rax 
  .loc 3 1383 9
  # $18.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.29)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.29
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, .LABEL__convert_not_equals_expression_132__8, .LABEL__convert_not_equals_expression_132__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_not_equals_expression_132__9
.LABEL__convert_not_equals_expression_132__8:
  # IR_Constant_Value.30: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] IR_Constant_Value.30:rax 
  .loc 3 1383 45
  # $18.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.30)
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.30
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(.LABEL__convert_not_equals_expression_132__9)
  mov [rbp-35], al
.LABEL__convert_not_equals_expression_132__9:
  .loc 3 1383 9
  # $18.3: Boolean = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, .LABEL__convert_not_equals_expression_132__10, .LABEL__convert_not_equals_expression_132__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_not_equals_expression_132__11
.LABEL__convert_not_equals_expression_132__10:
  .loc 3 1384 15
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $20.1:rbx 
  .loc 3 1384 9
  # call(abort_309, $20.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
.LABEL__convert_not_equals_expression_132__11:
  .loc 3 1386 102
  # $21.1: @IR_Type = call(get_named_type_63, self.1, "Boolean")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_170[rip] # "Boolean"
  call get_named_type_63
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $21.1:rax 
  .loc 3 1386 79
  # $22.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $21.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_73
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax 
  .loc 5 916 82
  # $23.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_not_equal_comparison_instruction_238)
  lea rbx, dump_ir_not_equal_comparison_instruction_238[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax $23.1:rbx 
  .loc 5 407 38
  # $24.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-43], rax
  mov [rbp-51], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  .loc 3 1386 24
  # $25.1: @IR_Not_Equal_Comparison_Instruction = new(IR_Not_Equal_Comparison_Instruction)
  mov [rbp-59], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Not_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:[rbp-59] $25.1:rax 
  # store_struct_member($25.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:[rbp-59] $25.1:rax 
  # store_struct_member($25.1, result_value, $22.1)
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $24.1:[rbp-59] $25.1:rax 
  # store_struct_member($25.1, operand_values, $24.1)
  mov rbx, [rbp-59]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $23.1:[rbp-51] $25.1:rax 
  # store_struct_member($25.1, dump, $23.1)
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax 
  .loc 3 1386 24
  # $26.1: @IR_Binary_Instruction = call(init_226, $25.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_226
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $26.1:rax 
  .loc 3 1386 166
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $26.1:rax $27.1:r15 
  .loc 3 1386 12
  # $28.1: @IR_Variable_Value = call(append_74, self.1, $26.1, $27.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $28.1:rax 
  .loc 3 1386 5
  # return($28.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_not_equals_expression_132__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: $9.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_not_equals_expression_132__end:
  mov rsp, rbp
  pop rbp
  ret

convert_not_equals_expression_132__stack_frame_size: .word 64

  .loc 3 1389 1
  .text
convert_substract_expression_133:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_substract_expression_133__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_substract_expression_133__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Substract_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1390 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1390 71
  # $2.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1390 19
  # left_value.1: @IR_Value = call(convert_expression_101, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1391 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1391 73
  # $5.1: @IR_Type = call(get_named_type_63, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_171[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1391 20
  # right_value.1: @IR_Value = call(convert_expression_101, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_101
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.31: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.31:rbx 
  .loc 3 1392 9
  # $8.1: Boolean = call(is_338, left_value.1, IR_Constant_Value.31)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_338
  # [discarded value]: IR_Constant_Value.31
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_substract_expression_133__2, .LABEL__convert_substract_expression_133__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_substract_expression_133__3
.LABEL__convert_substract_expression_133__2:
  # IR_Constant_Value.32: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.32:rax 
  .loc 3 1392 45
  # $8.2: Boolean = call(is_338, right_value.1, IR_Constant_Value.32)
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Constant_Value.32
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_substract_expression_133__3)
  mov [rbp-41], al
.LABEL__convert_substract_expression_133__3:
  .loc 3 1392 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_substract_expression_133__4, .LABEL__convert_substract_expression_133__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_substract_expression_133__5
.LABEL__convert_substract_expression_133__4:
  .loc 3 1393 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1393 9
  # call(abort_309, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_206[rip] # "TODO: Evaluate constant expression"
  call abort_309
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_substract_expression_133__5:
  .loc 3 1395 91
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1395 68
  # $12.1: @IR_Variable_Value = call(create_temp_value_73, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_73
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 925 67
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_substract_instruction_239)
  lea rbx, dump_ir_substract_instruction_239[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax $13.1:rbx 
  .loc 5 407 38
  # $14.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-49], rax
  mov [rbp-57], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  .loc 3 1395 24
  # $15.1: @IR_Substract_Instruction = new(IR_Substract_Instruction)
  mov [rbp-65], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $14.1:[rbp-65] $15.1:rax 
  # store_struct_member($15.1, operand_values, $14.1)
  mov rbx, [rbp-65]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $13.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, dump, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1395 24
  # $16.1: @IR_Binary_Instruction = call(init_226, $15.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_226
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax 
  .loc 3 1395 140
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $16.1:rax $17.1:r15 
  .loc 3 1395 12
  # $18.1: @IR_Variable_Value = call(append_74, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $18.1:rax 
  .loc 3 1395 5
  # return($18.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_substract_expression_133__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_substract_expression_133__end:
  mov rsp, rbp
  pop rbp
  ret

convert_substract_expression_133__stack_frame_size: .word 80

  .loc 3 1398 1
  .text
convert_variable_expression_134:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_134__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_134__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  .loc 3 1399 35
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $1.1:rax 
  .loc 3 1399 35
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $2.1:rbx 
  .loc 3 1399 17
  # variable.1: @IR_Variable = call(get_variable_65, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call get_variable_65
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax 
  .loc 3 1400 9
  # $4.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_variable_expression_134__2, .LABEL__convert_variable_expression_134__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_variable_expression_134__3
.LABEL__convert_variable_expression_134__2:
  .loc 3 1401 13
  # $6.1: Boolean = expected_type.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:rax 
  # jump($6.1, .LABEL__convert_variable_expression_134__4, .LABEL__convert_variable_expression_134__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_variable_expression_134__5
.LABEL__convert_variable_expression_134__4:
  # IR_Function_Type.10: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] IR_Function_Type.10:rax 
  .loc 3 1401 38
  # $6.2: Boolean = call(is_338, expected_type.1, IR_Function_Type.10)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Function_Type.10
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:rax:[rbp-34] 
  # jump(.LABEL__convert_variable_expression_134__5)
  mov [rbp-34], al
.LABEL__convert_variable_expression_134__5:
  .loc 3 1401 13
  # $6.3: Boolean = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # jump($6.3, .LABEL__convert_variable_expression_134__6, .LABEL__convert_variable_expression_134__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_variable_expression_134__7
.LABEL__convert_variable_expression_134__6:
  .loc 3 1402 49
  # $8.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $8.1:rbx 
  .loc 3 1402 49
  # $9.1: @String = load_struct_member($8.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $9.1:r15 
  .loc 3 1402 73
  # $10.1: @IR_Function_Type = expected_type.1
  mov rbx, [rbp-16]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $9.1:r15 $10.1:rbx 
  .loc 3 1402 25
  # function.1: @IR_Function = call(get_named_function_70, self.1, $9.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov rdx, rbx
  call get_named_function_70
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:rax 
  .loc 3 1403 17
  # $12.1: Boolean = function.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_variable_expression_134__8, .LABEL__convert_variable_expression_134__7)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__convert_variable_expression_134__7
.LABEL__convert_variable_expression_134__8:
  .loc 3 1404 80
  # $13.1: @IR_Variable_Value = call(create_temp_value_73, self.1, expected_type.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call create_temp_value_73
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $13.1:rax 
  .loc 3 1404 36
  # $14.1: @IR_Load_Function_Address_Instruction = call(create_ir_load_function_address_instruction_202, $13.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-42]
  call create_ir_load_function_address_instruction_202
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $14.1:rax 
  .loc 3 1404 130
  # $15.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $14.1:rax $15.1:r15 
  .loc 3 1404 24
  # $16.1: @IR_Variable_Value = call(append_74, self.1, $14.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_74
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $16.1:rax 
  .loc 3 1404 17
  # return($16.1)
  mov [rbp-51], rax
  jmp .LABEL__convert_variable_expression_134__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] 
.LABEL__convert_variable_expression_134__7:
  .loc 3 1407 15
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $17.1:rbx 
  .loc 3 1407 36
  # $18.1: @String = call(clone_340, "Undeclared variable: ")
  lea rdi, .LABEL__string_196[rip] # "Undeclared variable: "
  mov [rbp-51], rbx
  call clone_340
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $17.1:[rbp-51] $18.1:rax 
  .loc 3 1407 74
  # $19.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $17.1:[rbp-51] $18.1:rax $19.1:r15 
  .loc 3 1407 74
  # $20.1: @String = load_struct_member($19.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $17.1:[rbp-51] $18.1:rax $20.1:r14 
  .loc 3 1407 36
  # $21.1: @String = call(append_349, $18.1, $20.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $17.1:[rbp-51] $21.1:rax 
  .loc 3 1407 9
  # call(abort_309, $17.1, $21.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_309
  # [discarded value]: $21.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_variable_expression_134__3:
  .loc 3 1409 14
  # value.1: @IR_Variable_Value = call(get_variable_value_66, self.1, variable.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call get_variable_value_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:rax 
  .loc 3 1410 9
  # $23.1: Boolean = value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:rax $23.1:rbx 
  # jump($23.1, .LABEL__convert_variable_expression_134__11, .LABEL__convert_variable_expression_134__12)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__convert_variable_expression_134__12
.LABEL__convert_variable_expression_134__11:
  .loc 3 1411 15
  # $24.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] $24.1:rbx 
  .loc 3 1411 36
  # $25.1: @String = call(clone_340, "Undeclared variable value: ")
  lea rdi, .LABEL__string_225[rip] # "Undeclared variable value: "
  mov [rbp-50], rbx
  call clone_340
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] $24.1:[rbp-50] $25.1:rax 
  .loc 3 1411 80
  # $26.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] $24.1:[rbp-50] $25.1:rax $26.1:r15 
  .loc 3 1411 80
  # $27.1: @String = load_struct_member($26.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] $24.1:[rbp-50] $25.1:rax $27.1:r14 
  .loc 3 1411 36
  # $28.1: @String = call(append_349, $25.1, $27.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $27.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] $24.1:[rbp-50] $28.1:rax 
  .loc 3 1411 9
  # call(abort_309, $24.1, $28.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call abort_309
  # [discarded value]: $28.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] 
.LABEL__convert_variable_expression_134__12:
  .loc 3 1413 5
  # return(value.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_variable_expression_134__end
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $23.1:[rbp-42] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] 
  # [discarded value]: variable.1
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_expression_134__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_134__stack_frame_size: .word 64

  .loc 3 1416 1
  .text
convert_variable_expression_address_135:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_address_135__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_address_135__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1417 35
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1417 35
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1417 17
  # variable.1: @IR_Variable = call(get_variable_65, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_variable_65
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax 
  .loc 3 1418 9
  # $4.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_variable_expression_address_135__2, .LABEL__convert_variable_expression_address_135__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__convert_variable_expression_address_135__3
.LABEL__convert_variable_expression_address_135__2:
  .loc 3 1419 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 1419 36
  # $6.1: @String = call(clone_340, "Undeclared variable: ")
  lea rdi, .LABEL__string_196[rip] # "Undeclared variable: "
  mov [rbp-33], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax 
  .loc 3 1419 74
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax $7.1:r15 
  .loc 3 1419 74
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax $8.1:r14 
  .loc 3 1419 36
  # $9.1: @String = call(append_349, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $9.1:rax 
  .loc 3 1419 9
  # call(abort_309, $5.1, $9.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  call abort_309
  # [discarded value]: $9.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__convert_variable_expression_address_135__3:
  .loc 3 1421 9
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $10.1:rbx 
  # IR_Pointer_Type.21: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $10.1:rbx IR_Pointer_Type.21:r15 
  .loc 3 1421 9
  # $11.1: Boolean = call(is_338, $10.1, IR_Pointer_Type.21)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Pointer_Type.21
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__convert_variable_expression_address_135__4, .LABEL__convert_variable_expression_address_135__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_variable_expression_address_135__5
.LABEL__convert_variable_expression_address_135__4:
  .loc 3 1422 16
  # $12.1: @IR_Variable_Value = call(get_variable_value_66, self.1, variable.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  .loc 3 1422 9
  # return($12.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_variable_expression_address_135__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__convert_variable_expression_address_135__5:
  .loc 3 1424 11
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:rbx 
  .loc 3 1424 32
  # $14.1: @String = call(clone_340, "Variable type without address: ")
  lea rdi, .LABEL__string_226[rip] # "Variable type without address: "
  mov [rbp-34], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-34] $14.1:rax 
  .loc 3 1424 80
  # $15.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-34] $14.1:rax $15.1:r15 
  .loc 3 1424 80
  # $16.1: @String = load_struct_member($15.1, name)
  mov r14, [r15+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-34] $14.1:rax $16.1:r14 
  .loc 3 1424 32
  # $17.1: @String = call(append_349, $14.1, $16.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $16.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-34] $17.1:rax 
  .loc 3 1424 5
  # call(abort_309, $13.1, $17.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_309
  # [discarded value]: $17.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [discarded value]: variable.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_expression_address_135__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_address_135__stack_frame_size: .word 48

  .loc 3 1427 1
  .text
deduce_expression_type_136:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_expression_type_136__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_expression_type_136__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Call_Expression.3: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Call_Expression.3:rax 
  .loc 3 1428 9
  # $1.1: Boolean = call(is_338, expression.1, AST_Call_Expression.3)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Call_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__deduce_expression_type_136__2, .LABEL__deduce_expression_type_136__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__deduce_expression_type_136__3
.LABEL__deduce_expression_type_136__2:
  .loc 3 1429 49
  # $2.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 1429 16
  # $3.1: @IR_Type = call(deduce_call_expression_type_137, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_call_expression_type_137
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 1429 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__deduce_expression_type_136__3:
  # AST_Literal_Expression.3: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] AST_Literal_Expression.3:rax 
  .loc 3 1431 9
  # $4.1: Boolean = call(is_338, expression.1, AST_Literal_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Literal_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__deduce_expression_type_136__5, .LABEL__deduce_expression_type_136__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__deduce_expression_type_136__6
.LABEL__deduce_expression_type_136__5:
  .loc 3 1432 52
  # $5.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 1432 16
  # $6.1: @IR_Type = call(deduce_literal_expression_type_138, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_literal_expression_type_138
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 1432 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__deduce_expression_type_136__6:
  # AST_Member_Access_Expression.6: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] AST_Member_Access_Expression.6:rax 
  .loc 3 1434 9
  # $7.1: Boolean = call(is_338, expression.1, AST_Member_Access_Expression.6)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Member_Access_Expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__deduce_expression_type_136__8, .LABEL__deduce_expression_type_136__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__deduce_expression_type_136__9
.LABEL__deduce_expression_type_136__8:
  .loc 3 1435 58
  # $8.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $8.1:rax 
  .loc 3 1435 16
  # $9.1: @IR_Type = call(deduce_member_access_expression_type_139, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_member_access_expression_type_139
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $9.1:rax 
  .loc 3 1435 9
  # return($9.1)
  mov [rbp-27], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__deduce_expression_type_136__9:
  # AST_Variable_Expression.6: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] AST_Variable_Expression.6:rax 
  .loc 3 1437 9
  # $10.1: Boolean = call(is_338, expression.1, AST_Variable_Expression.6)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__deduce_expression_type_136__11, .LABEL__deduce_expression_type_136__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__deduce_expression_type_136__12
.LABEL__deduce_expression_type_136__11:
  .loc 3 1438 53
  # $11.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  .loc 3 1438 16
  # $12.1: @IR_Type = call(deduce_variable_expression_type_140, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_variable_expression_type_140
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $12.1:rax 
  .loc 3 1438 9
  # return($12.1)
  mov [rbp-28], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__deduce_expression_type_136__12:
  .loc 3 1440 11
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx 
  .loc 3 1440 32
  # $14.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx $14.1:r15 
  .loc 3 1440 5
  # call(abort_141, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_expression_type_136__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_expression_type_136__stack_frame_size: .word 32

  .loc 3 1443 1
  .text
deduce_call_expression_type_137:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_call_expression_type_137__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_call_expression_type_137__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Call_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1444 23
  # $1.1: @List = new(List)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  .loc 3 1444 5
  # argument_types.1: @List = $1.1
  mov [rbp-24], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:rax 
  .loc 3 1445 18
  # $2.1: @List = load_struct_member(expression.1, arguments)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] argument_types.1:rax $2.1:r15 
  .loc 3 1445 18
  # arguments.1: @List_Iterator = call(create_iterator_324, $2.1)
  mov rdi, r15
  mov [rbp-24], rax
  call create_iterator_324
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:rax 
  # jump(.LABEL__deduce_call_expression_type_137__2)
  mov [rbp-32], rax
.LABEL__deduce_call_expression_type_137__2:
  .loc 3 1446 12
  # $4.1: Boolean = call(has_next_327, arguments.1)
  mov rdi, [rbp-32]
  call has_next_327
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__deduce_call_expression_type_137__3, .LABEL__deduce_call_expression_type_137__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__deduce_call_expression_type_137__4
.LABEL__deduce_call_expression_type_137__3:
  .loc 3 1447 21
  # argument.1: @AST_Expression = call(next_328, arguments.1)
  mov rdi, [rbp-32]
  call next_328
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] argument.1:rax 
  .loc 3 1448 26
  # argument_type.1: @IR_Type = call(deduce_expression_type_136, self.1, argument.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call deduce_expression_type_136
  # [discarded value]: argument.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] argument_type.1:rax 
  .loc 3 1449 9
  # call(append_313, argument_types.1, argument_type.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_313
  # [discarded value]: argument_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__deduce_call_expression_type_137__2)
  jmp .LABEL__deduce_call_expression_type_137__2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__deduce_call_expression_type_137__4:
  .loc 3 1451 9
  # $8.1: @AST_Expression = load_struct_member(expression.1, callee_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $8.1:rbx 
  # AST_Member_Access_Expression.7: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea r15, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $8.1:rbx AST_Member_Access_Expression.7:r15 
  .loc 3 1451 9
  # $9.1: Boolean = call(is_338, $8.1, AST_Member_Access_Expression.7)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: AST_Member_Access_Expression.7
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__deduce_call_expression_type_137__5, .LABEL__deduce_call_expression_type_137__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__deduce_call_expression_type_137__6
.LABEL__deduce_call_expression_type_137__5:
  .loc 3 1452 30
  # callee_expression.1: @AST_Member_Access_Expression = load_struct_member(expression.1, callee_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx 
  .loc 3 1453 52
  # $12.1: @AST_Expression = load_struct_member(callee_expression.1, object_expression)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx $12.1:r15 
  .loc 3 1453 24
  # object_type.1: @IR_Type = call(deduce_expression_type_136, self.1, $12.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-42], rbx
  call deduce_expression_type_136
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:rax 
  # IR_Struct_Type.19: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:rax IR_Struct_Type.19:rbx 
  .loc 3 1454 13
  # $14.1: Boolean = call(is_338, object_type.1, IR_Struct_Type.19)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-50], rax
  call is_338
  # [discarded value]: IR_Struct_Type.19
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:rax 
  # jump($14.1, .LABEL__deduce_call_expression_type_137__7, .LABEL__deduce_call_expression_type_137__9)
  test al, al
  mov [rbp-51], al
  jz .LABEL__deduce_call_expression_type_137__9
.LABEL__deduce_call_expression_type_137__7:
  .loc 3 1455 36
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, object_type.1)
  mov rdi, [rbp-50]
  call create_ir_pointer_type_145
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $15.1:rax 
  .loc 3 1455 13
  # call(prepend_314, argument_types.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call prepend_314
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # jump(.LABEL__deduce_call_expression_type_137__8)
.LABEL__deduce_call_expression_type_137__8:
  .loc 3 1459 45
  # $16.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $16.1:rbx 
  .loc 3 1459 45
  # $17.1: @String = load_struct_member($16.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $17.1:r15 
  .loc 3 1459 21
  # function.1: @IR_Function = call(get_named_function_69, self.1, $17.1, argument_types.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov rdx, [rbp-24]
  call get_named_function_69
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax 
  .loc 3 1460 13
  # $19.1: Boolean = function.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax $19.1:rbx 
  # jump($19.1, .LABEL__deduce_call_expression_type_137__10, .LABEL__deduce_call_expression_type_137__11)
  test bl, bl
  mov [rbp-59], rax
  mov [rbp-60], bl
  jz .LABEL__deduce_call_expression_type_137__11
.LABEL__deduce_call_expression_type_137__10:
  .loc 3 1461 19
  # $20.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $20.1:rbx 
  .loc 3 1461 19
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:r15 
  .loc 3 1461 59
  # $22.1: @String = call(clone_340, "Unknown function: ")
  lea rdi, .LABEL__string_227[rip] # "Unknown function: "
  mov [rbp-68], r15
  call clone_340
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax 
  .loc 3 1461 94
  # $23.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rbx, [rbp-42]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax $23.1:r15 
  .loc 3 1461 94
  # $24.1: @String = load_struct_member($23.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax $24.1:r14 
  .loc 3 1461 59
  # $25.1: @String = call(append_349, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $25.1:rax 
  .loc 3 1461 13
  # call(abort_309, $21.1, $25.1)
  mov rdi, [rbp-68]
  mov rsi, rax
  call abort_309
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] 
.LABEL__deduce_call_expression_type_137__11:
  .loc 3 1463 16
  # $26.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-59]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax:[rbp-59] $19.1:[rbp-60] $26.1:rbx 
  .loc 3 1463 9
  # return($26.1)
  mov rax, rbx
  mov [rbp-68], rbx
  jmp .LABEL__deduce_call_expression_type_137__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
.LABEL__deduce_call_expression_type_137__9:
  .loc 3 1457 13
  # call(prepend_314, argument_types.1, object_type.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-50]
  call prepend_314
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # jump(.LABEL__deduce_call_expression_type_137__8)
  jmp .LABEL__deduce_call_expression_type_137__8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] 
  # [discarded value]: object_type.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__deduce_call_expression_type_137__6:
  .loc 3 1465 11
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx 
  .loc 3 1465 32
  # $28.1: @AST_Expression = load_struct_member(expression.1, callee_expression)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx $28.1:r15 
  .loc 3 1465 32
  # $29.1: @Object_Type = load_struct_member($28.1, object_type)
  mov r14, [r15]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx $29.1:r14 
  .loc 3 1465 5
  # call(abort_141, $27.1, $29.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [discarded value]: arguments.1
  # [discarded value]: argument_types.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_call_expression_type_137__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_call_expression_type_137__stack_frame_size: .word 80

  .loc 3 1468 1
  .text
deduce_literal_expression_type_138:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_literal_expression_type_138__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_literal_expression_type_138__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1469 16
  # literal.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rsi+16]
  # [discarded value]: expression.1
  # [live values]: self.1:rdi literal.1:rax 
  # String_Token.5: @Object_Type = load_variable(String_Token)
  lea rbx, String_Token[rip]
  # [live values]: self.1:rdi literal.1:rax String_Token.5:rbx 
  .loc 3 1470 9
  # $2.1: Boolean = call(is_338, literal.1, String_Token.5)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call is_338
  # [discarded value]: String_Token.5
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__deduce_literal_expression_type_138__2, .LABEL__deduce_literal_expression_type_138__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__deduce_literal_expression_type_138__3
.LABEL__deduce_literal_expression_type_138__2:
  .loc 3 1471 39
  # $3.1: @IR_Type = call(get_named_type_63, self.1, "String")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_219[rip] # "String"
  call get_named_type_63
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 3 1471 16
  # $4.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $3.1)
  mov rdi, rax
  call create_ir_pointer_type_145
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  .loc 3 1471 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__deduce_literal_expression_type_138__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__deduce_literal_expression_type_138__3:
  .loc 3 1473 11
  # $5.1: @Source_Location = load_struct_member(literal.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $2.1:[rbp-17] $5.1:rbx 
  .loc 3 1473 29
  # $6.1: @Object_Type = load_struct_member(literal.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $2.1:[rbp-17] $5.1:rbx $6.1:r15 
  .loc 3 1473 5
  # call(abort_141, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [discarded value]: literal.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_literal_expression_type_138__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_literal_expression_type_138__stack_frame_size: .word 32

  .loc 3 1476 1
  .text
deduce_member_access_expression_type_139:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_member_access_expression_type_139__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_member_access_expression_type_139__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Member_Access_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1477 48
  # $1.1: @AST_Expression = load_struct_member(expression.1, object_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1477 20
  # object_type.1: @IR_Type = call(deduce_expression_type_136, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call deduce_expression_type_136
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: expression.1:[rbp-8] object_type.1:rax 
  # IR_Pointer_Type.22: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:rax IR_Pointer_Type.22:rbx 
  .loc 3 1478 9
  # $3.1: Boolean = call(is_338, object_type.1, IR_Pointer_Type.22)
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call is_338
  # [discarded value]: IR_Pointer_Type.22
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $3.1:rax 
  .loc 3 1478 9
  # $4.1: Boolean = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:rbx 
  # jump($4.1, .LABEL__deduce_member_access_expression_type_139__2, .LABEL__deduce_member_access_expression_type_139__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__deduce_member_access_expression_type_139__3
.LABEL__deduce_member_access_expression_type_139__2:
  .loc 3 1479 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 3 1479 36
  # $6.1: @Object_Type = load_struct_member(object_type.1, object_type)
  mov r15, [rbp-16]
  mov r14, [r15]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:r15:[rbp-16] $4.1:[rbp-17] $5.1:rbx $6.1:r14 
  .loc 3 1479 9
  # call(abort_141, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__deduce_member_access_expression_type_139__3:
  .loc 3 1481 21
  # $7.1: @IR_Pointer_Type = object_type.1
  mov rax, [rbp-16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] $7.1:rax 
  .loc 3 1481 20
  # object_type.1: @IR_Type = load_struct_member($7.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:rbx 
  # IR_Struct_Type.20: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:rbx IR_Struct_Type.20:rax 
  .loc 3 1482 9
  # $9.1: Boolean = call(is_338, object_type.1, IR_Struct_Type.20)
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-25], rbx
  call is_338
  # [discarded value]: IR_Struct_Type.20
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $9.1:rax 
  .loc 3 1482 9
  # $10.1: Boolean = $9.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:rbx 
  # jump($10.1, .LABEL__deduce_member_access_expression_type_139__4, .LABEL__deduce_member_access_expression_type_139__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__deduce_member_access_expression_type_139__5
.LABEL__deduce_member_access_expression_type_139__4:
  .loc 3 1483 15
  # $11.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] $11.1:rbx 
  .loc 3 1483 36
  # $12.1: @Object_Type = load_struct_member(object_type.1, object_type)
  mov r15, [rbp-25]
  mov r14, [r15]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:r15:[rbp-25] $10.1:[rbp-26] $11.1:rbx $12.1:r14 
  .loc 3 1483 9
  # call(abort_141, $11.1, $12.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__deduce_member_access_expression_type_139__5:
  .loc 3 1485 20
  # object_type.1: @IR_Struct_Type = object_type.1
  mov rax, [rbp-25]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rax 
  .loc 3 1486 38
  # $14.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rax $14.1:r15 
  .loc 3 1486 38
  # $15.1: @String = load_struct_member($14.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $14.1
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rax $15.1:r14 
  .loc 3 1486 15
  # member.1: @IR_Struct_Type_Member = call(get_member_150, object_type.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  mov [rbp-34], rax
  call get_member_150
  # [discarded value]: $15.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax 
  .loc 3 1487 9
  # $17.1: Boolean = member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__deduce_member_access_expression_type_139__6, .LABEL__deduce_member_access_expression_type_139__7)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__deduce_member_access_expression_type_139__7
.LABEL__deduce_member_access_expression_type_139__6:
  .loc 3 1488 15
  # $18.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $18.1:rbx 
  .loc 3 1488 15
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $18.1
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:r15 
  .loc 3 1488 54
  # $20.1: @String = load_struct_member(object_type.1, name)
  mov rbx, [rbp-34]
  mov r14, [rbx+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rbx:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:r15 $20.1:r14 
  .loc 3 1488 48
  # $21.1: @String = call(clone_340, $20.1)
  mov rdi, r14
  mov [rbp-51], r15
  call clone_340
  # [discarded value]: $20.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $21.1:rax 
  .loc 3 1488 48
  # $22.1: @String = call(append_349, $21.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_221[rip] # " has no such member: "
  call append_349
  # [discarded value]: $21.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $22.1:rax 
  .loc 3 1488 111
  # $23.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $22.1:rax $23.1:r15 
  .loc 3 1488 111
  # $24.1: @String = load_struct_member($23.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $22.1:rax $24.1:r14 
  .loc 3 1488 48
  # $25.1: @String = call(append_349, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $25.1:rax 
  .loc 3 1488 9
  # call(abort_309, $19.1, $25.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_309
  # [discarded value]: $25.1
  # [discarded value]: $19.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] 
.LABEL__deduce_member_access_expression_type_139__7:
  .loc 3 1490 9
  # $26.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $26.1:rbx 
  # IR_Struct_Type.21: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $26.1:rbx IR_Struct_Type.21:r15 
  .loc 3 1490 9
  # $27.1: Boolean = call(is_338, $26.1, IR_Struct_Type.21)
  mov rdi, rbx
  mov rsi, r15
  call is_338
  # [discarded value]: IR_Struct_Type.21
  # [discarded value]: $26.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:rax 
  # jump($27.1, .LABEL__deduce_member_access_expression_type_139__8, .LABEL__deduce_member_access_expression_type_139__9)
  test al, al
  mov [rbp-44], al
  jz .LABEL__deduce_member_access_expression_type_139__9
.LABEL__deduce_member_access_expression_type_139__8:
  .loc 3 1491 39
  # $28.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] $28.1:rbx 
  .loc 3 1491 16
  # $29.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $28.1)
  mov rdi, rbx
  call create_ir_pointer_type_145
  # [discarded value]: $28.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] $29.1:rax 
  .loc 3 1491 9
  # return($29.1)
  mov [rbp-52], rax
  jmp .LABEL__deduce_member_access_expression_type_139__end
  # [discarded value]: $29.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] 
.LABEL__deduce_member_access_expression_type_139__9:
  .loc 3 1493 12
  # $30.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] $30.1:rbx 
  .loc 3 1493 5
  # return($30.1)
  mov rax, rbx
  mov [rbp-52], rbx
  jmp .LABEL__deduce_member_access_expression_type_139__end
  # [discarded value]: $30.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] 
  # [discarded value]: $27.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] 
  # [discarded value]: $17.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] 
  # [discarded value]: member.1
  # [discarded value]: object_type.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] 
  # [discarded value]: object_type.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
  # [discarded value]: object_type.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_member_access_expression_type_139__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_member_access_expression_type_139__stack_frame_size: .word 64

  .loc 3 1496 1
  .text
deduce_variable_expression_type_140:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_variable_expression_type_140__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_variable_expression_type_140__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1497 35
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1497 35
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1497 17
  # variable.1: @IR_Variable = call(get_variable_65, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  call get_variable_65
  # [discarded value]: $2.1
  # [discarded value]: self.1
  # [live values]: expression.1:[rbp-8] variable.1:rax 
  .loc 3 1498 9
  # $4.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__deduce_variable_expression_type_140__2, .LABEL__deduce_variable_expression_type_140__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__deduce_variable_expression_type_140__3
.LABEL__deduce_variable_expression_type_140__2:
  .loc 3 1499 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 3 1499 36
  # $6.1: @String = call(clone_340, "Unknown variable: ")
  lea rdi, .LABEL__string_228[rip] # "Unknown variable: "
  mov [rbp-25], rbx
  call clone_340
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax 
  .loc 3 1499 71
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax $7.1:r15 
  .loc 3 1499 71
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax $8.1:r14 
  .loc 3 1499 36
  # $9.1: @String = call(append_349, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $9.1:rax 
  .loc 3 1499 9
  # call(abort_309, $5.1, $9.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_309
  # [discarded value]: $9.1
  # [discarded value]: $5.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__deduce_variable_expression_type_140__3:
  .loc 3 1501 12
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] variable.1:rax:[rbp-16] $4.1:[rbp-17] $10.1:rbx 
  .loc 3 1501 5
  # return($10.1)
  mov rax, rbx
  mov [rbp-25], rbx
  jmp .LABEL__deduce_variable_expression_type_140__end
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: variable.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_variable_expression_type_140__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_variable_expression_type_140__stack_frame_size: .word 32

  .loc 1 48 1
  .text
abort_141:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_141__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_141__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # unexpected_type.1: @Object_Type = load_variable(unexpected_type)
  # [live values]: location.1:rdi unexpected_type.1:rsi 
  # stderr.6: @FILE = load_variable(stderr)
  # [live values]: location.1:rdi unexpected_type.1:rsi stderr.6:stderr[rip] 
  .loc 1 49 5
  # $1.1: @FILE = call(end_line_335, stderr.6)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_335
  # [discarded value]: stderr.6
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $1.1:rax 
  .loc 1 49 5
  # $2.1: @FILE = call(end_line_335, $1.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $1.1
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $2.1:rax 
  .loc 1 49 5
  # $3.1: @FILE = call(write_312, $2.1, location.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_312
  # [discarded value]: $2.1
  # [discarded value]: location.1
  # [live values]: unexpected_type.1:[rbp-16] $3.1:rax 
  .loc 1 49 5
  # $4.1: @FILE = call(write_332, $3.1, ": Unexpected type: ")
  mov rdi, rax
  lea rsi, .LABEL__string_229[rip] # ": Unexpected type: "
  call write_332
  # [discarded value]: $3.1
  # [live values]: unexpected_type.1:[rbp-16] $4.1:rax 
  .loc 1 49 85
  # $5.1: @String = load_struct_member_address(unexpected_type.1, name)
  mov rbx, [rbp-16]
  mov r15, rbx
  add r15, 8
  # [discarded value]: unexpected_type.1
  # [live values]: $4.1:rax $5.1:r15 
  .loc 1 49 5
  # $6.1: @FILE = call(write_332, $4.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 1 49 5
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: 
  .loc 1 50 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_141__end:
  mov rsp, rbp
  pop rbp
  ret

abort_141__stack_frame_size: .word 16

  .loc 4 7 1
  .text
next_142:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_142__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_142__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 4 8 18
  # $1.1: Int = load_struct_member(self.1, value)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 4 8 18
  # $2.1: Int = $1.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 4 8 5
  # store_struct_member(self.1, value, $2.1)
  mov QWORD PTR [rdi], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:rdi 
  .loc 4 9 12
  # $3.1: Int = load_struct_member(self.1, value)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  .loc 4 9 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__next_142__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__next_142__end:
  mov rsp, rbp
  pop rbp
  ret

next_142__stack_frame_size: .word 16

  .loc 4 12 1
  .text
reset_143:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_143__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_143__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 4 13 5
  # store_struct_member(self.1, value, 0)
  mov QWORD PTR [rdi], 0
  # [live values]: self.1:rdi 
  .loc 4 14 5
  # return(self.1)
  mov rax, rdi
  mov [rbp-8], rdi
  jmp .LABEL__reset_143__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_143__end:
  mov rsp, rbp
  pop rbp
  ret

reset_143__stack_frame_size: .word 16

  .loc 5 41 1
  .text
equals_144:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_144__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_144__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # IR_Pointer_Type.23: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:rdi other.1:rsi IR_Pointer_Type.23:rax 
  .loc 5 42 9
  # $2.1: Boolean = call(is_338, self.1, IR_Pointer_Type.23)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call is_338
  # [discarded value]: IR_Pointer_Type.23
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__equals_144__2, .LABEL__equals_144__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__equals_144__3
.LABEL__equals_144__2:
  # IR_Pointer_Type.24: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] IR_Pointer_Type.24:rax 
  .loc 5 42 37
  # $2.2: Boolean = call(is_338, other.1, IR_Pointer_Type.24)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Pointer_Type.24
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:rax:[rbp-17] 
  # jump(.LABEL__equals_144__3)
  mov [rbp-17], al
.LABEL__equals_144__3:
  .loc 5 42 9
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, .LABEL__equals_144__4, .LABEL__equals_144__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__equals_144__5
.LABEL__equals_144__4:
  .loc 5 43 17
  # self.1: @IR_Pointer_Type = self.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] self.1:rax 
  .loc 5 44 18
  # other.1: @IR_Pointer_Type = other.1
  mov rbx, [rbp-8]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] self.1:rax other.1:rbx 
  .loc 5 45 16
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov r15, [rax+16]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] other.1:rbx $6.1:r15 
  .loc 5 45 41
  # $7.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov rax, [rbx+16]
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] $6.1:r15 $7.1:rax 
  .loc 5 45 16
  # $8.1: Boolean = call(equals_144, $6.1, $7.1)
  mov rdi, r15
  mov rsi, rax
  call equals_144
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] $8.1:rax 
  .loc 5 45 9
  # return($8.1)
  mov [rbp-18], al
  jmp .LABEL__equals_144__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
.LABEL__equals_144__5:
  .loc 5 47 12
  # $9.1: Boolean = self.1 == other.1
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] $9.1:rbx 
  .loc 5 47 5
  # return($9.1)
  mov al, bl
  mov [rbp-18], bl
  jmp .LABEL__equals_144__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__equals_144__end:
  mov rsp, rbp
  pop rbp
  ret

equals_144__stack_frame_size: .word 32

  .loc 5 50 1
  .text
create_ir_pointer_type_145:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_pointer_type_145__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_pointer_type_145__1:
  # pointed_type.1: @IR_Type = load_variable(pointed_type)
  # [live values]: pointed_type.1:rdi 
  .loc 5 51 18
  # $1.1: @String = call(clone_340, "@")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_230[rip] # "@"
  call clone_340
  # [live values]: pointed_type.1:[rbp-8] $1.1:rax 
  .loc 5 51 36
  # $2.1: @String = load_struct_member(pointed_type.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: pointed_type.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  .loc 5 51 18
  # type_name.1: @String = call(append_349, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: pointed_type.1:[rbp-8] type_name.1:rax 
  .loc 5 52 12
  # $4.1: @IR_Pointer_Type = new(IR_Pointer_Type)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  lea rbx, IR_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: pointed_type.1:[rbp-8] type_name.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name, type_name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: type_name.1
  # [live values]: pointed_type.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, pointed_type, pointed_type.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: pointed_type.1
  # [live values]: $4.1:rax 
  .loc 5 52 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_pointer_type_145__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__create_ir_pointer_type_145__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_pointer_type_145__stack_frame_size: .word 16

  .loc 5 59 1
  .text
create_ir_array_type_146:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_array_type_146__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_array_type_146__1:
  # item_type.1: @IR_Type = load_variable(item_type)
  # [live values]: item_type.1:rdi 
  # size_expression.1: @AST_Expression = load_variable(size_expression)
  # [live values]: item_type.1:rdi size_expression.1:rsi 
  .loc 5 60 18
  # $1.1: @String = call(clone_340, "[")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_231[rip] # "["
  mov [rbp-16], rsi
  call clone_340
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $1.1:rax 
  .loc 5 60 36
  # $2.1: @String = load_struct_member(item_type.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: item_type.1:rbx:[rbp-8] size_expression.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 5 60 18
  # $3.1: @String = call(append_349, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $3.1:rax 
  .loc 5 60 18
  # type_name.1: @String = call(append_349, $3.1, "]")
  mov rdi, rax
  lea rsi, .LABEL__string_232[rip] # "]"
  call append_349
  # [discarded value]: $3.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] type_name.1:rax 
  .loc 5 61 12
  # $5.1: @IR_Array_Type = new(IR_Array_Type)
  mov [rbp-24], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Array_Type[rip]
  mov [rax], rbx
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] type_name.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name, type_name.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: type_name.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, pointed_type, item_type.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: item_type.1
  # [live values]: size_expression.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, size_expression, size_expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: size_expression.1
  # [live values]: $5.1:rax 
  .loc 5 61 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_array_type_146__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__create_ir_array_type_146__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_array_type_146__stack_frame_size: .word 32

  .loc 5 74 1
  .text
create_ir_function_type_147:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_function_type_147__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_function_type_147__1:
  # parameters.1: @List = load_variable(parameters)
  # [live values]: parameters.1:rdi 
  # return_type.1: @IR_Type = load_variable(return_type)
  # [live values]: parameters.1:rdi return_type.1:rsi 
  .loc 14 4 19
  # $2.1: @Int8 = call(malloc, 16)
  mov [rbp-8], rdi
  mov rdi, 16
  mov [rbp-16], rsi
  call malloc
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $2.1:rax 
  .loc 5 75 18
  # $3.1: @String = new(String)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, data, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $2.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, data_size, 16)
  mov QWORD PTR [rax+8], 16
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  .loc 5 75 18
  # type_name.1: @String = call(append_349, $3.1, "(")
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # "("
  call append_349
  # [discarded value]: $3.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:rax 
  .loc 5 76 24
  # parameters_item.1: @List_Item = load_struct_member(parameters.1, first_item)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: parameters.1:rbx:[rbp-8] return_type.1:[rbp-16] type_name.1:rax parameters_item.1:r15 
  # jump(.LABEL__create_ir_function_type_147__2)
  mov [rbp-24], rax
  mov [rbp-32], r15
.LABEL__create_ir_function_type_147__2:
  # parameters_item.2: @List_Item = phi(parameters_item.1, parameters_item.4)
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  .loc 5 77 12
  # $6.1: Boolean = parameters_item.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:rax 
  # jump($6.1, .LABEL__create_ir_function_type_147__3, .LABEL__create_ir_function_type_147__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_function_type_147__4
.LABEL__create_ir_function_type_147__3:
  .loc 5 78 22
  # parameter.1: @IR_Function_Type_Parameter = load_struct_member(parameters_item.2, data)
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] $6.1:[rbp-33] parameter.1:rbx 
  .loc 5 79 26
  # $9.1: @String = load_struct_member(parameter.1, name)
  mov r15, [rbx]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] $6.1:[rbp-33] parameter.1:rbx $9.1:r15 
  .loc 5 79 9
  # $10.1: @String = call(append_349, type_name.1, $9.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov [rbp-41], rbx
  call append_349
  # [discarded value]: $9.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameter.1:[rbp-41] $10.1:rax 
  .loc 5 79 9
  # $11.1: @String = call(append_349, $10.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call append_349
  # [discarded value]: $10.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameter.1:[rbp-41] $11.1:rax 
  .loc 5 79 62
  # $12.1: @IR_Type = load_struct_member(parameter.1, type)
  mov rbx, [rbp-41]
  mov r15, [rbx+8]
  # [discarded value]: parameter.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $11.1:rax $12.1:r15 
  .loc 5 79 62
  # $13.1: @String = load_struct_member($12.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $12.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $11.1:rax $13.1:rbx 
  .loc 5 79 9
  # $14.1: @String = call(append_349, $11.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call append_349
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  .loc 5 80 27
  # parameters_item.4: @List_Item = load_struct_member(parameters_item.2, next_item)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:rbx:[rbp-32] 
  .loc 5 81 13
  # $16.1: Boolean = parameters_item.4 != null
  cmp rbx, 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:rbx:[rbp-32] $16.1:rax 
  # jump($16.1, .LABEL__create_ir_function_type_147__5, .LABEL__create_ir_function_type_147__2)
  test al, al
  mov [rbp-34], al
  mov [rbp-32], rbx
  jz .LABEL__create_ir_function_type_147__2
.LABEL__create_ir_function_type_147__5:
  .loc 5 82 13
  # $17.1: @String = call(append_349, type_name.1, ", ")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_38[rip] # ", "
  call append_349
  # [discarded value]: $17.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] $16.1:[rbp-34] 
  # jump(.LABEL__create_ir_function_type_147__2)
  jmp .LABEL__create_ir_function_type_147__2
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] 
  # [discarded value]: parameters_item.4
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
.LABEL__create_ir_function_type_147__4:
  .loc 5 85 5
  # $18.1: @String = call(append_349, type_name.1, ") -> ")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_234[rip] # ") -> "
  call append_349
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $18.1:rax 
  .loc 5 85 38
  # $19.1: @String = load_struct_member(return_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:rbx:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $18.1:rax $19.1:r15 
  .loc 5 85 5
  # $20.1: @String = call(append_349, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  .loc 5 87 12
  # $21.1: @IR_Function_Type = new(IR_Function_Type)
  mov rdi, 32
  call malloc
  lea rbx, IR_Function_Type[rip]
  mov [rax], rbx
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $21.1:rax 
  # store_struct_member($21.1, name, type_name.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $21.1:rax 
  # store_struct_member($21.1, parameters, parameters.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: parameters.1:r15:[rbp-8] return_type.1:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $21.1:rax 
  # store_struct_member($21.1, return_type, return_type.1)
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  # [live values]: parameters.1:r15:[rbp-8] return_type.1:r14:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $21.1:rax 
  .loc 5 87 5
  # return($21.1)
  mov [rbp-41], rax
  jmp .LABEL__create_ir_function_type_147__end
  # [discarded value]: $21.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # [discarded value]: parameters_item.2
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [discarded value]: parameters_item.1
  # [discarded value]: type_name.1
  # [discarded value]: return_type.1
  # [discarded value]: parameters.1
  # [live values]: 
.LABEL__create_ir_function_type_147__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_function_type_147__stack_frame_size: .word 48

  .loc 5 102 1
  .text
create_ir_struct_type_148:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_struct_type_148__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_struct_type_148__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # statement.1: @AST_Struct_Statement = load_variable(statement)
  # [live values]: name.1:rdi statement.1:rsi 
  .loc 5 92 22
  # $1.1: @List = new(List)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  .loc 5 103 12
  # $2.1: @IR_Struct_Type = new(IR_Struct_Type)
  mov [rbp-24], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Struct_Type[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, name, name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: name.1
  # [live values]: statement.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, base_type, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: statement.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, members, $1.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: statement.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, statement, statement.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: statement.1
  # [live values]: $2.1:rax 
  .loc 5 103 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_struct_type_148__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_ir_struct_type_148__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_struct_type_148__stack_frame_size: .word 32

  .loc 5 106 1
  .text
add_member_149:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_member_149__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_member_149__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi name.1:rsi type.1:rdx 
  .loc 5 107 15
  # $1.1: @IR_Struct_Type_Member = new(IR_Struct_Type_Member)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] name.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, struct_type, self.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rbx:[rbp-24] name.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, name, name.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: name.1
  # [live values]: self.1:rbx:[rbp-24] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, type, type.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: type.1
  # [live values]: self.1:rbx:[rbp-24] $1.1:rax 
  .loc 5 107 5
  # member.1: @IR_Struct_Type_Member = $1.1
  mov [rbp-32], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rbx:[rbp-24] member.1:rax 
  .loc 5 108 5
  # $2.1: @List = load_struct_member(self.1, members)
  mov r15, [rbx+24]
  # [discarded value]: self.1
  # [live values]: member.1:rax $2.1:r15 
  .loc 5 108 5
  # call(append_313, $2.1, member.1)
  mov rdi, r15
  mov rsi, rax
  mov [rbp-8], rax
  call append_313
  # [discarded value]: $2.1
  # [live values]: member.1:[rbp-8] 
  .loc 5 109 5
  # return(member.1)
  mov rax, [rbp-8]
  jmp .LABEL__add_member_149__end
  # [discarded value]: member.1
  # [live values]: 
.LABEL__add_member_149__end:
  mov rsp, rbp
  pop rbp
  ret

add_member_149__stack_frame_size: .word 32

  .loc 5 112 1
  .text
get_member_150:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_150__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_150__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: struct_type.1:rdi name.1:rsi 
  # jump(.LABEL__get_member_150__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__get_member_150__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] 
  .loc 5 115 25
  # $1.1: @List = load_struct_member(struct_type.2, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] $1.1:rbx 
  .loc 5 115 25
  # members_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] members_item.1:r15 
  # jump(.LABEL__get_member_150__4)
  mov [rbp-24], r15
.LABEL__get_member_150__4:
  # members_item.2: @List_Item = phi(members_item.1, members_item.5)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  .loc 5 116 16
  # $3.1: Boolean = members_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__get_member_150__5, .LABEL__get_member_150__6)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_member_150__6
.LABEL__get_member_150__5:
  .loc 5 117 23
  # member.1: @IR_Struct_Type_Member = load_struct_member(members_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] $3.1:[rbp-25] member.1:rbx 
  .loc 5 118 17
  # $6.1: @String = load_struct_member(member.1, name)
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] $3.1:[rbp-25] member.1:rbx $6.1:r15 
  .loc 5 118 17
  # $7.1: Boolean = call(equals_341, $6.1, name.1)
  mov rdi, r15
  mov rsi, [rbp-8]
  mov [rbp-33], rbx
  call equals_341
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:rax 
  # jump($7.1, .LABEL__get_member_150__7, .LABEL__get_member_150__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__get_member_150__8
.LABEL__get_member_150__7:
  .loc 5 119 17
  # return(member.1)
  mov rax, [rbp-33]
  jmp .LABEL__get_member_150__end
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] 
.LABEL__get_member_150__8:
  .loc 5 121 28
  # members_item.5: @List_Item = load_struct_member(members_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] members_item.5:rbx:[rbp-24] 
  # jump(.LABEL__get_member_150__4)
  mov [rbp-24], rbx
  jmp .LABEL__get_member_150__4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] members_item.5:[rbp-24] 
  # [discarded value]: members_item.5
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] 
  # [discarded value]: member.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] 
.LABEL__get_member_150__6:
  .loc 5 123 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:rbx:[rbp-16] 
  .loc 5 124 13
  # $10.1: Boolean = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:rbx:[rbp-16] $10.1:rax 
  # jump($10.1, .LABEL__get_member_150__10, .LABEL__get_member_150__2)
  test al, al
  mov [rbp-26], al
  mov [rbp-16], rbx
  jz .LABEL__get_member_150__2
.LABEL__get_member_150__10:
  .loc 5 125 13
  # return(null)
  xor rax, rax
  jmp .LABEL__get_member_150__end
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:[rbp-16] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:[rbp-16] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  # [discarded value]: members_item.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [discarded value]: members_item.1
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [discarded value]: name.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__get_member_150__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_150__stack_frame_size: .word 48

  .loc 5 130 1
  .text
is_base_type_151:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_base_type_151__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_base_type_151__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type.1: @IR_Struct_Type = load_variable(other)
  # [live values]: self.1:rdi struct_type.1:rsi 
  # jump(.LABEL__is_base_type_151__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__is_base_type_151__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 5 133 21
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  .loc 5 133 13
  # $2.1: Boolean = self.1 == $1.1
  cmp QWORD PTR [rbp-16], rbx
  sete r15b
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__is_base_type_151__4, .LABEL__is_base_type_151__5)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__is_base_type_151__5
.LABEL__is_base_type_151__4:
  .loc 5 134 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_base_type_151__end
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__is_base_type_151__5:
  .loc 5 136 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:rbx:[rbp-8] 
  .loc 5 137 13
  # $4.1: Boolean = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_base_type_151__7, .LABEL__is_base_type_151__2)
  test al, al
  mov [rbp-18], al
  mov [rbp-8], rbx
  jz .LABEL__is_base_type_151__2
.LABEL__is_base_type_151__7:
  .loc 5 138 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_base_type_151__end
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:[rbp-8] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_base_type_151__end:
  mov rsp, rbp
  pop rbp
  ret

is_base_type_151__stack_frame_size: .word 32

  .loc 5 143 1
  .text
is_object_type_152:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_object_type_152__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_object_type_152__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # jump(.LABEL__is_object_type_152__2)
  mov [rbp-8], rdi
.LABEL__is_object_type_152__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 5 146 13
  # $1.1: @String = load_struct_member(struct_type.2, name)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  .loc 5 146 13
  # $2.1: Boolean = call(equals_341, $1.1, "Object")
  mov rdi, rbx
  lea rsi, .LABEL__string_235[rip] # "Object"
  call equals_341
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__is_object_type_152__4, .LABEL__is_object_type_152__5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__is_object_type_152__5
.LABEL__is_object_type_152__4:
  .loc 5 147 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_object_type_152__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
.LABEL__is_object_type_152__5:
  .loc 5 149 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:rbx:[rbp-8] 
  .loc 5 150 13
  # $4.1: Boolean = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_object_type_152__7, .LABEL__is_object_type_152__2)
  test al, al
  mov [rbp-10], al
  mov [rbp-8], rbx
  jz .LABEL__is_object_type_152__2
.LABEL__is_object_type_152__7:
  .loc 5 151 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_object_type_152__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:[rbp-8] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_object_type_152__end:
  mov rsp, rbp
  pop rbp
  ret

is_object_type_152__stack_frame_size: .word 16

  .loc 5 162 1
  .text
dump_ir_value_153:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_value_153__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_value_153__1:
  # value.1: @IR_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 163 5
  # $1.1: @FILE = call(flush_336, file.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call flush_336
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: value.1:[rbp-8] 
  .loc 5 164 11
  # $2.1: @String = call(clone_340, "Unsupported type: ")
  lea rdi, .LABEL__string_158[rip] # "Unsupported type: "
  call clone_340
  # [live values]: value.1:[rbp-8] $2.1:rax 
  .loc 5 164 46
  # $3.1: @Object_Type = load_struct_member(value.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: value.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 5 164 46
  # $4.1: @String = load_struct_member_address($3.1, name)
  mov rbx, r15
  add rbx, 8
  # [discarded value]: $3.1
  # [live values]: $2.1:rax $4.1:rbx 
  .loc 5 164 11
  # $5.1: @String = call(append_349, $2.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call append_349
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: $5.1:rax 
  .loc 5 164 5
  # call(abort_337, $5.1)
  mov rdi, rax
  call abort_337
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__dump_ir_value_153__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_value_153__stack_frame_size: .word 16

  .loc 5 167 1
  .text
write_154:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_154__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_154__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: file.1:rdi value.1:rsi 
  # $1.1: Boolean = load_variable(check_users)
  # [live values]: file.1:rdi value.1:rsi $1.1:rdx 
  # jump($1.1, .LABEL__write_154__2, .LABEL__write_154__3)
  test dl, dl
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_154__3
.LABEL__write_154__2:
  .loc 5 168 24
  # $2.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $2.1:rbx 
  .loc 5 168 24
  # $3.1: Int = load_struct_member($2.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:r15 
  .loc 5 168 24
  # $1.2: Boolean = $3.1 == 0
  cmp r15, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:rbx:[rbp-1] 
  # jump(.LABEL__write_154__3)
  mov [rbp-1], bl
.LABEL__write_154__3:
  .loc 5 168 9
  # $1.3: Boolean = phi($1.1, $1.2)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # jump($1.3, .LABEL__write_154__4, .LABEL__write_154__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__write_154__5
.LABEL__write_154__4:
  .loc 5 169 9
  # $5.1: @FILE = call(flush_336, file.1)
  mov rdi, [rbp-17]
  call flush_336
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # IR_Variable_Value.14: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] IR_Variable_Value.14:rax 
  .loc 5 170 13
  # $6.1: Boolean = call(is_338, value.1, IR_Variable_Value.14)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Variable_Value.14
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:rax 
  # jump($6.1, .LABEL__write_154__6, .LABEL__write_154__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_154__7
.LABEL__write_154__6:
  .loc 5 171 22
  # value.1: @IR_Variable_Value = value.1
  mov rax, [rbp-9]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] value.1:rax 
  .loc 5 172 30
  # value_version.1: Int = load_struct_member(value.1, version)
  mov rbx, [rax+40]
  # [discarded value]: value_version.1
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # jump(.LABEL__write_154__7)
.LABEL__write_154__7:
  # stderr.7: @FILE = load_variable(stderr)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] stderr.7:stderr[rip] 
  .loc 5 174 9
  # $9.1: @FILE = call(write_332, stderr.7, "Found ")
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_236[rip] # "Found "
  call write_332
  # [discarded value]: stderr.7
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax 
  .loc 5 174 38
  # $10.1: @Object_Type = load_struct_member(value.1, object_type)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax $10.1:r15 
  .loc 5 174 38
  # $11.1: @String = load_struct_member_address($10.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax $11.1:r14 
  .loc 5 174 9
  # $12.1: @FILE = call(write_332, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $12.1:rax 
  .loc 5 174 9
  # $13.1: @FILE = call(write_332, $12.1, " without user instructions: ")
  mov rdi, rax
  lea rsi, .LABEL__string_237[rip] # " without user instructions: "
  call write_332
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  .loc 5 175 9
  # $14.1: (value: @IR_Value, file: @FILE) -> @FILE = load_struct_member(value.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $14.1:rbx 
  # stderr.8: @FILE = load_variable(stderr)
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $14.1:rbx stderr.8:stderr[rip] 
  .loc 5 175 9
  # $15.1: @FILE = call($14.1, value.1, stderr.8)
  mov rdi, rax
  mov rsi, stderr[rip]
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [discarded value]: stderr.8
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # stderr.9: @FILE = load_variable(stderr)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] stderr.9:stderr[rip] 
  .loc 5 176 9
  # $16.1: @FILE = call(end_line_335, stderr.9)
  mov rdi, stderr[rip]
  call end_line_335
  # [discarded value]: $16.1
  # [discarded value]: stderr.9
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # jump(.LABEL__write_154__5)
.LABEL__write_154__5:
  .loc 5 178 12
  # $17.1: (value: @IR_Value, file: @FILE) -> @FILE = load_struct_member(value.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $17.1:rbx 
  .loc 5 178 12
  # $18.1: @FILE = call($17.1, value.1, file.1)
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rax, rbx
  call rax
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $18.1:rax 
  .loc 5 178 5
  # return($18.1)
  mov [rbp-26], rax
  jmp .LABEL__write_154__end
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # [discarded value]: $1.3
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [discarded value]: $1.2
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [discarded value]: value.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_154__end:
  mov rsp, rbp
  pop rbp
  ret

write_154__stack_frame_size: .word 32

  .loc 5 184 1
  .text
dump_ir_undefined_value_155:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_undefined_value_155__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_undefined_value_155__1:
  # value.1: @IR_Value = load_variable(value)
  # [discarded value]: value.1
  # [live values]: 
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rsi 
  .loc 5 185 12
  # $1.1: @FILE = call(write_332, file.1, "undefined")
  mov rdi, rsi
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_238[rip] # "undefined"
  call write_332
  # [discarded value]: file.1
  # [live values]: $1.1:rax 
  .loc 5 185 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_undefined_value_155__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__dump_ir_undefined_value_155__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_undefined_value_155__stack_frame_size: .word 16

  .loc 5 192 1
  .text
dump_ir_constant_value_156:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_constant_value_156__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_constant_value_156__1:
  # $1.1: @IR_Constant_Value = load_variable(value)
  # [live values]: $1.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: $1.1:rdi file.1:rsi 
  .loc 5 193 23
  # $2.1: @Literal_Token = load_struct_member($1.1, literal)
  mov rax, [rdi+32]
  # [discarded value]: $1.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 193 23
  # $3.1: @String = load_struct_member($2.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 193 12
  # $4.1: @FILE = call(write_332, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_332
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 193 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_constant_value_156__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_constant_value_156__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_constant_value_156__stack_frame_size: .word 16

  .loc 5 204 1
  .text
dump_ir_struct_constructor_value_157:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_struct_constructor_value_157__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_struct_constructor_value_157__1:
  # value.1: @IR_Struct_Constructor_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 206 16
  # $2.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rdi+8]
  # [live values]: value.1:rdi file.1:rsi $2.1:rax 
  .loc 5 206 16
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: value.1:rdi file.1:rsi $3.1:rbx 
  .loc 5 206 5
  # $4.1: @FILE = call(write_332, file.1, $3.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  call write_332
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] $4.1:rax 
  .loc 5 206 5
  # $5.1: @FILE = call(write_334, $4.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 207 28
  # $6.1: @List = load_struct_member(value.1, init_arguments)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: value.1:rax:[rbp-8] file.1:[rbp-16] $6.1:rbx 
  .loc 5 207 28
  # init_arguments_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: value.1:rax:[rbp-8] file.1:[rbp-16] init_arguments_item.1:r15 
  .loc 5 208 9
  # $8.1: Boolean = init_arguments_item.1 != null
  cmp r15, 0
  setne bl
  # [live values]: value.1:rax:[rbp-8] file.1:[rbp-16] init_arguments_item.1:r15 $8.1:rbx 
  # jump($8.1, .LABEL__dump_ir_struct_constructor_value_157__4, .LABEL__dump_ir_struct_constructor_value_157__3)
  test bl, bl
  mov [rbp-17], bl
  mov [rbp-25], r15
  jz .LABEL__dump_ir_struct_constructor_value_157__3
.LABEL__dump_ir_struct_constructor_value_157__4:
  # init_arguments_item.2: @List_Item = phi(init_arguments_item.3, init_arguments_item.1)
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:[rbp-25] 
  .loc 5 210 25
  # $10.1: @IR_Call_Argument = load_struct_member(init_arguments_item.2, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:rax:[rbp-25] $10.1:rbx 
  .loc 5 210 24
  # $11.1: @String = load_struct_member($10.1, name)
  mov r15, [rbx]
  # [discarded value]: $10.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:rax:[rbp-25] $11.1:r15 
  .loc 5 210 13
  # $12.1: @FILE = call(write_332, file.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call write_332
  # [discarded value]: $11.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:[rbp-25] $12.1:rax 
  .loc 5 210 13
  # $13.1: @FILE = call(write_332, $12.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_239[rip] # " = "
  call write_332
  # [discarded value]: $12.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:[rbp-25] $13.1:rax 
  .loc 5 210 97
  # $14.1: @IR_Values_Map = load_struct_member(value.1, values)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: value.1:rbx:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:[rbp-25] $13.1:rax $14.1:r15 
  .loc 5 210 97
  # $15.1: @IR_Value = call(get_176, $14.1, init_arguments_item.2)
  mov rdi, r15
  mov rsi, [rbp-25]
  mov [rbp-33], rax
  call get_176
  # [discarded value]: $14.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:[rbp-25] $13.1:[rbp-33] $15.1:rax 
  .loc 5 210 13
  # $16.1: @FILE = call(write_154, $13.1, $15.1, true)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.2:[rbp-25] 
  .loc 5 211 35
  # init_arguments_item.3: @List_Item = load_struct_member(init_arguments_item.2, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [discarded value]: init_arguments_item.2
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] init_arguments_item.3:rbx:[rbp-25] 
  .loc 5 212 17
  # $18.1: Boolean = init_arguments_item.3 == null
  cmp rbx, 0
  sete al
  mov [rbp-25], rbx
  # [discarded value]: init_arguments_item.3
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] $18.1:rax 
  # jump($18.1, .LABEL__dump_ir_struct_constructor_value_157__3, .LABEL__dump_ir_struct_constructor_value_157__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_ir_struct_constructor_value_157__7
.LABEL__dump_ir_struct_constructor_value_157__3:
  .loc 5 218 12
  # $20.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-16]
  mov sil, 41
  call write_334
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] $20.1:rax $18.1:[rbp-26] 
  .loc 5 218 5
  # return($20.1)
  mov [rbp-34], rax
  jmp .LABEL__dump_ir_struct_constructor_value_157__end
  # [discarded value]: $20.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] $18.1:[rbp-26] 
.LABEL__dump_ir_struct_constructor_value_157__7:
  .loc 5 215 13
  # $19.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $19.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] $18.1:[rbp-26] 
  # jump(.LABEL__dump_ir_struct_constructor_value_157__4)
  jmp .LABEL__dump_ir_struct_constructor_value_157__4
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] $18.1:[rbp-26] 
  # [discarded value]: $18.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] $8.1:[rbp-17] 
  # [discarded value]: $8.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] init_arguments_item.1:[rbp-25] 
  # [discarded value]: init_arguments_item.1
  # [discarded value]: file.1
  # [discarded value]: value.1
  # [live values]: 
.LABEL__dump_ir_struct_constructor_value_157__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_struct_constructor_value_157__stack_frame_size: .word 48

  .loc 5 221 1
  .text
init_158:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_158__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_158__1:
  # self.1: @IR_Struct_Constructor_Value = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 222 28
  # $1.1: @List = load_struct_member(self.1, init_arguments)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 222 28
  # init_arguments_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi init_arguments_item.1:rbx 
  # jump(.LABEL__init_158__2)
  mov [rbp-8], rbx
  mov [rbp-16], rdi
.LABEL__init_158__2:
  # init_arguments_item.2: @List_Item = phi(init_arguments_item.1, init_arguments_item.4)
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] 
  .loc 5 223 12
  # $3.1: Boolean = init_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__init_158__3, .LABEL__init_158__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__init_158__4
.LABEL__init_158__3:
  .loc 5 224 26
  # init_argument.1: @IR_Call_Argument = load_struct_member(init_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:rax:[rbp-8] $3.1:[rbp-17] init_argument.1:rbx 
  .loc 5 225 9
  # $6.1: @IR_Values_Map = load_struct_member(self.1, values)
  mov r15, [rbp-16]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:rax:[rbp-8] $3.1:[rbp-17] init_argument.1:rbx $6.1:r14 
  .loc 5 225 46
  # $7.1: @IR_Value = load_struct_member(init_argument.1, value)
  mov r13, [rbx+8]
  # [discarded value]: init_argument.1
  # [live values]: self.1:r15:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:rax:[rbp-8] $3.1:[rbp-17] $6.1:r14 $7.1:r13 
  .loc 5 225 9
  # $8.1: @IR_Value = call(put_177, $6.1, init_arguments_item.2, $7.1)
  mov rdi, r14
  mov rsi, rax
  mov rdx, r13
  call put_177
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] $3.1:[rbp-17] 
  .loc 5 226 31
  # init_arguments_item.4: @List_Item = load_struct_member(init_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] $3.1:[rbp-17] init_arguments_item.4:rbx:[rbp-8] 
  # jump(.LABEL__init_158__2)
  mov [rbp-8], rbx
  jmp .LABEL__init_158__2
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] $3.1:[rbp-17] init_arguments_item.4:[rbp-8] 
  # [discarded value]: init_arguments_item.4
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] $3.1:[rbp-17] 
.LABEL__init_158__4:
  .loc 5 228 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__init_158__end
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] init_arguments_item.2:[rbp-8] 
  # [discarded value]: init_arguments_item.2
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] init_arguments_item.1:[rbp-8] 
  # [discarded value]: init_arguments_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_158__end:
  mov rsp, rbp
  pop rbp
  ret

init_158__stack_frame_size: .word 32

  .loc 5 236 1
  .text
init_159:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_159__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_159__1:
  # self.1: @IR_Variable_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 237 5
  # store_struct_member(self.1, variable, variable.1)
  mov QWORD PTR [rdi+32], rsi
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 238 20
  # $1.1: @List = load_struct_member(variable.1, values)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi variable.1:rsi $1.1:rax 
  .loc 5 238 20
  # $2.1: Int = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable.1:rsi $2.1:rbx 
  .loc 5 238 20
  # $3.1: Int = $2.1 + 1
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi variable.1:rsi $3.1:rax 
  .loc 5 238 5
  # store_struct_member(self.1, version, $3.1)
  mov QWORD PTR [rdi+40], rax
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 239 5
  # $4.1: @List = load_struct_member(variable.1, values)
  mov rax, [rsi+24]
  # [discarded value]: variable.1
  # [live values]: self.1:rdi $4.1:rax 
  .loc 5 239 5
  # call(append_313, $4.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_313
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 5 240 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__init_159__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_159__end:
  mov rsp, rbp
  pop rbp
  ret

init_159__stack_frame_size: .word 16

  .loc 5 243 1
  .text
dump_ir_variable_value_160:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_variable_value_160__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_variable_value_160__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 245 23
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+32]
  # [live values]: value.1:rdi file.1:rsi $2.1:rax 
  .loc 5 245 23
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: value.1:rdi file.1:rsi $3.1:rbx 
  .loc 5 245 12
  # $4.1: @FILE = call(write_332, file.1, $3.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  call write_332
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: value.1:[rbp-8] $4.1:rax 
  .loc 5 245 12
  # $5.1: @FILE = call(write_334, $4.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $4.1
  # [live values]: value.1:[rbp-8] $5.1:rax 
  .loc 5 245 61
  # $6.1: Int = load_struct_member(value.1, version)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [discarded value]: value.1
  # [live values]: $5.1:rax $6.1:r15 
  .loc 5 245 12
  # $7.1: @FILE = call(write_331, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: $7.1:rax 
  .loc 5 245 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_variable_value_160__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_variable_value_160__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_variable_value_160__stack_frame_size: .word 16

  .loc 5 258 1
  .text
has_instructions_161:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_instructions_161__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_instructions_161__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 259 12
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 259 12
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  .loc 5 259 5
  # return($2.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__has_instructions_161__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_instructions_161__end:
  mov rsp, rbp
  pop rbp
  ret

has_instructions_161__stack_frame_size: .word 16

  .loc 5 262 1
  .text
prepend_162:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_162__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_162__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 263 5
  # store_struct_member(instruction.1, parent_block, self.1)
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 264 5
  # store_struct_member(instruction.1, prev_instruction, null)
  mov QWORD PTR [rsi+40], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 265 36
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 265 5
  # store_struct_member(instruction.1, next_instruction, $1.1)
  mov QWORD PTR [rsi+48], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 266 9
  # $2.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  .loc 5 266 9
  # $3.1: Boolean = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__prepend_162__2, .LABEL__prepend_162__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__prepend_162__4
.LABEL__prepend_162__2:
  .loc 5 267 9
  # store_struct_member(self.1, last_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__prepend_162__3)
.LABEL__prepend_162__3:
  .loc 5 271 5
  # store_struct_member(self.1, first_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  .loc 5 272 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__prepend_162__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__prepend_162__4:
  .loc 5 269 9
  # $4.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 5 269 9
  # store_struct_member($4.1, prev_instruction, instruction.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:r15:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__prepend_162__3)
  jmp .LABEL__prepend_162__3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepend_162__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_162__stack_frame_size: .word 32

  .loc 5 275 1
  .text
append_163:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_163__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_163__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 276 5
  # store_struct_member(instruction.1, parent_block, self.1)
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 277 36
  # $1.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 277 5
  # store_struct_member(instruction.1, prev_instruction, $1.1)
  mov QWORD PTR [rsi+40], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 278 5
  # store_struct_member(instruction.1, next_instruction, null)
  mov QWORD PTR [rsi+48], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 279 9
  # $2.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  .loc 5 279 9
  # $3.1: Boolean = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__append_163__2, .LABEL__append_163__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_163__4
.LABEL__append_163__2:
  .loc 5 280 9
  # store_struct_member(self.1, first_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__append_163__3)
.LABEL__append_163__3:
  .loc 5 284 5
  # store_struct_member(self.1, last_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  .loc 5 285 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__append_163__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__append_163__4:
  .loc 5 282 9
  # $4.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 5 282 9
  # store_struct_member($4.1, next_instruction, instruction.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:r15:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__append_163__3)
  jmp .LABEL__append_163__3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_163__end:
  mov rsp, rbp
  pop rbp
  ret

append_163__stack_frame_size: .word 32

  .loc 5 288 1
  .text
append_jump_164:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_164__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_164__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  .loc 5 603 67
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_direct_jump_instruction_196)
  lea rax, dump_ir_direct_jump_instruction_196[rip]
  # [live values]: self.1:rdi block.1:rsi $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 289 20
  # $3.1: @IR_Direct_Jump_Instruction = new(IR_Direct_Jump_Instruction)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Direct_Jump_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] block.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, block, block.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+65], rbx
  # [live values]: self.1:[rbp-24] block.1:rbx:[rbp-16] $3.1:rax 
  .loc 5 289 5
  # instruction.1: @IR_Direct_Jump_Instruction = $3.1
  mov [rbp-32], rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] block.1:rbx:[rbp-16] instruction.1:rax 
  .loc 5 290 5
  # $4.1: @List = load_struct_member(block.1, predecessors)
  mov r15, [rbx+24]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-24] instruction.1:rax $4.1:r15 
  .loc 5 290 5
  # call(append_313, $4.1, self.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_313
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 291 5
  # $5.1: @IR_Instruction = call(append_163, self.1, instruction.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call append_163
  # [discarded value]: $5.1
  # [discarded value]: self.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 292 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__append_jump_164__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_164__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_164__stack_frame_size: .word 32

  .loc 5 295 1
  .text
append_jump_165:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_165__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_165__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # condition_value.1: @IR_Value = load_variable(condition_value)
  # [live values]: self.1:rdi condition_value.1:rsi 
  # true_block.1: @IR_Block = load_variable(true_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx 
  # false_block.1: @IR_Block = load_variable(false_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx false_block.1:rcx 
  .loc 5 588 72
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_conditional_jump_instruction_194)
  lea rax, dump_ir_conditional_jump_instruction_194[rip]
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx false_block.1:rcx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rsi
  mov [rbp-40], rdi
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 296 20
  # $3.1: @IR_Conditional_Jump_Instruction = new(IR_Conditional_Jump_Instruction)
  mov [rbp-48], rax
  mov rdi, 81
  call malloc
  lea rbx, IR_Conditional_Jump_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-48] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-48] $3.1:rax 
  # store_struct_member($3.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-48] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:[rbp-24] false_block.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, true_block, true_block.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+65], rbx
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-24] false_block.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, false_block, false_block.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+73], r15
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-24] false_block.1:r15:[rbp-16] $3.1:rax 
  .loc 5 296 5
  # instruction.1: @IR_Conditional_Jump_Instruction = $3.1
  mov [rbp-48], rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-40] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-24] false_block.1:r15:[rbp-16] instruction.1:rax 
  .loc 5 297 5
  # call(set_operand_value_174, instruction.1, "condition", condition_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_240[rip] # "condition"
  mov rdx, [rbp-32]
  mov [rbp-48], rax
  call set_operand_value_174
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-40] true_block.1:[rbp-24] false_block.1:[rbp-16] instruction.1:[rbp-48] 
  .loc 5 298 5
  # $4.1: @List = load_struct_member(true_block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [discarded value]: true_block.1
  # [live values]: self.1:[rbp-40] false_block.1:[rbp-16] instruction.1:[rbp-48] $4.1:rbx 
  .loc 5 298 5
  # call(append_313, $4.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-40]
  call append_313
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-40] false_block.1:[rbp-16] instruction.1:[rbp-48] 
  .loc 5 299 5
  # $5.1: @List = load_struct_member(false_block.1, predecessors)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: false_block.1
  # [live values]: self.1:[rbp-40] instruction.1:[rbp-48] $5.1:rbx 
  .loc 5 299 5
  # call(append_313, $5.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-40]
  call append_313
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-40] instruction.1:[rbp-48] 
  .loc 5 300 5
  # $6.1: @IR_Instruction = call(append_163, self.1, instruction.1)
  mov rdi, [rbp-40]
  mov rsi, [rbp-48]
  call append_163
  # [discarded value]: $6.1
  # [discarded value]: self.1
  # [live values]: instruction.1:[rbp-48] 
  .loc 5 301 5
  # return(instruction.1)
  mov rax, [rbp-48]
  jmp .LABEL__append_jump_165__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_165__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_165__stack_frame_size: .word 48

  .loc 5 304 1
  .text
remove_166:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_166__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_166__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 305 9
  # $1.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 305 9
  # $2.1: Boolean = $1.1 != self.1
  cmp rax, rdi
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__remove_166__2, .LABEL__remove_166__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__remove_166__3
.LABEL__remove_166__2:
  .loc 5 306 9
  # call(abort_337, "Tried to remove instruction belonging to another block")
  lea rdi, .LABEL__string_241[rip] # "Tried to remove instruction belonging to another block"
  call abort_337
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_166__3:
  .loc 5 308 9
  # $3.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 5 308 9
  # $4.1: Boolean = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  # jump($4.1, .LABEL__remove_166__4, .LABEL__remove_166__5)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__remove_166__5
.LABEL__remove_166__4:
  .loc 5 309 9
  # $5.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $5.1:rbx 
  .loc 5 309 57
  # $6.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov r15, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $5.1:rbx $6.1:r15 
  .loc 5 309 9
  # store_struct_member($5.1, next_instruction, $6.1)
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # jump(.LABEL__remove_166__5)
.LABEL__remove_166__5:
  .loc 5 311 9
  # $7.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $7.1:rbx 
  .loc 5 311 9
  # $8.1: Boolean = $7.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:r15 
  # jump($8.1, .LABEL__remove_166__6, .LABEL__remove_166__7)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__remove_166__7
.LABEL__remove_166__6:
  .loc 5 312 9
  # $9.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $9.1:rbx 
  .loc 5 312 57
  # $10.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov r15, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $9.1:rbx $10.1:r15 
  .loc 5 312 9
  # store_struct_member($9.1, prev_instruction, $10.1)
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # jump(.LABEL__remove_166__7)
.LABEL__remove_166__7:
  .loc 5 314 9
  # $11.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $11.1:rbx 
  .loc 5 314 9
  # $12.1: Boolean = $11.1 == instruction.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:r15 
  # jump($12.1, .LABEL__remove_166__8, .LABEL__remove_166__9)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__remove_166__9
.LABEL__remove_166__8:
  .loc 5 315 34
  # $13.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $13.1:rbx 
  .loc 5 315 9
  # store_struct_member(self.1, first_instruction, $13.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+32], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # jump(.LABEL__remove_166__9)
.LABEL__remove_166__9:
  .loc 5 317 9
  # $14.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $14.1:rbx 
  .loc 5 317 9
  # $15.1: Boolean = $14.1 == instruction.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:r15 
  # jump($15.1, .LABEL__remove_166__10, .LABEL__remove_166__11)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__remove_166__11
.LABEL__remove_166__10:
  .loc 5 318 33
  # $16.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] $16.1:rbx 
  .loc 5 318 9
  # store_struct_member(self.1, last_instruction, $16.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+40], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # jump(.LABEL__remove_166__11)
.LABEL__remove_166__11:
  .loc 5 320 5
  # store_struct_member(instruction.1, parent_block, null)
  mov rax, [rbp-9]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  .loc 5 321 5
  # store_struct_member(instruction.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  .loc 5 322 5
  # store_struct_member(instruction.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # return()
  jmp .LABEL__remove_166__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_166__end:
  mov rsp, rbp
  pop rbp
  ret

remove_166__stack_frame_size: .word 32

  .loc 5 325 1
  .text
dump_167:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_167__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_167__1:
  # block.1: @IR_Block = load_variable(block)
  # [live values]: block.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: block.1:rdi file.1:rsi 
  .loc 5 326 5
  # $1.1: @FILE = call(write_332, file.1, "block.")
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_242[rip] # "block."
  call write_332
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  .loc 5 326 32
  # $2.1: Int = load_struct_member(block.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: block.1:rbx:[rbp-8] file.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 5 326 5
  # $3.1: @FILE = call(write_331, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 327 27
  # $4.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] $4.1:rbx 
  .loc 5 327 27
  # block_predecessors.1: @List_Iterator = call(create_iterator_324, $4.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:rax 
  .loc 5 328 9
  # $6.1: Boolean = call(has_next_327, block_predecessors.1)
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_327
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:rax 
  # jump($6.1, .LABEL__dump_167__2, .LABEL__dump_167__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__dump_167__3
.LABEL__dump_167__2:
  .loc 5 329 9
  # $7.1: @FILE = call(write_334, file.1, '(')
  mov rdi, [rbp-16]
  mov sil, 40
  call write_334
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # jump(.LABEL__dump_167__4)
.LABEL__dump_167__4:
  .loc 5 331 34
  # block_predecessor.1: @IR_Block = call(next_328, block_predecessors.1)
  mov rdi, [rbp-24]
  call next_328
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_predecessor.1:rax 
  .loc 5 332 13
  # $10.1: @FILE = call(write_332, file.1, "block.")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_242[rip] # "block."
  mov [rbp-33], rax
  call write_332
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_predecessor.1:[rbp-33] $10.1:rax 
  .loc 5 332 40
  # $11.1: Int = load_struct_member(block_predecessor.1, id)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [discarded value]: block_predecessor.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $10.1:rax $11.1:r15 
  .loc 5 332 13
  # $12.1: @FILE = call(write_331, $10.1, $11.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  .loc 5 333 17
  # $13.1: Boolean = call(has_next_327, block_predecessors.1)
  mov rdi, [rbp-24]
  call has_next_327
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:rax 
  # jump($13.1, .LABEL__dump_167__6, .LABEL__dump_167__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_167__5
.LABEL__dump_167__6:
  .loc 5 334 17
  # $14.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $14.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # jump(.LABEL__dump_167__4)
  jmp .LABEL__dump_167__4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
.LABEL__dump_167__5:
  .loc 5 339 9
  # $15.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-16]
  mov sil, 41
  call write_334
  # [discarded value]: $15.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # jump(.LABEL__dump_167__3)
.LABEL__dump_167__3:
  .loc 5 341 5
  # $16.1: @FILE = call(write_334, file.1, ':')
  mov rdi, [rbp-16]
  mov sil, 58
  call write_334
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $16.1:rax $13.1:[rbp-26] 
  .loc 5 341 5
  # $17.1: @FILE = call(end_line_335, $16.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  .loc 5 342 26
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:rbx $13.1:[rbp-26] 
  # jump(.LABEL__dump_167__10)
  mov [rbp-34], rbx
.LABEL__dump_167__10:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.4)
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] 
  .loc 5 343 12
  # $19.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__dump_167__11, .LABEL__dump_167__12)
  test al, al
  mov [rbp-35], al
  jz .LABEL__dump_167__12
.LABEL__dump_167__11:
  .loc 5 344 9
  # $20.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(block_instruction.2, dump)
  mov rax, [rbp-34]
  mov rbx, [rax+57]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:rax:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  .loc 5 344 9
  # $21.1: @FILE = call($20.1, block_instruction.2, file.1, "   ")
  mov rdi, rax
  mov rsi, [rbp-16]
  lea rdx, .LABEL__string_243[rip] # "   "
  mov rax, rbx
  call rax
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
  .loc 5 345 29
  # block_instruction.4: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] block_instruction.4:rbx:[rbp-34] 
  # jump(.LABEL__dump_167__10)
  mov [rbp-34], rbx
  jmp .LABEL__dump_167__10
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] block_instruction.4:[rbp-34] 
  # [discarded value]: block_instruction.4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
.LABEL__dump_167__12:
  .loc 5 347 5
  # return(file.1)
  mov rax, [rbp-16]
  jmp .LABEL__dump_167__end
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] 
  # [discarded value]: block_instruction.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # [discarded value]: $13.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [discarded value]: block_predecessors.1
  # [discarded value]: file.1
  # [discarded value]: block.1
  # [live values]: 
.LABEL__dump_167__end:
  mov rsp, rbp
  pop rbp
  ret

dump_167__stack_frame_size: .word 48

  .loc 5 361 1
  .text
create_block_168:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_block_168__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_block_168__1:
  # self.1: @IR_Function = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 362 32
  # $1.1: @List = load_struct_member(self.1, blocks)
  mov rax, [rdi+57]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 362 32
  # $2.1: Int = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 5 362 32
  # $3.1: Int = $2.1 + 1
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  .loc 5 251 27
  # $4.1: @List = new(List)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  .loc 5 362 14
  # $5.1: @IR_Block = new(IR_Block)
  mov [rbp-24], rax
  mov rdi, 50
  call malloc
  lea rbx, IR_Block[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, id, $3.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, function, self.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:rbx:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, predecessors, $4.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, first_instruction, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, last_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, is_being_generated, false)
  mov BYTE PTR [rax+48], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, is_generated, false)
  mov BYTE PTR [rax+49], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  .loc 5 362 5
  # block.1: @IR_Block = $5.1
  mov [rbp-24], rax
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-16] block.1:rax 
  .loc 5 363 5
  # $6.1: @List = load_struct_member(self.1, blocks)
  mov r15, [rbx+57]
  # [discarded value]: self.1
  # [live values]: block.1:rax $6.1:r15 
  .loc 5 363 5
  # call(append_313, $6.1, block.1)
  mov rdi, r15
  mov rsi, rax
  mov [rbp-8], rax
  call append_313
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] 
  .loc 5 364 5
  # return(block.1)
  mov rax, [rbp-8]
  jmp .LABEL__create_block_168__end
  # [discarded value]: block.1
  # [live values]: 
.LABEL__create_block_168__end:
  mov rsp, rbp
  pop rbp
  ret

create_block_168__stack_frame_size: .word 32

  .loc 5 367 1
  .text
dump_169:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_169__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_169__1:
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: function.1:rdi file.1:rsi 
  .loc 5 368 5
  # $1.1: @FILE = call(write_function_label_4, file.1, function.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call write_function_label_4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  .loc 5 368 5
  # $2.1: @FILE = call(write_332, $1.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_180[rip] # " :: ("
  call write_332
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 369 28
  # $3.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] $3.1:rbx 
  .loc 5 369 28
  # function_parameters.1: @List_Iterator = call(create_iterator_324, $3.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $3.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:rax 
  # jump(.LABEL__dump_169__2)
  mov [rbp-24], rax
.LABEL__dump_169__2:
  .loc 5 370 12
  # $5.1: Boolean = call(has_next_327, function_parameters.1)
  mov rdi, [rbp-24]
  call has_next_327
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:rax 
  # jump($5.1, .LABEL__dump_169__3, .LABEL__dump_169__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__dump_169__4
.LABEL__dump_169__3:
  .loc 5 371 31
  # function_parameter.1: @IR_Function_Parameter = call(next_328, function_parameters.1)
  mov rdi, [rbp-24]
  call next_328
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:rax 
  .loc 5 372 20
  # $8.1: @String = load_struct_member(function_parameter.1, name)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:rax $8.1:rbx 
  .loc 5 372 9
  # $9.1: @FILE = call(write_332, file.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-33], rax
  call write_332
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:[rbp-33] $9.1:rax 
  .loc 5 372 9
  # $10.1: @FILE = call(write_332, $9.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:[rbp-33] $10.1:rax 
  .loc 5 372 63
  # $11.1: @IR_Type = load_struct_member(function_parameter.1, type)
  mov rbx, [rbp-33]
  mov r15, [rbx+16]
  # [discarded value]: function_parameter.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $10.1:rax $11.1:r15 
  .loc 5 372 63
  # $12.1: @String = load_struct_member($11.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $10.1:rax $12.1:rbx 
  .loc 5 372 9
  # $13.1: @FILE = call(write_332, $10.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call write_332
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 373 13
  # $14.1: Boolean = call(has_next_327, function_parameters.1)
  mov rdi, [rbp-24]
  call has_next_327
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:rax 
  # jump($14.1, .LABEL__dump_169__5, .LABEL__dump_169__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_169__2
.LABEL__dump_169__5:
  .loc 5 374 13
  # $15.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:[rbp-26] 
  # jump(.LABEL__dump_169__2)
  jmp .LABEL__dump_169__2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:[rbp-26] 
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__dump_169__4:
  .loc 5 377 5
  # $16.1: @FILE = call(write_332, file.1, ") -> ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_234[rip] # ") -> "
  call write_332
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax 
  .loc 5 377 31
  # $17.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax $17.1:r15 
  .loc 5 377 31
  # $18.1: @String = load_struct_member($17.1, name)
  mov r14, [r15+8]
  # [discarded value]: $17.1
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax $18.1:r14 
  .loc 5 377 5
  # $19.1: @FILE = call(write_332, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $19.1:rax 
  .loc 5 377 5
  # $20.1: @FILE = call(write_332, $19.1, " {")
  mov rdi, rax
  lea rsi, .LABEL__string_244[rip] # " {"
  call write_332
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $20.1:rax 
  .loc 5 377 5
  # $21.1: @FILE = call(end_line_335, $20.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 378 19
  # $22.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $22.1:rbx 
  .loc 5 378 19
  # block_item.1: @List_Item = load_struct_member($22.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:r15 
  # jump(.LABEL__dump_169__7)
  mov [rbp-33], r15
.LABEL__dump_169__7:
  # block_item.2: @List_Item = phi(block_item.1, block_item.4)
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] 
  .loc 5 379 12
  # $24.1: Boolean = block_item.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:rax 
  # jump($24.1, .LABEL__dump_169__8, .LABEL__dump_169__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__dump_169__9
.LABEL__dump_169__8:
  .loc 5 380 10
  # $26.1: @IR_Block = load_struct_member(block_item.2, data)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:rax:[rbp-33] $24.1:[rbp-34] $26.1:rbx 
  .loc 5 380 9
  # $27.1: @FILE = call(dump_167, $26.1, file.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call dump_167
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  .loc 5 381 22
  # block_item.4: @List_Item = load_struct_member(block_item.2, next_item)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] block_item.4:rbx:[rbp-33] 
  # jump(.LABEL__dump_169__7)
  mov [rbp-33], rbx
  jmp .LABEL__dump_169__7
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] block_item.4:[rbp-33] 
  # [discarded value]: block_item.4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
.LABEL__dump_169__9:
  .loc 5 383 5
  # $29.1: @FILE = call(write_334, file.1, '}')
  mov rdi, [rbp-16]
  mov sil, 125
  call write_334
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] $29.1:rax 
  .loc 5 383 5
  # $30.1: @FILE = call(end_line_335, $29.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  # return()
  jmp .LABEL__dump_169__end
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  # [discarded value]: $24.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] 
  # [discarded value]: block_item.2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] 
  # [discarded value]: block_item.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: function_parameters.1
  # [discarded value]: file.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__dump_169__end:
  mov rsp, rbp
  pop rbp
  ret

dump_169__stack_frame_size: .word 48

  .loc 5 396 1
  .text
create_ir_global_variable_170:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_global_variable_170__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_global_variable_170__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: name.1:rdi type.1:rsi 
  # is_external.1: Boolean = load_variable(is_external)
  # [live values]: name.1:rdi type.1:rsi is_external.1:rdx 
  .loc 5 389 21
  # $1.1: @List = new(List)
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 24
  call malloc
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  .loc 5 397 17
  # $2.1: @IR_Global_Variable = new(IR_Global_Variable)
  mov [rbp-25], rax
  mov rdi, 33
  call malloc
  lea rbx, IR_Global_Variable[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:[rbp-25] $2.1:rax 
  # store_struct_member($2.1, name, name.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: name.1
  # [live values]: type.1:[rbp-9] is_external.1:[rbp-1] $1.1:[rbp-25] $2.1:rax 
  # store_struct_member($2.1, type, type.1)
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: type.1
  # [live values]: is_external.1:[rbp-1] $1.1:[rbp-25] $2.1:rax 
  # store_struct_member($2.1, values, $1.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: is_external.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, is_external, is_external.1)
  mov bl, [rbp-1]
  mov BYTE PTR [rax+32], bl
  # [discarded value]: is_external.1
  # [live values]: $2.1:rax 
  .loc 5 397 5
  # variable.1: @IR_Global_Variable = $2.1
  mov [rbp-8], rax
  # [discarded value]: $2.1
  # [live values]: variable.1:rax 
  .loc 5 398 5
  # return(variable.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_global_variable_170__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__create_ir_global_variable_170__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_global_variable_170__stack_frame_size: .word 32

  .loc 5 415 1
  .text
dump_ir_instruction_171:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_instruction_171__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_instruction_171__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [discarded value]: prefix.1
  # [live values]: instruction.1:rdi file.1:rsi 
  .loc 5 416 5
  # $1.1: @FILE = call(flush_336, file.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call flush_336
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-8] 
  .loc 5 417 11
  # $2.1: @String = call(clone_340, "Unsupported type: ")
  lea rdi, .LABEL__string_158[rip] # "Unsupported type: "
  call clone_340
  # [live values]: instruction.1:[rbp-8] $2.1:rax 
  .loc 5 417 46
  # $3.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: instruction.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 5 417 46
  # $4.1: @String = load_struct_member_address($3.1, name)
  mov rbx, r15
  add rbx, 8
  # [discarded value]: $3.1
  # [live values]: $2.1:rax $4.1:rbx 
  .loc 5 417 11
  # $5.1: @String = call(append_349, $2.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call append_349
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: $5.1:rax 
  .loc 5 417 5
  # call(abort_337, $5.1)
  mov rdi, rax
  call abort_337
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__dump_ir_instruction_171__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_instruction_171__stack_frame_size: .word 16

  .loc 5 420 1
  .text
dump_ir_instruction_result_172:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_instruction_result_172__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_instruction_result_172__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: self.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: self.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 421 5
  # $1.1: @FILE = call(write_332, file.1, prefix.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rdx
  call write_332
  # [discarded value]: $1.1
  # [discarded value]: prefix.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 422 9
  # $2.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $2.1:rbx 
  .loc 5 422 9
  # $3.1: Boolean = $2.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $3.1:r15 
  # jump($3.1, .LABEL__dump_ir_instruction_result_172__2, .LABEL__dump_ir_instruction_result_172__3)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__dump_ir_instruction_result_172__3
.LABEL__dump_ir_instruction_result_172__2:
  .loc 5 423 20
  # $4.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $4.1:rbx 
  .loc 5 423 9
  # $5.1: @FILE = call(write_154, file.1, $4.1, false)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  call write_154
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $5.1:rax 
  .loc 5 423 9
  # $6.1: @FILE = call(write_332, $5.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax 
  .loc 5 423 64
  # $7.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $7.1:r15 
  .loc 5 423 64
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $8.1:r14 
  .loc 5 423 64
  # $9.1: @String = load_struct_member($8.1, name)
  mov r15, [r14+8]
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $9.1:r15 
  .loc 5 423 9
  # $10.1: @FILE = call(write_332, $6.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_332
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $10.1:rax 
  .loc 5 423 9
  # $11.1: @FILE = call(write_332, $10.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_239[rip] # " = "
  call write_332
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__dump_ir_instruction_result_172__3)
.LABEL__dump_ir_instruction_result_172__3:
  # return()
  jmp .LABEL__dump_ir_instruction_result_172__end
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__dump_ir_instruction_result_172__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_instruction_result_172__stack_frame_size: .word 32

  .loc 5 427 1
  .text
is_exit_instruction_173:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_exit_instruction_173__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_exit_instruction_173__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 428 9
  # $1.1: Boolean = self.1 == null
  cmp rdi, 0
  sete al
  # [live values]: self.1:rdi $1.1:rax 
  # jump($1.1, .LABEL__is_exit_instruction_173__2, .LABEL__is_exit_instruction_173__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__is_exit_instruction_173__3
.LABEL__is_exit_instruction_173__2:
  .loc 5 429 9
  # return(false)
  mov al, 0
  jmp .LABEL__is_exit_instruction_173__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__is_exit_instruction_173__3:
  # IR_Jump_Instruction.2: @Object_Type = load_variable(IR_Jump_Instruction)
  lea rax, IR_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] IR_Jump_Instruction.2:rax 
  .loc 5 431 9
  # $3.1: Boolean = call(is_338, self.1, IR_Jump_Instruction.2)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Jump_Instruction.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:rax 
  # jump($3.1, .LABEL__is_exit_instruction_173__6, .LABEL__is_exit_instruction_173__5)
  test al, al
  mov [rbp-10], al
  jz .LABEL__is_exit_instruction_173__5
.LABEL__is_exit_instruction_173__6:
  .loc 5 431 9
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
  # jump($3.3, .LABEL__is_exit_instruction_173__7, .LABEL__is_exit_instruction_173__8)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__is_exit_instruction_173__8
.LABEL__is_exit_instruction_173__7:
  .loc 5 432 9
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_173__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
.LABEL__is_exit_instruction_173__8:
  # IR_Direct_Call_Instruction.3: @Object_Type = load_variable(IR_Direct_Call_Instruction)
  lea rax, IR_Direct_Call_Instruction[rip]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] IR_Direct_Call_Instruction.3:rax 
  .loc 5 434 9
  # $5.1: Boolean = call(is_338, self.1, IR_Direct_Call_Instruction.3)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Direct_Call_Instruction.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:rax 
  # jump($5.1, .LABEL__is_exit_instruction_173__10, .LABEL__is_exit_instruction_173__11)
  test al, al
  mov [rbp-11], al
  jz .LABEL__is_exit_instruction_173__11
.LABEL__is_exit_instruction_173__10:
  .loc 5 435 17
  # self.1: @IR_Direct_Call_Instruction = self.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] self.1:rax 
  .loc 5 436 21
  # function.1: @IR_Function = load_struct_member(self.1, function)
  mov rbx, [rax+73]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rbx 
  .loc 5 437 13
  # $8.1: @String = load_struct_member(function.1, name)
  mov rax, [rbx+24]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rbx $8.1:rax 
  .loc 5 437 13
  # $9.1: Boolean = call(equals_341, $8.1, "abort")
  mov rdi, rax
  lea rsi, .LABEL__string_245[rip] # "abort"
  mov [rbp-19], rbx
  call equals_341
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:rax 
  # jump($9.1, .LABEL__is_exit_instruction_173__12, .LABEL__is_exit_instruction_173__13)
  test al, al
  mov [rbp-20], al
  jz .LABEL__is_exit_instruction_173__13
.LABEL__is_exit_instruction_173__12:
  .loc 5 438 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_173__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] 
.LABEL__is_exit_instruction_173__13:
  .loc 5 440 13
  # $10.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-19]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $10.1:rbx 
  .loc 5 440 13
  # $12.1: Boolean = call(equals_341, $10.1, "exit")
  mov rdi, rbx
  lea rsi, .LABEL__string_246[rip] # "exit"
  call equals_341
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:rax 
  # jump($12.1, .LABEL__is_exit_instruction_173__15, .LABEL__is_exit_instruction_173__16)
  test al, al
  mov [rbp-21], al
  jz .LABEL__is_exit_instruction_173__16
.LABEL__is_exit_instruction_173__15:
  .loc 5 440 45
  # $13.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-19]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $13.1:rbx 
  .loc 5 440 45
  # $14.1: Int = load_struct_member($13.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $14.1:r15 
  .loc 5 440 45
  # $12.2: Boolean = $14.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:rbx:[rbp-21] 
  # jump(.LABEL__is_exit_instruction_173__16)
  mov [rbp-21], bl
.LABEL__is_exit_instruction_173__16:
  .loc 5 440 13
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] 
  # jump($12.3, .LABEL__is_exit_instruction_173__17, .LABEL__is_exit_instruction_173__11)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__is_exit_instruction_173__11
.LABEL__is_exit_instruction_173__17:
  .loc 5 441 35
  # $16.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-19]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $16.1:rbx 
  .loc 5 441 35
  # function_parameter.1: @IR_Function_Parameter = call(get_321, $16.1, 0)
  mov rdi, rbx
  xor rsi, rsi
  call get_321
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] function_parameter.1:rax 
  .loc 5 442 17
  # $19.1: @IR_Type = load_struct_member(function_parameter.1, type)
  mov rbx, [rax+16]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $19.1:rbx 
  # IR_Int_Type.12: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $19.1:rbx IR_Int_Type.12:rax 
  .loc 5 442 17
  # $20.1: Boolean = call(is_338, $19.1, IR_Int_Type.12)
  mov rdi, rbx
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Int_Type.12
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:rax 
  # jump($20.1, .LABEL__is_exit_instruction_173__19, .LABEL__is_exit_instruction_173__11)
  test al, al
  mov [rbp-22], al
  jz .LABEL__is_exit_instruction_173__11
.LABEL__is_exit_instruction_173__19:
  .loc 5 443 17
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_173__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:[rbp-22] 
.LABEL__is_exit_instruction_173__11:
  .loc 5 447 5
  # return(false)
  mov al, 0
  jmp .LABEL__is_exit_instruction_173__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:[rbp-22] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
.LABEL__is_exit_instruction_173__5:
  # IR_Return_Instruction.3: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] IR_Return_Instruction.3:rax 
  .loc 5 431 41
  # $3.2: Boolean = call(is_338, self.1, IR_Return_Instruction.3)
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Return_Instruction.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.2:rax:[rbp-10] 
  # jump(.LABEL__is_exit_instruction_173__6)
  mov [rbp-10], al
  jmp .LABEL__is_exit_instruction_173__6
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.2:[rbp-10] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_exit_instruction_173__end:
  mov rsp, rbp
  pop rbp
  ret

is_exit_instruction_173__stack_frame_size: .word 32

  .loc 5 450 1
  .text
set_operand_value_174:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR set_operand_value_174__stack_frame_size[rip]
  sub rsp, rax
.LABEL__set_operand_value_174__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi key.1:rsi value.1:rdx 
  .loc 5 451 5
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi key.1:rsi value.1:rdx $1.1:rax 
  .loc 5 451 5
  # $2.1: @IR_Value = call(put_177, $1.1, key.1, value.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rdx
  call put_177
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: key.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  .loc 5 452 5
  # $3.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] value.1:rax:[rbp-16] $3.1:rbx 
  .loc 5 452 5
  # call(append_313, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_313
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  # IR_Compound_Value.2: @Object_Type = load_variable(IR_Compound_Value)
  lea rax, IR_Compound_Value[rip]
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] IR_Compound_Value.2:rax 
  .loc 5 453 9
  # $4.1: Boolean = call(is_338, value.1, IR_Compound_Value.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Compound_Value.2
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:rax 
  # jump($4.1, .LABEL__set_operand_value_174__2, .LABEL__set_operand_value_174__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__set_operand_value_174__3
.LABEL__set_operand_value_174__2:
  .loc 5 454 27
  # compound_value.1: @IR_Compound_Value = value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value.1:rax 
  .loc 5 455 40
  # $6.1: @IR_Values_Map = load_struct_member(compound_value.1, values)
  mov rbx, [rax+32]
  # [discarded value]: compound_value.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] $6.1:rbx 
  .loc 5 455 40
  # compound_value_values_entry.1: @IR_Values_Map_Entry = load_struct_member($6.1, first_entry)
  mov rax, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:rax 
  # jump(.LABEL__set_operand_value_174__4)
  mov [rbp-25], rax
.LABEL__set_operand_value_174__4:
  # compound_value_values_entry.2: @IR_Values_Map_Entry = phi(compound_value_values_entry.1, compound_value_values_entry.4)
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] 
  .loc 5 456 16
  # $8.1: Boolean = compound_value_values_entry.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__set_operand_value_174__5, .LABEL__set_operand_value_174__3)
  test al, al
  mov [rbp-26], al
  jz .LABEL__set_operand_value_174__3
.LABEL__set_operand_value_174__5:
  .loc 5 457 36
  # $9.1: @Any = load_struct_member(compound_value_values_entry.2, key)
  mov rax, [rbp-25]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:rax:[rbp-25] $8.1:[rbp-26] $9.1:rbx 
  .loc 5 457 69
  # $10.1: @IR_Value = load_struct_member(compound_value_values_entry.2, value)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:rax:[rbp-25] $8.1:[rbp-26] $9.1:rbx $10.1:r15 
  .loc 5 457 13
  # call(set_operand_value_174, self.1, $9.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  call set_operand_value_174
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] $8.1:[rbp-26] 
  .loc 5 458 43
  # compound_value_values_entry.4: @IR_Values_Map_Entry = load_struct_member(compound_value_values_entry.2, next_entry)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] $8.1:[rbp-26] compound_value_values_entry.4:rbx:[rbp-25] 
  # jump(.LABEL__set_operand_value_174__4)
  mov [rbp-25], rbx
  jmp .LABEL__set_operand_value_174__4
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] $8.1:[rbp-26] compound_value_values_entry.4:[rbp-25] 
  # [discarded value]: compound_value_values_entry.4
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] $8.1:[rbp-26] 
.LABEL__set_operand_value_174__3:
  # return()
  jmp .LABEL__set_operand_value_174__end
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] compound_value_values_entry.2:[rbp-25] 
  # [discarded value]: compound_value_values_entry.2
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] compound_value_values_entry.1:[rbp-25] 
  # [discarded value]: compound_value_values_entry.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__set_operand_value_174__end:
  mov rsp, rbp
  pop rbp
  ret

set_operand_value_174__stack_frame_size: .word 32

  .loc 5 463 1
  .text
replace_operand_value_175:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_operand_value_175__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_operand_value_175__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # old_value.1: @IR_Value = load_variable(old_value)
  # [live values]: self.1:rdi old_value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx 
  .loc 5 464 5
  # $1.1: @List = load_struct_member(old_value.1, user_instructions)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx $1.1:rax 
  .loc 5 464 5
  # $2.1: @List = call(remove_315, $1.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov [rbp-24], rdx
  call remove_315
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $2.1:rax 
  .loc 5 464 5
  # $3.1: @List = call(prune_317, $2.1)
  mov rdi, rax
  call prune_317
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  .loc 5 465 5
  # $4.1: @List = load_struct_member(new_value.1, user_instructions)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:rax:[rbp-24] $4.1:rbx 
  .loc 5 465 5
  # call(append_313, $4.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_313
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  # IR_Phi_Instruction.7: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] IR_Phi_Instruction.7:rax 
  .loc 5 466 9
  # $5.1: Boolean = call(is_338, self.1, IR_Phi_Instruction.7)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: IR_Phi_Instruction.7
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, .LABEL__replace_operand_value_175__2, .LABEL__replace_operand_value_175__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_operand_value_175__4
.LABEL__replace_operand_value_175__2:
  .loc 5 467 9
  # $7.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $7.1:rbx 
  .loc 5 467 9
  # $8.1: @IR_Value = call(remove_178, $7.1, old_value.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call remove_178
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 468 9
  # $9.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $9.1:rbx 
  .loc 5 468 9
  # $10.1: @IR_Value = call(put_177, $9.1, new_value.1, new_value.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov rdx, [rbp-24]
  call put_177
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__replace_operand_value_175__3)
.LABEL__replace_operand_value_175__3:
  # return()
  jmp .LABEL__replace_operand_value_175__end
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__replace_operand_value_175__4:
  .loc 5 470 9
  # $6.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 5 470 9
  # call(replace_values_181, $6.1, old_value.1, new_value.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call replace_values_181
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__replace_operand_value_175__3)
  jmp .LABEL__replace_operand_value_175__3
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__replace_operand_value_175__end:
  mov rsp, rbp
  pop rbp
  ret

replace_operand_value_175__stack_frame_size: .word 32

  .loc 6 13 1
  .text
get_176:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_176__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_176__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  .loc 6 14 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: key.1:rsi entry.1:rax 
  # jump(.LABEL__get_176__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_176__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 15 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_176__3, .LABEL__get_176__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_176__4
.LABEL__get_176__3:
  .loc 6 16 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 6 16 13
  # $4.1: Boolean = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:r15 
  # jump($4.1, .LABEL__get_176__5, .LABEL__get_176__6)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__get_176__6
.LABEL__get_176__5:
  .loc 6 17 20
  # $5.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 6 17 13
  # return($5.1)
  mov rax, rbx
  mov [rbp-26], rbx
  jmp .LABEL__get_176__end
  # [discarded value]: $5.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__get_176__6:
  .loc 6 19 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__get_176__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_176__2
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_176__4:
  .loc 6 21 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_176__end
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: key.1
  # [live values]: 
.LABEL__get_176__end:
  mov rsp, rbp
  pop rbp
  ret

get_176__stack_frame_size: .word 32

  .loc 6 24 1
  .text
put_177:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR put_177__stack_frame_size[rip]
  sub rsp, rax
.LABEL__put_177__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi key.1:rsi value.1:rdx 
  .loc 6 25 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi key.1:rsi value.1:rdx entry.1:rax 
  # jump(.LABEL__put_177__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__put_177__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 26 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__put_177__3, .LABEL__put_177__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__put_177__4
.LABEL__put_177__3:
  .loc 6 27 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $3.1:rbx 
  .loc 6 27 13
  # $4.1: Boolean = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:r15 
  # jump($4.1, .LABEL__put_177__5, .LABEL__put_177__6)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__put_177__6
.LABEL__put_177__5:
  .loc 6 28 26
  # old_value.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] old_value.1:rbx 
  .loc 6 29 13
  # store_struct_member(entry.2, value, value.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] old_value.1:rbx 
  .loc 6 30 13
  # return(old_value.1)
  mov rax, rbx
  mov [rbp-42], rbx
  jmp .LABEL__put_177__end
  # [discarded value]: old_value.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] 
.LABEL__put_177__6:
  .loc 6 32 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__put_177__2)
  mov [rbp-8], rbx
  jmp .LABEL__put_177__2
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] 
.LABEL__put_177__4:
  .loc 6 34 76
  # $7.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $7.1:rbx 
  .loc 6 34 13
  # $8.1: @IR_Values_Map_Entry = new(IR_Values_Map_Entry)
  mov [rbp-41], rbx
  mov rdi, 32
  call malloc
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $7.1:[rbp-41] $8.1:rax 
  # store_struct_member($8.1, key, key.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $7.1:[rbp-41] $8.1:rax 
  # store_struct_member($8.1, value, value.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $7.1:[rbp-41] $8.1:rax 
  # store_struct_member($8.1, prev_entry, $7.1)
  mov r14, [rbp-41]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $8.1:rax 
  # store_struct_member($8.1, next_entry, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $8.1:rax 
  .loc 6 34 5
  # entry.7: @IR_Values_Map_Entry = $8.1
  mov [rbp-41], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] 
  .loc 6 35 9
  # $9.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov r14, [rbp-32]
  mov r13, [r14+8]
  # [live values]: self.1:r14:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] $9.1:r13 
  .loc 6 35 9
  # $10.1: Boolean = $9.1 == null
  cmp r13, 0
  sete r12b
  # [discarded value]: $9.1
  # [live values]: self.1:r14:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] $10.1:r12 
  # jump($10.1, .LABEL__put_177__8, .LABEL__put_177__10)
  test r12b, r12b
  mov [rbp-8], rax
  mov [rbp-34], r12b
  jz .LABEL__put_177__10
.LABEL__put_177__8:
  .loc 6 36 9
  # store_struct_member(self.1, first_entry, entry.7)
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rbx:[rbp-8] $10.1:[rbp-34] 
  # jump(.LABEL__put_177__9)
.LABEL__put_177__9:
  .loc 6 40 5
  # store_struct_member(self.1, last_entry, entry.7)
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rbx:[rbp-8] $10.1:[rbp-34] 
  .loc 6 41 5
  # return(null)
  xor rax, rax
  jmp .LABEL__put_177__end
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
.LABEL__put_177__10:
  .loc 6 38 9
  # $11.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] $11.1:rbx 
  .loc 6 38 9
  # store_struct_member($11.1, next_entry, entry.7)
  mov r15, [rbp-8]
  mov QWORD PTR [rbx+24], r15
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:r15:[rbp-8] $10.1:[rbp-34] 
  # jump(.LABEL__put_177__9)
  jmp .LABEL__put_177__9
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] 
  # [discarded value]: entry.7
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: value.1
  # [discarded value]: key.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__put_177__end:
  mov rsp, rbp
  pop rbp
  ret

put_177__stack_frame_size: .word 48

  .loc 6 44 1
  .text
remove_178:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_178__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_178__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  .loc 6 45 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi key.1:rsi entry.1:rax 
  # jump(.LABEL__remove_178__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_178__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 46 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_178__3, .LABEL__remove_178__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_178__4
.LABEL__remove_178__3:
  .loc 6 47 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 47 13
  # $4.1: Boolean = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_178__5, .LABEL__remove_178__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_178__6
.LABEL__remove_178__5:
  .loc 6 48 20
  # $5.1: @IR_Values_Map_Entry = call(unlink_180, self.1, entry.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call unlink_180
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 6 48 20
  # $6.1: @IR_Value = load_struct_member($5.1, value)
  mov rbx, [rax+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] $6.1:rbx 
  .loc 6 48 13
  # return($6.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__remove_178__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__remove_178__6:
  .loc 6 50 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_178__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_178__2
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_178__4:
  .loc 6 52 5
  # return(null)
  xor rax, rax
  jmp .LABEL__remove_178__end
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: key.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_178__end:
  mov rsp, rbp
  pop rbp
  ret

remove_178__stack_frame_size: .word 48

  .loc 6 55 1
  .text
remove_values_179:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_values_179__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_values_179__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  .loc 6 56 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi value.1:rsi entry.1:rax 
  # jump(.LABEL__remove_values_179__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_values_179__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 57 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_values_179__3, .LABEL__remove_values_179__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_values_179__4
.LABEL__remove_values_179__3:
  .loc 6 58 13
  # $3.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 58 13
  # $4.1: Boolean = $3.1 == value.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_values_179__5, .LABEL__remove_values_179__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_values_179__6
.LABEL__remove_values_179__5:
  .loc 6 59 13
  # $5.1: @IR_Values_Map_Entry = call(unlink_180, self.1, entry.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call unlink_180
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_values_179__6)
.LABEL__remove_values_179__6:
  .loc 6 61 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_values_179__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_values_179__2
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_values_179__4:
  # return()
  jmp .LABEL__remove_values_179__end
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_values_179__end:
  mov rsp, rbp
  pop rbp
  ret

remove_values_179__stack_frame_size: .word 32

  .loc 6 65 1
  .text
unlink_180:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR unlink_180__stack_frame_size[rip]
  sub rsp, rax
.LABEL__unlink_180__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # entry.1: @IR_Values_Map_Entry = load_variable(entry)
  # [live values]: self.1:rdi entry.1:rsi 
  .loc 6 66 9
  # $1.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi entry.1:rsi $1.1:rax 
  .loc 6 66 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi entry.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__unlink_180__2, .LABEL__unlink_180__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__unlink_180__4
.LABEL__unlink_180__2:
  .loc 6 67 9
  # $4.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 6 67 39
  # $5.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx $5.1:r15 
  .loc 6 67 9
  # store_struct_member($4.1, next_entry, $5.1)
  mov QWORD PTR [rbx+24], r15
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__unlink_180__3)
.LABEL__unlink_180__3:
  .loc 6 71 9
  # $6.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 6 71 9
  # $7.1: Boolean = $6.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:r15 
  # jump($7.1, .LABEL__unlink_180__5, .LABEL__unlink_180__7)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__unlink_180__7
.LABEL__unlink_180__5:
  .loc 6 72 9
  # $9.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $9.1:rbx 
  .loc 6 72 39
  # $10.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $9.1:rbx $10.1:r15 
  .loc 6 72 9
  # store_struct_member($9.1, prev_entry, $10.1)
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # jump(.LABEL__unlink_180__6)
.LABEL__unlink_180__6:
  .loc 6 76 5
  # return(entry.1)
  mov rax, [rbp-9]
  jmp .LABEL__unlink_180__end
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
.LABEL__unlink_180__7:
  .loc 6 74 27
  # $8.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $8.1:rbx 
  .loc 6 74 9
  # store_struct_member(self.1, last_entry, $8.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # jump(.LABEL__unlink_180__6)
  jmp .LABEL__unlink_180__6
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__unlink_180__4:
  .loc 6 69 28
  # $3.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 6 69 9
  # store_struct_member(self.1, first_entry, $3.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:r15:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__unlink_180__3)
  jmp .LABEL__unlink_180__3
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] 
  # [discarded value]: entry.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__unlink_180__end:
  mov rsp, rbp
  pop rbp
  ret

unlink_180__stack_frame_size: .word 32

  .loc 6 79 1
  .text
replace_values_181:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_values_181__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_values_181__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # old_value.1: @IR_Value = load_variable(old_value)
  # [live values]: self.1:rdi old_value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx 
  .loc 6 80 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: old_value.1:rsi new_value.1:rdx entry.1:rax 
  # jump(.LABEL__replace_values_181__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_values_181__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 81 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__replace_values_181__3, .LABEL__replace_values_181__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_values_181__4
.LABEL__replace_values_181__3:
  .loc 6 82 13
  # $3.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 82 13
  # $4.1: Boolean = $3.1 == old_value.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__replace_values_181__5, .LABEL__replace_values_181__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__replace_values_181__6
.LABEL__replace_values_181__5:
  .loc 6 83 13
  # store_struct_member(entry.2, value, new_value.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: old_value.1:[rbp-24] new_value.1:rbx:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__replace_values_181__6)
.LABEL__replace_values_181__6:
  .loc 6 85 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__replace_values_181__2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_values_181__2
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__replace_values_181__4:
  # return()
  jmp .LABEL__replace_values_181__end
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [live values]: 
.LABEL__replace_values_181__end:
  mov rsp, rbp
  pop rbp
  ret

replace_values_181__stack_frame_size: .word 32

  .loc 5 480 1
  .text
dump_ir_call_instruction_arguments_182:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_call_instruction_arguments_182__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_call_instruction_arguments_182__1:
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  .loc 5 481 5
  # call_argument_index.1: Int = 0
  xor rax, rax
  # [live values]: instruction.1:rdi file.1:rsi call_argument_index.1:rax 
  # jump(.LABEL__dump_ir_call_instruction_arguments_182__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__dump_ir_call_instruction_arguments_182__2:
  # call_argument_index.2: Int = phi(call_argument_index.1, call_argument_index.4)
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] 
  .loc 5 482 34
  # $1.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-24]
  mov rbx, [rax+65]
  # [live values]: instruction.1:rax:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $1.1:rbx 
  .loc 5 482 12
  # $2.1: Boolean = call_argument_index.2 < $1.1
  cmp QWORD PTR [rbp-8], rbx
  setl r15b
  # [discarded value]: $1.1
  # [live values]: instruction.1:rax:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__dump_ir_call_instruction_arguments_182__3, .LABEL__dump_ir_call_instruction_arguments_182__4)
  test r15b, r15b
  mov [rbp-25], r15b
  jz .LABEL__dump_ir_call_instruction_arguments_182__4
.LABEL__dump_ir_call_instruction_arguments_182__3:
  .loc 5 483 9
  # $3.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 5 483 32
  # $4.1: @IR_Value = call(get_argument_value_184, instruction.1, call_argument_index.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  mov [rbp-33], rax
  call get_argument_value_184
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:rax 
  .loc 5 483 9
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
  .loc 5 484 31
  # call_argument_index.4: Int = call_argument_index.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] call_argument_index.4:rax:[rbp-8] 
  # jump(.LABEL__dump_ir_call_instruction_arguments_182__2)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_call_instruction_arguments_182__2
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] call_argument_index.4:[rbp-8] 
  # [discarded value]: call_argument_index.4
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__dump_ir_call_instruction_arguments_182__4:
  # return()
  jmp .LABEL__dump_ir_call_instruction_arguments_182__end
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] 
  # [discarded value]: call_argument_index.2
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] 
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] 
  # [discarded value]: call_argument_index.1
  # [discarded value]: file.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__dump_ir_call_instruction_arguments_182__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_call_instruction_arguments_182__stack_frame_size: .word 48

  .loc 5 493 1
  .text
add_arguments_183:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_arguments_183__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_arguments_183__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 5 494 28
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rsi]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  # jump(.LABEL__add_arguments_183__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__add_arguments_183__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.4)
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  .loc 5 495 12
  # $2.1: Boolean = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__add_arguments_183__3, .LABEL__add_arguments_183__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__add_arguments_183__4
.LABEL__add_arguments_183__3:
  .loc 5 496 26
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx 
  .loc 5 497 49
  # $5.1: Int = load_struct_member(self.1, arguments_size)
  mov r15, [rbp-16]
  mov r14, [r15+65]
  # [live values]: self.1:r15:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx $5.1:r14 
  .loc 5 497 32
  # $6.1: @String = call(get_argument_key_185, $5.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call get_argument_key_185
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:rax 
  .loc 5 497 71
  # $7.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $6.1:rax $7.1:r15 
  .loc 5 497 9
  # call(set_operand_value_174, self.1, $6.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call set_operand_value_174
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  .loc 5 498 31
  # $8.1: Int = load_struct_member(self.1, arguments_size)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $8.1:rbx 
  .loc 5 498 31
  # $9.1: Int = $8.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $9.1:r15 
  .loc 5 498 9
  # store_struct_member(self.1, arguments_size, $9.1)
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  .loc 5 499 31
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_arguments_item.4:r15:[rbp-8] 
  # jump(.LABEL__add_arguments_183__2)
  mov [rbp-8], r15
  jmp .LABEL__add_arguments_183__2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_arguments_item.4:[rbp-8] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__add_arguments_183__4:
  .loc 5 501 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__add_arguments_183__end
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__add_arguments_183__end:
  mov rsp, rbp
  pop rbp
  ret

add_arguments_183__stack_frame_size: .word 32

  .loc 5 504 1
  .text
get_argument_value_184:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_argument_value_184__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_argument_value_184__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  .loc 5 505 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: index.1:rsi $1.1:rax 
  .loc 5 505 36
  # $2.1: @String = call(get_argument_key_185, index.1)
  mov rdi, rsi
  mov [rbp-8], rax
  call get_argument_key_185
  # [discarded value]: index.1
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  .loc 5 505 12
  # $3.1: @IR_Value = call(get_176, $1.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_176
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 505 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_argument_value_184__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_argument_value_184__end:
  mov rsp, rbp
  pop rbp
  ret

get_argument_value_184__stack_frame_size: .word 16

  .loc 5 508 1
  .text
get_argument_key_185:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_argument_key_185__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_argument_key_185__1:
  # index.1: Int = load_variable(index)
  # [live values]: index.1:rdi 
  .loc 5 509 9
  # $1.1: Boolean = index.1 == 0
  cmp rdi, 0
  sete al
  # [live values]: index.1:rdi $1.1:rax 
  # jump($1.1, .LABEL__get_argument_key_185__2, .LABEL__get_argument_key_185__4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__get_argument_key_185__4
.LABEL__get_argument_key_185__2:
  .loc 5 510 9
  # return("argument-0-value")
  lea rax, .LABEL__string_247[rip] # "argument-0-value"
  jmp .LABEL__get_argument_key_185__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__get_argument_key_185__4:
  .loc 5 511 16
  # $2.1: Boolean = index.1 == 1
  cmp QWORD PTR [rbp-9], 1
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  # jump($2.1, .LABEL__get_argument_key_185__5, .LABEL__get_argument_key_185__7)
  test al, al
  mov [rbp-10], al
  jz .LABEL__get_argument_key_185__7
.LABEL__get_argument_key_185__5:
  .loc 5 512 9
  # return("argument-1-value")
  lea rax, .LABEL__string_248[rip] # "argument-1-value"
  jmp .LABEL__get_argument_key_185__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] 
.LABEL__get_argument_key_185__7:
  .loc 5 513 16
  # $3.1: Boolean = index.1 == 2
  cmp QWORD PTR [rbp-9], 2
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:rax 
  # jump($3.1, .LABEL__get_argument_key_185__8, .LABEL__get_argument_key_185__10)
  test al, al
  mov [rbp-11], al
  jz .LABEL__get_argument_key_185__10
.LABEL__get_argument_key_185__8:
  .loc 5 514 9
  # return("argument-2-value")
  lea rax, .LABEL__string_249[rip] # "argument-2-value"
  jmp .LABEL__get_argument_key_185__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] 
.LABEL__get_argument_key_185__10:
  .loc 5 515 16
  # $4.1: Boolean = index.1 == 3
  cmp QWORD PTR [rbp-9], 3
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:rax 
  # jump($4.1, .LABEL__get_argument_key_185__11, .LABEL__get_argument_key_185__13)
  test al, al
  mov [rbp-12], al
  jz .LABEL__get_argument_key_185__13
.LABEL__get_argument_key_185__11:
  .loc 5 516 9
  # return("argument-3-value")
  lea rax, .LABEL__string_250[rip] # "argument-3-value"
  jmp .LABEL__get_argument_key_185__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] 
.LABEL__get_argument_key_185__13:
  .loc 5 517 16
  # $5.1: Boolean = index.1 == 4
  cmp QWORD PTR [rbp-9], 4
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:rax 
  # jump($5.1, .LABEL__get_argument_key_185__14, .LABEL__get_argument_key_185__16)
  test al, al
  mov [rbp-13], al
  jz .LABEL__get_argument_key_185__16
.LABEL__get_argument_key_185__14:
  .loc 5 518 9
  # return("argument-4-value")
  lea rax, .LABEL__string_251[rip] # "argument-4-value"
  jmp .LABEL__get_argument_key_185__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] 
.LABEL__get_argument_key_185__16:
  .loc 5 519 16
  # $6.1: Boolean = index.1 == 5
  cmp QWORD PTR [rbp-9], 5
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:rax 
  # jump($6.1, .LABEL__get_argument_key_185__17, .LABEL__get_argument_key_185__3)
  test al, al
  mov [rbp-14], al
  jz .LABEL__get_argument_key_185__3
.LABEL__get_argument_key_185__17:
  .loc 5 520 9
  # return("argument-5-value")
  lea rax, .LABEL__string_252[rip] # "argument-5-value"
  jmp .LABEL__get_argument_key_185__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
.LABEL__get_argument_key_185__3:
  .loc 5 522 11
  # $7.1: @String = call(clone_340, "Missing argument index: ")
  lea rdi, .LABEL__string_253[rip] # "Missing argument index: "
  call clone_340
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $7.1:rax $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  .loc 5 522 11
  # $8.1: @String = call(append_348, $7.1, index.1)
  mov rdi, rax
  mov rsi, [rbp-9]
  call append_348
  # [discarded value]: $7.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $8.1:rax $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  .loc 5 522 5
  # call(abort_337, $8.1)
  mov rdi, rax
  call abort_337
  # [discarded value]: $8.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  # [discarded value]: $6.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] 
  # [discarded value]: $5.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] 
  # [discarded value]: $4.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] 
  # [discarded value]: $3.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] 
  # [discarded value]: $2.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: index.1:[rbp-9] 
  # [discarded value]: index.1
  # [live values]: 
.LABEL__get_argument_key_185__end:
  mov rsp, rbp
  pop rbp
  ret

get_argument_key_185__stack_frame_size: .word 16

  .loc 5 529 1
  .text
dump_ir_direct_call_instruction_186:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_direct_call_instruction_186__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_direct_call_instruction_186__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 530 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 531 20
  # instruction.1: @IR_Direct_Call_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 532 5
  # $2.1: @FILE = call(write_332, file.1, "call")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_254[rip] # "call"
  mov [rbp-16], rax
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 532 5
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax 
  .loc 5 532 56
  # $4.1: @IR_Function = load_struct_member(instruction.1, function)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $3.1:rax $4.1:r15 
  .loc 5 532 5
  # $5.1: @FILE = call(write_function_label_4, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 533 5
  # call(dump_ir_call_instruction_arguments_182, instruction.1, file.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call dump_ir_call_instruction_arguments_182
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] 
  .loc 5 534 12
  # $6.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_334
  # [discarded value]: file.1
  # [live values]: $6.1:rax 
  .loc 5 534 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 534 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_direct_call_instruction_186__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_direct_call_instruction_186__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_direct_call_instruction_186__stack_frame_size: .word 16

  .loc 5 537 1
  .text
create_ir_direct_call_instruction_187:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_direct_call_instruction_187__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_direct_call_instruction_187__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function.1:rdx 
  .loc 5 525 67
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_direct_call_instruction_186)
  lea rax, dump_ir_direct_call_instruction_186[rip]
  # [live values]: result_value.1:rdi call_arguments.1:rsi function.1:rdx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 538 20
  # $3.1: @IR_Direct_Call_Instruction = new(IR_Direct_Call_Instruction)
  mov [rbp-40], rax
  mov rdi, 81
  call malloc
  lea rbx, IR_Direct_Call_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, arguments_size, 0)
  mov QWORD PTR [rax+65], 0
  # [live values]: call_arguments.1:[rbp-24] function.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, function, function.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+73], rbx
  # [discarded value]: function.1
  # [live values]: call_arguments.1:[rbp-24] $3.1:rax 
  .loc 5 538 5
  # instruction.1: @IR_Direct_Call_Instruction = $3.1
  mov [rbp-32], rax
  # [discarded value]: $3.1
  # [live values]: call_arguments.1:[rbp-24] instruction.1:rax 
  .loc 5 539 5
  # $4.1: @IR_Call_Instruction = call(add_arguments_183, instruction.1, call_arguments.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call add_arguments_183
  # [discarded value]: $4.1
  # [discarded value]: call_arguments.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 540 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_direct_call_instruction_187__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_direct_call_instruction_187__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_direct_call_instruction_187__stack_frame_size: .word 48

  .loc 5 546 1
  .text
dump_ir_dynamic_call_instruction_188:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_dynamic_call_instruction_188__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_dynamic_call_instruction_188__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 547 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 548 20
  # instruction.1: @IR_Dynamic_Call_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 549 25
  # function_address.1: @IR_Variable_Value = call(get_function_address_190, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_function_address_190
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rax 
  .loc 5 550 5
  # $3.1: @FILE = call(write_332, file.1, "call")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_254[rip] # "call"
  mov [rbp-24], rax
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $3.1:rax 
  .loc 5 550 5
  # $4.1: @FILE = call(write_334, $3.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $4.1:rax 
  .loc 5 550 41
  # $5.1: @IR_Variable = load_struct_member(function_address.1, variable)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rbx:[rbp-24] $4.1:rax $5.1:r15 
  .loc 5 550 41
  # $6.1: @String = load_struct_member($5.1, name)
  mov r14, [r15+8]
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rbx:[rbp-24] $4.1:rax $6.1:r14 
  .loc 5 550 5
  # $7.1: @FILE = call(write_332, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $7.1:rax 
  .loc 5 550 5
  # $8.1: @FILE = call(write_334, $7.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $8.1:rax 
  .loc 5 550 90
  # $9.1: Int = load_struct_member(function_address.1, version)
  mov rbx, [rbp-24]
  mov r15, [rbx+40]
  # [discarded value]: function_address.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:rax $9.1:r15 
  .loc 5 550 5
  # $10.1: @FILE = call(write_331, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 551 5
  # call(dump_ir_call_instruction_arguments_182, instruction.1, file.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call dump_ir_call_instruction_arguments_182
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] 
  .loc 5 552 12
  # $11.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_334
  # [discarded value]: file.1
  # [live values]: $11.1:rax 
  .loc 5 552 12
  # $12.1: @FILE = call(end_line_335, $11.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 552 5
  # return($12.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_dynamic_call_instruction_188__end
  # [discarded value]: $12.1
  # [live values]: 
.LABEL__dump_ir_dynamic_call_instruction_188__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_dynamic_call_instruction_188__stack_frame_size: .word 32

  .loc 5 555 1
  .text
create_ir_dynamic_call_instruction_189:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_dynamic_call_instruction_189__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_dynamic_call_instruction_189__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function_address.1: @IR_Variable_Value = load_variable(function_address)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function_address.1:rdx 
  .loc 5 543 68
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_dynamic_call_instruction_188)
  lea rax, dump_ir_dynamic_call_instruction_188[rip]
  # [live values]: result_value.1:rdi call_arguments.1:rsi function_address.1:rdx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 556 20
  # $3.1: @IR_Dynamic_Call_Instruction = new(IR_Dynamic_Call_Instruction)
  mov [rbp-40], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Dynamic_Call_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, arguments_size, 0)
  mov QWORD PTR [rax+65], 0
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] $3.1:rax 
  .loc 5 556 5
  # instruction.1: @IR_Dynamic_Call_Instruction = $3.1
  mov [rbp-32], rax
  # [discarded value]: $3.1
  # [live values]: call_arguments.1:[rbp-24] function_address.1:[rbp-16] instruction.1:rax 
  .loc 5 557 5
  # $4.1: @IR_Call_Instruction = call(add_arguments_183, instruction.1, call_arguments.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call add_arguments_183
  # [discarded value]: $4.1
  # [discarded value]: call_arguments.1
  # [live values]: function_address.1:[rbp-16] instruction.1:[rbp-32] 
  .loc 5 558 5
  # call(set_operand_value_174, instruction.1, "function_address", function_address.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_255[rip] # "function_address"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [discarded value]: function_address.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 559 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_dynamic_call_instruction_189__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_dynamic_call_instruction_189__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_dynamic_call_instruction_189__stack_frame_size: .word 48

  .loc 5 562 1
  .text
get_function_address_190:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_function_address_190__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_function_address_190__1:
  # self.1: @IR_Dynamic_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 563 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 563 12
  # $3.1: @IR_Variable_Value = call(get_176, $1.1, "function_address")
  mov rdi, rax
  lea rsi, .LABEL__string_255[rip] # "function_address"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 563 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_function_address_190__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_function_address_190__end:
  mov rsp, rbp
  pop rbp
  ret

get_function_address_190__stack_frame_size: .word 16

  .loc 5 569 1
  .text
dump_ir_cast_instruction_191:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_cast_instruction_191__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_cast_instruction_191__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 570 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 571 20
  # instruction.1: @IR_Cast_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 572 12
  # $2.1: @FILE = call(write_332, file.1, "cast")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_256[rip] # "cast"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 572 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 572 48
  # $4.1: @IR_Value = call(get_value_193, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_193
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 572 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 572 12
  # $6.1: @FILE = call(write_334, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 572 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 572 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_cast_instruction_191__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_cast_instruction_191__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_cast_instruction_191__stack_frame_size: .word 32

  .loc 5 575 1
  .text
create_ir_cast_instruction_192:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_cast_instruction_192__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_cast_instruction_192__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  .loc 5 566 55
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_cast_instruction_191)
  lea rax, dump_ir_cast_instruction_191[rip]
  # [live values]: result_value.1:rdi value.1:rsi $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 576 20
  # $3.1: @IR_Cast_Instruction = new(IR_Cast_Instruction)
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Cast_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: value.1:[rbp-16] $3.1:rax 
  .loc 5 576 5
  # instruction.1: @IR_Cast_Instruction = $3.1
  mov [rbp-24], rax
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-16] instruction.1:rax 
  .loc 5 577 5
  # call(set_operand_value_174, instruction.1, "value", value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # "value"
  mov rdx, [rbp-16]
  mov [rbp-24], rax
  call set_operand_value_174
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-24] 
  .loc 5 578 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_cast_instruction_192__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_cast_instruction_192__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_cast_instruction_192__stack_frame_size: .word 32

  .loc 5 581 1
  .text
get_value_193:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_193__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_193__1:
  # self.1: @IR_Cast_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 582 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 582 12
  # $2.1: @IR_Value = call(get_176, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # "value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 582 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_193__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_193__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_193__stack_frame_size: .word 16

  .loc 5 593 1
  .text
dump_ir_conditional_jump_instruction_194:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_conditional_jump_instruction_194__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_conditional_jump_instruction_194__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 594 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 595 20
  # instruction.1: @IR_Conditional_Jump_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 596 12
  # $2.1: @FILE = call(write_332, file.1, "jump")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_258[rip] # "jump"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 596 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 596 48
  # $4.1: @IR_Value = call(get_condition_value_195, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_condition_value_195
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 596 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 596 12
  # $6.1: @FILE = call(write_332, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 596 119
  # $7.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $7.1:r15 
  .loc 5 596 12
  # $8.1: @FILE = call(write_block_label_8, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $8.1:rax 
  .loc 5 596 12
  # $9.1: @FILE = call(write_332, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 596 173
  # $10.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [discarded value]: instruction.1
  # [live values]: $9.1:rax $10.1:r15 
  .loc 5 596 12
  # $11.1: @FILE = call(write_block_label_8, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 5 596 12
  # $12.1: @FILE = call(write_334, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 596 12
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 596 5
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_conditional_jump_instruction_194__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__dump_ir_conditional_jump_instruction_194__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_conditional_jump_instruction_194__stack_frame_size: .word 32

  .loc 5 599 1
  .text
get_condition_value_195:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_condition_value_195__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_condition_value_195__1:
  # self.1: @IR_Conditional_Jump_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 600 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 600 12
  # $2.1: @IR_Value = call(get_176, $1.1, "condition")
  mov rdi, rax
  lea rsi, .LABEL__string_240[rip] # "condition"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 600 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_condition_value_195__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_condition_value_195__end:
  mov rsp, rbp
  pop rbp
  ret

get_condition_value_195__stack_frame_size: .word 16

  .loc 5 607 1
  .text
dump_ir_direct_jump_instruction_196:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_direct_jump_instruction_196__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_direct_jump_instruction_196__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 608 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 609 20
  # instruction.1: @IR_Direct_Jump_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 610 12
  # $2.1: @FILE = call(write_332, file.1, "jump")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_258[rip] # "jump"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 610 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 610 60
  # $4.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 5 610 12
  # $5.1: @FILE = call(write_block_label_8, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 610 12
  # $6.1: @FILE = call(write_334, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 610 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 610 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_direct_jump_instruction_196__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_direct_jump_instruction_196__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_direct_jump_instruction_196__stack_frame_size: .word 16

  .loc 5 616 1
  .text
dump_ir_load_array_item_instruction_197:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_array_item_instruction_197__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_array_item_instruction_197__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 617 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 618 20
  # instruction.1: @IR_Load_Array_Item_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 619 12
  # $2.1: @FILE = call(write_332, file.1, "load_array_item")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_259[rip] # "load_array_item"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 619 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 619 59
  # $4.1: @IR_Value = call(get_array_value_199, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_array_value_199
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 619 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 619 12
  # $6.1: @FILE = call(write_332, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 619 114
  # $7.1: @IR_Value = call(get_index_value_200, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_index_value_200
  # [discarded value]: instruction.1
  # [live values]: $6.1:[rbp-24] $7.1:rax 
  .loc 5 619 12
  # $8.1: @FILE = call(write_154, $6.1, $7.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: $8.1:rax 
  .loc 5 619 12
  # $9.1: @FILE = call(write_334, $8.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $8.1
  # [live values]: $9.1:rax 
  .loc 5 619 12
  # $10.1: @FILE = call(end_line_335, $9.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [live values]: $10.1:rax 
  .loc 5 619 5
  # return($10.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_load_array_item_instruction_197__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__dump_ir_load_array_item_instruction_197__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_array_item_instruction_197__stack_frame_size: .word 32

  .loc 5 622 1
  .text
create_ir_load_array_item_instruction_198:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_array_item_instruction_198__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_array_item_instruction_198__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: result_value.1:rdi array_value.1:rsi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: result_value.1:rdi array_value.1:rsi index_value.1:rdx 
  .loc 5 613 66
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_load_array_item_instruction_197)
  lea rax, dump_ir_load_array_item_instruction_197[rip]
  # [live values]: result_value.1:rdi array_value.1:rsi index_value.1:rdx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-32] array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-32] array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 623 20
  # $3.1: @IR_Load_Array_Item_Instruction = new(IR_Load_Array_Item_Instruction)
  mov [rbp-40], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Load_Array_Item_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-32] array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] $3.1:rax 
  .loc 5 623 5
  # instruction.1: @IR_Load_Array_Item_Instruction = $3.1
  mov [rbp-32], rax
  # [discarded value]: $3.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] instruction.1:rax 
  .loc 5 624 5
  # call(set_operand_value_174, instruction.1, "array_value", array_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_260[rip] # "array_value"
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call set_operand_value_174
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-16] instruction.1:[rbp-32] 
  .loc 5 625 5
  # call(set_operand_value_174, instruction.1, "index_value", index_value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_261[rip] # "index_value"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [discarded value]: index_value.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 626 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_load_array_item_instruction_198__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_array_item_instruction_198__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_array_item_instruction_198__stack_frame_size: .word 48

  .loc 5 629 1
  .text
get_array_value_199:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_199__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_199__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 630 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 630 12
  # $2.1: @IR_Value = call(get_176, $1.1, "array_value")
  mov rdi, rax
  lea rsi, .LABEL__string_260[rip] # "array_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 630 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_array_value_199__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_array_value_199__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_199__stack_frame_size: .word 16

  .loc 5 633 1
  .text
get_index_value_200:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_200__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_200__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 634 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 634 12
  # $2.1: @IR_Value = call(get_176, $1.1, "index_value")
  mov rdi, rax
  lea rsi, .LABEL__string_261[rip] # "index_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 634 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_index_value_200__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_index_value_200__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_200__stack_frame_size: .word 16

  .loc 5 641 1
  .text
dump_ir_load_function_address_instruction_201:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_function_address_instruction_201__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_function_address_instruction_201__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 642 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 643 20
  # instruction.1: @IR_Load_Function_Address_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 644 12
  # $2.1: @FILE = call(write_332, file.1, "load_function_address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_262[rip] # "load_function_address"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 644 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 644 80
  # $4.1: @IR_Function = load_struct_member(instruction.1, function)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 5 644 12
  # $5.1: @FILE = call(write_function_label_4, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 644 12
  # $6.1: @FILE = call(write_334, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 644 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 644 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_load_function_address_instruction_201__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_load_function_address_instruction_201__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_function_address_instruction_201__stack_frame_size: .word 16

  .loc 5 647 1
  .text
create_ir_load_function_address_instruction_202:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_function_address_instruction_202__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_function_address_instruction_202__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi function.1:rsi 
  .loc 5 637 72
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_load_function_address_instruction_201)
  lea rax, dump_ir_load_function_address_instruction_201[rip]
  # [live values]: result_value.1:rdi function.1:rsi $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 648 20
  # $3.1: @IR_Load_Function_Address_Instruction = new(IR_Load_Function_Address_Instruction)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Load_Function_Address_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] function.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: function.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: function.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, function, function.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: function.1
  # [live values]: $3.1:rax 
  .loc 5 648 5
  # instruction.1: @IR_Load_Function_Address_Instruction = $3.1
  mov [rbp-8], rax
  # [discarded value]: $3.1
  # [live values]: instruction.1:rax 
  .loc 5 649 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_load_function_address_instruction_202__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_function_address_instruction_202__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_function_address_instruction_202__stack_frame_size: .word 32

  .loc 5 657 1
  .text
dump_ir_load_struct_member_instruction_203:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_struct_member_instruction_203__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_struct_member_instruction_203__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 658 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 659 20
  # instruction.1: @IR_Load_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 660 9
  # $2.1: Boolean = load_struct_member(instruction.1, load_address)
  mov bl, [rax+73]
  # [live values]: file.1:[rbp-8] instruction.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__dump_ir_load_struct_member_instruction_203__2, .LABEL__dump_ir_load_struct_member_instruction_203__4)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__dump_ir_load_struct_member_instruction_203__4
.LABEL__dump_ir_load_struct_member_instruction_203__2:
  .loc 5 661 9
  # $4.1: @FILE = call(write_332, file.1, "load_struct_member_address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_263[rip] # "load_struct_member_address"
  call write_332
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # jump(.LABEL__dump_ir_load_struct_member_instruction_203__3)
.LABEL__dump_ir_load_struct_member_instruction_203__3:
  .loc 5 665 12
  # $5.1: @FILE = call(write_334, file.1, '(')
  mov rdi, [rbp-8]
  mov sil, 40
  call write_334
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $5.1:rax 
  .loc 5 665 34
  # $6.1: @IR_Value = call(get_struct_pointer_value_205, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_struct_pointer_value_205
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $5.1:[rbp-25] $6.1:rax 
  .loc 5 665 12
  # $7.1: @FILE = call(write_154, $5.1, $6.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 5 665 12
  # $8.1: @FILE = call(write_332, $7.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $8.1:rax 
  .loc 5 665 98
  # $9.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $8.1:rax $9.1:r15 
  .loc 5 665 98
  # $10.1: @String = load_struct_member($9.1, name)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $8.1:rax $10.1:r14 
  .loc 5 665 12
  # $11.1: @FILE = call(write_332, $8.1, $10.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $11.1:rax 
  .loc 5 665 12
  # $12.1: @FILE = call(write_334, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $12.1:rax 
  .loc 5 665 12
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $13.1:rax 
  .loc 5 665 5
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_load_struct_member_instruction_203__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__dump_ir_load_struct_member_instruction_203__4:
  .loc 5 663 9
  # $3.1: @FILE = call(write_332, file.1, "load_struct_member")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_264[rip] # "load_struct_member"
  call write_332
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # jump(.LABEL__dump_ir_load_struct_member_instruction_203__3)
  jmp .LABEL__dump_ir_load_struct_member_instruction_203__3
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_load_struct_member_instruction_203__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_struct_member_instruction_203__stack_frame_size: .word 32

  .loc 5 668 1
  .text
create_ir_load_struct_member_instruction_204:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_struct_member_instruction_204__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_struct_member_instruction_204__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx 
  # load_address.1: Boolean = load_variable(load_address)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx load_address.1:rcx 
  .loc 5 652 69
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_load_struct_member_instruction_203)
  lea rax, dump_ir_load_struct_member_instruction_203[rip]
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx load_address.1:rcx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-9], cl
  mov [rbp-17], rdx
  mov [rbp-25], rsi
  mov [rbp-33], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-33] struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-33] struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-33] struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $2.1:rax 
  .loc 5 669 20
  # $3.1: @IR_Load_Struct_Member_Instruction = new(IR_Load_Struct_Member_Instruction)
  mov [rbp-41], rax
  mov rdi, 74
  call malloc
  lea rbx, IR_Load_Struct_Member_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-33] struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $2.1:[rbp-41] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-33] struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $2.1:[rbp-41] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $2.1:[rbp-41] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: struct_pointer_value.1:[rbp-25] struct_type_member.1:[rbp-17] load_address.1:[rbp-9] $3.1:rax 
  # store_struct_member($3.1, struct_type_member, struct_type_member.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-25] load_address.1:[rbp-9] $3.1:rax 
  # store_struct_member($3.1, load_address, load_address.1)
  mov bl, [rbp-9]
  mov BYTE PTR [rax+73], bl
  # [discarded value]: load_address.1
  # [live values]: struct_pointer_value.1:[rbp-25] $3.1:rax 
  .loc 5 669 5
  # instruction.1: @IR_Load_Struct_Member_Instruction = $3.1
  mov [rbp-33], rax
  # [discarded value]: $3.1
  # [live values]: struct_pointer_value.1:[rbp-25] instruction.1:rax 
  .loc 5 670 5
  # call(set_operand_value_174, instruction.1, "struct_pointer_value", struct_pointer_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_265[rip] # "struct_pointer_value"
  mov rdx, [rbp-25]
  mov [rbp-33], rax
  call set_operand_value_174
  # [discarded value]: struct_pointer_value.1
  # [live values]: instruction.1:[rbp-33] 
  .loc 5 671 5
  # return(instruction.1)
  mov rax, [rbp-33]
  jmp .LABEL__create_ir_load_struct_member_instruction_204__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_struct_member_instruction_204__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_struct_member_instruction_204__stack_frame_size: .word 48

  .loc 5 674 1
  .text
get_struct_pointer_value_205:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_205__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_205__1:
  # self.1: @IR_Load_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 675 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 675 12
  # $2.1: @IR_Value = call(get_176, $1.1, "struct_pointer_value")
  mov rdi, rax
  lea rsi, .LABEL__string_265[rip] # "struct_pointer_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 675 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_struct_pointer_value_205__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_struct_pointer_value_205__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_205__stack_frame_size: .word 16

  .loc 5 682 1
  .text
dump_ir_load_variable_instruction_206:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_variable_instruction_206__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_variable_instruction_206__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 683 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 684 12
  # $1.1: @FILE = call(write_332, file.1, "load_variable")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_266[rip] # "load_variable"
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $1.1:rax 
  .loc 5 684 12
  # $2.1: @FILE = call(write_334, $1.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 684 58
  # $3.1: @IR_Load_Variable_Instruction = instruction.1
  mov rbx, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: $2.1:rax $3.1:rbx 
  .loc 5 684 57
  # $4.1: @IR_Variable = load_struct_member($3.1, variable)
  mov r15, [rbx+65]
  # [discarded value]: $3.1
  # [live values]: $2.1:rax $4.1:r15 
  .loc 5 684 57
  # $5.1: @String = load_struct_member($4.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $4.1
  # [live values]: $2.1:rax $5.1:rbx 
  .loc 5 684 12
  # $6.1: @FILE = call(write_332, $2.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call write_332
  # [discarded value]: $5.1
  # [discarded value]: $2.1
  # [live values]: $6.1:rax 
  .loc 5 684 12
  # $7.1: @FILE = call(write_334, $6.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 684 12
  # $8.1: @FILE = call(end_line_335, $7.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $7.1
  # [live values]: $8.1:rax 
  .loc 5 684 5
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_load_variable_instruction_206__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__dump_ir_load_variable_instruction_206__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_variable_instruction_206__stack_frame_size: .word 16

  .loc 5 687 1
  .text
create_ir_load_variable_instruction_207:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_instruction_207__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_instruction_207__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  .loc 5 688 93
  # $1.1: @IR_Variable = load_struct_member(result_value.1, variable)
  mov rax, [rdi+32]
  # [live values]: result_value.1:rdi $1.1:rax 
  .loc 5 678 64
  # $2.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_load_variable_instruction_206)
  lea rbx, dump_ir_load_variable_instruction_206[rip]
  # [live values]: result_value.1:rdi $1.1:rax $2.1:rbx 
  .loc 5 407 38
  # $3.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  .loc 5 688 20
  # $4.1: @IR_Load_Variable_Instruction = new(IR_Load_Variable_Instruction)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Load_Variable_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-16] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, operand_values, $3.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $3.1
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, dump, $2.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $2.1
  # [live values]: $1.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, variable, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: $1.1
  # [live values]: $4.1:rax 
  .loc 5 688 5
  # instruction.1: @IR_Load_Variable_Instruction = $4.1
  mov [rbp-8], rax
  # [discarded value]: $4.1
  # [live values]: instruction.1:rax 
  .loc 5 689 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_load_variable_instruction_207__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_instruction_207__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_instruction_207__stack_frame_size: .word 32

  .loc 5 696 1
  .text
dump_ir_new_instruction_208:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_new_instruction_208__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_new_instruction_208__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 697 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 698 20
  # instruction.1: @IR_New_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 699 5
  # $2.1: @FILE = call(write_332, file.1, "new")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_267[rip] # "new"
  mov [rbp-16], rax
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 699 5
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax 
  .loc 5 699 40
  # $4.1: @IR_Type = load_struct_member(instruction.1, type)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $3.1:rax $4.1:r15 
  .loc 5 699 40
  # $5.1: @String = load_struct_member($4.1, name)
  mov r14, [r15+8]
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $3.1:rax $5.1:r14 
  .loc 5 699 5
  # $6.1: @FILE = call(write_332, $3.1, $5.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 700 9
  # $7.1: @IR_Value = call(get_size_value_210, instruction.1)
  mov rdi, [rbp-16]
  call get_size_value_210
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $7.1:rax 
  .loc 5 700 9
  # $8.1: Boolean = $7.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:rbx 
  # jump($8.1, .LABEL__dump_ir_new_instruction_208__2, .LABEL__dump_ir_new_instruction_208__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__dump_ir_new_instruction_208__3
.LABEL__dump_ir_new_instruction_208__2:
  .loc 5 701 9
  # $9.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] $9.1:rax 
  .loc 5 701 32
  # $10.1: @IR_Value = call(get_size_value_210, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_size_value_210
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 5 701 9
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] 
  # jump(.LABEL__dump_ir_new_instruction_208__3)
.LABEL__dump_ir_new_instruction_208__3:
  .loc 5 703 12
  # $12.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_334
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] $12.1:rax 
  .loc 5 703 12
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] $13.1:rax 
  .loc 5 703 5
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_new_instruction_208__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:[rbp-17] 
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_new_instruction_208__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_new_instruction_208__stack_frame_size: .word 32

  .loc 5 706 1
  .text
create_ir_new_instruction_209:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_new_instruction_209__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_new_instruction_209__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: result_value.1:rdi type.1:rsi 
  # size_value.1: @IR_Value = load_variable(size_value)
  # [live values]: result_value.1:rdi type.1:rsi size_value.1:rdx 
  .loc 5 692 54
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_new_instruction_208)
  lea rax, dump_ir_new_instruction_208[rip]
  # [live values]: result_value.1:rdi type.1:rsi size_value.1:rdx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-32] type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-32] type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 707 20
  # $3.1: @IR_New_Instruction = new(IR_New_Instruction)
  mov [rbp-40], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_New_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-32] type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-32] type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: type.1:[rbp-24] size_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-24] size_value.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, type, type.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: type.1
  # [live values]: size_value.1:[rbp-16] $3.1:rax 
  .loc 5 707 5
  # instruction.1: @IR_New_Instruction = $3.1
  mov [rbp-24], rax
  # [discarded value]: $3.1
  # [live values]: size_value.1:[rbp-16] instruction.1:rax 
  .loc 5 708 9
  # $4.1: Boolean = size_value.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: size_value.1:[rbp-16] instruction.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__create_ir_new_instruction_209__2, .LABEL__create_ir_new_instruction_209__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__create_ir_new_instruction_209__3
.LABEL__create_ir_new_instruction_209__2:
  .loc 5 709 9
  # call(set_operand_value_174, instruction.1, "size_value", size_value.1)
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_268[rip] # "size_value"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [live values]: size_value.1:[rbp-16] instruction.1:[rbp-24] $4.1:[rbp-25] 
  # jump(.LABEL__create_ir_new_instruction_209__3)
.LABEL__create_ir_new_instruction_209__3:
  .loc 5 711 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_new_instruction_209__end
  # [live values]: size_value.1:[rbp-16] instruction.1:[rbp-24] $4.1:[rbp-25] 
  # [live values]: size_value.1:[rbp-16] instruction.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: size_value.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [discarded value]: size_value.1
  # [live values]: 
.LABEL__create_ir_new_instruction_209__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_new_instruction_209__stack_frame_size: .word 48

  .loc 5 714 1
  .text
get_size_value_210:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_size_value_210__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_size_value_210__1:
  # self.1: @IR_New_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 715 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 715 12
  # $2.1: @IR_Value = call(get_176, $1.1, "size_value")
  mov rdi, rax
  lea rsi, .LABEL__string_268[rip] # "size_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 715 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_size_value_210__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_size_value_210__end:
  mov rsp, rbp
  pop rbp
  ret

get_size_value_210__stack_frame_size: .word 16

  .loc 5 721 1
  .text
dump_ir_return_instruction_211:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_return_instruction_211__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_return_instruction_211__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 722 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 723 20
  # instruction.1: @IR_Return_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 724 9
  # $2.1: @IR_Value = call(get_return_value_213, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_return_value_213
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 724 9
  # $3.1: Boolean = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rbx 
  # jump($3.1, .LABEL__dump_ir_return_instruction_211__2, .LABEL__dump_ir_return_instruction_211__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__dump_ir_return_instruction_211__3
.LABEL__dump_ir_return_instruction_211__2:
  .loc 5 725 16
  # $4.1: @FILE = call(write_332, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_269[rip] # "return"
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $4.1:rax 
  .loc 5 725 16
  # $5.1: @FILE = call(write_334, $4.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $5.1:rax 
  .loc 5 725 16
  # $6.1: @FILE = call(write_334, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $6.1:rax 
  .loc 5 725 16
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $7.1:rax 
  .loc 5 725 9
  # return($7.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_return_instruction_211__end
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__dump_ir_return_instruction_211__3:
  .loc 5 727 12
  # $8.1: @FILE = call(write_332, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_269[rip] # "return"
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $8.1:rax 
  .loc 5 727 12
  # $9.1: @FILE = call(write_334, $8.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $9.1:rax 
  .loc 5 727 50
  # $10.1: @IR_Value = call(get_return_value_213, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_return_value_213
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 5 727 12
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $11.1:rax 
  .loc 5 727 12
  # $12.1: @FILE = call(write_334, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $12.1:rax 
  .loc 5 727 12
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $13.1:rax 
  .loc 5 727 5
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_return_instruction_211__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_return_instruction_211__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_return_instruction_211__stack_frame_size: .word 32

  .loc 5 730 1
  .text
create_ir_return_instruction_212:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_return_instruction_212__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_return_instruction_212__1:
  # return_value.1: @IR_Value = load_variable(return_value)
  # [live values]: return_value.1:rdi 
  .loc 5 718 57
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_return_instruction_211)
  lea rax, dump_ir_return_instruction_211[rip]
  # [live values]: return_value.1:rdi $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 731 20
  # $3.1: @IR_Return_Instruction = new(IR_Return_Instruction)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Return_Instruction[rip]
  mov [rax], rbx
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: return_value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: return_value.1:[rbp-16] $3.1:rax 
  .loc 5 731 5
  # instruction.1: @IR_Return_Instruction = $3.1
  mov [rbp-24], rax
  # [discarded value]: $3.1
  # [live values]: return_value.1:[rbp-16] instruction.1:rax 
  .loc 5 732 9
  # $4.1: Boolean = return_value.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: return_value.1:[rbp-16] instruction.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__create_ir_return_instruction_212__2, .LABEL__create_ir_return_instruction_212__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__create_ir_return_instruction_212__3
.LABEL__create_ir_return_instruction_212__2:
  .loc 5 733 9
  # call(set_operand_value_174, instruction.1, "return_value", return_value.1)
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_270[rip] # "return_value"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [live values]: return_value.1:[rbp-16] instruction.1:[rbp-24] $4.1:[rbp-25] 
  # jump(.LABEL__create_ir_return_instruction_212__3)
.LABEL__create_ir_return_instruction_212__3:
  .loc 5 735 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_return_instruction_212__end
  # [live values]: return_value.1:[rbp-16] instruction.1:[rbp-24] $4.1:[rbp-25] 
  # [live values]: return_value.1:[rbp-16] instruction.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: return_value.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [discarded value]: return_value.1
  # [live values]: 
.LABEL__create_ir_return_instruction_212__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_return_instruction_212__stack_frame_size: .word 32

  .loc 5 738 1
  .text
get_return_value_213:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_return_value_213__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_return_value_213__1:
  # self.1: @IR_Return_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 739 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 739 12
  # $2.1: @IR_Value = call(get_176, $1.1, "return_value")
  mov rdi, rax
  lea rsi, .LABEL__string_270[rip] # "return_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 739 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_return_value_213__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_return_value_213__end:
  mov rsp, rbp
  pop rbp
  ret

get_return_value_213__stack_frame_size: .word 16

  .loc 5 745 1
  .text
dump_ir_set_instruction_214:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_set_instruction_214__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_set_instruction_214__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 746 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 747 20
  # instruction.1: @IR_Set_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 748 23
  # $2.1: @IR_Value = call(get_value_216, instruction.1)
  mov rdi, rax
  call get_value_216
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] $2.1:rax 
  .loc 5 748 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 748 12
  # $4.1: @FILE = call(end_line_335, $3.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 748 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_set_instruction_214__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_set_instruction_214__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_set_instruction_214__stack_frame_size: .word 16

  .loc 5 751 1
  .text
create_ir_set_instruction_215:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_set_instruction_215__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_set_instruction_215__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  .loc 5 742 54
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_set_instruction_214)
  lea rax, dump_ir_set_instruction_214[rip]
  # [live values]: result_value.1:rdi value.1:rsi $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 752 20
  # $3.1: @IR_Set_Instruction = new(IR_Set_Instruction)
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Set_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: value.1:[rbp-16] $3.1:rax 
  .loc 5 752 5
  # instruction.1: @IR_Set_Instruction = $3.1
  mov [rbp-24], rax
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-16] instruction.1:rax 
  .loc 5 753 5
  # call(set_operand_value_174, instruction.1, "value", value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # "value"
  mov rdx, [rbp-16]
  mov [rbp-24], rax
  call set_operand_value_174
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-24] 
  .loc 5 754 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_set_instruction_215__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_set_instruction_215__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_set_instruction_215__stack_frame_size: .word 32

  .loc 5 757 1
  .text
get_value_216:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_216__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_216__1:
  # self.1: @IR_Set_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 758 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 758 12
  # $2.1: @IR_Value = call(get_176, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # "value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 758 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_216__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_216__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_216__stack_frame_size: .word 16

  .loc 5 764 1
  .text
dump_ir_store_array_item_instruction_217:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_store_array_item_instruction_217__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_store_array_item_instruction_217__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 765 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 766 20
  # instruction.1: @IR_Store_Array_Item_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 767 12
  # $2.1: @FILE = call(write_332, file.1, "store_array_item")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_271[rip] # "store_array_item"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 767 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 767 60
  # $4.1: @IR_Value = call(get_array_value_219, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_array_value_219
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 767 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 767 12
  # $6.1: @FILE = call(write_332, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 767 115
  # $7.1: @IR_Value = call(get_index_value_220, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_index_value_220
  # [live values]: instruction.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  .loc 5 767 12
  # $8.1: @FILE = call(write_154, $6.1, $7.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $8.1:rax 
  .loc 5 767 12
  # $9.1: @FILE = call(write_332, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 767 170
  # $10.1: @IR_Value = call(get_value_221, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_221
  # [discarded value]: instruction.1
  # [live values]: $9.1:[rbp-24] $10.1:rax 
  .loc 5 767 12
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 5 767 12
  # $12.1: @FILE = call(write_334, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 767 12
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 767 5
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_store_array_item_instruction_217__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__dump_ir_store_array_item_instruction_217__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_store_array_item_instruction_217__stack_frame_size: .word 32

  .loc 5 770 1
  .text
create_ir_store_array_item_instruction_218:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_array_item_instruction_218__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_array_item_instruction_218__1:
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: array_value.1:rdi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: array_value.1:rdi index_value.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: array_value.1:rdi index_value.1:rsi value.1:rdx 
  .loc 5 761 67
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_store_array_item_instruction_217)
  lea rax, dump_ir_store_array_item_instruction_217[rip]
  # [live values]: array_value.1:rdi index_value.1:rsi value.1:rdx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 771 20
  # $3.1: @IR_Store_Array_Item_Instruction = new(IR_Store_Array_Item_Instruction)
  mov [rbp-40], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Store_Array_Item_Instruction[rip]
  mov [rax], rbx
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] $3.1:rax 
  .loc 5 771 5
  # instruction.1: @IR_Store_Array_Item_Instruction = $3.1
  mov [rbp-40], rax
  # [discarded value]: $3.1
  # [live values]: array_value.1:[rbp-32] index_value.1:[rbp-24] value.1:[rbp-16] instruction.1:rax 
  .loc 5 772 5
  # call(set_operand_value_174, instruction.1, "array_value", array_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_260[rip] # "array_value"
  mov rdx, [rbp-32]
  mov [rbp-40], rax
  call set_operand_value_174
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-24] value.1:[rbp-16] instruction.1:[rbp-40] 
  .loc 5 773 5
  # call(set_operand_value_174, instruction.1, "index_value", index_value.1)
  mov rdi, [rbp-40]
  lea rsi, .LABEL__string_261[rip] # "index_value"
  mov rdx, [rbp-24]
  call set_operand_value_174
  # [discarded value]: index_value.1
  # [live values]: value.1:[rbp-16] instruction.1:[rbp-40] 
  .loc 5 774 5
  # call(set_operand_value_174, instruction.1, "value", value.1)
  mov rdi, [rbp-40]
  lea rsi, .LABEL__string_257[rip] # "value"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-40] 
  .loc 5 775 5
  # return(instruction.1)
  mov rax, [rbp-40]
  jmp .LABEL__create_ir_store_array_item_instruction_218__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_array_item_instruction_218__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_array_item_instruction_218__stack_frame_size: .word 48

  .loc 5 778 1
  .text
get_array_value_219:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_219__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_219__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 779 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 779 12
  # $2.1: @IR_Value = call(get_176, $1.1, "array_value")
  mov rdi, rax
  lea rsi, .LABEL__string_260[rip] # "array_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 779 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_array_value_219__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_array_value_219__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_219__stack_frame_size: .word 16

  .loc 5 782 1
  .text
get_index_value_220:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_220__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_220__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 783 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 783 12
  # $2.1: @IR_Value = call(get_176, $1.1, "index_value")
  mov rdi, rax
  lea rsi, .LABEL__string_261[rip] # "index_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 783 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_index_value_220__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_index_value_220__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_220__stack_frame_size: .word 16

  .loc 5 786 1
  .text
get_value_221:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_221__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_221__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 787 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 787 12
  # $2.1: @IR_Value = call(get_176, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # "value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 787 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_221__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_221__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_221__stack_frame_size: .word 16

  .loc 5 794 1
  .text
dump_ir_store_struct_member_instruction_222:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_store_struct_member_instruction_222__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_store_struct_member_instruction_222__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 795 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 796 20
  # instruction.1: @IR_Store_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 797 12
  # $2.1: @FILE = call(write_332, file.1, "store_struct_member")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_272[rip] # "store_struct_member"
  mov [rbp-16], rax
  call write_332
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 797 12
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 797 63
  # $4.1: @IR_Value = call(get_struct_pointer_value_224, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_struct_pointer_value_224
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 797 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 797 12
  # $6.1: @FILE = call(write_332, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 797 127
  # $7.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $7.1:r15 
  .loc 5 797 127
  # $8.1: @String = load_struct_member($7.1, name)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $8.1:r14 
  .loc 5 797 12
  # $9.1: @FILE = call(write_332, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 797 12
  # $10.1: @FILE = call(write_332, $9.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-16] $10.1:rax 
  .loc 5 797 182
  # $11.1: @IR_Value = call(get_value_225, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_225
  # [discarded value]: instruction.1
  # [live values]: $10.1:[rbp-24] $11.1:rax 
  .loc 5 797 12
  # $12.1: @FILE = call(write_154, $10.1, $11.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: $12.1:rax 
  .loc 5 797 12
  # $13.1: @FILE = call(write_334, $12.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 797 12
  # $14.1: @FILE = call(end_line_335, $13.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $13.1
  # [live values]: $14.1:rax 
  .loc 5 797 5
  # return($14.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_store_struct_member_instruction_222__end
  # [discarded value]: $14.1
  # [live values]: 
.LABEL__dump_ir_store_struct_member_instruction_222__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_store_struct_member_instruction_222__stack_frame_size: .word 32

  .loc 5 800 1
  .text
create_ir_store_struct_member_instruction_223:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_struct_member_instruction_223__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_struct_member_instruction_223__1:
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: struct_pointer_value.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi value.1:rdx 
  .loc 5 790 70
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_store_struct_member_instruction_222)
  lea rax, dump_ir_store_struct_member_instruction_222[rip]
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi value.1:rdx $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 801 20
  # $3.1: @IR_Store_Struct_Member_Instruction = new(IR_Store_Struct_Member_Instruction)
  mov [rbp-40], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Store_Struct_Member_Instruction[rip]
  mov [rax], rbx
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-40] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: struct_pointer_value.1:[rbp-32] struct_type_member.1:[rbp-24] value.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, struct_type_member, struct_type_member.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-32] value.1:[rbp-16] $3.1:rax 
  .loc 5 801 5
  # instruction.1: @IR_Store_Struct_Member_Instruction = $3.1
  mov [rbp-40], rax
  # [discarded value]: $3.1
  # [live values]: struct_pointer_value.1:[rbp-32] value.1:[rbp-16] instruction.1:rax 
  .loc 5 802 5
  # call(set_operand_value_174, instruction.1, "struct_pointer_value", struct_pointer_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_265[rip] # "struct_pointer_value"
  mov rdx, [rbp-32]
  mov [rbp-40], rax
  call set_operand_value_174
  # [discarded value]: struct_pointer_value.1
  # [live values]: value.1:[rbp-16] instruction.1:[rbp-40] 
  .loc 5 803 5
  # call(set_operand_value_174, instruction.1, "value", value.1)
  mov rdi, [rbp-40]
  lea rsi, .LABEL__string_257[rip] # "value"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-40] 
  .loc 5 804 5
  # return(instruction.1)
  mov rax, [rbp-40]
  jmp .LABEL__create_ir_store_struct_member_instruction_223__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_struct_member_instruction_223__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_struct_member_instruction_223__stack_frame_size: .word 48

  .loc 5 807 1
  .text
get_struct_pointer_value_224:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_224__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_224__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 808 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 808 12
  # $2.1: @IR_Value = call(get_176, $1.1, "struct_pointer_value")
  mov rdi, rax
  lea rsi, .LABEL__string_265[rip] # "struct_pointer_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 808 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_struct_pointer_value_224__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_struct_pointer_value_224__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_224__stack_frame_size: .word 16

  .loc 5 811 1
  .text
get_value_225:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_225__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_225__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 812 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 812 12
  # $2.1: @IR_Value = call(get_176, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # "value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 812 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_225__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_225__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_225__stack_frame_size: .word 16

  .loc 5 818 1
  .text
init_226:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_226__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_226__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # left_value.1: @IR_Value = load_variable(left_value)
  # [live values]: self.1:rdi left_value.1:rsi 
  # right_value.1: @IR_Value = load_variable(right_value)
  # [live values]: self.1:rdi left_value.1:rsi right_value.1:rdx 
  .loc 5 819 5
  # call(set_operand_value_174, self.1, "left_value", left_value.1)
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_273[rip] # "left_value"
  mov [rbp-16], rdx
  mov rdx, [rbp-8]
  mov [rbp-24], rdi
  call set_operand_value_174
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-24] right_value.1:[rbp-16] 
  .loc 5 820 5
  # call(set_operand_value_174, self.1, "right_value", right_value.1)
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_274[rip] # "right_value"
  mov rdx, [rbp-16]
  call set_operand_value_174
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-24] 
  .loc 5 821 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__init_226__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_226__end:
  mov rsp, rbp
  pop rbp
  ret

init_226__stack_frame_size: .word 32

  .loc 5 824 1
  .text
get_left_value_227:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_left_value_227__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_left_value_227__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 825 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 825 12
  # $2.1: @IR_Value = call(get_176, $1.1, "left_value")
  mov rdi, rax
  lea rsi, .LABEL__string_273[rip] # "left_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 825 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_left_value_227__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_left_value_227__end:
  mov rsp, rbp
  pop rbp
  ret

get_left_value_227__stack_frame_size: .word 16

  .loc 5 828 1
  .text
get_right_value_228:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_right_value_228__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_right_value_228__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 829 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 829 12
  # $2.1: @IR_Value = call(get_176, $1.1, "right_value")
  mov rdi, rax
  lea rsi, .LABEL__string_274[rip] # "right_value"
  call get_176
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 829 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_right_value_228__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_right_value_228__end:
  mov rsp, rbp
  pop rbp
  ret

get_right_value_228__stack_frame_size: .word 16

  .loc 5 835 1
  .text
dump_ir_add_instruction_229:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_add_instruction_229__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_add_instruction_229__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 836 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 837 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 838 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 838 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 838 12
  # $4.1: @FILE = call(write_332, $3.1, " + ")
  mov rdi, rax
  lea rsi, .LABEL__string_275[rip] # " + "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 838 78
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 838 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 838 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 838 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_add_instruction_229__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_add_instruction_229__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_add_instruction_229__stack_frame_size: .word 32

  .loc 5 847 1
  .text
dump_ir_divide_instruction_230:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_divide_instruction_230__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_divide_instruction_230__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 848 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 849 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 850 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 850 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 850 12
  # $4.1: @FILE = call(write_332, $3.1, " / ")
  mov rdi, rax
  lea rsi, .LABEL__string_276[rip] # " / "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 850 78
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 850 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 850 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 850 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_divide_instruction_230__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_divide_instruction_230__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_divide_instruction_230__stack_frame_size: .word 32

  .loc 5 856 1
  .text
dump_ir_equal_comparison_instruction_231:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_equal_comparison_instruction_231__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_equal_comparison_instruction_231__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 857 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 858 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 859 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 859 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 859 12
  # $4.1: @FILE = call(write_332, $3.1, " == ")
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # " == "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 859 79
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 859 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 859 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 859 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_equal_comparison_instruction_231__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_equal_comparison_instruction_231__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_equal_comparison_instruction_231__stack_frame_size: .word 32

  .loc 5 865 1
  .text
dump_ir_greater_comparison_instruction_232:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_greater_comparison_instruction_232__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_greater_comparison_instruction_232__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 866 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 867 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 868 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 868 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 868 12
  # $4.1: @FILE = call(write_332, $3.1, " > ")
  mov rdi, rax
  lea rsi, .LABEL__string_278[rip] # " > "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 868 78
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 868 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 868 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 868 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_greater_comparison_instruction_232__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_greater_comparison_instruction_232__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_greater_comparison_instruction_232__stack_frame_size: .word 32

  .loc 5 874 1
  .text
dump_ir_greater_or_equal_comparison_instruction_233:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_greater_or_equal_comparison_instruction_233__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_greater_or_equal_comparison_instruction_233__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 875 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 876 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 877 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 877 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 877 12
  # $4.1: @FILE = call(write_332, $3.1, " >= ")
  mov rdi, rax
  lea rsi, .LABEL__string_279[rip] # " >= "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 877 79
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 877 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 877 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 877 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_greater_or_equal_comparison_instruction_233__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_greater_or_equal_comparison_instruction_233__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_greater_or_equal_comparison_instruction_233__stack_frame_size: .word 32

  .loc 5 883 1
  .text
dump_ir_less_comparison_instruction_234:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_less_comparison_instruction_234__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_less_comparison_instruction_234__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 884 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 885 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 886 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 886 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 886 12
  # $4.1: @FILE = call(write_332, $3.1, " < ")
  mov rdi, rax
  lea rsi, .LABEL__string_280[rip] # " < "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 886 78
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 886 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 886 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 886 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_less_comparison_instruction_234__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_less_comparison_instruction_234__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_less_comparison_instruction_234__stack_frame_size: .word 32

  .loc 5 892 1
  .text
dump_ir_less_or_equal_comparison_instruction_235:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_less_or_equal_comparison_instruction_235__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_less_or_equal_comparison_instruction_235__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 893 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 894 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 895 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 895 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 895 12
  # $4.1: @FILE = call(write_332, $3.1, " <= ")
  mov rdi, rax
  lea rsi, .LABEL__string_281[rip] # " <= "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 895 79
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 895 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 895 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 895 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_less_or_equal_comparison_instruction_235__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_less_or_equal_comparison_instruction_235__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_less_or_equal_comparison_instruction_235__stack_frame_size: .word 32

  .loc 5 901 1
  .text
dump_ir_modulo_instruction_236:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_modulo_instruction_236__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_modulo_instruction_236__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 902 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 903 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 904 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 904 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 904 12
  # $4.1: @FILE = call(write_332, $3.1, " // ")
  mov rdi, rax
  lea rsi, .LABEL__string_282[rip] # " // "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 904 79
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 904 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 904 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 904 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_modulo_instruction_236__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_modulo_instruction_236__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_modulo_instruction_236__stack_frame_size: .word 32

  .loc 5 910 1
  .text
dump_ir_multiply_instruction_237:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_multiply_instruction_237__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_multiply_instruction_237__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 911 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 912 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 913 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 913 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 913 12
  # $4.1: @FILE = call(write_332, $3.1, " * ")
  mov rdi, rax
  lea rsi, .LABEL__string_283[rip] # " * "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 913 78
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 913 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 913 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 913 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_multiply_instruction_237__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_multiply_instruction_237__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_multiply_instruction_237__stack_frame_size: .word 32

  .loc 5 919 1
  .text
dump_ir_not_equal_comparison_instruction_238:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_not_equal_comparison_instruction_238__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_not_equal_comparison_instruction_238__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 920 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 921 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 922 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_227
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 922 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 922 12
  # $4.1: @FILE = call(write_332, $3.1, " != ")
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # " != "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 922 79
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 922 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 922 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 922 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_not_equal_comparison_instruction_238__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_not_equal_comparison_instruction_238__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_not_equal_comparison_instruction_238__stack_frame_size: .word 32

  .loc 5 928 1
  .text
dump_ir_substract_instruction_239:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_substract_instruction_239__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_substract_instruction_239__1:
  # instruction.1: @IR_Binary_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 930 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 931 23
  # $2.1: @IR_Value = call(get_left_value_227, instruction.1)
  mov rdi, [rbp-16]
  call get_left_value_227
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] $2.1:rax 
  .loc 5 931 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 931 12
  # $4.1: @FILE = call(write_332, $3.1, " - ")
  mov rdi, rax
  lea rsi, .LABEL__string_285[rip] # " - "
  call write_332
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 931 78
  # $5.1: @IR_Value = call(get_right_value_228, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_228
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 931 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 931 12
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 931 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_substract_instruction_239__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_substract_instruction_239__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_substract_instruction_239__stack_frame_size: .word 32

  .loc 5 937 1
  .text
dump_ir_phi_instruction_240:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_phi_instruction_240__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_phi_instruction_240__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 938 5
  # call(dump_ir_instruction_result_172, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_172
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 939 20
  # instruction.1: @IR_Phi_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 940 5
  # $2.1: @FILE = call(write_332, file.1, "phi")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_286[rip] # "phi"
  mov [rbp-16], rax
  call write_332
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 940 5
  # $3.1: @FILE = call(write_334, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 941 29
  # $4.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] $4.1:rbx 
  .loc 5 941 29
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($4.1, first_entry)
  mov rax, [rbx]
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:rax 
  .loc 5 942 9
  # $6.1: Boolean = operand_values_entry.1 != null
  cmp rax, 0
  setne bl
  # [live values]: file.1:[rbp-8] operand_values_entry.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__dump_ir_phi_instruction_240__4, .LABEL__dump_ir_phi_instruction_240__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__dump_ir_phi_instruction_240__3
.LABEL__dump_ir_phi_instruction_240__4:
  # operand_values_entry.2: @IR_Values_Map_Entry = phi(operand_values_entry.3, operand_values_entry.1)
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:[rbp-16] 
  .loc 5 944 24
  # $7.1: @IR_Value = load_struct_member(operand_values_entry.2, value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:rax:[rbp-16] $7.1:rbx 
  .loc 5 944 13
  # $8.1: @FILE = call(write_154, file.1, $7.1, true)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov dl, 1
  call write_154
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:[rbp-16] 
  .loc 5 945 36
  # operand_values_entry.3: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.2, next_entry)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: operand_values_entry.2
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.3:rbx:[rbp-16] 
  .loc 5 946 17
  # $10.1: Boolean = operand_values_entry.3 == null
  cmp rbx, 0
  sete al
  mov [rbp-16], rbx
  # [discarded value]: operand_values_entry.3
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__dump_ir_phi_instruction_240__3, .LABEL__dump_ir_phi_instruction_240__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__dump_ir_phi_instruction_240__7
.LABEL__dump_ir_phi_instruction_240__3:
  .loc 5 952 12
  # $12.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_334
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $12.1:rax $10.1:[rbp-18] 
  .loc 5 952 12
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $13.1:rax $10.1:[rbp-18] 
  .loc 5 952 5
  # return($13.1)
  mov [rbp-26], rax
  jmp .LABEL__dump_ir_phi_instruction_240__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
.LABEL__dump_ir_phi_instruction_240__7:
  .loc 5 949 13
  # $11.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
  # jump(.LABEL__dump_ir_phi_instruction_240__4)
  jmp .LABEL__dump_ir_phi_instruction_240__4
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] 
  # [discarded value]: operand_values_entry.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_phi_instruction_240__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_phi_instruction_240__stack_frame_size: .word 32

  .loc 5 955 1
  .text
create_ir_phi_instruction_241:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_phi_instruction_241__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_phi_instruction_241__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  .loc 5 934 54
  # $1.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_function_address(dump_ir_phi_instruction_240)
  lea rax, dump_ir_phi_instruction_240[rip]
  # [live values]: result_value.1:rdi $1.1:rax 
  .loc 5 407 38
  # $2.1: @IR_Values_Map = new(IR_Values_Map)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_entry, null)
  mov QWORD PTR [rax], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_entry, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 956 20
  # $3.1: @IR_Phi_Instruction = new(IR_Phi_Instruction)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Phi_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, dump, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 956 5
  # instruction.1: @IR_Phi_Instruction = $3.1
  mov [rbp-8], rax
  # [discarded value]: $3.1
  # [live values]: instruction.1:rax 
  .loc 5 957 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_phi_instruction_241__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_phi_instruction_241__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_phi_instruction_241__stack_frame_size: .word 32

  .loc 5 960 1
  .text
append_242:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_242__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_242__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  .loc 5 961 5
  # call(set_operand_value_174, self.1, value.1, value.1)
  mov rdx, rsi
  call set_operand_value_174
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__append_242__end
  # [live values]: 
.LABEL__append_242__end:
  mov rsp, rbp
  pop rbp
  ret

append_242__stack_frame_size: .word 0

  .loc 5 964 1
  .text
is_redundant_243:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_redundant_243__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_redundant_243__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 968 29
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 968 29
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($1.1, first_entry)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: operand_values_entry.1:rbx 
  .loc 5 969 9
  # $3.1: Boolean = operand_values_entry.1 == null
  cmp rbx, 0
  sete al
  # [live values]: operand_values_entry.1:rbx $3.1:rax 
  # jump($3.1, .LABEL__is_redundant_243__2, .LABEL__is_redundant_243__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rbx
  jz .LABEL__is_redundant_243__3
.LABEL__is_redundant_243__2:
  .loc 5 970 9
  # call(abort)
  call abort
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__is_redundant_243__3:
  .loc 5 972 20
  # other_value.1: @IR_Value = load_struct_member(operand_values_entry.1, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: operand_values_entry.1:rax:[rbp-9] $3.1:[rbp-1] other_value.1:rbx 
  .loc 5 973 28
  # operand_values_entry.3: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.1, next_entry)
  mov r15, [rax+24]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:rbx operand_values_entry.3:r15:[rbp-9] 
  # jump(.LABEL__is_redundant_243__4)
  mov [rbp-17], rbx
  mov [rbp-9], r15
.LABEL__is_redundant_243__4:
  # operand_values_entry.4: @IR_Values_Map_Entry = phi(operand_values_entry.3, operand_values_entry.7)
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] 
  .loc 5 974 12
  # $6.1: Boolean = operand_values_entry.4 != null
  cmp QWORD PTR [rbp-9], 0
  setne al
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:rax 
  # jump($6.1, .LABEL__is_redundant_243__5, .LABEL__is_redundant_243__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__is_redundant_243__6
.LABEL__is_redundant_243__5:
  .loc 5 975 13
  # $7.1: @IR_Value = load_struct_member(operand_values_entry.4, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:rax:[rbp-9] $6.1:[rbp-18] $7.1:rbx 
  .loc 5 975 13
  # $8.1: Boolean = $7.1 != other_value.1
  cmp rbx, QWORD PTR [rbp-17]
  setne r15b
  # [discarded value]: $7.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:rax:[rbp-9] $6.1:[rbp-18] $8.1:r15 
  # jump($8.1, .LABEL__is_redundant_243__7, .LABEL__is_redundant_243__8)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__is_redundant_243__8
.LABEL__is_redundant_243__7:
  .loc 5 976 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_redundant_243__end
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] 
.LABEL__is_redundant_243__8:
  .loc 5 978 32
  # operand_values_entry.7: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.4, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] operand_values_entry.7:rbx:[rbp-9] 
  # jump(.LABEL__is_redundant_243__4)
  mov [rbp-9], rbx
  jmp .LABEL__is_redundant_243__4
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] operand_values_entry.7:[rbp-9] 
  # [discarded value]: operand_values_entry.7
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] 
  # [discarded value]: $8.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] 
.LABEL__is_redundant_243__6:
  .loc 5 980 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_redundant_243__end
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] 
  # [discarded value]: operand_values_entry.4
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] 
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] 
  # [discarded value]: operand_values_entry.3
  # [discarded value]: other_value.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: operand_values_entry.1:[rbp-9] 
  # [discarded value]: operand_values_entry.1
  # [live values]: 
.LABEL__is_redundant_243__end:
  mov rsp, rbp
  pop rbp
  ret

is_redundant_243__stack_frame_size: .word 32

  .loc 5 983 1
  .text
is_trivial_244:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_trivial_244__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_trivial_244__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 988 29
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 988 29
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($1.1, first_entry)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi operand_values_entry.1:rbx 
  .loc 5 989 9
  # $3.1: Boolean = operand_values_entry.1 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:rdi operand_values_entry.1:rbx $3.1:rax 
  # jump($3.1, .LABEL__is_trivial_244__2, .LABEL__is_trivial_244__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rbx
  mov [rbp-17], rdi
  jz .LABEL__is_trivial_244__3
.LABEL__is_trivial_244__2:
  .loc 5 990 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__is_trivial_244__3:
  .loc 5 992 31
  # result_value.1: @IR_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:rbx 
  .loc 5 993 5
  # other_value.1: @IR_Value = null
  xor r15, r15
  # [live values]: self.1:rax:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:rbx other_value.1:r15 
  # jump(.LABEL__is_trivial_244__4)
  mov [rbp-25], rbx
  mov [rbp-33], r15
.LABEL__is_trivial_244__4:
  # other_value.5: @IR_Value = phi(other_value.1, other_value.6)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] 
  # operand_values_entry.2: @IR_Values_Map_Entry = phi(operand_values_entry.1, operand_values_entry.5)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] 
  .loc 5 994 12
  # $5.1: Boolean = operand_values_entry.2 != null
  cmp QWORD PTR [rbp-9], 0
  setne al
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__is_trivial_244__5, .LABEL__is_trivial_244__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__is_trivial_244__6
.LABEL__is_trivial_244__5:
  .loc 5 995 18
  # value.1: @IR_Value = load_struct_member(operand_values_entry.2, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:rax:[rbp-9] $5.1:[rbp-34] value.1:rbx 
  .loc 5 996 13
  # $7.1: Boolean = value.1 != result_value.1
  cmp rbx, QWORD PTR [rbp-25]
  setne r15b
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:rax:[rbp-9] $5.1:[rbp-34] value.1:rbx $7.1:r15 
  # jump($7.1, .LABEL__is_trivial_244__7, .LABEL__is_trivial_244__8)
  test r15b, r15b
  mov [rbp-42], rbx
  mov [rbp-43], r15b
  jz .LABEL__is_trivial_244__8
.LABEL__is_trivial_244__7:
  .loc 5 997 17
  # $8.1: Boolean = value.1 != other_value.5
  mov rax, [rbp-42]
  cmp rax, QWORD PTR [rbp-33]
  setne bl
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:rax:[rbp-42] $7.1:[rbp-43] $8.1:rbx 
  # jump($8.1, .LABEL__is_trivial_244__9, .LABEL__is_trivial_244__8)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__is_trivial_244__8
.LABEL__is_trivial_244__9:
  .loc 5 998 21
  # $9.1: Boolean = other_value.5 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:rax 
  # jump($9.1, .LABEL__is_trivial_244__11, .LABEL__is_trivial_244__12)
  test al, al
  mov [rbp-45], al
  jz .LABEL__is_trivial_244__12
.LABEL__is_trivial_244__11:
  .loc 5 999 21
  # return(false)
  mov al, 0
  jmp .LABEL__is_trivial_244__end
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] 
.LABEL__is_trivial_244__12:
  .loc 5 1001 17
  # other_value.4: @IR_Value = value.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:rax:[rbp-33] 
  # jump(.LABEL__is_trivial_244__8)
  mov [rbp-33], rax
.LABEL__is_trivial_244__8:
  # other_value.6: @IR_Value = phi(other_value.5, other_value.4)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] $9.1:[rbp-45] other_value.4:[rbp-33] 
  .loc 5 1004 32
  # operand_values_entry.5: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.2, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] operand_values_entry.5:rbx:[rbp-9] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # jump(.LABEL__is_trivial_244__4)
  mov [rbp-9], rbx
  jmp .LABEL__is_trivial_244__4
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] operand_values_entry.5:[rbp-9] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [discarded value]: operand_values_entry.5
  # [discarded value]: other_value.6
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [discarded value]: other_value.4
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] 
.LABEL__is_trivial_244__6:
  .loc 5 1006 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_trivial_244__end
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] 
  # [discarded value]: operand_values_entry.2
  # [discarded value]: other_value.5
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] 
  # [discarded value]: other_value.1
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] 
  # [discarded value]: operand_values_entry.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_trivial_244__end:
  mov rsp, rbp
  pop rbp
  ret

is_trivial_244__stack_frame_size: .word 48

  .loc 7 49 1
  .text
parse_245:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_245__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_245__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  .loc 8 4 22
  # $1.1: @List = new(List)
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  .loc 8 5 20
  # $2.1: @List = new(List)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 8 6 31
  # $3.1: @List = new(List)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  .loc 8 7 24
  # $4.1: @List = new(List)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  .loc 8 8 25
  # $5.1: @List = new(List)
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 7 5 43
  # $6.1: @Compilation_Unit = new(Compilation_Unit)
  mov [rbp-48], rax
  mov rdi, 40
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, sources, $1.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, types, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-8] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, global_variables, $3.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-8] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, functions, $4.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-8] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, statements, $5.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $5.1
  # [live values]: file_path.1:[rbp-8] $6.1:rax 
  .loc 7 7 34
  # $7.1: @Comment_Matcher = new(Comment_Matcher)
  mov [rbp-16], rax
  mov rdi, 9
  call malloc
  lea rbx, Comment_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:rax 
  # store_struct_member($7.1, is_required, false)
  mov BYTE PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:rax 
  .loc 7 8 32
  # $8.1: @Space_Matcher = new(Space_Matcher)
  mov [rbp-24], rax
  mov rdi, 9
  call malloc
  lea rbx, Space_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, is_required, false)
  mov BYTE PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:rax 
  .loc 7 9 36
  # $9.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-32], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # store_struct_member($9.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # store_struct_member($9.1, lexeme, "&")
  lea rbx, .LABEL__string_287[rip] # "&"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  .loc 7 10 29
  # $10.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-40], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, lexeme, "as")
  lea rbx, .LABEL__string_288[rip] # "as"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  .loc 7 11 35
  # $11.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-48], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, lexeme, "*")
  lea rbx, .LABEL__string_289[rip] # "*"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  .loc 7 12 29
  # $12.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-56], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  # store_struct_member($12.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  # store_struct_member($12.1, lexeme, "@")
  lea rbx, .LABEL__string_230[rip] # "@"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  .loc 7 13 32
  # $13.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-64], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  # store_struct_member($13.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  # store_struct_member($13.1, lexeme, "break")
  lea rbx, .LABEL__string_290[rip] # "break"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  .loc 7 14 38
  # $14.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-72], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  # store_struct_member($14.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  # store_struct_member($14.1, lexeme, "}")
  lea rbx, .LABEL__string_291[rip] # "}"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  .loc 7 15 40
  # $15.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-80], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  # store_struct_member($15.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  # store_struct_member($15.1, lexeme, "]")
  lea rbx, .LABEL__string_232[rip] # "]"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  .loc 7 16 38
  # $16.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-88], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  # store_struct_member($16.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  # store_struct_member($16.1, lexeme, ")")
  lea rbx, .LABEL__string_181[rip] # ")"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  .loc 7 17 32
  # $17.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-96], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  # store_struct_member($17.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  # store_struct_member($17.1, lexeme, ":")
  lea rbx, .LABEL__string_25[rip] # ":"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  .loc 7 18 33
  # $18.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-104], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  # store_struct_member($18.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  # store_struct_member($18.1, lexeme, ";")
  lea rbx, .LABEL__string_292[rip] # ";"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  .loc 7 19 32
  # $19.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-112], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  # store_struct_member($19.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  # store_struct_member($19.1, lexeme, ",")
  lea rbx, .LABEL__string_293[rip] # ","
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  .loc 7 20 34
  # $20.1: @Comment_Matcher = new(Comment_Matcher)
  mov [rbp-120], rax
  mov rdi, 9
  call malloc
  lea rbx, Comment_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:rax 
  # store_struct_member($20.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:rax 
  .loc 7 21 30
  # $21.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-128], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  # store_struct_member($21.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  # store_struct_member($21.1, lexeme, ".")
  lea rbx, .LABEL__string_294[rip] # "."
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  .loc 7 22 31
  # $22.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-136], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  # store_struct_member($22.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  # store_struct_member($22.1, lexeme, "else")
  lea rbx, .LABEL__string_295[rip] # "else"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  .loc 7 23 38
  # $23.1: @End_Of_File_Matcher = new(End_Of_File_Matcher)
  mov [rbp-144], rax
  mov rdi, 9
  call malloc
  lea rbx, End_Of_File_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:rax 
  # store_struct_member($23.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:rax 
  .loc 7 24 38
  # $24.1: @End_Of_Line_Matcher = new(End_Of_Line_Matcher)
  mov [rbp-152], rax
  mov rdi, 9
  call malloc
  lea rbx, End_Of_Line_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:rax 
  # store_struct_member($24.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:rax 
  .loc 7 25 33
  # $25.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-160], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  # store_struct_member($25.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  # store_struct_member($25.1, lexeme, "=")
  lea rbx, .LABEL__string_296[rip] # "="
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  .loc 7 26 43
  # $26.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-168], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  # store_struct_member($26.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  # store_struct_member($26.1, lexeme, "!")
  lea rbx, .LABEL__string_297[rip] # "!"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  .loc 7 27 35
  # $27.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-176], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  # store_struct_member($27.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  # store_struct_member($27.1, lexeme, "external")
  lea rbx, .LABEL__string_298[rip] # "external"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  .loc 7 28 39
  # $28.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-184], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  # store_struct_member($28.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  # store_struct_member($28.1, lexeme, ">")
  lea rbx, .LABEL__string_299[rip] # ">"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  .loc 7 29 33
  # $29.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-192], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  # store_struct_member($29.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  # store_struct_member($29.1, lexeme, "-")
  lea rbx, .LABEL__string_300[rip] # "-"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  .loc 7 30 37
  # $30.1: @Identifier_Matcher = new(Identifier_Matcher)
  mov [rbp-200], rax
  mov rdi, 9
  call malloc
  lea rbx, Identifier_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:rax 
  # store_struct_member($30.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:rax 
  .loc 7 31 29
  # $31.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-208], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  # store_struct_member($31.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  # store_struct_member($31.1, lexeme, "if")
  lea rbx, .LABEL__string_301[rip] # "if"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  .loc 7 32 34
  # $32.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-216], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  # store_struct_member($32.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  # store_struct_member($32.1, lexeme, "include")
  lea rbx, .LABEL__string_302[rip] # "include"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  .loc 7 33 36
  # $33.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-224], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  # store_struct_member($33.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  # store_struct_member($33.1, lexeme, "<")
  lea rbx, .LABEL__string_303[rip] # "<"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  .loc 7 34 34
  # $34.1: @Literal_Matcher = new(Literal_Matcher)
  mov [rbp-232], rax
  mov rdi, 9
  call malloc
  lea rbx, Literal_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:rax 
  # store_struct_member($34.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:rax 
  .loc 7 35 31
  # $35.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-240], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  # store_struct_member($35.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  # store_struct_member($35.1, lexeme, "loop")
  lea rbx, .LABEL__string_304[rip] # "loop"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  .loc 7 36 30
  # $36.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-248], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  # store_struct_member($36.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  # store_struct_member($36.1, lexeme, "new")
  lea rbx, .LABEL__string_267[rip] # "new"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  .loc 7 37 37
  # $37.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-256], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  # store_struct_member($37.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  # store_struct_member($37.1, lexeme, "{")
  lea rbx, .LABEL__string_305[rip] # "{"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  .loc 7 38 39
  # $38.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-264], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  # store_struct_member($38.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  # store_struct_member($38.1, lexeme, "[")
  lea rbx, .LABEL__string_231[rip] # "["
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  .loc 7 39 37
  # $39.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-272], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  # store_struct_member($39.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  # store_struct_member($39.1, lexeme, "(")
  lea rbx, .LABEL__string_233[rip] # "("
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  .loc 7 40 31
  # $40.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-280], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  # store_struct_member($40.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  # store_struct_member($40.1, lexeme, "+")
  lea rbx, .LABEL__string_306[rip] # "+"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  .loc 7 41 33
  # $41.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-288], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  # store_struct_member($41.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  # store_struct_member($41.1, lexeme, "return")
  lea rbx, .LABEL__string_269[rip] # "return"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  .loc 7 42 32
  # $42.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-296], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  # store_struct_member($42.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  # store_struct_member($42.1, lexeme, "/")
  lea rbx, .LABEL__string_307[rip] # "/"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  .loc 7 43 41
  # $43.1: @String_Literal_Matcher = new(String_Literal_Matcher)
  mov [rbp-304], rax
  mov rdi, 9
  call malloc
  lea rbx, String_Literal_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:rax 
  # store_struct_member($43.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:rax 
  .loc 7 44 33
  # $44.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-312], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  # store_struct_member($44.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  # store_struct_member($44.1, lexeme, "struct")
  lea rbx, .LABEL__string_308[rip] # "struct"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  .loc 7 45 39
  # $45.1: @Other_Matcher = new(Other_Matcher)
  mov [rbp-320], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  # store_struct_member($45.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  # store_struct_member($45.1, lexeme, "|")
  lea rbx, .LABEL__string_309[rip] # "|"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  .loc 7 46 32
  # $46.1: @Keyword_Matcher = new(Keyword_Matcher)
  mov [rbp-328], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  # store_struct_member($46.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  # store_struct_member($46.1, lexeme, "while")
  lea rbx, .LABEL__string_310[rip] # "while"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  .loc 7 50 15
  # $47.1: @Parser = new(Parser)
  mov [rbp-336], rax
  mov rdi, 344
  call malloc
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, scanner, null)
  mov QWORD PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, compilation_unit, $6.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-8] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, current_alignment, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, optional_comment, $7.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $7.1
  # [live values]: file_path.1:[rbp-8] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, optional_space, $8.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $8.1
  # [live values]: file_path.1:[rbp-8] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_ampersand, $9.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+40], rbx
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-8] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_as, $10.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+48], rbx
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-8] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_asterisk, $11.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+56], rbx
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-8] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_at, $12.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+64], rbx
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-8] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_break, $13.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+72], rbx
  # [discarded value]: $13.1
  # [live values]: file_path.1:[rbp-8] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_close_brace, $14.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+80], rbx
  # [discarded value]: $14.1
  # [live values]: file_path.1:[rbp-8] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_close_bracket, $15.1)
  mov rbx, [rbp-88]
  mov QWORD PTR [rax+88], rbx
  # [discarded value]: $15.1
  # [live values]: file_path.1:[rbp-8] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_close_paren, $16.1)
  mov rbx, [rbp-96]
  mov QWORD PTR [rax+96], rbx
  # [discarded value]: $16.1
  # [live values]: file_path.1:[rbp-8] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_colon, $17.1)
  mov rbx, [rbp-104]
  mov QWORD PTR [rax+104], rbx
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-8] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_column, $18.1)
  mov rbx, [rbp-112]
  mov QWORD PTR [rax+112], rbx
  # [discarded value]: $18.1
  # [live values]: file_path.1:[rbp-8] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_comma, $19.1)
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+120], rbx
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-8] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_comment, $20.1)
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+128], rbx
  # [discarded value]: $20.1
  # [live values]: file_path.1:[rbp-8] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_dot, $21.1)
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+136], rbx
  # [discarded value]: $21.1
  # [live values]: file_path.1:[rbp-8] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_else, $22.1)
  mov rbx, [rbp-144]
  mov QWORD PTR [rax+144], rbx
  # [discarded value]: $22.1
  # [live values]: file_path.1:[rbp-8] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_end_of_file, $23.1)
  mov rbx, [rbp-152]
  mov QWORD PTR [rax+152], rbx
  # [discarded value]: $23.1
  # [live values]: file_path.1:[rbp-8] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_end_of_line, $24.1)
  mov rbx, [rbp-160]
  mov QWORD PTR [rax+160], rbx
  # [discarded value]: $24.1
  # [live values]: file_path.1:[rbp-8] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_equals, $25.1)
  mov rbx, [rbp-168]
  mov QWORD PTR [rax+168], rbx
  # [discarded value]: $25.1
  # [live values]: file_path.1:[rbp-8] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_exclamation_mark, $26.1)
  mov rbx, [rbp-176]
  mov QWORD PTR [rax+176], rbx
  # [discarded value]: $26.1
  # [live values]: file_path.1:[rbp-8] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_external, $27.1)
  mov rbx, [rbp-184]
  mov QWORD PTR [rax+184], rbx
  # [discarded value]: $27.1
  # [live values]: file_path.1:[rbp-8] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_greater_than, $28.1)
  mov rbx, [rbp-192]
  mov QWORD PTR [rax+192], rbx
  # [discarded value]: $28.1
  # [live values]: file_path.1:[rbp-8] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_hyphen, $29.1)
  mov rbx, [rbp-200]
  mov QWORD PTR [rax+200], rbx
  # [discarded value]: $29.1
  # [live values]: file_path.1:[rbp-8] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_identifier, $30.1)
  mov rbx, [rbp-208]
  mov QWORD PTR [rax+208], rbx
  # [discarded value]: $30.1
  # [live values]: file_path.1:[rbp-8] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_if, $31.1)
  mov rbx, [rbp-216]
  mov QWORD PTR [rax+216], rbx
  # [discarded value]: $31.1
  # [live values]: file_path.1:[rbp-8] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_include, $32.1)
  mov rbx, [rbp-224]
  mov QWORD PTR [rax+224], rbx
  # [discarded value]: $32.1
  # [live values]: file_path.1:[rbp-8] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_less_than, $33.1)
  mov rbx, [rbp-232]
  mov QWORD PTR [rax+232], rbx
  # [discarded value]: $33.1
  # [live values]: file_path.1:[rbp-8] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_literal, $34.1)
  mov rbx, [rbp-240]
  mov QWORD PTR [rax+240], rbx
  # [discarded value]: $34.1
  # [live values]: file_path.1:[rbp-8] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_loop, $35.1)
  mov rbx, [rbp-248]
  mov QWORD PTR [rax+248], rbx
  # [discarded value]: $35.1
  # [live values]: file_path.1:[rbp-8] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_new, $36.1)
  mov rbx, [rbp-256]
  mov QWORD PTR [rax+256], rbx
  # [discarded value]: $36.1
  # [live values]: file_path.1:[rbp-8] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_open_brace, $37.1)
  mov rbx, [rbp-264]
  mov QWORD PTR [rax+264], rbx
  # [discarded value]: $37.1
  # [live values]: file_path.1:[rbp-8] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_open_bracket, $38.1)
  mov rbx, [rbp-272]
  mov QWORD PTR [rax+272], rbx
  # [discarded value]: $38.1
  # [live values]: file_path.1:[rbp-8] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_open_paren, $39.1)
  mov rbx, [rbp-280]
  mov QWORD PTR [rax+280], rbx
  # [discarded value]: $39.1
  # [live values]: file_path.1:[rbp-8] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_plus, $40.1)
  mov rbx, [rbp-288]
  mov QWORD PTR [rax+288], rbx
  # [discarded value]: $40.1
  # [live values]: file_path.1:[rbp-8] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_return, $41.1)
  mov rbx, [rbp-296]
  mov QWORD PTR [rax+296], rbx
  # [discarded value]: $41.1
  # [live values]: file_path.1:[rbp-8] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_slash, $42.1)
  mov rbx, [rbp-304]
  mov QWORD PTR [rax+304], rbx
  # [discarded value]: $42.1
  # [live values]: file_path.1:[rbp-8] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_string_literal, $43.1)
  mov rbx, [rbp-312]
  mov QWORD PTR [rax+312], rbx
  # [discarded value]: $43.1
  # [live values]: file_path.1:[rbp-8] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_struct, $44.1)
  mov rbx, [rbp-320]
  mov QWORD PTR [rax+320], rbx
  # [discarded value]: $44.1
  # [live values]: file_path.1:[rbp-8] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_vertical_bar, $45.1)
  mov rbx, [rbp-328]
  mov QWORD PTR [rax+328], rbx
  # [discarded value]: $45.1
  # [live values]: file_path.1:[rbp-8] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_while, $46.1)
  mov rbx, [rbp-336]
  mov QWORD PTR [rax+336], rbx
  # [discarded value]: $46.1
  # [live values]: file_path.1:[rbp-8] $47.1:rax 
  .loc 7 50 5
  # parser.1: @Parser = $47.1
  mov [rbp-16], rax
  # [discarded value]: $47.1
  # [live values]: file_path.1:[rbp-8] parser.1:rax 
  .loc 7 51 5
  # call(parse_246, parser.1, file_path.1, null)
  mov rdi, rax
  mov rsi, [rbp-8]
  xor rdx, rdx
  mov [rbp-16], rax
  call parse_246
  # [discarded value]: file_path.1
  # [live values]: parser.1:[rbp-16] 
  .loc 7 52 12
  # $48.1: @Compilation_Unit = load_struct_member(parser.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: parser.1
  # [live values]: $48.1:rbx 
  .loc 7 52 5
  # return($48.1)
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__parse_245__end
  # [discarded value]: $48.1
  # [live values]: 
.LABEL__parse_245__end:
  mov rsp, rbp
  pop rbp
  ret

parse_245__stack_frame_size: .word 336

  .loc 7 55 1
  .text
parse_246:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_246__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_246__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # file_path.1: @String = load_variable(file_path)
  # [live values]: self.1:rdi file_path.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi file_path.1:rsi location.1:rdx 
  .loc 7 56 15
  # source.1: @Source = call(create_source_311, file_path.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_source_311
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax 
  .loc 7 57 9
  # $2.1: Boolean = source.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_246__2, .LABEL__parse_246__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__parse_246__3
.LABEL__parse_246__2:
  .loc 7 58 20
  # $3.1: @String = call(clone_340, "Failed to open file: ")
  lea rdi, .LABEL__string_311[rip] # "Failed to open file: "
  call clone_340
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $3.1:rax 
  .loc 7 58 20
  # message.1: @String = call(append_349, $3.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_349
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:rax 
  .loc 7 59 13
  # $5.1: Boolean = location.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:rax $5.1:rbx 
  # jump($5.1, .LABEL__parse_246__4, .LABEL__parse_246__5)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__parse_246__5
.LABEL__parse_246__4:
  .loc 7 60 13
  # call(abort_309, location.1, message.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-41]
  call abort_309
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] $5.1:[rbp-42] 
.LABEL__parse_246__5:
  .loc 7 62 9
  # call(abort_337, message.1)
  mov rdi, [rbp-41]
  call abort_337
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] $5.1:[rbp-42] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] 
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
.LABEL__parse_246__3:
  .loc 7 65 5
  # $6.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $6.1:rbx 
  .loc 7 65 5
  # $7.1: @List = load_struct_member($6.1, sources)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $7.1:r15 
  .loc 7 65 5
  # call(append_313, $7.1, source.1)
  mov rdi, r15
  mov rsi, [rbp-32]
  call append_313
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
  .loc 7 66 17
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $8.1:rbx 
  .loc 7 66 17
  # $9.1: @List = load_struct_member($8.1, sources)
  mov r15, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $9.1:r15 
  .loc 7 66 17
  # $10.1: Int = load_struct_member($9.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $10.1:rbx 
  .loc 7 66 5
  # store_struct_member(source.1, id, $10.1)
  mov r15, [rbp-32]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] $2.1:[rbp-33] 
  .loc 7 68 22
  # other_scanner.1: @Scanner = load_struct_member(self.1, scanner)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] $2.1:[rbp-33] other_scanner.1:rbx 
  .loc 7 69 20
  # $12.1: @Scanner = call(create_scanner_291, source.1)
  mov rdi, r15
  mov [rbp-41], rbx
  call create_scanner_291
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $12.1:rax 
  .loc 7 69 5
  # store_struct_member(self.1, scanner, $12.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  .loc 7 70 27
  # $13.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $13.1:rax 
  .loc 7 70 27
  # $14.1: @List = load_struct_member($13.1, statements)
  mov r15, [rax+32]
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $14.1:r15 
  .loc 7 70 5
  # call(parse_statements_247, self.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call parse_statements_247
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  .loc 7 71 9
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $15.1:rbx 
  .loc 7 71 9
  # $16.1: @Token = load_struct_member($15.1, current_token)
  mov r15, [rbx+32]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $16.1:r15 
  # End_Of_File_Token.2: @Object_Type = load_variable(End_Of_File_Token)
  lea rbx, End_Of_File_Token[rip]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $16.1:r15 End_Of_File_Token.2:rbx 
  .loc 7 71 9
  # $17.1: Boolean = call(is_338, $16.1, End_Of_File_Token.2)
  mov rdi, r15
  mov rsi, rbx
  call is_338
  # [discarded value]: End_Of_File_Token.2
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $17.1:rax 
  .loc 7 71 9
  # $18.1: Boolean = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $18.1:rbx 
  # jump($18.1, .LABEL__parse_246__6, .LABEL__parse_246__7)
  test bl, bl
  mov [rbp-42], bl
  jz .LABEL__parse_246__7
.LABEL__parse_246__6:
  .loc 7 72 21
  # $19.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $18.1:[rbp-42] $19.1:rbx 
  .loc 7 72 21
  # $20.1: @Token = load_struct_member($19.1, current_token)
  mov r15, [rbx+32]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $18.1:[rbp-42] $20.1:r15 
  .loc 7 72 9
  # call(abort_284, self.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call abort_284
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $18.1:[rbp-42] 
.LABEL__parse_246__7:
  .loc 7 75 5
  # store_struct_member(self.1, scanner, other_scanner.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-41]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:rbx:[rbp-41] $18.1:[rbp-42] 
  # return()
  jmp .LABEL__parse_246__end
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $18.1:[rbp-42] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  # [discarded value]: other_scanner.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
  # [discarded value]: source.1
  # [discarded value]: location.1
  # [discarded value]: file_path.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_246__end:
  mov rsp, rbp
  pop rbp
  ret

parse_246__stack_frame_size: .word 48

  .loc 7 80 1
  .text
parse_statements_247:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statements_247__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statements_247__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # statements.1: @List = load_variable(statements)
  # [live values]: self.1:rdi statements.1:rsi 
  # jump(.LABEL__parse_statements_247__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__parse_statements_247__2:
  .loc 7 82 22
  # statement.1: @AST_Statement = call(parse_statement_249, self.1)
  mov rdi, [rbp-16]
  call parse_statement_249
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax 
  .loc 7 83 13
  # $2.1: Boolean = statement.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_statements_247__3, .LABEL__parse_statements_247__5)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__parse_statements_247__5
.LABEL__parse_statements_247__3:
  # return()
  jmp .LABEL__parse_statements_247__end
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__parse_statements_247__5:
  .loc 7 86 9
  # call(consume_end_of_line_273, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_273
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
  # AST_Include_Statement.2: @Object_Type = load_variable(AST_Include_Statement)
  lea rax, AST_Include_Statement[rip]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] AST_Include_Statement.2:rax 
  .loc 7 87 13
  # $3.1: Boolean = call(is_338, statement.1, AST_Include_Statement.2)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Include_Statement.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__parse_statements_247__7, .LABEL__parse_statements_247__9)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_statements_247__9
.LABEL__parse_statements_247__7:
  .loc 7 88 26
  # statement.1: @AST_Include_Statement = statement.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax 
  .loc 7 90 36
  # $5.1: @String = load_struct_member(statement.1, file_path)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx 
  .loc 7 90 75
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $6.1:r15 
  .loc 7 90 75
  # $7.1: @Source = load_struct_member($6.1, source)
  mov r14, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $7.1:r14 
  .loc 7 90 75
  # $8.1: @String = load_struct_member($7.1, file_path)
  mov r15, [r14+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $8.1:r15 
  .loc 7 90 36
  # statement_file_path.1: @String = call(make_relative_path_248, $5.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-34], rax
  call make_relative_path_248
  # [discarded value]: $8.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:rax 
  .loc 7 91 17
  # $10.1: Boolean = statement_file_path.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__parse_statements_247__10, .LABEL__parse_statements_247__11)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__parse_statements_247__11
.LABEL__parse_statements_247__10:
  .loc 7 92 23
  # $11.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:rbx 
  .loc 7 92 43
  # $12.1: @String = call(clone_340, "Unsupported file path: ")
  lea rdi, .LABEL__string_312[rip] # "Unsupported file path: "
  mov [rbp-51], rbx
  call clone_340
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $12.1:rax 
  .loc 7 92 83
  # $13.1: @String = load_struct_member(statement.1, file_path)
  mov rbx, [rbp-34]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rbx:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $12.1:rax $13.1:r15 
  .loc 7 92 43
  # $14.1: @String = call(append_349, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call append_349
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $14.1:rax 
  .loc 7 92 17
  # call(abort_309, $11.1, $14.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_309
  # [discarded value]: $14.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] 
.LABEL__parse_statements_247__11:
  .loc 7 95 46
  # $15.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $15.1:rbx 
  .loc 7 95 46
  # $16.1: @List = load_struct_member($15.1, sources)
  mov r15, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $16.1:r15 
  .loc 7 95 46
  # compilation_unit_sources_item.1: @List_Item = load_struct_member($16.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $16.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:rbx 
  # jump(.LABEL__parse_statements_247__12)
  mov [rbp-51], rbx
.LABEL__parse_statements_247__12:
  # compilation_unit_sources_item.2: @List_Item = phi(compilation_unit_sources_item.1, compilation_unit_sources_item.5)
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] 
  .loc 7 96 20
  # $18.1: Boolean = compilation_unit_sources_item.2 != null
  cmp QWORD PTR [rbp-51], 0
  setne al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:rax 
  # jump($18.1, .LABEL__parse_statements_247__13, .LABEL__parse_statements_247__14)
  test al, al
  mov [rbp-52], al
  jz .LABEL__parse_statements_247__14
.LABEL__parse_statements_247__13:
  .loc 7 97 22
  # $20.1: @Source = load_struct_member(compilation_unit_sources_item.2, data)
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:rax:[rbp-51] $18.1:[rbp-52] $20.1:rbx 
  .loc 7 97 21
  # $21.1: @String = load_struct_member($20.1, file_path)
  mov r15, [rbx+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:rax:[rbp-51] $18.1:[rbp-52] $21.1:r15 
  .loc 7 97 21
  # $22.1: Boolean = call(equals_341, $21.1, statement_file_path.1)
  mov rdi, r15
  mov rsi, [rbp-42]
  call equals_341
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:rax 
  # jump($22.1, .LABEL__parse_statements_247__14, .LABEL__parse_statements_247__16)
  test al, al
  mov [rbp-53], al
  jz .LABEL__parse_statements_247__16
.LABEL__parse_statements_247__14:
  .loc 7 103 17
  # $24.1: Boolean = compilation_unit_sources_item.2 == null
  cmp QWORD PTR [rbp-51], 0
  sete al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:rax 
  # jump($24.1, .LABEL__parse_statements_247__18, .LABEL__parse_statements_247__2)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_statements_247__2
.LABEL__parse_statements_247__18:
  .loc 7 104 49
  # $25.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] $25.1:rbx 
  .loc 7 104 17
  # call(parse_246, self.1, statement_file_path.1, $25.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-42]
  mov rdx, rbx
  call parse_246
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] 
  # jump(.LABEL__parse_statements_247__2)
  jmp .LABEL__parse_statements_247__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] 
.LABEL__parse_statements_247__16:
  .loc 7 100 49
  # compilation_unit_sources_item.5: @List_Item = load_struct_member(compilation_unit_sources_item.2, next_item)
  mov rax, [rbp-51]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] compilation_unit_sources_item.5:rbx:[rbp-51] 
  # jump(.LABEL__parse_statements_247__12)
  mov [rbp-51], rbx
  jmp .LABEL__parse_statements_247__12
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] compilation_unit_sources_item.5:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.5
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] 
  # [discarded value]: statement_file_path.1
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__parse_statements_247__9:
  .loc 7 107 13
  # call(append_313, statements.1, statement.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call append_313
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # jump(.LABEL__parse_statements_247__2)
  jmp .LABEL__parse_statements_247__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [discarded value]: statements.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statements_247__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statements_247__stack_frame_size: .word 64

  .loc 7 112 1
  .text
make_relative_path_248:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR make_relative_path_248__stack_frame_size[rip]
  sub rsp, rax
.LABEL__make_relative_path_248__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # base_file_path.1: @String = load_variable(base_file_path)
  # [live values]: file_path.1:rdi base_file_path.1:rsi 
  .loc 7 113 9
  # $1.1: Boolean = call(starts_with_343, file_path.1, "./")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_313[rip] # "./"
  mov [rbp-16], rdi
  call starts_with_343
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__make_relative_path_248__2, .LABEL__make_relative_path_248__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__make_relative_path_248__3
.LABEL__make_relative_path_248__2:
  .loc 7 114 26
  # $2.1: @String = call(clone_340, base_file_path.1)
  mov rdi, [rbp-8]
  call clone_340
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $2.1:rax 
  .loc 7 114 26
  # $3.1: @String = call(append_349, $2.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_349
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:rax 
  .loc 7 114 73
  # $4.1: Int = call(last_index_of_345, base_file_path.1, '/')
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-25], rax
  call last_index_of_345
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $4.1:rax 
  .loc 7 114 73
  # $5.1: Int = $4.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx 
  .loc 7 114 112
  # $6.1: Int = load_struct_member(base_file_path.1, length)
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx $6.1:r15 
  .loc 7 114 112
  # $7.1: Int = $6.1 + 2
  mov r14, r15
  add r14, 2
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx $7.1:r14 
  .loc 7 114 26
  # relative_path.1: @String = call(remove_350, $3.1, $5.1, $7.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  mov rdx, r14
  call remove_350
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] relative_path.1:rax 
  .loc 7 115 9
  # return(relative_path.1)
  mov [rbp-25], rax
  jmp .LABEL__make_relative_path_248__end
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__make_relative_path_248__3:
  .loc 7 117 9
  # $9.1: Boolean = call(starts_with_343, file_path.1, "../")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_314[rip] # "../"
  call starts_with_343
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:rax 
  # jump($9.1, .LABEL__make_relative_path_248__5, .LABEL__make_relative_path_248__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__make_relative_path_248__6
.LABEL__make_relative_path_248__5:
  .loc 7 118 26
  # $10.1: @String = call(clone_340, base_file_path.1)
  mov rdi, [rbp-8]
  call clone_340
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $10.1:rax 
  .loc 7 118 26
  # $11.1: @String = call(append_349, $10.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_349
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:rax 
  .loc 7 118 73
  # $12.1: Int = call(last_index_of_345, base_file_path.1, '/')
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-26], rax
  call last_index_of_345
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $12.1:rax 
  .loc 7 118 73
  # $13.1: Int = $12.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $13.1:rbx 
  .loc 7 118 112
  # $14.1: Int = load_struct_member(base_file_path.1, length)
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $13.1:rbx $14.1:r15 
  .loc 7 118 26
  # relative_path.1: @String = call(remove_350, $11.1, $13.1, $14.1)
  mov rdi, [rbp-26]
  mov rsi, rbx
  mov rdx, r15
  call remove_350
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:rax 
  # jump(.LABEL__make_relative_path_248__7)
  mov [rbp-26], rax
.LABEL__make_relative_path_248__7:
  .loc 7 120 22
  # index.1: Int = call(index_of_342, relative_path.1, "/../")
  mov rdi, [rbp-26]
  lea rsi, .LABEL__string_315[rip] # "/../"
  call index_of_342
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:rax 
  .loc 7 121 17
  # $17.1: Boolean = index.1 <= 0
  cmp rax, 0
  setle bl
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__make_relative_path_248__8, .LABEL__make_relative_path_248__10)
  test bl, bl
  mov [rbp-34], rax
  mov [rbp-35], bl
  jz .LABEL__make_relative_path_248__10
.LABEL__make_relative_path_248__8:
  .loc 7 126 9
  # return(relative_path.1)
  mov rax, [rbp-26]
  jmp .LABEL__make_relative_path_248__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__make_relative_path_248__10:
  .loc 7 124 67
  # $18.1: Int = index.1 - 1
  mov rax, [rbp-34]
  dec rax
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $18.1:rax 
  .loc 7 124 34
  # $19.1: Int = call(last_index_of_346, relative_path.1, '/', $18.1)
  mov rdi, [rbp-26]
  mov sil, 47
  mov rdx, rax
  call last_index_of_346
  # [discarded value]: $18.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $19.1:rax 
  .loc 7 124 79
  # $20.1: Int = index.1 + 3
  mov rbx, [rbp-34]
  add rbx, 3
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $19.1:rax $20.1:rbx 
  .loc 7 124 13
  # $21.1: @String = call(remove_350, relative_path.1, $19.1, $20.1)
  mov rdi, [rbp-26]
  mov rsi, rax
  mov rdx, rbx
  call remove_350
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__make_relative_path_248__7)
  jmp .LABEL__make_relative_path_248__7
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] 
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
.LABEL__make_relative_path_248__6:
  .loc 7 128 5
  # return(file_path.1)
  mov rax, [rbp-16]
  jmp .LABEL__make_relative_path_248__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [discarded value]: base_file_path.1
  # [discarded value]: file_path.1
  # [live values]: 
.LABEL__make_relative_path_248__end:
  mov rsp, rbp
  pop rbp
  ret

make_relative_path_248__stack_frame_size: .word 48

  .loc 7 138 1
  .text
parse_statement_249:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statement_249__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statement_249__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(.LABEL__parse_statement_249__2)
  mov [rbp-8], rdi
.LABEL__parse_statement_249__2:
  .loc 7 139 12
  # $1.1: Boolean = call(consume_empty_line_274, self.1)
  mov rdi, [rbp-8]
  call consume_empty_line_274
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_statement_249__2, .LABEL__parse_statement_249__4)
  test al, al
  mov [rbp-9], al
  jnz .LABEL__parse_statement_249__2
.LABEL__parse_statement_249__4:
  .loc 7 142 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $2.1:rbx 
  .loc 7 142 43
  # $3.1: @Matcher = load_struct_member(self.1, required_close_brace)
  mov r15, [rax+80]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $2.1:rbx $3.1:r15 
  .loc 7 142 9
  # $5.1: Boolean = call(matches_281, self.1, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__parse_statement_249__6, .LABEL__parse_statement_249__5)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_statement_249__5
.LABEL__parse_statement_249__6:
  .loc 7 142 9
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
  # jump($5.3, .LABEL__parse_statement_249__7, .LABEL__parse_statement_249__8)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__parse_statement_249__8
.LABEL__parse_statement_249__7:
  .loc 7 143 9
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_statement_249__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
.LABEL__parse_statement_249__8:
  .loc 7 146 24
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $8.1:rbx 
  .loc 7 146 24
  # $9.1: Int = $8.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $9.1:r15 
  .loc 7 146 5
  # call(consume_space_275, self.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
  .loc 7 148 22
  # $10.1: @Matcher = load_struct_member(self.1, required_if)
  mov rax, [rbp-8]
  mov rbx, [rax+216]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $10.1:rbx 
  .loc 7 148 9
  # $11.1: Boolean = call(matches_280, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:rax 
  # jump($11.1, .LABEL__parse_statement_249__10, .LABEL__parse_statement_249__11)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_statement_249__11
.LABEL__parse_statement_249__10:
  .loc 7 149 16
  # $12.1: @AST_Statement = call(parse_if_256, self.1)
  mov rdi, [rbp-8]
  call parse_if_256
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $12.1:rax 
  .loc 7 149 9
  # return($12.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] 
.LABEL__parse_statement_249__11:
  .loc 7 151 22
  # $13.1: @Matcher = load_struct_member(self.1, required_return)
  mov rax, [rbp-8]
  mov rbx, [rax+296]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $13.1:rbx 
  .loc 7 151 9
  # $14.1: Boolean = call(matches_280, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:rax 
  # jump($14.1, .LABEL__parse_statement_249__13, .LABEL__parse_statement_249__14)
  test al, al
  mov [rbp-12], al
  jz .LABEL__parse_statement_249__14
.LABEL__parse_statement_249__13:
  .loc 7 152 31
  # $15.1: @Matcher = load_struct_member(self.1, required_return)
  mov rax, [rbp-8]
  mov rbx, [rax+296]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $15.1:rbx 
  .loc 7 152 18
  # token.1: @Token = call(consume_276, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:rax 
  .loc 7 153 9
  # value_expression.1: @AST_Expression = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:rax value_expression.1:rbx 
  .loc 7 154 13
  # $17.1: Boolean = call(matches_end_of_line_279, self.1)
  mov rdi, [rbp-8]
  mov [rbp-20], rax
  mov [rbp-28], rbx
  call matches_end_of_line_279
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $17.1:rax 
  .loc 7 154 13
  # $18.1: Boolean = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:rbx 
  # jump($18.1, .LABEL__parse_statement_249__15, .LABEL__parse_statement_249__16)
  test bl, bl
  mov [rbp-29], bl
  jz .LABEL__parse_statement_249__16
.LABEL__parse_statement_249__15:
  .loc 7 155 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] 
  .loc 7 156 32
  # value_expression.2: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:rax:[rbp-28] 
  # jump(.LABEL__parse_statement_249__16)
  mov [rbp-28], rax
.LABEL__parse_statement_249__16:
  # value_expression.3: @AST_Expression = phi(value_expression.1, value_expression.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] value_expression.3:[rbp-28] 
  .loc 7 158 52
  # $20.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-20]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:rax:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] value_expression.3:[rbp-28] $20.1:rbx 
  .loc 7 158 16
  # $21.1: @AST_Return_Statement = new(AST_Return_Statement)
  mov [rbp-37], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Return_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] value_expression.3:[rbp-28] $20.1:[rbp-37] $21.1:rax 
  # store_struct_member($21.1, location, $20.1)
  mov rbx, [rbp-37]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] value_expression.3:[rbp-28] $21.1:rax 
  # store_struct_member($21.1, value_expression, value_expression.3)
  mov rbx, [rbp-28]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: value_expression.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] $21.1:rax 
  .loc 7 158 9
  # return($21.1)
  mov [rbp-37], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] 
  # [discarded value]: value_expression.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] 
  # [discarded value]: value_expression.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] 
.LABEL__parse_statement_249__14:
  .loc 7 160 22
  # $22.1: @Matcher = load_struct_member(self.1, required_loop)
  mov rax, [rbp-8]
  mov rbx, [rax+248]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $22.1:rbx 
  .loc 7 160 9
  # $23.1: Boolean = call(matches_280, self.1, $22.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:rax 
  # jump($23.1, .LABEL__parse_statement_249__18, .LABEL__parse_statement_249__19)
  test al, al
  mov [rbp-13], al
  jz .LABEL__parse_statement_249__19
.LABEL__parse_statement_249__18:
  .loc 7 161 16
  # $24.1: @AST_Statement = call(parse_loop_257, self.1)
  mov rdi, [rbp-8]
  call parse_loop_257
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $24.1:rax 
  .loc 7 161 9
  # return($24.1)
  mov [rbp-21], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] 
.LABEL__parse_statement_249__19:
  .loc 7 163 22
  # $25.1: @Matcher = load_struct_member(self.1, required_while)
  mov rax, [rbp-8]
  mov rbx, [rax+336]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $25.1:rbx 
  .loc 7 163 9
  # $26.1: Boolean = call(matches_280, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:rax 
  # jump($26.1, .LABEL__parse_statement_249__21, .LABEL__parse_statement_249__22)
  test al, al
  mov [rbp-14], al
  jz .LABEL__parse_statement_249__22
.LABEL__parse_statement_249__21:
  .loc 7 164 16
  # $27.1: @AST_Statement = call(parse_while_258, self.1)
  mov rdi, [rbp-8]
  call parse_while_258
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $27.1:rax 
  .loc 7 164 9
  # return($27.1)
  mov [rbp-22], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] 
.LABEL__parse_statement_249__22:
  .loc 7 166 22
  # $28.1: @Matcher = load_struct_member(self.1, required_break)
  mov rax, [rbp-8]
  mov rbx, [rax+72]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $28.1:rbx 
  .loc 7 166 9
  # $29.1: Boolean = call(matches_280, self.1, $28.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:rax 
  # jump($29.1, .LABEL__parse_statement_249__24, .LABEL__parse_statement_249__25)
  test al, al
  mov [rbp-15], al
  jz .LABEL__parse_statement_249__25
.LABEL__parse_statement_249__24:
  .loc 7 167 31
  # $30.1: @Matcher = load_struct_member(self.1, required_break)
  mov rax, [rbp-8]
  mov rbx, [rax+72]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $30.1:rbx 
  .loc 7 167 18
  # token.1: @Token = call(consume_276, self.1, $30.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] token.1:rax 
  .loc 7 168 51
  # $32.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $32.1:rbx 
  .loc 7 168 16
  # $33.1: @AST_Break_Statement = new(AST_Break_Statement)
  mov [rbp-23], rbx
  mov rdi, 16
  call malloc
  lea rbx, AST_Break_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $32.1:[rbp-23] $33.1:rax 
  # store_struct_member($33.1, location, $32.1)
  mov rbx, [rbp-23]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $33.1:rax 
  .loc 7 168 9
  # return($33.1)
  mov [rbp-23], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] 
.LABEL__parse_statement_249__25:
  .loc 7 170 22
  # $34.1: @Matcher = load_struct_member(self.1, required_include)
  mov rax, [rbp-8]
  mov rbx, [rax+224]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $34.1:rbx 
  .loc 7 170 9
  # $35.1: Boolean = call(matches_280, self.1, $34.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:rax 
  # jump($35.1, .LABEL__parse_statement_249__27, .LABEL__parse_statement_249__28)
  test al, al
  mov [rbp-16], al
  jz .LABEL__parse_statement_249__28
.LABEL__parse_statement_249__27:
  .loc 7 171 16
  # $36.1: @AST_Include_Statement = call(parse_include_250, self.1)
  mov rdi, [rbp-8]
  call parse_include_250
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] $36.1:rax 
  .loc 7 171 9
  # return($36.1)
  mov [rbp-24], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] 
.LABEL__parse_statement_249__28:
  .loc 7 174 19
  # expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax 
  .loc 7 176 22
  # $38.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax $38.1:r15 
  .loc 7 176 43
  # $39.1: @Matcher = load_struct_member(self.1, optional_comment)
  mov r14, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax $38.1:r15 $39.1:r14 
  .loc 7 176 66
  # $40.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov r13, [rbx+160]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax $38.1:r15 $39.1:r14 $40.1:r13 
  .loc 7 176 9
  # $41.1: Boolean = call(matches_282, self.1, $38.1, $39.1, $40.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov rcx, r13
  mov [rbp-24], rax
  call matches_282
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:rax 
  # jump($41.1, .LABEL__parse_statement_249__30, .LABEL__parse_statement_249__31)
  test al, al
  mov [rbp-25], al
  jz .LABEL__parse_statement_249__31
.LABEL__parse_statement_249__30:
  .loc 7 177 56
  # $42.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax:[rbp-24] $41.1:[rbp-25] $42.1:rbx 
  .loc 7 177 16
  # $43.1: @AST_Expression_Statement = new(AST_Expression_Statement)
  mov [rbp-33], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Expression_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $42.1:[rbp-33] $43.1:rax 
  # store_struct_member($43.1, location, $42.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $43.1:rax 
  # store_struct_member($43.1, expression, expression.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rbx:[rbp-24] $41.1:[rbp-25] $43.1:rax 
  .loc 7 177 9
  # return($43.1)
  mov [rbp-33], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] 
.LABEL__parse_statement_249__31:
  .loc 7 180 22
  # $44.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $44.1:rbx 
  .loc 7 180 43
  # $45.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $44.1:rbx $45.1:r15 
  .loc 7 180 64
  # $46.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r14, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $44.1:rbx $45.1:r15 $46.1:r14 
  .loc 7 180 9
  # $47.1: Boolean = call(matches_282, self.1, $44.1, $45.1, $46.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_282
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:rax 
  # jump($47.1, .LABEL__parse_statement_249__33, .LABEL__parse_statement_249__34)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_statement_249__34
.LABEL__parse_statement_249__33:
  .loc 7 181 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  .loc 7 182 22
  # $48.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $48.1:rbx 
  .loc 7 182 43
  # $49.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $48.1:rbx $49.1:r15 
  .loc 7 182 9
  # $50.1: @Token = call(consume_277, self.1, $48.1, $49.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  .loc 7 183 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  .loc 7 184 26
  # $51.1: @Matcher = load_struct_member(self.1, required_struct)
  mov rax, [rbp-8]
  mov rbx, [rax+320]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $51.1:rbx 
  .loc 7 184 13
  # $52.1: Boolean = call(matches_280, self.1, $51.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:rax 
  # jump($52.1, .LABEL__parse_statement_249__35, .LABEL__parse_statement_249__36)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_statement_249__36
.LABEL__parse_statement_249__35:
  .loc 7 185 20
  # $53.1: @AST_Statement = call(parse_struct_251, self.1, expression.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call parse_struct_251
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] $53.1:rax 
  .loc 7 185 13
  # return($53.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] 
.LABEL__parse_statement_249__36:
  .loc 7 187 16
  # $54.1: @AST_Statement = call(parse_function_252, self.1, expression.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call parse_function_252
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] $54.1:rax 
  .loc 7 187 9
  # return($54.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
.LABEL__parse_statement_249__34:
  .loc 7 190 22
  # $55.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $55.1:rbx 
  .loc 7 190 43
  # $56.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $55.1:rbx $56.1:r15 
  .loc 7 190 9
  # $57.1: Boolean = call(matches_281, self.1, $55.1, $56.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:rax 
  # jump($57.1, .LABEL__parse_statement_249__39, .LABEL__parse_statement_249__40)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_statement_249__40
.LABEL__parse_statement_249__39:
  # AST_Variable_Expression.7: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] AST_Variable_Expression.7:rax 
  .loc 7 191 13
  # $58.1: Boolean = call(is_338, expression.1, AST_Variable_Expression.7)
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.7
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:rax 
  # jump($58.1, .LABEL__parse_statement_249__41, .LABEL__parse_statement_249__42)
  test al, al
  mov [rbp-28], al
  jz .LABEL__parse_statement_249__42
.LABEL__parse_statement_249__41:
  .loc 7 192 27
  # expression.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] expression.1:rax 
  .loc 7 193 30
  # variable_name.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rax+16]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx 
  .loc 7 194 13
  # variable_value_type.1: @AST_Type = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax 
  .loc 7 195 13
  # variable_value_expression.1: @AST_Expression = null
  xor r15, r15
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 
  .loc 7 196 13
  # variable_is_external.1: Boolean = false
  mov r14b, 0
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 
  .loc 7 197 30
  # $61.1: @Matcher = load_struct_member(self.1, optional_space)
  mov r13, [rbp-8]
  mov r12, [r13+32]
  # [live values]: self.1:r13:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 
  .loc 7 197 51
  # $62.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r11, [r13+104]
  # [live values]: self.1:r13:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 $62.1:r11 
  .loc 7 197 72
  # $63.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r10, [r13+168]
  # [live values]: self.1:r13:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 $62.1:r11 $63.1:r10 
  .loc 7 197 17
  # $64.1: Boolean = call(matches_282, self.1, $61.1, $62.1, $63.1)
  mov rdi, r13
  mov rsi, r12
  mov rdx, r11
  mov rcx, r10
  mov [rbp-36], rax
  mov [rbp-44], rbx
  mov [rbp-45], r14b
  mov [rbp-53], r15
  call matches_282
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:rax 
  # jump($64.1, .LABEL__parse_statement_249__43, .LABEL__parse_statement_249__45)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_statement_249__45
.LABEL__parse_statement_249__43:
  .loc 7 198 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 199 30
  # $78.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] $78.1:rbx 
  .loc 7 199 51
  # $79.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] $78.1:rbx $79.1:r15 
  .loc 7 199 17
  # $80.1: @Token = call(consume_277, self.1, $78.1, $79.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $80.1
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 200 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 201 45
  # variable_value_expression.3: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:rax:[rbp-53] 
  # jump(.LABEL__parse_statement_249__44)
  mov [rbp-53], rax
.LABEL__parse_statement_249__44:
  # variable_is_external.3: Boolean = phi(variable_is_external.1, variable_is_external.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] 
  # variable_value_expression.4: @AST_Expression = phi(variable_value_expression.3, variable_value_expression.1, variable_value_expression.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] 
  # variable_value_type.3: @AST_Type = phi(variable_value_type.1, variable_value_type.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] 
  .loc 7 219 73
  # $82.1: @Source_Location = load_struct_member(variable_name.1, location)
  mov rax, [rbp-44]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rax:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] $82.1:rbx 
  .loc 7 219 35
  # $83.1: @AST_Variable_Statement = new(AST_Variable_Statement)
  mov [rbp-62], rbx
  mov rdi, 41
  call malloc
  lea rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] $82.1:[rbp-62] $83.1:rax 
  # store_struct_member($83.1, location, $82.1)
  mov rbx, [rbp-62]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] $83.1:rax 
  # store_struct_member($83.1, name, variable_name.1)
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] $83.1:rax 
  # store_struct_member($83.1, type, variable_value_type.3)
  mov r15, [rbp-36]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: variable_value_type.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] $83.1:rax 
  # store_struct_member($83.1, value_expression, variable_value_expression.4)
  mov r15, [rbp-53]
  mov QWORD PTR [rax+32], r15
  # [discarded value]: variable_value_expression.4
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] $83.1:rax 
  # store_struct_member($83.1, is_external, variable_is_external.3)
  mov r15b, [rbp-45]
  mov BYTE PTR [rax+40], r15b
  # [discarded value]: variable_is_external.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] $83.1:rax 
  .loc 7 219 13
  # variable_statement.1: @AST_Variable_Statement = $83.1
  mov [rbp-62], rax
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:rax 
  .loc 7 220 17
  # $84.1: Int = load_struct_member(self.1, current_alignment)
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:r15:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:rax $84.1:r14 
  .loc 7 220 17
  # $85.1: Boolean = $84.1 == 0
  cmp r14, 0
  sete r13b
  # [discarded value]: $84.1
  # [live values]: self.1:r15:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:rax $85.1:r13 
  # jump($85.1, .LABEL__parse_statement_249__51, .LABEL__parse_statement_249__52)
  test r13b, r13b
  mov [rbp-62], rax
  mov [rbp-63], r13b
  jz .LABEL__parse_statement_249__52
.LABEL__parse_statement_249__51:
  .loc 7 221 17
  # $86.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] $86.1:rbx 
  .loc 7 221 17
  # $87.1: @List = load_struct_member($86.1, global_variables)
  mov r15, [rbx+16]
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] $87.1:r15 
  .loc 7 221 17
  # call(append_313, $87.1, variable_statement.1)
  mov rdi, r15
  mov rsi, [rbp-62]
  call append_313
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] 
  # jump(.LABEL__parse_statement_249__52)
.LABEL__parse_statement_249__52:
  .loc 7 223 13
  # return(variable_statement.1)
  mov rax, [rbp-62]
  jmp .LABEL__parse_statement_249__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] 
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] 
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] 
  # [discarded value]: variable_value_expression.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
.LABEL__parse_statement_249__45:
  .loc 7 203 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 204 30
  # $65.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] $65.1:rbx 
  .loc 7 204 17
  # $66.1: @Token = call(consume_276, self.1, $65.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 205 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 206 39
  # variable_value_type.2: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:rax:[rbp-36] 
  .loc 7 207 34
  # $68.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:rax:[rbp-36] $68.1:r15 
  .loc 7 207 55
  # $69.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:rax:[rbp-36] $68.1:r15 $69.1:r14 
  .loc 7 207 21
  # $70.1: Boolean = call(matches_281, self.1, $68.1, $69.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-36], rax
  call matches_281
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:rax 
  # jump($70.1, .LABEL__parse_statement_249__46, .LABEL__parse_statement_249__44)
  test al, al
  mov [rbp-55], al
  jz .LABEL__parse_statement_249__44
.LABEL__parse_statement_249__46:
  .loc 7 208 21
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  .loc 7 209 34
  # $71.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $71.1:rbx 
  .loc 7 209 21
  # $72.1: @Token = call(consume_276, self.1, $71.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  .loc 7 210 21
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  .loc 7 211 38
  # $73.1: @Matcher = load_struct_member(self.1, required_external)
  mov rax, [rbp-8]
  mov rbx, [rax+184]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $73.1:rbx 
  .loc 7 211 25
  # $74.1: Boolean = call(matches_280, self.1, $73.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:rax 
  # jump($74.1, .LABEL__parse_statement_249__48, .LABEL__parse_statement_249__50)
  test al, al
  mov [rbp-56], al
  jz .LABEL__parse_statement_249__50
.LABEL__parse_statement_249__48:
  .loc 7 212 38
  # $76.1: @Matcher = load_struct_member(self.1, required_external)
  mov rax, [rbp-8]
  mov rbx, [rax+184]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] $76.1:rbx 
  .loc 7 212 25
  # $77.1: @Token = call(consume_276, self.1, $76.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $77.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] 
  .loc 7 213 25
  # variable_is_external.2: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_is_external.2:rax:[rbp-45] 
  # jump(.LABEL__parse_statement_249__44)
  mov [rbp-45], al
  jmp .LABEL__parse_statement_249__44
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_is_external.2:[rbp-45] 
  # [discarded value]: variable_is_external.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] 
.LABEL__parse_statement_249__50:
  .loc 7 215 53
  # variable_value_expression.2: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_value_expression.2:rax:[rbp-53] 
  # jump(.LABEL__parse_statement_249__44)
  mov [rbp-53], rax
  jmp .LABEL__parse_statement_249__44
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_value_expression.2:[rbp-53] 
  # [discarded value]: variable_value_expression.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] 
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] 
  # [discarded value]: variable_value_type.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] 
  # [discarded value]: variable_is_external.1
  # [discarded value]: variable_value_expression.1
  # [discarded value]: variable_value_type.1
  # [discarded value]: variable_name.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] 
.LABEL__parse_statement_249__42:
  .loc 7 225 15
  # $88.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] $88.1:rbx 
  .loc 7 225 9
  # call(abort_309, $88.1, "Cannot use expression as variable name")
  mov rdi, rbx
  lea rsi, .LABEL__string_316[rip] # "Cannot use expression as variable name"
  call abort_309
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] 
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] 
.LABEL__parse_statement_249__40:
  .loc 7 228 22
  # $89.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $89.1:rbx 
  .loc 7 228 43
  # $90.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $89.1:rbx $90.1:r15 
  .loc 7 228 9
  # $91.1: Boolean = call(matches_281, self.1, $89.1, $90.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $90.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:rax 
  # jump($91.1, .LABEL__parse_statement_249__54, .LABEL__parse_statement_249__55)
  test al, al
  mov [rbp-28], al
  jz .LABEL__parse_statement_249__55
.LABEL__parse_statement_249__54:
  .loc 7 229 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] 
  .loc 7 230 34
  # $92.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] $92.1:rbx 
  .loc 7 230 21
  # operator.1: @Other_Token = call(consume_276, self.1, $92.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:rax 
  .loc 7 231 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-36], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] 
  .loc 7 232 56
  # $95.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $95.1:rbx 
  .loc 7 232 150
  # $96.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  mov [rbp-44], rbx
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $95.1:[rbp-44] $96.1:rax 
  .loc 7 232 16
  # $97.1: @AST_Assignment_Statement = new(AST_Assignment_Statement)
  mov [rbp-52], rax
  mov rdi, 40
  call malloc
  lea rbx, AST_Assignment_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $95.1:[rbp-44] $96.1:[rbp-52] $97.1:rax 
  # store_struct_member($97.1, location, $95.1)
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $96.1:[rbp-52] $97.1:rax 
  # store_struct_member($97.1, storage_expression, expression.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rbx:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $96.1:[rbp-52] $97.1:rax 
  # store_struct_member($97.1, operator, operator.1)
  mov r15, [rbp-36]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: operator.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rbx:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] $96.1:[rbp-52] $97.1:rax 
  # store_struct_member($97.1, value_expression, $96.1)
  mov r15, [rbp-52]
  mov QWORD PTR [rax+32], r15
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rbx:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] $97.1:rax 
  .loc 7 232 9
  # return($97.1)
  mov [rbp-36], rax
  jmp .LABEL__parse_statement_249__end
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] 
.LABEL__parse_statement_249__55:
  .loc 7 235 5
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_statement_249__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] 
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] 
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] 
.LABEL__parse_statement_249__5:
  .loc 7 142 86
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_file)
  mov rax, [rbp-8]
  mov rbx, [rax+152]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $6.1:rbx 
  .loc 7 142 73
  # $5.2: Boolean = call(matches_280, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.2:rax:[rbp-10] 
  # jump(.LABEL__parse_statement_249__6)
  mov [rbp-10], al
  jmp .LABEL__parse_statement_249__6
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.2:[rbp-10] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statement_249__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statement_249__stack_frame_size: .word 64

  .loc 7 240 1
  .text
parse_include_250:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_include_250__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_include_250__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 241 30
  # $1.1: @Matcher = load_struct_member(self.1, required_include)
  mov rax, [rdi+224]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 241 17
  # $2.1: @Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 241 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 242 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 243 32
  # $4.1: @Matcher = load_struct_member(self.1, required_string_literal)
  mov rax, [rbp-8]
  mov rbx, [rax+312]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 243 19
  # $6.1: @String_Token = call(consume_276, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] $6.1:rax 
  .loc 7 243 18
  # file_path.1: @String = load_struct_member($6.1, value)
  mov rbx, [rax+32]
  # [discarded value]: $6.1
  # [live values]: location.1:[rbp-16] file_path.1:rbx 
  .loc 7 244 12
  # $8.1: @AST_Include_Statement = new(AST_Include_Statement)
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Include_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] file_path.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: file_path.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, file_path, file_path.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: file_path.1
  # [live values]: $8.1:rax 
  .loc 7 244 5
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_include_250__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_include_250__end:
  mov rsp, rbp
  pop rbp
  ret

parse_include_250__stack_frame_size: .word 32

  .loc 7 249 1
  .text
parse_struct_251:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_struct_251__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_struct_251__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  # AST_Variable_Expression.8: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:rdi name_expression.1:rsi AST_Variable_Expression.8:rax 
  .loc 7 250 9
  # $1.1: Boolean = call(is_338, name_expression.1, AST_Variable_Expression.8)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.8
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  .loc 7 250 9
  # $2.1: Boolean = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:rbx 
  # jump($2.1, .LABEL__parse_struct_251__2, .LABEL__parse_struct_251__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__parse_struct_251__3
.LABEL__parse_struct_251__2:
  .loc 7 251 15
  # $3.1: @Source_Location = load_struct_member(name_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] name_expression.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 7 251 9
  # call(abort_309, $3.1, "Cannot use expression as struct name")
  mov rdi, rbx
  lea rsi, .LABEL__string_317[rip] # "Cannot use expression as struct name"
  call abort_309
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__parse_struct_251__3:
  .loc 7 253 21
  # $4.1: @AST_Variable_Expression = name_expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  .loc 7 253 20
  # struct_name.1: @Identifier_Token = load_struct_member($4.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx 
  .loc 7 254 30
  # $6.1: @List = new(List)
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] $6.1:rax 
  .loc 7 254 5
  # struct_init_arguments.1: @List = $6.1
  mov [rbp-33], rax
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:rax 
  .loc 7 255 18
  # $7.1: @Matcher = load_struct_member(self.1, required_struct)
  mov rbx, [rbp-8]
  mov r15, [rbx+320]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:rax $7.1:r15 
  .loc 7 255 5
  # $8.1: @Token = call(consume_276, self.1, $7.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-33], rax
  call consume_276
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] 
  .loc 7 256 5
  # base_type.1: @AST_Type = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:rax 
  .loc 7 257 22
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:rax $9.1:r15 
  .loc 7 257 43
  # $10.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r14, [rbx+104]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:rax $9.1:r15 $10.1:r14 
  .loc 7 257 9
  # $11.1: Boolean = call(matches_281, self.1, $9.1, $10.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-41], rax
  call matches_281
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:rax 
  # jump($11.1, .LABEL__parse_struct_251__4, .LABEL__parse_struct_251__5)
  test al, al
  mov [rbp-42], al
  jz .LABEL__parse_struct_251__5
.LABEL__parse_struct_251__4:
  .loc 7 258 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  .loc 7 259 22
  # $12.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] $12.1:rbx 
  .loc 7 259 9
  # $13.1: @Token = call(consume_276, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  .loc 7 260 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  .loc 7 261 21
  # base_type.2: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:rax:[rbp-41] 
  .loc 7 262 26
  # $15.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:rax:[rbp-41] $15.1:r15 
  .loc 7 262 47
  # $16.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov r14, [rbx+280]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:rax:[rbp-41] $15.1:r15 $16.1:r14 
  .loc 7 262 13
  # $17.1: Boolean = call(matches_281, self.1, $15.1, $16.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-41], rax
  call matches_281
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:rax 
  # jump($17.1, .LABEL__parse_struct_251__6, .LABEL__parse_struct_251__5)
  test al, al
  mov [rbp-43], al
  jz .LABEL__parse_struct_251__5
.LABEL__parse_struct_251__6:
  .loc 7 263 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 264 26
  # $18.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] $18.1:rbx 
  .loc 7 264 13
  # $19.1: @Token = call(consume_276, self.1, $18.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 265 13
  # call(parse_call_arguments_270, self.1, struct_init_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  call parse_call_arguments_270
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 266 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 267 26
  # $20.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] $20.1:rbx 
  .loc 7 267 13
  # $21.1: @Token = call(consume_276, self.1, $20.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  # jump(.LABEL__parse_struct_251__5)
.LABEL__parse_struct_251__5:
  # base_type.4: @AST_Type = phi(base_type.1, base_type.2)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] 
  .loc 7 270 5
  # struct_members.1: @List = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:rax 
  .loc 7 271 22
  # $22.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:rax $22.1:r15 
  .loc 7 271 43
  # $23.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov r14, [rbx+264]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:rax $22.1:r15 $23.1:r14 
  .loc 7 271 9
  # $24.1: Boolean = call(matches_281, self.1, $22.1, $23.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-51], rax
  call matches_281
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:rax 
  # jump($24.1, .LABEL__parse_struct_251__8, .LABEL__parse_struct_251__9)
  test al, al
  mov [rbp-52], al
  jz .LABEL__parse_struct_251__9
.LABEL__parse_struct_251__8:
  .loc 7 272 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 273 22
  # $25.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov rax, [rbp-8]
  mov rbx, [rax+264]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $25.1:rbx 
  .loc 7 273 9
  # $26.1: @Token = call(consume_276, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 274 9
  # call(consume_end_of_line_273, self.1)
  mov rdi, [rbp-8]
  call consume_end_of_line_273
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 275 34
  # $27.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $27.1:rbx 
  .loc 7 275 34
  # $28.1: Int = $27.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $28.1:r15 
  .loc 7 275 9
  # store_struct_member(self.1, current_alignment, $28.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 277 26
  # $29.1: @List = new(List)
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $29.1:rax 
  # store_struct_member($29.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $29.1:rax 
  # store_struct_member($29.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $29.1:rax 
  # store_struct_member($29.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $29.1:rax 
  .loc 7 277 9
  # struct_members.2: @List = $29.1
  mov [rbp-60], rax
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:rax:[rbp-51] 
  # jump(.LABEL__parse_struct_251__10)
  mov [rbp-51], rax
.LABEL__parse_struct_251__10:
  .loc 7 279 17
  # $30.1: Boolean = call(consume_empty_line_274, self.1)
  mov rdi, [rbp-8]
  call consume_empty_line_274
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $30.1:rax 
  .loc 7 279 17
  # $31.1: Boolean = $30.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:rbx 
  # jump($31.1, .LABEL__parse_struct_251__12, .LABEL__parse_struct_251__10)
  test bl, bl
  mov [rbp-53], bl
  jz .LABEL__parse_struct_251__10
.LABEL__parse_struct_251__12:
  .loc 7 280 34
  # $32.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $32.1:rbx 
  .loc 7 280 55
  # $33.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov r15, [rax+208]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $32.1:rbx $33.1:r15 
  .loc 7 280 21
  # $34.1: Boolean = call(matches_281, self.1, $32.1, $33.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:rax 
  # jump($34.1, .LABEL__parse_struct_251__14, .LABEL__parse_struct_251__11)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_struct_251__11
.LABEL__parse_struct_251__14:
  .loc 7 281 40
  # $35.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] $35.1:rbx 
  .loc 7 281 40
  # $36.1: Int = $35.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] $36.1:r15 
  .loc 7 281 21
  # call(consume_space_275, self.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 282 56
  # $37.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] $37.1:rbx 
  .loc 7 282 43
  # struct_member_name.1: @Identifier_Token = call(consume_276, self.1, $37.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rax 
  .loc 7 283 21
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-62], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  .loc 7 284 34
  # $40.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] $40.1:rbx 
  .loc 7 284 21
  # $41.1: @Token = call(consume_276, self.1, $40.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  .loc 7 285 21
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  .loc 7 286 49
  # struct_member_value_type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:rax 
  .loc 7 287 38
  # $43.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:rax $43.1:r15 
  .loc 7 287 59
  # $44.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:rax $43.1:r15 $44.1:r14 
  .loc 7 287 25
  # $45.1: Boolean = call(matches_281, self.1, $43.1, $44.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-70], rax
  call matches_281
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:rax 
  # jump($45.1, .LABEL__parse_struct_251__18, .LABEL__parse_struct_251__19)
  test al, al
  mov [rbp-71], al
  jz .LABEL__parse_struct_251__19
.LABEL__parse_struct_251__18:
  .loc 7 288 25
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  .loc 7 289 38
  # $46.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $46.1:rbx 
  .loc 7 289 25
  # $47.1: @Token = call(consume_276, self.1, $46.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  .loc 7 290 25
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  .loc 7 291 45
  # value_expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] value_expression.1:rax 
  .loc 7 292 54
  # $49.1: @AST_Call_Argument = new(AST_Call_Argument)
  mov [rbp-79], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] value_expression.1:[rbp-79] $49.1:rax 
  # store_struct_member($49.1, name, struct_member_name.1)
  mov rbx, [rbp-62]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rbx:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] value_expression.1:[rbp-79] $49.1:rax 
  # store_struct_member($49.1, value_expression, value_expression.1)
  mov r15, [rbp-79]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: value_expression.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rbx:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $49.1:rax 
  .loc 7 292 25
  # call(append_313, struct_init_arguments.1, $49.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  call append_313
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  # jump(.LABEL__parse_struct_251__19)
.LABEL__parse_struct_251__19:
  .loc 7 294 76
  # $50.1: @Source_Location = load_struct_member(struct_member_name.1, location)
  mov rax, [rbp-62]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rax:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $50.1:rbx 
  .loc 7 294 43
  # $51.1: @AST_Struct_Member = new(AST_Struct_Member)
  mov [rbp-79], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $50.1:[rbp-79] $51.1:rax 
  # store_struct_member($51.1, location, $50.1)
  mov rbx, [rbp-79]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $51.1:rax 
  # store_struct_member($51.1, name, struct_member_name.1)
  mov rbx, [rbp-62]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rbx:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $51.1:rax 
  # store_struct_member($51.1, type, struct_member_value_type.1)
  mov r15, [rbp-70]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rbx:[rbp-62] struct_member_value_type.1:r15:[rbp-70] $45.1:[rbp-71] $51.1:rax 
  .loc 7 294 21
  # call(append_313, struct_members.2, $51.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call append_313
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  # jump(.LABEL__parse_struct_251__10)
  jmp .LABEL__parse_struct_251__10
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] 
  # [discarded value]: struct_member_value_type.1
  # [discarded value]: struct_member_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
.LABEL__parse_struct_251__11:
  .loc 7 301 34
  # $52.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $52.1:rbx $34.1:[rbp-54] 
  .loc 7 301 34
  # $53.1: Int = $52.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $52.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $53.1:r15 $34.1:[rbp-54] 
  .loc 7 301 9
  # store_struct_member(self.1, current_alignment, $53.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 302 28
  # $54.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $54.1:rbx $34.1:[rbp-54] 
  .loc 7 302 28
  # $55.1: Int = $54.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $55.1:r15 $34.1:[rbp-54] 
  .loc 7 302 9
  # call(consume_space_275, self.1, $55.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 303 22
  # $56.1: @Matcher = load_struct_member(self.1, required_close_brace)
  mov rax, [rbp-8]
  mov rbx, [rax+80]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $56.1:rbx $34.1:[rbp-54] 
  .loc 7 303 9
  # $57.1: @Token = call(consume_276, self.1, $56.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  # jump(.LABEL__parse_struct_251__9)
.LABEL__parse_struct_251__9:
  # struct_members.4: @List = phi(struct_members.1, struct_members.2)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 305 61
  # $58.1: @Source_Location = load_struct_member(struct_name.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rax:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $58.1:rbx $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 305 25
  # $59.1: @AST_Struct_Statement = new(AST_Struct_Statement)
  mov [rbp-62], rbx
  mov rdi, 48
  call malloc
  lea rbx, AST_Struct_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $58.1:[rbp-62] $59.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  # store_struct_member($59.1, location, $58.1)
  mov rbx, [rbp-62]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $59.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  # store_struct_member($59.1, name, struct_name.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $59.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  # store_struct_member($59.1, base_type, base_type.4)
  mov r15, [rbp-41]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:r15:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $59.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  # store_struct_member($59.1, members, struct_members.4)
  mov r14, [rbp-51]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: struct_members.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:r15:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $59.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  # store_struct_member($59.1, init_arguments, struct_init_arguments.1)
  mov r14, [rbp-33]
  mov QWORD PTR [rax+40], r14
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:r14:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:r15:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $59.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 305 5
  # struct_statement.1: @AST_Struct_Statement = $59.1
  mov [rbp-62], rax
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:r14:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:r15:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 306 5
  # $60.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov r13, [rbp-8]
  mov r12, [r13+8]
  # [live values]: self.1:r13:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:r14:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:r15:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:rax $60.1:r12 $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 306 5
  # $61.1: @List = load_struct_member($60.1, types)
  mov r11, [r12+8]
  # [discarded value]: $60.1
  # [live values]: self.1:r13:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx:[rbp-25] struct_init_arguments.1:r14:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:r15:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:rax $61.1:r11 $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 306 5
  # call(append_313, $61.1, struct_statement.1)
  mov rdi, r11
  mov rsi, rax
  mov [rbp-62], rax
  call append_313
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:[rbp-62] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 307 5
  # return(struct_statement.1)
  mov rax, [rbp-62]
  jmp .LABEL__parse_struct_251__end
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] 
  # [discarded value]: struct_members.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] 
  # [discarded value]: struct_members.1
  # [discarded value]: base_type.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] 
  # [discarded value]: base_type.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] 
  # [discarded value]: base_type.1
  # [discarded value]: struct_init_arguments.1
  # [discarded value]: struct_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: name_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_struct_251__end:
  mov rsp, rbp
  pop rbp
  ret

parse_struct_251__stack_frame_size: .word 80

  .loc 7 312 1
  .text
parse_function_252:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_252__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_252__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  # AST_Variable_Expression.9: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:rdi name_expression.1:rsi AST_Variable_Expression.9:rax 
  .loc 7 313 9
  # $1.1: Boolean = call(is_338, name_expression.1, AST_Variable_Expression.9)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.9
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__parse_function_252__2, .LABEL__parse_function_252__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_function_252__3
.LABEL__parse_function_252__2:
  .loc 7 314 27
  # $2.1: @AST_Variable_Expression = name_expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 7 314 26
  # function_name.1: @Identifier_Token = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx 
  .loc 7 315 26
  # function_type.1: @AST_Function_Type = call(parse_function_type_253, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_function_type_253
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:rax 
  .loc 7 317 26
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:rax $5.1:r15 
  .loc 7 317 47
  # $6.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov r14, [rbx+264]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:rax $5.1:r15 $6.1:r14 
  .loc 7 317 13
  # $7.1: Boolean = call(matches_281, self.1, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-33], rax
  call matches_281
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:rax 
  # jump($7.1, .LABEL__parse_function_252__4, .LABEL__parse_function_252__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__parse_function_252__6
.LABEL__parse_function_252__4:
  .loc 7 318 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] 
  .loc 7 319 29
  # function_body.3: @AST_Block_Statement = call(parse_block_255, self.1)
  mov rdi, [rbp-8]
  call parse_block_255
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:rax 
  # jump(.LABEL__parse_function_252__5)
  mov [rbp-42], rax
.LABEL__parse_function_252__5:
  # function_body.4: @AST_Block_Statement = phi(function_body.2, function_body.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] 
  .loc 7 323 69
  # $9.1: @Source_Location = load_struct_member(function_name.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rax:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] $9.1:rbx 
  .loc 7 323 31
  # $10.1: @AST_Function_Statement = new(AST_Function_Statement)
  mov [rbp-50], rbx
  mov rdi, 48
  call malloc
  lea rbx, AST_Function_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] $9.1:[rbp-50] $10.1:rax 
  # store_struct_member($10.1, location, $9.1)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] $10.1:rax 
  # store_struct_member($10.1, name, function_name.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] $10.1:rax 
  # store_struct_member($10.1, type, function_type.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:r15:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] $10.1:rax 
  # store_struct_member($10.1, body, function_body.4)
  mov r14, [rbp-42]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: function_body.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:r15:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] $10.1:rax 
  # store_struct_member($10.1, ir_function, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:r15:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] $10.1:rax 
  .loc 7 323 9
  # function_statement.1: @AST_Function_Statement = $10.1
  mov [rbp-50], rax
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:r15:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:rax 
  .loc 7 324 9
  # $11.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov r14, [rbp-8]
  mov r13, [r14+8]
  # [live values]: self.1:r14:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:r15:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:rax $11.1:r13 
  .loc 7 324 9
  # $12.1: @List = load_struct_member($11.1, functions)
  mov r12, [r13+24]
  # [discarded value]: $11.1
  # [live values]: self.1:r14:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx:[rbp-25] function_type.1:r15:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:rax $12.1:r12 
  .loc 7 324 9
  # call(append_313, $12.1, function_statement.1)
  mov rdi, r12
  mov rsi, rax
  mov [rbp-50], rax
  call append_313
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:[rbp-50] 
  .loc 7 325 9
  # return(function_statement.1)
  mov rax, [rbp-50]
  jmp .LABEL__parse_function_252__end
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] 
  # [discarded value]: function_body.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] 
.LABEL__parse_function_252__6:
  .loc 7 321 13
  # function_body.2: @AST_Block_Statement = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.2:rax:[rbp-42] 
  # jump(.LABEL__parse_function_252__5)
  mov [rbp-42], rax
  jmp .LABEL__parse_function_252__5
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.2:[rbp-42] 
  # [discarded value]: function_body.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] 
  # [discarded value]: function_type.1
  # [discarded value]: function_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__parse_function_252__3:
  .loc 7 327 11
  # $13.1: @Source_Location = load_struct_member(name_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] name_expression.1:rax:[rbp-16] $1.1:[rbp-17] $13.1:rbx 
  .loc 7 327 5
  # call(abort_309, $13.1, "Cannot use expression as function name")
  mov rdi, rbx
  lea rsi, .LABEL__string_318[rip] # "Cannot use expression as function name"
  call abort_309
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: name_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_function_252__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_252__stack_frame_size: .word 64

  .loc 7 332 1
  .text
parse_function_type_253:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_type_253__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_type_253__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 333 30
  # $1.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rdi+280]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 333 17
  # $2.1: @Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 333 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 334 5
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 335 28
  # $4.1: @List = new(List)
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  .loc 7 335 5
  # function_parameters.1: @List = $4.1
  mov [rbp-24], rax
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:rax 
  .loc 7 336 22
  # $5.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rbx, [rbp-8]
  mov r15, [rbx+96]
  # [live values]: self.1:rbx:[rbp-8] location.1:[rbp-16] function_parameters.1:rax $5.1:r15 
  .loc 7 336 9
  # $6.1: Boolean = call(matches_280, self.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call matches_280
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:rax 
  .loc 7 336 9
  # $7.1: Boolean = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:rbx 
  # jump($7.1, .LABEL__parse_function_type_253__2, .LABEL__parse_function_type_253__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__parse_function_type_253__3
.LABEL__parse_function_type_253__2:
  .loc 7 337 36
  # $8.1: @AST_Function_Parameter = call(parse_function_parameter_254, self.1)
  mov rdi, [rbp-8]
  call parse_function_parameter_254
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $8.1:rax 
  .loc 7 337 9
  # call(append_313, function_parameters.1, $8.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_313
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] 
  # jump(.LABEL__parse_function_type_253__4)
.LABEL__parse_function_type_253__4:
  .loc 7 338 29
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $9.1:rbx 
  .loc 7 338 50
  # $10.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $9.1:rbx $10.1:r15 
  .loc 7 338 16
  # $11.1: Boolean = call(matches_281, self.1, $9.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $11.1:rax 
  .loc 7 338 16
  # $12.1: Boolean = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:rbx 
  # jump($12.1, .LABEL__parse_function_type_253__5, .LABEL__parse_function_type_253__3)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__parse_function_type_253__3
.LABEL__parse_function_type_253__5:
  .loc 7 339 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 340 26
  # $13.1: @Matcher = load_struct_member(self.1, required_comma)
  mov rax, [rbp-8]
  mov rbx, [rax+120]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] $13.1:rbx 
  .loc 7 340 13
  # $14.1: @Token = call(consume_276, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 341 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 342 40
  # $15.1: @AST_Function_Parameter = call(parse_function_parameter_254, self.1)
  mov rdi, [rbp-8]
  call parse_function_parameter_254
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] $15.1:rax 
  .loc 7 342 13
  # call(append_313, function_parameters.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_313
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  # jump(.LABEL__parse_function_type_253__4)
  jmp .LABEL__parse_function_type_253__4
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
.LABEL__parse_function_type_253__3:
  .loc 7 345 18
  # $16.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $16.1:rbx $12.1:[rbp-26] 
  .loc 7 345 5
  # $17.1: @Token = call(consume_276, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 346 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 347 18
  # $18.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $18.1:rbx $12.1:[rbp-26] 
  .loc 7 347 40
  # $19.1: @Matcher = load_struct_member(self.1, required_greater_than)
  mov r15, [rax+192]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $18.1:rbx $19.1:r15 $12.1:[rbp-26] 
  .loc 7 347 5
  # $20.1: @Token = call(consume_277, self.1, $18.1, $19.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 348 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 349 29
  # function_return_type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] function_return_type.1:rax $12.1:[rbp-26] 
  .loc 7 350 12
  # $22.1: @AST_Function_Type = new(AST_Function_Type)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Function_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] function_return_type.1:[rbp-34] $22.1:rax $12.1:[rbp-26] 
  # store_struct_member($22.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] function_return_type.1:[rbp-34] $22.1:rax $12.1:[rbp-26] 
  # store_struct_member($22.1, parameters, function_parameters.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] function_parameters.1:r15:[rbp-24] $7.1:[rbp-25] function_return_type.1:[rbp-34] $22.1:rax $12.1:[rbp-26] 
  # store_struct_member($22.1, return_type, function_return_type.1)
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: function_return_type.1
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] function_parameters.1:r15:[rbp-24] $7.1:[rbp-25] $22.1:rax $12.1:[rbp-26] 
  .loc 7 350 5
  # return($22.1)
  mov [rbp-34], rax
  jmp .LABEL__parse_function_type_253__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: function_parameters.1
  # [discarded value]: location.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_function_type_253__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_type_253__stack_frame_size: .word 48

  .loc 7 355 1
  .text
parse_function_parameter_254:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_parameter_254__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_parameter_254__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 356 36
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 356 23
  # parameter_name.1: @Identifier_Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] parameter_name.1:rax 
  .loc 7 357 5
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 358 18
  # $4.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] parameter_name.1:[rbp-16] $4.1:rbx 
  .loc 7 358 5
  # $5.1: @Token = call(consume_276, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 359 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 360 23
  # parameter_type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [discarded value]: self.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:rax 
  .loc 7 361 50
  # $7.1: @Source_Location = load_struct_member(parameter_name.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: parameter_name.1:rbx:[rbp-16] parameter_type.1:rax $7.1:r15 
  .loc 7 361 12
  # $8.1: @AST_Function_Parameter = new(AST_Function_Parameter)
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:[rbp-24] $7.1:[rbp-32] $8.1:rax 
  # store_struct_member($8.1, location, $7.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $7.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, name, parameter_name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: parameter_name.1
  # [live values]: parameter_type.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, type, parameter_type.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: parameter_type.1
  # [live values]: $8.1:rax 
  .loc 7 361 5
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_function_parameter_254__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_function_parameter_254__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_parameter_254__stack_frame_size: .word 32

  .loc 7 366 1
  .text
parse_block_255:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_block_255__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_block_255__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 367 30
  # $1.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov rax, [rdi+264]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 367 17
  # $2.1: @Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 367 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 368 5
  # call(consume_end_of_line_273, self.1)
  mov rdi, [rbp-8]
  mov [rbp-16], rbx
  call consume_end_of_line_273
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 369 30
  # $4.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 369 30
  # $5.1: Int = $4.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $5.1:r15 
  .loc 7 369 5
  # store_struct_member(self.1, current_alignment, $5.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] 
  .loc 7 370 19
  # $6.1: @List = new(List)
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  .loc 7 370 5
  # statements.1: @List = $6.1
  mov [rbp-24], rax
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:rax 
  .loc 7 371 5
  # call(parse_statements_247, self.1, statements.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rax
  call parse_statements_247
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 372 30
  # $7.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $7.1:rbx 
  .loc 7 372 30
  # $8.1: Int = $7.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $8.1:r15 
  .loc 7 372 5
  # store_struct_member(self.1, current_alignment, $8.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 373 24
  # $9.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $9.1:rbx 
  .loc 7 373 24
  # $10.1: Int = $9.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $10.1:r15 
  .loc 7 373 5
  # call(consume_space_275, self.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 374 18
  # $11.1: @Matcher = load_struct_member(self.1, required_close_brace)
  mov rax, [rbp-8]
  mov rbx, [rax+80]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $11.1:rbx 
  .loc 7 374 5
  # $12.1: @Token = call(consume_276, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 375 12
  # $13.1: @AST_Block_Statement = new(AST_Block_Statement)
  mov rdi, 24
  call malloc
  lea rbx, AST_Block_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] statements.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: statements.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, statements, statements.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: statements.1
  # [live values]: $13.1:rax 
  .loc 7 375 5
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_block_255__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__parse_block_255__end:
  mov rsp, rbp
  pop rbp
  ret

parse_block_255__stack_frame_size: .word 32

  .loc 7 380 1
  .text
parse_if_256:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_if_256__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_if_256__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 381 30
  # $1.1: @Matcher = load_struct_member(self.1, required_if)
  mov rax, [rdi+216]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 381 17
  # $2.1: @Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 381 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 382 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 383 18
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 383 5
  # $5.1: @Token = call(consume_276, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 384 5
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 385 29
  # condition_expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  .loc 7 386 5
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 387 18
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] $7.1:rbx 
  .loc 7 387 5
  # $8.1: @Token = call(consume_276, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 388 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 389 23
  # true_statement.1: @AST_Block_Statement = call(parse_block_255, self.1)
  mov rdi, [rbp-8]
  call parse_block_255
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax 
  .loc 7 390 5
  # false_statement.1: @AST_Statement = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx 
  .loc 7 391 22
  # $10.1: @Matcher = load_struct_member(self.1, optional_space)
  mov r15, [rbp-8]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $10.1:r14 
  .loc 7 391 43
  # $11.1: @Matcher = load_struct_member(self.1, required_else)
  mov r13, [r15+144]
  # [live values]: self.1:r15:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $10.1:r14 $11.1:r13 
  .loc 7 391 9
  # $12.1: Boolean = call(matches_281, self.1, $10.1, $11.1)
  mov rdi, r15
  mov rsi, r14
  mov rdx, r13
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call matches_281
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:rax 
  # jump($12.1, .LABEL__parse_if_256__2, .LABEL__parse_if_256__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__parse_if_256__3
.LABEL__parse_if_256__2:
  .loc 7 392 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  .loc 7 393 22
  # $13.1: @Matcher = load_struct_member(self.1, required_else)
  mov rax, [rbp-8]
  mov rbx, [rax+144]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $13.1:rbx 
  .loc 7 393 9
  # $14.1: @Token = call(consume_276, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  .loc 7 394 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  .loc 7 395 26
  # $15.1: @Matcher = load_struct_member(self.1, required_if)
  mov rax, [rbp-8]
  mov rbx, [rax+216]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $15.1:rbx 
  .loc 7 395 13
  # $16.1: Boolean = call(matches_280, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:rax 
  # jump($16.1, .LABEL__parse_if_256__4, .LABEL__parse_if_256__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__parse_if_256__6
.LABEL__parse_if_256__4:
  .loc 7 396 31
  # false_statement.3: @AST_Statement = call(parse_if_256, self.1)
  mov rdi, [rbp-8]
  call parse_if_256
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.3:rax:[rbp-40] 
  # jump(.LABEL__parse_if_256__3)
  mov [rbp-40], rax
.LABEL__parse_if_256__3:
  # false_statement.4: @AST_Statement = phi(false_statement.1, false_statement.3, false_statement.2)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.4:[rbp-40] false_statement.3:[rbp-40] 
  .loc 7 401 12
  # $19.1: @AST_If_Statement = new(AST_If_Statement)
  mov rdi, 40
  call malloc
  lea rbx, AST_If_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, condition_expression, condition_expression.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:r15:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, true_statement, true_statement.1)
  mov r14, [rbp-32]
  mov QWORD PTR [rax+24], r14
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:r15:[rbp-24] true_statement.1:r14:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, false_statement, false_statement.4)
  mov r13, [rbp-40]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: false_statement.4
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:r15:[rbp-24] true_statement.1:r14:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] $19.1:rax false_statement.3:[rbp-40] 
  .loc 7 401 5
  # return($19.1)
  mov [rbp-50], rax
  jmp .LABEL__parse_if_256__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.3:[rbp-40] 
  # [discarded value]: false_statement.3
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] 
.LABEL__parse_if_256__6:
  .loc 7 398 31
  # false_statement.2: @AST_Statement = call(parse_block_255, self.1)
  mov rdi, [rbp-8]
  call parse_block_255
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.2:rax:[rbp-40] 
  # jump(.LABEL__parse_if_256__3)
  mov [rbp-40], rax
  jmp .LABEL__parse_if_256__3
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.2:[rbp-40] 
  # [discarded value]: false_statement.2
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [discarded value]: false_statement.1
  # [discarded value]: true_statement.1
  # [discarded value]: condition_expression.1
  # [discarded value]: location.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_if_256__end:
  mov rsp, rbp
  pop rbp
  ret

parse_if_256__stack_frame_size: .word 64

  .loc 7 406 1
  .text
parse_loop_257:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_loop_257__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_loop_257__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 407 30
  # $1.1: @Matcher = load_struct_member(self.1, required_loop)
  mov rax, [rdi+248]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 407 17
  # $2.1: @Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 407 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 408 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 409 19
  # loop_block.1: @AST_Block_Statement = call(parse_block_255, self.1)
  mov rdi, [rbp-8]
  call parse_block_255
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] loop_block.1:rax 
  .loc 7 410 12
  # $5.1: @AST_Loop_Statement = new(AST_Loop_Statement)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Loop_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] loop_block.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: loop_block.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, block, loop_block.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: loop_block.1
  # [live values]: $5.1:rax 
  .loc 7 410 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_loop_257__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__parse_loop_257__end:
  mov rsp, rbp
  pop rbp
  ret

parse_loop_257__stack_frame_size: .word 32

  .loc 7 415 1
  .text
parse_while_258:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_while_258__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_while_258__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 416 30
  # $1.1: @Matcher = load_struct_member(self.1, required_while)
  mov rax, [rdi+336]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 416 17
  # $2.1: @Token = call(consume_276, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_276
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 416 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 417 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 418 18
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 418 5
  # $5.1: @Token = call(consume_276, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 419 5
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 420 29
  # condition_expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  .loc 7 421 5
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 422 18
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] $7.1:rbx 
  .loc 7 422 5
  # $8.1: @Token = call(consume_276, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 423 5
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 424 19
  # loop_block.1: @AST_Block_Statement = call(parse_block_255, self.1)
  mov rdi, [rbp-8]
  call parse_block_255
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:rax 
  .loc 7 425 12
  # $10.1: @AST_While_Statement = new(AST_While_Statement)
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_While_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: condition_expression.1:[rbp-24] loop_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, condition_expression, condition_expression.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: condition_expression.1
  # [live values]: loop_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, block, loop_block.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: loop_block.1
  # [live values]: $10.1:rax 
  .loc 7 425 5
  # return($10.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_while_258__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__parse_while_258__end:
  mov rsp, rbp
  pop rbp
  ret

parse_while_258__stack_frame_size: .word 32

  .loc 7 433 1
  .text
parse_type_259:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_type_259__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_type_259__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 434 22
  # $1.1: @Matcher = load_struct_member(self.1, required_at)
  mov rax, [rdi+64]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 434 9
  # $2.1: Boolean = call(matches_280, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_280
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__parse_type_259__2, .LABEL__parse_type_259__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_type_259__3
.LABEL__parse_type_259__2:
  .loc 7 435 31
  # $3.1: @Matcher = load_struct_member(self.1, required_at)
  mov rax, [rbp-8]
  mov rbx, [rax+64]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 7 435 18
  # token.1: @Token = call(consume_276, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:rax 
  .loc 7 436 9
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-17], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:[rbp-17] 
  .loc 7 437 17
  # type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:[rbp-17] type.1:rax 
  .loc 7 438 48
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] type.1:rax $6.1:r15 
  .loc 7 438 16
  # $7.1: @AST_Pointer_Type = new(AST_Pointer_Type)
  mov [rbp-17], rax
  mov [rbp-25], r15
  mov rdi, 24
  call malloc
  lea rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] type.1:[rbp-17] $6.1:[rbp-25] $7.1:rax 
  # store_struct_member($7.1, location, $6.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] type.1:[rbp-17] $7.1:rax 
  # store_struct_member($7.1, pointed_type, type.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $7.1:rax 
  .loc 7 438 9
  # return($7.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_type_259__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__parse_type_259__3:
  .loc 7 440 22
  # $8.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $8.1:rbx 
  .loc 7 440 9
  # $9.1: Boolean = call(matches_280, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:rax 
  # jump($9.1, .LABEL__parse_type_259__5, .LABEL__parse_type_259__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_type_259__6
.LABEL__parse_type_259__5:
  .loc 7 441 31
  # $10.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $10.1:rbx 
  .loc 7 441 18
  # token.1: @Token = call(consume_276, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax 
  .loc 7 442 28
  # array_item_type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  mov [rbp-18], rax
  call parse_type_259
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rax 
  .loc 7 443 26
  # $13.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rax $13.1:r15 
  .loc 7 443 47
  # $14.1: @Matcher = load_struct_member(self.1, required_column)
  mov r14, [rbx+112]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rax $13.1:r15 $14.1:r14 
  .loc 7 443 13
  # $15.1: Boolean = call(matches_281, self.1, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-26], rax
  call matches_281
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:rax 
  # jump($15.1, .LABEL__parse_type_259__7, .LABEL__parse_type_259__8)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_type_259__8
.LABEL__parse_type_259__7:
  .loc 7 444 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  .loc 7 445 26
  # $16.1: @Matcher = load_struct_member(self.1, required_column)
  mov rax, [rbp-8]
  mov rbx, [rax+112]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] $16.1:rbx 
  .loc 7 445 13
  # $17.1: @Token = call(consume_276, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  .loc 7 446 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  .loc 7 447 38
  # array_size_expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:rax 
  .loc 7 448 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-35], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] 
  .loc 7 449 26
  # $19.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+88]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $19.1:rbx 
  .loc 7 449 13
  # $20.1: @Token = call(consume_276, self.1, $19.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] 
  .loc 7 450 50
  # $21.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-18]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $21.1:rbx 
  .loc 7 450 20
  # $22.1: @AST_Array_Type = new(AST_Array_Type)
  mov [rbp-43], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $21.1:[rbp-43] $22.1:rax 
  # store_struct_member($22.1, location, $21.1)
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, item_type, array_item_type.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rbx:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, size_expression, array_size_expression.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: array_size_expression.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rbx:[rbp-26] $15.1:[rbp-27] $22.1:rax 
  .loc 7 450 13
  # return($22.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_type_259__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
.LABEL__parse_type_259__8:
  .loc 7 452 46
  # $23.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-18]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] $23.1:rbx 
  .loc 7 452 16
  # $24.1: @AST_Array_Type = new(AST_Array_Type)
  mov [rbp-35], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] $23.1:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, location, $23.1)
  mov rbx, [rbp-35]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] $24.1:rax 
  # store_struct_member($24.1, item_type, array_item_type.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rbx:[rbp-26] $15.1:[rbp-27] $24.1:rax 
  # store_struct_member($24.1, size_expression, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rbx:[rbp-26] $15.1:[rbp-27] $24.1:rax 
  .loc 7 452 9
  # return($24.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_type_259__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] 
  # [discarded value]: array_item_type.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
.LABEL__parse_type_259__6:
  .loc 7 454 22
  # $25.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $25.1:rbx 
  .loc 7 454 9
  # $26.1: Boolean = call(matches_280, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:rax 
  # jump($26.1, .LABEL__parse_type_259__11, .LABEL__parse_type_259__12)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_type_259__12
.LABEL__parse_type_259__11:
  .loc 7 455 16
  # $27.1: @AST_Function_Type = call(parse_function_type_253, self.1)
  mov rdi, [rbp-8]
  call parse_function_type_253
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] $27.1:rax 
  .loc 7 455 9
  # return($27.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_type_259__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] 
.LABEL__parse_type_259__12:
  .loc 7 457 27
  # $28.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] $28.1:rbx 
  .loc 7 457 14
  # token.1: @Identifier_Token = call(consume_276, self.1, $28.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] token.1:rax 
  .loc 7 458 42
  # $31.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] token.1:rax $31.1:rbx 
  .loc 7 458 12
  # $32.1: @AST_Named_Type = new(AST_Named_Type)
  mov [rbp-19], rax
  mov [rbp-27], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Named_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] token.1:[rbp-19] $31.1:[rbp-27] $32.1:rax 
  # store_struct_member($32.1, location, $31.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] token.1:[rbp-19] $32.1:rax 
  # store_struct_member($32.1, name, token.1)
  mov rbx, [rbp-19]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] $32.1:rax 
  .loc 7 458 5
  # return($32.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_type_259__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_type_259__end:
  mov rsp, rbp
  pop rbp
  ret

parse_type_259__stack_frame_size: .word 48

  .loc 7 461 1
  .text
parse_expression_260:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_expression_260__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_expression_260__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 462 12
  # $1.1: @AST_Expression = call(parse_logic_or_expression_261, self.1)
  call parse_logic_or_expression_261
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 462 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_expression_260__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__parse_expression_260__end:
  mov rsp, rbp
  pop rbp
  ret

parse_expression_260__stack_frame_size: .word 16

  .loc 7 467 1
  .text
parse_logic_or_expression_261:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_or_expression_261__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_or_expression_261__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 468 19
  # expression.1: @AST_Expression = call(parse_logic_and_expression_262, self.1)
  mov [rbp-8], rdi
  call parse_logic_and_expression_262
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_logic_or_expression_261__2)
  mov [rbp-16], rax
.LABEL__parse_logic_or_expression_261__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  .loc 7 469 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx 
  .loc 7 469 46
  # $3.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov r15, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 469 74
  # $4.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov r14, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 7 469 12
  # $5.1: Boolean = call(matches_282, self.1, $2.1, $3.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_282
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_logic_or_expression_261__3, .LABEL__parse_logic_or_expression_261__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_logic_or_expression_261__4
.LABEL__parse_logic_or_expression_261__3:
  .loc 7 470 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 471 22
  # $6.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov rax, [rbp-8]
  mov rbx, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 471 50
  # $7.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov r15, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 471 9
  # $8.1: @Token = call(consume_277, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 472 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 473 61
  # $9.1: @Source_Location = load_struct_member(expression.5, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  .loc 7 473 131
  # $10.1: @AST_Expression = call(parse_logic_and_expression_262, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_logic_and_expression_262
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 7 473 22
  # $11.1: @AST_Logic_Or_Expression = new(AST_Logic_Or_Expression)
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Logic_Or_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $9.1:[rbp-25] $10.1:[rbp-33] $11.1:rax 
  # store_struct_member($11.1, location, $9.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-33] $11.1:rax 
  # store_struct_member($11.1, left_expression, expression.5)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-33] $11.1:rax 
  # store_struct_member($11.1, right_expression, $10.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $5.1:[rbp-17] $11.1:rax 
  .loc 7 473 9
  # expression.3: @AST_Expression = $11.1
  mov [rbp-25], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_logic_or_expression_261__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_or_expression_261__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_logic_or_expression_261__4:
  .loc 7 475 5
  # return(expression.5)
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_or_expression_261__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_logic_or_expression_261__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_or_expression_261__stack_frame_size: .word 48

  .loc 7 480 1
  .text
parse_logic_and_expression_262:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_and_expression_262__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_and_expression_262__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 481 19
  # expression.1: @AST_Expression = call(parse_equality_expression_263, self.1)
  mov [rbp-8], rdi
  call parse_equality_expression_263
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_logic_and_expression_262__2)
  mov [rbp-16], rax
.LABEL__parse_logic_and_expression_262__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  .loc 7 482 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx 
  .loc 7 482 46
  # $3.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 482 71
  # $4.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov r14, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 7 482 12
  # $5.1: Boolean = call(matches_282, self.1, $2.1, $3.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_282
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_logic_and_expression_262__3, .LABEL__parse_logic_and_expression_262__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_logic_and_expression_262__4
.LABEL__parse_logic_and_expression_262__3:
  .loc 7 483 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 484 22
  # $6.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 484 47
  # $7.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 484 9
  # $8.1: @Token = call(consume_277, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 485 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 486 62
  # $9.1: @Source_Location = load_struct_member(expression.5, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  .loc 7 486 132
  # $10.1: @AST_Expression = call(parse_equality_expression_263, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_equality_expression_263
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 7 486 22
  # $11.1: @AST_Logic_And_Expression = new(AST_Logic_And_Expression)
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Logic_And_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $9.1:[rbp-25] $10.1:[rbp-33] $11.1:rax 
  # store_struct_member($11.1, location, $9.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-33] $11.1:rax 
  # store_struct_member($11.1, left_expression, expression.5)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-33] $11.1:rax 
  # store_struct_member($11.1, right_expression, $10.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $5.1:[rbp-17] $11.1:rax 
  .loc 7 486 9
  # expression.3: @AST_Expression = $11.1
  mov [rbp-25], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_logic_and_expression_262__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_and_expression_262__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_logic_and_expression_262__4:
  .loc 7 488 5
  # return(expression.5)
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_and_expression_262__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_logic_and_expression_262__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_and_expression_262__stack_frame_size: .word 48

  .loc 7 493 1
  .text
parse_equality_expression_263:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_equality_expression_263__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_equality_expression_263__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 494 19
  # expression.1: @AST_Expression = call(parse_comparison_expression_264, self.1)
  mov [rbp-8], rdi
  call parse_comparison_expression_264
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 495 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  .loc 7 495 43
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  .loc 7 495 65
  # $4.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r13, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 $4.1:r13 
  .loc 7 495 9
  # $6.1: Boolean = call(matches_282, self.1, $2.1, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov rcx, r13
  mov [rbp-16], rax
  call matches_282
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__parse_equality_expression_263__3, .LABEL__parse_equality_expression_263__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_equality_expression_263__2
.LABEL__parse_equality_expression_263__3:
  .loc 7 495 9
  # $6.3: Boolean = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  # jump($6.3, .LABEL__parse_equality_expression_263__4, .LABEL__parse_equality_expression_263__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_equality_expression_263__5
.LABEL__parse_equality_expression_263__4:
  .loc 7 496 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  .loc 7 497 26
  # $11.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $11.1:rbx 
  .loc 7 497 13
  # $12.1: Boolean = call(matches_280, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:rax 
  # jump($12.1, .LABEL__parse_equality_expression_263__6, .LABEL__parse_equality_expression_263__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_equality_expression_263__8
.LABEL__parse_equality_expression_263__6:
  .loc 7 498 26
  # $19.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $19.1:rbx 
  .loc 7 498 48
  # $20.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $19.1:rbx $20.1:r15 
  .loc 7 498 13
  # $21.1: @Token = call(consume_277, self.1, $19.1, $20.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 499 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 500 63
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $22.1:rbx 
  .loc 7 500 133
  # $23.1: @AST_Expression = call(parse_comparison_expression_264, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_comparison_expression_264
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $22.1:[rbp-26] $23.1:rax 
  .loc 7 500 26
  # $24.1: @AST_Equals_Expression = new(AST_Equals_Expression)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $22.1:[rbp-26] $23.1:[rbp-34] $24.1:rax 
  # store_struct_member($24.1, location, $22.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $23.1:[rbp-34] $24.1:rax 
  # store_struct_member($24.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $23.1:[rbp-34] $24.1:rax 
  # store_struct_member($24.1, right_expression, $23.1)
  mov r15, [rbp-34]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $24.1:rax 
  .loc 7 500 13
  # expression.5: @AST_Expression = $24.1
  mov [rbp-26], rax
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_equality_expression_263__5)
  mov [rbp-16], rax
.LABEL__parse_equality_expression_263__5:
  # expression.6: @AST_Expression = phi(expression.5, expression.3, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.6:[rbp-16] expression.5:[rbp-16] 
  .loc 7 507 5
  # return(expression.6)
  mov rax, [rbp-16]
  jmp .LABEL__parse_equality_expression_263__end
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
.LABEL__parse_equality_expression_263__8:
  .loc 7 502 26
  # $13.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  mov rax, [rbp-8]
  mov rbx, [rax+176]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $13.1:rbx 
  .loc 7 502 58
  # $14.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $13.1:rbx $14.1:r15 
  .loc 7 502 13
  # $15.1: @Token = call(consume_277, self.1, $13.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_277
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 503 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 504 67
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $16.1:rbx 
  .loc 7 504 137
  # $17.1: @AST_Expression = call(parse_comparison_expression_264, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_comparison_expression_264
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $16.1:[rbp-26] $17.1:rax 
  .loc 7 504 26
  # $18.1: @AST_Not_Equals_Expression = new(AST_Not_Equals_Expression)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Not_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $16.1:[rbp-26] $17.1:[rbp-34] $18.1:rax 
  # store_struct_member($18.1, location, $16.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $17.1:[rbp-34] $18.1:rax 
  # store_struct_member($18.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $17.1:[rbp-34] $18.1:rax 
  # store_struct_member($18.1, right_expression, $17.1)
  mov r15, [rbp-34]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $18.1:rax 
  .loc 7 504 13
  # expression.3: @AST_Expression = $18.1
  mov [rbp-26], rax
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_equality_expression_263__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_equality_expression_263__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
.LABEL__parse_equality_expression_263__2:
  .loc 7 495 103
  # $7.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx 
  .loc 7 495 124
  # $8.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  mov r15, [rax+176]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx $8.1:r15 
  .loc 7 495 156
  # $9.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx $8.1:r15 $9.1:r14 
  .loc 7 495 90
  # $6.2: Boolean = call(matches_282, self.1, $7.1, $8.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_282
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:rax:[rbp-17] 
  # jump(.LABEL__parse_equality_expression_263__3)
  mov [rbp-17], al
  jmp .LABEL__parse_equality_expression_263__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:[rbp-17] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_equality_expression_263__end:
  mov rsp, rbp
  pop rbp
  ret

parse_equality_expression_263__stack_frame_size: .word 48

  .loc 7 512 1
  .text
parse_comparison_expression_264:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_comparison_expression_264__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_comparison_expression_264__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 513 19
  # expression.1: @AST_Expression = call(parse_addition_expression_265, self.1)
  mov [rbp-8], rdi
  call parse_addition_expression_265
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 514 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  .loc 7 514 43
  # $3.1: @Matcher = load_struct_member(self.1, required_less_than)
  mov r14, [rbx+232]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  .loc 7 514 9
  # $5.1: Boolean = call(matches_281, self.1, $2.1, $3.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-16], rax
  call matches_281
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_comparison_expression_264__3, .LABEL__parse_comparison_expression_264__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_comparison_expression_264__2
.LABEL__parse_comparison_expression_264__3:
  .loc 7 514 9
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, .LABEL__parse_comparison_expression_264__4, .LABEL__parse_comparison_expression_264__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_comparison_expression_264__5
.LABEL__parse_comparison_expression_264__4:
  .loc 7 515 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  .loc 7 516 26
  # $9.1: @Matcher = load_struct_member(self.1, required_less_than)
  mov rax, [rbp-8]
  mov rbx, [rax+232]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $9.1:rbx 
  .loc 7 516 13
  # $10.1: Boolean = call(matches_280, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__parse_comparison_expression_264__6, .LABEL__parse_comparison_expression_264__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_comparison_expression_264__8
.LABEL__parse_comparison_expression_264__6:
  .loc 7 517 26
  # $23.1: @Matcher = load_struct_member(self.1, required_less_than)
  mov rax, [rbp-8]
  mov rbx, [rax+232]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $23.1:rbx 
  .loc 7 517 13
  # $24.1: @Token = call(consume_276, self.1, $23.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
  .loc 7 518 30
  # $25.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $25.1:rbx 
  .loc 7 518 17
  # $26.1: Boolean = call(matches_280, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:rax 
  # jump($26.1, .LABEL__parse_comparison_expression_264__12, .LABEL__parse_comparison_expression_264__14)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_comparison_expression_264__14
.LABEL__parse_comparison_expression_264__12:
  .loc 7 519 30
  # $30.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $30.1:rbx 
  .loc 7 519 17
  # $31.1: @Token = call(consume_276, self.1, $30.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  .loc 7 520 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  .loc 7 521 80
  # $32.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $32.1:rbx 
  .loc 7 521 150
  # $33.1: @AST_Expression = call(parse_addition_expression_265, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_265
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $32.1:[rbp-27] $33.1:rax 
  .loc 7 521 30
  # $34.1: @AST_Less_Than_Or_Equals_Expression = new(AST_Less_Than_Or_Equals_Expression)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Less_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $32.1:[rbp-27] $33.1:[rbp-35] $34.1:rax 
  # store_struct_member($34.1, location, $32.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $33.1:[rbp-35] $34.1:rax 
  # store_struct_member($34.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $33.1:[rbp-35] $34.1:rax 
  # store_struct_member($34.1, right_expression, $33.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $34.1:rax 
  .loc 7 521 17
  # expression.9: @AST_Expression = $34.1
  mov [rbp-27], rax
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.9:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_264__5)
  mov [rbp-16], rax
.LABEL__parse_comparison_expression_264__5:
  # expression.10: @AST_Expression = phi(expression.5, expression.3, expression.9, expression.7, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] expression.10:[rbp-16] $26.1:[rbp-19] expression.9:[rbp-16] 
  .loc 7 538 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_comparison_expression_264__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.9:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
.LABEL__parse_comparison_expression_264__14:
  .loc 7 523 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  .loc 7 524 70
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $27.1:rbx 
  .loc 7 524 140
  # $28.1: @AST_Expression = call(parse_addition_expression_265, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_265
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $27.1:[rbp-27] $28.1:rax 
  .loc 7 524 30
  # $29.1: @AST_Less_Than_Expression = new(AST_Less_Than_Expression)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Less_Than_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $27.1:[rbp-27] $28.1:[rbp-35] $29.1:rax 
  # store_struct_member($29.1, location, $27.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $28.1:[rbp-35] $29.1:rax 
  # store_struct_member($29.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $28.1:[rbp-35] $29.1:rax 
  # store_struct_member($29.1, right_expression, $28.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $29.1:rax 
  .loc 7 524 17
  # expression.7: @AST_Expression = $29.1
  mov [rbp-27], rax
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.7:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_264__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_264__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
.LABEL__parse_comparison_expression_264__8:
  .loc 7 527 26
  # $11.1: @Matcher = load_struct_member(self.1, required_greater_than)
  mov rax, [rbp-8]
  mov rbx, [rax+192]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $11.1:rbx 
  .loc 7 527 13
  # $12.1: @Token = call(consume_276, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
  .loc 7 528 30
  # $13.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $13.1:rbx 
  .loc 7 528 17
  # $14.1: Boolean = call(matches_280, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:rax 
  # jump($14.1, .LABEL__parse_comparison_expression_264__9, .LABEL__parse_comparison_expression_264__11)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_comparison_expression_264__11
.LABEL__parse_comparison_expression_264__9:
  .loc 7 529 30
  # $18.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $18.1:rbx 
  .loc 7 529 17
  # $19.1: @Token = call(consume_276, self.1, $18.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  .loc 7 530 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  .loc 7 531 83
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $20.1:rbx 
  .loc 7 531 153
  # $21.1: @AST_Expression = call(parse_addition_expression_265, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_265
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $20.1:[rbp-27] $21.1:rax 
  .loc 7 531 30
  # $22.1: @AST_Greater_Than_Or_Equals_Expression = new(AST_Greater_Than_Or_Equals_Expression)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Greater_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $20.1:[rbp-27] $21.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, location, $20.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $21.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $21.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, right_expression, $21.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $22.1:rax 
  .loc 7 531 17
  # expression.5: @AST_Expression = $22.1
  mov [rbp-27], rax
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_264__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_264__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
.LABEL__parse_comparison_expression_264__11:
  .loc 7 533 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  .loc 7 534 73
  # $15.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $15.1:rbx 
  .loc 7 534 143
  # $16.1: @AST_Expression = call(parse_addition_expression_265, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_265
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $15.1:[rbp-27] $16.1:rax 
  .loc 7 534 30
  # $17.1: @AST_Greater_Than_Expression = new(AST_Greater_Than_Expression)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Greater_Than_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $15.1:[rbp-27] $16.1:[rbp-35] $17.1:rax 
  # store_struct_member($17.1, location, $15.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $16.1:[rbp-35] $17.1:rax 
  # store_struct_member($17.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $16.1:[rbp-35] $17.1:rax 
  # store_struct_member($17.1, right_expression, $16.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $17.1:rax 
  .loc 7 534 17
  # expression.3: @AST_Expression = $17.1
  mov [rbp-27], rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_264__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_264__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_264__2:
  .loc 7 514 84
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 514 105
  # $7.1: @Matcher = load_struct_member(self.1, required_greater_than)
  mov r15, [rax+192]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 514 71
  # $5.2: Boolean = call(matches_281, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__parse_comparison_expression_264__3)
  mov [rbp-17], al
  jmp .LABEL__parse_comparison_expression_264__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_comparison_expression_264__end:
  mov rsp, rbp
  pop rbp
  ret

parse_comparison_expression_264__stack_frame_size: .word 48

  .loc 7 543 1
  .text
parse_addition_expression_265:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_addition_expression_265__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_addition_expression_265__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 544 19
  # expression.1: @AST_Expression = call(parse_multiplication_expression_266, self.1)
  mov [rbp-8], rdi
  call parse_multiplication_expression_266
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_addition_expression_265__2)
  mov [rbp-16], rax
.LABEL__parse_addition_expression_265__2:
  # expression.8: @AST_Expression = phi(expression.1, expression.5, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] 
  .loc 7 545 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $2.1:rbx 
  .loc 7 545 46
  # $3.1: @Matcher = load_struct_member(self.1, required_plus)
  mov r15, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 545 12
  # $5.1: Boolean = call(matches_281, self.1, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_addition_expression_265__6, .LABEL__parse_addition_expression_265__5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_addition_expression_265__5
.LABEL__parse_addition_expression_265__6:
  .loc 7 545 12
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, .LABEL__parse_addition_expression_265__3, .LABEL__parse_addition_expression_265__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_addition_expression_265__4
.LABEL__parse_addition_expression_265__3:
  .loc 7 546 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  .loc 7 548 26
  # $9.1: @Matcher = load_struct_member(self.1, required_plus)
  mov rax, [rbp-8]
  mov rbx, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $9.1:rbx $5.3:[rbp-17] 
  .loc 7 548 13
  # $10.1: Boolean = call(matches_280, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:rax $5.3:[rbp-17] 
  # jump($10.1, .LABEL__parse_addition_expression_265__7, .LABEL__parse_addition_expression_265__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_addition_expression_265__9
.LABEL__parse_addition_expression_265__7:
  .loc 7 549 26
  # $16.1: @Matcher = load_struct_member(self.1, required_plus)
  mov rax, [rbp-8]
  mov rbx, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $16.1:rbx 
  .loc 7 549 13
  # $17.1: @Token = call(consume_276, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 550 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 551 60
  # $18.1: @Source_Location = load_struct_member(expression.8, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:rbx 
  .loc 7 551 130
  # $19.1: @AST_Expression = call(parse_multiplication_expression_266, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_multiplication_expression_266
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:[rbp-26] $19.1:rax 
  .loc 7 551 26
  # $20.1: @AST_Add_Expression = new(AST_Add_Expression)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Add_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:[rbp-26] $19.1:[rbp-34] $20.1:rax 
  # store_struct_member($20.1, location, $18.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-34] $20.1:rax 
  # store_struct_member($20.1, left_expression, expression.8)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-34] $20.1:rax 
  # store_struct_member($20.1, right_expression, $19.1)
  mov r15, [rbp-34]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $20.1:rax 
  .loc 7 551 13
  # expression.5: @AST_Expression = $20.1
  mov [rbp-26], rax
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_addition_expression_265__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_265__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
.LABEL__parse_addition_expression_265__9:
  .loc 7 553 26
  # $11.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $11.1:rbx 
  .loc 7 553 13
  # $12.1: @Token = call(consume_276, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 554 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 555 66
  # $13.1: @Source_Location = load_struct_member(expression.8, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:rbx 
  .loc 7 555 136
  # $14.1: @AST_Expression = call(parse_multiplication_expression_266, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_multiplication_expression_266
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:[rbp-26] $14.1:rax 
  .loc 7 555 26
  # $15.1: @AST_Substract_Expression = new(AST_Substract_Expression)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Substract_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:[rbp-26] $14.1:[rbp-34] $15.1:rax 
  # store_struct_member($15.1, location, $13.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $14.1:[rbp-34] $15.1:rax 
  # store_struct_member($15.1, left_expression, expression.8)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $14.1:[rbp-34] $15.1:rax 
  # store_struct_member($15.1, right_expression, $14.1)
  mov r15, [rbp-34]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $15.1:rax 
  .loc 7 555 13
  # expression.3: @AST_Expression = $15.1
  mov [rbp-26], rax
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_addition_expression_265__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_265__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
.LABEL__parse_addition_expression_265__4:
  .loc 7 558 5
  # return(expression.8)
  mov rax, [rbp-16]
  jmp .LABEL__parse_addition_expression_265__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_265__5:
  .loc 7 545 82
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 545 103
  # $7.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov r15, [rax+200]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 545 69
  # $5.2: Boolean = call(matches_281, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__parse_addition_expression_265__6)
  mov [rbp-17], al
  jmp .LABEL__parse_addition_expression_265__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_addition_expression_265__end:
  mov rsp, rbp
  pop rbp
  ret

parse_addition_expression_265__stack_frame_size: .word 48

  .loc 7 563 1
  .text
parse_multiplication_expression_266:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_multiplication_expression_266__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_multiplication_expression_266__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 564 19
  # expression.1: @AST_Expression = call(parse_unary_expression_267, self.1)
  mov [rbp-8], rdi
  call parse_unary_expression_267
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_multiplication_expression_266__2)
  mov [rbp-16], rax
.LABEL__parse_multiplication_expression_266__2:
  # expression.10: @AST_Expression = phi(expression.1, expression.3, expression.7, expression.5)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] 
  .loc 7 565 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $2.1:rbx 
  .loc 7 565 46
  # $3.1: @Matcher = load_struct_member(self.1, required_asterisk)
  mov r15, [rax+56]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 565 12
  # $5.1: Boolean = call(matches_281, self.1, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_multiplication_expression_266__6, .LABEL__parse_multiplication_expression_266__5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_multiplication_expression_266__5
.LABEL__parse_multiplication_expression_266__6:
  .loc 7 565 12
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, .LABEL__parse_multiplication_expression_266__3, .LABEL__parse_multiplication_expression_266__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_multiplication_expression_266__4
.LABEL__parse_multiplication_expression_266__3:
  .loc 7 566 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  .loc 7 567 26
  # $9.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $9.1:rbx $5.3:[rbp-17] 
  .loc 7 567 13
  # $10.1: Boolean = call(matches_280, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:rax $5.3:[rbp-17] 
  # jump($10.1, .LABEL__parse_multiplication_expression_266__7, .LABEL__parse_multiplication_expression_266__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_multiplication_expression_266__9
.LABEL__parse_multiplication_expression_266__7:
  .loc 7 568 26
  # $16.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $16.1:rbx 
  .loc 7 568 13
  # $17.1: @Token = call(consume_276, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 569 30
  # $18.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:rbx 
  .loc 7 569 17
  # $19.1: Boolean = call(matches_280, self.1, $18.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:rax 
  # jump($19.1, .LABEL__parse_multiplication_expression_266__10, .LABEL__parse_multiplication_expression_266__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_multiplication_expression_266__12
.LABEL__parse_multiplication_expression_266__10:
  .loc 7 570 30
  # $23.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $23.1:rbx 
  .loc 7 570 17
  # $24.1: @Token = call(consume_276, self.1, $23.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  .loc 7 571 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  .loc 7 572 67
  # $25.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $25.1:rbx 
  .loc 7 572 137
  # $26.1: @AST_Expression = call(parse_unary_expression_267, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_unary_expression_267
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $25.1:[rbp-27] $26.1:rax 
  .loc 7 572 30
  # $27.1: @AST_Modulo_Expression = new(AST_Modulo_Expression)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Modulo_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $25.1:[rbp-27] $26.1:[rbp-35] $27.1:rax 
  # store_struct_member($27.1, location, $25.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $26.1:[rbp-35] $27.1:rax 
  # store_struct_member($27.1, left_expression, expression.10)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $26.1:[rbp-35] $27.1:rax 
  # store_struct_member($27.1, right_expression, $26.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $27.1:rax 
  .loc 7 572 17
  # expression.7: @AST_Expression = $27.1
  mov [rbp-27], rax
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.7:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_266__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_266__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
.LABEL__parse_multiplication_expression_266__12:
  .loc 7 574 17
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  .loc 7 575 67
  # $20.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $20.1:rbx 
  .loc 7 575 137
  # $21.1: @AST_Expression = call(parse_unary_expression_267, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_unary_expression_267
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $20.1:[rbp-27] $21.1:rax 
  .loc 7 575 30
  # $22.1: @AST_Divide_Expression = new(AST_Divide_Expression)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Divide_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $20.1:[rbp-27] $21.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, location, $20.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $21.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, left_expression, expression.10)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $21.1:[rbp-35] $22.1:rax 
  # store_struct_member($22.1, right_expression, $21.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $22.1:rax 
  .loc 7 575 17
  # expression.5: @AST_Expression = $22.1
  mov [rbp-27], rax
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_266__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_266__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
.LABEL__parse_multiplication_expression_266__9:
  .loc 7 578 26
  # $11.1: @Matcher = load_struct_member(self.1, required_asterisk)
  mov rax, [rbp-8]
  mov rbx, [rax+56]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $11.1:rbx 
  .loc 7 578 13
  # $12.1: @Token = call(consume_276, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 579 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 580 65
  # $13.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:rbx 
  .loc 7 580 135
  # $14.1: @AST_Expression = call(parse_unary_expression_267, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_unary_expression_267
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:[rbp-26] $14.1:rax 
  .loc 7 580 26
  # $15.1: @AST_Multiply_Expression = new(AST_Multiply_Expression)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Multiply_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:[rbp-26] $14.1:[rbp-34] $15.1:rax 
  # store_struct_member($15.1, location, $13.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $14.1:[rbp-34] $15.1:rax 
  # store_struct_member($15.1, left_expression, expression.10)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $14.1:[rbp-34] $15.1:rax 
  # store_struct_member($15.1, right_expression, $14.1)
  mov r15, [rbp-34]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $15.1:rax 
  .loc 7 580 13
  # expression.3: @AST_Expression = $15.1
  mov [rbp-26], rax
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_266__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_266__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
.LABEL__parse_multiplication_expression_266__4:
  .loc 7 583 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_multiplication_expression_266__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_266__5:
  .loc 7 565 86
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 565 107
  # $7.1: @Matcher = load_struct_member(self.1, required_slash)
  mov r15, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 565 73
  # $5.2: Boolean = call(matches_281, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__parse_multiplication_expression_266__6)
  mov [rbp-17], al
  jmp .LABEL__parse_multiplication_expression_266__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_multiplication_expression_266__end:
  mov rsp, rbp
  pop rbp
  ret

parse_multiplication_expression_266__stack_frame_size: .word 48

  .loc 7 588 1
  .text
parse_unary_expression_267:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_unary_expression_267__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_unary_expression_267__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 589 22
  # $1.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rdi+200]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 589 9
  # $2.1: Boolean = call(matches_280, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_280
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__parse_unary_expression_267__2, .LABEL__parse_unary_expression_267__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_unary_expression_267__3
.LABEL__parse_unary_expression_267__2:
  .loc 7 590 34
  # $3.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 7 590 21
  # $4.1: @Token = call(consume_276, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $4.1:rax 
  .loc 7 590 21
  # location.1: @Source_Location = load_struct_member($4.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:rbx 
  .loc 7 591 9
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-17], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:[rbp-17] 
  .loc 7 592 76
  # $6.1: @AST_Expression = call(parse_cast_expression_268, self.1)
  mov rdi, [rbp-8]
  call parse_cast_expression_268
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:[rbp-17] $6.1:rax 
  .loc 7 592 16
  # $7.1: @AST_Negate_Expression = new(AST_Negate_Expression)
  mov [rbp-25], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Negate_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:[rbp-17] $6.1:[rbp-25] $7.1:rax 
  # store_struct_member($7.1, location, location.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-25] $7.1:rax 
  # store_struct_member($7.1, expression, $6.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $7.1:rax 
  .loc 7 592 9
  # return($7.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_unary_expression_267__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__parse_unary_expression_267__3:
  .loc 7 594 12
  # $8.1: @AST_Expression = call(parse_cast_expression_268, self.1)
  mov rdi, [rbp-8]
  call parse_cast_expression_268
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $8.1:rax 
  .loc 7 594 5
  # return($8.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_unary_expression_267__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_unary_expression_267__end:
  mov rsp, rbp
  pop rbp
  ret

parse_unary_expression_267__stack_frame_size: .word 32

  .loc 7 599 1
  .text
parse_cast_expression_268:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_cast_expression_268__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_cast_expression_268__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 600 19
  # expression.1: @AST_Expression = call(parse_access_expression_269, self.1)
  mov [rbp-8], rdi
  call parse_access_expression_269
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 601 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  .loc 7 601 43
  # $3.1: @Matcher = load_struct_member(self.1, required_as)
  mov r14, [rbx+48]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  .loc 7 601 9
  # $4.1: Boolean = call(matches_281, self.1, $2.1, $3.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-16], rax
  call matches_281
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, .LABEL__parse_cast_expression_268__2, .LABEL__parse_cast_expression_268__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_cast_expression_268__3
.LABEL__parse_cast_expression_268__2:
  .loc 7 602 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  .loc 7 603 22
  # $5.1: @Matcher = load_struct_member(self.1, required_as)
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 7 603 9
  # $6.1: @Token = call(consume_276, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  .loc 7 604 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  .loc 7 605 17
  # type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] type.1:rax 
  .loc 7 606 51
  # $8.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $4.1:[rbp-17] type.1:rax $8.1:r15 
  .loc 7 606 16
  # $9.1: @AST_Cast_Expression = new(AST_Cast_Expression)
  mov [rbp-25], rax
  mov [rbp-33], r15
  mov rdi, 32
  call malloc
  lea rbx, AST_Cast_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] type.1:[rbp-25] $8.1:[rbp-33] $9.1:rax 
  # store_struct_member($9.1, location, $8.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] type.1:[rbp-25] $9.1:rax 
  # store_struct_member($9.1, value_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $4.1:[rbp-17] type.1:[rbp-25] $9.1:rax 
  # store_struct_member($9.1, type, type.1)
  mov r15, [rbp-25]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $4.1:[rbp-17] $9.1:rax 
  .loc 7 606 9
  # return($9.1)
  mov [rbp-25], rax
  jmp .LABEL__parse_cast_expression_268__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__parse_cast_expression_268__3:
  .loc 7 608 5
  # return(expression.1)
  mov rax, [rbp-16]
  jmp .LABEL__parse_cast_expression_268__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_cast_expression_268__end:
  mov rsp, rbp
  pop rbp
  ret

parse_cast_expression_268__stack_frame_size: .word 48

  .loc 7 613 1
  .text
parse_access_expression_269:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_access_expression_269__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_access_expression_269__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 614 19
  # expression.1: @AST_Expression = call(parse_primary_expression_272, self.1)
  mov [rbp-8], rdi
  call parse_primary_expression_272
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 615 9
  # $2.1: Boolean = expression.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_access_expression_269__4, .LABEL__parse_access_expression_269__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__parse_access_expression_269__3
.LABEL__parse_access_expression_269__4:
  # expression.2: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] 
  .loc 7 617 13
  # old_expression.1: @AST_Expression = expression.2
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax 
  .loc 7 618 30
  # $3.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax $3.1:r15 
  .loc 7 618 51
  # $4.1: @Matcher = load_struct_member(self.1, required_dot)
  mov r14, [rbx+136]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax $3.1:r15 $4.1:r14 
  .loc 7 618 17
  # $5.1: Boolean = call(matches_281, self.1, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-25], rax
  call matches_281
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__parse_access_expression_269__6, .LABEL__parse_access_expression_269__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_access_expression_269__7
.LABEL__parse_access_expression_269__6:
  .loc 7 619 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  .loc 7 620 30
  # $6.1: @Matcher = load_struct_member(self.1, required_dot)
  mov rax, [rbp-8]
  mov rbx, [rax+136]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 7 620 17
  # $7.1: @Token = call(consume_276, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  .loc 7 621 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  .loc 7 622 74
  # $8.1: @Source_Location = load_struct_member(expression.2, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rax:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:rbx 
  .loc 7 622 154
  # $9.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov r15, [rbp-8]
  mov r14, [r15+208]
  # [live values]: self.1:r15:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rax:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:rbx $9.1:r14 
  .loc 7 622 141
  # $11.1: @Identifier_Token = call(consume_276, self.1, $9.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-34], rbx
  call consume_276
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:[rbp-34] $11.1:rax 
  .loc 7 622 30
  # $12.1: @AST_Member_Access_Expression = new(AST_Member_Access_Expression)
  mov [rbp-42], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Member_Access_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:[rbp-34] $11.1:[rbp-42] $12.1:rax 
  # store_struct_member($12.1, location, $8.1)
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $11.1:[rbp-42] $12.1:rax 
  # store_struct_member($12.1, object_expression, expression.2)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rbx:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $11.1:[rbp-42] $12.1:rax 
  # store_struct_member($12.1, member_name, $11.1)
  mov r15, [rbp-42]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rbx:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $12.1:rax 
  .loc 7 622 17
  # expression.4: @AST_Expression = $12.1
  mov [rbp-34], rax
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_269__7)
  mov [rbp-16], rax
.LABEL__parse_access_expression_269__7:
  # expression.11: @AST_Expression = phi(expression.2, expression.4)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] 
  .loc 7 624 30
  # $13.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $13.1:rbx 
  .loc 7 624 51
  # $14.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov r15, [rax+280]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $13.1:rbx $14.1:r15 
  .loc 7 624 17
  # $15.1: Boolean = call(matches_281, self.1, $13.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:rax 
  # jump($15.1, .LABEL__parse_access_expression_269__8, .LABEL__parse_access_expression_269__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_access_expression_269__9
.LABEL__parse_access_expression_269__8:
  .loc 7 625 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  .loc 7 626 30
  # $16.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] $16.1:rbx 
  .loc 7 626 17
  # $17.1: @Token = call(consume_276, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  .loc 7 627 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  .loc 7 628 35
  # $18.1: @List = new(List)
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] $18.1:rax 
  # store_struct_member($18.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] $18.1:rax 
  # store_struct_member($18.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] $18.1:rax 
  # store_struct_member($18.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] $18.1:rax 
  .loc 7 628 17
  # call_arguments.1: @List = $18.1
  mov [rbp-35], rax
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:rax 
  .loc 7 629 34
  # $19.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:rax $19.1:r15 
  .loc 7 629 55
  # $20.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r14, [rbx+96]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:rax $19.1:r15 $20.1:r14 
  .loc 7 629 21
  # $21.1: Boolean = call(matches_281, self.1, $19.1, $20.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-35], rax
  call matches_281
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $21.1:rax 
  .loc 7 629 21
  # $22.1: Boolean = $21.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:rbx 
  # jump($22.1, .LABEL__parse_access_expression_269__10, .LABEL__parse_access_expression_269__11)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__parse_access_expression_269__11
.LABEL__parse_access_expression_269__10:
  .loc 7 630 21
  # call(parse_call_arguments_270, self.1, call_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-35]
  call parse_call_arguments_270
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  # jump(.LABEL__parse_access_expression_269__11)
.LABEL__parse_access_expression_269__11:
  .loc 7 632 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  .loc 7 633 30
  # $23.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $23.1:rbx 
  .loc 7 633 17
  # $24.1: @Token = call(consume_276, self.1, $23.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  .loc 7 634 65
  # $25.1: @Source_Location = load_struct_member(expression.11, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:rax:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $25.1:rbx 
  .loc 7 634 30
  # $26.1: @AST_Call_Expression = new(AST_Call_Expression)
  mov [rbp-44], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Call_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $25.1:[rbp-44] $26.1:rax 
  # store_struct_member($26.1, location, $25.1)
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $26.1:rax 
  # store_struct_member($26.1, callee_expression, expression.11)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:rbx:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $26.1:rax 
  # store_struct_member($26.1, arguments, call_arguments.1)
  mov r15, [rbp-35]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:rbx:[rbp-16] $15.1:[rbp-27] call_arguments.1:r15:[rbp-35] $22.1:[rbp-36] $26.1:rax 
  .loc 7 634 17
  # expression.6: @AST_Expression = $26.1
  mov [rbp-44], rax
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:r15:[rbp-35] $22.1:[rbp-36] expression.6:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_269__9)
  mov [rbp-16], rax
.LABEL__parse_access_expression_269__9:
  # expression.12: @AST_Expression = phi(expression.11, expression.6)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] expression.6:[rbp-16] 
  .loc 7 636 30
  # $27.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $27.1:rbx expression.6:[rbp-16] 
  .loc 7 636 51
  # $28.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov r15, [rax+272]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $27.1:rbx $28.1:r15 expression.6:[rbp-16] 
  .loc 7 636 17
  # $29.1: Boolean = call(matches_281, self.1, $27.1, $28.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:rax expression.6:[rbp-16] 
  # jump($29.1, .LABEL__parse_access_expression_269__12, .LABEL__parse_access_expression_269__13)
  test al, al
  mov [rbp-37], al
  jz .LABEL__parse_access_expression_269__13
.LABEL__parse_access_expression_269__12:
  .loc 7 637 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 638 30
  # $30.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] $30.1:rbx 
  .loc 7 638 17
  # $31.1: @Token = call(consume_276, self.1, $30.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 639 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 640 37
  # index_expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:rax 
  .loc 7 641 17
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-45], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] 
  .loc 7 642 30
  # $33.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+88]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $33.1:rbx 
  .loc 7 642 17
  # $34.1: @Token = call(consume_276, self.1, $33.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] 
  .loc 7 643 73
  # $35.1: @Source_Location = load_struct_member(expression.12, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:rax:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $35.1:rbx 
  .loc 7 643 30
  # $36.1: @AST_Array_Access_Expression = new(AST_Array_Access_Expression)
  mov [rbp-53], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Access_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $35.1:[rbp-53] $36.1:rax 
  # store_struct_member($36.1, location, $35.1)
  mov rbx, [rbp-53]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $36.1:rax 
  # store_struct_member($36.1, array_expression, expression.12)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:rbx:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $36.1:rax 
  # store_struct_member($36.1, index_expression, index_expression.1)
  mov r15, [rbp-45]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: index_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:rbx:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] $36.1:rax 
  .loc 7 643 17
  # expression.8: @AST_Expression = $36.1
  mov [rbp-45], rax
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_269__13)
  mov [rbp-16], rax
.LABEL__parse_access_expression_269__13:
  # expression.9: @AST_Expression = phi(expression.12, expression.8)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  .loc 7 645 17
  # $37.1: Boolean = expression.9 == old_expression.1
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-25]
  sete bl
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:rax:[rbp-16] $37.1:rbx 
  # jump($37.1, .LABEL__parse_access_expression_269__3, .LABEL__parse_access_expression_269__4)
  test bl, bl
  mov [rbp-38], bl
  jz .LABEL__parse_access_expression_269__4
.LABEL__parse_access_expression_269__3:
  # expression.10: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.10:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] $37.1:[rbp-38] 
  .loc 7 650 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_access_expression_269__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] $37.1:[rbp-38] 
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [discarded value]: expression.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.6:[rbp-16] 
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [discarded value]: expression.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] 
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] 
  # [discarded value]: old_expression.1
  # [discarded value]: expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_access_expression_269__end:
  mov rsp, rbp
  pop rbp
  ret

parse_access_expression_269__stack_frame_size: .word 64

  .loc 7 656 1
  .text
parse_call_arguments_270:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_arguments_270__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_arguments_270__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 7 657 9
  # $1.1: Boolean = call(matches_end_of_line_279, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call matches_end_of_line_279
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_call_arguments_270__2, .LABEL__parse_call_arguments_270__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_call_arguments_270__4
.LABEL__parse_call_arguments_270__2:
  .loc 7 658 9
  # call(consume_end_of_line_273, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_273
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  .loc 7 659 34
  # $9.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:rbx 
  .loc 7 659 34
  # $10.1: Int = $9.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $10.1:r15 
  .loc 7 659 9
  # store_struct_member(self.1, current_alignment, $10.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # jump(.LABEL__parse_call_arguments_270__8)
.LABEL__parse_call_arguments_270__8:
  .loc 7 660 29
  # $11.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $11.1:rbx 
  .loc 7 660 50
  # $12.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $11.1:rbx $12.1:r15 
  .loc 7 660 16
  # $13.1: Boolean = call(matches_281, self.1, $11.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $13.1:rax 
  .loc 7 660 16
  # $14.1: Boolean = $13.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:rbx 
  # jump($14.1, .LABEL__parse_call_arguments_270__9, .LABEL__parse_call_arguments_270__10)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__parse_call_arguments_270__10
.LABEL__parse_call_arguments_270__9:
  .loc 7 661 32
  # $15.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $15.1:rbx 
  .loc 7 661 32
  # $16.1: Int = $15.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $16.1:r15 
  .loc 7 661 13
  # call(consume_space_275, self.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  .loc 7 662 35
  # $17.1: @AST_Call_Argument = call(parse_call_argument_271, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_271
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $17.1:rax 
  .loc 7 662 13
  # call(append_313, call_arguments.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_313
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  .loc 7 663 13
  # call(consume_end_of_line_273, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_273
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_270__8)
  jmp .LABEL__parse_call_arguments_270__8
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
.LABEL__parse_call_arguments_270__10:
  .loc 7 665 34
  # $18.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $18.1:rbx 
  .loc 7 665 34
  # $19.1: Int = $18.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $19.1:r15 
  .loc 7 665 9
  # store_struct_member(self.1, current_alignment, $19.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  .loc 7 666 28
  # $20.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $20.1:rbx 
  .loc 7 666 28
  # $21.1: Int = $20.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $21.1:r15 
  .loc 7 666 9
  # call(consume_space_275, self.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_270__3)
.LABEL__parse_call_arguments_270__3:
  # return()
  jmp .LABEL__parse_call_arguments_270__end
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__parse_call_arguments_270__4:
  .loc 7 668 31
  # $2.1: @AST_Call_Argument = call(parse_call_argument_271, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_271
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $2.1:rax 
  .loc 7 668 9
  # call(append_313, call_arguments.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_313
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # jump(.LABEL__parse_call_arguments_270__5)
.LABEL__parse_call_arguments_270__5:
  .loc 7 669 29
  # $3.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:rbx 
  .loc 7 669 50
  # $4.1: @Matcher = load_struct_member(self.1, required_comma)
  mov r15, [rax+120]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:rbx $4.1:r15 
  .loc 7 669 16
  # $5.1: Boolean = call(matches_281, self.1, $3.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:rax 
  # jump($5.1, .LABEL__parse_call_arguments_270__6, .LABEL__parse_call_arguments_270__3)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_call_arguments_270__3
.LABEL__parse_call_arguments_270__6:
  .loc 7 670 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  .loc 7 671 26
  # $6.1: @Matcher = load_struct_member(self.1, required_comma)
  mov rax, [rbp-16]
  mov rbx, [rax+120]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] $6.1:rbx 
  .loc 7 671 13
  # $7.1: @Token = call(consume_276, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  .loc 7 672 13
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  .loc 7 673 35
  # $8.1: @AST_Call_Argument = call(parse_call_argument_271, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_271
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] $8.1:rax 
  .loc 7 673 13
  # call(append_313, call_arguments.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_313
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_270__5)
  jmp .LABEL__parse_call_arguments_270__5
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [discarded value]: call_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_arguments_270__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_arguments_270__stack_frame_size: .word 32

  .loc 7 680 1
  .text
parse_call_argument_271:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_argument_271__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_argument_271__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 681 22
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 681 48
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 681 69
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rdi+168]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  .loc 7 681 9
  # $4.1: Boolean = call(matches_282, self.1, $1.1, $2.1, $3.1)
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_282
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__parse_call_argument_271__2, .LABEL__parse_call_argument_271__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_call_argument_271__3
.LABEL__parse_call_argument_271__2:
  .loc 7 682 30
  # $5.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $5.1:rbx 
  .loc 7 682 17
  # name.1: @Identifier_Token = call(consume_276, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:rax 
  .loc 7 683 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-17], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 684 22
  # $8.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] $8.1:rbx 
  .loc 7 684 9
  # $9.1: @Token = call(consume_276, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 685 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 686 18
  # value.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] value.1:rax 
  .loc 7 687 16
  # $11.1: @AST_Call_Argument = new(AST_Call_Argument)
  mov [rbp-25], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] value.1:[rbp-25] $11.1:rax 
  # store_struct_member($11.1, name, name.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax], rbx
  # [discarded value]: name.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] value.1:[rbp-25] $11.1:rax 
  # store_struct_member($11.1, value_expression, value.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $11.1:rax 
  .loc 7 687 9
  # return($11.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_call_argument_271__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
.LABEL__parse_call_argument_271__3:
  .loc 7 689 14
  # value.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] value.1:rax 
  .loc 7 690 12
  # $13.1: @AST_Call_Argument = new(AST_Call_Argument)
  mov [rbp-17], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] value.1:[rbp-17] $13.1:rax 
  # store_struct_member($13.1, name, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] value.1:[rbp-17] $13.1:rax 
  # store_struct_member($13.1, value_expression, value.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $13.1:rax 
  .loc 7 690 5
  # return($13.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_call_argument_271__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_argument_271__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_argument_271__stack_frame_size: .word 32

  .loc 7 704 1
  .text
parse_primary_expression_272:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_primary_expression_272__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_primary_expression_272__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 705 22
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 705 9
  # $2.1: Boolean = call(matches_280, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_280
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__parse_primary_expression_272__2, .LABEL__parse_primary_expression_272__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_primary_expression_272__3
.LABEL__parse_primary_expression_272__2:
  .loc 7 706 31
  # $3.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 7 706 18
  # token.1: @Identifier_Token = call(consume_276, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:rax 
  .loc 7 707 55
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:rax $6.1:rbx 
  .loc 7 707 16
  # $7.1: @AST_Variable_Expression = new(AST_Variable_Expression)
  mov [rbp-17], rax
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Variable_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:[rbp-17] $6.1:[rbp-25] $7.1:rax 
  # store_struct_member($7.1, location, $6.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:[rbp-17] $7.1:rax 
  # store_struct_member($7.1, name, token.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $7.1:rax 
  .loc 7 707 9
  # return($7.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_primary_expression_272__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__parse_primary_expression_272__3:
  .loc 7 709 22
  # $8.1: @Matcher = load_struct_member(self.1, required_literal)
  mov rax, [rbp-8]
  mov rbx, [rax+240]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $8.1:rbx 
  .loc 7 709 9
  # $9.1: Boolean = call(matches_280, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:rax 
  # jump($9.1, .LABEL__parse_primary_expression_272__5, .LABEL__parse_primary_expression_272__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_primary_expression_272__6
.LABEL__parse_primary_expression_272__5:
  .loc 7 710 31
  # $10.1: @Matcher = load_struct_member(self.1, required_literal)
  mov rax, [rbp-8]
  mov rbx, [rax+240]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $10.1:rbx 
  .loc 7 710 18
  # token.1: @Literal_Token = call(consume_276, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax 
  .loc 7 711 54
  # $13.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax $13.1:rbx 
  .loc 7 711 16
  # $14.1: @AST_Literal_Expression = new(AST_Literal_Expression)
  mov [rbp-18], rax
  mov [rbp-26], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Literal_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] $13.1:[rbp-26] $14.1:rax 
  # store_struct_member($14.1, location, $13.1)
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] $14.1:rax 
  # store_struct_member($14.1, literal, token.1)
  mov rbx, [rbp-18]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $14.1:rax 
  .loc 7 711 9
  # return($14.1)
  mov [rbp-18], rax
  jmp .LABEL__parse_primary_expression_272__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
.LABEL__parse_primary_expression_272__6:
  .loc 7 713 22
  # $15.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $15.1:rbx 
  .loc 7 713 9
  # $16.1: Boolean = call(matches_280, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:rax 
  # jump($16.1, .LABEL__parse_primary_expression_272__8, .LABEL__parse_primary_expression_272__9)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_primary_expression_272__9
.LABEL__parse_primary_expression_272__8:
  .loc 7 714 34
  # $17.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $17.1:rbx 
  .loc 7 714 21
  # $18.1: @Token = call(consume_276, self.1, $17.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $18.1:rax 
  .loc 7 714 21
  # location.1: @Source_Location = load_struct_member($18.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:rbx 
  .loc 7 715 9
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-19], rbx
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] 
  .loc 7 716 23
  # expression.1: @AST_Expression = call(parse_expression_260, self.1)
  mov rdi, [rbp-8]
  call parse_expression_260
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:rax 
  .loc 7 717 9
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-27], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] 
  .loc 7 718 22
  # $21.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] $21.1:rbx 
  .loc 7 718 9
  # $22.1: @Token = call(consume_276, self.1, $21.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] 
  .loc 7 719 16
  # $23.1: @AST_Atomic_Expression = new(AST_Atomic_Expression)
  mov rdi, 24
  call malloc
  lea rbx, AST_Atomic_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] $23.1:rax 
  # store_struct_member($23.1, location, location.1)
  mov rbx, [rbp-19]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] expression.1:[rbp-27] $23.1:rax 
  # store_struct_member($23.1, expression, expression.1)
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $23.1:rax 
  .loc 7 719 9
  # return($23.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_primary_expression_272__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] 
.LABEL__parse_primary_expression_272__9:
  .loc 7 721 22
  # $24.1: @Matcher = load_struct_member(self.1, required_new)
  mov rax, [rbp-8]
  mov rbx, [rax+256]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $24.1:rbx 
  .loc 7 721 9
  # $25.1: Boolean = call(matches_280, self.1, $24.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_280
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:rax 
  # jump($25.1, .LABEL__parse_primary_expression_272__11, .LABEL__parse_primary_expression_272__12)
  test al, al
  mov [rbp-12], al
  jz .LABEL__parse_primary_expression_272__12
.LABEL__parse_primary_expression_272__11:
  .loc 7 722 31
  # $26.1: @Matcher = load_struct_member(self.1, required_new)
  mov rax, [rbp-8]
  mov rbx, [rax+256]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] $26.1:rbx 
  .loc 7 722 18
  # token.1: @Token = call(consume_276, self.1, $26.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:rax 
  .loc 7 723 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-20], rax
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] 
  .loc 7 724 17
  # type.1: @AST_Type = call(parse_type_259, self.1)
  mov rdi, [rbp-8]
  call parse_type_259
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:rax 
  .loc 7 725 27
  # $29.1: @List = new(List)
  mov [rbp-28], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] $29.1:rax 
  # store_struct_member($29.1, first_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] $29.1:rax 
  # store_struct_member($29.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] $29.1:rax 
  # store_struct_member($29.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] $29.1:rax 
  .loc 7 725 9
  # call_arguments.1: @List = $29.1
  mov [rbp-36], rax
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:rax 
  .loc 7 726 26
  # $30.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:rax $30.1:r15 
  .loc 7 726 47
  # $31.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov r14, [rbx+280]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:rax $30.1:r15 $31.1:r14 
  .loc 7 726 13
  # $32.1: Boolean = call(matches_281, self.1, $30.1, $31.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-36], rax
  call matches_281
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:rax 
  # jump($32.1, .LABEL__parse_primary_expression_272__13, .LABEL__parse_primary_expression_272__14)
  test al, al
  mov [rbp-37], al
  jz .LABEL__parse_primary_expression_272__14
.LABEL__parse_primary_expression_272__13:
  .loc 7 727 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] 
  .loc 7 728 26
  # $33.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $33.1:rbx 
  .loc 7 728 13
  # $34.1: @Token = call(consume_276, self.1, $33.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] 
  .loc 7 729 30
  # $35.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $35.1:rbx 
  .loc 7 729 51
  # $36.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $35.1:rbx $36.1:r15 
  .loc 7 729 17
  # $37.1: Boolean = call(matches_281, self.1, $35.1, $36.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $37.1:rax 
  .loc 7 729 17
  # $38.1: Boolean = $37.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:rbx 
  # jump($38.1, .LABEL__parse_primary_expression_272__15, .LABEL__parse_primary_expression_272__16)
  test bl, bl
  mov [rbp-38], bl
  jz .LABEL__parse_primary_expression_272__16
.LABEL__parse_primary_expression_272__15:
  .loc 7 730 17
  # call(parse_call_arguments_270, self.1, call_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-36]
  call parse_call_arguments_270
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # jump(.LABEL__parse_primary_expression_272__16)
.LABEL__parse_primary_expression_272__16:
  .loc 7 732 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  .loc 7 733 26
  # $39.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $39.1:rbx 
  .loc 7 733 13
  # $40.1: @Token = call(consume_276, self.1, $39.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # jump(.LABEL__parse_primary_expression_272__14)
.LABEL__parse_primary_expression_272__14:
  .loc 7 735 50
  # $41.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-20]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:rax:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $41.1:rbx 
  .loc 7 735 16
  # $42.1: @AST_New_Expression = new(AST_New_Expression)
  mov [rbp-46], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_New_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $41.1:[rbp-46] $42.1:rax 
  # store_struct_member($42.1, location, $41.1)
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $42.1:rax 
  # store_struct_member($42.1, type, type.1)
  mov rbx, [rbp-28]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:rbx:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $42.1:rax 
  # store_struct_member($42.1, init_arguments, call_arguments.1)
  mov r15, [rbp-36]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:rbx:[rbp-28] call_arguments.1:r15:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $42.1:rax 
  .loc 7 735 9
  # return($42.1)
  mov [rbp-46], rax
  jmp .LABEL__parse_primary_expression_272__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] 
  # [discarded value]: call_arguments.1
  # [discarded value]: type.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] 
.LABEL__parse_primary_expression_272__12:
  .loc 7 737 5
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_primary_expression_272__end
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_primary_expression_272__end:
  mov rsp, rbp
  pop rbp
  ret

parse_primary_expression_272__stack_frame_size: .word 48

  .loc 7 740 1
  .text
consume_end_of_line_273:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_end_of_line_273__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_end_of_line_273__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 741 22
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 741 43
  # $2.1: @Matcher = load_struct_member(self.1, required_comment)
  mov rbx, [rdi+128]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 741 9
  # $3.1: Boolean = call(matches_281, self.1, $1.1, $2.1)
  mov rsi, rax
  mov rdx, rbx
  mov [rbp-8], rdi
  call matches_281
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__consume_end_of_line_273__2, .LABEL__consume_end_of_line_273__4)
  test al, al
  mov [rbp-9], al
  jz .LABEL__consume_end_of_line_273__4
.LABEL__consume_end_of_line_273__2:
  .loc 7 742 9
  # call(consume_space_275, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_275
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  .loc 7 743 22
  # $4.1: @Matcher = load_struct_member(self.1, required_comment)
  mov rax, [rbp-8]
  mov rbx, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $3.1:[rbp-9] $4.1:rbx 
  .loc 7 743 9
  # $5.1: @Token = call(consume_276, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # jump(.LABEL__consume_end_of_line_273__3)
.LABEL__consume_end_of_line_273__3:
  .loc 7 747 18
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov rax, [rbp-8]
  mov rbx, [rax+160]
  # [live values]: self.1:rax:[rbp-8] $3.1:[rbp-9] $6.1:rbx 
  .loc 7 747 5
  # $7.1: @Token = call(consume_276, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # return()
  jmp .LABEL__consume_end_of_line_273__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__consume_end_of_line_273__4:
  .loc 7 745 9
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # jump(.LABEL__consume_end_of_line_273__3)
  jmp .LABEL__consume_end_of_line_273__3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_end_of_line_273__end:
  mov rsp, rbp
  pop rbp
  ret

consume_end_of_line_273__stack_frame_size: .word 16

  .loc 7 750 1
  .text
consume_empty_line_274:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_empty_line_274__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_empty_line_274__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 751 22
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 751 43
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  mov rbx, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 751 66
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov r15, [rdi+160]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  .loc 7 751 9
  # $4.1: Boolean = call(matches_282, self.1, $1.1, $2.1, $3.1)
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_282
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__consume_empty_line_274__2, .LABEL__consume_empty_line_274__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__consume_empty_line_274__3
.LABEL__consume_empty_line_274__2:
  .loc 7 752 26
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $5.1:rbx 
  .loc 7 752 47
  # $6.1: @Matcher = load_struct_member(self.1, required_comment)
  mov r15, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $5.1:rbx $6.1:r15 
  .loc 7 752 13
  # $7.1: Boolean = call(matches_281, self.1, $5.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_281
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:rax 
  # jump($7.1, .LABEL__consume_empty_line_274__4, .LABEL__consume_empty_line_274__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__consume_empty_line_274__6
.LABEL__consume_empty_line_274__4:
  .loc 7 753 32
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $8.1:rbx 
  .loc 7 753 32
  # $9.1: Int = $8.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $9.1:r15 
  .loc 7 753 13
  # call(consume_space_275, self.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_275
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  .loc 7 754 26
  # $10.1: @Matcher = load_struct_member(self.1, required_comment)
  mov rax, [rbp-8]
  mov rbx, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $10.1:rbx 
  .loc 7 754 13
  # $11.1: @Token = call(consume_276, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # jump(.LABEL__consume_empty_line_274__5)
.LABEL__consume_empty_line_274__5:
  .loc 7 758 22
  # $12.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov rax, [rbp-8]
  mov rbx, [rax+160]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $12.1:rbx 
  .loc 7 758 9
  # $13.1: @Token = call(consume_276, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_276
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  .loc 7 759 9
  # return(true)
  mov al, 1
  jmp .LABEL__consume_empty_line_274__end
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
.LABEL__consume_empty_line_274__6:
  .loc 7 756 13
  # call(consume_space_275, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_275
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # jump(.LABEL__consume_empty_line_274__5)
  jmp .LABEL__consume_empty_line_274__5
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
.LABEL__consume_empty_line_274__3:
  .loc 7 761 5
  # return(false)
  mov al, 0
  jmp .LABEL__consume_empty_line_274__end
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_empty_line_274__end:
  mov rsp, rbp
  pop rbp
  ret

consume_empty_line_274__stack_frame_size: .word 16

  .loc 7 764 1
  .text
consume_space_275:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_space_275__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_space_275__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expected_space_count.1: Int = load_variable(expected_space_count)
  # [live values]: self.1:rdi expected_space_count.1:rsi 
  .loc 7 766 14
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi expected_space_count.1:rsi $1.1:rax 
  .loc 7 766 14
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx 
  # Space_Token.2: @Object_Type = load_variable(Space_Token)
  lea rax, Space_Token[rip]
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx Space_Token.2:rax 
  .loc 7 767 9
  # $3.1: Boolean = call(is_338, token.1, Space_Token.2)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rbx
  call is_338
  # [discarded value]: Space_Token.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__consume_space_275__2, .LABEL__consume_space_275__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__consume_space_275__4
.LABEL__consume_space_275__2:
  .loc 7 768 9
  # $4.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] $4.1:rbx 
  .loc 7 768 9
  # $5.1: @Token = call(next_token_293, $4.1)
  mov rdi, rbx
  call next_token_293
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
  .loc 7 769 18
  # space.1: @Space_Token = token.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space.1:rax 
  .loc 7 770 23
  # space_count.3: Int = load_struct_member(space.1, count)
  mov rbx, [rax+32]
  # [discarded value]: space.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:rbx 
  # jump(.LABEL__consume_space_275__3)
  mov [rbp-33], rbx
.LABEL__consume_space_275__3:
  # space_count.4: Int = phi(space_count.2, space_count.3)
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] 
  .loc 7 774 9
  # $8.1: Boolean = space_count.4 != expected_space_count.1
  mov rax, [rbp-33]
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:rax:[rbp-33] $8.1:rbx 
  # jump($8.1, .LABEL__consume_space_275__5, .LABEL__consume_space_275__6)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__consume_space_275__6
.LABEL__consume_space_275__5:
  # stderr.10: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] stderr.10:stderr[rip] 
  .loc 7 775 22
  # $9.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:rax:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] stderr.10:stderr[rip] $9.1:rbx 
  .loc 7 775 9
  # $10.1: @FILE = call(write_312, stderr.10, $9.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_312
  # [discarded value]: $9.1
  # [discarded value]: stderr.10
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $10.1:rax 
  .loc 7 775 9
  # $11.1: @FILE = call(write_332, $10.1, ": Consumed ")
  mov rdi, rax
  lea rsi, .LABEL__string_319[rip] # ": Consumed "
  call write_332
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $11.1:rax 
  .loc 7 775 9
  # $12.1: @FILE = call(write_331, $11.1, space_count.4)
  mov rdi, rax
  mov rsi, [rbp-33]
  call write_331
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $12.1:rax 
  .loc 7 775 9
  # $13.1: @FILE = call(write_332, $12.1, " spaces where ")
  mov rdi, rax
  lea rsi, .LABEL__string_320[rip] # " spaces where "
  call write_332
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $13.1:rax 
  .loc 7 775 9
  # $14.1: @FILE = call(write_331, $13.1, expected_space_count.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_331
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $14.1:rax 
  .loc 7 775 9
  # $15.1: @FILE = call(write_332, $14.1, " are expected")
  mov rdi, rax
  lea rsi, .LABEL__string_321[rip] # " are expected"
  call write_332
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $15.1:rax 
  .loc 7 775 9
  # $16.1: @FILE = call(end_line_335, $15.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # jump(.LABEL__consume_space_275__6)
.LABEL__consume_space_275__6:
  # return()
  jmp .LABEL__consume_space_275__end
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] 
  # [discarded value]: space_count.4
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] 
  # [discarded value]: space_count.3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__consume_space_275__4:
  .loc 7 772 9
  # space_count.2: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.2:rax:[rbp-33] 
  # jump(.LABEL__consume_space_275__3)
  mov [rbp-33], rax
  jmp .LABEL__consume_space_275__3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.2:[rbp-33] 
  # [discarded value]: space_count.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [discarded value]: token.1
  # [discarded value]: expected_space_count.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_space_275__end:
  mov rsp, rbp
  pop rbp
  ret

consume_space_275__stack_frame_size: .word 48

  .loc 7 779 1
  .text
consume_276:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_276__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_276__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  .loc 7 780 12
  # $1.1: @Token = call(consume_277, self.1, first_matcher.1, null)
  xor rdx, rdx
  call consume_277
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 780 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__consume_276__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_276__end:
  mov rsp, rbp
  pop rbp
  ret

consume_276__stack_frame_size: .word 16

  .loc 7 783 1
  .text
consume_277:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_277__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_277__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  .loc 7 784 12
  # $1.1: @Token = call(consume_278, self.1, first_matcher.1, second_matcher.1, null)
  xor rcx, rcx
  call consume_278
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 784 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__consume_277__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_277__end:
  mov rsp, rbp
  pop rbp
  ret

consume_277__stack_frame_size: .word 16

  .loc 7 787 1
  .text
consume_278:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_278__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_278__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  .loc 7 788 14
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  .loc 7 788 14
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  .loc 7 789 5
  # first_token.1: @Token = token.1
  mov [rbp-8], rbx
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:[rbp-8] first_token.1:rbx 
  .loc 7 790 9
  # $3.1: Boolean = call(accepts_283, first_matcher.1, token.1)
  mov [rbp-16], rdi
  mov rdi, rsi
  mov [rbp-24], rsi
  mov rsi, [rbp-8]
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_283
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:rax 
  # jump($3.1, .LABEL__consume_278__2, .LABEL__consume_278__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__consume_278__4
.LABEL__consume_278__2:
  .loc 7 791 17
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] $5.1:rbx 
  .loc 7 791 17
  # token.3: @Token = call(next_token_293, $5.1)
  mov rdi, rbx
  call next_token_293
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:rax:[rbp-8] 
  # jump(.LABEL__consume_278__3)
  mov [rbp-8], rax
.LABEL__consume_278__3:
  # token.10: @Token = phi(token.3, token.1)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] 
  .loc 7 797 9
  # $7.1: Boolean = second_matcher.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:rax 
  # jump($7.1, .LABEL__consume_278__7, .LABEL__consume_278__8)
  test al, al
  mov [rbp-50], al
  jz .LABEL__consume_278__8
.LABEL__consume_278__7:
  .loc 7 798 13
  # $8.1: Boolean = call(accepts_283, second_matcher.1, token.10)
  mov rdi, [rbp-40]
  mov rsi, [rbp-8]
  call accepts_283
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:rax 
  # jump($8.1, .LABEL__consume_278__9, .LABEL__consume_278__11)
  test al, al
  mov [rbp-51], al
  jz .LABEL__consume_278__11
.LABEL__consume_278__9:
  .loc 7 799 21
  # $10.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] $10.1:rbx 
  .loc 7 799 21
  # token.6: @Token = call(next_token_293, $10.1)
  mov rdi, rbx
  call next_token_293
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.6:rax:[rbp-8] 
  # jump(.LABEL__consume_278__8)
  mov [rbp-8], rax
.LABEL__consume_278__8:
  # token.11: @Token = phi(token.10, token.6)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] token.6:[rbp-8] 
  .loc 7 806 9
  # $12.1: Boolean = third_matcher.1 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:rax token.6:[rbp-8] 
  # jump($12.1, .LABEL__consume_278__14, .LABEL__consume_278__15)
  test al, al
  mov [rbp-52], al
  jz .LABEL__consume_278__15
.LABEL__consume_278__14:
  .loc 7 807 13
  # $13.1: Boolean = call(accepts_283, third_matcher.1, token.11)
  mov rdi, [rbp-32]
  mov rsi, [rbp-8]
  call accepts_283
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:rax 
  # jump($13.1, .LABEL__consume_278__16, .LABEL__consume_278__18)
  test al, al
  mov [rbp-53], al
  jz .LABEL__consume_278__18
.LABEL__consume_278__16:
  .loc 7 808 21
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] $15.1:rbx 
  .loc 7 808 21
  # token.9: @Token = call(next_token_293, $15.1)
  mov rdi, rbx
  call next_token_293
  # [discarded value]: token.9
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
  # jump(.LABEL__consume_278__15)
.LABEL__consume_278__15:
  .loc 7 815 5
  # return(first_token.1)
  mov rax, [rbp-48]
  jmp .LABEL__consume_278__end
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
.LABEL__consume_278__18:
  .loc 7 810 17
  # $14.1: Boolean = load_struct_member(third_matcher.1, is_required)
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] $14.1:rbx 
  # jump($14.1, .LABEL__consume_278__19, .LABEL__consume_278__15)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__consume_278__15
.LABEL__consume_278__19:
  .loc 7 811 17
  # call(abort_284, self.1, token.11)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_284
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] $14.1:[rbp-54] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] token.6:[rbp-8] 
  # [discarded value]: token.11
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.6:[rbp-8] 
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] 
.LABEL__consume_278__11:
  .loc 7 801 17
  # $9.1: Boolean = load_struct_member(second_matcher.1, is_required)
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] $9.1:rbx 
  # jump($9.1, .LABEL__consume_278__12, .LABEL__consume_278__8)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__consume_278__8
.LABEL__consume_278__12:
  .loc 7 802 17
  # call(abort_284, self.1, token.10)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_284
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] $9.1:[rbp-52] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] 
  # [discarded value]: token.10
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] 
  # [discarded value]: token.3
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] 
.LABEL__consume_278__4:
  .loc 7 793 13
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  mov rax, [rbp-24]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:rax:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] $4.1:rbx 
  # jump($4.1, .LABEL__consume_278__5, .LABEL__consume_278__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__consume_278__3
.LABEL__consume_278__5:
  .loc 7 794 13
  # call(abort_284, self.1, token.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_284
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] $4.1:[rbp-50] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
  # [discarded value]: first_token.1
  # [discarded value]: token.1
  # [discarded value]: third_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_278__end:
  mov rsp, rbp
  pop rbp
  ret

consume_278__stack_frame_size: .word 64

  .loc 7 818 1
  .text
matches_end_of_line_279:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_end_of_line_279__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_end_of_line_279__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 819 25
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 819 46
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  mov rbx, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 819 69
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov r15, [rdi+160]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  .loc 7 819 12
  # $4.1: Boolean = call(matches_282, self.1, $1.1, $2.1, $3.1)
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_282
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $4.1:rax 
  .loc 7 819 5
  # return($4.1)
  mov [rbp-1], al
  jmp .LABEL__matches_end_of_line_279__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__matches_end_of_line_279__end:
  mov rsp, rbp
  pop rbp
  ret

matches_end_of_line_279__stack_frame_size: .word 16

  .loc 7 822 1
  .text
matches_280:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_280__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_280__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  .loc 7 823 12
  # $1.1: Boolean = call(matches_281, self.1, first_matcher.1, null)
  xor rdx, rdx
  call matches_281
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 823 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_280__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_280__end:
  mov rsp, rbp
  pop rbp
  ret

matches_280__stack_frame_size: .word 16

  .loc 7 826 1
  .text
matches_281:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_281__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_281__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  .loc 7 827 12
  # $1.1: Boolean = call(matches_282, self.1, first_matcher.1, second_matcher.1, null)
  xor rcx, rcx
  call matches_282
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 827 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_281__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_281__end:
  mov rsp, rbp
  pop rbp
  ret

matches_281__stack_frame_size: .word 16

  .loc 7 830 1
  .text
matches_282:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_282__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_282__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  .loc 7 831 14
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  .loc 7 831 14
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  .loc 7 832 5
  # peek_offset.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx peek_offset.1:rax 
  .loc 7 833 9
  # $3.1: Boolean = call(accepts_283, first_matcher.1, token.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_283
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__matches_282__2, .LABEL__matches_282__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__matches_282__4
.LABEL__matches_282__2:
  .loc 7 834 17
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] $5.1:rbx 
  .loc 7 834 17
  # token.2: @Token = call(peek_token_292, $5.1, peek_offset.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_292
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:rax:[rbp-48] 
  .loc 7 835 23
  # peek_offset.3: Int = peek_offset.1 + 1
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:rax:[rbp-48] peek_offset.3:rbx:[rbp-24] 
  # jump(.LABEL__matches_282__3)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_282__3:
  # peek_offset.8: Int = phi(peek_offset.3, peek_offset.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] 
  # token.7: @Token = phi(token.2, token.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  .loc 7 839 9
  # $8.1: Boolean = second_matcher.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:rax 
  # jump($8.1, .LABEL__matches_282__8, .LABEL__matches_282__9)
  test al, al
  mov [rbp-50], al
  jz .LABEL__matches_282__9
.LABEL__matches_282__8:
  .loc 7 840 13
  # $9.1: Boolean = call(accepts_283, second_matcher.1, token.7)
  mov rdi, [rbp-40]
  mov rsi, [rbp-48]
  call accepts_283
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:rax 
  # jump($9.1, .LABEL__matches_282__10, .LABEL__matches_282__12)
  test al, al
  mov [rbp-51], al
  jz .LABEL__matches_282__12
.LABEL__matches_282__10:
  .loc 7 841 21
  # $11.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] $11.1:rbx 
  .loc 7 841 21
  # token.4: @Token = call(peek_token_292, $11.1, peek_offset.8)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_292
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:rax:[rbp-48] 
  .loc 7 842 27
  # peek_offset.5: Int = peek_offset.8 + 1
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:rax:[rbp-48] peek_offset.5:rbx:[rbp-24] 
  # jump(.LABEL__matches_282__9)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_282__9:
  # peek_offset.9: Int = phi(peek_offset.8, peek_offset.5)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # token.8: @Token = phi(token.7, token.4)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  .loc 7 847 9
  # $14.1: Boolean = third_matcher.1 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:rax token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump($14.1, .LABEL__matches_282__16, .LABEL__matches_282__17)
  test al, al
  mov [rbp-52], al
  jz .LABEL__matches_282__17
.LABEL__matches_282__16:
  .loc 7 848 13
  # $15.1: Boolean = call(accepts_283, third_matcher.1, token.8)
  mov rdi, [rbp-32]
  mov rsi, [rbp-48]
  call accepts_283
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:rax 
  # jump($15.1, .LABEL__matches_282__18, .LABEL__matches_282__20)
  test al, al
  mov [rbp-53], al
  jz .LABEL__matches_282__20
.LABEL__matches_282__18:
  .loc 7 849 21
  # $17.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $17.1:rbx 
  .loc 7 849 21
  # token.6: @Token = call(peek_token_292, $17.1, peek_offset.9)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_292
  # [discarded value]: token.6
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  .loc 7 850 27
  # peek_offset.7: Int = peek_offset.9 + 1
  mov rax, [rbp-24]
  add rax, 1
  # [discarded value]: peek_offset.7
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  # jump(.LABEL__matches_282__17)
.LABEL__matches_282__17:
  .loc 7 855 5
  # return(true)
  mov al, 1
  jmp .LABEL__matches_282__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
.LABEL__matches_282__20:
  .loc 7 851 20
  # $16.1: Boolean = load_struct_member(third_matcher.1, is_required)
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $16.1:rbx 
  # jump($16.1, .LABEL__matches_282__21, .LABEL__matches_282__17)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__matches_282__17
.LABEL__matches_282__21:
  .loc 7 852 13
  # return(false)
  mov al, 0
  jmp .LABEL__matches_282__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $16.1:[rbp-54] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: token.8
  # [discarded value]: peek_offset.9
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: peek_offset.5
  # [discarded value]: token.4
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__matches_282__12:
  .loc 7 843 20
  # $10.1: Boolean = load_struct_member(second_matcher.1, is_required)
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] $10.1:rbx 
  # jump($10.1, .LABEL__matches_282__13, .LABEL__matches_282__9)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__matches_282__9
.LABEL__matches_282__13:
  .loc 7 844 13
  # return(false)
  mov al, 0
  jmp .LABEL__matches_282__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] $10.1:[rbp-52] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [discarded value]: token.7
  # [discarded value]: peek_offset.8
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [discarded value]: peek_offset.3
  # [discarded value]: token.2
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] 
.LABEL__matches_282__4:
  .loc 7 836 16
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  mov rax, [rbp-16]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:rax:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] $4.1:rbx 
  # jump($4.1, .LABEL__matches_282__5, .LABEL__matches_282__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__matches_282__3
.LABEL__matches_282__5:
  .loc 7 837 9
  # return(false)
  mov al, 0
  jmp .LABEL__matches_282__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] $4.1:[rbp-50] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [discarded value]: peek_offset.1
  # [discarded value]: token.1
  # [discarded value]: third_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__matches_282__end:
  mov rsp, rbp
  pop rbp
  ret

matches_282__stack_frame_size: .word 64

  .loc 7 891 1
  .text
accepts_283:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_283__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_283__1:
  # self.1: @Matcher = load_variable(self)
  # [live values]: self.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: self.1:rdi token.1:rsi 
  # Other_Matcher.2: @Object_Type = load_variable(Other_Matcher)
  lea rax, Other_Matcher[rip]
  # [live values]: self.1:rdi token.1:rsi Other_Matcher.2:rax 
  .loc 7 892 9
  # $1.1: Boolean = call(is_338, self.1, Other_Matcher.2)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call is_338
  # [discarded value]: Other_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__accepts_283__2, .LABEL__accepts_283__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_283__3
.LABEL__accepts_283__2:
  .loc 7 893 17
  # self.1: @Other_Matcher = self.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:rax 
  # Other_Token.2: @Object_Type = load_variable(Other_Token)
  lea rbx, Other_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:rax Other_Token.2:rbx 
  .loc 7 894 13
  # $3.1: Boolean = call(is_338, token.1, Other_Token.2)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-25], rax
  call is_338
  # [discarded value]: Other_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__accepts_283__4, .LABEL__accepts_283__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__accepts_283__5
.LABEL__accepts_283__4:
  .loc 7 895 20
  # $4.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] $4.1:rbx 
  .loc 7 895 40
  # $5.1: @String = load_struct_member(self.1, lexeme)
  mov r15, [rbp-25]
  mov r14, [r15+9]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] self.1:r15:[rbp-25] $3.1:[rbp-26] $4.1:rbx $5.1:r14 
  .loc 7 895 20
  # $6.1: Boolean = call(equals_341, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_341
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] $6.1:rax 
  .loc 7 895 13
  # return($6.1)
  mov [rbp-27], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__accepts_283__5:
  .loc 7 897 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_283__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__accepts_283__3:
  # Space_Matcher.2: @Object_Type = load_variable(Space_Matcher)
  lea rax, Space_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] Space_Matcher.2:rax 
  .loc 7 899 9
  # $7.1: Boolean = call(is_338, self.1, Space_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Space_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__accepts_283__8, .LABEL__accepts_283__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_283__9
.LABEL__accepts_283__8:
  # Space_Token.3: @Object_Type = load_variable(Space_Token)
  lea rax, Space_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] Space_Token.3:rax 
  .loc 7 900 16
  # $8.1: Boolean = call(is_338, token.1, Space_Token.3)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Space_Token.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $8.1:rax 
  .loc 7 900 9
  # return($8.1)
  mov [rbp-19], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__accepts_283__9:
  # Identifier_Matcher.2: @Object_Type = load_variable(Identifier_Matcher)
  lea rax, Identifier_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] Identifier_Matcher.2:rax 
  .loc 7 902 9
  # $9.1: Boolean = call(is_338, self.1, Identifier_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Identifier_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:rax 
  # jump($9.1, .LABEL__accepts_283__11, .LABEL__accepts_283__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_283__12
.LABEL__accepts_283__11:
  # Identifier_Token.2: @Object_Type = load_variable(Identifier_Token)
  lea rax, Identifier_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] Identifier_Token.2:rax 
  .loc 7 903 16
  # $10.1: Boolean = call(is_338, token.1, Identifier_Token.2)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Identifier_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $10.1:rax 
  .loc 7 903 9
  # return($10.1)
  mov [rbp-20], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] 
.LABEL__accepts_283__12:
  # Keyword_Matcher.2: @Object_Type = load_variable(Keyword_Matcher)
  lea rax, Keyword_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] Keyword_Matcher.2:rax 
  .loc 7 905 9
  # $11.1: Boolean = call(is_338, self.1, Keyword_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Keyword_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:rax 
  # jump($11.1, .LABEL__accepts_283__14, .LABEL__accepts_283__15)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_283__15
.LABEL__accepts_283__14:
  .loc 7 906 17
  # self.1: @Keyword_Matcher = self.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:rax 
  # Keyword_Token.2: @Object_Type = load_variable(Keyword_Token)
  lea rbx, Keyword_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:rax Keyword_Token.2:rbx 
  .loc 7 907 13
  # $13.1: Boolean = call(is_338, token.1, Keyword_Token.2)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-28], rax
  call is_338
  # [discarded value]: Keyword_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:rax 
  # jump($13.1, .LABEL__accepts_283__16, .LABEL__accepts_283__17)
  test al, al
  mov [rbp-29], al
  jz .LABEL__accepts_283__17
.LABEL__accepts_283__16:
  .loc 7 908 20
  # $14.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx 
  .loc 7 908 40
  # $15.1: @String = load_struct_member(self.1, lexeme)
  mov r15, [rbp-28]
  mov r14, [r15+9]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:r15:[rbp-28] $13.1:[rbp-29] $14.1:rbx $15.1:r14 
  .loc 7 908 20
  # $16.1: Boolean = call(equals_341, $14.1, $15.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_341
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] $16.1:rax 
  .loc 7 908 13
  # return($16.1)
  mov [rbp-30], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] 
.LABEL__accepts_283__17:
  .loc 7 910 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_283__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] 
.LABEL__accepts_283__15:
  # String_Literal_Matcher.2: @Object_Type = load_variable(String_Literal_Matcher)
  lea rax, String_Literal_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] String_Literal_Matcher.2:rax 
  .loc 7 912 9
  # $17.1: Boolean = call(is_338, self.1, String_Literal_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: String_Literal_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:rax 
  # jump($17.1, .LABEL__accepts_283__20, .LABEL__accepts_283__21)
  test al, al
  mov [rbp-21], al
  jz .LABEL__accepts_283__21
.LABEL__accepts_283__20:
  # String_Token.6: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] String_Token.6:rax 
  .loc 7 913 16
  # $18.1: Boolean = call(is_338, token.1, String_Token.6)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: String_Token.6
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $18.1:rax 
  .loc 7 913 9
  # return($18.1)
  mov [rbp-22], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] 
.LABEL__accepts_283__21:
  # Literal_Matcher.2: @Object_Type = load_variable(Literal_Matcher)
  lea rax, Literal_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] Literal_Matcher.2:rax 
  .loc 7 915 9
  # $19.1: Boolean = call(is_338, self.1, Literal_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Literal_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:rax 
  # jump($19.1, .LABEL__accepts_283__23, .LABEL__accepts_283__24)
  test al, al
  mov [rbp-22], al
  jz .LABEL__accepts_283__24
.LABEL__accepts_283__23:
  # Integer_Token.7: @Object_Type = load_variable(Integer_Token)
  lea rax, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] Integer_Token.7:rax 
  .loc 7 916 16
  # $21.1: Boolean = call(is_338, token.1, Integer_Token.7)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Integer_Token.7
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:rax 
  # jump($21.1, .LABEL__accepts_283__34, .LABEL__accepts_283__33)
  test al, al
  mov [rbp-23], al
  jz .LABEL__accepts_283__33
.LABEL__accepts_283__34:
  .loc 7 916 16
  # $23.1: Boolean = phi($21.1, $21.2)
  mov al, [rbp-23]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:rax 
  # jump($23.1, .LABEL__accepts_283__32, .LABEL__accepts_283__31)
  test al, al
  mov [rbp-24], al
  jz .LABEL__accepts_283__31
.LABEL__accepts_283__32:
  .loc 7 916 16
  # $25.1: Boolean = phi($23.1, $23.2)
  mov al, [rbp-24]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:rax $23.1:[rbp-24] 
  # jump($25.1, .LABEL__accepts_283__30, .LABEL__accepts_283__29)
  test al, al
  mov [rbp-25], al
  jz .LABEL__accepts_283__29
.LABEL__accepts_283__30:
  .loc 7 916 16
  # $27.1: Boolean = phi($25.1, $25.2)
  mov al, [rbp-25]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:rax $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump($27.1, .LABEL__accepts_283__28, .LABEL__accepts_283__27)
  test al, al
  mov [rbp-26], al
  jz .LABEL__accepts_283__27
.LABEL__accepts_283__28:
  .loc 7 916 16
  # $29.1: Boolean = phi($27.1, $27.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:rax $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump($29.1, .LABEL__accepts_283__26, .LABEL__accepts_283__25)
  test al, al
  mov [rbp-27], al
  jz .LABEL__accepts_283__25
.LABEL__accepts_283__26:
  .loc 7 916 16
  # $29.3: Boolean = phi($29.1, $29.2)
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.3:[rbp-27] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  .loc 7 916 9
  # return($29.3)
  mov al, [rbp-27]
  jmp .LABEL__accepts_283__end
  # [discarded value]: $29.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
.LABEL__accepts_283__25:
  # Undefined_Token.4: @Object_Type = load_variable(Undefined_Token)
  lea rax, Undefined_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] Undefined_Token.4:rax $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  .loc 7 916 149
  # $29.2: Boolean = call(is_338, token.1, Undefined_Token.4)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Undefined_Token.4
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.2:rax:[rbp-27] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_283__26)
  mov [rbp-27], al
  jmp .LABEL__accepts_283__26
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.2:[rbp-27] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $29.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
.LABEL__accepts_283__27:
  # Null_Token.5: @Object_Type = load_variable(Null_Token)
  lea rax, Null_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] Null_Token.5:rax $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  .loc 7 916 125
  # $27.2: Boolean = call(is_338, token.1, Null_Token.5)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Null_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.2:rax:[rbp-26] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_283__28)
  mov [rbp-26], al
  jmp .LABEL__accepts_283__28
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.2:[rbp-26] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:[rbp-25] $23.1:[rbp-24] 
.LABEL__accepts_283__29:
  # Boolean_Token.5: @Object_Type = load_variable(Boolean_Token)
  lea rax, Boolean_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] Boolean_Token.5:rax $25.1:[rbp-25] $23.1:[rbp-24] 
  .loc 7 916 98
  # $25.2: Boolean = call(is_338, token.1, Boolean_Token.5)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Boolean_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.2:rax:[rbp-25] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_283__30)
  mov [rbp-25], al
  jmp .LABEL__accepts_283__30
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.2:[rbp-25] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:[rbp-24] 
.LABEL__accepts_283__31:
  # Character_Token.5: @Object_Type = load_variable(Character_Token)
  lea rax, Character_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] Character_Token.5:rax $23.1:[rbp-24] 
  .loc 7 916 69
  # $23.2: Boolean = call(is_338, token.1, Character_Token.5)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Character_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.2:rax:[rbp-24] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_283__32)
  mov [rbp-24], al
  jmp .LABEL__accepts_283__32
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.2:[rbp-24] $23.1:[rbp-24] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:[rbp-24] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] 
.LABEL__accepts_283__33:
  # String_Token.7: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] String_Token.7:rax 
  .loc 7 916 43
  # $21.2: Boolean = call(is_338, token.1, String_Token.7)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: String_Token.7
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $21.2:rax:[rbp-23] 
  # jump(.LABEL__accepts_283__34)
  mov [rbp-23], al
  jmp .LABEL__accepts_283__34
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $21.2:[rbp-23] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] 
.LABEL__accepts_283__24:
  # End_Of_Line_Matcher.2: @Object_Type = load_variable(End_Of_Line_Matcher)
  lea rax, End_Of_Line_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] End_Of_Line_Matcher.2:rax 
  .loc 7 918 9
  # $31.1: Boolean = call(is_338, self.1, End_Of_Line_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: End_Of_Line_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:rax 
  # jump($31.1, .LABEL__accepts_283__36, .LABEL__accepts_283__37)
  test al, al
  mov [rbp-23], al
  jz .LABEL__accepts_283__37
.LABEL__accepts_283__36:
  # End_Of_Line_Token.2: @Object_Type = load_variable(End_Of_Line_Token)
  lea rax, End_Of_Line_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] End_Of_Line_Token.2:rax 
  .loc 7 919 16
  # $32.1: Boolean = call(is_338, token.1, End_Of_Line_Token.2)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: End_Of_Line_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $32.1:rax 
  .loc 7 919 9
  # return($32.1)
  mov [rbp-24], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] 
.LABEL__accepts_283__37:
  # Comment_Matcher.2: @Object_Type = load_variable(Comment_Matcher)
  lea rax, Comment_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] Comment_Matcher.2:rax 
  .loc 7 921 9
  # $33.1: Boolean = call(is_338, self.1, Comment_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Comment_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:rax 
  # jump($33.1, .LABEL__accepts_283__39, .LABEL__accepts_283__40)
  test al, al
  mov [rbp-24], al
  jz .LABEL__accepts_283__40
.LABEL__accepts_283__39:
  # Comment_Token.2: @Object_Type = load_variable(Comment_Token)
  lea rax, Comment_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] Comment_Token.2:rax 
  .loc 7 922 16
  # $34.1: Boolean = call(is_338, token.1, Comment_Token.2)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: Comment_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $34.1:rax 
  .loc 7 922 9
  # return($34.1)
  mov [rbp-25], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] 
.LABEL__accepts_283__40:
  # End_Of_File_Matcher.2: @Object_Type = load_variable(End_Of_File_Matcher)
  lea rax, End_Of_File_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] End_Of_File_Matcher.2:rax 
  .loc 7 924 9
  # $35.1: Boolean = call(is_338, self.1, End_Of_File_Matcher.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: End_Of_File_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:rax 
  # jump($35.1, .LABEL__accepts_283__42, .LABEL__accepts_283__43)
  test al, al
  mov [rbp-25], al
  jz .LABEL__accepts_283__43
.LABEL__accepts_283__42:
  # End_Of_File_Token.3: @Object_Type = load_variable(End_Of_File_Token)
  lea rax, End_Of_File_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] End_Of_File_Token.3:rax 
  .loc 7 925 16
  # $36.1: Boolean = call(is_338, token.1, End_Of_File_Token.3)
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_338
  # [discarded value]: End_Of_File_Token.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] $36.1:rax 
  .loc 7 925 9
  # return($36.1)
  mov [rbp-26], al
  jmp .LABEL__accepts_283__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] 
.LABEL__accepts_283__43:
  # stderr.11: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] stderr.11:stderr[rip] 
  .loc 7 927 5
  # $37.1: @FILE = call(write_332, stderr.11, "Unsupported token matcher")
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_322[rip] # "Unsupported token matcher"
  call write_332
  # [discarded value]: stderr.11
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] $37.1:rax 
  .loc 7 927 5
  # $38.1: @FILE = call(end_line_335, $37.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] 
  .loc 7 928 5
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [discarded value]: token.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__accepts_283__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_283__stack_frame_size: .word 32

  .loc 1 59 1
  .text
abort_284:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_284__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_284__1:
  # self.1: @Parser = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # unexpected_token.1: @Token = load_variable(unexpected_token)
  # [live values]: unexpected_token.1:rsi 
  # stderr.12: @FILE = load_variable(stderr)
  # [live values]: unexpected_token.1:rsi stderr.12:stderr[rip] 
  .loc 1 60 18
  # $1.1: @Source_Location = load_struct_member(unexpected_token.1, location)
  mov rax, [rsi+16]
  # [live values]: unexpected_token.1:rsi stderr.12:stderr[rip] $1.1:rax 
  .loc 1 60 5
  # $2.1: @FILE = call(write_312, stderr.12, $1.1)
  mov rdi, stderr[rip]
  mov [rbp-8], rsi
  mov rsi, rax
  call write_312
  # [discarded value]: $1.1
  # [discarded value]: stderr.12
  # [live values]: unexpected_token.1:[rbp-8] $2.1:rax 
  .loc 1 60 5
  # $3.1: @FILE = call(write_332, $2.1, ": Unexpected ")
  mov rdi, rax
  lea rsi, .LABEL__string_323[rip] # ": Unexpected "
  call write_332
  # [discarded value]: $2.1
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax 
  .loc 1 60 74
  # $4.1: @Object_Type = load_struct_member(unexpected_token.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  .loc 1 60 74
  # $5.1: @String = load_struct_member_address($4.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $4.1
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $5.1:r14 
  .loc 1 60 5
  # $6.1: @FILE = call(write_332, $3.1, $5.1)
  mov rdi, rax
  mov rsi, r14
  call write_332
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: unexpected_token.1:[rbp-8] $6.1:rax 
  .loc 1 60 5
  # $7.1: @FILE = call(write_332, $6.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $6.1
  # [live values]: unexpected_token.1:[rbp-8] $7.1:rax 
  .loc 1 60 5
  # $8.1: @FILE = call(write_310, $7.1, unexpected_token.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_310
  # [discarded value]: $7.1
  # [discarded value]: unexpected_token.1
  # [live values]: $8.1:rax 
  .loc 1 60 5
  # $9.1: @FILE = call(end_line_335, $8.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: 
  .loc 1 61 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_284__end:
  mov rsp, rbp
  pop rbp
  ret

abort_284__stack_frame_size: .word 16

  .loc 1 66 1
  .text
write_285:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_285__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_285__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: file.1:rdi compilation_unit.1:rsi 
  .loc 1 67 19
  # $1.1: @List = load_struct_member(compilation_unit.1, statements)
  mov rax, [rsi+32]
  # [discarded value]: compilation_unit.1
  # [live values]: file.1:rdi $1.1:rax 
  .loc 1 67 19
  # statements.1: @List_Iterator = call(create_iterator_324, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_324
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statements.1:rax 
  # jump(.LABEL__write_285__2)
  mov [rbp-16], rax
.LABEL__write_285__2:
  .loc 1 68 12
  # $3.1: Boolean = call(has_next_327, statements.1)
  mov rdi, [rbp-16]
  call has_next_327
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__write_285__3, .LABEL__write_285__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_285__4
.LABEL__write_285__3:
  .loc 1 69 22
  # statement.1: @AST_Statement = call(next_328, statements.1)
  mov rdi, [rbp-16]
  call next_328
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:rax 
  .loc 1 70 32
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:rax $6.1:rbx 
  .loc 1 70 9
  # $7.1: @FILE = call(write_source_line_287, file.1, $6.1, 0)
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  mov [rbp-25], rax
  call write_source_line_287
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:[rbp-25] $7.1:rax 
  .loc 1 70 9
  # $8.1: @FILE = call(write_286, $7.1, statement.1, 0)
  mov rdi, rax
  mov rsi, [rbp-25]
  xor rdx, rdx
  call write_286
  # [discarded value]: $7.1
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] $8.1:rax 
  .loc 1 70 9
  # $9.1: @FILE = call(end_line_335, $8.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__write_285__2)
  jmp .LABEL__write_285__2
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__write_285__4:
  .loc 1 72 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_285__end
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [discarded value]: statements.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_285__end:
  mov rsp, rbp
  pop rbp
  ret

write_285__stack_frame_size: .word 32

  .loc 1 75 1
  .text
write_286:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_286__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_286__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: file.1:rdi statement.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx 
  # AST_Assignment_Statement.3: @Object_Type = load_variable(AST_Assignment_Statement)
  lea rax, AST_Assignment_Statement[rip]
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx AST_Assignment_Statement.3:rax 
  .loc 1 76 9
  # $1.1: Boolean = call(is_338, statement.1, AST_Assignment_Statement.3)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_338
  # [discarded value]: AST_Assignment_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__write_286__2, .LABEL__write_286__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_286__3
.LABEL__write_286__2:
  .loc 1 77 22
  # statement.1: @AST_Assignment_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rax 
  .loc 1 78 27
  # $3.1: @AST_Expression = load_struct_member(statement.1, storage_expression)
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rax $3.1:rbx 
  .loc 1 78 16
  # $4.1: @FILE = call(write_290, file.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-33], rax
  call write_290
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $4.1:rax 
  .loc 1 78 16
  # $5.1: @FILE = call(write_334, $4.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $5.1:rax 
  .loc 1 78 74
  # $6.1: @Other_Token = load_struct_member(statement.1, operator)
  mov rbx, [rbp-33]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rbx:[rbp-33] $5.1:rax $6.1:r15 
  .loc 1 78 16
  # $7.1: @FILE = call(write_310, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_310
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $7.1:rax 
  .loc 1 78 16
  # $8.1: @FILE = call(write_334, $7.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_334
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $8.1:rax 
  .loc 1 78 111
  # $9.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-33]
  mov r15, [rbx+32]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $8.1:rax $9.1:r15 
  .loc 1 78 16
  # $10.1: @FILE = call(write_290, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $10.1:rax 
  .loc 1 78 9
  # return($10.1)
  mov [rbp-33], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__write_286__3:
  # AST_Block_Statement.3: @Object_Type = load_variable(AST_Block_Statement)
  lea rax, AST_Block_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] AST_Block_Statement.3:rax 
  .loc 1 81 9
  # $11.1: Boolean = call(is_338, statement.1, AST_Block_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Block_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__write_286__5, .LABEL__write_286__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_286__6
.LABEL__write_286__5:
  .loc 1 82 9
  # $12.1: @FILE = call(write_334, file.1, '{')
  mov rdi, [rbp-8]
  mov sil, 123
  call write_334
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  .loc 1 82 9
  # $13.1: @FILE = call(end_line_335, $12.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
  .loc 1 83 30
  # $14.1: @AST_Block_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $14.1:rax 
  .loc 1 83 29
  # $15.1: @List = load_struct_member($14.1, statements)
  mov rbx, [rax+16]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $15.1:rbx 
  .loc 1 83 29
  # block_statements.1: @List_Iterator = call(create_iterator_324, $15.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:rax 
  # jump(.LABEL__write_286__7)
  mov [rbp-34], rax
.LABEL__write_286__7:
  .loc 1 84 16
  # $17.1: Boolean = call(has_next_327, block_statements.1)
  mov rdi, [rbp-34]
  call has_next_327
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:rax 
  # jump($17.1, .LABEL__write_286__8, .LABEL__write_286__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_286__9
.LABEL__write_286__8:
  .loc 1 85 32
  # block_statement.1: @AST_Statement = call(next_328, block_statements.1)
  mov rdi, [rbp-34]
  call next_328
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax 
  .loc 1 86 36
  # $20.1: @Source_Location = load_struct_member(block_statement.1, location)
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax $20.1:rbx 
  .loc 1 86 62
  # $21.1: Int = alignment.1 + 1
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax $20.1:rbx $21.1:r15 
  .loc 1 86 13
  # $22.1: @FILE = call(write_source_line_287, file.1, $20.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-43], rax
  call write_source_line_287
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:[rbp-43] $22.1:rax 
  .loc 1 86 100
  # $23.1: Int = alignment.1 + 1
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:[rbp-43] $22.1:rax $23.1:rbx 
  .loc 1 86 13
  # $24.1: @FILE = call(write_286, $22.1, block_statement.1, $23.1)
  mov rdi, rax
  mov rsi, [rbp-43]
  mov rdx, rbx
  call write_286
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [discarded value]: block_statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $24.1:rax 
  .loc 1 86 13
  # $25.1: @FILE = call(end_line_335, $24.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__write_286__7)
  jmp .LABEL__write_286__7
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__write_286__9:
  .loc 1 88 39
  # $26.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $26.1:rbx 
  .loc 1 88 16
  # $27.1: @FILE = call(write_source_line_287, file.1, $26.1, alignment.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_287
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $27.1:rax 
  .loc 1 88 16
  # $28.1: @FILE = call(write_334, $27.1, '}')
  mov rdi, rax
  mov sil, 125
  call write_334
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $28.1:rax 
  .loc 1 88 9
  # return($28.1)
  mov [rbp-43], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] 
  # [discarded value]: block_statements.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__write_286__6:
  # AST_Break_Statement.3: @Object_Type = load_variable(AST_Break_Statement)
  lea rax, AST_Break_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] AST_Break_Statement.3:rax 
  .loc 1 91 9
  # $29.1: Boolean = call(is_338, statement.1, AST_Break_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Break_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:rax 
  # jump($29.1, .LABEL__write_286__11, .LABEL__write_286__12)
  test al, al
  mov [rbp-27], al
  jz .LABEL__write_286__12
.LABEL__write_286__11:
  .loc 1 92 16
  # $30.1: @FILE = call(write_332, file.1, "break")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_290[rip] # "break"
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $30.1:rax 
  .loc 1 92 9
  # return($30.1)
  mov [rbp-35], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] 
.LABEL__write_286__12:
  # AST_Expression_Statement.3: @Object_Type = load_variable(AST_Expression_Statement)
  lea rax, AST_Expression_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] AST_Expression_Statement.3:rax 
  .loc 1 95 9
  # $31.1: Boolean = call(is_338, statement.1, AST_Expression_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Expression_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:rax 
  # jump($31.1, .LABEL__write_286__14, .LABEL__write_286__15)
  test al, al
  mov [rbp-28], al
  jz .LABEL__write_286__15
.LABEL__write_286__14:
  .loc 1 96 28
  # $32.1: @AST_Expression_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $32.1:rax 
  .loc 1 96 27
  # $33.1: @AST_Expression = load_struct_member($32.1, expression)
  mov rbx, [rax+16]
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $33.1:rbx 
  .loc 1 96 16
  # $34.1: @FILE = call(write_290, file.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_290
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $34.1:rax 
  .loc 1 96 9
  # return($34.1)
  mov [rbp-36], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] 
.LABEL__write_286__15:
  # AST_Function_Statement.2: @Object_Type = load_variable(AST_Function_Statement)
  lea rax, AST_Function_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] AST_Function_Statement.2:rax 
  .loc 1 99 9
  # $35.1: Boolean = call(is_338, statement.1, AST_Function_Statement.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Function_Statement.2
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:rax 
  # jump($35.1, .LABEL__write_286__17, .LABEL__write_286__18)
  test al, al
  mov [rbp-29], al
  jz .LABEL__write_286__18
.LABEL__write_286__17:
  .loc 1 100 22
  # statement.1: @AST_Function_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax 
  .loc 1 101 20
  # $37.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax $37.1:rbx 
  .loc 1 101 9
  # $38.1: @FILE = call(write_310, file.1, $37.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-37], rax
  call write_310
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] $38.1:rax 
  .loc 1 101 9
  # $39.1: @FILE = call(write_332, $38.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_180[rip] # " :: ("
  call write_332
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] 
  .loc 1 102 32
  # $40.1: @AST_Function_Type = load_struct_member(statement.1, type)
  mov rax, [rbp-37]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] $40.1:rbx 
  .loc 1 102 32
  # $41.1: @List = load_struct_member($40.1, parameters)
  mov r15, [rbx+16]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] $41.1:r15 
  .loc 1 102 32
  # function_parameters.1: @List_Iterator = call(create_iterator_324, $41.1)
  mov rdi, r15
  call create_iterator_324
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:rax 
  .loc 1 103 13
  # $43.1: Boolean = call(has_next_327, function_parameters.1)
  mov rdi, rax
  mov [rbp-45], rax
  call has_next_327
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:rax 
  # jump($43.1, .LABEL__write_286__21, .LABEL__write_286__20)
  test al, al
  mov [rbp-46], al
  jz .LABEL__write_286__20
.LABEL__write_286__21:
  .loc 1 105 28
  # $45.1: @AST_Function_Parameter = call(next_328, function_parameters.1)
  mov rdi, [rbp-45]
  call next_328
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $45.1:rax 
  .loc 1 105 17
  # $46.1: @FILE = call(write_288, file.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_288
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] 
  .loc 1 106 21
  # $47.1: Boolean = call(has_next_327, function_parameters.1)
  mov rdi, [rbp-45]
  call has_next_327
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:rax 
  # jump($47.1, .LABEL__write_286__23, .LABEL__write_286__20)
  test al, al
  mov [rbp-47], al
  jz .LABEL__write_286__20
.LABEL__write_286__23:
  .loc 1 107 21
  # $48.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  # jump(.LABEL__write_286__21)
  jmp .LABEL__write_286__21
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
.LABEL__write_286__20:
  .loc 1 113 9
  # $49.1: @FILE = call(write_332, file.1, ") -> ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_234[rip] # ") -> "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $47.1:[rbp-47] 
  .loc 1 113 35
  # $50.1: @AST_Function_Type = load_struct_member(statement.1, type)
  mov rbx, [rbp-37]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $50.1:r15 $47.1:[rbp-47] 
  .loc 1 113 35
  # $51.1: @AST_Type = load_struct_member($50.1, return_type)
  mov r14, [r15+24]
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $51.1:r14 $47.1:[rbp-47] 
  .loc 1 113 9
  # $52.1: @FILE = call(write_289, $49.1, $51.1)
  mov rdi, rax
  mov rsi, r14
  call write_289
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  .loc 1 114 13
  # $53.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  mov rax, [rbp-37]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $53.1:rbx $47.1:[rbp-47] 
  .loc 1 114 13
  # $54.1: Boolean = $53.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:r15 $47.1:[rbp-47] 
  # jump($54.1, .LABEL__write_286__27, .LABEL__write_286__28)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__write_286__28
.LABEL__write_286__27:
  .loc 1 115 13
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_286__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] 
.LABEL__write_286__28:
  .loc 1 117 16
  # $55.1: @FILE = call(write_332, file.1, " ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_324[rip] # " "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $55.1:rax 
  .loc 1 117 38
  # $56.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  mov rbx, [rbp-37]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $55.1:rax $56.1:r15 
  .loc 1 117 16
  # $57.1: @FILE = call(write_286, $55.1, $56.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_286
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $57.1:rax 
  .loc 1 117 9
  # return($57.1)
  mov [rbp-56], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] 
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] 
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] 
  # [discarded value]: function_parameters.1
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] 
.LABEL__write_286__18:
  # AST_If_Statement.3: @Object_Type = load_variable(AST_If_Statement)
  lea rax, AST_If_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] AST_If_Statement.3:rax 
  .loc 1 120 9
  # $58.1: Boolean = call(is_338, statement.1, AST_If_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_If_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:rax 
  # jump($58.1, .LABEL__write_286__31, .LABEL__write_286__32)
  test al, al
  mov [rbp-30], al
  jz .LABEL__write_286__32
.LABEL__write_286__31:
  .loc 1 121 22
  # statement.1: @AST_If_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax 
  .loc 1 122 9
  # $60.1: @FILE = call(write_332, file.1, "if (")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_325[rip] # "if ("
  mov [rbp-38], rax
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $60.1:rax 
  .loc 1 122 34
  # $61.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rbx, [rbp-38]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $60.1:rax $61.1:r15 
  .loc 1 122 9
  # $62.1: @FILE = call(write_290, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $62.1:rax 
  .loc 1 122 9
  # $63.1: @FILE = call(write_332, $62.1, ") ")
  mov rdi, rax
  lea rsi, .LABEL__string_326[rip] # ") "
  call write_332
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $63.1:rax 
  .loc 1 122 84
  # $64.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  mov rbx, [rbp-38]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $63.1:rax $64.1:r15 
  .loc 1 122 9
  # $65.1: @FILE = call(write_286, $63.1, $64.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_286
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] 
  .loc 1 123 13
  # $66.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rax, [rbp-38]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax:[rbp-38] $66.1:rbx 
  .loc 1 123 13
  # $67.1: Boolean = $66.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax:[rbp-38] $67.1:r15 
  # jump($67.1, .LABEL__write_286__33, .LABEL__write_286__34)
  test r15b, r15b
  mov [rbp-39], r15b
  jz .LABEL__write_286__34
.LABEL__write_286__33:
  .loc 1 124 13
  # $68.1: @FILE = call(write_332, file.1, " else ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_327[rip] # " else "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] $68.1:rax 
  .loc 1 124 40
  # $69.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-38]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $67.1:[rbp-39] $68.1:rax $69.1:r15 
  .loc 1 124 13
  # $70.1: @FILE = call(write_286, $68.1, $69.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_286
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # jump(.LABEL__write_286__34)
.LABEL__write_286__34:
  .loc 1 126 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_286__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] 
.LABEL__write_286__32:
  # AST_Loop_Statement.3: @Object_Type = load_variable(AST_Loop_Statement)
  lea rax, AST_Loop_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] AST_Loop_Statement.3:rax 
  .loc 1 129 9
  # $71.1: Boolean = call(is_338, statement.1, AST_Loop_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Loop_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:rax 
  # jump($71.1, .LABEL__write_286__36, .LABEL__write_286__37)
  test al, al
  mov [rbp-31], al
  jz .LABEL__write_286__37
.LABEL__write_286__36:
  .loc 1 130 22
  # statement.1: @AST_Loop_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] statement.1:rax 
  .loc 1 131 16
  # $73.1: @FILE = call(write_332, file.1, "loop ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_328[rip] # "loop "
  mov [rbp-39], rax
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] statement.1:[rbp-39] $73.1:rax 
  .loc 1 131 42
  # $74.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rbx, [rbp-39]
  mov r15, [rbx+16]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $73.1:rax $74.1:r15 
  .loc 1 131 16
  # $75.1: @FILE = call(write_286, $73.1, $74.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_286
  # [discarded value]: $74.1
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $75.1:rax 
  .loc 1 131 9
  # return($75.1)
  mov [rbp-39], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] 
.LABEL__write_286__37:
  # AST_Return_Statement.3: @Object_Type = load_variable(AST_Return_Statement)
  lea rax, AST_Return_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] AST_Return_Statement.3:rax 
  .loc 1 134 9
  # $76.1: Boolean = call(is_338, statement.1, AST_Return_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Return_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:rax 
  # jump($76.1, .LABEL__write_286__39, .LABEL__write_286__40)
  test al, al
  mov [rbp-32], al
  jz .LABEL__write_286__40
.LABEL__write_286__39:
  .loc 1 135 22
  # statement.1: @AST_Return_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax 
  .loc 1 136 9
  # $78.1: @FILE = call(write_332, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_269[rip] # "return"
  mov [rbp-40], rax
  call write_332
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] 
  .loc 1 137 13
  # $79.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax:[rbp-40] $79.1:rbx 
  .loc 1 137 13
  # $80.1: Boolean = $79.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax:[rbp-40] $80.1:r15 
  # jump($80.1, .LABEL__write_286__41, .LABEL__write_286__42)
  test r15b, r15b
  mov [rbp-41], r15b
  jz .LABEL__write_286__42
.LABEL__write_286__41:
  .loc 1 138 13
  # $81.1: @FILE = call(write_332, file.1, " ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_324[rip] # " "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] $81.1:rax 
  .loc 1 138 35
  # $82.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-40]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rbx:[rbp-40] $80.1:[rbp-41] $81.1:rax $82.1:r15 
  .loc 1 138 13
  # $83.1: @FILE = call(write_290, $81.1, $82.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # jump(.LABEL__write_286__42)
.LABEL__write_286__42:
  .loc 1 140 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_286__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] 
.LABEL__write_286__40:
  # AST_Struct_Statement.4: @Object_Type = load_variable(AST_Struct_Statement)
  lea rax, AST_Struct_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] AST_Struct_Statement.4:rax 
  .loc 1 143 9
  # $84.1: Boolean = call(is_338, statement.1, AST_Struct_Statement.4)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Struct_Statement.4
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:rax 
  # jump($84.1, .LABEL__write_286__44, .LABEL__write_286__45)
  test al, al
  mov [rbp-33], al
  jz .LABEL__write_286__45
.LABEL__write_286__44:
  .loc 1 144 22
  # statement.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax 
  .loc 1 145 20
  # $86.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax $86.1:rbx 
  .loc 1 145 9
  # $87.1: @FILE = call(write_310, file.1, $86.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-41], rax
  call write_310
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $87.1:rax 
  .loc 1 145 9
  # $88.1: @FILE = call(write_332, $87.1, " :: struct")
  mov rdi, rax
  lea rsi, .LABEL__string_329[rip] # " :: struct"
  call write_332
  # [discarded value]: $88.1
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] 
  .loc 1 146 13
  # $89.1: @AST_Type = load_struct_member(statement.1, base_type)
  mov rax, [rbp-41]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $89.1:rbx 
  .loc 1 146 13
  # $90.1: Boolean = $89.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:r15 
  # jump($90.1, .LABEL__write_286__46, .LABEL__write_286__47)
  test r15b, r15b
  mov [rbp-42], r15b
  jz .LABEL__write_286__47
.LABEL__write_286__46:
  .loc 1 147 13
  # $91.1: @FILE = call(write_332, file.1, " : ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_330[rip] # " : "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $91.1:rax 
  .loc 1 147 37
  # $92.1: @AST_Type = load_struct_member(statement.1, base_type)
  mov rbx, [rbp-41]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rbx:[rbp-41] $90.1:[rbp-42] $91.1:rax $92.1:r15 
  .loc 1 147 13
  # $93.1: @FILE = call(write_289, $91.1, $92.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $93.1
  # [discarded value]: $92.1
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # jump(.LABEL__write_286__47)
.LABEL__write_286__47:
  .loc 1 149 13
  # $94.1: @List = load_struct_member(statement.1, members)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $94.1:rbx 
  .loc 1 149 13
  # $95.1: Boolean = $94.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:r15 
  # jump($95.1, .LABEL__write_286__48, .LABEL__write_286__49)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__write_286__49
.LABEL__write_286__48:
  .loc 1 150 13
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_286__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
.LABEL__write_286__49:
  .loc 1 152 9
  # $96.1: @FILE = call(write_332, file.1, " {")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_244[rip] # " {"
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] $96.1:rax 
  .loc 1 152 9
  # $97.1: @FILE = call(end_line_335, $96.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
  .loc 1 153 20
  # $98.1: @List = load_struct_member(statement.1, members)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] $98.1:rbx 
  .loc 1 153 20
  # members.1: @List_Iterator = call(create_iterator_324, $98.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:rax 
  # jump(.LABEL__write_286__51)
  mov [rbp-51], rax
.LABEL__write_286__51:
  .loc 1 154 16
  # $100.1: Boolean = call(has_next_327, members.1)
  mov rdi, [rbp-51]
  call has_next_327
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:rax 
  # jump($100.1, .LABEL__write_286__52, .LABEL__write_286__53)
  test al, al
  mov [rbp-52], al
  jz .LABEL__write_286__53
.LABEL__write_286__52:
  .loc 1 155 23
  # member.1: @AST_Struct_Member = call(next_328, members.1)
  mov rdi, [rbp-51]
  call next_328
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax 
  .loc 1 156 36
  # $103.1: @Source_Location = load_struct_member(member.1, location)
  mov rbx, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax $103.1:rbx 
  .loc 1 156 53
  # $104.1: Int = alignment.1 + 1
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax $103.1:rbx $104.1:r15 
  .loc 1 156 13
  # $105.1: @FILE = call(write_source_line_287, file.1, $103.1, $104.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-60], rax
  call write_source_line_287
  # [discarded value]: $104.1
  # [discarded value]: $103.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $105.1:rax 
  .loc 1 156 74
  # $106.1: @Identifier_Token = load_struct_member(member.1, name)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rbx:[rbp-60] $105.1:rax $106.1:r15 
  .loc 1 156 13
  # $107.1: @FILE = call(write_310, $105.1, $106.1)
  mov rdi, rax
  mov rsi, r15
  call write_310
  # [discarded value]: $106.1
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $107.1:rax 
  .loc 1 156 13
  # $108.1: @FILE = call(write_332, $107.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $108.1:rax 
  .loc 1 156 105
  # $109.1: @AST_Type = load_struct_member(member.1, type)
  mov rbx, [rbp-60]
  mov r15, [rbx+16]
  # [discarded value]: member.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $108.1:rax $109.1:r15 
  .loc 1 156 13
  # $110.1: @FILE = call(write_289, $108.1, $109.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $109.1
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $110.1:rax 
  .loc 1 156 13
  # $111.1: @FILE = call(end_line_335, $110.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $111.1
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
  # jump(.LABEL__write_286__51)
  jmp .LABEL__write_286__51
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
.LABEL__write_286__53:
  .loc 1 158 39
  # $112.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $112.1:rbx 
  .loc 1 158 16
  # $113.1: @FILE = call(write_source_line_287, file.1, $112.1, alignment.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_287
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $113.1:rax 
  .loc 1 158 16
  # $114.1: @FILE = call(write_334, $113.1, '}')
  mov rdi, rax
  mov sil, 125
  call write_334
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $114.1:rax 
  .loc 1 158 9
  # return($114.1)
  mov [rbp-60], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $114.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
  # [discarded value]: $100.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] 
  # [discarded value]: members.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # [discarded value]: $90.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] 
.LABEL__write_286__45:
  # AST_Variable_Statement.3: @Object_Type = load_variable(AST_Variable_Statement)
  lea rax, AST_Variable_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] AST_Variable_Statement.3:rax 
  .loc 1 161 9
  # $115.1: Boolean = call(is_338, statement.1, AST_Variable_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:rax 
  # jump($115.1, .LABEL__write_286__55, .LABEL__write_286__56)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_286__56
.LABEL__write_286__55:
  .loc 1 162 22
  # statement.1: @AST_Variable_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax 
  .loc 1 163 21
  # $117.1: @AST_Variable_Statement = statement.1
  mov [rbp-42], rax
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $117.1:rax 
  .loc 1 163 20
  # $118.1: @Identifier_Token = load_struct_member($117.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $118.1:rbx 
  .loc 1 163 9
  # $119.1: @FILE = call(write_310, file.1, $118.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_310
  # [discarded value]: $119.1
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] 
  .loc 1 164 13
  # $120.1: @AST_Type = load_struct_member(statement.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $120.1:rbx 
  .loc 1 164 13
  # $121.1: Boolean = $120.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:r15 
  # jump($121.1, .LABEL__write_286__57, .LABEL__write_286__59)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__write_286__59
.LABEL__write_286__57:
  .loc 1 165 13
  # $125.1: @FILE = call(write_332, file.1, ": ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $125.1:rax 
  .loc 1 165 36
  # $126.1: @AST_Type = load_struct_member(statement.1, type)
  mov rbx, [rbp-42]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $125.1:rax $126.1:r15 
  .loc 1 165 13
  # $127.1: @FILE = call(write_289, $125.1, $126.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $127.1
  # [discarded value]: $126.1
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  .loc 1 166 17
  # $128.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $128.1:rbx 
  .loc 1 166 17
  # $129.1: Boolean = $128.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $129.1:r15 
  # jump($129.1, .LABEL__write_286__60, .LABEL__write_286__61)
  test r15b, r15b
  mov [rbp-44], r15b
  jz .LABEL__write_286__61
.LABEL__write_286__60:
  .loc 1 167 17
  # $130.1: @FILE = call(write_332, file.1, " = ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_239[rip] # " = "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $130.1:rax 
  .loc 1 167 41
  # $131.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $130.1:rax $131.1:r15 
  .loc 1 167 17
  # $132.1: @FILE = call(write_290, $130.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $132.1
  # [discarded value]: $131.1
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # jump(.LABEL__write_286__61)
.LABEL__write_286__61:
  .loc 1 169 17
  # $133.1: Boolean = load_struct_member(statement.1, is_external)
  mov rax, [rbp-42]
  mov bl, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:rbx 
  # jump($133.1, .LABEL__write_286__62, .LABEL__write_286__58)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__write_286__58
.LABEL__write_286__62:
  .loc 1 170 17
  # $134.1: @FILE = call(write_332, file.1, " = external")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_331[rip] # " = external"
  call write_332
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # jump(.LABEL__write_286__58)
.LABEL__write_286__58:
  .loc 1 175 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_286__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
.LABEL__write_286__59:
  .loc 1 173 13
  # $122.1: @FILE = call(write_332, file.1, " := ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_332[rip] # " := "
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $122.1:rax 
  .loc 1 173 38
  # $123.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $122.1:rax $123.1:r15 
  .loc 1 173 13
  # $124.1: @FILE = call(write_290, $122.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $124.1
  # [discarded value]: $123.1
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  # jump(.LABEL__write_286__58)
  jmp .LABEL__write_286__58
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] 
.LABEL__write_286__56:
  # AST_While_Statement.3: @Object_Type = load_variable(AST_While_Statement)
  lea rax, AST_While_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] AST_While_Statement.3:rax 
  .loc 1 178 9
  # $135.1: Boolean = call(is_338, statement.1, AST_While_Statement.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_While_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:rax 
  # jump($135.1, .LABEL__write_286__65, .LABEL__write_286__66)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_286__66
.LABEL__write_286__65:
  .loc 1 179 22
  # statement.1: @AST_While_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:rax 
  .loc 1 180 16
  # $137.1: @FILE = call(write_332, file.1, "while (")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_333[rip] # "while ("
  mov [rbp-43], rax
  call write_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $137.1:rax 
  .loc 1 180 44
  # $138.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rbx, [rbp-43]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:rbx:[rbp-43] $137.1:rax $138.1:r15 
  .loc 1 180 16
  # $139.1: @FILE = call(write_290, $137.1, $138.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $138.1
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $139.1:rax 
  .loc 1 180 16
  # $140.1: @FILE = call(write_332, $139.1, ") ")
  mov rdi, rax
  lea rsi, .LABEL__string_326[rip] # ") "
  call write_332
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $140.1:rax 
  .loc 1 180 94
  # $141.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rbx, [rbp-43]
  mov r15, [rbx+24]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $140.1:rax $141.1:r15 
  .loc 1 180 16
  # $142.1: @FILE = call(write_286, $140.1, $141.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_286
  # [discarded value]: $141.1
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $142.1:rax 
  .loc 1 180 9
  # return($142.1)
  mov [rbp-43], rax
  jmp .LABEL__write_286__end
  # [discarded value]: $142.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
.LABEL__write_286__66:
  .loc 1 183 5
  # $143.1: @FILE = call(flush_336, file.1)
  mov rdi, [rbp-8]
  call flush_336
  # [discarded value]: $143.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
  .loc 1 184 11
  # $144.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:rbx 
  .loc 1 184 31
  # $145.1: @String = call(clone_340, "Unsupported AST_Statement type: ")
  lea rdi, .LABEL__string_334[rip] # "Unsupported AST_Statement type: "
  mov [rbp-43], rbx
  call clone_340
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax 
  .loc 1 184 81
  # $146.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax $146.1:r15 
  .loc 1 184 81
  # $147.1: @String = load_struct_member_address($146.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $146.1
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax $147.1:r14 
  .loc 1 184 31
  # $148.1: @String = call(append_349, $145.1, $147.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $147.1
  # [discarded value]: $145.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $148.1:rax 
  .loc 1 184 5
  # call(abort_309, $144.1, $148.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_309
  # [discarded value]: $148.1
  # [discarded value]: $144.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] 
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] 
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] 
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] 
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] 
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] 
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] 
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] 
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [discarded value]: alignment.1
  # [discarded value]: statement.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_286__end:
  mov rsp, rbp
  pop rbp
  ret

write_286__stack_frame_size: .word 64

  .loc 1 187 1
  .text
write_source_line_287:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_source_line_287__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_source_line_287__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: file.1:rdi location.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx 
  .loc 1 188 16
  # $1.1: @Source = load_struct_member(location.1, source)
  mov rax, [rsi]
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $1.1:rax 
  .loc 1 188 16
  # $2.1: @String = load_struct_member($1.1, file_path)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $2.1:rbx 
  .loc 1 188 5
  # $3.1: @FILE = call(write_332, file.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call write_332
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] $3.1:rax 
  .loc 1 188 5
  # $4.1: @FILE = call(write_334, $3.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] 
  .loc 1 189 13
  # line.1: Int = load_struct_member(location.1, line)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: location.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx 
  .loc 1 190 9
  # $6.1: Boolean = line.1 < 1000
  cmp rbx, 1000
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx $6.1:rax 
  # jump($6.1, .LABEL__write_source_line_287__2, .LABEL__write_source_line_287__3)
  test al, al
  mov [rbp-25], al
  mov [rbp-33], rbx
  jz .LABEL__write_source_line_287__3
.LABEL__write_source_line_287__2:
  .loc 1 191 9
  # $7.1: @FILE = call(write_334, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_334
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # jump(.LABEL__write_source_line_287__3)
.LABEL__write_source_line_287__3:
  .loc 1 193 9
  # $8.1: Boolean = line.1 < 100
  cmp QWORD PTR [rbp-33], 100
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__write_source_line_287__4, .LABEL__write_source_line_287__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_source_line_287__5
.LABEL__write_source_line_287__4:
  .loc 1 194 9
  # $9.1: @FILE = call(write_334, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_334
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # jump(.LABEL__write_source_line_287__5)
.LABEL__write_source_line_287__5:
  .loc 1 196 9
  # $10.1: Boolean = line.1 < 10
  cmp QWORD PTR [rbp-33], 10
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:rax 
  # jump($10.1, .LABEL__write_source_line_287__6, .LABEL__write_source_line_287__7)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_source_line_287__7
.LABEL__write_source_line_287__6:
  .loc 1 197 9
  # $11.1: @FILE = call(write_334, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_334
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # jump(.LABEL__write_source_line_287__7)
.LABEL__write_source_line_287__7:
  .loc 1 199 5
  # $12.1: @FILE = call(write_331, file.1, line.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-33]
  call write_331
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] $12.1:rax 
  .loc 1 199 5
  # $13.1: @FILE = call(write_332, $12.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  .loc 1 201 20
  # space_count.1: Int = alignment.1 * 2
  mov rax, [rbp-16]
  imul rax, 2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:rax 
  # jump(.LABEL__write_source_line_287__8)
  mov [rbp-43], rax
.LABEL__write_source_line_287__8:
  # space_count.2: Int = phi(space_count.1, space_count.4)
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] 
  .loc 1 202 12
  # $15.1: Boolean = space_count.2 > 0
  cmp QWORD PTR [rbp-43], 0
  setg al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:rax 
  # jump($15.1, .LABEL__write_source_line_287__9, .LABEL__write_source_line_287__10)
  test al, al
  mov [rbp-44], al
  jz .LABEL__write_source_line_287__10
.LABEL__write_source_line_287__9:
  .loc 1 203 9
  # $16.1: @FILE = call(write_334, file.1, ' ')
  mov rdi, [rbp-24]
  mov sil, 32
  call write_334
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
  .loc 1 204 23
  # space_count.4: Int = space_count.2 - 1
  mov rax, [rbp-43]
  dec rax
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] space_count.4:rax:[rbp-43] 
  # jump(.LABEL__write_source_line_287__8)
  mov [rbp-43], rax
  jmp .LABEL__write_source_line_287__8
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] space_count.4:[rbp-43] 
  # [discarded value]: space_count.4
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
.LABEL__write_source_line_287__10:
  .loc 1 207 5
  # return(file.1)
  mov rax, [rbp-24]
  jmp .LABEL__write_source_line_287__end
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] 
  # [discarded value]: space_count.2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] 
  # [discarded value]: space_count.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] 
  # [discarded value]: line.1
  # [discarded value]: alignment.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_source_line_287__end:
  mov rsp, rbp
  pop rbp
  ret

write_source_line_287__stack_frame_size: .word 48

  .loc 1 210 1
  .text
write_288:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_288__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_288__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # parameter.1: @AST_Function_Parameter = load_variable(parameter)
  # [live values]: file.1:rdi parameter.1:rsi 
  .loc 1 211 23
  # $1.1: @Identifier_Token = load_struct_member(parameter.1, name)
  mov rax, [rsi+8]
  # [live values]: file.1:rdi parameter.1:rsi $1.1:rax 
  .loc 1 211 12
  # $2.1: @FILE = call(write_310, file.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call write_310
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: parameter.1:[rbp-8] $2.1:rax 
  .loc 1 211 12
  # $3.1: @FILE = call(write_332, $2.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $2.1
  # [live values]: parameter.1:[rbp-8] $3.1:rax 
  .loc 1 211 57
  # $4.1: @AST_Type = load_struct_member(parameter.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [discarded value]: parameter.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 1 211 12
  # $5.1: @FILE = call(write_289, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 1 211 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__write_288__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__write_288__end:
  mov rsp, rbp
  pop rbp
  ret

write_288__stack_frame_size: .word 16

  .loc 1 214 1
  .text
write_289:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_289__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_289__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  # AST_Array_Type.3: @Object_Type = load_variable(AST_Array_Type)
  lea rax, AST_Array_Type[rip]
  # [live values]: file.1:rdi type.1:rsi AST_Array_Type.3:rax 
  .loc 1 215 9
  # $1.1: Boolean = call(is_338, type.1, AST_Array_Type.3)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Array_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_289__2, .LABEL__write_289__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_289__3
.LABEL__write_289__2:
  .loc 1 216 17
  # type.1: @AST_Array_Type = type.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax 
  .loc 1 217 13
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax $3.1:rbx 
  .loc 1 217 13
  # $4.1: Boolean = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax $4.1:r15 
  # jump($4.1, .LABEL__write_289__4, .LABEL__write_289__5)
  test r15b, r15b
  mov [rbp-25], rax
  mov [rbp-26], r15b
  jz .LABEL__write_289__5
.LABEL__write_289__4:
  .loc 1 218 20
  # $5.1: @FILE = call(write_334, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  call write_334
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 1 218 42
  # $6.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $5.1:rax $6.1:r15 
  .loc 1 218 20
  # $7.1: @FILE = call(write_289, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $7.1:rax 
  .loc 1 218 20
  # $8.1: @FILE = call(write_332, $7.1, "; ")
  mov rdi, rax
  lea rsi, .LABEL__string_335[rip] # "; "
  call write_332
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $8.1:rax 
  .loc 1 218 76
  # $9.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $8.1:rax $9.1:r15 
  .loc 1 218 20
  # $10.1: @FILE = call(write_290, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $10.1:rax 
  .loc 1 218 20
  # $11.1: @FILE = call(write_334, $10.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_334
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $11.1:rax 
  .loc 1 218 13
  # return($11.1)
  mov [rbp-34], rax
  jmp .LABEL__write_289__end
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__write_289__5:
  .loc 1 220 16
  # $12.1: @FILE = call(write_334, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  call write_334
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $12.1:rax 
  .loc 1 220 38
  # $13.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $12.1:rax $13.1:r15 
  .loc 1 220 16
  # $14.1: @FILE = call(write_289, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $14.1:rax 
  .loc 1 220 16
  # $15.1: @FILE = call(write_334, $14.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_334
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $15.1:rax 
  .loc 1 220 9
  # return($15.1)
  mov [rbp-34], rax
  jmp .LABEL__write_289__end
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_289__3:
  # AST_Named_Type.3: @Object_Type = load_variable(AST_Named_Type)
  lea rax, AST_Named_Type[rip]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] AST_Named_Type.3:rax 
  .loc 1 223 9
  # $16.1: Boolean = call(is_338, type.1, AST_Named_Type.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Named_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:rax 
  # jump($16.1, .LABEL__write_289__8, .LABEL__write_289__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_289__9
.LABEL__write_289__8:
  .loc 1 224 28
  # $17.1: @AST_Named_Type = type.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $17.1:rax 
  .loc 1 224 27
  # $18.1: @Identifier_Token = load_struct_member($17.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $18.1:rbx 
  .loc 1 224 16
  # $19.1: @FILE = call(write_310, file.1, $18.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_310
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $19.1:rax 
  .loc 1 224 9
  # return($19.1)
  mov [rbp-26], rax
  jmp .LABEL__write_289__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] 
.LABEL__write_289__9:
  # AST_Pointer_Type.3: @Object_Type = load_variable(AST_Pointer_Type)
  lea rax, AST_Pointer_Type[rip]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] AST_Pointer_Type.3:rax 
  .loc 1 227 9
  # $20.1: Boolean = call(is_338, type.1, AST_Pointer_Type.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Pointer_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:rax 
  # jump($20.1, .LABEL__write_289__11, .LABEL__write_289__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_289__12
.LABEL__write_289__11:
  .loc 1 228 16
  # $21.1: @FILE = call(write_334, file.1, '@')
  mov rdi, [rbp-8]
  mov sil, 64
  call write_334
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax 
  .loc 1 228 39
  # $22.1: @AST_Pointer_Type = type.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax $22.1:rbx 
  .loc 1 228 38
  # $23.1: @AST_Type = load_struct_member($22.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax $23.1:r15 
  .loc 1 228 16
  # $24.1: @FILE = call(write_289, $21.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $23.1
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $24.1:rax 
  .loc 1 228 9
  # return($24.1)
  mov [rbp-27], rax
  jmp .LABEL__write_289__end
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
.LABEL__write_289__12:
  .loc 1 231 5
  # $25.1: @FILE = call(flush_336, file.1)
  mov rdi, [rbp-8]
  call flush_336
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
  .loc 1 232 11
  # $26.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:rbx 
  .loc 1 232 26
  # $27.1: @String = call(clone_340, "Unsupported AST_Type type: ")
  lea rdi, .LABEL__string_336[rip] # "Unsupported AST_Type type: "
  mov [rbp-27], rbx
  call clone_340
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax 
  .loc 1 232 71
  # $28.1: @Object_Type = load_struct_member(type.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax $28.1:r15 
  .loc 1 232 71
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax $29.1:r14 
  .loc 1 232 26
  # $30.1: @String = call(append_349, $27.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $30.1:rax 
  .loc 1 232 5
  # call(abort_309, $26.1, $30.1)
  mov rdi, [rbp-27]
  mov rsi, rax
  call abort_309
  # [discarded value]: $30.1
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] 
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_289__end:
  mov rsp, rbp
  pop rbp
  ret

write_289__stack_frame_size: .word 48

  .loc 1 235 1
  .text
write_290:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_290__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_290__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: file.1:rdi expression.1:rsi 
  # AST_Array_Access_Expression.4: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rax, AST_Array_Access_Expression[rip]
  # [live values]: file.1:rdi expression.1:rsi AST_Array_Access_Expression.4:rax 
  .loc 1 236 9
  # $1.1: Boolean = call(is_338, expression.1, AST_Array_Access_Expression.4)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Array_Access_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_290__2, .LABEL__write_290__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_290__3
.LABEL__write_290__2:
  .loc 1 237 28
  # $2.1: @AST_Array_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 1 237 27
  # $3.1: @AST_Expression = load_struct_member($2.1, array_expression)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rbx 
  .loc 1 237 16
  # $4.1: @FILE = call(write_290, file.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_290
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  .loc 1 237 16
  # $5.1: @FILE = call(write_334, $4.1, '[')
  mov rdi, rax
  mov sil, 91
  call write_334
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 1 237 108
  # $6.1: @AST_Array_Access_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax $6.1:rbx 
  .loc 1 237 107
  # $7.1: @AST_Expression = load_struct_member($6.1, index_expression)
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax $7.1:r15 
  .loc 1 237 16
  # $8.1: @FILE = call(write_290, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $8.1:rax 
  .loc 1 237 16
  # $9.1: @FILE = call(write_334, $8.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_334
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $9.1:rax 
  .loc 1 237 9
  # return($9.1)
  mov [rbp-25], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_290__3:
  # AST_Binary_Expression.2: @Object_Type = load_variable(AST_Binary_Expression)
  lea rax, AST_Binary_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] AST_Binary_Expression.2:rax 
  .loc 1 240 9
  # $10.1: Boolean = call(is_338, expression.1, AST_Binary_Expression.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Binary_Expression.2
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__write_290__5, .LABEL__write_290__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_290__6
.LABEL__write_290__5:
  .loc 1 241 9
  # $11.1: @FILE = call(write_334, file.1, '(')
  mov rdi, [rbp-8]
  mov sil, 40
  call write_334
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax 
  .loc 1 241 32
  # $12.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax $12.1:rbx 
  .loc 1 241 31
  # $13.1: @AST_Expression = load_struct_member($12.1, left_expression)
  mov r15, [rbx+16]
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax $13.1:r15 
  .loc 1 241 9
  # $14.1: @FILE = call(write_290, $11.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] 
  # AST_Add_Expression.3: @Object_Type = load_variable(AST_Add_Expression)
  lea rax, AST_Add_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] AST_Add_Expression.3:rax 
  .loc 1 242 13
  # $15.1: Boolean = call(is_338, expression.1, AST_Add_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Add_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:rax 
  # jump($15.1, .LABEL__write_290__7, .LABEL__write_290__8)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_290__8
.LABEL__write_290__7:
  .loc 1 243 20
  # $16.1: @FILE = call(write_332, file.1, " + ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_275[rip] # " + "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax 
  .loc 1 243 45
  # $17.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax $17.1:rbx 
  .loc 1 243 44
  # $18.1: @AST_Expression = load_struct_member($17.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax $18.1:r15 
  .loc 1 243 20
  # $19.1: @FILE = call(write_290, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $19.1:rax 
  .loc 1 243 20
  # $20.1: @FILE = call(write_334, $19.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $20.1:rax 
  .loc 1 243 13
  # return($20.1)
  mov [rbp-27], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] 
.LABEL__write_290__8:
  # AST_Divide_Expression.3: @Object_Type = load_variable(AST_Divide_Expression)
  lea rax, AST_Divide_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] AST_Divide_Expression.3:rax 
  .loc 1 245 13
  # $21.1: Boolean = call(is_338, expression.1, AST_Divide_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Divide_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:rax 
  # jump($21.1, .LABEL__write_290__10, .LABEL__write_290__11)
  test al, al
  mov [rbp-20], al
  jz .LABEL__write_290__11
.LABEL__write_290__10:
  .loc 1 246 20
  # $22.1: @FILE = call(write_332, file.1, " / ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_276[rip] # " / "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax 
  .loc 1 246 45
  # $23.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax $23.1:rbx 
  .loc 1 246 44
  # $24.1: @AST_Expression = load_struct_member($23.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax $24.1:r15 
  .loc 1 246 20
  # $25.1: @FILE = call(write_290, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $25.1:rax 
  .loc 1 246 20
  # $26.1: @FILE = call(write_334, $25.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $26.1:rax 
  .loc 1 246 13
  # return($26.1)
  mov [rbp-28], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] 
.LABEL__write_290__11:
  # AST_Equals_Expression.3: @Object_Type = load_variable(AST_Equals_Expression)
  lea rax, AST_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] AST_Equals_Expression.3:rax 
  .loc 1 248 13
  # $27.1: Boolean = call(is_338, expression.1, AST_Equals_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:rax 
  # jump($27.1, .LABEL__write_290__13, .LABEL__write_290__14)
  test al, al
  mov [rbp-21], al
  jz .LABEL__write_290__14
.LABEL__write_290__13:
  .loc 1 249 20
  # $28.1: @FILE = call(write_332, file.1, " == ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_277[rip] # " == "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax 
  .loc 1 249 46
  # $29.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax $29.1:rbx 
  .loc 1 249 45
  # $30.1: @AST_Expression = load_struct_member($29.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax $30.1:r15 
  .loc 1 249 20
  # $31.1: @FILE = call(write_290, $28.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $31.1:rax 
  .loc 1 249 20
  # $32.1: @FILE = call(write_334, $31.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $32.1:rax 
  .loc 1 249 13
  # return($32.1)
  mov [rbp-29], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] 
.LABEL__write_290__14:
  # AST_Greater_Than_Expression.3: @Object_Type = load_variable(AST_Greater_Than_Expression)
  lea rax, AST_Greater_Than_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] AST_Greater_Than_Expression.3:rax 
  .loc 1 251 13
  # $33.1: Boolean = call(is_338, expression.1, AST_Greater_Than_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Greater_Than_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:rax 
  # jump($33.1, .LABEL__write_290__16, .LABEL__write_290__17)
  test al, al
  mov [rbp-22], al
  jz .LABEL__write_290__17
.LABEL__write_290__16:
  .loc 1 252 20
  # $34.1: @FILE = call(write_332, file.1, " > ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_278[rip] # " > "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax 
  .loc 1 252 45
  # $35.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax $35.1:rbx 
  .loc 1 252 44
  # $36.1: @AST_Expression = load_struct_member($35.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax $36.1:r15 
  .loc 1 252 20
  # $37.1: @FILE = call(write_290, $34.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $36.1
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $37.1:rax 
  .loc 1 252 20
  # $38.1: @FILE = call(write_334, $37.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $38.1:rax 
  .loc 1 252 13
  # return($38.1)
  mov [rbp-30], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] 
.LABEL__write_290__17:
  # AST_Greater_Than_Or_Equals_Expression.3: @Object_Type = load_variable(AST_Greater_Than_Or_Equals_Expression)
  lea rax, AST_Greater_Than_Or_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] AST_Greater_Than_Or_Equals_Expression.3:rax 
  .loc 1 254 13
  # $39.1: Boolean = call(is_338, expression.1, AST_Greater_Than_Or_Equals_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Greater_Than_Or_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:rax 
  # jump($39.1, .LABEL__write_290__19, .LABEL__write_290__20)
  test al, al
  mov [rbp-23], al
  jz .LABEL__write_290__20
.LABEL__write_290__19:
  .loc 1 255 20
  # $40.1: @FILE = call(write_332, file.1, " >= ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_279[rip] # " >= "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax 
  .loc 1 255 46
  # $41.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax $41.1:rbx 
  .loc 1 255 45
  # $42.1: @AST_Expression = load_struct_member($41.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax $42.1:r15 
  .loc 1 255 20
  # $43.1: @FILE = call(write_290, $40.1, $42.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $42.1
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $43.1:rax 
  .loc 1 255 20
  # $44.1: @FILE = call(write_334, $43.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $44.1:rax 
  .loc 1 255 13
  # return($44.1)
  mov [rbp-31], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] 
.LABEL__write_290__20:
  # AST_Less_Than_Expression.3: @Object_Type = load_variable(AST_Less_Than_Expression)
  lea rax, AST_Less_Than_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] AST_Less_Than_Expression.3:rax 
  .loc 1 257 13
  # $45.1: Boolean = call(is_338, expression.1, AST_Less_Than_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Less_Than_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:rax 
  # jump($45.1, .LABEL__write_290__22, .LABEL__write_290__23)
  test al, al
  mov [rbp-24], al
  jz .LABEL__write_290__23
.LABEL__write_290__22:
  .loc 1 258 20
  # $46.1: @FILE = call(write_332, file.1, " < ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_280[rip] # " < "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax 
  .loc 1 258 45
  # $47.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax $47.1:rbx 
  .loc 1 258 44
  # $48.1: @AST_Expression = load_struct_member($47.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax $48.1:r15 
  .loc 1 258 20
  # $49.1: @FILE = call(write_290, $46.1, $48.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $48.1
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $49.1:rax 
  .loc 1 258 20
  # $50.1: @FILE = call(write_334, $49.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $50.1:rax 
  .loc 1 258 13
  # return($50.1)
  mov [rbp-32], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] 
.LABEL__write_290__23:
  # AST_Less_Than_Or_Equals_Expression.3: @Object_Type = load_variable(AST_Less_Than_Or_Equals_Expression)
  lea rax, AST_Less_Than_Or_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] AST_Less_Than_Or_Equals_Expression.3:rax 
  .loc 1 260 13
  # $51.1: Boolean = call(is_338, expression.1, AST_Less_Than_Or_Equals_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Less_Than_Or_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:rax 
  # jump($51.1, .LABEL__write_290__25, .LABEL__write_290__26)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_290__26
.LABEL__write_290__25:
  .loc 1 261 20
  # $52.1: @FILE = call(write_332, file.1, " <= ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_281[rip] # " <= "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax 
  .loc 1 261 46
  # $53.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax $53.1:rbx 
  .loc 1 261 45
  # $54.1: @AST_Expression = load_struct_member($53.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax $54.1:r15 
  .loc 1 261 20
  # $55.1: @FILE = call(write_290, $52.1, $54.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $54.1
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $55.1:rax 
  .loc 1 261 20
  # $56.1: @FILE = call(write_334, $55.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $56.1:rax 
  .loc 1 261 13
  # return($56.1)
  mov [rbp-33], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] 
.LABEL__write_290__26:
  # AST_Logic_And_Expression.3: @Object_Type = load_variable(AST_Logic_And_Expression)
  lea rax, AST_Logic_And_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] AST_Logic_And_Expression.3:rax 
  .loc 1 263 13
  # $57.1: Boolean = call(is_338, expression.1, AST_Logic_And_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Logic_And_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:rax 
  # jump($57.1, .LABEL__write_290__28, .LABEL__write_290__29)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_290__29
.LABEL__write_290__28:
  .loc 1 264 20
  # $58.1: @FILE = call(write_332, file.1, " && ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_337[rip] # " && "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax 
  .loc 1 264 46
  # $59.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax $59.1:rbx 
  .loc 1 264 45
  # $60.1: @AST_Expression = load_struct_member($59.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax $60.1:r15 
  .loc 1 264 20
  # $61.1: @FILE = call(write_290, $58.1, $60.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $61.1:rax 
  .loc 1 264 20
  # $62.1: @FILE = call(write_334, $61.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $62.1:rax 
  .loc 1 264 13
  # return($62.1)
  mov [rbp-34], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] 
.LABEL__write_290__29:
  # AST_Logic_Or_Expression.3: @Object_Type = load_variable(AST_Logic_Or_Expression)
  lea rax, AST_Logic_Or_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] AST_Logic_Or_Expression.3:rax 
  .loc 1 266 13
  # $63.1: Boolean = call(is_338, expression.1, AST_Logic_Or_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Logic_Or_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:rax 
  # jump($63.1, .LABEL__write_290__31, .LABEL__write_290__32)
  test al, al
  mov [rbp-27], al
  jz .LABEL__write_290__32
.LABEL__write_290__31:
  .loc 1 267 20
  # $64.1: @FILE = call(write_332, file.1, " || ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_338[rip] # " || "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax 
  .loc 1 267 46
  # $65.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax $65.1:rbx 
  .loc 1 267 45
  # $66.1: @AST_Expression = load_struct_member($65.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax $66.1:r15 
  .loc 1 267 20
  # $67.1: @FILE = call(write_290, $64.1, $66.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $66.1
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $67.1:rax 
  .loc 1 267 20
  # $68.1: @FILE = call(write_334, $67.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $68.1:rax 
  .loc 1 267 13
  # return($68.1)
  mov [rbp-35], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] 
.LABEL__write_290__32:
  # AST_Modulo_Expression.3: @Object_Type = load_variable(AST_Modulo_Expression)
  lea rax, AST_Modulo_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] AST_Modulo_Expression.3:rax 
  .loc 1 269 13
  # $69.1: Boolean = call(is_338, expression.1, AST_Modulo_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Modulo_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:rax 
  # jump($69.1, .LABEL__write_290__34, .LABEL__write_290__35)
  test al, al
  mov [rbp-28], al
  jz .LABEL__write_290__35
.LABEL__write_290__34:
  .loc 1 270 20
  # $70.1: @FILE = call(write_332, file.1, " // ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_282[rip] # " // "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax 
  .loc 1 270 46
  # $71.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax $71.1:rbx 
  .loc 1 270 45
  # $72.1: @AST_Expression = load_struct_member($71.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax $72.1:r15 
  .loc 1 270 20
  # $73.1: @FILE = call(write_290, $70.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $72.1
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $73.1:rax 
  .loc 1 270 20
  # $74.1: @FILE = call(write_334, $73.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $74.1:rax 
  .loc 1 270 13
  # return($74.1)
  mov [rbp-36], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] 
.LABEL__write_290__35:
  # AST_Multiply_Expression.3: @Object_Type = load_variable(AST_Multiply_Expression)
  lea rax, AST_Multiply_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] AST_Multiply_Expression.3:rax 
  .loc 1 272 13
  # $75.1: Boolean = call(is_338, expression.1, AST_Multiply_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Multiply_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:rax 
  # jump($75.1, .LABEL__write_290__37, .LABEL__write_290__38)
  test al, al
  mov [rbp-29], al
  jz .LABEL__write_290__38
.LABEL__write_290__37:
  .loc 1 273 20
  # $76.1: @FILE = call(write_332, file.1, " * ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_283[rip] # " * "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax 
  .loc 1 273 45
  # $77.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax $77.1:rbx 
  .loc 1 273 44
  # $78.1: @AST_Expression = load_struct_member($77.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax $78.1:r15 
  .loc 1 273 20
  # $79.1: @FILE = call(write_290, $76.1, $78.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $78.1
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $79.1:rax 
  .loc 1 273 20
  # $80.1: @FILE = call(write_334, $79.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $80.1:rax 
  .loc 1 273 13
  # return($80.1)
  mov [rbp-37], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] 
.LABEL__write_290__38:
  # AST_Not_Equals_Expression.3: @Object_Type = load_variable(AST_Not_Equals_Expression)
  lea rax, AST_Not_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] AST_Not_Equals_Expression.3:rax 
  .loc 1 275 13
  # $81.1: Boolean = call(is_338, expression.1, AST_Not_Equals_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Not_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:rax 
  # jump($81.1, .LABEL__write_290__40, .LABEL__write_290__41)
  test al, al
  mov [rbp-30], al
  jz .LABEL__write_290__41
.LABEL__write_290__40:
  .loc 1 276 20
  # $82.1: @FILE = call(write_332, file.1, " != ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_284[rip] # " != "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax 
  .loc 1 276 46
  # $83.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax $83.1:rbx 
  .loc 1 276 45
  # $84.1: @AST_Expression = load_struct_member($83.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $83.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax $84.1:r15 
  .loc 1 276 20
  # $85.1: @FILE = call(write_290, $82.1, $84.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $84.1
  # [discarded value]: $82.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $85.1:rax 
  .loc 1 276 20
  # $86.1: @FILE = call(write_334, $85.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $85.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $86.1:rax 
  .loc 1 276 13
  # return($86.1)
  mov [rbp-38], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] 
.LABEL__write_290__41:
  # AST_Substract_Expression.3: @Object_Type = load_variable(AST_Substract_Expression)
  lea rax, AST_Substract_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] AST_Substract_Expression.3:rax 
  .loc 1 278 13
  # $87.1: Boolean = call(is_338, expression.1, AST_Substract_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Substract_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:rax 
  # jump($87.1, .LABEL__write_290__43, .LABEL__write_290__6)
  test al, al
  mov [rbp-31], al
  jz .LABEL__write_290__6
.LABEL__write_290__43:
  .loc 1 279 20
  # $88.1: @FILE = call(write_332, file.1, " - ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_285[rip] # " - "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax 
  .loc 1 279 45
  # $89.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax $89.1:rbx 
  .loc 1 279 44
  # $90.1: @AST_Expression = load_struct_member($89.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax $90.1:r15 
  .loc 1 279 20
  # $91.1: @FILE = call(write_290, $88.1, $90.1)
  mov rdi, rax
  mov rsi, r15
  call write_290
  # [discarded value]: $90.1
  # [discarded value]: $88.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $91.1:rax 
  .loc 1 279 20
  # $92.1: @FILE = call(write_334, $91.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_334
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $92.1:rax 
  .loc 1 279 13
  # return($92.1)
  mov [rbp-39], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $92.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
.LABEL__write_290__6:
  # AST_Call_Expression.4: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] AST_Call_Expression.4:rax $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  .loc 1 283 9
  # $93.1: Boolean = call(is_338, expression.1, AST_Call_Expression.4)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Call_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:rax $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # jump($93.1, .LABEL__write_290__46, .LABEL__write_290__47)
  test al, al
  mov [rbp-32], al
  jz .LABEL__write_290__47
.LABEL__write_290__46:
  .loc 1 284 21
  # $94.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $94.1:rax 
  .loc 1 284 20
  # $95.1: @AST_Expression = load_struct_member($94.1, callee_expression)
  mov rbx, [rax+16]
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $95.1:rbx 
  .loc 1 284 9
  # $96.1: @FILE = call(write_290, file.1, $95.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_290
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $96.1:rax 
  .loc 1 284 9
  # $97.1: @FILE = call(write_334, $96.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_334
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  .loc 1 285 28
  # $98.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $98.1:rax 
  .loc 1 285 27
  # $99.1: @List = load_struct_member($98.1, arguments)
  mov rbx, [rax+24]
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $99.1:rbx 
  .loc 1 285 27
  # call_arguments.1: @List_Iterator = call(create_iterator_324, $99.1)
  mov rdi, rbx
  call create_iterator_324
  # [discarded value]: $99.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:rax 
  .loc 1 286 13
  # $101.1: Boolean = call(has_next_327, call_arguments.1)
  mov rdi, rax
  mov [rbp-40], rax
  call has_next_327
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:rax 
  # jump($101.1, .LABEL__write_290__50, .LABEL__write_290__49)
  test al, al
  mov [rbp-41], al
  jz .LABEL__write_290__49
.LABEL__write_290__50:
  .loc 1 288 28
  # $103.1: @AST_Expression = call(next_328, call_arguments.1)
  mov rdi, [rbp-40]
  call next_328
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $103.1:rax 
  .loc 1 288 17
  # $104.1: @FILE = call(write_290, file.1, $103.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_290
  # [discarded value]: $104.1
  # [discarded value]: $103.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] 
  .loc 1 289 21
  # $105.1: Boolean = call(has_next_327, call_arguments.1)
  mov rdi, [rbp-40]
  call has_next_327
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:rax 
  # jump($105.1, .LABEL__write_290__52, .LABEL__write_290__49)
  test al, al
  mov [rbp-42], al
  jz .LABEL__write_290__49
.LABEL__write_290__52:
  .loc 1 290 21
  # $106.1: @FILE = call(write_332, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_332
  # [discarded value]: $106.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
  # jump(.LABEL__write_290__50)
  jmp .LABEL__write_290__50
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
.LABEL__write_290__49:
  .loc 1 296 16
  # $107.1: @FILE = call(write_334, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_334
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $107.1:rax $105.1:[rbp-42] 
  .loc 1 296 9
  # return($107.1)
  mov [rbp-50], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] 
  # [discarded value]: $101.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] 
  # [discarded value]: call_arguments.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
.LABEL__write_290__47:
  # AST_Cast_Expression.3: @Object_Type = load_variable(AST_Cast_Expression)
  lea rax, AST_Cast_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] AST_Cast_Expression.3:rax 
  .loc 1 299 9
  # $108.1: Boolean = call(is_338, expression.1, AST_Cast_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Cast_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:rax 
  # jump($108.1, .LABEL__write_290__57, .LABEL__write_290__58)
  test al, al
  mov [rbp-33], al
  jz .LABEL__write_290__58
.LABEL__write_290__57:
  .loc 1 300 28
  # $109.1: @AST_Cast_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $109.1:rax 
  .loc 1 300 27
  # $110.1: @AST_Expression = load_struct_member($109.1, value_expression)
  mov rbx, [rax+16]
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $110.1:rbx 
  .loc 1 300 16
  # $111.1: @FILE = call(write_290, file.1, $110.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_290
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $111.1:rax 
  .loc 1 300 16
  # $112.1: @FILE = call(write_332, $111.1, " as ")
  mov rdi, rax
  lea rsi, .LABEL__string_339[rip] # " as "
  call write_332
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax 
  .loc 1 300 103
  # $113.1: @AST_Cast_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax $113.1:rbx 
  .loc 1 300 102
  # $114.1: @AST_Type = load_struct_member($113.1, type)
  mov r15, [rbx+24]
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax $114.1:r15 
  .loc 1 300 16
  # $115.1: @FILE = call(write_289, $112.1, $114.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $114.1
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $115.1:rax 
  .loc 1 300 9
  # return($115.1)
  mov [rbp-41], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] 
.LABEL__write_290__58:
  # AST_Literal_Expression.4: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] AST_Literal_Expression.4:rax 
  .loc 1 303 9
  # $116.1: Boolean = call(is_338, expression.1, AST_Literal_Expression.4)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Literal_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:rax 
  # jump($116.1, .LABEL__write_290__60, .LABEL__write_290__61)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_290__61
.LABEL__write_290__60:
  .loc 1 304 28
  # $117.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $117.1:rax 
  .loc 1 304 27
  # $118.1: @Literal_Token = load_struct_member($117.1, literal)
  mov rbx, [rax+16]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $118.1:rbx 
  .loc 1 304 16
  # $119.1: @FILE = call(write_310, file.1, $118.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_310
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $119.1:rax 
  .loc 1 304 9
  # return($119.1)
  mov [rbp-42], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] 
.LABEL__write_290__61:
  # AST_New_Expression.3: @Object_Type = load_variable(AST_New_Expression)
  lea rax, AST_New_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] AST_New_Expression.3:rax 
  .loc 1 307 9
  # $120.1: Boolean = call(is_338, expression.1, AST_New_Expression.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_New_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:rax 
  # jump($120.1, .LABEL__write_290__63, .LABEL__write_290__64)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_290__64
.LABEL__write_290__63:
  .loc 1 308 16
  # $121.1: @FILE = call(write_332, file.1, "new ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_340[rip] # "new "
  call write_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax 
  .loc 1 308 42
  # $122.1: @AST_New_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax $122.1:rbx 
  .loc 1 308 41
  # $123.1: @AST_Type = load_struct_member($122.1, type)
  mov r15, [rbx+16]
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax $123.1:r15 
  .loc 1 308 16
  # $124.1: @FILE = call(write_289, $121.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_289
  # [discarded value]: $123.1
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $124.1:rax 
  .loc 1 308 9
  # return($124.1)
  mov [rbp-43], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $124.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] 
.LABEL__write_290__64:
  # AST_Member_Access_Expression.8: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] AST_Member_Access_Expression.8:rax 
  .loc 1 311 9
  # $125.1: Boolean = call(is_338, expression.1, AST_Member_Access_Expression.8)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Member_Access_Expression.8
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:rax 
  # jump($125.1, .LABEL__write_290__66, .LABEL__write_290__67)
  test al, al
  mov [rbp-36], al
  jz .LABEL__write_290__67
.LABEL__write_290__66:
  .loc 1 312 28
  # $126.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $126.1:rax 
  .loc 1 312 27
  # $127.1: @AST_Expression = load_struct_member($126.1, object_expression)
  mov rbx, [rax+16]
  # [discarded value]: $126.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $127.1:rbx 
  .loc 1 312 16
  # $128.1: @FILE = call(write_290, file.1, $127.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_290
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $128.1:rax 
  .loc 1 312 16
  # $129.1: @FILE = call(write_334, $128.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_334
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax 
  .loc 1 312 110
  # $130.1: @AST_Member_Access_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax $130.1:rbx 
  .loc 1 312 109
  # $131.1: @Identifier_Token = load_struct_member($130.1, member_name)
  mov r15, [rbx+24]
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax $131.1:r15 
  .loc 1 312 16
  # $132.1: @FILE = call(write_310, $129.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_310
  # [discarded value]: $131.1
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $132.1:rax 
  .loc 1 312 9
  # return($132.1)
  mov [rbp-44], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] 
.LABEL__write_290__67:
  # AST_Variable_Expression.10: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] AST_Variable_Expression.10:rax 
  .loc 1 315 9
  # $133.1: Boolean = call(is_338, expression.1, AST_Variable_Expression.10)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: AST_Variable_Expression.10
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:rax 
  # jump($133.1, .LABEL__write_290__69, .LABEL__write_290__70)
  test al, al
  mov [rbp-37], al
  jz .LABEL__write_290__70
.LABEL__write_290__69:
  .loc 1 316 28
  # $134.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $134.1:rax 
  .loc 1 316 27
  # $135.1: @Identifier_Token = load_struct_member($134.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $135.1:rbx 
  .loc 1 316 16
  # $136.1: @FILE = call(write_310, file.1, $135.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_310
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $136.1:rax 
  .loc 1 316 9
  # return($136.1)
  mov [rbp-45], rax
  jmp .LABEL__write_290__end
  # [discarded value]: $136.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
.LABEL__write_290__70:
  .loc 1 319 5
  # $137.1: @FILE = call(flush_336, file.1)
  mov rdi, [rbp-8]
  call flush_336
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
  .loc 1 320 11
  # $138.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:rbx 
  .loc 1 320 32
  # $139.1: @String = call(clone_340, "Unsupported AST_Expression type: ")
  lea rdi, .LABEL__string_341[rip] # "Unsupported AST_Expression type: "
  mov [rbp-45], rbx
  call clone_340
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax 
  .loc 1 320 83
  # $140.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax $140.1:r15 
  .loc 1 320 83
  # $141.1: @String = load_struct_member_address($140.1, name)
  mov r14, r15
  add r14, 8
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax $141.1:r14 
  .loc 1 320 32
  # $142.1: @String = call(append_349, $139.1, $141.1)
  mov rdi, rax
  mov rsi, r14
  call append_349
  # [discarded value]: $141.1
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $142.1:rax 
  .loc 1 320 5
  # call(abort_309, $138.1, $142.1)
  mov rdi, [rbp-45]
  mov rsi, rax
  call abort_309
  # [discarded value]: $142.1
  # [discarded value]: $138.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] 
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] 
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] 
  # [discarded value]: $116.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] 
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] 
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] 
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] 
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] 
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] 
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] 
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] 
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] 
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] 
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] 
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] 
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] 
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_290__end:
  mov rsp, rbp
  pop rbp
  ret

write_290__stack_frame_size: .word 64

  .loc 9 11 1
  .text
create_scanner_291:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_scanner_291__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_scanner_291__1:
  # source.1: @Source = load_variable(source)
  # [live values]: source.1:rdi 
  .loc 9 12 16
  # $1.1: @Scanner = new(Scanner)
  mov [rbp-8], rdi
  mov rdi, 40
  call malloc
  # [live values]: source.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, source, source.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: source.1
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, current_char_index, 0)
  mov QWORD PTR [rax+8], 0
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, current_line, 1)
  mov QWORD PTR [rax+16], 1
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, current_column, 1)
  mov QWORD PTR [rax+24], 1
  # [live values]: $1.1:rax 
  .loc 9 12 5
  # scanner.1: @Scanner = $1.1
  mov [rbp-8], rax
  # [discarded value]: $1.1
  # [live values]: scanner.1:rax 
  .loc 9 13 29
  # $2.1: @Token = call(scan_token_296, scanner.1)
  mov rdi, rax
  mov [rbp-8], rax
  call scan_token_296
  # [live values]: scanner.1:[rbp-8] $2.1:rax 
  .loc 9 13 5
  # store_struct_member(scanner.1, current_token, $2.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $2.1
  # [live values]: scanner.1:rbx:[rbp-8] 
  .loc 9 14 5
  # return(scanner.1)
  mov rax, rbx
  jmp .LABEL__create_scanner_291__end
  # [discarded value]: scanner.1
  # [live values]: 
.LABEL__create_scanner_291__end:
  mov rsp, rbp
  pop rbp
  ret

create_scanner_291__stack_frame_size: .word 16

  .loc 9 17 1
  .text
peek_token_292:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_token_292__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_token_292__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # offset.1: Int = load_variable(offset)
  # [live values]: self.1:rdi offset.1:rsi 
  .loc 9 18 9
  # $1.1: Boolean = offset.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi offset.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__peek_token_292__2, .LABEL__peek_token_292__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__peek_token_292__3
.LABEL__peek_token_292__2:
  .loc 9 19 9
  # call(abort_337, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_337
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__peek_token_292__3:
  .loc 9 21 14
  # token.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:rbx 
  # jump(.LABEL__peek_token_292__4)
  mov [rbp-25], rbx
.LABEL__peek_token_292__4:
  # offset.5: Int = phi(offset.1, offset.4)
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] 
  # token.2: @Token = phi(token.1, token.5)
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] 
  .loc 9 23 13
  # $3.1: @Token = load_struct_member(token.2, next_token)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rax:[rbp-25] $3.1:rbx 
  .loc 9 23 13
  # $4.1: Boolean = $3.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rax:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__peek_token_292__6, .LABEL__peek_token_292__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__peek_token_292__7
.LABEL__peek_token_292__6:
  .loc 9 24 32
  # $5.1: @Token = call(scan_token_296, self.1)
  mov rdi, [rbp-17]
  call scan_token_296
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 9 24 13
  # store_struct_member(token.2, next_token, $5.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rbx:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__peek_token_292__7)
.LABEL__peek_token_292__7:
  .loc 9 26 17
  # token.5: @Token = load_struct_member(token.2, next_token)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:rbx:[rbp-25] 
  .loc 9 27 13
  # $7.1: Boolean = offset.5 == 0
  cmp QWORD PTR [rbp-9], 0
  sete al
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:rbx:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__peek_token_292__8, .LABEL__peek_token_292__9)
  test al, al
  mov [rbp-27], al
  mov [rbp-25], rbx
  jz .LABEL__peek_token_292__9
.LABEL__peek_token_292__8:
  .loc 9 28 13
  # return(token.5)
  mov rax, [rbp-25]
  jmp .LABEL__peek_token_292__end
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] 
.LABEL__peek_token_292__9:
  .loc 9 30 18
  # offset.4: Int = offset.5 - 1
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] offset.4:rax:[rbp-9] 
  # jump(.LABEL__peek_token_292__4)
  mov [rbp-9], rax
  jmp .LABEL__peek_token_292__4
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] offset.4:[rbp-9] 
  # [discarded value]: offset.4
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] 
  # [discarded value]: token.5
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] 
  # [discarded value]: token.2
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] 
  # [discarded value]: offset.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__peek_token_292__end:
  mov rsp, rbp
  pop rbp
  ret

peek_token_292__stack_frame_size: .word 32

  .loc 9 34 1
  .text
next_token_293:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_token_293__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_token_293__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 35 9
  # $1.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 35 9
  # $2.1: @Token = load_struct_member($1.1, next_token)
  mov rbx, [rax+24]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 9 35 9
  # $3.1: Boolean = $2.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  # jump($3.1, .LABEL__next_token_293__2, .LABEL__next_token_293__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__next_token_293__3
.LABEL__next_token_293__2:
  .loc 9 36 9
  # $4.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 9 36 41
  # $5.1: @Token = call(scan_token_296, self.1)
  mov rdi, rax
  mov [rbp-17], rbx
  call scan_token_296
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] $4.1:[rbp-17] $5.1:rax 
  .loc 9 36 9
  # store_struct_member($4.1, next_token, $5.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__next_token_293__3)
.LABEL__next_token_293__3:
  .loc 9 38 26
  # $6.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $6.1:rbx 
  .loc 9 38 26
  # $7.1: @Token = load_struct_member($6.1, next_token)
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $7.1:r15 
  .loc 9 38 5
  # store_struct_member(self.1, current_token, $7.1)
  mov QWORD PTR [rax+32], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] 
  .loc 9 39 12
  # $8.1: @Token = load_struct_member(self.1, current_token)
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $8.1:rbx 
  .loc 9 39 5
  # return($8.1)
  mov rax, rbx
  mov [rbp-17], rbx
  jmp .LABEL__next_token_293__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_token_293__end:
  mov rsp, rbp
  pop rbp
  ret

next_token_293__stack_frame_size: .word 32

  .loc 9 42 1
  .text
peek_char_294:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_char_294__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_char_294__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 43 32
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 43 12
  # $2.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rdi]
  # [discarded value]: self.1
  # [live values]: $1.1:rax $2.1:rbx 
  .loc 9 43 12
  # $3.1: @Int8 = load_struct_member($2.1, content)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: $1.1:rax $3.1:r15 
  .loc 9 43 12
  # $4.1: Int8 = load_array_item($3.1, $1.1)
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: $4.1:rbx 
  .loc 9 43 5
  # return($4.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__peek_char_294__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__peek_char_294__end:
  mov rsp, rbp
  pop rbp
  ret

peek_char_294__stack_frame_size: .word 16

  .loc 9 46 1
  .text
next_char_295:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_char_295__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_char_295__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 47 38
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 47 18
  # $2.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rdi]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 47 18
  # $3.1: @Int8 = load_struct_member($2.1, content)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $1.1:rax $3.1:r15 
  .loc 9 47 18
  # next_char.1: Int8 = load_array_item($3.1, $1.1)
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi next_char.1:rbx 
  .loc 9 48 9
  # $5.1: Boolean = next_char.1 != '\0'
  cmp bl, 0
  setne al
  # [live values]: self.1:rdi next_char.1:rbx $5.1:rax 
  # jump($5.1, .LABEL__next_char_295__2, .LABEL__next_char_295__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], bl
  mov [rbp-10], rdi
  jz .LABEL__next_char_295__3
.LABEL__next_char_295__2:
  .loc 9 49 35
  # $6.1: Int = load_struct_member(self.1, current_char_index)
  mov rax, [rbp-10]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $6.1:rbx 
  .loc 9 49 35
  # $7.1: Int = $6.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $7.1:r15 
  .loc 9 49 9
  # store_struct_member(self.1, current_char_index, $7.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] 
  .loc 9 50 13
  # $8.1: Boolean = next_char.1 == '\n'
  cmp BYTE PTR [rbp-2], 10
  sete bl
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:rbx 
  # jump($8.1, .LABEL__next_char_295__4, .LABEL__next_char_295__6)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__next_char_295__6
.LABEL__next_char_295__4:
  .loc 9 51 33
  # $11.1: Int = load_struct_member(self.1, current_line)
  mov rax, [rbp-10]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $11.1:rbx 
  .loc 9 51 33
  # $12.1: Int = $11.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $12.1:r15 
  .loc 9 51 13
  # store_struct_member(self.1, current_line, $12.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  .loc 9 52 13
  # store_struct_member(self.1, current_column, 1)
  mov QWORD PTR [rax+24], 1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # jump(.LABEL__next_char_295__3)
.LABEL__next_char_295__3:
  .loc 9 57 5
  # return(next_char.1)
  mov al, [rbp-2]
  jmp .LABEL__next_char_295__end
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
.LABEL__next_char_295__6:
  .loc 9 54 35
  # $9.1: Int = load_struct_member(self.1, current_column)
  mov rax, [rbp-10]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $9.1:rbx 
  .loc 9 54 35
  # $10.1: Int = $9.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $10.1:r15 
  .loc 9 54 13
  # store_struct_member(self.1, current_column, $10.1)
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # jump(.LABEL__next_char_295__3)
  jmp .LABEL__next_char_295__3
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] 
  # [discarded value]: next_char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_char_295__end:
  mov rsp, rbp
  pop rbp
  ret

next_char_295__stack_frame_size: .word 16

  .loc 9 60 1
  .text
scan_token_296:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_token_296__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_token_296__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 14 4 19
  # $2.1: @Int8 = call(malloc, 16)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 9 61 21
  # $3.1: @String = new(String)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, data, $2.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, data_size, 16)
  mov QWORD PTR [rax+8], 16
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 9 61 5
  # token_lexeme.1: @String = $3.1
  mov [rbp-16], rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:rax 
  .loc 9 62 52
  # $4.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 
  .loc 9 62 72
  # $5.1: Int = load_struct_member(self.1, current_line)
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 
  .loc 9 62 100
  # $6.1: Int = load_struct_member(self.1, current_column)
  mov r13, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 $6.1:r13 
  .loc 9 62 23
  # $7.1: @Source_Location = new(Source_Location)
  mov [rbp-16], rax
  mov [rbp-24], r13
  mov [rbp-32], r14
  mov [rbp-40], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $4.1:[rbp-40] $5.1:[rbp-32] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, source, $4.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $5.1:[rbp-32] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, line, $5.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, column, $6.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $7.1:rax 
  .loc 9 62 5
  # token_location.1: @Source_Location = $7.1
  mov [rbp-24], rax
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  .loc 9 64 18
  # next_char.1: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call peek_char_294
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:rax 
  .loc 9 65 9
  # $9.1: Boolean = call(is_identifier_start_298, next_char.1)
  mov dil, al
  mov [rbp-25], al
  call is_identifier_start_298
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__scan_token_296__2, .LABEL__scan_token_296__3)
  test al, al
  mov [rbp-26], al
  jz .LABEL__scan_token_296__3
.LABEL__scan_token_296__2:
  .loc 9 66 16
  # $10.1: @Token = call(scan_identifier_token_305, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_identifier_token_305
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $10.1:rax 
  .loc 9 66 9
  # return($10.1)
  mov [rbp-34], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] 
.LABEL__scan_token_296__3:
  .loc 9 68 9
  # $11.1: Boolean = call(is_digit_297, next_char.1)
  mov dil, [rbp-25]
  call is_digit_297
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__scan_token_296__5, .LABEL__scan_token_296__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_token_296__6
.LABEL__scan_token_296__5:
  .loc 9 69 16
  # $12.1: @Token = call(scan_integer_token_306, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_integer_token_306
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $12.1:rax 
  .loc 9 69 9
  # return($12.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__scan_token_296__6:
  .loc 9 71 9
  # $13.1: Boolean = next_char.1 == '\''
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:rax 
  # jump($13.1, .LABEL__scan_token_296__8, .LABEL__scan_token_296__9)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_token_296__9
.LABEL__scan_token_296__8:
  .loc 9 72 16
  # $14.1: @Token = call(scan_character_token_302, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_character_token_302
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $14.1:rax 
  .loc 9 72 9
  # return($14.1)
  mov [rbp-36], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_token_296__9:
  .loc 9 74 9
  # $15.1: Boolean = next_char.1 == '"'
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # jump($15.1, .LABEL__scan_token_296__11, .LABEL__scan_token_296__12)
  test al, al
  mov [rbp-29], al
  jz .LABEL__scan_token_296__12
.LABEL__scan_token_296__11:
  .loc 9 75 16
  # $16.1: @Token = call(scan_string_token_308, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_string_token_308
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $16.1:rax 
  .loc 9 75 9
  # return($16.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] 
.LABEL__scan_token_296__12:
  .loc 9 77 9
  # $17.1: Boolean = next_char.1 == '\\'
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:rax 
  # jump($17.1, .LABEL__scan_token_296__14, .LABEL__scan_token_296__15)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_token_296__15
.LABEL__scan_token_296__14:
  .loc 9 78 16
  # $18.1: @Token = call(scan_comment_token_304, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_comment_token_304
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $18.1:rax 
  .loc 9 78 9
  # return($18.1)
  mov [rbp-38], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] 
.LABEL__scan_token_296__15:
  .loc 9 80 9
  # $19.1: Boolean = call(is_space_301, next_char.1)
  mov dil, [rbp-25]
  call is_space_301
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:rax 
  # jump($19.1, .LABEL__scan_token_296__17, .LABEL__scan_token_296__18)
  test al, al
  mov [rbp-31], al
  jz .LABEL__scan_token_296__18
.LABEL__scan_token_296__17:
  .loc 9 81 16
  # $20.1: @Token = call(scan_space_token_307, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_space_token_307
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $20.1:rax 
  .loc 9 81 9
  # return($20.1)
  mov [rbp-39], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] 
.LABEL__scan_token_296__18:
  .loc 9 83 9
  # $21.1: Boolean = next_char.1 == '\n'
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:rax 
  # jump($21.1, .LABEL__scan_token_296__20, .LABEL__scan_token_296__21)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_token_296__21
.LABEL__scan_token_296__20:
  .loc 9 84 9
  # $22.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-8]
  call next_char_295
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
  .loc 9 85 16
  # $23.1: @End_Of_Line_Token = new(End_Of_Line_Token)
  mov rdi, 32
  call malloc
  lea rbx, End_Of_Line_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $23.1:rax 
  # store_struct_member($23.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $23.1:rax 
  # store_struct_member($23.1, location, token_location.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $23.1:rax 
  # store_struct_member($23.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $23.1:rax 
  .loc 9 85 9
  # return($23.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
.LABEL__scan_token_296__21:
  .loc 9 87 9
  # $24.1: Boolean = next_char.1 == '\0'
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:rax 
  # jump($24.1, .LABEL__scan_token_296__23, .LABEL__scan_token_296__24)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_token_296__24
.LABEL__scan_token_296__23:
  .loc 9 88 9
  # $25.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-8]
  call next_char_295
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  .loc 9 89 16
  # $26.1: @End_Of_File_Token = new(End_Of_File_Token)
  mov rdi, 32
  call malloc
  lea rbx, End_Of_File_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $26.1:rax 
  # store_struct_member($26.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $26.1:rax 
  # store_struct_member($26.1, location, token_location.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $26.1:rax 
  # store_struct_member($26.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $26.1:rax 
  .loc 9 89 9
  # return($26.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
.LABEL__scan_token_296__24:
  .loc 9 91 25
  # $27.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-8]
  call next_char_295
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $27.1:rax 
  .loc 9 91 5
  # $28.1: @String = call(append_347, token_lexeme.1, $27.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_347
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  .loc 9 92 12
  # $29.1: @Other_Token = new(Other_Token)
  mov rdi, 32
  call malloc
  lea rbx, Other_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $29.1:rax 
  # store_struct_member($29.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $29.1:rax 
  # store_struct_member($29.1, location, token_location.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $29.1:rax 
  # store_struct_member($29.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $29.1:rax 
  .loc 9 92 5
  # return($29.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_token_296__end
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [discarded value]: next_char.1
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_token_296__end:
  mov rsp, rbp
  pop rbp
  ret

scan_token_296__stack_frame_size: .word 48

  .loc 9 95 1
  .text
is_digit_297:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_digit_297__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_digit_297__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 96 12
  # $1.1: Int = cast(char.1)
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 96 27
  # $2.1: Int = cast('0')
  mov bl, 48
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 96 12
  # $4.1: Boolean = $1.1 >= $2.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, .LABEL__is_digit_297__2, .LABEL__is_digit_297__3)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_digit_297__3
.LABEL__is_digit_297__2:
  .loc 9 96 41
  # $5.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  .loc 9 96 56
  # $6.1: Int = cast('9')
  mov bl, 57
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  .loc 9 96 41
  # $4.2: Boolean = $5.1 <= $6.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(.LABEL__is_digit_297__3)
  mov [rbp-2], r15b
.LABEL__is_digit_297__3:
  .loc 9 96 12
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $4.3:[rbp-2] 
  .loc 9 96 5
  # return($4.3)
  mov al, [rbp-2]
  jmp .LABEL__is_digit_297__end
  # [discarded value]: $4.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: $4.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_digit_297__end:
  mov rsp, rbp
  pop rbp
  ret

is_digit_297__stack_frame_size: .word 16

  .loc 9 99 1
  .text
is_identifier_start_298:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_start_298__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_start_298__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 100 12
  # $2.1: Boolean = call(is_letter_300, char.1)
  mov [rbp-1], dil
  call is_letter_300
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # jump($2.1, .LABEL__is_identifier_start_298__3, .LABEL__is_identifier_start_298__2)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_start_298__2
.LABEL__is_identifier_start_298__3:
  .loc 9 100 12
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.3:[rbp-2] 
  .loc 9 100 5
  # return($2.3)
  mov al, [rbp-2]
  jmp .LABEL__is_identifier_start_298__end
  # [discarded value]: $2.3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
.LABEL__is_identifier_start_298__2:
  .loc 9 100 32
  # $2.2: Boolean = char.1 == '_'
  cmp BYTE PTR [rbp-1], 95
  sete al
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:rax:[rbp-2] 
  # jump(.LABEL__is_identifier_start_298__3)
  mov [rbp-2], al
  jmp .LABEL__is_identifier_start_298__3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:[rbp-2] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_start_298__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_start_298__stack_frame_size: .word 16

  .loc 9 103 1
  .text
is_identifier_body_299:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_body_299__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_body_299__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 104 9
  # $1.1: Boolean = call(is_identifier_start_298, char.1)
  mov [rbp-1], dil
  call is_identifier_start_298
  # [live values]: char.1:[rbp-1] $1.1:rax 
  # jump($1.1, .LABEL__is_identifier_body_299__2, .LABEL__is_identifier_body_299__3)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_body_299__3
.LABEL__is_identifier_body_299__2:
  .loc 9 105 9
  # return(true)
  mov al, 1
  jmp .LABEL__is_identifier_body_299__end
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] 
.LABEL__is_identifier_body_299__3:
  .loc 9 107 12
  # $2.1: Boolean = call(is_digit_297, char.1)
  mov dil, [rbp-1]
  call is_digit_297
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] $2.1:rax 
  .loc 9 107 5
  # return($2.1)
  mov [rbp-3], al
  jmp .LABEL__is_identifier_body_299__end
  # [discarded value]: $2.1
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] 
  # [discarded value]: $1.1
  # [live values]: char.1:[rbp-1] 
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_body_299__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_body_299__stack_frame_size: .word 16

  .loc 9 110 1
  .text
is_letter_300:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_letter_300__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_letter_300__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 111 13
  # $1.1: Int = cast(char.1)
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 111 28
  # $2.1: Int = cast('a')
  mov bl, 97
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 111 13
  # $4.1: Boolean = $1.1 >= $2.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, .LABEL__is_letter_300__4, .LABEL__is_letter_300__5)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_letter_300__5
.LABEL__is_letter_300__4:
  .loc 9 111 42
  # $5.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  .loc 9 111 57
  # $6.1: Int = cast('z')
  mov bl, 122
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  .loc 9 111 42
  # $4.2: Boolean = $5.1 <= $6.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(.LABEL__is_letter_300__5)
  mov [rbp-2], r15b
.LABEL__is_letter_300__5:
  .loc 9 111 13
  # $8.1: Boolean = phi($4.1, $4.2)
  mov al, [rbp-2]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:rax 
  # jump($8.1, .LABEL__is_letter_300__3, .LABEL__is_letter_300__2)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_letter_300__2
.LABEL__is_letter_300__3:
  .loc 9 111 12
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $8.3:[rbp-3] $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 5
  # return($8.3)
  mov al, [rbp-3]
  jmp .LABEL__is_letter_300__end
  # [discarded value]: $8.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
.LABEL__is_letter_300__2:
  .loc 9 111 73
  # $9.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 88
  # $10.1: Int = cast('A')
  mov bl, 65
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $10.1:rbx $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 73
  # $12.1: Boolean = $9.1 >= $10.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  # jump($12.1, .LABEL__is_letter_300__6, .LABEL__is_letter_300__7)
  test r15b, r15b
  mov [rbp-4], r15b
  jz .LABEL__is_letter_300__7
.LABEL__is_letter_300__6:
  .loc 9 111 102
  # $13.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax 
  .loc 9 111 117
  # $14.1: Int = cast('Z')
  mov bl, 90
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax $14.1:rbx 
  .loc 9 111 102
  # $12.2: Boolean = $13.1 <= $14.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:r15:[rbp-4] 
  # jump(.LABEL__is_letter_300__7)
  mov [rbp-4], r15b
.LABEL__is_letter_300__7:
  .loc 9 111 73
  # $8.2: Boolean = phi($12.1, $12.2)
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:rax:[rbp-3] 
  # jump(.LABEL__is_letter_300__3)
  mov [rbp-3], al
  jmp .LABEL__is_letter_300__3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [discarded value]: $12.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $12.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: $4.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_letter_300__end:
  mov rsp, rbp
  pop rbp
  ret

is_letter_300__stack_frame_size: .word 16

  .loc 9 114 1
  .text
is_space_301:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_space_301__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_space_301__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 115 12
  # $1.1: Boolean = char.1 == ' '
  cmp dil, 32
  sete al
  # [discarded value]: char.1
  # [live values]: $1.1:rax 
  .loc 9 115 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__is_space_301__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__is_space_301__end:
  mov rsp, rbp
  pop rbp
  ret

is_space_301__stack_frame_size: .word 16

  .loc 9 118 1
  .text
scan_character_token_302:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_character_token_302__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_character_token_302__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 119 9
  # $1.1: Int8 = call(peek_char_294, self.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 119 9
  # $2.1: Boolean = $1.1 != '\''
  cmp al, 39
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_character_token_302__2, .LABEL__scan_character_token_302__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_character_token_302__3
.LABEL__scan_character_token_302__2:
  .loc 9 120 9
  # call(abort_337, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_337
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_character_token_302__3:
  .loc 9 124 25
  # $3.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 124 5
  # $4.1: @String = call(append_347, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_347
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  .loc 9 125 13
  # char.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:rax 
  .loc 9 126 5
  # $6.1: @String = call(append_347, token_lexeme.1, char.1)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_347
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] 
  .loc 9 127 9
  # $7.1: Boolean = char.1 == '\''
  cmp BYTE PTR [rbp-26], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__scan_character_token_302__4, .LABEL__scan_character_token_302__5)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_character_token_302__5
.LABEL__scan_character_token_302__4:
  .loc 9 128 16
  # $8.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # store_struct_member($8.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # store_struct_member($8.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # store_struct_member($8.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  .loc 9 128 9
  # return($8.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_character_token_302__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__scan_character_token_302__5:
  .loc 9 130 9
  # $9.1: Boolean = char.1 == '\\'
  cmp BYTE PTR [rbp-26], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__scan_character_token_302__7, .LABEL__scan_character_token_302__9)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_character_token_302__9
.LABEL__scan_character_token_302__7:
  .loc 9 131 16
  # char.8: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:rax:[rbp-26] 
  .loc 9 132 9
  # $21.1: @String = call(append_347, token_lexeme.1, char.8)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_347
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] 
  .loc 9 133 13
  # $22.1: Boolean = call(is_escape_303, char.8)
  mov dil, [rbp-26]
  call is_escape_303
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $22.1:rax 
  .loc 9 133 13
  # $23.1: Boolean = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:rbx 
  # jump($23.1, .LABEL__scan_character_token_302__20, .LABEL__scan_character_token_302__21)
  test bl, bl
  mov [rbp-29], bl
  jz .LABEL__scan_character_token_302__21
.LABEL__scan_character_token_302__20:
  .loc 9 134 20
  # $24.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $24.1:rax 
  # store_struct_member($24.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $24.1:rax 
  # store_struct_member($24.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $24.1:rax 
  # store_struct_member($24.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $24.1:rax 
  .loc 9 134 13
  # return($24.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_character_token_302__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] 
.LABEL__scan_character_token_302__21:
  .loc 9 136 13
  # $25.1: Boolean = char.8 == 'n'
  cmp BYTE PTR [rbp-26], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:rax 
  # jump($25.1, .LABEL__scan_character_token_302__23, .LABEL__scan_character_token_302__25)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_character_token_302__25
.LABEL__scan_character_token_302__23:
  .loc 9 137 13
  # value.8: Int8 = '\n'
  mov al, 10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:rax 
  # jump(.LABEL__scan_character_token_302__24)
  mov [rbp-31], al
.LABEL__scan_character_token_302__24:
  # value.10: Int8 = phi(value.8, value.7, value.6, value.5, value.4, value.3)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] 
  .loc 9 151 16
  # char.18: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] char.18:rax:[rbp-26] 
  .loc 9 152 9
  # $32.1: @String = call(append_347, token_lexeme.1, char.18)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_347
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] char.18:[rbp-26] 
  .loc 9 153 13
  # $33.1: Boolean = char.18 != '\''
  cmp BYTE PTR [rbp-26], 39
  setne al
  # [discarded value]: char.18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:rax 
  # jump($33.1, .LABEL__scan_character_token_302__41, .LABEL__scan_character_token_302__8)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_302__8
.LABEL__scan_character_token_302__41:
  .loc 9 154 20
  # $34.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] $34.1:rax 
  # store_struct_member($34.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] $34.1:rax 
  # store_struct_member($34.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] $34.1:rax 
  # store_struct_member($34.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] $34.1:rax 
  .loc 9 154 13
  # return($34.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_character_token_302__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
.LABEL__scan_character_token_302__8:
  # value.9: Int8 = phi(value.2, value.10)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  .loc 9 167 12
  # $35.1: @Character_Token = new(Character_Token)
  mov rdi, 33
  call malloc
  lea rbx, Character_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # store_struct_member($35.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # store_struct_member($35.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # store_struct_member($35.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # store_struct_member($35.1, value, value.9)
  mov r14b, [rbp-31]
  mov BYTE PTR [rax+32], r14b
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  .loc 9 167 5
  # return($35.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_character_token_302__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] 
.LABEL__scan_character_token_302__25:
  .loc 9 138 20
  # $26.1: Boolean = char.8 == '\"'
  cmp BYTE PTR [rbp-26], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:rax 
  # jump($26.1, .LABEL__scan_character_token_302__26, .LABEL__scan_character_token_302__28)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_302__28
.LABEL__scan_character_token_302__26:
  .loc 9 139 13
  # value.7: Int8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] value.7:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_302__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_302__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] value.7:[rbp-31] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] 
.LABEL__scan_character_token_302__28:
  .loc 9 140 20
  # $27.1: Boolean = char.8 == '\''
  cmp BYTE PTR [rbp-26], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:rax 
  # jump($27.1, .LABEL__scan_character_token_302__29, .LABEL__scan_character_token_302__31)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_character_token_302__31
.LABEL__scan_character_token_302__29:
  .loc 9 141 13
  # value.6: Int8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] value.6:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_302__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_302__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] value.6:[rbp-31] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] 
.LABEL__scan_character_token_302__31:
  .loc 9 142 20
  # $28.1: Boolean = char.8 == '\\'
  cmp BYTE PTR [rbp-26], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:rax 
  # jump($28.1, .LABEL__scan_character_token_302__32, .LABEL__scan_character_token_302__34)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_character_token_302__34
.LABEL__scan_character_token_302__32:
  .loc 9 143 13
  # value.5: Int8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] value.5:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_302__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_302__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] value.5:[rbp-31] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] 
.LABEL__scan_character_token_302__34:
  .loc 9 144 20
  # $29.1: Boolean = char.8 == 't'
  cmp BYTE PTR [rbp-26], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:rax 
  # jump($29.1, .LABEL__scan_character_token_302__35, .LABEL__scan_character_token_302__37)
  test al, al
  mov [rbp-35], al
  jz .LABEL__scan_character_token_302__37
.LABEL__scan_character_token_302__35:
  .loc 9 145 13
  # value.4: Int8 = '\t'
  mov al, 9
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] value.4:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_302__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_302__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] value.4:[rbp-31] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] 
.LABEL__scan_character_token_302__37:
  .loc 9 146 20
  # $30.1: Boolean = char.8 == '0'
  cmp BYTE PTR [rbp-26], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:rax 
  # jump($30.1, .LABEL__scan_character_token_302__38, .LABEL__scan_character_token_302__40)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_character_token_302__40
.LABEL__scan_character_token_302__38:
  .loc 9 147 13
  # value.3: Int8 = '\0'
  mov al, 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] value.3:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_302__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_302__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] value.3:[rbp-31] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] 
.LABEL__scan_character_token_302__40:
  .loc 9 149 13
  # call(abort_337, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_337
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
.LABEL__scan_character_token_302__9:
  .loc 9 157 13
  # $11.1: Boolean = char.1 == '\0'
  cmp BYTE PTR [rbp-26], 0
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__scan_character_token_302__13, .LABEL__scan_character_token_302__12)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_302__12
.LABEL__scan_character_token_302__13:
  .loc 9 157 13
  # $13.1: Boolean = phi($11.1, $11.2)
  mov al, [rbp-32]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:rax 
  # jump($13.1, .LABEL__scan_character_token_302__11, .LABEL__scan_character_token_302__10)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_character_token_302__10
.LABEL__scan_character_token_302__11:
  .loc 9 157 13
  # $13.3: Boolean = phi($13.1, $13.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
  # jump($13.3, .LABEL__scan_character_token_302__14, .LABEL__scan_character_token_302__15)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__scan_character_token_302__15
.LABEL__scan_character_token_302__14:
  .loc 9 158 20
  # $15.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] $15.1:rax 
  .loc 9 158 13
  # return($15.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_character_token_302__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
.LABEL__scan_character_token_302__15:
  .loc 9 160 9
  # value.2: Int8 = char.1
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:rax:[rbp-31] 
  .loc 9 161 16
  # char.7: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  mov [rbp-31], al
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] char.7:rax:[rbp-26] 
  .loc 9 162 9
  # $17.1: @String = call(append_347, token_lexeme.1, char.7)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_347
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] char.7:[rbp-26] 
  .loc 9 163 13
  # $18.1: Boolean = char.7 != '\''
  cmp BYTE PTR [rbp-26], 39
  setne al
  # [discarded value]: char.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:rax 
  # jump($18.1, .LABEL__scan_character_token_302__17, .LABEL__scan_character_token_302__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_character_token_302__8
.LABEL__scan_character_token_302__17:
  .loc 9 164 20
  # $19.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] $19.1:rax 
  # store_struct_member($19.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] $19.1:rax 
  # store_struct_member($19.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] $19.1:rax 
  # store_struct_member($19.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] $19.1:rax 
  .loc 9 164 13
  # return($19.1)
  mov [rbp-42], rax
  jmp .LABEL__scan_character_token_302__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
.LABEL__scan_character_token_302__10:
  .loc 9 157 45
  # $13.2: Boolean = char.1 == '\t'
  cmp BYTE PTR [rbp-26], 9
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.2:rax:[rbp-33] $13.1:[rbp-33] 
  # jump(.LABEL__scan_character_token_302__11)
  mov [rbp-33], al
  jmp .LABEL__scan_character_token_302__11
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.2:[rbp-33] $13.1:[rbp-33] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
.LABEL__scan_character_token_302__12:
  .loc 9 157 29
  # $11.2: Boolean = char.1 == '\n'
  cmp BYTE PTR [rbp-26], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $11.2:rax:[rbp-32] 
  # jump(.LABEL__scan_character_token_302__13)
  mov [rbp-32], al
  jmp .LABEL__scan_character_token_302__13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $11.2:[rbp-32] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] 
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_character_token_302__end:
  mov rsp, rbp
  pop rbp
  ret

scan_character_token_302__stack_frame_size: .word 48

  .loc 9 170 1
  .text
is_escape_303:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_escape_303__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_escape_303__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 171 12
  # $2.1: Boolean = char.1 == 'n'
  cmp dil, 110
  sete al
  # [live values]: char.1:rdi $2.1:rax 
  # jump($2.1, .LABEL__is_escape_303__11, .LABEL__is_escape_303__10)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], dil
  jz .LABEL__is_escape_303__10
.LABEL__is_escape_303__11:
  .loc 9 171 12
  # $4.1: Boolean = phi($2.1, $2.2)
  mov al, [rbp-1]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__is_escape_303__9, .LABEL__is_escape_303__8)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_escape_303__8
.LABEL__is_escape_303__9:
  .loc 9 171 12
  # $6.1: Boolean = phi($4.1, $4.2)
  mov al, [rbp-3]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:rax $4.1:[rbp-3] 
  # jump($6.1, .LABEL__is_escape_303__7, .LABEL__is_escape_303__6)
  test al, al
  mov [rbp-4], al
  jz .LABEL__is_escape_303__6
.LABEL__is_escape_303__7:
  .loc 9 171 12
  # $8.1: Boolean = phi($6.1, $6.2)
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($8.1, .LABEL__is_escape_303__5, .LABEL__is_escape_303__4)
  test al, al
  mov [rbp-5], al
  jz .LABEL__is_escape_303__4
.LABEL__is_escape_303__5:
  .loc 9 171 12
  # $10.1: Boolean = phi($8.1, $8.2)
  mov al, [rbp-5]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($10.1, .LABEL__is_escape_303__3, .LABEL__is_escape_303__2)
  test al, al
  mov [rbp-6], al
  jz .LABEL__is_escape_303__2
.LABEL__is_escape_303__3:
  .loc 9 171 12
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.3:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 5
  # return($10.3)
  mov al, [rbp-6]
  jmp .LABEL__is_escape_303__end
  # [discarded value]: $10.3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_303__2:
  .loc 9 171 90
  # $10.2: Boolean = char.1 == '0'
  cmp BYTE PTR [rbp-2], 48
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:rax:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_303__3)
  mov [rbp-6], al
  jmp .LABEL__is_escape_303__3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_303__4:
  .loc 9 171 74
  # $8.2: Boolean = char.1 == '\\'
  cmp BYTE PTR [rbp-2], 92
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:rax:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_303__5)
  mov [rbp-5], al
  jmp .LABEL__is_escape_303__5
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_303__6:
  .loc 9 171 58
  # $6.2: Boolean = char.1 == '\''
  cmp BYTE PTR [rbp-2], 39
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:rax:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_303__7)
  mov [rbp-4], al
  jmp .LABEL__is_escape_303__7
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
.LABEL__is_escape_303__8:
  .loc 9 171 42
  # $4.2: Boolean = char.1 == '\"'
  cmp BYTE PTR [rbp-2], 34
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:rax:[rbp-3] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_303__9)
  mov [rbp-3], al
  jmp .LABEL__is_escape_303__9
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:[rbp-3] $4.1:[rbp-3] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [discarded value]: $4.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
.LABEL__is_escape_303__10:
  .loc 9 171 27
  # $2.2: Boolean = char.1 == 't'
  cmp BYTE PTR [rbp-2], 116
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(.LABEL__is_escape_303__11)
  mov [rbp-1], al
  jmp .LABEL__is_escape_303__11
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_escape_303__end:
  mov rsp, rbp
  pop rbp
  ret

is_escape_303__stack_frame_size: .word 16

  .loc 9 174 1
  .text
scan_comment_token_304:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_comment_token_304__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_comment_token_304__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(.LABEL__scan_comment_token_304__2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_comment_token_304__2:
  .loc 9 175 12
  # $1.1: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-24]
  call peek_char_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 175 12
  # $2.1: Boolean = $1.1 != '\n'
  cmp al, 10
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_comment_token_304__3, .LABEL__scan_comment_token_304__4)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_comment_token_304__4
.LABEL__scan_comment_token_304__3:
  .loc 9 176 29
  # $3.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 176 9
  # $4.1: @String = call(append_347, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_347
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # jump(.LABEL__scan_comment_token_304__2)
  jmp .LABEL__scan_comment_token_304__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_comment_token_304__4:
  .loc 9 178 12
  # $5.1: @Comment_Token = new(Comment_Token)
  mov rdi, 32
  call malloc
  lea rbx, Comment_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  .loc 9 178 5
  # return($5.1)
  mov [rbp-33], rax
  jmp .LABEL__scan_comment_token_304__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_comment_token_304__end:
  mov rsp, rbp
  pop rbp
  ret

scan_comment_token_304__stack_frame_size: .word 48

  .loc 9 181 1
  .text
scan_identifier_token_305:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_identifier_token_305__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_identifier_token_305__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(.LABEL__scan_identifier_token_305__2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_identifier_token_305__2:
  .loc 9 182 12
  # $1.1: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-24]
  call peek_char_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 182 12
  # $2.1: Boolean = call(is_identifier_body_299, $1.1)
  mov dil, al
  call is_identifier_body_299
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__scan_identifier_token_305__3, .LABEL__scan_identifier_token_305__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__scan_identifier_token_305__4
.LABEL__scan_identifier_token_305__3:
  .loc 9 183 29
  # $3.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 183 9
  # $4.1: @String = call(append_347, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_347
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # jump(.LABEL__scan_identifier_token_305__2)
  jmp .LABEL__scan_identifier_token_305__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_identifier_token_305__4:
  .loc 9 185 9
  # $5.1: Boolean = call(equals_341, token_lexeme.1, "as")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_288[rip] # "as"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__scan_identifier_token_305__5, .LABEL__scan_identifier_token_305__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__scan_identifier_token_305__6
.LABEL__scan_identifier_token_305__5:
  .loc 9 186 16
  # $6.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rax 
  # store_struct_member($6.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rax 
  # store_struct_member($6.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rax 
  # store_struct_member($6.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rax 
  .loc 9 186 9
  # return($6.1)
  mov [rbp-34], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__scan_identifier_token_305__6:
  .loc 9 188 9
  # $7.1: Boolean = call(equals_341, token_lexeme.1, "break")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_290[rip] # "break"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__scan_identifier_token_305__8, .LABEL__scan_identifier_token_305__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_identifier_token_305__9
.LABEL__scan_identifier_token_305__8:
  .loc 9 189 16
  # $8.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # store_struct_member($8.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # store_struct_member($8.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # store_struct_member($8.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  .loc 9 189 9
  # return($8.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__scan_identifier_token_305__9:
  .loc 9 191 9
  # $9.1: Boolean = call(equals_341, token_lexeme.1, "else")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_295[rip] # "else"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__scan_identifier_token_305__11, .LABEL__scan_identifier_token_305__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_identifier_token_305__12
.LABEL__scan_identifier_token_305__11:
  .loc 9 192 16
  # $10.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  # store_struct_member($10.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  # store_struct_member($10.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  # store_struct_member($10.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  .loc 9 192 9
  # return($10.1)
  mov [rbp-36], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
.LABEL__scan_identifier_token_305__12:
  .loc 9 194 9
  # $11.1: Boolean = call(equals_341, token_lexeme.1, "external")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_298[rip] # "external"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__scan_identifier_token_305__14, .LABEL__scan_identifier_token_305__15)
  test al, al
  mov [rbp-29], al
  jz .LABEL__scan_identifier_token_305__15
.LABEL__scan_identifier_token_305__14:
  .loc 9 195 16
  # $12.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $12.1:rax 
  # store_struct_member($12.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $12.1:rax 
  # store_struct_member($12.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $12.1:rax 
  # store_struct_member($12.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $12.1:rax 
  .loc 9 195 9
  # return($12.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] 
.LABEL__scan_identifier_token_305__15:
  .loc 9 197 9
  # $13.1: Boolean = call(equals_341, token_lexeme.1, "false")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_342[rip] # "false"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:rax 
  # jump($13.1, .LABEL__scan_identifier_token_305__17, .LABEL__scan_identifier_token_305__18)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_identifier_token_305__18
.LABEL__scan_identifier_token_305__17:
  .loc 9 198 16
  # $14.1: @Boolean_Token = new(Boolean_Token)
  mov rdi, 33
  call malloc
  lea rbx, Boolean_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $14.1:rax 
  # store_struct_member($14.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $14.1:rax 
  # store_struct_member($14.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $14.1:rax 
  # store_struct_member($14.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $14.1:rax 
  # store_struct_member($14.1, value, false)
  mov BYTE PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $14.1:rax 
  .loc 9 198 9
  # return($14.1)
  mov [rbp-38], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] 
.LABEL__scan_identifier_token_305__18:
  .loc 9 200 9
  # $15.1: Boolean = call(equals_341, token_lexeme.1, "if")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_301[rip] # "if"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:rax 
  # jump($15.1, .LABEL__scan_identifier_token_305__20, .LABEL__scan_identifier_token_305__21)
  test al, al
  mov [rbp-31], al
  jz .LABEL__scan_identifier_token_305__21
.LABEL__scan_identifier_token_305__20:
  .loc 9 201 16
  # $16.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $16.1:rax 
  # store_struct_member($16.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $16.1:rax 
  # store_struct_member($16.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $16.1:rax 
  # store_struct_member($16.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $16.1:rax 
  .loc 9 201 9
  # return($16.1)
  mov [rbp-39], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] 
.LABEL__scan_identifier_token_305__21:
  .loc 9 203 9
  # $17.1: Boolean = call(equals_341, token_lexeme.1, "include")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_302[rip] # "include"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:rax 
  # jump($17.1, .LABEL__scan_identifier_token_305__23, .LABEL__scan_identifier_token_305__24)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_identifier_token_305__24
.LABEL__scan_identifier_token_305__23:
  .loc 9 204 16
  # $18.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $18.1:rax 
  # store_struct_member($18.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $18.1:rax 
  # store_struct_member($18.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $18.1:rax 
  # store_struct_member($18.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $18.1:rax 
  .loc 9 204 9
  # return($18.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] 
.LABEL__scan_identifier_token_305__24:
  .loc 9 206 9
  # $19.1: Boolean = call(equals_341, token_lexeme.1, "loop")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_304[rip] # "loop"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:rax 
  # jump($19.1, .LABEL__scan_identifier_token_305__26, .LABEL__scan_identifier_token_305__27)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_identifier_token_305__27
.LABEL__scan_identifier_token_305__26:
  .loc 9 207 16
  # $20.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $20.1:rax 
  # store_struct_member($20.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $20.1:rax 
  # store_struct_member($20.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $20.1:rax 
  # store_struct_member($20.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $20.1:rax 
  .loc 9 207 9
  # return($20.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] 
.LABEL__scan_identifier_token_305__27:
  .loc 9 209 9
  # $21.1: Boolean = call(equals_341, token_lexeme.1, "new")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_267[rip] # "new"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:rax 
  # jump($21.1, .LABEL__scan_identifier_token_305__29, .LABEL__scan_identifier_token_305__30)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_identifier_token_305__30
.LABEL__scan_identifier_token_305__29:
  .loc 9 210 16
  # $22.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $22.1:rax 
  # store_struct_member($22.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $22.1:rax 
  # store_struct_member($22.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $22.1:rax 
  # store_struct_member($22.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $22.1:rax 
  .loc 9 210 9
  # return($22.1)
  mov [rbp-42], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] 
.LABEL__scan_identifier_token_305__30:
  .loc 9 212 9
  # $23.1: Boolean = call(equals_341, token_lexeme.1, "null")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_343[rip] # "null"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:rax 
  # jump($23.1, .LABEL__scan_identifier_token_305__32, .LABEL__scan_identifier_token_305__33)
  test al, al
  mov [rbp-35], al
  jz .LABEL__scan_identifier_token_305__33
.LABEL__scan_identifier_token_305__32:
  .loc 9 213 16
  # $24.1: @Null_Token = new(Null_Token)
  mov rdi, 32
  call malloc
  lea rbx, Null_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $24.1:rax 
  .loc 9 213 9
  # return($24.1)
  mov [rbp-43], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] 
.LABEL__scan_identifier_token_305__33:
  .loc 9 215 9
  # $25.1: Boolean = call(equals_341, token_lexeme.1, "return")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_269[rip] # "return"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:rax 
  # jump($25.1, .LABEL__scan_identifier_token_305__35, .LABEL__scan_identifier_token_305__36)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_identifier_token_305__36
.LABEL__scan_identifier_token_305__35:
  .loc 9 216 16
  # $26.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $26.1:rax 
  # store_struct_member($26.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $26.1:rax 
  # store_struct_member($26.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $26.1:rax 
  # store_struct_member($26.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $26.1:rax 
  .loc 9 216 9
  # return($26.1)
  mov [rbp-44], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] 
.LABEL__scan_identifier_token_305__36:
  .loc 9 218 9
  # $27.1: Boolean = call(equals_341, token_lexeme.1, "struct")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_308[rip] # "struct"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:rax 
  # jump($27.1, .LABEL__scan_identifier_token_305__38, .LABEL__scan_identifier_token_305__39)
  test al, al
  mov [rbp-37], al
  jz .LABEL__scan_identifier_token_305__39
.LABEL__scan_identifier_token_305__38:
  .loc 9 219 16
  # $28.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $28.1:rax 
  # store_struct_member($28.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $28.1:rax 
  # store_struct_member($28.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $28.1:rax 
  # store_struct_member($28.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $28.1:rax 
  .loc 9 219 9
  # return($28.1)
  mov [rbp-45], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] 
.LABEL__scan_identifier_token_305__39:
  .loc 9 221 9
  # $29.1: Boolean = call(equals_341, token_lexeme.1, "true")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_344[rip] # "true"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:rax 
  # jump($29.1, .LABEL__scan_identifier_token_305__41, .LABEL__scan_identifier_token_305__42)
  test al, al
  mov [rbp-38], al
  jz .LABEL__scan_identifier_token_305__42
.LABEL__scan_identifier_token_305__41:
  .loc 9 222 16
  # $30.1: @Boolean_Token = new(Boolean_Token)
  mov rdi, 33
  call malloc
  lea rbx, Boolean_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $30.1:rax 
  # store_struct_member($30.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $30.1:rax 
  # store_struct_member($30.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $30.1:rax 
  # store_struct_member($30.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $30.1:rax 
  # store_struct_member($30.1, value, true)
  mov BYTE PTR [rax+32], 1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $30.1:rax 
  .loc 9 222 9
  # return($30.1)
  mov [rbp-46], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] 
.LABEL__scan_identifier_token_305__42:
  .loc 9 224 9
  # $31.1: Boolean = call(equals_341, token_lexeme.1, "undefined")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_238[rip] # "undefined"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:rax 
  # jump($31.1, .LABEL__scan_identifier_token_305__44, .LABEL__scan_identifier_token_305__45)
  test al, al
  mov [rbp-39], al
  jz .LABEL__scan_identifier_token_305__45
.LABEL__scan_identifier_token_305__44:
  .loc 9 225 16
  # $32.1: @Undefined_Token = new(Undefined_Token)
  mov rdi, 32
  call malloc
  lea rbx, Undefined_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $32.1:rax 
  # store_struct_member($32.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $32.1:rax 
  # store_struct_member($32.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $32.1:rax 
  # store_struct_member($32.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $32.1:rax 
  .loc 9 225 9
  # return($32.1)
  mov [rbp-47], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] 
.LABEL__scan_identifier_token_305__45:
  .loc 9 227 9
  # $33.1: Boolean = call(equals_341, token_lexeme.1, "while")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_310[rip] # "while"
  call equals_341
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:rax 
  # jump($33.1, .LABEL__scan_identifier_token_305__47, .LABEL__scan_identifier_token_305__48)
  test al, al
  mov [rbp-40], al
  jz .LABEL__scan_identifier_token_305__48
.LABEL__scan_identifier_token_305__47:
  .loc 9 228 16
  # $34.1: @Keyword_Token = new(Keyword_Token)
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $34.1:rax 
  # store_struct_member($34.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $34.1:rax 
  # store_struct_member($34.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $34.1:rax 
  # store_struct_member($34.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $34.1:rax 
  .loc 9 228 9
  # return($34.1)
  mov [rbp-48], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] 
.LABEL__scan_identifier_token_305__48:
  .loc 9 230 12
  # $35.1: @Identifier_Token = new(Identifier_Token)
  mov rdi, 32
  call malloc
  lea rbx, Identifier_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $35.1:rax 
  # store_struct_member($35.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $35.1:rax 
  # store_struct_member($35.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $35.1:rax 
  # store_struct_member($35.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $35.1:rax 
  .loc 9 230 5
  # return($35.1)
  mov [rbp-48], rax
  jmp .LABEL__scan_identifier_token_305__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_identifier_token_305__end:
  mov rsp, rbp
  pop rbp
  ret

scan_identifier_token_305__stack_frame_size: .word 48

  .loc 9 233 1
  .text
scan_integer_token_306:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_integer_token_306__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_integer_token_306__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 234 5
  # value.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx value.1:rax 
  # jump(.LABEL__scan_integer_token_306__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_integer_token_306__2:
  # value.5: Int = phi(value.1, value.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  .loc 9 235 12
  # $1.1: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-32]
  call peek_char_294
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $1.1:rax 
  .loc 9 235 12
  # $2.1: Boolean = call(is_digit_297, $1.1)
  mov dil, al
  call is_digit_297
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__scan_integer_token_306__3, .LABEL__scan_integer_token_306__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_integer_token_306__4
.LABEL__scan_integer_token_306__3:
  .loc 9 236 17
  # char.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-32]
  call next_char_295
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax 
  .loc 9 237 17
  # $4.1: Int = value.5 * 10
  mov rbx, [rbp-8]
  imul rbx, 10
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx 
  .loc 9 237 31
  # $5.1: Int = cast(char.1)
  mov r15b, al
  movsx r15, r15b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $5.1:r15 
  .loc 9 237 45
  # $6.1: Int = cast('0')
  mov r14b, 48
  movsx r14, r14b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $5.1:r15 $6.1:r14 
  .loc 9 237 31
  # $7.1: Int = $5.1 - $6.1
  mov r13, r15
  sub r13, r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $7.1:r13 
  .loc 9 237 17
  # value.3: Int = $4.1 + $7.1
  mov r15, rbx
  add r15, r13
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax value.3:r15:[rbp-8] 
  .loc 9 238 9
  # $9.1: @String = call(append_347, token_lexeme.1, char.1)
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], r15
  call append_347
  # [discarded value]: $9.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] value.3:[rbp-8] 
  # jump(.LABEL__scan_integer_token_306__2)
  jmp .LABEL__scan_integer_token_306__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] value.3:[rbp-8] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] 
.LABEL__scan_integer_token_306__4:
  .loc 9 240 12
  # $10.1: @Integer_Token = new(Integer_Token)
  mov rdi, 40
  call malloc
  lea rbx, Integer_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  # store_struct_member($10.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  # store_struct_member($10.1, location, token_location.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  # store_struct_member($10.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  # store_struct_member($10.1, value, value.5)
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] value.1:[rbp-8] value.5:r14:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  .loc 9 240 5
  # return($10.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_integer_token_306__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] 
  # [discarded value]: value.1
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_integer_token_306__end:
  mov rsp, rbp
  pop rbp
  ret

scan_integer_token_306__stack_frame_size: .word 48

  .loc 9 243 1
  .text
scan_space_token_307:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_space_token_307__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_space_token_307__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 244 5
  # count.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx count.1:rax 
  # jump(.LABEL__scan_space_token_307__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_space_token_307__2:
  # count.5: Int = phi(count.1, count.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  .loc 9 245 12
  # $1.1: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-32]
  call peek_char_294
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $1.1:rax 
  .loc 9 245 12
  # $2.1: Boolean = $1.1 == ' '
  cmp al, 32
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_space_token_307__3, .LABEL__scan_space_token_307__4)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__scan_space_token_307__4
.LABEL__scan_space_token_307__3:
  .loc 9 246 17
  # char.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-32]
  call next_char_295
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax 
  .loc 9 247 17
  # count.3: Int = count.5 + 1
  mov rbx, [rbp-8]
  add rbx, 1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax count.3:rbx:[rbp-8] 
  .loc 9 248 9
  # $5.1: @String = call(append_347, token_lexeme.1, char.1)
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], rbx
  call append_347
  # [discarded value]: $5.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] count.3:[rbp-8] 
  # jump(.LABEL__scan_space_token_307__2)
  jmp .LABEL__scan_space_token_307__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] count.3:[rbp-8] 
  # [discarded value]: count.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] 
.LABEL__scan_space_token_307__4:
  .loc 9 250 12
  # $6.1: @Space_Token = new(Space_Token)
  mov rdi, 40
  call malloc
  lea rbx, Space_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, location, token_location.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  # store_struct_member($6.1, count, count.5)
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] count.1:[rbp-8] count.5:r14:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  .loc 9 250 5
  # return($6.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_space_token_307__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # [discarded value]: count.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] 
  # [discarded value]: count.1
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_space_token_307__end:
  mov rsp, rbp
  pop rbp
  ret

scan_space_token_307__stack_frame_size: .word 48

  .loc 9 253 1
  .text
scan_string_token_308:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_string_token_308__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_string_token_308__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 254 9
  # $1.1: Int8 = call(peek_char_294, self.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 254 9
  # $2.1: Boolean = $1.1 != '"'
  cmp al, 34
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_string_token_308__2, .LABEL__scan_string_token_308__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_string_token_308__3
.LABEL__scan_string_token_308__2:
  .loc 9 255 9
  # call(abort_337, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_337
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_string_token_308__3:
  .loc 14 4 19
  # $4.1: @Int8 = call(malloc, 16)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $4.1:rax 
  .loc 9 258 14
  # $5.1: @String = new(String)
  mov [rbp-33], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  # store_struct_member($5.1, data, $4.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, data_size, 16)
  mov QWORD PTR [rax+8], 16
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  .loc 9 258 5
  # value.1: @String = $5.1
  mov [rbp-33], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:rax 
  .loc 9 260 25
  # $6.1: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  mov [rbp-33], rax
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] $6.1:rax 
  .loc 9 260 5
  # $7.1: @String = call(append_347, token_lexeme.1, $6.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_347
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] 
  # jump(.LABEL__scan_string_token_308__4)
.LABEL__scan_string_token_308__4:
  .loc 9 262 17
  # char.1: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-24]
  call peek_char_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax 
  .loc 9 263 13
  # $10.1: Boolean = char.1 == '\0'
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__scan_string_token_308__7, .LABEL__scan_string_token_308__6)
  test bl, bl
  mov [rbp-34], al
  mov [rbp-35], bl
  jz .LABEL__scan_string_token_308__6
.LABEL__scan_string_token_308__7:
  .loc 9 263 13
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
  # jump($10.3, .LABEL__scan_string_token_308__8, .LABEL__scan_string_token_308__9)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__scan_string_token_308__9
.LABEL__scan_string_token_308__8:
  .loc 9 264 20
  # $12.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] $12.1:rax 
  # store_struct_member($12.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] $12.1:rax 
  # store_struct_member($12.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] $12.1:rax 
  # store_struct_member($12.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] $12.1:rax 
  .loc 9 264 13
  # return($12.1)
  mov [rbp-43], rax
  jmp .LABEL__scan_string_token_308__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
.LABEL__scan_string_token_308__9:
  .loc 9 266 16
  # char.3: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:rax:[rbp-34] 
  .loc 9 267 9
  # $14.1: @String = call(append_347, token_lexeme.1, char.3)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-34], al
  call append_347
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] 
  .loc 9 268 13
  # $15.1: Boolean = char.3 == '"'
  cmp BYTE PTR [rbp-34], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:rax 
  # jump($15.1, .LABEL__scan_string_token_308__11, .LABEL__scan_string_token_308__12)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_string_token_308__12
.LABEL__scan_string_token_308__11:
  .loc 9 269 20
  # $16.1: @String_Token = new(String_Token)
  mov rdi, 40
  call malloc
  lea rbx, String_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  # store_struct_member($16.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  # store_struct_member($16.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  # store_struct_member($16.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  # store_struct_member($16.1, value, value.1)
  mov r14, [rbp-33]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:r14:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  .loc 9 269 13
  # return($16.1)
  mov [rbp-44], rax
  jmp .LABEL__scan_string_token_308__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] 
.LABEL__scan_string_token_308__12:
  .loc 9 271 13
  # $17.1: Boolean = char.3 == '\\'
  cmp BYTE PTR [rbp-34], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:rax 
  # jump($17.1, .LABEL__scan_string_token_308__14, .LABEL__scan_string_token_308__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__scan_string_token_308__16
.LABEL__scan_string_token_308__14:
  .loc 9 272 20
  # char.6: Int8 = call(peek_char_294, self.1)
  mov rdi, [rbp-24]
  call peek_char_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] 
  .loc 9 273 17
  # $21.1: Boolean = char.6 == '\0'
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] $21.1:rbx 
  # jump($21.1, .LABEL__scan_string_token_308__18, .LABEL__scan_string_token_308__17)
  test bl, bl
  mov [rbp-34], al
  mov [rbp-38], bl
  jz .LABEL__scan_string_token_308__17
.LABEL__scan_string_token_308__18:
  .loc 9 273 17
  # $21.3: Boolean = phi($21.1, $21.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
  # jump($21.3, .LABEL__scan_string_token_308__19, .LABEL__scan_string_token_308__20)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__scan_string_token_308__20
.LABEL__scan_string_token_308__19:
  .loc 9 274 24
  # $23.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] $23.1:rax 
  # store_struct_member($23.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] $23.1:rax 
  # store_struct_member($23.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] $23.1:rax 
  # store_struct_member($23.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] $23.1:rax 
  .loc 9 274 17
  # return($23.1)
  mov [rbp-46], rax
  jmp .LABEL__scan_string_token_308__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
.LABEL__scan_string_token_308__20:
  .loc 9 276 20
  # char.8: Int8 = call(next_char_295, self.1)
  mov rdi, [rbp-24]
  call next_char_295
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:rax:[rbp-34] 
  .loc 9 277 13
  # $25.1: @String = call(append_347, token_lexeme.1, char.8)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-34], al
  call append_347
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] 
  .loc 9 278 17
  # $26.1: Boolean = call(is_escape_303, char.8)
  mov dil, [rbp-34]
  call is_escape_303
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $26.1:rax 
  .loc 9 278 17
  # $27.1: Boolean = $26.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:rbx 
  # jump($27.1, .LABEL__scan_string_token_308__22, .LABEL__scan_string_token_308__23)
  test bl, bl
  mov [rbp-39], bl
  jz .LABEL__scan_string_token_308__23
.LABEL__scan_string_token_308__22:
  .loc 9 279 24
  # $28.1: @Error_Token = new(Error_Token)
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $28.1:rax 
  # store_struct_member($28.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $28.1:rax 
  # store_struct_member($28.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $28.1:rax 
  # store_struct_member($28.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $28.1:rax 
  .loc 9 279 17
  # return($28.1)
  mov [rbp-47], rax
  jmp .LABEL__scan_string_token_308__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] 
.LABEL__scan_string_token_308__23:
  .loc 9 281 17
  # $29.1: Boolean = char.8 == 'n'
  cmp BYTE PTR [rbp-34], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:rax 
  # jump($29.1, .LABEL__scan_string_token_308__25, .LABEL__scan_string_token_308__27)
  test al, al
  mov [rbp-40], al
  jz .LABEL__scan_string_token_308__27
.LABEL__scan_string_token_308__25:
  .loc 9 282 17
  # $40.1: @String = call(append_347, value.1, '\n')
  mov rdi, [rbp-33]
  mov sil, 10
  call append_347
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
.LABEL__scan_string_token_308__27:
  .loc 9 283 24
  # $30.1: Boolean = char.8 == '\"'
  cmp BYTE PTR [rbp-34], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:rax 
  # jump($30.1, .LABEL__scan_string_token_308__28, .LABEL__scan_string_token_308__30)
  test al, al
  mov [rbp-41], al
  jz .LABEL__scan_string_token_308__30
.LABEL__scan_string_token_308__28:
  .loc 9 284 17
  # $39.1: @String = call(append_347, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_347
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
.LABEL__scan_string_token_308__30:
  .loc 9 285 24
  # $31.1: Boolean = char.8 == '\''
  cmp BYTE PTR [rbp-34], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:rax 
  # jump($31.1, .LABEL__scan_string_token_308__31, .LABEL__scan_string_token_308__33)
  test al, al
  mov [rbp-42], al
  jz .LABEL__scan_string_token_308__33
.LABEL__scan_string_token_308__31:
  .loc 9 286 17
  # $38.1: @String = call(append_347, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_347
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
.LABEL__scan_string_token_308__33:
  .loc 9 287 24
  # $32.1: Boolean = char.8 == '\\'
  cmp BYTE PTR [rbp-34], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:rax 
  # jump($32.1, .LABEL__scan_string_token_308__34, .LABEL__scan_string_token_308__36)
  test al, al
  mov [rbp-43], al
  jz .LABEL__scan_string_token_308__36
.LABEL__scan_string_token_308__34:
  .loc 9 288 17
  # $37.1: @String = call(append_347, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_347
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
.LABEL__scan_string_token_308__36:
  .loc 9 289 24
  # $33.1: Boolean = char.8 == 't'
  cmp BYTE PTR [rbp-34], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:rax 
  # jump($33.1, .LABEL__scan_string_token_308__37, .LABEL__scan_string_token_308__39)
  test al, al
  mov [rbp-44], al
  jz .LABEL__scan_string_token_308__39
.LABEL__scan_string_token_308__37:
  .loc 9 290 17
  # $36.1: @String = call(append_347, value.1, '\t')
  mov rdi, [rbp-33]
  mov sil, 9
  call append_347
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
.LABEL__scan_string_token_308__39:
  .loc 9 291 24
  # $34.1: Boolean = char.8 == '0'
  cmp BYTE PTR [rbp-34], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:rax 
  # jump($34.1, .LABEL__scan_string_token_308__40, .LABEL__scan_string_token_308__42)
  test al, al
  mov [rbp-45], al
  jz .LABEL__scan_string_token_308__42
.LABEL__scan_string_token_308__40:
  .loc 9 292 17
  # $35.1: @String = call(append_347, value.1, '\0')
  mov rdi, [rbp-33]
  mov sil, 0
  call append_347
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
.LABEL__scan_string_token_308__42:
  .loc 9 294 17
  # call(abort_337, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_337
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
  # [discarded value]: $21.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
.LABEL__scan_string_token_308__17:
  .loc 9 273 33
  # $21.2: Boolean = char.6 == '\n'
  cmp BYTE PTR [rbp-34], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.2:rax:[rbp-38] 
  # jump(.LABEL__scan_string_token_308__18)
  mov [rbp-38], al
  jmp .LABEL__scan_string_token_308__18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.2:[rbp-38] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
  # [discarded value]: $21.1
  # [discarded value]: char.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
.LABEL__scan_string_token_308__16:
  .loc 9 297 13
  # $18.1: @String = call(append_347, value.1, char.3)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_347
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
  # jump(.LABEL__scan_string_token_308__4)
  jmp .LABEL__scan_string_token_308__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] 
  # [discarded value]: char.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
.LABEL__scan_string_token_308__6:
  .loc 9 263 29
  # $10.2: Boolean = char.1 == '\n'
  cmp BYTE PTR [rbp-34], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.2:rax:[rbp-35] 
  # jump(.LABEL__scan_string_token_308__7)
  mov [rbp-35], al
  jmp .LABEL__scan_string_token_308__7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_string_token_308__end:
  mov rsp, rbp
  pop rbp
  ret

scan_string_token_308__stack_frame_size: .word 48

  .loc 1 325 1
  .text
abort_309:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_309__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_309__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: location.1:rdi message.1:rsi 
  # stderr.13: @FILE = load_variable(stderr)
  # [live values]: location.1:rdi message.1:rsi stderr.13:stderr[rip] 
  .loc 1 326 5
  # $1.1: @FILE = call(end_line_335, stderr.13)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_335
  # [discarded value]: stderr.13
  # [live values]: location.1:[rbp-8] message.1:[rbp-16] $1.1:rax 
  .loc 1 326 5
  # $2.1: @FILE = call(write_312, $1.1, location.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_312
  # [discarded value]: $1.1
  # [discarded value]: location.1
  # [live values]: message.1:[rbp-16] $2.1:rax 
  .loc 1 326 5
  # $3.1: @FILE = call(write_332, $2.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # ": "
  call write_332
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-16] $3.1:rax 
  .loc 1 326 5
  # $4.1: @FILE = call(write_332, $3.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_332
  # [discarded value]: $3.1
  # [discarded value]: message.1
  # [live values]: $4.1:rax 
  .loc 1 326 5
  # $5.1: @FILE = call(end_line_335, $4.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: 
  .loc 1 327 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_309__end:
  mov rsp, rbp
  pop rbp
  ret

abort_309__stack_frame_size: .word 16

  .loc 1 332 1
  .text
write_310:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_310__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_310__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: file.1:rdi token.1:rsi 
  # Other_Token.3: @Object_Type = load_variable(Other_Token)
  lea rax, Other_Token[rip]
  # [live values]: file.1:rdi token.1:rsi Other_Token.3:rax 
  .loc 1 333 9
  # $2.1: Boolean = call(is_338, token.1, Other_Token.3)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_338
  # [discarded value]: Other_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__write_310__3, .LABEL__write_310__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_310__2
.LABEL__write_310__3:
  .loc 1 333 9
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, .LABEL__write_310__4, .LABEL__write_310__6)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__write_310__6
.LABEL__write_310__4:
  .loc 1 334 20
  # $12.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $12.1:rax 
  .loc 1 334 9
  # $13.1: @FILE = call(write_334, file.1, $12.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_334
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $13.1:rax 
  .loc 1 334 9
  # $14.1: @FILE = call(write_332, $13.1, "[2;37m")
  mov rdi, rax
  lea rsi, .LABEL__string_345[rip] # "[2;37m"
  call write_332
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # jump(.LABEL__write_310__5)
.LABEL__write_310__5:
  .loc 1 340 16
  # $15.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] token.1:rax:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $15.1:rbx 
  .loc 1 340 5
  # $16.1: @FILE = call(write_332, file.1, $15.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_332
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  .loc 1 341 16
  # $17.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $17.1:rax 
  .loc 1 341 5
  # $18.1: @FILE = call(write_334, file.1, $17.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_334
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $18.1:rax 
  .loc 1 341 5
  # $19.1: @FILE = call(write_332, $18.1, "[0m")
  mov rdi, rax
  lea rsi, .LABEL__string_346[rip] # "[0m"
  call write_332
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  .loc 1 342 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_310__end
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
.LABEL__write_310__6:
  # Literal_Token.2: @Object_Type = load_variable(Literal_Token)
  lea rax, Literal_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] Literal_Token.2:rax 
  .loc 1 335 16
  # $4.1: Boolean = call(is_338, token.1, Literal_Token.2)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Literal_Token.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__write_310__7, .LABEL__write_310__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_310__9
.LABEL__write_310__7:
  .loc 1 336 20
  # $9.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $9.1:rax 
  .loc 1 336 9
  # $10.1: @FILE = call(write_334, file.1, $9.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_334
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $10.1:rax 
  .loc 1 336 9
  # $11.1: @FILE = call(write_332, $10.1, "[1;33m")
  mov rdi, rax
  lea rsi, .LABEL__string_347[rip] # "[1;33m"
  call write_332
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] 
  # jump(.LABEL__write_310__5)
  jmp .LABEL__write_310__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] 
.LABEL__write_310__9:
  # Comment_Token.3: @Object_Type = load_variable(Comment_Token)
  lea rax, Comment_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] Comment_Token.3:rax 
  .loc 1 337 16
  # $5.1: Boolean = call(is_338, token.1, Comment_Token.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Comment_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  # jump($5.1, .LABEL__write_310__10, .LABEL__write_310__5)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_310__5
.LABEL__write_310__10:
  .loc 1 338 20
  # $6.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] $6.1:rax 
  .loc 1 338 9
  # $7.1: @FILE = call(write_334, file.1, $6.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_334
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] $7.1:rax 
  .loc 1 338 9
  # $8.1: @FILE = call(write_332, $7.1, "[2;33m")
  mov rdi, rax
  lea rsi, .LABEL__string_348[rip] # "[2;33m"
  call write_332
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] 
  # jump(.LABEL__write_310__5)
  jmp .LABEL__write_310__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] 
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # [discarded value]: $2.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_310__2:
  # Keyword_Token.3: @Object_Type = load_variable(Keyword_Token)
  lea rax, Keyword_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Keyword_Token.3:rax 
  .loc 1 333 34
  # $2.2: Boolean = call(is_338, token.1, Keyword_Token.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_338
  # [discarded value]: Keyword_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:rax:[rbp-17] 
  # jump(.LABEL__write_310__3)
  mov [rbp-17], al
  jmp .LABEL__write_310__3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [discarded value]: token.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_310__end:
  mov rsp, rbp
  pop rbp
  ret

write_310__stack_frame_size: .word 32

  .loc 11 15 1
  .text
create_source_311:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_source_311__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_source_311__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  .loc 11 16 19
  # $1.1: @Int8 = load_struct_member(file_path.1, data)
  mov rax, [rdi]
  # [live values]: file_path.1:rdi $1.1:rax 
  .loc 11 16 35
  # $2.1: @Int8 = load_struct_member("r", data)
  lea rbx, .LABEL__string_349[rip] # "r"
  mov r15, [rbx]
  # [live values]: file_path.1:rdi $1.1:rax $2.1:r15 
  .loc 11 16 13
  # file.1: @FILE = call(fopen, $1.1, $2.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] file.1:rax 
  .loc 11 17 9
  # $4.1: Boolean = file.1 == null
  cmp rax, 0
  sete bl
  # [live values]: file_path.1:[rbp-8] file.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__create_source_311__2, .LABEL__create_source_311__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__create_source_311__3
.LABEL__create_source_311__2:
  .loc 11 18 9
  # return(null)
  xor rax, rax
  jmp .LABEL__create_source_311__end
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__create_source_311__3:
  .loc 11 21 5
  # content_size.1: Int = 1024
  mov rax, 1024
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:rax 
  .loc 11 22 16
  # content.1: @Int8 = call(malloc, content_size.1)
  mov rdi, rax
  mov [rbp-25], rax
  call malloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:rax 
  .loc 11 23 5
  # content_length.1: Int = 0
  xor rbx, rbx
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:rax content_length.1:rbx 
  # jump(.LABEL__create_source_311__5)
  mov [rbp-33], rax
  mov [rbp-41], rbx
.LABEL__create_source_311__5:
  # content_size.5: Int = phi(content_size.1, content_size.6)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] 
  # content_length.6: Int = phi(content_length.1, content_length.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] 
  # content.6: @Int8 = phi(content.1, content.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] 
  .loc 11 25 17
  # char.1: Int32 = call(fgetc, file.1)
  mov rdi, [rbp-16]
  call fgetc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:rax 
  .loc 11 26 13
  # $8.1: Int32 = call(feof, file.1)
  mov rdi, [rbp-16]
  mov [rbp-45], eax
  call feof
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $8.1:rax 
  .loc 11 26 13
  # $9.1: Int = cast($8.1)
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $8.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $9.1:rbx 
  .loc 11 26 13
  # $10.1: Boolean = $9.1 != 0
  cmp rbx, 0
  setne al
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:rax 
  # jump($10.1, .LABEL__create_source_311__6, .LABEL__create_source_311__8)
  test al, al
  mov [rbp-46], al
  jz .LABEL__create_source_311__8
.LABEL__create_source_311__6:
  .loc 11 36 5
  # store_array_item(content.6, content_length.6, '\0')
  mov rax, [rbp-33]
  mov rbx, [rbp-41]
  add rax, rbx
  mov BYTE PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
  .loc 11 38 12
  # $19.1: @Source = new(Source)
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $19.1:rax 
  # store_struct_member($19.1, file_path, file_path.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: file_path.1:rbx:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $19.1:rax 
  # store_struct_member($19.1, content, content.6)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+16], r15
  # [live values]: file_path.1:rbx:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:r15:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $19.1:rax 
  .loc 11 38 5
  # return($19.1)
  mov [rbp-54], rax
  jmp .LABEL__create_source_311__end
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
.LABEL__create_source_311__8:
  .loc 11 29 13
  # $11.1: Int = content_length.6 + 1
  mov rax, [rbp-41]
  add rax, 1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $11.1:rax 
  .loc 11 29 34
  # $12.1: Int = content_size.5 - 1
  mov rbx, [rbp-25]
  dec rbx
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $11.1:rax $12.1:rbx 
  .loc 11 29 13
  # $13.1: Boolean = $11.1 > $12.1
  cmp rax, rbx
  setg r15b
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:r15 
  # jump($13.1, .LABEL__create_source_311__10, .LABEL__create_source_311__11)
  test r15b, r15b
  mov [rbp-47], r15b
  jz .LABEL__create_source_311__11
.LABEL__create_source_311__10:
  .loc 11 30 28
  # content_size.4: Int = content_size.5 + 1024
  mov rax, [rbp-25]
  add rax, 1024
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:rax:[rbp-25] 
  .loc 11 31 23
  # content.3: @Int8 = call(realloc, content.6, content_size.4)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov [rbp-25], rax
  call realloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:rax:[rbp-33] 
  # jump(.LABEL__create_source_311__11)
  mov [rbp-33], rax
.LABEL__create_source_311__11:
  # content_size.6: Int = phi(content_size.4, content_size.5)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] 
  # content.4: @Int8 = phi(content.6, content.3)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] 
  .loc 11 33 35
  # $17.1: Int8 = cast(char.1)
  mov eax, [rbp-45]
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] $17.1:rax 
  .loc 11 33 9
  # store_array_item(content.4, content_length.6, $17.1)
  mov rbx, [rbp-33]
  mov r15, [rbp-41]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] 
  .loc 11 34 26
  # content_length.4: Int = content_length.6 + 1
  mov rax, [rbp-41]
  add rax, 1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] content_length.4:rax:[rbp-41] 
  # jump(.LABEL__create_source_311__5)
  mov [rbp-41], rax
  jmp .LABEL__create_source_311__5
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] content_length.4:[rbp-41] 
  # [discarded value]: content_length.4
  # [discarded value]: content.4
  # [discarded value]: content_size.6
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] 
  # [discarded value]: content.3
  # [discarded value]: content_size.4
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] 
  # [discarded value]: $13.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] 
  # [discarded value]: char.1
  # [discarded value]: content.6
  # [discarded value]: content_length.6
  # [discarded value]: content_size.5
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] 
  # [discarded value]: content_length.1
  # [discarded value]: content.1
  # [discarded value]: content_size.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: file_path.1
  # [live values]: 
.LABEL__create_source_311__end:
  mov rsp, rbp
  pop rbp
  ret

create_source_311__stack_frame_size: .word 64

  .loc 1 347 1
  .text
write_312:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_312__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_312__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi location.1:rsi 
  .loc 1 348 9
  # $1.1: Boolean = location.1 == null
  cmp rsi, 0
  sete al
  # [live values]: self.1:rdi location.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__write_312__2, .LABEL__write_312__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_312__3
.LABEL__write_312__2:
  .loc 1 349 16
  # $2.1: @FILE = call(write_332, self.1, "null")
  mov rdi, [rbp-17]
  lea rsi, .LABEL__string_343[rip] # "null"
  call write_332
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 349 9
  # return($2.1)
  mov [rbp-25], rax
  jmp .LABEL__write_312__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__write_312__3:
  .loc 1 351 23
  # $3.1: @Source = load_struct_member(location.1, source)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-17] location.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:rbx 
  .loc 1 351 23
  # $4.1: @String = load_struct_member($3.1, file_path)
  mov r15, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] location.1:rax:[rbp-9] $1.1:[rbp-1] $4.1:r15 
  .loc 1 351 12
  # $5.1: @FILE = call(write_332, self.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, r15
  call write_332
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  .loc 1 351 12
  # $6.1: @FILE = call(write_334, $5.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $6.1:rax 
  .loc 1 351 67
  # $7.1: Int = load_struct_member(location.1, line)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] location.1:rbx:[rbp-9] $1.1:[rbp-1] $6.1:rax $7.1:r15 
  .loc 1 351 12
  # $8.1: @FILE = call(write_331, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $8.1:rax 
  .loc 1 351 12
  # $9.1: @FILE = call(write_334, $8.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_334
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $9.1:rax 
  .loc 1 351 99
  # $10.1: Int = load_struct_member(location.1, column)
  mov rbx, [rbp-9]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] location.1:rbx:[rbp-9] $1.1:[rbp-1] $9.1:rax $10.1:r15 
  .loc 1 351 12
  # $11.1: @FILE = call(write_331, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_331
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $11.1:rax 
  .loc 1 351 5
  # return($11.1)
  mov [rbp-25], rax
  jmp .LABEL__write_312__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] 
  # [discarded value]: location.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_312__end:
  mov rsp, rbp
  pop rbp
  ret

write_312__stack_frame_size: .word 32

  .loc 12 9 1
  .text
append_313:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_313__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_313__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 10 52
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 10 13
  # $2.1: @List_Item = new(List_Item)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_item, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, next_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, data, data.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, is_removed, false)
  mov BYTE PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] $2.1:rax 
  .loc 12 10 5
  # item.1: @List_Item = $2.1
  mov [rbp-32], rax
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  .loc 12 11 9
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  .loc 12 11 9
  # $4.1: Boolean = $3.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, .LABEL__append_313__2, .LABEL__append_313__4)
  test r14b, r14b
  mov [rbp-32], rax
  mov [rbp-33], r14b
  jz .LABEL__append_313__4
.LABEL__append_313__2:
  .loc 12 12 9
  # store_struct_member(self.1, first_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__append_313__3)
.LABEL__append_313__3:
  .loc 12 16 5
  # store_struct_member(self.1, last_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  .loc 12 17 17
  # $6.1: Int = load_struct_member(self.1, size)
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $6.1:r15 
  .loc 12 17 17
  # $7.1: Int = $6.1 + 1
  mov r14, r15
  add r14, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $7.1:r14 
  .loc 12 17 5
  # store_struct_member(self.1, size, $7.1)
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # return()
  jmp .LABEL__append_313__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__append_313__4:
  .loc 12 14 9
  # $5.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 12 14 9
  # store_struct_member($5.1, next_item, item.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__append_313__3)
  jmp .LABEL__append_313__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_313__end:
  mov rsp, rbp
  pop rbp
  ret

append_313__stack_frame_size: .word 48

  .loc 12 20 1
  .text
prepend_314:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_314__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_314__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 21 52
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 21 13
  # $2.1: @List_Item = new(List_Item)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_item, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, data, data.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, is_removed, false)
  mov BYTE PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] $2.1:rax 
  .loc 12 21 5
  # item.1: @List_Item = $2.1
  mov [rbp-32], rax
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  .loc 12 22 9
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  .loc 12 22 9
  # $4.1: Boolean = $3.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, .LABEL__prepend_314__2, .LABEL__prepend_314__4)
  test r14b, r14b
  mov [rbp-32], rax
  mov [rbp-33], r14b
  jz .LABEL__prepend_314__4
.LABEL__prepend_314__2:
  .loc 12 23 9
  # store_struct_member(self.1, last_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__prepend_314__3)
.LABEL__prepend_314__3:
  .loc 12 27 5
  # store_struct_member(self.1, first_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  .loc 12 28 17
  # $6.1: Int = load_struct_member(self.1, size)
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $6.1:r15 
  .loc 12 28 17
  # $7.1: Int = $6.1 + 1
  mov r14, r15
  add r14, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $7.1:r14 
  .loc 12 28 5
  # store_struct_member(self.1, size, $7.1)
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # return()
  jmp .LABEL__prepend_314__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__prepend_314__4:
  .loc 12 25 9
  # $5.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-24]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 12 25 9
  # store_struct_member($5.1, prev_item, item.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__prepend_314__3)
  jmp .LABEL__prepend_314__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepend_314__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_314__stack_frame_size: .word 48

  .loc 12 31 1
  .text
remove_315:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_315__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_315__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 32 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(.LABEL__remove_315__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_315__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 33 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_315__3, .LABEL__remove_315__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_315__4
.LABEL__remove_315__3:
  .loc 12 34 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 34 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_315__5, .LABEL__remove_315__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_315__6
.LABEL__remove_315__5:
  .loc 12 35 13
  # store_struct_member(item.2, is_removed, true)
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_315__4)
.LABEL__remove_315__4:
  .loc 12 40 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__remove_315__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__remove_315__6:
  .loc 12 38 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_315__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_315__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_315__end:
  mov rsp, rbp
  pop rbp
  ret

remove_315__stack_frame_size: .word 32

  .loc 12 43 1
  .text
remove_all_316:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_all_316__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_all_316__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 44 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(.LABEL__remove_all_316__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_all_316__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 45 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_all_316__3, .LABEL__remove_all_316__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_all_316__4
.LABEL__remove_all_316__3:
  .loc 12 46 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 46 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_all_316__5, .LABEL__remove_all_316__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_all_316__6
.LABEL__remove_all_316__5:
  .loc 12 47 13
  # store_struct_member(item.2, is_removed, true)
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_all_316__6)
.LABEL__remove_all_316__6:
  .loc 12 49 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_all_316__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_all_316__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_all_316__4:
  .loc 12 51 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__remove_all_316__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_all_316__end:
  mov rsp, rbp
  pop rbp
  ret

remove_all_316__stack_frame_size: .word 32

  .loc 12 54 1
  .text
prune_317:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prune_317__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prune_317__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 55 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi item.1:rax 
  # jump(.LABEL__prune_317__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__prune_317__2:
  # item.2: @List_Item = phi(item.1, item.13)
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 56 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__prune_317__3, .LABEL__prune_317__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__prune_317__4
.LABEL__prune_317__3:
  .loc 12 57 13
  # $3.1: Boolean = load_struct_member(item.2, is_removed)
  mov rax, [rbp-8]
  mov bl, [rax+24]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  # jump($3.1, .LABEL__prune_317__5, .LABEL__prune_317__6)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__prune_317__6
.LABEL__prune_317__5:
  .loc 12 58 17
  # $4.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $4.1:rbx 
  .loc 12 58 17
  # $5.1: Boolean = $4.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:r15 
  # jump($5.1, .LABEL__prune_317__7, .LABEL__prune_317__8)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__prune_317__8
.LABEL__prune_317__7:
  .loc 12 59 17
  # $6.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $6.1:rbx 
  .loc 12 59 44
  # $7.1: @List_Item = load_struct_member(item.2, next_item)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $6.1:rbx $7.1:r15 
  .loc 12 59 17
  # store_struct_member($6.1, next_item, $7.1)
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # jump(.LABEL__prune_317__8)
.LABEL__prune_317__8:
  .loc 12 61 17
  # $8.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $8.1:rbx 
  .loc 12 61 17
  # $9.1: Boolean = $8.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:r15 
  # jump($9.1, .LABEL__prune_317__9, .LABEL__prune_317__10)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__prune_317__10
.LABEL__prune_317__9:
  .loc 12 62 17
  # $10.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $10.1:rbx 
  .loc 12 62 44
  # $11.1: @List_Item = load_struct_member(item.2, prev_item)
  mov r15, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $10.1:rbx $11.1:r15 
  .loc 12 62 17
  # store_struct_member($10.1, prev_item, $11.1)
  mov QWORD PTR [rbx], r15
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # jump(.LABEL__prune_317__10)
.LABEL__prune_317__10:
  .loc 12 64 17
  # $12.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $12.1:rbx 
  .loc 12 64 17
  # $13.1: Boolean = $12.1 == item.2
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:r15 
  # jump($13.1, .LABEL__prune_317__11, .LABEL__prune_317__12)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__prune_317__12
.LABEL__prune_317__11:
  .loc 12 65 35
  # $14.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $14.1:rbx 
  .loc 12 65 17
  # store_struct_member(self.1, first_item, $14.1)
  mov r15, [rbp-16]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # jump(.LABEL__prune_317__12)
.LABEL__prune_317__12:
  .loc 12 67 17
  # $15.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $15.1:rbx 
  .loc 12 67 17
  # $16.1: Boolean = $15.1 == item.2
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:r15 
  # jump($16.1, .LABEL__prune_317__13, .LABEL__prune_317__14)
  test r15b, r15b
  mov [rbp-22], r15b
  jz .LABEL__prune_317__14
.LABEL__prune_317__13:
  .loc 12 68 34
  # $17.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $17.1:rbx 
  .loc 12 68 17
  # store_struct_member(self.1, last_item, $17.1)
  mov r15, [rbp-16]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_317__14)
.LABEL__prune_317__14:
  .loc 12 70 25
  # $18.1: Int = load_struct_member(self.1, size)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $18.1:rbx 
  .loc 12 70 25
  # $19.1: Int = $18.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $19.1:r15 
  .loc 12 70 13
  # store_struct_member(self.1, size, $19.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_317__6)
.LABEL__prune_317__6:
  .loc 12 72 16
  # item.13: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] item.13:rbx:[rbp-8] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_317__2)
  mov [rbp-8], rbx
  jmp .LABEL__prune_317__2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] item.13:[rbp-8] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [discarded value]: item.13
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__prune_317__4:
  .loc 12 74 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__prune_317__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prune_317__end:
  mov rsp, rbp
  pop rbp
  ret

prune_317__stack_frame_size: .word 32

  .loc 12 77 1
  .text
replace_318:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_318__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_318__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # new_data.1: @Any = load_variable(new_data)
  # [live values]: self.1:rdi data.1:rsi new_data.1:rdx 
  .loc 12 78 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi new_data.1:rdx item.1:rax 
  # jump(.LABEL__replace_318__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_318__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 79 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__replace_318__3, .LABEL__replace_318__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_318__4
.LABEL__replace_318__3:
  .loc 12 80 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 80 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__replace_318__5, .LABEL__replace_318__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__replace_318__6
.LABEL__replace_318__5:
  .loc 12 81 13
  # store_struct_member(item.2, data, new_data.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: data.1:[rbp-24] new_data.1:rbx:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__replace_318__6)
.LABEL__replace_318__6:
  .loc 12 83 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__replace_318__2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_318__2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__replace_318__4:
  # return()
  jmp .LABEL__replace_318__end
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: new_data.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__replace_318__end:
  mov rsp, rbp
  pop rbp
  ret

replace_318__stack_frame_size: .word 32

  .loc 12 87 1
  .text
contains_319:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR contains_319__stack_frame_size[rip]
  sub rsp, rax
.LABEL__contains_319__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 88 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi item.1:rax 
  # jump(.LABEL__contains_319__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__contains_319__2:
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 89 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__contains_319__3, .LABEL__contains_319__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__contains_319__4
.LABEL__contains_319__3:
  .loc 12 90 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 12 90 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:r15 
  # jump($4.1, .LABEL__contains_319__5, .LABEL__contains_319__6)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__contains_319__6
.LABEL__contains_319__5:
  .loc 12 91 13
  # return(true)
  mov al, 1
  jmp .LABEL__contains_319__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__contains_319__6:
  .loc 12 93 16
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] item.5:rbx:[rbp-8] 
  # jump(.LABEL__contains_319__2)
  mov [rbp-8], rbx
  jmp .LABEL__contains_319__2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] item.5:[rbp-8] 
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__contains_319__4:
  .loc 12 95 5
  # return(false)
  mov al, 0
  jmp .LABEL__contains_319__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__contains_319__end:
  mov rsp, rbp
  pop rbp
  ret

contains_319__stack_frame_size: .word 32

  .loc 12 98 1
  .text
index_of_320:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_320__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_320__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 99 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi data.1:rsi index.1:rax 
  .loc 12 100 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rbx, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi index.1:rax item.1:rbx 
  # jump(.LABEL__index_of_320__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
.LABEL__index_of_320__2:
  # index.5: Int = phi(index.1, index.4)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] 
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  .loc 12 101 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__index_of_320__3, .LABEL__index_of_320__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__index_of_320__4
.LABEL__index_of_320__3:
  .loc 12 102 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 102 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__index_of_320__5, .LABEL__index_of_320__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__index_of_320__6
.LABEL__index_of_320__5:
  .loc 12 103 13
  # return(index.5)
  mov rax, [rbp-8]
  jmp .LABEL__index_of_320__end
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__index_of_320__6:
  .loc 12 105 16
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] 
  .loc 12 106 17
  # index.4: Int = index.5 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] index.4:rax:[rbp-8] 
  # jump(.LABEL__index_of_320__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  jmp .LABEL__index_of_320__2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:[rbp-16] index.4:[rbp-8] 
  # [discarded value]: index.4
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] 
.LABEL__index_of_320__4:
  .loc 12 108 12
  # $7.1: Int =  - 1
  mov rax, 1
  neg rax
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $7.1:rax 
  .loc 12 108 5
  # return($7.1)
  mov [rbp-33], rax
  jmp .LABEL__index_of_320__end
  # [discarded value]: $7.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # [discarded value]: item.2
  # [discarded value]: index.5
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [discarded value]: item.1
  # [discarded value]: index.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__index_of_320__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_320__stack_frame_size: .word 48

  .loc 12 111 1
  .text
get_321:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_321__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_321__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  .loc 12 112 18
  # $1.1: Int = load_struct_member(self.1, size)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi index.1:rsi $1.1:rax 
  .loc 12 112 9
  # $3.1: Boolean = index.1 >= $1.1
  cmp rsi, rax
  setge bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi index.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__get_321__3, .LABEL__get_321__2)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__get_321__2
.LABEL__get_321__3:
  .loc 12 112 9
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # jump($3.3, .LABEL__get_321__4, .LABEL__get_321__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__get_321__5
.LABEL__get_321__4:
  .loc 12 113 9
  # return(null)
  xor rax, rax
  jmp .LABEL__get_321__end
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
.LABEL__get_321__5:
  .loc 12 115 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:rbx 
  # jump(.LABEL__get_321__7)
  mov [rbp-25], rbx
.LABEL__get_321__7:
  # item.5: @List_Item = phi(item.1, item.3)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] 
  # index.3: Int = phi(index.5, index.1)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  .loc 12 116 12
  # $6.1: Boolean = index.3 > 0
  cmp QWORD PTR [rbp-9], 0
  setg al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:rax 
  # jump($6.1, .LABEL__get_321__8, .LABEL__get_321__9)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_321__9
.LABEL__get_321__8:
  .loc 12 117 16
  # item.3: @List_Item = load_struct_member(item.5, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] 
  .loc 12 118 17
  # index.5: Int = index.3 - 1
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] index.5:rax:[rbp-9] 
  # jump(.LABEL__get_321__7)
  mov [rbp-9], rax
  mov [rbp-25], rbx
  jmp .LABEL__get_321__7
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:[rbp-25] index.5:[rbp-9] 
  # [discarded value]: index.5
  # [discarded value]: item.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] 
.LABEL__get_321__9:
  .loc 12 120 12
  # $9.1: @Any = load_struct_member(item.5, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:rax:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] $9.1:rbx 
  .loc 12 120 5
  # return($9.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__get_321__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [discarded value]: index.3
  # [discarded value]: item.5
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] 
  # [discarded value]: item.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_321__2:
  .loc 12 112 31
  # $3.2: Boolean = index.1 < 0
  cmp QWORD PTR [rbp-9], 0
  setl al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:rax:[rbp-1] 
  # jump(.LABEL__get_321__3)
  mov [rbp-1], al
  jmp .LABEL__get_321__3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:[rbp-1] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [discarded value]: index.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_321__end:
  mov rsp, rbp
  pop rbp
  ret

get_321__stack_frame_size: .word 48

  .loc 12 123 1
  .text
first_322:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR first_322__stack_frame_size[rip]
  sub rsp, rax
.LABEL__first_322__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 124 9
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 124 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__first_322__2, .LABEL__first_322__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__first_322__3
.LABEL__first_322__2:
  .loc 12 125 9
  # return(null)
  xor rax, rax
  jmp .LABEL__first_322__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__first_322__3:
  .loc 12 127 12
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 127 12
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 127 5
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__first_322__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__first_322__end:
  mov rsp, rbp
  pop rbp
  ret

first_322__stack_frame_size: .word 32

  .loc 12 130 1
  .text
last_323:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_323__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_323__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 131 9
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 131 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__last_323__2, .LABEL__last_323__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__last_323__3
.LABEL__last_323__2:
  .loc 12 132 9
  # return(null)
  xor rax, rax
  jmp .LABEL__last_323__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__last_323__3:
  .loc 12 134 12
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 134 12
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 134 5
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__last_323__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_323__end:
  mov rsp, rbp
  pop rbp
  ret

last_323__stack_frame_size: .word 32

  .loc 12 149 1
  .text
create_iterator_324:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_iterator_324__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_iterator_324__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  .loc 12 150 63
  # $1.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: $1.1:rax 
  .loc 12 150 12
  # $2.1: @List_Iterator = new(List_Iterator)
  mov [rbp-8], rax
  mov rdi, 16
  call malloc
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, current_item, null)
  mov QWORD PTR [rax], 0
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_item, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 12 150 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_iterator_324__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_iterator_324__end:
  mov rsp, rbp
  pop rbp
  ret

create_iterator_324__stack_frame_size: .word 16

  .loc 12 153 1
  .text
current_325:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR current_325__stack_frame_size[rip]
  sub rsp, rax
.LABEL__current_325__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 154 9
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 154 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__current_325__2, .LABEL__current_325__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__current_325__3
.LABEL__current_325__2:
  .loc 12 155 16
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 155 16
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 155 9
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__current_325__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__current_325__3:
  .loc 12 157 5
  # return(null)
  xor rax, rax
  jmp .LABEL__current_325__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__current_325__end:
  mov rsp, rbp
  pop rbp
  ret

current_325__stack_frame_size: .word 32

  .loc 12 160 1
  .text
remove_current_326:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_current_326__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_current_326__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 161 5
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 12 161 5
  # store_struct_member($1.1, is_removed, true)
  mov BYTE PTR [rax+24], 1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__remove_current_326__end
  # [live values]: 
.LABEL__remove_current_326__end:
  mov rsp, rbp
  pop rbp
  ret

remove_current_326__stack_frame_size: .word 0

  .loc 12 164 1
  .text
has_next_327:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_next_327__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_next_327__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 165 12
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 12 165 12
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  .loc 12 165 5
  # return($2.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__has_next_327__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_next_327__end:
  mov rsp, rbp
  pop rbp
  ret

has_next_327__stack_frame_size: .word 16

  .loc 12 168 1
  .text
next_328:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_328__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_328__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 169 9
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 169 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__next_328__2, .LABEL__next_328__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__next_328__3
.LABEL__next_328__2:
  .loc 12 170 9
  # return(null)
  xor rax, rax
  jmp .LABEL__next_328__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__next_328__3:
  .loc 12 172 25
  # $3.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 172 5
  # store_struct_member(self.1, current_item, $3.1)
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] 
  .loc 12 173 22
  # $4.1: @List_Item = load_struct_member(self.1, next_item)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 12 173 22
  # $5.1: @List_Item = load_struct_member($4.1, next_item)
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $5.1:r15 
  .loc 12 173 5
  # store_struct_member(self.1, next_item, $5.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] 
  .loc 12 174 12
  # $6.1: @List_Item = load_struct_member(self.1, current_item)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 12 174 12
  # $7.1: @Any = load_struct_member($6.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:r15 
  .loc 12 174 5
  # return($7.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__next_328__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_328__end:
  mov rsp, rbp
  pop rbp
  ret

next_328__stack_frame_size: .word 32

  .loc 12 177 1
  .text
change_329:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR change_329__stack_frame_size[rip]
  sub rsp, rax
.LABEL__change_329__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 178 9
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 178 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi data.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__change_329__2, .LABEL__change_329__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__change_329__3
.LABEL__change_329__2:
  .loc 12 179 9
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 179 9
  # store_struct_member($3.1, data, data.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] data.1:r15:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__change_329__3)
.LABEL__change_329__3:
  # return()
  jmp .LABEL__change_329__end
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] 
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__change_329__end:
  mov rsp, rbp
  pop rbp
  ret

change_329__stack_frame_size: .word 32

  .loc 1 356 1
  .text
write_line_330:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_line_330__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_line_330__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  .loc 1 357 12
  # $1.1: @FILE = call(end_line_335, file.1)
  mov [rbp-8], rsi
  call end_line_335
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  .loc 1 357 12
  # $2.1: @FILE = call(write_332, $1.1, string.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_332
  # [discarded value]: $1.1
  # [discarded value]: string.1
  # [live values]: $2.1:rax 
  .loc 1 357 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_line_330__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_line_330__end:
  mov rsp, rbp
  pop rbp
  ret

write_line_330__stack_frame_size: .word 16

  .loc 1 360 1
  .text
write_331:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_331__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_331__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  .loc 1 361 9
  # $1.1: Boolean = number.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__write_331__2, .LABEL__write_331__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_331__3
.LABEL__write_331__2:
  .loc 1 362 16
  # $2.1: @FILE = call(write_334, self.1, '-')
  mov rdi, [rbp-17]
  mov sil, 45
  call write_334
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 362 38
  # $3.1: Int =  - number.1
  mov rbx, [rbp-9]
  neg rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax $3.1:rbx 
  .loc 1 362 16
  # $4.1: @FILE = call(write_331, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call write_331
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 1 362 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__write_331__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__write_331__3:
  .loc 1 364 9
  # $5.1: Boolean = number.1 >= 10
  cmp QWORD PTR [rbp-9], 10
  setge al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  # jump($5.1, .LABEL__write_331__5, .LABEL__write_331__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_331__6
.LABEL__write_331__5:
  .loc 1 365 20
  # $6.1: Int = number.1 / 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $6.1:rax 
  .loc 1 365 9
  # $7.1: @FILE = call(write_331, self.1, $6.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # jump(.LABEL__write_331__6)
.LABEL__write_331__6:
  .loc 1 367 12
  # $8.1: Int = number.1 // 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx 
  .loc 1 367 27
  # $9.1: Int = cast('0')
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx $9.1:rax 
  .loc 1 367 12
  # $10.1: Int = $8.1 + $9.1
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $10.1:rbx 
  .loc 1 367 11
  # $11.1: Int32 = cast($10.1)
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $11.1:rax 
  .loc 1 367 5
  # $12.1: Int32 = call(fputc, $11.1, self.1)
  mov edi, eax
  mov rsi, [rbp-17]
  call fputc
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  .loc 1 368 5
  # return(self.1)
  mov rax, [rbp-17]
  jmp .LABEL__write_331__end
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] 
  # [discarded value]: number.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_331__end:
  mov rsp, rbp
  pop rbp
  ret

write_331__stack_frame_size: .word 32

  .loc 1 371 1
  .text
write_332:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_332__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_332__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: self.1:rdi string.1:rsi 
  .loc 1 372 23
  # $1.1: @Int8 = load_struct_member(string.1, data)
  mov rax, [rsi]
  # [discarded value]: string.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 1 372 12
  # $2.1: @FILE = call(write_333, self.1, $1.1)
  mov rsi, rax
  call write_333
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 1 372 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_332__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_332__end:
  mov rsp, rbp
  pop rbp
  ret

write_332__stack_frame_size: .word 16

  .loc 1 375 1
  .text
write_333:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_333__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_333__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # chars.1: @Int8 = load_variable(chars)
  # [live values]: self.1:rdi chars.1:rsi 
  .loc 1 376 9
  # $1.1: Int32 = call(fputs, chars.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call fputs
  # [discarded value]: chars.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 1 376 9
  # $2.1: Int = cast($1.1)
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rbx 
  .loc 1 376 9
  # $3.1: Boolean = $2.1 < 0
  cmp rbx, 0
  setl al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__write_333__2, .LABEL__write_333__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__write_333__3
.LABEL__write_333__2:
  # stderr.14: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] stderr.14:stderr[rip] 
  .loc 1 377 9
  # $4.1: @FILE = call(end_line_335, stderr.14)
  mov rdi, stderr[rip]
  call end_line_335
  # [discarded value]: stderr.14
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $4.1:rax 
  .loc 1 377 9
  # $5.1: @FILE = call(end_line_335, $4.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $5.1:rax 
  .loc 1 377 9
  # $6.1: @FILE = call(write_332, $5.1, "Failed to write text")
  mov rdi, rax
  lea rsi, .LABEL__string_350[rip] # "Failed to write text"
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $6.1:rax 
  .loc 1 377 9
  # $7.1: @FILE = call(end_line_335, $6.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  .loc 1 378 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__write_333__3:
  .loc 1 380 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_333__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_333__end:
  mov rsp, rbp
  pop rbp
  ret

write_333__stack_frame_size: .word 16

  .loc 1 383 1
  .text
write_334:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_334__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_334__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 1 384 10
  # c.1: Int32 = cast(char.1)
  mov al, sil
  movsx eax, al
  # [discarded value]: char.1
  # [live values]: self.1:rdi c.1:rax 
  .loc 1 385 9
  # $2.1: Int32 = call(fputc, c.1, self.1)
  mov [rbp-8], rdi
  mov edi, eax
  mov rsi, [rbp-8]
  mov [rbp-12], eax
  call fputc
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $2.1:rax 
  .loc 1 385 9
  # $3.1: Boolean = $2.1 != c.1
  cmp eax, DWORD PTR [rbp-12]
  setne bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:rbx 
  # jump($3.1, .LABEL__write_334__2, .LABEL__write_334__3)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__write_334__3
.LABEL__write_334__2:
  # stderr.15: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] stderr.15:stderr[rip] 
  .loc 1 386 9
  # $4.1: @FILE = call(end_line_335, stderr.15)
  mov rdi, stderr[rip]
  call end_line_335
  # [discarded value]: stderr.15
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $4.1:rax 
  .loc 1 386 9
  # $5.1: @FILE = call(end_line_335, $4.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $5.1:rax 
  .loc 1 386 9
  # $6.1: @FILE = call(write_332, $5.1, "Failed to write character: ")
  mov rdi, rax
  lea rsi, .LABEL__string_351[rip] # "Failed to write character: "
  call write_332
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $6.1:rax 
  .loc 1 386 81
  # $7.1: Int = cast(c.1)
  mov ebx, [rbp-12]
  movsx rbx, ebx
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $6.1:rax $7.1:rbx 
  .loc 1 386 9
  # $8.1: @FILE = call(write_331, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call write_331
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $8.1:rax 
  .loc 1 386 9
  # $9.1: @FILE = call(end_line_335, $8.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
  .loc 1 387 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
.LABEL__write_334__3:
  .loc 1 389 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_334__end
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [discarded value]: c.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_334__end:
  mov rsp, rbp
  pop rbp
  ret

write_334__stack_frame_size: .word 16

  .loc 1 392 1
  .text
end_line_335:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR end_line_335__stack_frame_size[rip]
  sub rsp, rax
.LABEL__end_line_335__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 1 393 12
  # $1.1: @FILE = call(write_334, self.1, '\n')
  mov sil, 10
  call write_334
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 1 393 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__end_line_335__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__end_line_335__end:
  mov rsp, rbp
  pop rbp
  ret

end_line_335__stack_frame_size: .word 16

  .loc 1 396 1
  .text
flush_336:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR flush_336__stack_frame_size[rip]
  sub rsp, rax
.LABEL__flush_336__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  .loc 1 397 5
  # $1.1: Int32 = call(fflush, file.1)
  mov [rbp-8], rdi
  call fflush
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] 
  .loc 1 398 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__flush_336__end
  # [discarded value]: file.1
  # [live values]: 
.LABEL__flush_336__end:
  mov rsp, rbp
  pop rbp
  ret

flush_336__stack_frame_size: .word 16

  .loc 1 401 1
  .text
abort_337:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_337__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_337__1:
  # message.1: @String = load_variable(message)
  # [live values]: message.1:rdi 
  # stderr.16: @FILE = load_variable(stderr)
  # [live values]: message.1:rdi stderr.16:stderr[rip] 
  .loc 1 402 5
  # $1.1: @FILE = call(end_line_335, stderr.16)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_335
  # [discarded value]: stderr.16
  # [live values]: message.1:[rbp-8] $1.1:rax 
  .loc 1 402 5
  # $2.1: @FILE = call(end_line_335, $1.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] $2.1:rax 
  .loc 1 402 5
  # $3.1: @FILE = call(write_332, $2.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_332
  # [discarded value]: $2.1
  # [discarded value]: message.1
  # [live values]: $3.1:rax 
  .loc 1 402 5
  # $4.1: @FILE = call(end_line_335, $3.1)
  mov rdi, rax
  call end_line_335
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: 
  .loc 1 403 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_337__end:
  mov rsp, rbp
  pop rbp
  ret

abort_337__stack_frame_size: .word 16

  .loc 13 13 1
  .text
is_338:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_338__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_338__1:
  # self.1: @Object = load_variable(self)
  # [live values]: self.1:rdi 
  # object_type.1: @Object_Type = load_variable(object_type)
  # [live values]: self.1:rdi object_type.1:rsi 
  .loc 13 14 18
  # self_type.1: @Object_Type = load_struct_member(self.1, object_type)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: object_type.1:rsi self_type.1:rax 
  # jump(.LABEL__is_338__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__is_338__2:
  # self_type.2: @Object_Type = phi(self_type.1, self_type.4)
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  .loc 13 16 13
  # $2.1: Boolean = self_type.2 == object_type.1
  mov rax, [rbp-8]
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:rax:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__is_338__4, .LABEL__is_338__5)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__is_338__5
.LABEL__is_338__4:
  .loc 13 17 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_338__end
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__is_338__5:
  .loc 13 19 21
  # self_type.4: @Object_Type = load_struct_member(self_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:rbx:[rbp-8] 
  .loc 13 20 13
  # $4.1: Boolean = self_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_338__7, .LABEL__is_338__2)
  test al, al
  mov [rbp-18], al
  mov [rbp-8], rbx
  jz .LABEL__is_338__2
.LABEL__is_338__7:
  .loc 13 21 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_338__end
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:[rbp-8] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:[rbp-8] 
  # [discarded value]: self_type.4
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [discarded value]: self_type.2
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [discarded value]: self_type.1
  # [discarded value]: object_type.1
  # [live values]: 
.LABEL__is_338__end:
  mov rsp, rbp
  pop rbp
  ret

is_338__stack_frame_size: .word 32

  .loc 14 9 1
  .text
create_string_339:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_string_339__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_string_339__1:
  # data.1: @Int8 = load_variable(data)
  # [live values]: data.1:rdi 
  .loc 14 10 5
  # data_length.1: Int = 0
  xor rax, rax
  # [live values]: data.1:rdi data_length.1:rax 
  # jump(.LABEL__create_string_339__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__create_string_339__2:
  # data_length.2: Int = phi(data_length.1, data_length.4)
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  .loc 14 12 17
  # char.1: Int8 = load_array_item(data.1, data_length.2)
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  add rax, rbx
  mov al, [rax]
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] char.1:rax 
  .loc 14 13 13
  # $2.1: Boolean = char.1 == '\0'
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__create_string_339__3, .LABEL__create_string_339__5)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__create_string_339__5
.LABEL__create_string_339__3:
  .loc 14 19 48
  # $4.1: Int = data_length.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $4.1:rax 
  .loc 14 19 12
  # $5.1: @String = new(String)
  mov [rbp-25], rax
  mov rdi, 24
  call malloc
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, data, data.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-25] $5.1:rax 
  # store_struct_member($5.1, data_size, $4.1)
  mov r15, [rbp-25]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $4.1
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  # store_struct_member($5.1, length, data_length.2)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:r15:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  .loc 14 19 5
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__create_string_339__end
  # [discarded value]: $5.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__create_string_339__5:
  .loc 14 16 23
  # data_length.4: Int = data_length.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] data_length.4:rax:[rbp-8] 
  # jump(.LABEL__create_string_339__2)
  mov [rbp-8], rax
  jmp .LABEL__create_string_339__2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] data_length.4:[rbp-8] 
  # [discarded value]: data_length.4
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  # [discarded value]: data_length.2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [discarded value]: data_length.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__create_string_339__end:
  mov rsp, rbp
  pop rbp
  ret

create_string_339__stack_frame_size: .word 32

  .loc 14 22 1
  .text
clone_340:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR clone_340__stack_frame_size[rip]
  sub rsp, rax
.LABEL__clone_340__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 14 23 39
  # $1.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 14 23 32
  # $3.1: @Int8 = call(malloc, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call malloc
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 14 23 77
  # $4.1: Int = load_struct_member(self.1, data_size)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  .loc 14 23 14
  # $5.1: @String = new(String)
  mov [rbp-16], rax
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, data, $3.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, data_size, $4.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $5.1:rax 
  .loc 14 23 5
  # clone.1: @String = $5.1
  mov [rbp-16], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] clone.1:rax 
  .loc 14 24 5
  # $6.1: @String = call(append_349, clone.1, self.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_349
  # [discarded value]: $6.1
  # [discarded value]: self.1
  # [live values]: clone.1:[rbp-16] 
  .loc 14 25 5
  # return(clone.1)
  mov rax, [rbp-16]
  jmp .LABEL__clone_340__end
  # [discarded value]: clone.1
  # [live values]: 
.LABEL__clone_340__end:
  mov rsp, rbp
  pop rbp
  ret

clone_340__stack_frame_size: .word 32

  .loc 14 28 1
  .text
equals_341:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_341__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_341__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 29 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 29 24
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 29 9
  # $3.1: Boolean = $1.1 == $2.1
  cmp rax, rbx
  sete r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__equals_341__2, .LABEL__equals_341__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__equals_341__3
.LABEL__equals_341__2:
  .loc 14 30 9
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__equals_341__4)
  mov [rbp-25], rax
.LABEL__equals_341__4:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 31 24
  # $4.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 31 16
  # $5.1: Boolean = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__equals_341__5, .LABEL__equals_341__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__equals_341__6
.LABEL__equals_341__5:
  .loc 14 32 17
  # $6.1: @Int8 = load_struct_member(self.1, data)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 32 17
  # $7.1: Int8 = load_array_item($6.1, index.2)
  mov r15, rbx
  mov r14, [rbp-25]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 14 32 37
  # $8.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [rbp-8]
  mov r14, [rbx]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $8.1:r14 
  .loc 14 32 37
  # $9.1: Int8 = load_array_item($8.1, index.2)
  mov r13, r14
  mov r12, [rbp-25]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $9.1:r13 
  .loc 14 32 17
  # $10.1: Boolean = $7.1 != $9.1
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:r14 
  # jump($10.1, .LABEL__equals_341__7, .LABEL__equals_341__8)
  test r14b, r14b
  mov [rbp-27], r14b
  jz .LABEL__equals_341__8
.LABEL__equals_341__7:
  .loc 14 33 17
  # return(false)
  mov al, 0
  jmp .LABEL__equals_341__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
.LABEL__equals_341__8:
  .loc 14 35 21
  # index.5: Int = index.2 + 1
  mov rax, [rbp-25]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__equals_341__4)
  mov [rbp-25], rax
  jmp .LABEL__equals_341__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__equals_341__6:
  .loc 14 37 9
  # return(true)
  mov al, 1
  jmp .LABEL__equals_341__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__equals_341__3:
  .loc 14 39 5
  # return(false)
  mov al, 0
  jmp .LABEL__equals_341__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__equals_341__end:
  mov rsp, rbp
  pop rbp
  ret

equals_341__stack_frame_size: .word 32

  .loc 14 42 1
  .text
index_of_342:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_342__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_342__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 43 5
  # self_index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi other.1:rsi self_index.1:rax 
  # jump(.LABEL__index_of_342__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__index_of_342__2:
  # self_index.2: Int = phi(self_index.1, self_index.6)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  .loc 14 44 26
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx 
  .loc 14 44 40
  # $2.1: Int = load_struct_member(other.1, length)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx $2.1:r14 
  .loc 14 44 26
  # $3.1: Int = $1.1 - $2.1
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $3.1:r13 
  .loc 14 44 12
  # $4.1: Boolean = self_index.2 <= $3.1
  cmp QWORD PTR [rbp-8], r13
  setle bl
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:rbx 
  # jump($4.1, .LABEL__index_of_342__3, .LABEL__index_of_342__4)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__index_of_342__4
.LABEL__index_of_342__3:
  .loc 14 45 9
  # other_index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:rax 
  # jump(.LABEL__index_of_342__5)
  mov [rbp-33], rax
.LABEL__index_of_342__5:
  # other_index.2: Int = phi(other_index.1, other_index.5)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] 
  .loc 14 46 30
  # $5.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $5.1:rbx 
  .loc 14 46 16
  # $7.1: Boolean = other_index.2 < $5.1
  cmp QWORD PTR [rbp-33], rbx
  setl r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:r15 
  # jump($7.1, .LABEL__index_of_342__8, .LABEL__index_of_342__9)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__index_of_342__9
.LABEL__index_of_342__8:
  .loc 14 46 56
  # $8.1: Int = self_index.2 + other_index.2
  mov rax, [rbp-8]
  add rax, QWORD PTR [rbp-33]
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $8.1:rax 
  .loc 14 46 46
  # $9.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $8.1:rax $9.1:r15 
  .loc 14 46 46
  # $10.1: Int8 = load_array_item($9.1, $8.1)
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov r14b, [r14]
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 
  .loc 14 46 85
  # $11.1: @Int8 = load_struct_member(other.1, data)
  mov rax, [rbp-16]
  mov r15, [rax]
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 $11.1:r15 
  .loc 14 46 85
  # $12.1: Int8 = load_array_item($11.1, other_index.2)
  mov r13, r15
  mov r12, [rbp-33]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $11.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 $12.1:r13 
  .loc 14 46 46
  # $7.2: Boolean = $10.1 == $12.1
  cmp r14b, r13b
  sete r15b
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:r15:[rbp-34] 
  # jump(.LABEL__index_of_342__9)
  mov [rbp-34], r15b
.LABEL__index_of_342__9:
  .loc 14 46 16
  # $7.3: Boolean = phi($7.1, $7.2)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump($7.3, .LABEL__index_of_342__6, .LABEL__index_of_342__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__index_of_342__7
.LABEL__index_of_342__6:
  .loc 14 47 27
  # other_index.5: Int = other_index.2 + 1
  mov rax, [rbp-33]
  add rax, 1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] other_index.5:rax:[rbp-33] $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump(.LABEL__index_of_342__5)
  mov [rbp-33], rax
  jmp .LABEL__index_of_342__5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] other_index.5:[rbp-33] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: other_index.5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
.LABEL__index_of_342__7:
  .loc 14 49 28
  # $15.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $15.1:rbx $7.2:[rbp-34] $7.3:[rbp-34] 
  .loc 14 49 13
  # $16.1: Boolean = other_index.2 == $15.1
  cmp QWORD PTR [rbp-33], rbx
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:r15 $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump($16.1, .LABEL__index_of_342__10, .LABEL__index_of_342__11)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__index_of_342__11
.LABEL__index_of_342__10:
  .loc 14 50 13
  # return(self_index.2)
  mov rax, [rbp-8]
  jmp .LABEL__index_of_342__end
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] 
.LABEL__index_of_342__11:
  .loc 14 52 22
  # self_index.6: Int = self_index.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] self_index.6:rax:[rbp-8] 
  # jump(.LABEL__index_of_342__2)
  mov [rbp-8], rax
  jmp .LABEL__index_of_342__2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] self_index.6:[rbp-8] 
  # [discarded value]: self_index.6
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: $7.3
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] 
  # [discarded value]: $7.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [discarded value]: other_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] 
  # [discarded value]: other_index.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] 
.LABEL__index_of_342__4:
  .loc 14 54 12
  # $18.1: Int =  - 1
  mov rax, 1
  neg rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] $18.1:rax 
  .loc 14 54 5
  # return($18.1)
  mov [rbp-33], rax
  jmp .LABEL__index_of_342__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  # [discarded value]: self_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [discarded value]: self_index.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__index_of_342__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_342__stack_frame_size: .word 48

  .loc 14 57 1
  .text
starts_with_343:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR starts_with_343__stack_frame_size[rip]
  sub rsp, rax
.LABEL__starts_with_343__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 58 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 58 23
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 58 9
  # $3.1: Boolean = $1.1 < $2.1
  cmp rax, rbx
  setl r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__starts_with_343__2, .LABEL__starts_with_343__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__starts_with_343__3
.LABEL__starts_with_343__2:
  .loc 14 59 9
  # return(false)
  mov al, 0
  jmp .LABEL__starts_with_343__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__starts_with_343__3:
  .loc 14 61 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__starts_with_343__5)
  mov [rbp-25], rax
.LABEL__starts_with_343__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 62 20
  # $4.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 62 12
  # $5.1: Boolean = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__starts_with_343__6, .LABEL__starts_with_343__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__starts_with_343__7
.LABEL__starts_with_343__6:
  .loc 14 63 13
  # $6.1: @Int8 = load_struct_member(self.1, data)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 63 13
  # $7.1: Int8 = load_array_item($6.1, index.2)
  mov r15, rbx
  mov r14, [rbp-25]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 14 63 33
  # $8.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [rbp-8]
  mov r14, [rbx]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $8.1:r14 
  .loc 14 63 33
  # $9.1: Int8 = load_array_item($8.1, index.2)
  mov r13, r14
  mov r12, [rbp-25]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $9.1:r13 
  .loc 14 63 13
  # $10.1: Boolean = $7.1 != $9.1
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:r14 
  # jump($10.1, .LABEL__starts_with_343__8, .LABEL__starts_with_343__9)
  test r14b, r14b
  mov [rbp-27], r14b
  jz .LABEL__starts_with_343__9
.LABEL__starts_with_343__8:
  .loc 14 64 13
  # return(false)
  mov al, 0
  jmp .LABEL__starts_with_343__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
.LABEL__starts_with_343__9:
  .loc 14 66 17
  # index.5: Int = index.2 + 1
  mov rax, [rbp-25]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__starts_with_343__5)
  mov [rbp-25], rax
  jmp .LABEL__starts_with_343__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__starts_with_343__7:
  .loc 14 68 5
  # return(true)
  mov al, 1
  jmp .LABEL__starts_with_343__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__starts_with_343__end:
  mov rsp, rbp
  pop rbp
  ret

starts_with_343__stack_frame_size: .word 32

  .loc 14 71 1
  .text
ends_with_344:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR ends_with_344__stack_frame_size[rip]
  sub rsp, rax
.LABEL__ends_with_344__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 72 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 72 23
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 72 9
  # $3.1: Boolean = $1.1 < $2.1
  cmp rax, rbx
  setl r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__ends_with_344__2, .LABEL__ends_with_344__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__ends_with_344__3
.LABEL__ends_with_344__2:
  .loc 14 73 9
  # return(false)
  mov al, 0
  jmp .LABEL__ends_with_344__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__ends_with_344__3:
  .loc 14 75 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__ends_with_344__5)
  mov [rbp-25], rax
.LABEL__ends_with_344__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 76 20
  # $4.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 76 12
  # $5.1: Boolean = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__ends_with_344__6, .LABEL__ends_with_344__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__ends_with_344__7
.LABEL__ends_with_344__6:
  .loc 14 77 23
  # $6.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 77 37
  # $7.1: Int = load_struct_member(other.1, length)
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx $7.1:r14 
  .loc 14 77 23
  # $8.1: Int = $6.1 - $7.1
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $8.1:r13 
  .loc 14 77 23
  # $9.1: Int = $8.1 + index.2
  mov rbx, r13
  add rbx, QWORD PTR [rbp-25]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $9.1:rbx 
  .loc 14 77 13
  # $10.1: @Int8 = load_struct_member(self.1, data)
  mov r14, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $9.1:rbx $10.1:r14 
  .loc 14 77 13
  # $11.1: Int8 = load_array_item($10.1, $9.1)
  mov r13, r14
  mov r12, rbx
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 
  .loc 14 77 62
  # $12.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [r15]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 $12.1:rbx 
  .loc 14 77 62
  # $13.1: Int8 = load_array_item($12.1, index.2)
  mov r14, rbx
  mov r12, [rbp-25]
  add r14, r12
  mov r14b, [r14]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 $13.1:r14 
  .loc 14 77 13
  # $14.1: Boolean = $11.1 != $13.1
  cmp r13b, r14b
  setne bl
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:rbx 
  # jump($14.1, .LABEL__ends_with_344__8, .LABEL__ends_with_344__9)
  test bl, bl
  mov [rbp-27], bl
  jz .LABEL__ends_with_344__9
.LABEL__ends_with_344__8:
  .loc 14 78 13
  # return(false)
  mov al, 0
  jmp .LABEL__ends_with_344__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] 
.LABEL__ends_with_344__9:
  .loc 14 80 17
  # index.5: Int = index.2 + 1
  mov rax, [rbp-25]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__ends_with_344__5)
  mov [rbp-25], rax
  jmp .LABEL__ends_with_344__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__ends_with_344__7:
  .loc 14 82 5
  # return(true)
  mov al, 1
  jmp .LABEL__ends_with_344__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__ends_with_344__end:
  mov rsp, rbp
  pop rbp
  ret

ends_with_344__stack_frame_size: .word 32

  .loc 14 85 1
  .text
last_index_of_345:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_345__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_345__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 14 86 37
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  .loc 14 86 37
  # $2.1: Int = $1.1 - 1
  mov rbx, rax
  dec rbx
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  .loc 14 86 12
  # $3.1: Int = call(last_index_of_346, self.1, char.1, $2.1)
  mov rdx, rbx
  call last_index_of_346
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  .loc 14 86 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_345__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__last_index_of_345__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_345__stack_frame_size: .word 16

  .loc 14 89 1
  .text
last_index_of_346:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_346__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_346__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # index.1: Int = load_variable(from_index)
  # [live values]: self.1:rdi char.1:rsi index.1:rdx 
  # jump(.LABEL__last_index_of_346__2)
  mov [rbp-8], rdx
  mov [rbp-9], sil
  mov [rbp-17], rdi
.LABEL__last_index_of_346__2:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] 
  .loc 14 91 12
  # $2.1: Boolean = index.2 >= 0
  cmp QWORD PTR [rbp-8], 0
  setge al
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__last_index_of_346__5, .LABEL__last_index_of_346__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__last_index_of_346__6
.LABEL__last_index_of_346__5:
  .loc 14 91 26
  # $3.1: @Int8 = load_struct_member(self.1, data)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $3.1:rbx 
  .loc 14 91 26
  # $4.1: Int8 = load_array_item($3.1, index.2)
  mov r15, rbx
  mov r14, [rbp-8]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $4.1:r15 
  .loc 14 91 26
  # $2.2: Boolean = $4.1 != char.1
  cmp r15b, BYTE PTR [rbp-9]
  setne bl
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:rbx:[rbp-18] 
  # jump(.LABEL__last_index_of_346__6)
  mov [rbp-18], bl
.LABEL__last_index_of_346__6:
  .loc 14 91 12
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump($2.3, .LABEL__last_index_of_346__3, .LABEL__last_index_of_346__4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__last_index_of_346__4
.LABEL__last_index_of_346__3:
  .loc 14 92 17
  # index.5: Int = index.2 - 1
  mov rax, [rbp-8]
  dec rax
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:rax:[rbp-8] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump(.LABEL__last_index_of_346__2)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_346__2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:[rbp-8] $2.2:[rbp-18] $2.3:[rbp-18] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
.LABEL__last_index_of_346__4:
  .loc 14 94 5
  # return(index.2)
  mov rax, [rbp-8]
  jmp .LABEL__last_index_of_346__end
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [discarded value]: index.1
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_index_of_346__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_346__stack_frame_size: .word 32

  .loc 14 97 1
  .text
append_347:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_347__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_347__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 14 98 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  .loc 14 98 9
  # $2.1: Int = $1.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  .loc 14 98 28
  # $3.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx $3.1:rax 
  .loc 14 98 9
  # $4.1: Boolean = $2.1 >= $3.1
  cmp rbx, rax
  setge r15b
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi char.1:rsi $4.1:r15 
  # jump($4.1, .LABEL__append_347__2, .LABEL__append_347__3)
  test r15b, r15b
  mov [rbp-1], sil
  mov [rbp-9], rdi
  mov [rbp-10], r15b
  jz .LABEL__append_347__3
.LABEL__append_347__2:
  .loc 14 99 26
  # $5.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $5.1:rbx 
  .loc 14 99 26
  # $6.1: Int = $5.1 + 16
  mov r15, rbx
  add r15, 16
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $6.1:r15 
  .loc 14 99 9
  # store_struct_member(self.1, data_size, $6.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  .loc 14 100 29
  # $7.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $7.1:rbx 
  .loc 14 100 40
  # $8.1: Int = load_struct_member(self.1, data_size)
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $7.1:rbx $8.1:r15 
  .loc 14 100 21
  # $10.1: @Int8 = call(realloc, $7.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  call realloc
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $10.1:rax 
  .loc 14 100 9
  # store_struct_member(self.1, data, $10.1)
  mov rbx, [rbp-9]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # jump(.LABEL__append_347__3)
.LABEL__append_347__3:
  .loc 14 102 15
  # $11.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $11.1:rbx 
  .loc 14 102 5
  # $12.1: @Int8 = load_struct_member(self.1, data)
  mov r15, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $11.1:rbx $12.1:r15 
  .loc 14 102 5
  # store_array_item($12.1, $11.1, char.1)
  mov r14, r15
  mov r13, rbx
  add r14, r13
  mov r13b, [rbp-1]
  mov BYTE PTR [r14], r13b
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 103 19
  # $13.1: Int = load_struct_member(self.1, length)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $13.1:rbx 
  .loc 14 103 19
  # $14.1: Int = $13.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $14.1:r15 
  .loc 14 103 5
  # store_struct_member(self.1, length, $14.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 104 15
  # $15.1: Int = load_struct_member(self.1, length)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $15.1:rbx 
  .loc 14 104 5
  # $16.1: @Int8 = load_struct_member(self.1, data)
  mov r15, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $15.1:rbx $16.1:r15 
  .loc 14 104 5
  # store_array_item($16.1, $15.1, '\0')
  mov r14, r15
  mov r12, rbx
  add r14, r12
  mov BYTE PTR [r14], 0
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 105 5
  # return(self.1)
  jmp .LABEL__append_347__end
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_347__end:
  mov rsp, rbp
  pop rbp
  ret

append_347__stack_frame_size: .word 16

  .loc 14 108 1
  .text
append_348:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_348__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_348__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  .loc 14 109 9
  # $1.1: Boolean = number.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__append_348__2, .LABEL__append_348__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_348__3
.LABEL__append_348__2:
  .loc 14 110 16
  # $2.1: @String = call(append_347, self.1, '-')
  mov rdi, [rbp-17]
  mov sil, 45
  call append_347
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 14 110 40
  # $3.1: Int =  - number.1
  mov rbx, [rbp-9]
  neg rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax $3.1:rbx 
  .loc 14 110 16
  # $4.1: @String = call(append_348, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call append_348
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 14 110 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__append_348__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__append_348__3:
  .loc 14 112 9
  # $5.1: Boolean = number.1 >= 10
  cmp QWORD PTR [rbp-9], 10
  setge al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  # jump($5.1, .LABEL__append_348__5, .LABEL__append_348__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__append_348__6
.LABEL__append_348__5:
  .loc 14 113 21
  # $6.1: Int = number.1 / 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $6.1:rax 
  .loc 14 113 9
  # $7.1: @String = call(append_348, self.1, $6.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call append_348
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # jump(.LABEL__append_348__6)
.LABEL__append_348__6:
  .loc 14 115 25
  # $8.1: Int = number.1 // 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx 
  .loc 14 115 40
  # $9.1: Int = cast('0')
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx $9.1:rax 
  .loc 14 115 25
  # $10.1: Int = $8.1 + $9.1
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $10.1:rbx 
  .loc 14 115 24
  # $11.1: Int8 = cast($10.1)
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $11.1:rax 
  .loc 14 115 12
  # $12.1: @String = call(append_347, self.1, $11.1)
  mov rdi, [rbp-17]
  mov sil, al
  call append_347
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $12.1:rax 
  .loc 14 115 5
  # return($12.1)
  mov [rbp-26], rax
  jmp .LABEL__append_348__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] 
  # [discarded value]: number.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_348__end:
  mov rsp, rbp
  pop rbp
  ret

append_348__stack_frame_size: .word 32

  .loc 14 118 1
  .text
append_349:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_349__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_349__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 119 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 119 23
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 119 9
  # $3.1: Int = $1.1 + $2.1
  mov r15, rax
  add r15, rbx
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  .loc 14 119 39
  # $4.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 $4.1:rax 
  .loc 14 119 9
  # $5.1: Boolean = $3.1 >= $4.1
  cmp r15, rax
  setge bl
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi other.1:rsi $5.1:rbx 
  # jump($5.1, .LABEL__append_349__2, .LABEL__append_349__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_349__3
.LABEL__append_349__2:
  .loc 14 120 26
  # $6.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] $6.1:rbx 
  .loc 14 120 40
  # $7.1: Int = load_struct_member(other.1, length)
  mov r15, [rbp-9]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $6.1:rbx $7.1:r14 
  .loc 14 120 26
  # $8.1: Int = $6.1 + $7.1
  mov r13, rbx
  add r13, r14
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $8.1:r13 
  .loc 14 120 26
  # $9.1: Int = $8.1 + 1
  mov rbx, r13
  add rbx, 1
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $9.1:rbx 
  .loc 14 120 9
  # store_struct_member(self.1, data_size, $9.1)
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] 
  .loc 14 121 29
  # $10.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $10.1:rbx 
  .loc 14 121 40
  # $11.1: Int = load_struct_member(self.1, data_size)
  mov r14, [rax+8]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $10.1:rbx $11.1:r14 
  .loc 14 121 21
  # $13.1: @Int8 = call(realloc, $10.1, $11.1)
  mov rdi, rbx
  mov rsi, r14
  call realloc
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] $13.1:rax 
  .loc 14 121 9
  # store_struct_member(self.1, data, $13.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # jump(.LABEL__append_349__3)
.LABEL__append_349__3:
  .loc 14 123 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:rax 
  .loc 14 124 19
  # other_data.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 
  .loc 14 125 18
  # self_data.1: @Int8 = load_struct_member(self.1, data)
  mov r14, [rbp-17]
  mov r13, [r14]
  # [live values]: self.1:r14:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 self_data.1:r13 
  .loc 14 126 20
  # self_length.1: Int = load_struct_member(self.1, length)
  mov r12, [r14+16]
  # [live values]: self.1:r14:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 self_data.1:r13 self_length.1:r12 
  # jump(.LABEL__append_349__4)
  mov [rbp-25], rax
  mov [rbp-33], r12
  mov [rbp-41], r13
  mov [rbp-49], r15
.LABEL__append_349__4:
  # self_length.2: Int = phi(self_length.1, self_length.4)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] 
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] 
  .loc 14 128 17
  # char.1: Int8 = load_array_item(other_data.1, index.2)
  mov rax, [rbp-49]
  mov rbx, [rbp-25]
  add rax, rbx
  mov al, [rax]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] char.1:rax 
  .loc 14 129 9
  # store_array_item(self_data.1, self_length.2, char.1)
  mov rbx, [rbp-41]
  mov r15, [rbp-33]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] char.1:rax 
  .loc 14 130 13
  # $18.1: Boolean = char.1 == '\0'
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:rbx 
  # jump($18.1, .LABEL__append_349__5, .LABEL__append_349__7)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__append_349__7
.LABEL__append_349__5:
  .loc 14 136 5
  # store_struct_member(self.1, length, self_length.2)
  mov rax, [rbp-17]
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:rax:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:rbx:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
  .loc 14 137 5
  # return(self.1)
  jmp .LABEL__append_349__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
.LABEL__append_349__7:
  .loc 14 133 23
  # self_length.4: Int = self_length.2 + 1
  mov rax, [rbp-33]
  add rax, 1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] 
  .loc 14 134 17
  # index.4: Int = index.2 + 1
  mov rbx, [rbp-25]
  add rbx, 1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] index.4:rbx:[rbp-25] 
  # jump(.LABEL__append_349__4)
  mov [rbp-33], rax
  mov [rbp-25], rbx
  jmp .LABEL__append_349__4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:[rbp-33] index.4:[rbp-25] 
  # [discarded value]: index.4
  # [discarded value]: self_length.4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [discarded value]: self_length.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] 
  # [discarded value]: self_length.1
  # [discarded value]: self_data.1
  # [discarded value]: other_data.1
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_349__end:
  mov rsp, rbp
  pop rbp
  ret

append_349__stack_frame_size: .word 64

  .loc 14 140 1
  .text
remove_350:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_350__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_350__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # begin_index.1: Int = load_variable(begin_index)
  # [live values]: self.1:rdi begin_index.1:rsi 
  # end_index.1: Int = load_variable(end_index)
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx 
  .loc 14 141 9
  # $2.1: Boolean = begin_index.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx $2.1:rax 
  # jump($2.1, .LABEL__remove_350__5, .LABEL__remove_350__4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__remove_350__4
.LABEL__remove_350__5:
  .loc 14 141 9
  # $4.1: Boolean = phi($2.1, $2.2)
  mov al, [rbp-1]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__remove_350__3, .LABEL__remove_350__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__remove_350__2
.LABEL__remove_350__3:
  .loc 14 141 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # jump($4.3, .LABEL__remove_350__6, .LABEL__remove_350__7)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_350__7
.LABEL__remove_350__6:
  .loc 14 142 9
  # call(abort_337, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_337
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
.LABEL__remove_350__7:
  .loc 14 144 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:rax 
  # jump(.LABEL__remove_350__8)
  mov [rbp-34], rax
.LABEL__remove_350__8:
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  .loc 14 145 12
  # $7.1: Int = index.2 + end_index.1
  mov rax, [rbp-34]
  add rax, QWORD PTR [rbp-9]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax 
  .loc 14 145 33
  # $8.1: Int = load_struct_member(self.1, length)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax $8.1:r15 
  .loc 14 145 12
  # $9.1: Boolean = $7.1 <= $8.1
  cmp rax, r15
  setle r14b
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:r14 
  # jump($9.1, .LABEL__remove_350__9, .LABEL__remove_350__10)
  test r14b, r14b
  mov [rbp-35], r14b
  jz .LABEL__remove_350__10
.LABEL__remove_350__9:
  .loc 14 146 19
  # $10.1: Int = begin_index.1 + index.2
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax 
  .loc 14 146 9
  # $11.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rbp-25]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 
  .loc 14 146 52
  # $12.1: Int = end_index.1 + index.2
  mov r14, [rbp-9]
  add r14, QWORD PTR [rbp-34]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $12.1:r14 
  .loc 14 146 42
  # $13.1: @Int8 = load_struct_member(self.1, data)
  mov r13, [rbx]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $12.1:r14 $13.1:r13 
  .loc 14 146 42
  # $14.1: Int8 = load_array_item($13.1, $12.1)
  mov r12, r13
  mov r11, r14
  add r12, r11
  mov r12b, [r12]
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $14.1:r12 
  .loc 14 146 9
  # store_array_item($11.1, $10.1, $14.1)
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov BYTE PTR [r14], r12b
  # [discarded value]: $14.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  .loc 14 147 17
  # index.4: Int = index.2 + 1
  mov rax, [rbp-34]
  add rax, 1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] index.4:rax:[rbp-34] 
  # jump(.LABEL__remove_350__8)
  mov [rbp-34], rax
  jmp .LABEL__remove_350__8
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] index.4:[rbp-34] 
  # [discarded value]: index.4
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
.LABEL__remove_350__10:
  .loc 14 149 19
  # $16.1: Int = begin_index.1 + index.2
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $16.1:rax 
  .loc 14 149 19
  # $17.1: Int = $16.1 - 1
  mov rbx, rax
  dec rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $17.1:rbx 
  .loc 14 149 5
  # store_struct_member(self.1, length, $17.1)
  mov rax, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  .loc 14 150 5
  # return(self.1)
  jmp .LABEL__remove_350__end
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
.LABEL__remove_350__2:
  .loc 14 141 68
  # $5.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $5.1:rbx $4.1:[rbp-26] 
  .loc 14 141 55
  # $4.2: Boolean = end_index.1 >= $5.1
  cmp QWORD PTR [rbp-9], rbx
  setge r15b
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:r15:[rbp-26] $4.1:[rbp-26] 
  # jump(.LABEL__remove_350__3)
  mov [rbp-26], r15b
  jmp .LABEL__remove_350__3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_350__4:
  .loc 14 141 28
  # $2.2: Boolean = begin_index.1 > end_index.1
  mov rax, [rbp-17]
  cmp rax, QWORD PTR [rbp-9]
  setg bl
  # [live values]: self.1:[rbp-25] begin_index.1:rax:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:rbx:[rbp-1] 
  # jump(.LABEL__remove_350__5)
  mov [rbp-1], bl
  jmp .LABEL__remove_350__5
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: end_index.1
  # [discarded value]: begin_index.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_350__end:
  mov rsp, rbp
  pop rbp
  ret

remove_350__stack_frame_size: .word 48

  .section .rodata

  .align 8
.LABEL__string_0:
  .quad .LABEL__string_0__data
  .quad 7
  .quad 6
.LABEL__string_0__data: .string "Usage:"

  .align 8
.LABEL__string_1:
  .quad .LABEL__string_1__data
  .quad 28
  .quad 27
.LABEL__string_1__data: .string " <INPUT FILE> <OUTPUT FILE>"

  .align 8
.LABEL__string_2:
  .quad .LABEL__string_2__data
  .quad 6
  .quad 5
.LABEL__string_2__data: .string ".code"

  .align 8
.LABEL__string_3:
  .quad .LABEL__string_3__data
  .quad 2
  .quad 1
.LABEL__string_3__data: .string "'"

  .align 8
.LABEL__string_4:
  .quad .LABEL__string_4__data
  .quad 28
  .quad 27
.LABEL__string_4__data: .string "' doesn't end with '.code'."

  .align 8
.LABEL__string_5:
  .quad .LABEL__string_5__data
  .quad 3
  .quad 2
.LABEL__string_5__data: .string ".s"

  .align 8
.LABEL__string_6:
  .quad .LABEL__string_6__data
  .quad 25
  .quad 24
.LABEL__string_6__data: .string "' doesn't end with '.s'."

  .align 8
.LABEL__string_7:
  .quad .LABEL__string_7__data
  .quad 4
  .quad 3
.LABEL__string_7__data: .string ".ir"

  .align 8
.LABEL__string_8:
  .quad .LABEL__string_8__data
  .quad 26
  .quad 25
.LABEL__string_8__data: .string "' doesn't end with '.ir'."

  .align 8
.LABEL__string_9:
  .quad .LABEL__string_9__data
  .quad 2
  .quad 1
.LABEL__string_9__data: .string "w"

  .align 8
.LABEL__string_10:
  .quad .LABEL__string_10__data
  .quad 9
  .quad 8
.LABEL__string_10__data: .string "  .file "

  .align 8
.LABEL__string_11:
  .quad .LABEL__string_11__data
  .quad 3
  .quad 2
.LABEL__string_11__data: .string " \""

  .align 8
.LABEL__string_12:
  .quad .LABEL__string_12__data
  .quad 2
  .quad 1
.LABEL__string_12__data: .string "\""

  .align 8
.LABEL__string_13:
  .quad .LABEL__string_13__data
  .quad 25
  .quad 24
.LABEL__string_13__data: .string "  .intel_syntax noprefix"

  .align 8
.LABEL__string_14:
  .quad .LABEL__string_14__data
  .quad 8
  .quad 7
.LABEL__string_14__data: .string "  .loc "

  .align 8
.LABEL__string_15:
  .quad .LABEL__string_15__data
  .quad 8
  .quad 7
.LABEL__string_15__data: .string "  .text"

  .align 8
.LABEL__string_16:
  .quad .LABEL__string_16__data
  .quad 5
  .quad 4
.LABEL__string_16__data: .string "main"

  .align 8
.LABEL__string_17:
  .quad .LABEL__string_17__data
  .quad 14
  .quad 13
.LABEL__string_17__data: .string "  .globl main"

  .align 8
.LABEL__string_18:
  .quad .LABEL__string_18__data
  .quad 6
  .quad 5
.LABEL__string_18__data: .string "main:"

  .align 8
.LABEL__string_19:
  .quad .LABEL__string_19__data
  .quad 11
  .quad 10
.LABEL__string_19__data: .string "  push rbp"

  .align 8
.LABEL__string_20:
  .quad .LABEL__string_20__data
  .quad 15
  .quad 14
.LABEL__string_20__data: .string "  mov rbp, rsp"

  .align 8
.LABEL__string_21:
  .quad .LABEL__string_21__data
  .quad 23
  .quad 22
.LABEL__string_21__data: .string "  movsx rax, WORD PTR "

  .align 8
.LABEL__string_22:
  .quad .LABEL__string_22__data
  .quad 19
  .quad 18
.LABEL__string_22__data: .string "__stack_frame_size"

  .align 8
.LABEL__string_23:
  .quad .LABEL__string_23__data
  .quad 6
  .quad 5
.LABEL__string_23__data: .string "[rip]"

  .align 8
.LABEL__string_24:
  .quad .LABEL__string_24__data
  .quad 15
  .quad 14
.LABEL__string_24__data: .string "  sub rsp, rax"

  .align 8
.LABEL__string_25:
  .quad .LABEL__string_25__data
  .quad 2
  .quad 1
.LABEL__string_25__data: .string ":"

  .align 8
.LABEL__string_26:
  .quad .LABEL__string_26__data
  .quad 15
  .quad 14
.LABEL__string_26__data: .string "  mov rsp, rbp"

  .align 8
.LABEL__string_27:
  .quad .LABEL__string_27__data
  .quad 10
  .quad 9
.LABEL__string_27__data: .string "  pop rbp"

  .align 8
.LABEL__string_28:
  .quad .LABEL__string_28__data
  .quad 15
  .quad 14
.LABEL__string_28__data: .string "  xor rax, rax"

  .align 8
.LABEL__string_29:
  .quad .LABEL__string_29__data
  .quad 6
  .quad 5
.LABEL__string_29__data: .string "  ret"

  .align 8
.LABEL__string_30:
  .quad .LABEL__string_30__data
  .quad 9
  .quad 8
.LABEL__string_30__data: .string ": .word "

  .align 8
.LABEL__string_31:
  .quad .LABEL__string_31__data
  .quad 9
  .quad 8
.LABEL__string_31__data: .string ".LABEL__"

  .align 8
.LABEL__string_32:
  .quad .LABEL__string_32__data
  .quad 3
  .quad 2
.LABEL__string_32__data: .string "__"

  .align 8
.LABEL__string_33:
  .quad .LABEL__string_33__data
  .quad 4
  .quad 3
.LABEL__string_33__data: .string "end"

  .align 8
.LABEL__string_34:
  .quad .LABEL__string_34__data
  .quad 32
  .quad 31
.LABEL__string_34__data: .string "  # [unreachable instruction]: "

  .align 8
.LABEL__string_35:
  .quad .LABEL__string_35__data
  .quad 5
  .quad 4
.LABEL__string_35__data: .string "  # "

  .align 8
.LABEL__string_36:
  .quad .LABEL__string_36__data
  .quad 26
  .quad 25
.LABEL__string_36__data: .string "Unsupported instruction: "

  .align 8
.LABEL__string_37:
  .quad .LABEL__string_37__data
  .quad 7
  .quad 6
.LABEL__string_37__data: .string "  add "

  .align 8
.LABEL__string_38:
  .quad .LABEL__string_38__data
  .quad 3
  .quad 2
.LABEL__string_38__data: .string ", "

  .align 8
.LABEL__string_39:
  .quad .LABEL__string_39__data
  .quad 8
  .quad 7
.LABEL__string_39__data: .string "  call "

  .align 8
.LABEL__string_40:
  .quad .LABEL__string_40__data
  .quad 9
  .quad 8
.LABEL__string_40__data: .string "  movsx "

  .align 8
.LABEL__string_41:
  .quad .LABEL__string_41__data
  .quad 13
  .quad 12
.LABEL__string_41__data: .string "Cannot cast "

  .align 8
.LABEL__string_42:
  .quad .LABEL__string_42__data
  .quad 5
  .quad 4
.LABEL__string_42__data: .string " to "

  .align 8
.LABEL__string_43:
  .quad .LABEL__string_43__data
  .quad 23
  .quad 22
.LABEL__string_43__data: .string "Unsupported value type"

  .align 8
.LABEL__string_44:
  .quad .LABEL__string_44__data
  .quad 14
  .quad 13
.LABEL__string_44__data: .string "Invalid state"

  .align 8
.LABEL__string_45:
  .quad .LABEL__string_45__data
  .quad 8
  .quad 7
.LABEL__string_45__data: .string "  test "

  .align 8
.LABEL__string_46:
  .quad .LABEL__string_46__data
  .quad 7
  .quad 6
.LABEL__string_46__data: .string "  jnz "

  .align 8
.LABEL__string_47:
  .quad .LABEL__string_47__data
  .quad 6
  .quad 5
.LABEL__string_47__data: .string "  jz "

  .align 8
.LABEL__string_48:
  .quad .LABEL__string_48__data
  .quad 7
  .quad 6
.LABEL__string_48__data: .string "  cmp "

  .align 8
.LABEL__string_49:
  .quad .LABEL__string_49__data
  .quad 8
  .quad 7
.LABEL__string_49__data: .string "  sete "

  .align 8
.LABEL__string_50:
  .quad .LABEL__string_50__data
  .quad 8
  .quad 7
.LABEL__string_50__data: .string "  setg "

  .align 8
.LABEL__string_51:
  .quad .LABEL__string_51__data
  .quad 9
  .quad 8
.LABEL__string_51__data: .string "  setge "

  .align 8
.LABEL__string_52:
  .quad .LABEL__string_52__data
  .quad 8
  .quad 7
.LABEL__string_52__data: .string "  setl "

  .align 8
.LABEL__string_53:
  .quad .LABEL__string_53__data
  .quad 9
  .quad 8
.LABEL__string_53__data: .string "  setle "

  .align 8
.LABEL__string_54:
  .quad .LABEL__string_54__data
  .quad 9
  .quad 8
.LABEL__string_54__data: .string "  setne "

  .align 8
.LABEL__string_55:
  .quad .LABEL__string_55__data
  .quad 42
  .quad 41
.LABEL__string_55__data: .string "Unsupported comparison instruction type: "

  .align 8
.LABEL__string_56:
  .quad .LABEL__string_56__data
  .quad 7
  .quad 6
.LABEL__string_56__data: .string "  jmp "

  .align 8
.LABEL__string_57:
  .quad .LABEL__string_57__data
  .quad 7
  .quad 6
.LABEL__string_57__data: .string "  cqto"

  .align 8
.LABEL__string_58:
  .quad .LABEL__string_58__data
  .quad 8
  .quad 7
.LABEL__string_58__data: .string "  idiv "

  .align 8
.LABEL__string_59:
  .quad .LABEL__string_59__data
  .quad 7
  .quad 6
.LABEL__string_59__data: .string "  mov "

  .align 8
.LABEL__string_60:
  .quad .LABEL__string_60__data
  .quad 8
  .quad 7
.LABEL__string_60__data: .string "  imul "

  .align 8
.LABEL__string_61:
  .quad .LABEL__string_61__data
  .quad 7
  .quad 6
.LABEL__string_61__data: .string "  lea "

  .align 8
.LABEL__string_62:
  .quad .LABEL__string_62__data
  .quad 12
  .quad 11
.LABEL__string_62__data: .string "Object_Type"

  .align 8
.LABEL__string_63:
  .quad .LABEL__string_63__data
  .quad 34
  .quad 33
.LABEL__string_63__data: .string "Unsupported non-external variable"

  .align 8
.LABEL__string_64:
  .quad .LABEL__string_64__data
  .quad 28
  .quad 27
.LABEL__string_64__data: .string "Unsupported variable type: "

  .align 8
.LABEL__string_65:
  .quad .LABEL__string_65__data
  .quad 25
  .quad 24
.LABEL__string_65__data: .string "TODO: compute array size"

  .align 8
.LABEL__string_66:
  .quad .LABEL__string_66__data
  .quad 7
  .quad 6
.LABEL__string_66__data: .string "malloc"

  .align 8
.LABEL__string_67:
  .quad .LABEL__string_67__data
  .quad 12
  .quad 11
.LABEL__string_67__data: .string "Looks like "

  .align 8
.LABEL__string_68:
  .quad .LABEL__string_68__data
  .quad 29
  .quad 28
.LABEL__string_68__data: .string " is not properly initialized"

  .align 8
.LABEL__string_69:
  .quad .LABEL__string_69__data
  .quad 11
  .quad 10
.LABEL__string_69__data: .string "QWORD PTR "

  .align 8
.LABEL__string_70:
  .quad .LABEL__string_70__data
  .quad 11
  .quad 10
.LABEL__string_70__data: .string "DWORD PTR "

  .align 8
.LABEL__string_71:
  .quad .LABEL__string_71__data
  .quad 10
  .quad 9
.LABEL__string_71__data: .string "WORD PTR "

  .align 8
.LABEL__string_72:
  .quad .LABEL__string_72__data
  .quad 10
  .quad 9
.LABEL__string_72__data: .string "BYTE PTR "

  .align 8
.LABEL__string_73:
  .quad .LABEL__string_73__data
  .quad 7
  .quad 6
.LABEL__string_73__data: .string "  neg "

  .align 8
.LABEL__string_74:
  .quad .LABEL__string_74__data
  .quad 7
  .quad 6
.LABEL__string_74__data: .string "  dec "

  .align 8
.LABEL__string_75:
  .quad .LABEL__string_75__data
  .quad 7
  .quad 6
.LABEL__string_75__data: .string "  sub "

  .align 8
.LABEL__string_76:
  .quad .LABEL__string_76__data
  .quad 7
  .quad 6
.LABEL__string_76__data: .string "  xor "

  .align 8
.LABEL__string_77:
  .quad .LABEL__string_77__data
  .quad 4
  .quad 3
.LABEL__string_77__data: .string " # "

  .align 8
.LABEL__string_78:
  .quad .LABEL__string_78__data
  .quad 27
  .quad 26
.LABEL__string_78__data: .string "Unsupported literal type: "

  .align 8
.LABEL__string_79:
  .quad .LABEL__string_79__data
  .quad 25
  .quad 24
.LABEL__string_79__data: .string "Unsupported value type: "

  .align 8
.LABEL__string_80:
  .quad .LABEL__string_80__data
  .quad 17
  .quad 16
.LABEL__string_80__data: .string "  mov QWORD PTR "

  .align 8
.LABEL__string_81:
  .quad .LABEL__string_81__data
  .quad 16
  .quad 15
.LABEL__string_81__data: .string "  mov BYTE PTR "

  .align 8
.LABEL__string_82:
  .quad .LABEL__string_82__data
  .quad 4
  .quad 3
.LABEL__string_82__data: .string ", 0"

  .align 8
.LABEL__string_83:
  .quad .LABEL__string_83__data
  .quad 20
  .quad 19
.LABEL__string_83__data: .string "Unsupported value: "

  .align 8
.LABEL__string_84:
  .quad .LABEL__string_84__data
  .quad 31
  .quad 30
.LABEL__string_84__data: .string "Unsupported constant literal: "

  .align 8
.LABEL__string_85:
  .quad .LABEL__string_85__data
  .quad 24
  .quad 23
.LABEL__string_85__data: .string "Unsupported type size: "

  .align 8
.LABEL__string_86:
  .quad .LABEL__string_86__data
  .quad 13
  .quad 12
.LABEL__string_86__data: .string "[Generator] "

  .align 8
.LABEL__string_87:
  .quad .LABEL__string_87__data
  .quad 4
  .quad 3
.LABEL__string_87__data: .string "rax"

  .align 8
.LABEL__string_88:
  .quad .LABEL__string_88__data
  .quad 4
  .quad 3
.LABEL__string_88__data: .string "eax"

  .align 8
.LABEL__string_89:
  .quad .LABEL__string_89__data
  .quad 3
  .quad 2
.LABEL__string_89__data: .string "ax"

  .align 8
.LABEL__string_90:
  .quad .LABEL__string_90__data
  .quad 3
  .quad 2
.LABEL__string_90__data: .string "al"

  .align 8
.LABEL__string_91:
  .quad .LABEL__string_91__data
  .quad 4
  .quad 3
.LABEL__string_91__data: .string "rcx"

  .align 8
.LABEL__string_92:
  .quad .LABEL__string_92__data
  .quad 4
  .quad 3
.LABEL__string_92__data: .string "ecx"

  .align 8
.LABEL__string_93:
  .quad .LABEL__string_93__data
  .quad 3
  .quad 2
.LABEL__string_93__data: .string "cx"

  .align 8
.LABEL__string_94:
  .quad .LABEL__string_94__data
  .quad 3
  .quad 2
.LABEL__string_94__data: .string "cl"

  .align 8
.LABEL__string_95:
  .quad .LABEL__string_95__data
  .quad 4
  .quad 3
.LABEL__string_95__data: .string "rdx"

  .align 8
.LABEL__string_96:
  .quad .LABEL__string_96__data
  .quad 4
  .quad 3
.LABEL__string_96__data: .string "edx"

  .align 8
.LABEL__string_97:
  .quad .LABEL__string_97__data
  .quad 3
  .quad 2
.LABEL__string_97__data: .string "dx"

  .align 8
.LABEL__string_98:
  .quad .LABEL__string_98__data
  .quad 3
  .quad 2
.LABEL__string_98__data: .string "dl"

  .align 8
.LABEL__string_99:
  .quad .LABEL__string_99__data
  .quad 4
  .quad 3
.LABEL__string_99__data: .string "rbx"

  .align 8
.LABEL__string_100:
  .quad .LABEL__string_100__data
  .quad 4
  .quad 3
.LABEL__string_100__data: .string "ebx"

  .align 8
.LABEL__string_101:
  .quad .LABEL__string_101__data
  .quad 3
  .quad 2
.LABEL__string_101__data: .string "bx"

  .align 8
.LABEL__string_102:
  .quad .LABEL__string_102__data
  .quad 3
  .quad 2
.LABEL__string_102__data: .string "bl"

  .align 8
.LABEL__string_103:
  .quad .LABEL__string_103__data
  .quad 4
  .quad 3
.LABEL__string_103__data: .string "rsi"

  .align 8
.LABEL__string_104:
  .quad .LABEL__string_104__data
  .quad 4
  .quad 3
.LABEL__string_104__data: .string "esi"

  .align 8
.LABEL__string_105:
  .quad .LABEL__string_105__data
  .quad 3
  .quad 2
.LABEL__string_105__data: .string "si"

  .align 8
.LABEL__string_106:
  .quad .LABEL__string_106__data
  .quad 4
  .quad 3
.LABEL__string_106__data: .string "sil"

  .align 8
.LABEL__string_107:
  .quad .LABEL__string_107__data
  .quad 4
  .quad 3
.LABEL__string_107__data: .string "rdi"

  .align 8
.LABEL__string_108:
  .quad .LABEL__string_108__data
  .quad 4
  .quad 3
.LABEL__string_108__data: .string "edi"

  .align 8
.LABEL__string_109:
  .quad .LABEL__string_109__data
  .quad 3
  .quad 2
.LABEL__string_109__data: .string "di"

  .align 8
.LABEL__string_110:
  .quad .LABEL__string_110__data
  .quad 4
  .quad 3
.LABEL__string_110__data: .string "dil"

  .align 8
.LABEL__string_111:
  .quad .LABEL__string_111__data
  .quad 4
  .quad 3
.LABEL__string_111__data: .string "rsp"

  .align 8
.LABEL__string_112:
  .quad .LABEL__string_112__data
  .quad 4
  .quad 3
.LABEL__string_112__data: .string "esp"

  .align 8
.LABEL__string_113:
  .quad .LABEL__string_113__data
  .quad 3
  .quad 2
.LABEL__string_113__data: .string "sp"

  .align 8
.LABEL__string_114:
  .quad .LABEL__string_114__data
  .quad 4
  .quad 3
.LABEL__string_114__data: .string "spl"

  .align 8
.LABEL__string_115:
  .quad .LABEL__string_115__data
  .quad 4
  .quad 3
.LABEL__string_115__data: .string "rbp"

  .align 8
.LABEL__string_116:
  .quad .LABEL__string_116__data
  .quad 4
  .quad 3
.LABEL__string_116__data: .string "ebp"

  .align 8
.LABEL__string_117:
  .quad .LABEL__string_117__data
  .quad 3
  .quad 2
.LABEL__string_117__data: .string "bp"

  .align 8
.LABEL__string_118:
  .quad .LABEL__string_118__data
  .quad 4
  .quad 3
.LABEL__string_118__data: .string "bpl"

  .align 8
.LABEL__string_119:
  .quad .LABEL__string_119__data
  .quad 3
  .quad 2
.LABEL__string_119__data: .string "r8"

  .align 8
.LABEL__string_120:
  .quad .LABEL__string_120__data
  .quad 4
  .quad 3
.LABEL__string_120__data: .string "r8d"

  .align 8
.LABEL__string_121:
  .quad .LABEL__string_121__data
  .quad 4
  .quad 3
.LABEL__string_121__data: .string "r8w"

  .align 8
.LABEL__string_122:
  .quad .LABEL__string_122__data
  .quad 4
  .quad 3
.LABEL__string_122__data: .string "r8b"

  .align 8
.LABEL__string_123:
  .quad .LABEL__string_123__data
  .quad 3
  .quad 2
.LABEL__string_123__data: .string "r9"

  .align 8
.LABEL__string_124:
  .quad .LABEL__string_124__data
  .quad 4
  .quad 3
.LABEL__string_124__data: .string "r9d"

  .align 8
.LABEL__string_125:
  .quad .LABEL__string_125__data
  .quad 4
  .quad 3
.LABEL__string_125__data: .string "r9w"

  .align 8
.LABEL__string_126:
  .quad .LABEL__string_126__data
  .quad 4
  .quad 3
.LABEL__string_126__data: .string "r9b"

  .align 8
.LABEL__string_127:
  .quad .LABEL__string_127__data
  .quad 4
  .quad 3
.LABEL__string_127__data: .string "r10"

  .align 8
.LABEL__string_128:
  .quad .LABEL__string_128__data
  .quad 5
  .quad 4
.LABEL__string_128__data: .string "r10d"

  .align 8
.LABEL__string_129:
  .quad .LABEL__string_129__data
  .quad 5
  .quad 4
.LABEL__string_129__data: .string "r10w"

  .align 8
.LABEL__string_130:
  .quad .LABEL__string_130__data
  .quad 5
  .quad 4
.LABEL__string_130__data: .string "r10b"

  .align 8
.LABEL__string_131:
  .quad .LABEL__string_131__data
  .quad 4
  .quad 3
.LABEL__string_131__data: .string "r11"

  .align 8
.LABEL__string_132:
  .quad .LABEL__string_132__data
  .quad 5
  .quad 4
.LABEL__string_132__data: .string "r11d"

  .align 8
.LABEL__string_133:
  .quad .LABEL__string_133__data
  .quad 5
  .quad 4
.LABEL__string_133__data: .string "r11w"

  .align 8
.LABEL__string_134:
  .quad .LABEL__string_134__data
  .quad 5
  .quad 4
.LABEL__string_134__data: .string "r11b"

  .align 8
.LABEL__string_135:
  .quad .LABEL__string_135__data
  .quad 4
  .quad 3
.LABEL__string_135__data: .string "r12"

  .align 8
.LABEL__string_136:
  .quad .LABEL__string_136__data
  .quad 5
  .quad 4
.LABEL__string_136__data: .string "r12d"

  .align 8
.LABEL__string_137:
  .quad .LABEL__string_137__data
  .quad 5
  .quad 4
.LABEL__string_137__data: .string "r12w"

  .align 8
.LABEL__string_138:
  .quad .LABEL__string_138__data
  .quad 5
  .quad 4
.LABEL__string_138__data: .string "r12b"

  .align 8
.LABEL__string_139:
  .quad .LABEL__string_139__data
  .quad 4
  .quad 3
.LABEL__string_139__data: .string "r13"

  .align 8
.LABEL__string_140:
  .quad .LABEL__string_140__data
  .quad 5
  .quad 4
.LABEL__string_140__data: .string "r13d"

  .align 8
.LABEL__string_141:
  .quad .LABEL__string_141__data
  .quad 5
  .quad 4
.LABEL__string_141__data: .string "r13w"

  .align 8
.LABEL__string_142:
  .quad .LABEL__string_142__data
  .quad 5
  .quad 4
.LABEL__string_142__data: .string "r13b"

  .align 8
.LABEL__string_143:
  .quad .LABEL__string_143__data
  .quad 4
  .quad 3
.LABEL__string_143__data: .string "r14"

  .align 8
.LABEL__string_144:
  .quad .LABEL__string_144__data
  .quad 5
  .quad 4
.LABEL__string_144__data: .string "r14d"

  .align 8
.LABEL__string_145:
  .quad .LABEL__string_145__data
  .quad 5
  .quad 4
.LABEL__string_145__data: .string "r14w"

  .align 8
.LABEL__string_146:
  .quad .LABEL__string_146__data
  .quad 5
  .quad 4
.LABEL__string_146__data: .string "r14b"

  .align 8
.LABEL__string_147:
  .quad .LABEL__string_147__data
  .quad 4
  .quad 3
.LABEL__string_147__data: .string "r15"

  .align 8
.LABEL__string_148:
  .quad .LABEL__string_148__data
  .quad 5
  .quad 4
.LABEL__string_148__data: .string "r15d"

  .align 8
.LABEL__string_149:
  .quad .LABEL__string_149__data
  .quad 5
  .quad 4
.LABEL__string_149__data: .string "r15w"

  .align 8
.LABEL__string_150:
  .quad .LABEL__string_150__data
  .quad 5
  .quad 4
.LABEL__string_150__data: .string "r15b"

  .align 8
.LABEL__string_151:
  .quad .LABEL__string_151__data
  .quad 24
  .quad 23
.LABEL__string_151__data: .string "All registered are used"

  .align 8
.LABEL__string_152:
  .quad .LABEL__string_152__data
  .quad 10
  .quad 9
.LABEL__string_152__data: .string "Register "

  .align 8
.LABEL__string_153:
  .quad .LABEL__string_153__data
  .quad 30
  .quad 29
.LABEL__string_153__data: .string " already mapped to variable: "

  .align 8
.LABEL__string_154:
  .quad .LABEL__string_154__data
  .quad 29
  .quad 28
.LABEL__string_154__data: .string "TODO: spill global variable "

  .align 8
.LABEL__string_155:
  .quad .LABEL__string_155__data
  .quad 24
  .quad 23
.LABEL__string_155__data: .string "  # [discarded value]: "

  .align 8
.LABEL__string_156:
  .quad .LABEL__string_156__data
  .quad 20
  .quad 19
.LABEL__string_156__data: .string "  # [live values]: "

  .align 8
.LABEL__string_157:
  .quad .LABEL__string_157__data
  .quad 23
  .quad 22
.LABEL__string_157__data: .string "  # [used registers]: "

  .align 8
.LABEL__string_158:
  .quad .LABEL__string_158__data
  .quad 19
  .quad 18
.LABEL__string_158__data: .string "Unsupported type: "

  .align 8
.LABEL__string_159:
  .quad .LABEL__string_159__data
  .quad 19
  .quad 18
.LABEL__string_159__data: .string "  .section .rodata"

  .align 8
.LABEL__string_160:
  .quad .LABEL__string_160__data
  .quad 11
  .quad 10
.LABEL__string_160__data: .string "  .align 8"

  .align 8
.LABEL__string_161:
  .quad .LABEL__string_161__data
  .quad 9
  .quad 8
.LABEL__string_161__data: .string "  .quad "

  .align 8
.LABEL__string_162:
  .quad .LABEL__string_162__data
  .quad 7
  .quad 6
.LABEL__string_162__data: .string "__data"

  .align 8
.LABEL__string_163:
  .quad .LABEL__string_163__data
  .quad 17
  .quad 16
.LABEL__string_163__data: .string "__data: .string "

  .align 8
.LABEL__string_164:
  .quad .LABEL__string_164__data
  .quad 16
  .quad 15
.LABEL__string_164__data: .string ".LABEL__string_"

  .align 8
.LABEL__string_165:
  .quad .LABEL__string_165__data
  .quad 17
  .quad 16
.LABEL__string_165__data: .string "  .quad .LABEL__"

  .align 8
.LABEL__string_166:
  .quad .LABEL__string_166__data
  .quad 18
  .quad 17
.LABEL__string_166__data: .string "__type_name__data"

  .align 8
.LABEL__string_167:
  .quad .LABEL__string_167__data
  .quad 29
  .quad 28
.LABEL__string_167__data: .string "__type_name__data: .string \""

  .align 8
.LABEL__string_168:
  .quad .LABEL__string_168__data
  .quad 10
  .quad 9
.LABEL__string_168__data: .string "  .quad 0"

  .align 8
.LABEL__string_169:
  .quad .LABEL__string_169__data
  .quad 4
  .quad 3
.LABEL__string_169__data: .string "Any"

  .align 8
.LABEL__string_170:
  .quad .LABEL__string_170__data
  .quad 8
  .quad 7
.LABEL__string_170__data: .string "Boolean"

  .align 8
.LABEL__string_171:
  .quad .LABEL__string_171__data
  .quad 4
  .quad 3
.LABEL__string_171__data: .string "Int"

  .align 8
.LABEL__string_172:
  .quad .LABEL__string_172__data
  .quad 5
  .quad 4
.LABEL__string_172__data: .string "Int8"

  .align 8
.LABEL__string_173:
  .quad .LABEL__string_173__data
  .quad 6
  .quad 5
.LABEL__string_173__data: .string "Int16"

  .align 8
.LABEL__string_174:
  .quad .LABEL__string_174__data
  .quad 6
  .quad 5
.LABEL__string_174__data: .string "Int32"

  .align 8
.LABEL__string_175:
  .quad .LABEL__string_175__data
  .quad 6
  .quad 5
.LABEL__string_175__data: .string "Int64"

  .align 8
.LABEL__string_176:
  .quad .LABEL__string_176__data
  .quad 8
  .quad 7
.LABEL__string_176__data: .string "Nothing"

  .align 8
.LABEL__string_177:
  .quad .LABEL__string_177__data
  .quad 5
  .quad 4
.LABEL__string_177__data: .string "Null"

  .align 8
.LABEL__string_178:
  .quad .LABEL__string_178__data
  .quad 10
  .quad 9
.LABEL__string_178__data: .string "Undefined"

  .align 8
.LABEL__string_179:
  .quad .LABEL__string_179__data
  .quad 21
  .quad 20
.LABEL__string_179__data: .string "Undefined function: "

  .align 8
.LABEL__string_180:
  .quad .LABEL__string_180__data
  .quad 6
  .quad 5
.LABEL__string_180__data: .string " :: ("

  .align 8
.LABEL__string_181:
  .quad .LABEL__string_181__data
  .quad 2
  .quad 1
.LABEL__string_181__data: .string ")"

  .align 8
.LABEL__string_182:
  .quad .LABEL__string_182__data
  .quad 2
  .quad 1
.LABEL__string_182__data: .string "$"

  .align 8
.LABEL__string_183:
  .quad .LABEL__string_183__data
  .quad 29
  .quad 28
.LABEL__string_183__data: .string "Duplicate type declaration: "

  .align 8
.LABEL__string_184:
  .quad .LABEL__string_184__data
  .quad 19
  .quad 18
.LABEL__string_184__data: .string "Not a struct type."

  .align 8
.LABEL__string_185:
  .quad .LABEL__string_185__data
  .quad 15
  .quad 14
.LABEL__string_185__data: .string "Unknown type: "

  .align 8
.LABEL__string_186:
  .quad .LABEL__string_186__data
  .quad 52
  .quad 51
.LABEL__string_186__data: .string "Initialized global variables are not supported yet."

  .align 8
.LABEL__string_187:
  .quad .LABEL__string_187__data
  .quad 37
  .quad 36
.LABEL__string_187__data: .string "Type inference is not supported yet."

  .align 8
.LABEL__string_188:
  .quad .LABEL__string_188__data
  .quad 25
  .quad 24
.LABEL__string_188__data: .string "Missing return statement"

  .align 8
.LABEL__string_189:
  .quad .LABEL__string_189__data
  .quad 42
  .quad 41
.LABEL__string_189__data: .string "Found non-empty unreachable block: block."

  .align 8
.LABEL__string_190:
  .quad .LABEL__string_190__data
  .quad 25
  .quad 24
.LABEL__string_190__data: .string " requires a basic block."

  .align 8
.LABEL__string_191:
  .quad .LABEL__string_191__data
  .quad 21
  .quad 20
.LABEL__string_191__data: .string "Not an array pointer"

  .align 8
.LABEL__string_192:
  .quad .LABEL__string_192__data
  .quad 8
  .quad 7
.LABEL__string_192__data: .string "Not a '"

  .align 8
.LABEL__string_193:
  .quad .LABEL__string_193__data
  .quad 8
  .quad 7
.LABEL__string_193__data: .string "' value"

  .align 8
.LABEL__string_194:
  .quad .LABEL__string_194__data
  .quad 18
  .quad 17
.LABEL__string_194__data: .string " doesn't have a '"

  .align 8
.LABEL__string_195:
  .quad .LABEL__string_195__data
  .quad 9
  .quad 8
.LABEL__string_195__data: .string "' member"

  .align 8
.LABEL__string_196:
  .quad .LABEL__string_196__data
  .quad 22
  .quad 21
.LABEL__string_196__data: .string "Undeclared variable: "

  .align 8
.LABEL__string_197:
  .quad .LABEL__string_197__data
  .quad 25
  .quad 24
.LABEL__string_197__data: .string "Break outside of a loop?"

  .align 8
.LABEL__string_198:
  .quad .LABEL__string_198__data
  .quad 18
  .quad 17
.LABEL__string_198__data: .string "Cannot assign a '"

  .align 8
.LABEL__string_199:
  .quad .LABEL__string_199__data
  .quad 15
  .quad 14
.LABEL__string_199__data: .string "' value to a '"

  .align 8
.LABEL__string_200:
  .quad .LABEL__string_200__data
  .quad 11
  .quad 10
.LABEL__string_200__data: .string "' variable"

  .align 8
.LABEL__string_201:
  .quad .LABEL__string_201__data
  .quad 29
  .quad 28
.LABEL__string_201__data: .string ": Redundant type declaration"

  .align 8
.LABEL__string_202:
  .quad .LABEL__string_202__data
  .quad 24
  .quad 23
.LABEL__string_202__data: .string "Invalid variable type: "

  .align 8
.LABEL__string_203:
  .quad .LABEL__string_203__data
  .quad 34
  .quad 33
.LABEL__string_203__data: .string "Cannot infer type from null value"

  .align 8
.LABEL__string_204:
  .quad .LABEL__string_204__data
  .quad 9
  .quad 8
.LABEL__string_204__data: .string "Not an \""

  .align 8
.LABEL__string_205:
  .quad .LABEL__string_205__data
  .quad 13
  .quad 12
.LABEL__string_205__data: .string "\" expression"

  .align 8
.LABEL__string_206:
  .quad .LABEL__string_206__data
  .quad 35
  .quad 34
.LABEL__string_206__data: .string "TODO: Evaluate constant expression"

  .align 8
.LABEL__string_207:
  .quad .LABEL__string_207__data
  .quad 31
  .quad 30
.LABEL__string_207__data: .string "Not an IR_Pointer_Type value: "

  .align 8
.LABEL__string_208:
  .quad .LABEL__string_208__data
  .quad 16
  .quad 15
.LABEL__string_208__data: .string "Values of type "

  .align 8
.LABEL__string_209:
  .quad .LABEL__string_209__data
  .quad 18
  .quad 17
.LABEL__string_209__data: .string " are not callable"

  .align 8
.LABEL__string_210:
  .quad .LABEL__string_210__data
  .quad 28
  .quad 27
.LABEL__string_210__data: .string "Invalid type literal syntax"

  .align 8
.LABEL__string_211:
  .quad .LABEL__string_211__data
  .quad 38
  .quad 37
.LABEL__string_211__data: .string "Found at least two matching functions"

  .align 8
.LABEL__string_212:
  .quad .LABEL__string_212__data
  .quad 3
  .quad 2
.LABEL__string_212__data: .string ": "

  .align 8
.LABEL__string_213:
  .quad .LABEL__string_213__data
  .quad 5
  .quad 4
.LABEL__string_213__data: .string " :: "

  .align 8
.LABEL__string_214:
  .quad .LABEL__string_214__data
  .quad 29
  .quad 28
.LABEL__string_214__data: .string "Found no matching function: "

  .align 8
.LABEL__string_215:
  .quad .LABEL__string_215__data
  .quad 9
  .quad 8
.LABEL__string_215__data: .string ") -> Any"

  .align 8
.LABEL__string_216:
  .quad .LABEL__string_216__data
  .quad 22
  .quad 21
.LABEL__string_216__data: .string "Unsupported arguments"

  .align 8
.LABEL__string_217:
  .quad .LABEL__string_217__data
  .quad 54
  .quad 53
.LABEL__string_217__data: .string "Positional arguments cannot be added after named ones"

  .align 8
.LABEL__string_218:
  .quad .LABEL__string_218__data
  .quad 31
  .quad 30
.LABEL__string_218__data: .string "Operands are not the same type"

  .align 8
.LABEL__string_219:
  .quad .LABEL__string_219__data
  .quad 7
  .quad 6
.LABEL__string_219__data: .string "String"

  .align 8
.LABEL__string_220:
  .quad .LABEL__string_220__data
  .quad 37
  .quad 36
.LABEL__string_220__data: .string "Not a IR_Struct_Type pointer value: "

  .align 8
.LABEL__string_221:
  .quad .LABEL__string_221__data
  .quad 22
  .quad 21
.LABEL__string_221__data: .string " has no such member: "

  .align 8
.LABEL__string_222:
  .quad .LABEL__string_222__data
  .quad 1
  .quad 0
.LABEL__string_222__data: .string ""

  .align 8
.LABEL__string_223:
  .quad .LABEL__string_223__data
  .quad 34
  .quad 33
.LABEL__string_223__data: .string "Struct init argument without name"

  .align 8
.LABEL__string_224:
  .quad .LABEL__string_224__data
  .quad 20
  .quad 19
.LABEL__string_224__data: .string " is not initialized"

  .align 8
.LABEL__string_225:
  .quad .LABEL__string_225__data
  .quad 28
  .quad 27
.LABEL__string_225__data: .string "Undeclared variable value: "

  .align 8
.LABEL__string_226:
  .quad .LABEL__string_226__data
  .quad 32
  .quad 31
.LABEL__string_226__data: .string "Variable type without address: "

  .align 8
.LABEL__string_227:
  .quad .LABEL__string_227__data
  .quad 19
  .quad 18
.LABEL__string_227__data: .string "Unknown function: "

  .align 8
.LABEL__string_228:
  .quad .LABEL__string_228__data
  .quad 19
  .quad 18
.LABEL__string_228__data: .string "Unknown variable: "

  .align 8
.LABEL__string_229:
  .quad .LABEL__string_229__data
  .quad 20
  .quad 19
.LABEL__string_229__data: .string ": Unexpected type: "

  .align 8
.LABEL__string_230:
  .quad .LABEL__string_230__data
  .quad 2
  .quad 1
.LABEL__string_230__data: .string "@"

  .align 8
.LABEL__string_231:
  .quad .LABEL__string_231__data
  .quad 2
  .quad 1
.LABEL__string_231__data: .string "["

  .align 8
.LABEL__string_232:
  .quad .LABEL__string_232__data
  .quad 2
  .quad 1
.LABEL__string_232__data: .string "]"

  .align 8
.LABEL__string_233:
  .quad .LABEL__string_233__data
  .quad 2
  .quad 1
.LABEL__string_233__data: .string "("

  .align 8
.LABEL__string_234:
  .quad .LABEL__string_234__data
  .quad 6
  .quad 5
.LABEL__string_234__data: .string ") -> "

  .align 8
.LABEL__string_235:
  .quad .LABEL__string_235__data
  .quad 7
  .quad 6
.LABEL__string_235__data: .string "Object"

  .align 8
.LABEL__string_236:
  .quad .LABEL__string_236__data
  .quad 7
  .quad 6
.LABEL__string_236__data: .string "Found "

  .align 8
.LABEL__string_237:
  .quad .LABEL__string_237__data
  .quad 29
  .quad 28
.LABEL__string_237__data: .string " without user instructions: "

  .align 8
.LABEL__string_238:
  .quad .LABEL__string_238__data
  .quad 10
  .quad 9
.LABEL__string_238__data: .string "undefined"

  .align 8
.LABEL__string_239:
  .quad .LABEL__string_239__data
  .quad 4
  .quad 3
.LABEL__string_239__data: .string " = "

  .align 8
.LABEL__string_240:
  .quad .LABEL__string_240__data
  .quad 10
  .quad 9
.LABEL__string_240__data: .string "condition"

  .align 8
.LABEL__string_241:
  .quad .LABEL__string_241__data
  .quad 55
  .quad 54
.LABEL__string_241__data: .string "Tried to remove instruction belonging to another block"

  .align 8
.LABEL__string_242:
  .quad .LABEL__string_242__data
  .quad 7
  .quad 6
.LABEL__string_242__data: .string "block."

  .align 8
.LABEL__string_243:
  .quad .LABEL__string_243__data
  .quad 4
  .quad 3
.LABEL__string_243__data: .string "   "

  .align 8
.LABEL__string_244:
  .quad .LABEL__string_244__data
  .quad 3
  .quad 2
.LABEL__string_244__data: .string " {"

  .align 8
.LABEL__string_245:
  .quad .LABEL__string_245__data
  .quad 6
  .quad 5
.LABEL__string_245__data: .string "abort"

  .align 8
.LABEL__string_246:
  .quad .LABEL__string_246__data
  .quad 5
  .quad 4
.LABEL__string_246__data: .string "exit"

  .align 8
.LABEL__string_247:
  .quad .LABEL__string_247__data
  .quad 17
  .quad 16
.LABEL__string_247__data: .string "argument-0-value"

  .align 8
.LABEL__string_248:
  .quad .LABEL__string_248__data
  .quad 17
  .quad 16
.LABEL__string_248__data: .string "argument-1-value"

  .align 8
.LABEL__string_249:
  .quad .LABEL__string_249__data
  .quad 17
  .quad 16
.LABEL__string_249__data: .string "argument-2-value"

  .align 8
.LABEL__string_250:
  .quad .LABEL__string_250__data
  .quad 17
  .quad 16
.LABEL__string_250__data: .string "argument-3-value"

  .align 8
.LABEL__string_251:
  .quad .LABEL__string_251__data
  .quad 17
  .quad 16
.LABEL__string_251__data: .string "argument-4-value"

  .align 8
.LABEL__string_252:
  .quad .LABEL__string_252__data
  .quad 17
  .quad 16
.LABEL__string_252__data: .string "argument-5-value"

  .align 8
.LABEL__string_253:
  .quad .LABEL__string_253__data
  .quad 25
  .quad 24
.LABEL__string_253__data: .string "Missing argument index: "

  .align 8
.LABEL__string_254:
  .quad .LABEL__string_254__data
  .quad 5
  .quad 4
.LABEL__string_254__data: .string "call"

  .align 8
.LABEL__string_255:
  .quad .LABEL__string_255__data
  .quad 17
  .quad 16
.LABEL__string_255__data: .string "function_address"

  .align 8
.LABEL__string_256:
  .quad .LABEL__string_256__data
  .quad 5
  .quad 4
.LABEL__string_256__data: .string "cast"

  .align 8
.LABEL__string_257:
  .quad .LABEL__string_257__data
  .quad 6
  .quad 5
.LABEL__string_257__data: .string "value"

  .align 8
.LABEL__string_258:
  .quad .LABEL__string_258__data
  .quad 5
  .quad 4
.LABEL__string_258__data: .string "jump"

  .align 8
.LABEL__string_259:
  .quad .LABEL__string_259__data
  .quad 16
  .quad 15
.LABEL__string_259__data: .string "load_array_item"

  .align 8
.LABEL__string_260:
  .quad .LABEL__string_260__data
  .quad 12
  .quad 11
.LABEL__string_260__data: .string "array_value"

  .align 8
.LABEL__string_261:
  .quad .LABEL__string_261__data
  .quad 12
  .quad 11
.LABEL__string_261__data: .string "index_value"

  .align 8
.LABEL__string_262:
  .quad .LABEL__string_262__data
  .quad 22
  .quad 21
.LABEL__string_262__data: .string "load_function_address"

  .align 8
.LABEL__string_263:
  .quad .LABEL__string_263__data
  .quad 27
  .quad 26
.LABEL__string_263__data: .string "load_struct_member_address"

  .align 8
.LABEL__string_264:
  .quad .LABEL__string_264__data
  .quad 19
  .quad 18
.LABEL__string_264__data: .string "load_struct_member"

  .align 8
.LABEL__string_265:
  .quad .LABEL__string_265__data
  .quad 21
  .quad 20
.LABEL__string_265__data: .string "struct_pointer_value"

  .align 8
.LABEL__string_266:
  .quad .LABEL__string_266__data
  .quad 14
  .quad 13
.LABEL__string_266__data: .string "load_variable"

  .align 8
.LABEL__string_267:
  .quad .LABEL__string_267__data
  .quad 4
  .quad 3
.LABEL__string_267__data: .string "new"

  .align 8
.LABEL__string_268:
  .quad .LABEL__string_268__data
  .quad 11
  .quad 10
.LABEL__string_268__data: .string "size_value"

  .align 8
.LABEL__string_269:
  .quad .LABEL__string_269__data
  .quad 7
  .quad 6
.LABEL__string_269__data: .string "return"

  .align 8
.LABEL__string_270:
  .quad .LABEL__string_270__data
  .quad 13
  .quad 12
.LABEL__string_270__data: .string "return_value"

  .align 8
.LABEL__string_271:
  .quad .LABEL__string_271__data
  .quad 17
  .quad 16
.LABEL__string_271__data: .string "store_array_item"

  .align 8
.LABEL__string_272:
  .quad .LABEL__string_272__data
  .quad 20
  .quad 19
.LABEL__string_272__data: .string "store_struct_member"

  .align 8
.LABEL__string_273:
  .quad .LABEL__string_273__data
  .quad 11
  .quad 10
.LABEL__string_273__data: .string "left_value"

  .align 8
.LABEL__string_274:
  .quad .LABEL__string_274__data
  .quad 12
  .quad 11
.LABEL__string_274__data: .string "right_value"

  .align 8
.LABEL__string_275:
  .quad .LABEL__string_275__data
  .quad 4
  .quad 3
.LABEL__string_275__data: .string " + "

  .align 8
.LABEL__string_276:
  .quad .LABEL__string_276__data
  .quad 4
  .quad 3
.LABEL__string_276__data: .string " / "

  .align 8
.LABEL__string_277:
  .quad .LABEL__string_277__data
  .quad 5
  .quad 4
.LABEL__string_277__data: .string " == "

  .align 8
.LABEL__string_278:
  .quad .LABEL__string_278__data
  .quad 4
  .quad 3
.LABEL__string_278__data: .string " > "

  .align 8
.LABEL__string_279:
  .quad .LABEL__string_279__data
  .quad 5
  .quad 4
.LABEL__string_279__data: .string " >= "

  .align 8
.LABEL__string_280:
  .quad .LABEL__string_280__data
  .quad 4
  .quad 3
.LABEL__string_280__data: .string " < "

  .align 8
.LABEL__string_281:
  .quad .LABEL__string_281__data
  .quad 5
  .quad 4
.LABEL__string_281__data: .string " <= "

  .align 8
.LABEL__string_282:
  .quad .LABEL__string_282__data
  .quad 5
  .quad 4
.LABEL__string_282__data: .string " // "

  .align 8
.LABEL__string_283:
  .quad .LABEL__string_283__data
  .quad 4
  .quad 3
.LABEL__string_283__data: .string " * "

  .align 8
.LABEL__string_284:
  .quad .LABEL__string_284__data
  .quad 5
  .quad 4
.LABEL__string_284__data: .string " != "

  .align 8
.LABEL__string_285:
  .quad .LABEL__string_285__data
  .quad 4
  .quad 3
.LABEL__string_285__data: .string " - "

  .align 8
.LABEL__string_286:
  .quad .LABEL__string_286__data
  .quad 4
  .quad 3
.LABEL__string_286__data: .string "phi"

  .align 8
.LABEL__string_287:
  .quad .LABEL__string_287__data
  .quad 2
  .quad 1
.LABEL__string_287__data: .string "&"

  .align 8
.LABEL__string_288:
  .quad .LABEL__string_288__data
  .quad 3
  .quad 2
.LABEL__string_288__data: .string "as"

  .align 8
.LABEL__string_289:
  .quad .LABEL__string_289__data
  .quad 2
  .quad 1
.LABEL__string_289__data: .string "*"

  .align 8
.LABEL__string_290:
  .quad .LABEL__string_290__data
  .quad 6
  .quad 5
.LABEL__string_290__data: .string "break"

  .align 8
.LABEL__string_291:
  .quad .LABEL__string_291__data
  .quad 2
  .quad 1
.LABEL__string_291__data: .string "}"

  .align 8
.LABEL__string_292:
  .quad .LABEL__string_292__data
  .quad 2
  .quad 1
.LABEL__string_292__data: .string ";"

  .align 8
.LABEL__string_293:
  .quad .LABEL__string_293__data
  .quad 2
  .quad 1
.LABEL__string_293__data: .string ","

  .align 8
.LABEL__string_294:
  .quad .LABEL__string_294__data
  .quad 2
  .quad 1
.LABEL__string_294__data: .string "."

  .align 8
.LABEL__string_295:
  .quad .LABEL__string_295__data
  .quad 5
  .quad 4
.LABEL__string_295__data: .string "else"

  .align 8
.LABEL__string_296:
  .quad .LABEL__string_296__data
  .quad 2
  .quad 1
.LABEL__string_296__data: .string "="

  .align 8
.LABEL__string_297:
  .quad .LABEL__string_297__data
  .quad 2
  .quad 1
.LABEL__string_297__data: .string "!"

  .align 8
.LABEL__string_298:
  .quad .LABEL__string_298__data
  .quad 9
  .quad 8
.LABEL__string_298__data: .string "external"

  .align 8
.LABEL__string_299:
  .quad .LABEL__string_299__data
  .quad 2
  .quad 1
.LABEL__string_299__data: .string ">"

  .align 8
.LABEL__string_300:
  .quad .LABEL__string_300__data
  .quad 2
  .quad 1
.LABEL__string_300__data: .string "-"

  .align 8
.LABEL__string_301:
  .quad .LABEL__string_301__data
  .quad 3
  .quad 2
.LABEL__string_301__data: .string "if"

  .align 8
.LABEL__string_302:
  .quad .LABEL__string_302__data
  .quad 8
  .quad 7
.LABEL__string_302__data: .string "include"

  .align 8
.LABEL__string_303:
  .quad .LABEL__string_303__data
  .quad 2
  .quad 1
.LABEL__string_303__data: .string "<"

  .align 8
.LABEL__string_304:
  .quad .LABEL__string_304__data
  .quad 5
  .quad 4
.LABEL__string_304__data: .string "loop"

  .align 8
.LABEL__string_305:
  .quad .LABEL__string_305__data
  .quad 2
  .quad 1
.LABEL__string_305__data: .string "{"

  .align 8
.LABEL__string_306:
  .quad .LABEL__string_306__data
  .quad 2
  .quad 1
.LABEL__string_306__data: .string "+"

  .align 8
.LABEL__string_307:
  .quad .LABEL__string_307__data
  .quad 2
  .quad 1
.LABEL__string_307__data: .string "/"

  .align 8
.LABEL__string_308:
  .quad .LABEL__string_308__data
  .quad 7
  .quad 6
.LABEL__string_308__data: .string "struct"

  .align 8
.LABEL__string_309:
  .quad .LABEL__string_309__data
  .quad 2
  .quad 1
.LABEL__string_309__data: .string "|"

  .align 8
.LABEL__string_310:
  .quad .LABEL__string_310__data
  .quad 6
  .quad 5
.LABEL__string_310__data: .string "while"

  .align 8
.LABEL__string_311:
  .quad .LABEL__string_311__data
  .quad 22
  .quad 21
.LABEL__string_311__data: .string "Failed to open file: "

  .align 8
.LABEL__string_312:
  .quad .LABEL__string_312__data
  .quad 24
  .quad 23
.LABEL__string_312__data: .string "Unsupported file path: "

  .align 8
.LABEL__string_313:
  .quad .LABEL__string_313__data
  .quad 3
  .quad 2
.LABEL__string_313__data: .string "./"

  .align 8
.LABEL__string_314:
  .quad .LABEL__string_314__data
  .quad 4
  .quad 3
.LABEL__string_314__data: .string "../"

  .align 8
.LABEL__string_315:
  .quad .LABEL__string_315__data
  .quad 5
  .quad 4
.LABEL__string_315__data: .string "/../"

  .align 8
.LABEL__string_316:
  .quad .LABEL__string_316__data
  .quad 39
  .quad 38
.LABEL__string_316__data: .string "Cannot use expression as variable name"

  .align 8
.LABEL__string_317:
  .quad .LABEL__string_317__data
  .quad 37
  .quad 36
.LABEL__string_317__data: .string "Cannot use expression as struct name"

  .align 8
.LABEL__string_318:
  .quad .LABEL__string_318__data
  .quad 39
  .quad 38
.LABEL__string_318__data: .string "Cannot use expression as function name"

  .align 8
.LABEL__string_319:
  .quad .LABEL__string_319__data
  .quad 12
  .quad 11
.LABEL__string_319__data: .string ": Consumed "

  .align 8
.LABEL__string_320:
  .quad .LABEL__string_320__data
  .quad 15
  .quad 14
.LABEL__string_320__data: .string " spaces where "

  .align 8
.LABEL__string_321:
  .quad .LABEL__string_321__data
  .quad 14
  .quad 13
.LABEL__string_321__data: .string " are expected"

  .align 8
.LABEL__string_322:
  .quad .LABEL__string_322__data
  .quad 26
  .quad 25
.LABEL__string_322__data: .string "Unsupported token matcher"

  .align 8
.LABEL__string_323:
  .quad .LABEL__string_323__data
  .quad 14
  .quad 13
.LABEL__string_323__data: .string ": Unexpected "

  .align 8
.LABEL__string_324:
  .quad .LABEL__string_324__data
  .quad 2
  .quad 1
.LABEL__string_324__data: .string " "

  .align 8
.LABEL__string_325:
  .quad .LABEL__string_325__data
  .quad 5
  .quad 4
.LABEL__string_325__data: .string "if ("

  .align 8
.LABEL__string_326:
  .quad .LABEL__string_326__data
  .quad 3
  .quad 2
.LABEL__string_326__data: .string ") "

  .align 8
.LABEL__string_327:
  .quad .LABEL__string_327__data
  .quad 7
  .quad 6
.LABEL__string_327__data: .string " else "

  .align 8
.LABEL__string_328:
  .quad .LABEL__string_328__data
  .quad 6
  .quad 5
.LABEL__string_328__data: .string "loop "

  .align 8
.LABEL__string_329:
  .quad .LABEL__string_329__data
  .quad 11
  .quad 10
.LABEL__string_329__data: .string " :: struct"

  .align 8
.LABEL__string_330:
  .quad .LABEL__string_330__data
  .quad 4
  .quad 3
.LABEL__string_330__data: .string " : "

  .align 8
.LABEL__string_331:
  .quad .LABEL__string_331__data
  .quad 12
  .quad 11
.LABEL__string_331__data: .string " = external"

  .align 8
.LABEL__string_332:
  .quad .LABEL__string_332__data
  .quad 5
  .quad 4
.LABEL__string_332__data: .string " := "

  .align 8
.LABEL__string_333:
  .quad .LABEL__string_333__data
  .quad 8
  .quad 7
.LABEL__string_333__data: .string "while ("

  .align 8
.LABEL__string_334:
  .quad .LABEL__string_334__data
  .quad 33
  .quad 32
.LABEL__string_334__data: .string "Unsupported AST_Statement type: "

  .align 8
.LABEL__string_335:
  .quad .LABEL__string_335__data
  .quad 3
  .quad 2
.LABEL__string_335__data: .string "; "

  .align 8
.LABEL__string_336:
  .quad .LABEL__string_336__data
  .quad 28
  .quad 27
.LABEL__string_336__data: .string "Unsupported AST_Type type: "

  .align 8
.LABEL__string_337:
  .quad .LABEL__string_337__data
  .quad 5
  .quad 4
.LABEL__string_337__data: .string " && "

  .align 8
.LABEL__string_338:
  .quad .LABEL__string_338__data
  .quad 5
  .quad 4
.LABEL__string_338__data: .string " || "

  .align 8
.LABEL__string_339:
  .quad .LABEL__string_339__data
  .quad 5
  .quad 4
.LABEL__string_339__data: .string " as "

  .align 8
.LABEL__string_340:
  .quad .LABEL__string_340__data
  .quad 5
  .quad 4
.LABEL__string_340__data: .string "new "

  .align 8
.LABEL__string_341:
  .quad .LABEL__string_341__data
  .quad 34
  .quad 33
.LABEL__string_341__data: .string "Unsupported AST_Expression type: "

  .align 8
.LABEL__string_342:
  .quad .LABEL__string_342__data
  .quad 6
  .quad 5
.LABEL__string_342__data: .string "false"

  .align 8
.LABEL__string_343:
  .quad .LABEL__string_343__data
  .quad 5
  .quad 4
.LABEL__string_343__data: .string "null"

  .align 8
.LABEL__string_344:
  .quad .LABEL__string_344__data
  .quad 5
  .quad 4
.LABEL__string_344__data: .string "true"

  .align 8
.LABEL__string_345:
  .quad .LABEL__string_345__data
  .quad 7
  .quad 6
.LABEL__string_345__data: .string "[2;37m"

  .align 8
.LABEL__string_346:
  .quad .LABEL__string_346__data
  .quad 4
  .quad 3
.LABEL__string_346__data: .string "[0m"

  .align 8
.LABEL__string_347:
  .quad .LABEL__string_347__data
  .quad 7
  .quad 6
.LABEL__string_347__data: .string "[1;33m"

  .align 8
.LABEL__string_348:
  .quad .LABEL__string_348__data
  .quad 7
  .quad 6
.LABEL__string_348__data: .string "[2;33m"

  .align 8
.LABEL__string_349:
  .quad .LABEL__string_349__data
  .quad 2
  .quad 1
.LABEL__string_349__data: .string "r"

  .align 8
.LABEL__string_350:
  .quad .LABEL__string_350__data
  .quad 21
  .quad 20
.LABEL__string_350__data: .string "Failed to write text"

  .align 8
.LABEL__string_351:
  .quad .LABEL__string_351__data
  .quad 28
  .quad 27
.LABEL__string_351__data: .string "Failed to write character: "

  .section .rodata

  .align 8
MC_Register:
  .quad 0
  .quad .LABEL__MC_Register__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__MC_Register__type_name__data: .string "MC_Register"

  .align 8
Object:
  .quad 0
  .quad .LABEL__Object__type_name__data
  .quad 7
  .quad 6
  .quad 0
.LABEL__Object__type_name__data: .string "Object"

  .align 8
IR_Instruction:
  .quad 0
  .quad .LABEL__IR_Instruction__type_name__data
  .quad 15
  .quad 14
  .quad Object
.LABEL__IR_Instruction__type_name__data: .string "IR_Instruction"

  .align 8
IR_Variable_Value:
  .quad 0
  .quad .LABEL__IR_Variable_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Variable_Value__type_name__data: .string "IR_Variable_Value"

  .align 8
IR_Value:
  .quad 0
  .quad .LABEL__IR_Value__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__IR_Value__type_name__data: .string "IR_Value"

  .align 8
IR_Type:
  .quad 0
  .quad .LABEL__IR_Type__type_name__data
  .quad 8
  .quad 7
  .quad Object
.LABEL__IR_Type__type_name__data: .string "IR_Type"

  .align 8
IR_Variable:
  .quad 0
  .quad .LABEL__IR_Variable__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__IR_Variable__type_name__data: .string "IR_Variable"

  .align 8
IR_Block:
  .quad 0
  .quad .LABEL__IR_Block__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__IR_Block__type_name__data: .string "IR_Block"

  .align 8
IR_Function:
  .quad 0
  .quad .LABEL__IR_Function__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__IR_Function__type_name__data: .string "IR_Function"

  .align 8
IR_Function_Type:
  .quad 0
  .quad .LABEL__IR_Function_Type__type_name__data
  .quad 17
  .quad 16
  .quad IR_Type
.LABEL__IR_Function_Type__type_name__data: .string "IR_Function_Type"

  .align 8
MC_Address:
  .quad 0
  .quad .LABEL__MC_Address__type_name__data
  .quad 11
  .quad 10
  .quad Object
.LABEL__MC_Address__type_name__data: .string "MC_Address"

  .align 8
MC_Register_RAX:
  .quad 0
  .quad .LABEL__MC_Register_RAX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RAX__type_name__data: .string "MC_Register_RAX"

  .align 8
MC_Register_RCX:
  .quad 0
  .quad .LABEL__MC_Register_RCX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RCX__type_name__data: .string "MC_Register_RCX"

  .align 8
MC_Register_RDX:
  .quad 0
  .quad .LABEL__MC_Register_RDX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RDX__type_name__data: .string "MC_Register_RDX"

  .align 8
MC_Register_RBX:
  .quad 0
  .quad .LABEL__MC_Register_RBX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RBX__type_name__data: .string "MC_Register_RBX"

  .align 8
MC_Register_RSI:
  .quad 0
  .quad .LABEL__MC_Register_RSI__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RSI__type_name__data: .string "MC_Register_RSI"

  .align 8
MC_Register_RDI:
  .quad 0
  .quad .LABEL__MC_Register_RDI__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RDI__type_name__data: .string "MC_Register_RDI"

  .align 8
MC_Register_RSP:
  .quad 0
  .quad .LABEL__MC_Register_RSP__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RSP__type_name__data: .string "MC_Register_RSP"

  .align 8
MC_Register_RBP:
  .quad 0
  .quad .LABEL__MC_Register_RBP__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RBP__type_name__data: .string "MC_Register_RBP"

  .align 8
MC_Register_R8:
  .quad 0
  .quad .LABEL__MC_Register_R8__type_name__data
  .quad 15
  .quad 14
  .quad MC_Register
.LABEL__MC_Register_R8__type_name__data: .string "MC_Register_R8"

  .align 8
MC_Register_R9:
  .quad 0
  .quad .LABEL__MC_Register_R9__type_name__data
  .quad 15
  .quad 14
  .quad MC_Register
.LABEL__MC_Register_R9__type_name__data: .string "MC_Register_R9"

  .align 8
MC_Register_R10:
  .quad 0
  .quad .LABEL__MC_Register_R10__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R10__type_name__data: .string "MC_Register_R10"

  .align 8
MC_Register_R11:
  .quad 0
  .quad .LABEL__MC_Register_R11__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R11__type_name__data: .string "MC_Register_R11"

  .align 8
MC_Register_R12:
  .quad 0
  .quad .LABEL__MC_Register_R12__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R12__type_name__data: .string "MC_Register_R12"

  .align 8
MC_Register_R13:
  .quad 0
  .quad .LABEL__MC_Register_R13__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R13__type_name__data: .string "MC_Register_R13"

  .align 8
MC_Register_R14:
  .quad 0
  .quad .LABEL__MC_Register_R14__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R14__type_name__data: .string "MC_Register_R14"

  .align 8
MC_Register_R15:
  .quad 0
  .quad .LABEL__MC_Register_R15__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R15__type_name__data: .string "MC_Register_R15"

  .align 8
MC_Global_Variable_Address:
  .quad 0
  .quad .LABEL__MC_Global_Variable_Address__type_name__data
  .quad 27
  .quad 26
  .quad MC_Address
.LABEL__MC_Global_Variable_Address__type_name__data: .string "MC_Global_Variable_Address"

  .align 8
MC_Register_Based_Address:
  .quad 0
  .quad .LABEL__MC_Register_Based_Address__type_name__data
  .quad 26
  .quad 25
  .quad MC_Address
.LABEL__MC_Register_Based_Address__type_name__data: .string "MC_Register_Based_Address"

  .align 8
MC_Local_Variable_Address:
  .quad 0
  .quad .LABEL__MC_Local_Variable_Address__type_name__data
  .quad 26
  .quad 25
  .quad MC_Register_Based_Address
.LABEL__MC_Local_Variable_Address__type_name__data: .string "MC_Local_Variable_Address"

  .align 8
String_Token:
  .quad 0
  .quad .LABEL__String_Token__type_name__data
  .quad 13
  .quad 12
  .quad Literal_Token
.LABEL__String_Token__type_name__data: .string "String_Token"

  .align 8
Literal_Token:
  .quad 0
  .quad .LABEL__Literal_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Literal_Token__type_name__data: .string "Literal_Token"

  .align 8
Token:
  .quad 0
  .quad .LABEL__Token__type_name__data
  .quad 6
  .quad 5
  .quad Object
.LABEL__Token__type_name__data: .string "Token"

  .align 8
IR_Struct_Type:
  .quad 0
  .quad .LABEL__IR_Struct_Type__type_name__data
  .quad 15
  .quad 14
  .quad IR_Type
.LABEL__IR_Struct_Type__type_name__data: .string "IR_Struct_Type"

  .align 8
AST_Struct_Statement:
  .quad 0
  .quad .LABEL__AST_Struct_Statement__type_name__data
  .quad 21
  .quad 20
  .quad AST_Statement
.LABEL__AST_Struct_Statement__type_name__data: .string "AST_Struct_Statement"

  .align 8
AST_Statement:
  .quad 0
  .quad .LABEL__AST_Statement__type_name__data
  .quad 14
  .quad 13
  .quad Object
.LABEL__AST_Statement__type_name__data: .string "AST_Statement"

  .align 8
Identifier_Token:
  .quad 0
  .quad .LABEL__Identifier_Token__type_name__data
  .quad 17
  .quad 16
  .quad Token
.LABEL__Identifier_Token__type_name__data: .string "Identifier_Token"

  .align 8
AST_Type:
  .quad 0
  .quad .LABEL__AST_Type__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__AST_Type__type_name__data: .string "AST_Type"

  .align 8
AST_Expression:
  .quad 0
  .quad .LABEL__AST_Expression__type_name__data
  .quad 15
  .quad 14
  .quad Object
.LABEL__AST_Expression__type_name__data: .string "AST_Expression"

  .align 8
IR_Any_Type:
  .quad 0
  .quad .LABEL__IR_Any_Type__type_name__data
  .quad 12
  .quad 11
  .quad IR_Type
.LABEL__IR_Any_Type__type_name__data: .string "IR_Any_Type"

  .align 8
IR_Boolean_Type:
  .quad 0
  .quad .LABEL__IR_Boolean_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Boolean_Type__type_name__data: .string "IR_Boolean_Type"

  .align 8
IR_Int_Type:
  .quad 0
  .quad .LABEL__IR_Int_Type__type_name__data
  .quad 12
  .quad 11
  .quad IR_Type
.LABEL__IR_Int_Type__type_name__data: .string "IR_Int_Type"

  .align 8
IR_Int8_Type:
  .quad 0
  .quad .LABEL__IR_Int8_Type__type_name__data
  .quad 13
  .quad 12
  .quad IR_Type
.LABEL__IR_Int8_Type__type_name__data: .string "IR_Int8_Type"

  .align 8
IR_Int16_Type:
  .quad 0
  .quad .LABEL__IR_Int16_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int16_Type__type_name__data: .string "IR_Int16_Type"

  .align 8
IR_Int32_Type:
  .quad 0
  .quad .LABEL__IR_Int32_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int32_Type__type_name__data: .string "IR_Int32_Type"

  .align 8
IR_Int64_Type:
  .quad 0
  .quad .LABEL__IR_Int64_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int64_Type__type_name__data: .string "IR_Int64_Type"

  .align 8
IR_Nothing_Type:
  .quad 0
  .quad .LABEL__IR_Nothing_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Nothing_Type__type_name__data: .string "IR_Nothing_Type"

  .align 8
IR_Null_Type:
  .quad 0
  .quad .LABEL__IR_Null_Type__type_name__data
  .quad 13
  .quad 12
  .quad IR_Type
.LABEL__IR_Null_Type__type_name__data: .string "IR_Null_Type"

  .align 8
IR_Undefined_Type:
  .quad 0
  .quad .LABEL__IR_Undefined_Type__type_name__data
  .quad 18
  .quad 17
  .quad IR_Type
.LABEL__IR_Undefined_Type__type_name__data: .string "IR_Undefined_Type"

  .align 8
IR_Pointer_Type:
  .quad 0
  .quad .LABEL__IR_Pointer_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Pointer_Type__type_name__data: .string "IR_Pointer_Type"

  .align 8
IR_Array_Type:
  .quad 0
  .quad .LABEL__IR_Array_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Pointer_Type
.LABEL__IR_Array_Type__type_name__data: .string "IR_Array_Type"

  .align 8
IR_Undefined_Value:
  .quad 0
  .quad .LABEL__IR_Undefined_Value__type_name__data
  .quad 19
  .quad 18
  .quad IR_Value
.LABEL__IR_Undefined_Value__type_name__data: .string "IR_Undefined_Value"

  .align 8
IR_Constant_Value:
  .quad 0
  .quad .LABEL__IR_Constant_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Constant_Value__type_name__data: .string "IR_Constant_Value"

  .align 8
IR_Compound_Value:
  .quad 0
  .quad .LABEL__IR_Compound_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Compound_Value__type_name__data: .string "IR_Compound_Value"

  .align 8
IR_Struct_Constructor_Value:
  .quad 0
  .quad .LABEL__IR_Struct_Constructor_Value__type_name__data
  .quad 28
  .quad 27
  .quad IR_Compound_Value
.LABEL__IR_Struct_Constructor_Value__type_name__data: .string "IR_Struct_Constructor_Value"

  .align 8
IR_Global_Variable:
  .quad 0
  .quad .LABEL__IR_Global_Variable__type_name__data
  .quad 19
  .quad 18
  .quad IR_Variable
.LABEL__IR_Global_Variable__type_name__data: .string "IR_Global_Variable"

  .align 8
IR_Function_Parameter:
  .quad 0
  .quad .LABEL__IR_Function_Parameter__type_name__data
  .quad 22
  .quad 21
  .quad IR_Variable
.LABEL__IR_Function_Parameter__type_name__data: .string "IR_Function_Parameter"

  .align 8
IR_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Call_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Call_Instruction__type_name__data: .string "IR_Call_Instruction"

  .align 8
IR_Direct_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Direct_Call_Instruction__type_name__data
  .quad 27
  .quad 26
  .quad IR_Call_Instruction
.LABEL__IR_Direct_Call_Instruction__type_name__data: .string "IR_Direct_Call_Instruction"

  .align 8
IR_Dynamic_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Dynamic_Call_Instruction__type_name__data
  .quad 28
  .quad 27
  .quad IR_Call_Instruction
.LABEL__IR_Dynamic_Call_Instruction__type_name__data: .string "IR_Dynamic_Call_Instruction"

  .align 8
IR_Cast_Instruction:
  .quad 0
  .quad .LABEL__IR_Cast_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Cast_Instruction__type_name__data: .string "IR_Cast_Instruction"

  .align 8
IR_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Jump_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Jump_Instruction__type_name__data: .string "IR_Jump_Instruction"

  .align 8
IR_Conditional_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Conditional_Jump_Instruction__type_name__data
  .quad 32
  .quad 31
  .quad IR_Jump_Instruction
.LABEL__IR_Conditional_Jump_Instruction__type_name__data: .string "IR_Conditional_Jump_Instruction"

  .align 8
IR_Direct_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Direct_Jump_Instruction__type_name__data
  .quad 27
  .quad 26
  .quad IR_Jump_Instruction
.LABEL__IR_Direct_Jump_Instruction__type_name__data: .string "IR_Direct_Jump_Instruction"

  .align 8
IR_Load_Array_Item_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Array_Item_Instruction__type_name__data
  .quad 31
  .quad 30
  .quad IR_Instruction
.LABEL__IR_Load_Array_Item_Instruction__type_name__data: .string "IR_Load_Array_Item_Instruction"

  .align 8
IR_Load_Function_Address_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Function_Address_Instruction__type_name__data
  .quad 37
  .quad 36
  .quad IR_Instruction
.LABEL__IR_Load_Function_Address_Instruction__type_name__data: .string "IR_Load_Function_Address_Instruction"

  .align 8
IR_Load_Struct_Member_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Struct_Member_Instruction__type_name__data
  .quad 34
  .quad 33
  .quad IR_Instruction
.LABEL__IR_Load_Struct_Member_Instruction__type_name__data: .string "IR_Load_Struct_Member_Instruction"

  .align 8
IR_Load_Variable_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Instruction__type_name__data
  .quad 29
  .quad 28
  .quad IR_Instruction
.LABEL__IR_Load_Variable_Instruction__type_name__data: .string "IR_Load_Variable_Instruction"

  .align 8
IR_New_Instruction:
  .quad 0
  .quad .LABEL__IR_New_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_New_Instruction__type_name__data: .string "IR_New_Instruction"

  .align 8
IR_Return_Instruction:
  .quad 0
  .quad .LABEL__IR_Return_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Instruction
.LABEL__IR_Return_Instruction__type_name__data: .string "IR_Return_Instruction"

  .align 8
IR_Set_Instruction:
  .quad 0
  .quad .LABEL__IR_Set_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_Set_Instruction__type_name__data: .string "IR_Set_Instruction"

  .align 8
IR_Store_Array_Item_Instruction:
  .quad 0
  .quad .LABEL__IR_Store_Array_Item_Instruction__type_name__data
  .quad 32
  .quad 31
  .quad IR_Instruction
.LABEL__IR_Store_Array_Item_Instruction__type_name__data: .string "IR_Store_Array_Item_Instruction"

  .align 8
IR_Store_Struct_Member_Instruction:
  .quad 0
  .quad .LABEL__IR_Store_Struct_Member_Instruction__type_name__data
  .quad 35
  .quad 34
  .quad IR_Instruction
.LABEL__IR_Store_Struct_Member_Instruction__type_name__data: .string "IR_Store_Struct_Member_Instruction"

  .align 8
IR_Binary_Instruction:
  .quad 0
  .quad .LABEL__IR_Binary_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Instruction
.LABEL__IR_Binary_Instruction__type_name__data: .string "IR_Binary_Instruction"

  .align 8
IR_Add_Instruction:
  .quad 0
  .quad .LABEL__IR_Add_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Binary_Instruction
.LABEL__IR_Add_Instruction__type_name__data: .string "IR_Add_Instruction"

  .align 8
IR_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Comparison_Instruction__type_name__data
  .quad 26
  .quad 25
  .quad IR_Binary_Instruction
.LABEL__IR_Comparison_Instruction__type_name__data: .string "IR_Comparison_Instruction"

  .align 8
IR_Divide_Instruction:
  .quad 0
  .quad .LABEL__IR_Divide_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Binary_Instruction
.LABEL__IR_Divide_Instruction__type_name__data: .string "IR_Divide_Instruction"

  .align 8
IR_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Equals_Comparison_Instruction__type_name__data
  .quad 33
  .quad 32
  .quad IR_Comparison_Instruction
.LABEL__IR_Equals_Comparison_Instruction__type_name__data: .string "IR_Equals_Comparison_Instruction"

  .align 8
IR_Greater_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Greater_Comparison_Instruction__type_name__data
  .quad 34
  .quad 33
  .quad IR_Comparison_Instruction
.LABEL__IR_Greater_Comparison_Instruction__type_name__data: .string "IR_Greater_Comparison_Instruction"

  .align 8
IR_Greater_Or_Equal_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Greater_Or_Equal_Comparison_Instruction__type_name__data
  .quad 43
  .quad 42
  .quad IR_Comparison_Instruction
.LABEL__IR_Greater_Or_Equal_Comparison_Instruction__type_name__data: .string "IR_Greater_Or_Equal_Comparison_Instruction"

  .align 8
IR_Less_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Less_Comparison_Instruction__type_name__data
  .quad 31
  .quad 30
  .quad IR_Comparison_Instruction
.LABEL__IR_Less_Comparison_Instruction__type_name__data: .string "IR_Less_Comparison_Instruction"

  .align 8
IR_Less_Or_Equal_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Less_Or_Equal_Comparison_Instruction__type_name__data
  .quad 40
  .quad 39
  .quad IR_Comparison_Instruction
.LABEL__IR_Less_Or_Equal_Comparison_Instruction__type_name__data: .string "IR_Less_Or_Equal_Comparison_Instruction"

  .align 8
IR_Modulo_Instruction:
  .quad 0
  .quad .LABEL__IR_Modulo_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Binary_Instruction
.LABEL__IR_Modulo_Instruction__type_name__data: .string "IR_Modulo_Instruction"

  .align 8
IR_Multiply_Instruction:
  .quad 0
  .quad .LABEL__IR_Multiply_Instruction__type_name__data
  .quad 24
  .quad 23
  .quad IR_Binary_Instruction
.LABEL__IR_Multiply_Instruction__type_name__data: .string "IR_Multiply_Instruction"

  .align 8
IR_Not_Equal_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Not_Equal_Comparison_Instruction__type_name__data
  .quad 36
  .quad 35
  .quad IR_Comparison_Instruction
.LABEL__IR_Not_Equal_Comparison_Instruction__type_name__data: .string "IR_Not_Equal_Comparison_Instruction"

  .align 8
IR_Substract_Instruction:
  .quad 0
  .quad .LABEL__IR_Substract_Instruction__type_name__data
  .quad 25
  .quad 24
  .quad IR_Binary_Instruction
.LABEL__IR_Substract_Instruction__type_name__data: .string "IR_Substract_Instruction"

  .align 8
IR_Phi_Instruction:
  .quad 0
  .quad .LABEL__IR_Phi_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_Phi_Instruction__type_name__data: .string "IR_Phi_Instruction"

  .align 8
Matcher:
  .quad 0
  .quad .LABEL__Matcher__type_name__data
  .quad 8
  .quad 7
  .quad Object
.LABEL__Matcher__type_name__data: .string "Matcher"

  .align 8
Comment_Matcher:
  .quad 0
  .quad .LABEL__Comment_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Comment_Matcher__type_name__data: .string "Comment_Matcher"

  .align 8
End_Of_File_Matcher:
  .quad 0
  .quad .LABEL__End_Of_File_Matcher__type_name__data
  .quad 20
  .quad 19
  .quad Matcher
.LABEL__End_Of_File_Matcher__type_name__data: .string "End_Of_File_Matcher"

  .align 8
End_Of_Line_Matcher:
  .quad 0
  .quad .LABEL__End_Of_Line_Matcher__type_name__data
  .quad 20
  .quad 19
  .quad Matcher
.LABEL__End_Of_Line_Matcher__type_name__data: .string "End_Of_Line_Matcher"

  .align 8
Identifier_Matcher:
  .quad 0
  .quad .LABEL__Identifier_Matcher__type_name__data
  .quad 19
  .quad 18
  .quad Matcher
.LABEL__Identifier_Matcher__type_name__data: .string "Identifier_Matcher"

  .align 8
Keyword_Matcher:
  .quad 0
  .quad .LABEL__Keyword_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Keyword_Matcher__type_name__data: .string "Keyword_Matcher"

  .align 8
Literal_Matcher:
  .quad 0
  .quad .LABEL__Literal_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Literal_Matcher__type_name__data: .string "Literal_Matcher"

  .align 8
String_Literal_Matcher:
  .quad 0
  .quad .LABEL__String_Literal_Matcher__type_name__data
  .quad 23
  .quad 22
  .quad Matcher
.LABEL__String_Literal_Matcher__type_name__data: .string "String_Literal_Matcher"

  .align 8
Other_Matcher:
  .quad 0
  .quad .LABEL__Other_Matcher__type_name__data
  .quad 14
  .quad 13
  .quad Matcher
.LABEL__Other_Matcher__type_name__data: .string "Other_Matcher"

  .align 8
Space_Matcher:
  .quad 0
  .quad .LABEL__Space_Matcher__type_name__data
  .quad 14
  .quad 13
  .quad Matcher
.LABEL__Space_Matcher__type_name__data: .string "Space_Matcher"

  .align 8
AST_Include_Statement:
  .quad 0
  .quad .LABEL__AST_Include_Statement__type_name__data
  .quad 22
  .quad 21
  .quad AST_Statement
.LABEL__AST_Include_Statement__type_name__data: .string "AST_Include_Statement"

  .align 8
AST_Function_Statement:
  .quad 0
  .quad .LABEL__AST_Function_Statement__type_name__data
  .quad 23
  .quad 22
  .quad AST_Statement
.LABEL__AST_Function_Statement__type_name__data: .string "AST_Function_Statement"

  .align 8
AST_Function_Type:
  .quad 0
  .quad .LABEL__AST_Function_Type__type_name__data
  .quad 18
  .quad 17
  .quad AST_Type
.LABEL__AST_Function_Type__type_name__data: .string "AST_Function_Type"

  .align 8
AST_Block_Statement:
  .quad 0
  .quad .LABEL__AST_Block_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_Block_Statement__type_name__data: .string "AST_Block_Statement"

  .align 8
AST_Expression_Statement:
  .quad 0
  .quad .LABEL__AST_Expression_Statement__type_name__data
  .quad 25
  .quad 24
  .quad AST_Statement
.LABEL__AST_Expression_Statement__type_name__data: .string "AST_Expression_Statement"

  .align 8
AST_If_Statement:
  .quad 0
  .quad .LABEL__AST_If_Statement__type_name__data
  .quad 17
  .quad 16
  .quad AST_Statement
.LABEL__AST_If_Statement__type_name__data: .string "AST_If_Statement"

  .align 8
AST_Loop_Statement:
  .quad 0
  .quad .LABEL__AST_Loop_Statement__type_name__data
  .quad 19
  .quad 18
  .quad AST_Statement
.LABEL__AST_Loop_Statement__type_name__data: .string "AST_Loop_Statement"

  .align 8
AST_While_Statement:
  .quad 0
  .quad .LABEL__AST_While_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_While_Statement__type_name__data: .string "AST_While_Statement"

  .align 8
AST_Break_Statement:
  .quad 0
  .quad .LABEL__AST_Break_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_Break_Statement__type_name__data: .string "AST_Break_Statement"

  .align 8
AST_Return_Statement:
  .quad 0
  .quad .LABEL__AST_Return_Statement__type_name__data
  .quad 21
  .quad 20
  .quad AST_Statement
.LABEL__AST_Return_Statement__type_name__data: .string "AST_Return_Statement"

  .align 8
AST_Variable_Statement:
  .quad 0
  .quad .LABEL__AST_Variable_Statement__type_name__data
  .quad 23
  .quad 22
  .quad AST_Statement
.LABEL__AST_Variable_Statement__type_name__data: .string "AST_Variable_Statement"

  .align 8
AST_Assignment_Statement:
  .quad 0
  .quad .LABEL__AST_Assignment_Statement__type_name__data
  .quad 25
  .quad 24
  .quad AST_Statement
.LABEL__AST_Assignment_Statement__type_name__data: .string "AST_Assignment_Statement"

  .align 8
Other_Token:
  .quad 0
  .quad .LABEL__Other_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Other_Token__type_name__data: .string "Other_Token"

  .align 8
AST_Named_Type:
  .quad 0
  .quad .LABEL__AST_Named_Type__type_name__data
  .quad 15
  .quad 14
  .quad AST_Type
.LABEL__AST_Named_Type__type_name__data: .string "AST_Named_Type"

  .align 8
AST_Pointer_Type:
  .quad 0
  .quad .LABEL__AST_Pointer_Type__type_name__data
  .quad 17
  .quad 16
  .quad AST_Type
.LABEL__AST_Pointer_Type__type_name__data: .string "AST_Pointer_Type"

  .align 8
AST_Array_Type:
  .quad 0
  .quad .LABEL__AST_Array_Type__type_name__data
  .quad 15
  .quad 14
  .quad AST_Type
.LABEL__AST_Array_Type__type_name__data: .string "AST_Array_Type"

  .align 8
AST_Atomic_Expression:
  .quad 0
  .quad .LABEL__AST_Atomic_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Atomic_Expression__type_name__data: .string "AST_Atomic_Expression"

  .align 8
AST_Literal_Expression:
  .quad 0
  .quad .LABEL__AST_Literal_Expression__type_name__data
  .quad 23
  .quad 22
  .quad AST_Expression
.LABEL__AST_Literal_Expression__type_name__data: .string "AST_Literal_Expression"

  .align 8
AST_Variable_Expression:
  .quad 0
  .quad .LABEL__AST_Variable_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Expression
.LABEL__AST_Variable_Expression__type_name__data: .string "AST_Variable_Expression"

  .align 8
AST_Binary_Expression:
  .quad 0
  .quad .LABEL__AST_Binary_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Binary_Expression__type_name__data: .string "AST_Binary_Expression"

  .align 8
AST_Add_Expression:
  .quad 0
  .quad .LABEL__AST_Add_Expression__type_name__data
  .quad 19
  .quad 18
  .quad AST_Binary_Expression
.LABEL__AST_Add_Expression__type_name__data: .string "AST_Add_Expression"

  .align 8
AST_Divide_Expression:
  .quad 0
  .quad .LABEL__AST_Divide_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Divide_Expression__type_name__data: .string "AST_Divide_Expression"

  .align 8
AST_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Equals_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Equals_Expression__type_name__data: .string "AST_Equals_Expression"

  .align 8
AST_Greater_Than_Expression:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Expression__type_name__data
  .quad 28
  .quad 27
  .quad AST_Binary_Expression
.LABEL__AST_Greater_Than_Expression__type_name__data: .string "AST_Greater_Than_Expression"

  .align 8
AST_Greater_Than_Or_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__type_name__data
  .quad 38
  .quad 37
  .quad AST_Binary_Expression
.LABEL__AST_Greater_Than_Or_Equals_Expression__type_name__data: .string "AST_Greater_Than_Or_Equals_Expression"

  .align 8
AST_Less_Than_Expression:
  .quad 0
  .quad .LABEL__AST_Less_Than_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Less_Than_Expression__type_name__data: .string "AST_Less_Than_Expression"

  .align 8
AST_Less_Than_Or_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__type_name__data
  .quad 35
  .quad 34
  .quad AST_Binary_Expression
.LABEL__AST_Less_Than_Or_Equals_Expression__type_name__data: .string "AST_Less_Than_Or_Equals_Expression"

  .align 8
AST_Logic_And_Expression:
  .quad 0
  .quad .LABEL__AST_Logic_And_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Logic_And_Expression__type_name__data: .string "AST_Logic_And_Expression"

  .align 8
AST_Logic_Or_Expression:
  .quad 0
  .quad .LABEL__AST_Logic_Or_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Binary_Expression
.LABEL__AST_Logic_Or_Expression__type_name__data: .string "AST_Logic_Or_Expression"

  .align 8
AST_Modulo_Expression:
  .quad 0
  .quad .LABEL__AST_Modulo_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Modulo_Expression__type_name__data: .string "AST_Modulo_Expression"

  .align 8
AST_Multiply_Expression:
  .quad 0
  .quad .LABEL__AST_Multiply_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Binary_Expression
.LABEL__AST_Multiply_Expression__type_name__data: .string "AST_Multiply_Expression"

  .align 8
AST_Not_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Not_Equals_Expression__type_name__data
  .quad 26
  .quad 25
  .quad AST_Binary_Expression
.LABEL__AST_Not_Equals_Expression__type_name__data: .string "AST_Not_Equals_Expression"

  .align 8
AST_Substract_Expression:
  .quad 0
  .quad .LABEL__AST_Substract_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Substract_Expression__type_name__data: .string "AST_Substract_Expression"

  .align 8
AST_Unary_Expression:
  .quad 0
  .quad .LABEL__AST_Unary_Expression__type_name__data
  .quad 21
  .quad 20
  .quad AST_Expression
.LABEL__AST_Unary_Expression__type_name__data: .string "AST_Unary_Expression"

  .align 8
AST_Negate_Expression:
  .quad 0
  .quad .LABEL__AST_Negate_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Unary_Expression
.LABEL__AST_Negate_Expression__type_name__data: .string "AST_Negate_Expression"

  .align 8
AST_Cast_Expression:
  .quad 0
  .quad .LABEL__AST_Cast_Expression__type_name__data
  .quad 20
  .quad 19
  .quad AST_Expression
.LABEL__AST_Cast_Expression__type_name__data: .string "AST_Cast_Expression"

  .align 8
AST_New_Expression:
  .quad 0
  .quad .LABEL__AST_New_Expression__type_name__data
  .quad 19
  .quad 18
  .quad AST_Expression
.LABEL__AST_New_Expression__type_name__data: .string "AST_New_Expression"

  .align 8
AST_Call_Expression:
  .quad 0
  .quad .LABEL__AST_Call_Expression__type_name__data
  .quad 20
  .quad 19
  .quad AST_Expression
.LABEL__AST_Call_Expression__type_name__data: .string "AST_Call_Expression"

  .align 8
AST_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Access_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Access_Expression__type_name__data: .string "AST_Access_Expression"

  .align 8
AST_Member_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Member_Access_Expression__type_name__data
  .quad 29
  .quad 28
  .quad AST_Access_Expression
.LABEL__AST_Member_Access_Expression__type_name__data: .string "AST_Member_Access_Expression"

  .align 8
AST_Array_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Array_Access_Expression__type_name__data
  .quad 28
  .quad 27
  .quad AST_Access_Expression
.LABEL__AST_Array_Access_Expression__type_name__data: .string "AST_Array_Access_Expression"

  .align 8
Character_Token:
  .quad 0
  .quad .LABEL__Character_Token__type_name__data
  .quad 16
  .quad 15
  .quad Literal_Token
.LABEL__Character_Token__type_name__data: .string "Character_Token"

  .align 8
Boolean_Token:
  .quad 0
  .quad .LABEL__Boolean_Token__type_name__data
  .quad 14
  .quad 13
  .quad Literal_Token
.LABEL__Boolean_Token__type_name__data: .string "Boolean_Token"

  .align 8
Comment_Token:
  .quad 0
  .quad .LABEL__Comment_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Comment_Token__type_name__data: .string "Comment_Token"

  .align 8
End_Of_File_Token:
  .quad 0
  .quad .LABEL__End_Of_File_Token__type_name__data
  .quad 18
  .quad 17
  .quad Token
.LABEL__End_Of_File_Token__type_name__data: .string "End_Of_File_Token"

  .align 8
End_Of_Line_Token:
  .quad 0
  .quad .LABEL__End_Of_Line_Token__type_name__data
  .quad 18
  .quad 17
  .quad Token
.LABEL__End_Of_Line_Token__type_name__data: .string "End_Of_Line_Token"

  .align 8
Error_Token:
  .quad 0
  .quad .LABEL__Error_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Error_Token__type_name__data: .string "Error_Token"

  .align 8
Integer_Token:
  .quad 0
  .quad .LABEL__Integer_Token__type_name__data
  .quad 14
  .quad 13
  .quad Literal_Token
.LABEL__Integer_Token__type_name__data: .string "Integer_Token"

  .align 8
Keyword_Token:
  .quad 0
  .quad .LABEL__Keyword_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Keyword_Token__type_name__data: .string "Keyword_Token"

  .align 8
Null_Token:
  .quad 0
  .quad .LABEL__Null_Token__type_name__data
  .quad 11
  .quad 10
  .quad Literal_Token
.LABEL__Null_Token__type_name__data: .string "Null_Token"

  .align 8
Space_Token:
  .quad 0
  .quad .LABEL__Space_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Space_Token__type_name__data: .string "Space_Token"

  .align 8
Undefined_Token:
  .quad 0
  .quad .LABEL__Undefined_Token__type_name__data
  .quad 16
  .quad 15
  .quad Literal_Token
.LABEL__Undefined_Token__type_name__data: .string "Undefined_Token"
