  .file 1 "bootstrap/ReCode.code"
  .file 2 "bootstrap/code/compiler/Generator.code"
  .file 3 "bootstrap/code/compiler/IR_Builder.code"
  .file 4 "bootstrap/code/compiler/Counter.code"
  .file 5 "bootstrap/code/compiler/IR.code"
  .file 6 "bootstrap/code/compiler/Parser.code"
  .file 7 "bootstrap/code/compiler/AST.code"
  .file 8 "bootstrap/code/compiler/Scanner.code"
  .file 9 "bootstrap/code/compiler/Token.code"
  .file 10 "bootstrap/code/compiler/Source.code"
  .file 11 "bootstrap/code/compiler/List.code"
  .file 12 "bootstrap/code/lang/Object.code"
  .file 13 "bootstrap/code/lang/String.code"
  .file 14 "bootstrap/code/core/Platform.code"

  .intel_syntax noprefix

  .loc 1 3 1
  .text
  .globl main
main:
main_1:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR main_1__stack_frame_size[rip]
  sub rsp, rax
.LABEL__main_1__1:
  # argc.1: Int = load_variable(argc)
  # [live values]: argc.1:rdi 
  # argv.1: @@Int8 = load_variable(argv)
  # [live values]: argc.1:rdi argv.1:rsi 
  # $1.1: Boolean = argc.1 < 3
  .loc 1 4 9
  cmp rdi, 3
  setl al
  # [live values]: argc.1:rdi argv.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__main_1__3
.LABEL__main_1__2:
  # stdout.2: @FILE = load_variable(stdout)
  # [discarded value]: $1.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] stdout.2:stdout[rip] 
  # $2.1: @FILE = call(write_287, stdout.2, "Usage:")
  .loc 1 5 9
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_0[rip] # "Usage:"
  call write_287
  # [discarded value]: stdout.2
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(end_line_290, $2.1)
  .loc 1 5 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # stdout.3: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] stdout.3:stdout[rip] 
  # $4.1: @FILE = call(write_289, stdout.3, '\t')
  .loc 1 6 9
  mov rdi, stdout[rip]
  mov sil, 9
  call write_289
  # [discarded value]: stdout.3
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $4.1:rax 
  # $5.1: @Int8 = load_array_item(argv.1, 0)
  .loc 1 6 34
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $4.1:rax $5.1:rbx 
  # $6.1: @FILE = call(write_288, $4.1, $5.1)
  .loc 1 6 9
  mov rdi, rax
  mov rsi, rbx
  call write_288
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(write_287, $6.1, " <INPUT FILE> <OUTPUT FILE>")
  .loc 1 6 9
  mov rdi, rax
  lea rsi, .LABEL__string_1[rip] # " <INPUT FILE> <OUTPUT FILE>"
  call write_287
  # [discarded value]: $6.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(end_line_290, $7.1)
  .loc 1 6 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # call(exit, 1)
  .loc 1 7 9
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
.LABEL__main_1__3:
  # $9.1: @Int8 = load_array_item(argv.1, 1)
  .loc 1 10 39
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $9.1:rax 
  # source_file_path.1: @String = call(create_string_294, $9.1)
  .loc 1 10 25
  mov rdi, rax
  call create_string_294
  # [discarded value]: $9.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:rax 
  # $11.1: Boolean = call(ends_with_299, source_file_path.1, ".code")
  .loc 1 11 9
  mov rdi, rax
  lea rsi, .LABEL__string_2[rip] # ".code"
  mov [rbp-24], rax
  call ends_with_299
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 11 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__main_1__5
.LABEL__main_1__4:
  # stdout.4: @FILE = load_variable(stdout)
  # [discarded value]: $12.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] stdout.4:stdout[rip] 
  # $13.1: @FILE = call(write_287, stdout.4, "'")
  .loc 1 12 9
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_287
  # [discarded value]: stdout.4
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, source_file_path.1)
  .loc 1 12 9
  mov rdi, rax
  mov rsi, [rbp-24]
  call write_287
  # [discarded value]: $13.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(write_287, $14.1, "' doesn't end with '.code'.")
  .loc 1 12 9
  mov rdi, rax
  lea rsi, .LABEL__string_4[rip] # "' doesn't end with '.code'."
  call write_287
  # [discarded value]: $14.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $15.1:rax 
  # $16.1: @FILE = call(end_line_290, $15.1)
  .loc 1 12 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
  # call(exit, 1)
  .loc 1 13 9
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
.LABEL__main_1__5:
  # $17.1: @Int8 = load_array_item(argv.1, 2)
  .loc 1 16 39
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $17.1:rax 
  # output_file_path.1: @String = call(create_string_294, $17.1)
  .loc 1 16 25
  mov rdi, rax
  call create_string_294
  # [discarded value]: $17.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:rax 
  # $19.1: Boolean = call(ends_with_299, output_file_path.1, ".s")
  .loc 1 17 9
  mov rdi, rax
  lea rsi, .LABEL__string_5[rip] # ".s"
  mov [rbp-32], rax
  call ends_with_299
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $19.1:rax 
  # $20.1: Boolean = $19.1 == false
  .loc 1 17 9
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $20.1:rbx 
  # jump($20.1, block.6, block.7)
  test bl, bl
  jz .LABEL__main_1__7
.LABEL__main_1__6:
  # stdout.5: @FILE = load_variable(stdout)
  # [discarded value]: $20.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] stdout.5:stdout[rip] 
  # $21.1: @FILE = call(write_287, stdout.5, "'")
  .loc 1 18 9
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_287
  # [discarded value]: stdout.5
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $21.1:rax 
  # $22.1: @FILE = call(write_287, $21.1, output_file_path.1)
  .loc 1 18 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_287
  # [discarded value]: $21.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $22.1:rax 
  # $23.1: @FILE = call(write_287, $22.1, "' doesn't end with '.s'.")
  .loc 1 18 9
  mov rdi, rax
  lea rsi, .LABEL__string_6[rip] # "' doesn't end with '.s'."
  call write_287
  # [discarded value]: $22.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $23.1:rax 
  # $24.1: @FILE = call(end_line_290, $23.1)
  .loc 1 18 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
  # call(exit, 1)
  .loc 1 19 9
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
.LABEL__main_1__7:
  # dump_file_path.1: @String = null
  .loc 1 22 5
  xor rax, rax
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:rax 
  # $25.1: Boolean = argc.1 >= 4
  .loc 1 23 9
  cmp QWORD PTR [rbp-16], 4
  setge bl
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:rax $25.1:rbx 
  # jump($25.1, block.8, block.9)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__main_1__9
.LABEL__main_1__8:
  # $26.1: @Int8 = load_array_item(argv.1, 3)
  .loc 1 24 40
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $25.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] $26.1:rax 
  # dump_file_path.2: @String = call(create_string_294, $26.1)
  .loc 1 24 26
  mov rdi, rax
  call create_string_294
  # [discarded value]: $26.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:rax:[rbp-40] 
  # $28.1: Boolean = call(ends_with_299, dump_file_path.2, ".ir")
  .loc 1 25 13
  mov rdi, rax
  lea rsi, .LABEL__string_7[rip] # ".ir"
  mov [rbp-40], rax
  call ends_with_299
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $28.1:rax 
  # $29.1: Boolean = $28.1 == false
  .loc 1 25 13
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $29.1:rbx 
  # jump($29.1, block.10, block.9)
  test bl, bl
  jz .LABEL__main_1__9
.LABEL__main_1__10:
  # stdout.6: @FILE = load_variable(stdout)
  # [discarded value]: $29.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] stdout.6:stdout[rip] 
  # $30.1: @FILE = call(write_287, stdout.6, "'")
  .loc 1 26 13
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_287
  # [discarded value]: stdout.6
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $30.1:rax 
  # $31.1: @FILE = call(write_287, $30.1, dump_file_path.2)
  .loc 1 26 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_287
  # [discarded value]: $30.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $31.1:rax 
  # $32.1: @FILE = call(write_287, $31.1, "' doesn't end with '.ir'.")
  .loc 1 26 13
  mov rdi, rax
  lea rsi, .LABEL__string_8[rip] # "' doesn't end with '.ir'."
  call write_287
  # [discarded value]: $31.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $32.1:rax 
  # $33.1: @FILE = call(end_line_290, $32.1)
  .loc 1 26 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
  # call(exit, 1)
  .loc 1 27 13
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
.LABEL__main_1__9:
  # dump_file_path.4: @String = phi(dump_file_path.1, dump_file_path.2)
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] 
  # compilation_unit.1: @Compilation_Unit = call(parse_200, source_file_path.1)
  .loc 1 31 25
  mov rdi, [rbp-24]
  call parse_200
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] compilation_unit.1:rax 
  # build.1: @IR_Build = call(build_58, compilation_unit.1)
  .loc 1 34 14
  mov rdi, rax
  call build_58
  # [discarded value]: compilation_unit.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:rax 
  # $36.1: Boolean = dump_file_path.4 != null
  .loc 1 35 9
  cmp QWORD PTR [rbp-40], 0
  setne bl
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:rax $36.1:rbx 
  # jump($36.1, block.12, block.13)
  test bl, bl
  mov [rbp-48], rax
  jz .LABEL__main_1__13
.LABEL__main_1__12:
  # $37.1: @Int8 = load_struct_member(dump_file_path.4, data)
  .loc 1 36 28
  mov rax, [rbp-40]
  mov rbx, [rax+0]
  # [discarded value]: $36.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:rax:[rbp-40] build.1:[rbp-48] $37.1:rbx 
  # $38.1: @Int8 = load_struct_member("w", data)
  .loc 1 36 49
  lea r15, .LABEL__string_9[rip] # "w"
  mov r14, [r15+0]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:rax:[rbp-40] build.1:[rbp-48] $37.1:rbx $38.1:r14 
  # dump_file.1: @FILE = call(fopen, $37.1, $38.1)
  .loc 1 36 22
  mov rdi, rbx
  mov rsi, r14
  call fopen
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] dump_file.1:rax 
  # call(dump_195, build.1, dump_file.1)
  .loc 1 37 9
  mov rdi, [rbp-48]
  mov rsi, rax
  mov [rbp-56], rax
  call dump_195
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] dump_file.1:[rbp-56] 
  # $40.1: Int32 = call(fclose, dump_file.1)
  .loc 1 38 9
  mov rdi, [rbp-56]
  call fclose
  # [discarded value]: dump_file.1
  # [discarded value]: $40.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # jump(block.13)
.LABEL__main_1__13:
  # call(generate_2, build.1, output_file_path.1)
  .loc 1 41 5
  mov rdi, [rbp-48]
  mov rsi, [rbp-32]
  call generate_2
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # return()
  jmp .LABEL__main_1__end
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # [discarded value]: dump_file_path.4
  # [discarded value]: build.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
  # [discarded value]: dump_file_path.2
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] 
  # [discarded value]: dump_file_path.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
  # [discarded value]: output_file_path.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
  # [discarded value]: source_file_path.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # [discarded value]: argc.1
  # [discarded value]: argv.1
  # [live values]: 
.LABEL__main_1__end:
  mov rsp, rbp
  pop rbp
  ret

main_1__stack_frame_size: .word 64

  .loc 2 3 1
  .text
generate_2:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_2__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_2__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: build.1:rdi output_file_path.1:rsi 
  # generator.1: @MC_Generator = call(create_mc_generator_34, output_file_path.1)
  .loc 2 4 18
  mov [rbp-8], rdi
  mov rdi, rsi
  call create_mc_generator_34
  # [discarded value]: output_file_path.1
  # [live values]: build.1:[rbp-8] generator.1:rax 
  # $2.1: @List = load_struct_member(build.1, sources)
  .loc 2 6 27
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax $2.1:r15 
  # build_sources_item.1: @List_Item = load_struct_member($2.1, first_item)
  .loc 2 6 27
  mov r14, [r15+0]
  # [discarded value]: $2.1
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax build_sources_item.1:r14 
  # jump(block.2)
  mov [rbp-16], rax
  mov [rbp-24], r14
.LABEL__generate_2__2:
  # build_sources_item.2: @List_Item = phi(build_sources_item.1, build_sources_item.4)
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # $4.1: Boolean = build_sources_item.2 != null
  .loc 2 7 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_2__4
.LABEL__generate_2__3:
  # build_source.1: @Source = load_struct_member(build_sources_item.2, data)
  .loc 2 8 25
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] build_source.1:rbx 
  # $7.1: @FILE = load_struct_member(generator.1, output_file)
  .loc 2 9 9
  mov r15, [rbp-16]
  mov r14, [r15+8]
  # [live values]: build.1:[rbp-8] generator.1:r15:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] build_source.1:rbx $7.1:r14 
  # $8.1: @FILE = call(write_287, $7.1, "  .file ")
  .loc 2 9 9
  mov rdi, r14
  lea rsi, .LABEL__string_10[rip] # "  .file "
  mov [rbp-32], rbx
  call write_287
  # [discarded value]: $7.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $8.1:rax 
  # $9.1: Int = load_struct_member(build_source.1, id)
  .loc 2 9 55
  mov rbx, [rbp-32]
  mov r15, [rbx+0]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:rbx:[rbp-32] $8.1:rax $9.1:r15 
  # $10.1: @FILE = call(write_286, $8.1, $9.1)
  .loc 2 9 9
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $10.1:rax 
  # $11.1: @FILE = call(write_287, $10.1, " \"")
  .loc 2 9 9
  mov rdi, rax
  lea rsi, .LABEL__string_11[rip] # " \""
  call write_287
  # [discarded value]: $10.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $11.1:rax 
  # $12.1: @String = load_struct_member(build_source.1, file_path)
  .loc 2 9 91
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [discarded value]: build_source.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $11.1:rax $12.1:r15 
  # $13.1: @FILE = call(write_287, $11.1, $12.1)
  .loc 2 9 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, "\"")
  .loc 2 9 9
  mov rdi, rax
  lea rsi, .LABEL__string_12[rip] # "\""
  call write_287
  # [discarded value]: $13.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(end_line_290, $14.1)
  .loc 2 9 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # build_sources_item.4: @List_Item = load_struct_member(build_sources_item.2, next_item)
  .loc 2 10 30
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_sources_item.4:rbx:[rbp-24] 
  # jump(block.2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_2__2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_sources_item.4:[rbp-24] 
  # [discarded value]: build_sources_item.4
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
.LABEL__generate_2__4:
  # $17.1: @FILE = load_struct_member(generator.1, output_file)
  .loc 2 13 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $17.1:rbx 
  # $18.1: @FILE = call(write_line_285, $17.1, "  .intel_syntax noprefix")
  .loc 2 13 5
  mov rdi, rbx
  lea rsi, .LABEL__string_13[rip] # "  .intel_syntax noprefix"
  call write_line_285
  # [discarded value]: $17.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $18.1:rax 
  # $19.1: @FILE = call(end_line_290, $18.1)
  .loc 2 13 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # $20.1: @List = load_struct_member(build.1, named_functions)
  .loc 2 15 18
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $20.1:rbx 
  # functions.1: @List_Iterator = call(create_iterator_279, $20.1)
  .loc 2 15 18
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $20.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__generate_2__5:
  # $22.1: Boolean = call(has_next_282, functions.1)
  .loc 2 16 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] $22.1:rax 
  # jump($22.1, block.6, block.7)
  test al, al
  jz .LABEL__generate_2__7
.LABEL__generate_2__6:
  # function.1: @IR_Function = call(next_283, functions.1)
  .loc 2 17 21
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $22.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:rax 
  # $25.1: Boolean = load_struct_member(function.1, is_external)
  .loc 2 18 13
  mov bl, [rax+56]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:rax $25.1:rbx 
  # $26.1: Boolean = $25.1 == false
  .loc 2 18 13
  cmp bl, 0
  sete r15b
  # [discarded value]: $25.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:rax $26.1:r15 
  # jump($26.1, block.8, block.5)
  test r15b, r15b
  mov [rbp-40], rax
  jz .LABEL__generate_2__5
.LABEL__generate_2__8:
  # call(generate_function_3, generator.1, function.1)
  .loc 2 19 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  call generate_function_3
  # [discarded value]: $26.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:[rbp-40] 
  # jump(block.5)
  jmp .LABEL__generate_2__5
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:[rbp-40] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:[rbp-40] 
  # [discarded value]: function.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
.LABEL__generate_2__7:
  # call(generate_strings_54, generator.1)
  .loc 2 23 5
  mov rdi, [rbp-16]
  call generate_strings_54
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # $27.1: @List = load_struct_member(build.1, named_types)
  .loc 2 25 37
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] $27.1:rbx 
  # call(generate_object_types_56, generator.1, $27.1)
  .loc 2 25 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_object_types_56
  # [discarded value]: $27.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # $28.1: @FILE = load_struct_member(generator.1, output_file)
  .loc 2 27 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] $28.1:rbx 
  # $29.1: Int32 = call(fclose, $28.1)
  .loc 2 27 5
  mov rdi, rbx
  call fclose
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # return()
  jmp .LABEL__generate_2__end
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # [discarded value]: functions.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [discarded value]: build_sources_item.2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [discarded value]: build.1
  # [discarded value]: generator.1
  # [discarded value]: build_sources_item.1
  # [live values]: 
.LABEL__generate_2__end:
  mov rsp, rbp
  pop rbp
  ret

generate_2__stack_frame_size: .word 48

  .loc 2 30 1
  .text
generate_function_3:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_function_3__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_function_3__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 31 5
  mov rax, [rdi+8]
  # [live values]: self.1:rdi function.1:rsi $1.1:rax 
  # $2.1: @FILE = call(end_line_290, $1.1)
  .loc 2 31 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_290
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 32 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $3.1:rbx 
  # $4.1: @FILE = call(write_287, $3.1, "  .loc ")
  .loc 2 32 5
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_287
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax 
  # $5.1: @Source_Location = load_struct_member(function.1, location)
  .loc 2 32 45
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $5.1:r15 
  # $6.1: @Source = load_struct_member($5.1, source)
  .loc 2 32 45
  mov r14, [r15+0]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $6.1:r14 
  # $7.1: Int = load_struct_member($6.1, id)
  .loc 2 32 45
  mov r15, [r14+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_286, $4.1, $7.1)
  .loc 2 32 5
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $8.1:rax 
  # $9.1: @FILE = call(write_289, $8.1, ' ')
  .loc 2 32 5
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax 
  # $10.1: @Source_Location = load_struct_member(function.1, location)
  .loc 2 32 91
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $10.1:r15 
  # $11.1: Int = load_struct_member($10.1, line)
  .loc 2 32 91
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $11.1:r14 
  # $12.1: @FILE = call(write_286, $9.1, $11.1)
  .loc 2 32 5
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $12.1:rax 
  # $13.1: @FILE = call(write_289, $12.1, ' ')
  .loc 2 32 5
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(function.1, location)
  .loc 2 32 132
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $14.1:r15 
  # $15.1: Int = load_struct_member($14.1, column)
  .loc 2 32 132
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $15.1:r14 
  # $16.1: @FILE = call(write_286, $13.1, $15.1)
  .loc 2 32 5
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $16.1:rax 
  # $17.1: @FILE = call(end_line_290, $16.1)
  .loc 2 32 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 33 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $18.1:rbx 
  # $19.1: @FILE = call(write_287, $18.1, "  .text")
  .loc 2 33 5
  mov rdi, rbx
  lea rsi, .LABEL__string_15[rip] # "  .text"
  call write_287
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $19.1:rax 
  # $20.1: @FILE = call(end_line_290, $19.1)
  .loc 2 33 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $21.1: @String = load_struct_member(function.1, name)
  .loc 2 34 9
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $21.1:rbx 
  # $22.1: Boolean = call(equals_296, $21.1, "main")
  .loc 2 34 9
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_296
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:rax 
  # jump($22.1, block.2, block.3)
  test al, al
  jz .LABEL__generate_function_3__3
.LABEL__generate_function_3__2:
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 35 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $23.1:rbx 
  # $24.1: @FILE = call(write_287, $23.1, "  .globl main")
  .loc 2 35 9
  mov rdi, rbx
  lea rsi, .LABEL__string_17[rip] # "  .globl main"
  call write_287
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $24.1:rax 
  # $25.1: @FILE = call(end_line_290, $24.1)
  .loc 2 35 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 36 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $26.1:rbx 
  # $27.1: @FILE = call(write_287, $26.1, "main:")
  .loc 2 36 9
  mov rdi, rbx
  lea rsi, .LABEL__string_18[rip] # "main:"
  call write_287
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $27.1:rax 
  # $28.1: @FILE = call(end_line_290, $27.1)
  .loc 2 36 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # jump(block.3)
.LABEL__generate_function_3__3:
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 38 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $29.1:rbx 
  # $30.1: @FILE = call(write_function_label_4, $29.1, function.1)
  .loc 2 38 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $30.1:rax 
  # $31.1: @FILE = call(write_289, $30.1, ':')
  .loc 2 38 5
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $31.1:rax 
  # $32.1: @FILE = call(end_line_290, $31.1)
  .loc 2 38 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 39 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $33.1:rbx 
  # $34.1: @FILE = call(write_287, $33.1, "  push rbp")
  .loc 2 39 5
  mov rdi, rbx
  lea rsi, .LABEL__string_19[rip] # "  push rbp"
  call write_287
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $34.1:rax 
  # $35.1: @FILE = call(end_line_290, $34.1)
  .loc 2 39 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 40 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $36.1:rbx 
  # $37.1: @FILE = call(write_287, $36.1, "  mov rbp, rsp")
  .loc 2 40 5
  mov rdi, rbx
  lea rsi, .LABEL__string_20[rip] # "  mov rbp, rsp"
  call write_287
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $37.1:rax 
  # $38.1: @FILE = call(end_line_290, $37.1)
  .loc 2 40 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 41 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $39.1:rbx 
  # $40.1: @FILE = call(write_287, $39.1, "  movsx rax, WORD PTR ")
  .loc 2 41 5
  mov rdi, rbx
  lea rsi, .LABEL__string_21[rip] # "  movsx rax, WORD PTR "
  call write_287
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $40.1:rax 
  # $41.1: @FILE = call(write_function_label_4, $40.1, function.1)
  .loc 2 41 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $41.1:rax 
  # $42.1: @FILE = call(write_287, $41.1, "__stack_frame_size")
  .loc 2 41 5
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_287
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $42.1:rax 
  # $43.1: @FILE = call(write_287, $42.1, "[rip]")
  .loc 2 41 5
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_287
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $43.1:rax 
  # $44.1: @FILE = call(end_line_290, $43.1)
  .loc 2 41 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 42 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $45.1:rbx 
  # $46.1: @FILE = call(write_287, $45.1, "  sub rsp, rax")
  .loc 2 42 5
  mov rdi, rbx
  lea rsi, .LABEL__string_24[rip] # "  sub rsp, rax"
  call write_287
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $46.1:rax 
  # $47.1: @FILE = call(end_line_290, $46.1)
  .loc 2 42 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $48.1: @List = load_struct_member(function.1, blocks)
  .loc 2 44 15
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $48.1:rbx 
  # blocks.1: @List_Iterator = call(create_iterator_279, $48.1)
  .loc 2 44 15
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__generate_function_3__4:
  # $50.1: Boolean = call(has_next_282, blocks.1)
  .loc 2 45 12
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $50.1:rax 
  # jump($50.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_function_3__6
.LABEL__generate_function_3__5:
  # block.1: @IR_Block = call(next_283, blocks.1)
  .loc 2 46 18
  mov rdi, [rbp-24]
  call next_283
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 2 47 30
  mov rbx, [rax+32]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:rbx 
  # jump(block.7)
  mov [rbp-32], rbx
.LABEL__generate_function_3__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # $54.1: Boolean = block_instruction.2 != null
  .loc 2 48 16
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $54.1:rax 
  # jump($54.1, block.8, block.4)
  test al, al
  jz .LABEL__generate_function_3__4
.LABEL__generate_function_3__8:
  # $55.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 2 49 17
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:rax:[rbp-32] $55.1:rbx 
  # $56.1: Boolean = $55.1 != null
  .loc 2 49 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:rax:[rbp-32] $56.1:r15 
  # jump($56.1, block.10, block.11)
  test r15b, r15b
  jz .LABEL__generate_function_3__11
.LABEL__generate_function_3__10:
  # call(create_mc_value_37, self.1, block_instruction.2)
  .loc 2 50 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  call create_mc_value_37
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # jump(block.11)
.LABEL__generate_function_3__11:
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 2 52 33
  mov rax, [rbp-32]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.6:rbx:[rbp-32] 
  # jump(block.7)
  mov [rbp-32], rbx
  jmp .LABEL__generate_function_3__7
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.6:[rbp-32] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
.LABEL__generate_function_3__6:
  # $58.1: @List = load_struct_member(function.1, blocks)
  .loc 2 56 25
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] blocks.1:[rbp-24] $58.1:rbx 
  # $60.1: @IR_Block = call(first_277, $58.1)
  .loc 2 56 25
  mov rdi, rbx
  call first_277
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $60.1:rax 
  # call(generate_block_7, self.1, $60.1)
  .loc 2 56 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_7
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # call(output_unreached_ir_instructions_6, self.1)
  .loc 2 58 5
  mov rdi, [rbp-8]
  call output_unreached_ir_instructions_6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $61.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 60 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $61.1:rbx 
  # $62.1: @FILE = call(write_function_end_label_5, $61.1, function.1)
  .loc 2 60 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_end_label_5
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $62.1:rax 
  # $63.1: @FILE = call(write_287, $62.1, ":")
  .loc 2 60 5
  mov rdi, rax
  lea rsi, .LABEL__string_25[rip] # ":"
  call write_287
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $63.1:rax 
  # $64.1: @FILE = call(end_line_290, $63.1)
  .loc 2 60 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $65.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 61 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $65.1:rbx 
  # $66.1: @FILE = call(write_287, $65.1, "  mov rsp, rbp")
  .loc 2 61 5
  mov rdi, rbx
  lea rsi, .LABEL__string_26[rip] # "  mov rsp, rbp"
  call write_287
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $66.1:rax 
  # $67.1: @FILE = call(end_line_290, $66.1)
  .loc 2 61 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $68.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 62 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $68.1:rbx 
  # $69.1: @FILE = call(write_287, $68.1, "  pop rbp")
  .loc 2 62 5
  mov rdi, rbx
  lea rsi, .LABEL__string_27[rip] # "  pop rbp"
  call write_287
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $69.1:rax 
  # $70.1: @FILE = call(end_line_290, $69.1)
  .loc 2 62 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $69.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $71.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 63 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $71.1:rbx 
  # $72.1: @FILE = call(write_287, $71.1, "  ret")
  .loc 2 63 5
  mov rdi, rbx
  lea rsi, .LABEL__string_28[rip] # "  ret"
  call write_287
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $72.1:rax 
  # $73.1: @FILE = call(end_line_290, $72.1)
  .loc 2 63 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $73.1:rax 
  # $74.1: @FILE = call(end_line_290, $73.1)
  .loc 2 63 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $73.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # stack_frame_size.1: Int = load_struct_member(self.1, stack_frame_size)
  .loc 2 65 25
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:rbx 
  # $76.1: Int = stack_frame_size.1 // 16
  .loc 2 66 9
  mov rax, rbx
  cqto
  mov r15, 16
  idiv r15
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:rbx $76.1:rdx 
  # $77.1: Boolean = $76.1 != 0
  .loc 2 66 9
  cmp rdx, 0
  setne al
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:rbx $77.1:rax 
  # jump($77.1, block.12, block.13)
  test al, al
  mov [rbp-32], rbx
  jz .LABEL__generate_function_3__13
.LABEL__generate_function_3__12:
  # $78.1: Int = stack_frame_size.1 + 16
  .loc 2 67 28
  mov rax, [rbp-32]
  add rax, 16
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] $78.1:rax 
  # $79.1: Int = stack_frame_size.1 // 16
  .loc 2 67 52
  mov [rbp-40], rax
  mov rax, [rbp-32]
  cqto
  mov rbx, 16
  idiv rbx
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] $78.1:[rbp-40] $79.1:rdx 
  # stack_frame_size.3: Int = $78.1 - $79.1
  .loc 2 67 28
  mov rax, [rbp-40]
  sub rax, rdx
  # [discarded value]: $78.1
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:rax:[rbp-32] 
  # jump(block.13)
  mov [rbp-32], rax
.LABEL__generate_function_3__13:
  # stack_frame_size.4: Int = phi(stack_frame_size.1, stack_frame_size.3)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] 
  # $81.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 69 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $81.1:rbx 
  # $82.1: @FILE = call(write_function_label_4, $81.1, function.1)
  .loc 2 69 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $82.1:rax 
  # $83.1: @FILE = call(write_287, $82.1, "__stack_frame_size")
  .loc 2 69 5
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_287
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $83.1:rax 
  # $84.1: @FILE = call(write_287, $83.1, ": .word ")
  .loc 2 69 5
  mov rdi, rax
  lea rsi, .LABEL__string_29[rip] # ": .word "
  call write_287
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $84.1:rax 
  # $85.1: @FILE = call(write_286, $84.1, stack_frame_size.4)
  .loc 2 69 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_286
  # [discarded value]: stack_frame_size.4
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] $85.1:rax 
  # $86.1: @FILE = call(end_line_290, $85.1)
  .loc 2 69 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $85.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # call(reset_35, self.1)
  .loc 2 71 5
  mov rdi, [rbp-8]
  call reset_35
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # return()
  jmp .LABEL__generate_function_3__end
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # [discarded value]: stack_frame_size.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] 
  # [discarded value]: stack_frame_size.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # [discarded value]: blocks.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__generate_function_3__end:
  mov rsp, rbp
  pop rbp
  ret

generate_function_3__stack_frame_size: .word 48

  .loc 2 74 1
  .text
write_function_label_4:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_label_4__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_label_4__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  # $1.1: @String = load_struct_member(function.1, name)
  .loc 2 75 16
  mov rax, [rsi+24]
  # [live values]: file.1:rdi function.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write_287, file.1, $1.1)
  .loc 2 75 5
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call write_287
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # $3.1: Boolean = load_struct_member(function.1, is_external)
  .loc 2 76 9
  mov rax, [rbp-8]
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 == false
  .loc 2 76 9
  cmp bl, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $4.1:r15 
  # jump($4.1, block.2, block.3)
  test r15b, r15b
  jz .LABEL__write_function_label_4__3
.LABEL__write_function_label_4__2:
  # $5.1: @FILE = call(write_289, file.1, '_')
  .loc 2 77 9
  mov rdi, [rbp-16]
  mov sil, 95
  call write_289
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $5.1:rax 
  # $6.1: Int = load_struct_member(function.1, id)
  .loc 2 77 31
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-16] function.1:rbx:[rbp-8] $5.1:rax $6.1:r15 
  # $7.1: @FILE = call(write_286, $5.1, $6.1)
  .loc 2 77 9
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # jump(block.3)
.LABEL__write_function_label_4__3:
  # return(file.1)
  .loc 2 79 5
  mov rax, [rbp-16]
  jmp .LABEL__write_function_label_4__end
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # [discarded value]: file.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__write_function_label_4__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_label_4__stack_frame_size: .word 16

  .loc 2 82 1
  .text
write_function_end_label_5:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_end_label_5__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_end_label_5__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  # $1.1: @FILE = call(write_287, file.1, ".LABEL__")
  .loc 2 83 12
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_30[rip] # ".LABEL__"
  call write_287
  # [discarded value]: file.1
  # [live values]: function.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(write_function_label_4, $1.1, function.1)
  .loc 2 83 12
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_function_label_4
  # [discarded value]: function.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, "__")
  .loc 2 83 12
  mov rdi, rax
  lea rsi, .LABEL__string_31[rip] # "__"
  call write_287
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # $4.1: @FILE = call(write_287, $3.1, "end")
  .loc 2 83 12
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "end"
  call write_287
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 2 83 5
  jmp .LABEL__write_function_end_label_5__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__write_function_end_label_5__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_end_label_5__stack_frame_size: .word 16

  .loc 2 86 1
  .text
output_unreached_ir_instructions_6:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_unreached_ir_instructions_6__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_unreached_ir_instructions_6__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 2 87 9
  mov al, [rdi+16]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == false
  .loc 2 87 9
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__output_unreached_ir_instructions_6__3
.LABEL__output_unreached_ir_instructions_6__2:
  # return()
  .loc 2 88 9
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__output_unreached_ir_instructions_6__3:
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 90 17
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] mc_value.1:rbx 
  # jump(block.5)
  mov [rbp-16], rbx
.LABEL__output_unreached_ir_instructions_6__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # $4.1: Boolean = mc_value.2 != null
  .loc 2 91 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $4.1:rax 
  # jump($4.1, block.6, block.7)
  test al, al
  jz .LABEL__output_unreached_ir_instructions_6__7
.LABEL__output_unreached_ir_instructions_6__6:
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 92 32
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:rax:[rbp-16] $5.1:rbx 
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  .loc 2 92 32
  mov r15, [rbx+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:rax:[rbp-16] $6.1:r15 
  # ir_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  .loc 2 92 32
  mov rbx, [r15+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:rax:[rbp-16] ir_instruction_item.1:rbx 
  # jump(block.8)
  mov [rbp-24], rbx
.LABEL__output_unreached_ir_instructions_6__8:
  # ir_instruction_item.2: @List_Item = phi(ir_instruction_item.1, ir_instruction_item.5)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
  # $8.1: Boolean = ir_instruction_item.2 != null
  .loc 2 93 16
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] $8.1:rax 
  # jump($8.1, block.9, block.10)
  test al, al
  jz .LABEL__output_unreached_ir_instructions_6__10
.LABEL__output_unreached_ir_instructions_6__9:
  # ir_instruction.1: @IR_Instruction = load_struct_member(ir_instruction_item.2, data)
  .loc 2 94 31
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:rax:[rbp-24] ir_instruction.1:rbx 
  # $11.1: Boolean = load_struct_member(ir_instruction.1, is_generated)
  .loc 2 95 17
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:rax:[rbp-24] ir_instruction.1:rbx $11.1:r15 
  # $12.1: Boolean = $11.1 == false
  .loc 2 95 17
  cmp r15b, 0
  sete r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:rax:[rbp-24] ir_instruction.1:rbx $12.1:r14 
  # jump($12.1, block.11, block.12)
  test r14b, r14b
  mov [rbp-32], rbx
  jz .LABEL__output_unreached_ir_instructions_6__12
.LABEL__output_unreached_ir_instructions_6__11:
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 96 37
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] $13.1:rbx 
  # $14.1: @FILE = call(dump_198, ir_instruction.1, $13.1, "  # [unreachable instruction]: ")
  .loc 2 96 17
  mov rdi, [rbp-32]
  mov rsi, rbx
  lea rdx, .LABEL__string_33[rip] # "  # [unreachable instruction]: "
  call dump_198
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # jump(block.12)
.LABEL__output_unreached_ir_instructions_6__12:
  # ir_instruction_item.5: @List_Item = load_struct_member(ir_instruction_item.2, next_item)
  .loc 2 98 35
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] ir_instruction_item.5:rbx:[rbp-24] 
  # jump(block.8)
  mov [rbp-24], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__8
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] ir_instruction_item.5:[rbp-24] 
  # [discarded value]: ir_instruction_item.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
.LABEL__output_unreached_ir_instructions_6__10:
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 100 20
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] mc_value.5:rbx:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] mc_value.5:[rbp-16] 
  # [discarded value]: mc_value.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
  # [discarded value]: ir_instruction_item.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] 
  # [discarded value]: ir_instruction_item.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
.LABEL__output_unreached_ir_instructions_6__7:
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_unreached_ir_instructions_6__end:
  mov rsp, rbp
  pop rbp
  ret

output_unreached_ir_instructions_6__stack_frame_size: .word 32

  .loc 2 104 1
  .text
generate_block_7:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_block_7__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_block_7__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # store_struct_member(block.1, is_being_generated, true)
  .loc 2 105 5
  mov BYTE PTR [rsi+48], 1
  # [live values]: self.1:rdi block.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 106 5
  mov rax, [rdi+8]
  # [live values]: self.1:rdi block.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write_block_label_8, $1.1, block.1)
  .loc 2 106 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call write_block_label_8
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write_289, $2.1, ':')
  .loc 2 106 5
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(end_line_290, $3.1)
  .loc 2 106 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 2 107 26
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:rbx 
  # jump(block.2)
  mov [rbp-24], rbx
.LABEL__generate_block_7__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.9)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # $6.1: Boolean = block_instruction.2 != null
  .loc 2 108 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:rax 
  # jump($6.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_block_7__4
.LABEL__generate_block_7__3:
  # $7.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 2 109 13
  mov rax, [rbp-8]
  mov bl, [rax+16]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $7.1:rbx 
  # jump($7.1, block.5, block.6)
  test bl, bl
  jz .LABEL__generate_block_7__6
.LABEL__generate_block_7__5:
  # $8.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 110 36
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $8.1:rbx 
  # $9.1: @FILE = call(dump_198, block_instruction.2, $8.1, "  # ")
  .loc 2 110 13
  mov rdi, [rbp-24]
  mov rsi, rbx
  lea rdx, .LABEL__string_34[rip] # "  # "
  call dump_198
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # jump(block.6)
.LABEL__generate_block_7__6:
  # call(generate_instruction_9, self.1, block_instruction.2)
  .loc 2 112 9
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call generate_instruction_9
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # IR_Load_Variable_Instruction.2: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] IR_Load_Variable_Instruction.2:rax 
  # $10.1: Boolean = call(is_293, block_instruction.2, IR_Load_Variable_Instruction.2)
  .loc 2 113 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Variable_Instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $10.1:rax 
  # $12.1: Boolean = $10.1 == false
  .loc 2 113 13
  cmp al, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:rbx 
  # jump($12.1, block.9, block.10)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__generate_block_7__10
.LABEL__generate_block_7__9:
  # $13.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 2 113 76
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $12.1:[rbp-25] $13.1:rbx 
  # $12.2: Boolean = $13.1 != null
  .loc 2 113 76
  cmp rbx, 0
  setne r15b
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $12.1:[rbp-25] $12.2:r15:[rbp-25] 
  # jump(block.10)
  mov [rbp-25], r15b
.LABEL__generate_block_7__10:
  # $15.1: Boolean = phi($12.1, $12.2)
  .loc 2 113 13
  mov al, [rbp-25]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] $15.1:rax 
  # jump($15.1, block.7, block.8)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_block_7__8
.LABEL__generate_block_7__7:
  # $16.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 2 113 118
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $12.1:[rbp-25] $16.1:rbx $12.2:[rbp-25] $15.1:[rbp-26] 
  # $17.1: @IR_Variable = load_struct_member($16.1, variable)
  .loc 2 113 118
  mov r15, [rbx+24]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $12.1:[rbp-25] $17.1:r15 $12.2:[rbp-25] $15.1:[rbp-26] 
  # IR_Global_Variable.2: @Object_Type = load_variable(IR_Global_Variable)
  lea rbx, IR_Global_Variable[rip]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $12.1:[rbp-25] $17.1:r15 IR_Global_Variable.2:rbx $12.2:[rbp-25] $15.1:[rbp-26] 
  # $15.2: Boolean = call(is_293, $17.1, IR_Global_Variable.2)
  .loc 2 113 118
  mov rdi, r15
  mov rsi, rbx
  call is_293
  # [discarded value]: $17.1
  # [discarded value]: IR_Global_Variable.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:rax:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # jump(block.8)
  mov [rbp-26], al
.LABEL__generate_block_7__8:
  # $15.3: Boolean = phi($15.1, $15.2)
  .loc 2 113 13
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $15.3:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # jump($15.3, block.11, block.12)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__generate_block_7__12
.LABEL__generate_block_7__11:
  # $19.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 2 114 55
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $15.3
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] $19.1:rbx 
  # $20.1: @MC_Value = call(get_value_40, self.1, $19.1)
  .loc 2 114 40
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_40
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] $20.1:rax 
  # call(spill_global_variable_42, self.1, $20.1)
  .loc 2 114 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call spill_global_variable_42
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # jump(block.12)
.LABEL__generate_block_7__12:
  # $21.1: Int = call(discard_used_values_45, self.1)
  .loc 2 116 9
  mov rdi, [rbp-8]
  call discard_used_values_45
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # call(output_live_values_46, self.1)
  .loc 2 117 9
  mov rdi, [rbp-8]
  call output_live_values_46
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # call(output_used_registers_48, self.1)
  .loc 2 118 9
  mov rdi, [rbp-8]
  call output_used_registers_48
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # block_instruction.9: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 2 119 29
  mov rax, [rbp-24]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] block_instruction.9:rbx:[rbp-24] 
  # jump(block.2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_block_7__2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] block_instruction.9:[rbp-24] 
  # [discarded value]: block_instruction.9
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [discarded value]: $15.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
.LABEL__generate_block_7__4:
  # store_struct_member(block.1, is_generated, true)
  .loc 2 121 5
  mov rax, [rbp-16]
  mov BYTE PTR [rax+49], 1
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # $23.1: Int = call(discard_used_values_45, self.1)
  .loc 2 122 9
  mov rdi, [rbp-8]
  call discard_used_values_45
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $23.1:rax 
  # $24.1: Boolean = $23.1 > 0
  .loc 2 122 9
  cmp rax, 0
  setg bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $24.1:rbx 
  # jump($24.1, block.13, block.14)
  test bl, bl
  jz .LABEL__generate_block_7__14
.LABEL__generate_block_7__13:
  # call(output_live_values_46, self.1)
  .loc 2 123 9
  mov rdi, [rbp-8]
  call output_live_values_46
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # call(output_used_registers_48, self.1)
  .loc 2 124 9
  mov rdi, [rbp-8]
  call output_used_registers_48
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # jump(block.14)
.LABEL__generate_block_7__14:
  # return()
  jmp .LABEL__generate_block_7__end
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: 
.LABEL__generate_block_7__end:
  mov rsp, rbp
  pop rbp
  ret

generate_block_7__stack_frame_size: .word 32

  .loc 2 128 1
  .text
write_block_label_8:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_block_label_8__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_block_label_8__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: file.1:rdi block.1:rsi 
  # $1.1: @FILE = call(write_287, file.1, ".LABEL__")
  .loc 2 129 12
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_30[rip] # ".LABEL__"
  call write_287
  # [discarded value]: file.1
  # [live values]: block.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Function = load_struct_member(block.1, function)
  .loc 2 129 41
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  # $3.1: @String = load_struct_member($2.1, name)
  .loc 2 129 41
  mov r14, [r15+24]
  # [discarded value]: $2.1
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $3.1:r14 
  # $4.1: @FILE = call(write_287, $1.1, $3.1)
  .loc 2 129 12
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: block.1:[rbp-8] $4.1:rax 
  # $5.1: @FILE = call(write_289, $4.1, '_')
  .loc 2 129 12
  mov rdi, rax
  mov sil, 95
  call write_289
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] $5.1:rax 
  # $6.1: @IR_Function = load_struct_member(block.1, function)
  .loc 2 129 79
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $6.1:r15 
  # $7.1: Int = load_struct_member($6.1, id)
  .loc 2 129 79
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $7.1:r14 
  # $8.1: @FILE = call(write_286, $5.1, $7.1)
  .loc 2 129 12
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write_287, $8.1, "__")
  .loc 2 129 12
  mov rdi, rax
  lea rsi, .LABEL__string_31[rip] # "__"
  call write_287
  # [discarded value]: $8.1
  # [live values]: block.1:[rbp-8] $9.1:rax 
  # $10.1: Int = load_struct_member(block.1, id)
  .loc 2 129 116
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: block.1
  # [live values]: $9.1:rax $10.1:r15 
  # $11.1: @FILE = call(write_286, $9.1, $10.1)
  .loc 2 129 12
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # return($11.1)
  .loc 2 129 5
  jmp .LABEL__write_block_label_8__end
  # [discarded value]: $11.1
  # [live values]: 
.LABEL__write_block_label_8__end:
  mov rsp, rbp
  pop rbp
  ret

write_block_label_8__stack_frame_size: .word 16

  .loc 2 132 1
  .text
generate_instruction_9:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_instruction_9__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_instruction_9__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, is_generated, true)
  .loc 2 133 5
  mov BYTE PTR [rsi+56], 1
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 2 134 9
  mov rax, [rsi+8]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 2 134 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__generate_instruction_9__3
.LABEL__generate_instruction_9__2:
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 135 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $3.1:rbx 
  # $4.1: @FILE = call(write_287, $3.1, "  .loc ")
  .loc 2 135 9
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_287
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # $5.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 2 135 49
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $4.1:rax $5.1:r15 
  # $6.1: @Source = load_struct_member($5.1, source)
  .loc 2 135 49
  mov r14, [r15+0]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $4.1:rax $6.1:r14 
  # $7.1: Int = load_struct_member($6.1, id)
  .loc 2 135 49
  mov r15, [r14+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $4.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_286, $4.1, $7.1)
  .loc 2 135 9
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write_289, $8.1, ' ')
  .loc 2 135 9
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 2 135 98
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $9.1:rax $10.1:r15 
  # $11.1: Int = load_struct_member($10.1, line)
  .loc 2 135 98
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $9.1:rax $11.1:r14 
  # $12.1: @FILE = call(write_286, $9.1, $11.1)
  .loc 2 135 9
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rax 
  # $13.1: @FILE = call(write_289, $12.1, ' ')
  .loc 2 135 9
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 2 135 142
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $13.1:rax $14.1:r15 
  # $15.1: Int = load_struct_member($14.1, column)
  .loc 2 135 142
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $13.1:rax $15.1:r14 
  # $16.1: @FILE = call(write_286, $13.1, $15.1)
  .loc 2 135 9
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $16.1:rax 
  # $17.1: @FILE = call(end_line_290, $16.1)
  .loc 2 135 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_instruction_9__3:
  # IR_Add_Instruction.2: @Object_Type = load_variable(IR_Add_Instruction)
  lea rax, IR_Add_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Add_Instruction.2:rax 
  # $18.1: Boolean = call(is_293, instruction.1, IR_Add_Instruction.2)
  .loc 2 137 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Add_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $18.1:rax 
  # jump($18.1, block.4, block.6)
  test al, al
  jz .LABEL__generate_instruction_9__6
.LABEL__generate_instruction_9__4:
  # $61.1: @IR_Add_Instruction = instruction.1
  .loc 2 138 39
  mov rax, [rbp-8]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $61.1:rax 
  # call(generate_add_instruction_10, self.1, $61.1)
  .loc 2 138 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_add_instruction_10
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
.LABEL__generate_instruction_9__5:
  # return()
  jmp .LABEL__generate_instruction_9__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__6:
  # IR_Call_Instruction.2: @Object_Type = load_variable(IR_Call_Instruction)
  lea rax, IR_Call_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Call_Instruction.2:rax 
  # $19.1: Boolean = call(is_293, instruction.1, IR_Call_Instruction.2)
  .loc 2 139 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Call_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $19.1:rax 
  # jump($19.1, block.7, block.9)
  test al, al
  jz .LABEL__generate_instruction_9__9
.LABEL__generate_instruction_9__7:
  # $60.1: @IR_Call_Instruction = instruction.1
  .loc 2 140 40
  mov rax, [rbp-8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $60.1:rax 
  # call(generate_call_instruction_11, self.1, $60.1)
  .loc 2 140 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_call_instruction_11
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__9:
  # IR_Cast_Instruction.2: @Object_Type = load_variable(IR_Cast_Instruction)
  lea rax, IR_Cast_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Cast_Instruction.2:rax 
  # $20.1: Boolean = call(is_293, instruction.1, IR_Cast_Instruction.2)
  .loc 2 141 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Cast_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $20.1:rax 
  # jump($20.1, block.10, block.12)
  test al, al
  jz .LABEL__generate_instruction_9__12
.LABEL__generate_instruction_9__10:
  # $59.1: @IR_Cast_Instruction = instruction.1
  .loc 2 142 40
  mov rax, [rbp-8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $59.1:rax 
  # call(generate_cast_instruction_12, self.1, $59.1)
  .loc 2 142 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_cast_instruction_12
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__12:
  # IR_Conditional_Jump_Instruction.2: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea rax, IR_Conditional_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Conditional_Jump_Instruction.2:rax 
  # $21.1: Boolean = call(is_293, instruction.1, IR_Conditional_Jump_Instruction.2)
  .loc 2 143 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Conditional_Jump_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_instruction_9__15
.LABEL__generate_instruction_9__13:
  # $58.1: @IR_Conditional_Jump_Instruction = instruction.1
  .loc 2 144 52
  mov rax, [rbp-8]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $58.1:rax 
  # call(generate_conditional_jump_instruction_13, self.1, $58.1)
  .loc 2 144 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_conditional_jump_instruction_13
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__15:
  # IR_Comparison_Instruction.2: @Object_Type = load_variable(IR_Comparison_Instruction)
  lea rax, IR_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Comparison_Instruction.2:rax 
  # $22.1: Boolean = call(is_293, instruction.1, IR_Comparison_Instruction.2)
  .loc 2 145 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Comparison_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:rax 
  # jump($22.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_instruction_9__18
.LABEL__generate_instruction_9__16:
  # $57.1: @IR_Comparison_Instruction = instruction.1
  .loc 2 146 46
  mov rax, [rbp-8]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $57.1:rax 
  # call(generate_comparison_instruction_14, self.1, $57.1)
  .loc 2 146 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_comparison_instruction_14
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__18:
  # IR_Direct_Jump_Instruction.2: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rax, IR_Direct_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Direct_Jump_Instruction.2:rax 
  # $23.1: Boolean = call(is_293, instruction.1, IR_Direct_Jump_Instruction.2)
  .loc 2 147 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Direct_Jump_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $23.1:rax 
  # jump($23.1, block.19, block.21)
  test al, al
  jz .LABEL__generate_instruction_9__21
.LABEL__generate_instruction_9__19:
  # $56.1: @IR_Direct_Jump_Instruction = instruction.1
  .loc 2 148 47
  mov rax, [rbp-8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $56.1:rax 
  # call(generate_direct_jump_instruction_15, self.1, $56.1)
  .loc 2 148 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_direct_jump_instruction_15
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__21:
  # IR_Divide_Instruction.2: @Object_Type = load_variable(IR_Divide_Instruction)
  lea rax, IR_Divide_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Divide_Instruction.2:rax 
  # $24.1: Boolean = call(is_293, instruction.1, IR_Divide_Instruction.2)
  .loc 2 149 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Divide_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $24.1:rax 
  # jump($24.1, block.22, block.24)
  test al, al
  jz .LABEL__generate_instruction_9__24
.LABEL__generate_instruction_9__22:
  # $55.1: @IR_Divide_Instruction = instruction.1
  .loc 2 150 42
  mov rax, [rbp-8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $55.1:rax 
  # call(generate_divide_instruction_16, self.1, $55.1)
  .loc 2 150 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_divide_instruction_16
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__24:
  # IR_Load_Array_Item_Instruction.2: @Object_Type = load_variable(IR_Load_Array_Item_Instruction)
  lea rax, IR_Load_Array_Item_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Array_Item_Instruction.2:rax 
  # $25.1: Boolean = call(is_293, instruction.1, IR_Load_Array_Item_Instruction.2)
  .loc 2 151 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Array_Item_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $25.1:rax 
  # jump($25.1, block.25, block.27)
  test al, al
  jz .LABEL__generate_instruction_9__27
.LABEL__generate_instruction_9__25:
  # $54.1: @IR_Load_Array_Item_Instruction = instruction.1
  .loc 2 152 51
  mov rax, [rbp-8]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $54.1:rax 
  # call(generate_load_array_item_instruction_17, self.1, $54.1)
  .loc 2 152 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_array_item_instruction_17
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__27:
  # IR_Load_Function_Address_Instruction.2: @Object_Type = load_variable(IR_Load_Function_Address_Instruction)
  lea rax, IR_Load_Function_Address_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Function_Address_Instruction.2:rax 
  # $26.1: Boolean = call(is_293, instruction.1, IR_Load_Function_Address_Instruction.2)
  .loc 2 153 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Function_Address_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $26.1:rax 
  # jump($26.1, block.28, block.30)
  test al, al
  jz .LABEL__generate_instruction_9__30
.LABEL__generate_instruction_9__28:
  # $53.1: @IR_Load_Function_Address_Instruction = instruction.1
  .loc 2 154 57
  mov rax, [rbp-8]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $53.1:rax 
  # call(generate_load_function_address_instruction_18, self.1, $53.1)
  .loc 2 154 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_function_address_instruction_18
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__30:
  # IR_Load_Struct_Member_Instruction.2: @Object_Type = load_variable(IR_Load_Struct_Member_Instruction)
  lea rax, IR_Load_Struct_Member_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Struct_Member_Instruction.2:rax 
  # $27.1: Boolean = call(is_293, instruction.1, IR_Load_Struct_Member_Instruction.2)
  .loc 2 155 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Struct_Member_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $27.1:rax 
  # jump($27.1, block.31, block.33)
  test al, al
  jz .LABEL__generate_instruction_9__33
.LABEL__generate_instruction_9__31:
  # $52.1: @IR_Load_Struct_Member_Instruction = instruction.1
  .loc 2 156 54
  mov rax, [rbp-8]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $52.1:rax 
  # call(generate_load_struct_member_instruction_20, self.1, $52.1)
  .loc 2 156 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_struct_member_instruction_20
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__33:
  # IR_Load_Variable_Instruction.3: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Variable_Instruction.3:rax 
  # $28.1: Boolean = call(is_293, instruction.1, IR_Load_Variable_Instruction.3)
  .loc 2 157 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Variable_Instruction.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $28.1:rax 
  # jump($28.1, block.34, block.36)
  test al, al
  jz .LABEL__generate_instruction_9__36
.LABEL__generate_instruction_9__34:
  # $51.1: @IR_Load_Variable_Instruction = instruction.1
  .loc 2 158 49
  mov rax, [rbp-8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $51.1:rax 
  # call(generate_load_variable_instruction_19, self.1, $51.1)
  .loc 2 158 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_variable_instruction_19
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__36:
  # IR_Modulo_Instruction.2: @Object_Type = load_variable(IR_Modulo_Instruction)
  lea rax, IR_Modulo_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Modulo_Instruction.2:rax 
  # $29.1: Boolean = call(is_293, instruction.1, IR_Modulo_Instruction.2)
  .loc 2 159 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Modulo_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $29.1:rax 
  # jump($29.1, block.37, block.39)
  test al, al
  jz .LABEL__generate_instruction_9__39
.LABEL__generate_instruction_9__37:
  # $50.1: @IR_Modulo_Instruction = instruction.1
  .loc 2 160 42
  mov rax, [rbp-8]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $50.1:rax 
  # call(generate_modulo_instruction_21, self.1, $50.1)
  .loc 2 160 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_modulo_instruction_21
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__39:
  # IR_Multiply_Instruction.2: @Object_Type = load_variable(IR_Multiply_Instruction)
  lea rax, IR_Multiply_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Multiply_Instruction.2:rax 
  # $30.1: Boolean = call(is_293, instruction.1, IR_Multiply_Instruction.2)
  .loc 2 161 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Multiply_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $30.1:rax 
  # jump($30.1, block.40, block.42)
  test al, al
  jz .LABEL__generate_instruction_9__42
.LABEL__generate_instruction_9__40:
  # $49.1: @IR_Multiply_Instruction = instruction.1
  .loc 2 162 44
  mov rax, [rbp-8]
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $49.1:rax 
  # call(generate_multiply_instruction_22, self.1, $49.1)
  .loc 2 162 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_multiply_instruction_22
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__42:
  # IR_New_Instruction.2: @Object_Type = load_variable(IR_New_Instruction)
  lea rax, IR_New_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_New_Instruction.2:rax 
  # $31.1: Boolean = call(is_293, instruction.1, IR_New_Instruction.2)
  .loc 2 163 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_New_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.43, block.45)
  test al, al
  jz .LABEL__generate_instruction_9__45
.LABEL__generate_instruction_9__43:
  # $48.1: @IR_New_Instruction = instruction.1
  .loc 2 164 39
  mov rax, [rbp-8]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $48.1:rax 
  # call(generate_new_instruction_23, self.1, $48.1)
  .loc 2 164 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_new_instruction_23
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__45:
  # IR_Phi_Instruction.2: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Phi_Instruction.2:rax 
  # $32.1: Boolean = call(is_293, instruction.1, IR_Phi_Instruction.2)
  .loc 2 165 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Phi_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $32.1:rax 
  # jump($32.1, block.46, block.48)
  test al, al
  jz .LABEL__generate_instruction_9__48
.LABEL__generate_instruction_9__46:
  # $47.1: @IR_Phi_Instruction = instruction.1
  .loc 2 166 39
  mov rax, [rbp-8]
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $47.1:rax 
  # call(generate_phi_instruction_24, self.1, $47.1)
  .loc 2 166 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_phi_instruction_24
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__48:
  # IR_Return_Instruction.2: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Return_Instruction.2:rax 
  # $33.1: Boolean = call(is_293, instruction.1, IR_Return_Instruction.2)
  .loc 2 167 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Return_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $33.1:rax 
  # jump($33.1, block.49, block.51)
  test al, al
  jz .LABEL__generate_instruction_9__51
.LABEL__generate_instruction_9__49:
  # $46.1: @IR_Return_Instruction = instruction.1
  .loc 2 168 42
  mov rax, [rbp-8]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $46.1:rax 
  # call(generate_return_instruction_25, self.1, $46.1)
  .loc 2 168 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_return_instruction_25
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__51:
  # IR_Set_Instruction.2: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Set_Instruction.2:rax 
  # $34.1: Boolean = call(is_293, instruction.1, IR_Set_Instruction.2)
  .loc 2 169 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Set_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $34.1:rax 
  # jump($34.1, block.52, block.54)
  test al, al
  jz .LABEL__generate_instruction_9__54
.LABEL__generate_instruction_9__52:
  # $45.1: @IR_Set_Instruction = instruction.1
  .loc 2 170 39
  mov rax, [rbp-8]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $45.1:rax 
  # call(generate_set_instruction_26, self.1, $45.1)
  .loc 2 170 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_set_instruction_26
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__54:
  # IR_Store_Array_Item_Instruction.2: @Object_Type = load_variable(IR_Store_Array_Item_Instruction)
  lea rax, IR_Store_Array_Item_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Store_Array_Item_Instruction.2:rax 
  # $35.1: Boolean = call(is_293, instruction.1, IR_Store_Array_Item_Instruction.2)
  .loc 2 171 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Store_Array_Item_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $35.1:rax 
  # jump($35.1, block.55, block.57)
  test al, al
  jz .LABEL__generate_instruction_9__57
.LABEL__generate_instruction_9__55:
  # $44.1: @IR_Store_Array_Item_Instruction = instruction.1
  .loc 2 172 52
  mov rax, [rbp-8]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $44.1:rax 
  # call(generate_store_array_item_instruction_27, self.1, $44.1)
  .loc 2 172 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_store_array_item_instruction_27
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__57:
  # IR_Store_Struct_Member_Instruction.2: @Object_Type = load_variable(IR_Store_Struct_Member_Instruction)
  lea rax, IR_Store_Struct_Member_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Store_Struct_Member_Instruction.2:rax 
  # $36.1: Boolean = call(is_293, instruction.1, IR_Store_Struct_Member_Instruction.2)
  .loc 2 173 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Store_Struct_Member_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $36.1:rax 
  # jump($36.1, block.58, block.60)
  test al, al
  jz .LABEL__generate_instruction_9__60
.LABEL__generate_instruction_9__58:
  # $43.1: @IR_Store_Struct_Member_Instruction = instruction.1
  .loc 2 174 55
  mov rax, [rbp-8]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $43.1:rax 
  # call(generate_store_struct_member_instruction_28, self.1, $43.1)
  .loc 2 174 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_store_struct_member_instruction_28
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__60:
  # IR_Substract_Instruction.2: @Object_Type = load_variable(IR_Substract_Instruction)
  lea rax, IR_Substract_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Substract_Instruction.2:rax 
  # $37.1: Boolean = call(is_293, instruction.1, IR_Substract_Instruction.2)
  .loc 2 175 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Substract_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $37.1:rax 
  # jump($37.1, block.61, block.63)
  test al, al
  jz .LABEL__generate_instruction_9__63
.LABEL__generate_instruction_9__61:
  # $42.1: @IR_Substract_Instruction = instruction.1
  .loc 2 176 45
  mov rax, [rbp-8]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $42.1:rax 
  # call(generate_substract_instruction_29, self.1, $42.1)
  .loc 2 176 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_substract_instruction_29
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_9__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_9__63:
  # $38.1: @String = call(clone_295, "Unsupported instruction: ")
  .loc 2 178 20
  lea rdi, .LABEL__string_35[rip] # "Unsupported instruction: "
  call clone_295
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $38.1:rax 
  # $39.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 2 178 62
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $38.1:rax $39.1:r15 
  # $40.1: @String = load_struct_member($39.1, name)
  .loc 2 178 62
  mov r14, r15
  add r14, 8
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $38.1:rax $40.1:r14 
  # $41.1: @String = call(append_304, $38.1, $40.1)
  .loc 2 178 20
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $38.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $41.1:rax 
  # call(abort_33, self.1, $41.1)
  .loc 2 178 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_33
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_instruction_9__end:
  mov rsp, rbp
  pop rbp
  ret

generate_instruction_9__stack_frame_size: .word 16

  .loc 2 182 1
  .text
generate_add_instruction_10:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_add_instruction_10__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_add_instruction_10__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Add_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 183 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 2 184 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_189
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  .loc 2 184 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 185 29
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  # $4.1: @MC_Value = call(map_variable_value_39, self.1, $3.1, result_register.1)
  .loc 2 185 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_39
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 186 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  # $6.1: @FILE = call(write_287, $5.1, "  add ")
  .loc 2 186 5
  mov rdi, rbx
  lea rsi, .LABEL__string_36[rip] # "  add "
  call write_287
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 186 44
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_287, $6.1, $7.1)
  .loc 2 186 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write_287, $8.1, ", ")
  .loc 2 186 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 2 186 100
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_operand_32, $9.1, self.1, $10.1)
  .loc 2 186 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_32
  # [discarded value]: self.1
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # $12.1: @FILE = call(end_line_290, $11.1)
  .loc 2 186 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_add_instruction_10__end
  # [live values]: 
.LABEL__generate_add_instruction_10__end:
  mov rsp, rbp
  pop rbp
  ret

generate_add_instruction_10__stack_frame_size: .word 32

  .loc 2 189 1
  .text
generate_call_instruction_11:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_call_instruction_11__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_call_instruction_11__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 2 190 9
  mov rax, [rsi+57]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 > 0
  .loc 2 190 9
  cmp rax, 0
  setg bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__2:
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 191 34
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $3.1:rbx 
  # $4.1: @IR_Value = call(argument_161, instruction.1, 0)
  .loc 2 191 53
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rbx
  call argument_161
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $3.1:[rbp-24] $4.1:rax 
  # call(generate_load_value_30, self.1, $3.1, $4.1)
  .loc 2 191 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $5.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 2 192 13
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $5.1:rbx 
  # $6.1: Boolean = $5.1 > 1
  .loc 2 192 13
  cmp rbx, 1
  setg r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $6.1:r15 
  # jump($6.1, block.4, block.3)
  test r15b, r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__4:
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 193 38
  mov rax, [rbp-16]
  mov rbx, [rax+49]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  # $8.1: @IR_Value = call(argument_161, instruction.1, 1)
  .loc 2 193 57
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-24], rbx
  call argument_161
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $7.1:[rbp-24] $8.1:rax 
  # call(generate_load_value_30, self.1, $7.1, $8.1)
  .loc 2 193 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $9.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 2 194 17
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $9.1:rbx 
  # $10.1: Boolean = $9.1 > 2
  .loc 2 194 17
  cmp rbx, 2
  setg r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $10.1:r15 
  # jump($10.1, block.6, block.3)
  test r15b, r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__6:
  # $11.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 195 42
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $11.1:rbx 
  # $12.1: @IR_Value = call(argument_161, instruction.1, 2)
  .loc 2 195 61
  mov rdi, [rbp-8]
  mov rsi, 2
  mov [rbp-24], rbx
  call argument_161
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:[rbp-24] $12.1:rax 
  # call(generate_load_value_30, self.1, $11.1, $12.1)
  .loc 2 195 17
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $13.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 2 196 21
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $13.1:rbx 
  # $14.1: Boolean = $13.1 > 3
  .loc 2 196 21
  cmp rbx, 3
  setg r15b
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $14.1:r15 
  # jump($14.1, block.8, block.3)
  test r15b, r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__8:
  # $15.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 197 46
  mov rax, [rbp-16]
  mov rbx, [rax+25]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $15.1:rbx 
  # $16.1: @IR_Value = call(argument_161, instruction.1, 3)
  .loc 2 197 65
  mov rdi, [rbp-8]
  mov rsi, 3
  mov [rbp-24], rbx
  call argument_161
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $15.1:[rbp-24] $16.1:rax 
  # call(generate_load_value_30, self.1, $15.1, $16.1)
  .loc 2 197 21
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $17.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 2 198 25
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $17.1:rbx 
  # $18.1: Boolean = $17.1 > 4
  .loc 2 198 25
  cmp rbx, 4
  setg r15b
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $18.1:r15 
  # jump($18.1, block.10, block.3)
  test r15b, r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__10:
  # $19.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 199 50
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $19.1:rbx 
  # $20.1: @IR_Value = call(argument_161, instruction.1, 4)
  .loc 2 199 68
  mov rdi, [rbp-8]
  mov rsi, 4
  mov [rbp-24], rbx
  call argument_161
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $19.1:[rbp-24] $20.1:rax 
  # call(generate_load_value_30, self.1, $19.1, $20.1)
  .loc 2 199 25
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $21.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 2 200 29
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $21.1:rbx 
  # $22.1: Boolean = $21.1 > 5
  .loc 2 200 29
  cmp rbx, 5
  setg r15b
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $22.1:r15 
  # jump($22.1, block.12, block.3)
  test r15b, r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__12:
  # $23.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 201 54
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $23.1:rbx 
  # $24.1: @IR_Value = call(argument_161, instruction.1, 5)
  .loc 2 201 72
  mov rdi, [rbp-8]
  mov rsi, 5
  mov [rbp-24], rbx
  call argument_161
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $23.1:[rbp-24] $24.1:rax 
  # call(generate_load_value_30, self.1, $23.1, $24.1)
  .loc 2 201 29
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_call_instruction_11__3:
  # IR_Direct_Call_Instruction.2: @Object_Type = load_variable(IR_Direct_Call_Instruction)
  lea rax, IR_Direct_Call_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Direct_Call_Instruction.2:rax 
  # $25.1: Boolean = call(is_293, instruction.1, IR_Direct_Call_Instruction.2)
  .loc 2 208 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Direct_Call_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $25.1:rax 
  # jump($25.1, block.14, block.16)
  test al, al
  jz .LABEL__generate_call_instruction_11__16
.LABEL__generate_call_instruction_11__14:
  # call(release_all_registers_43, self.1)
  .loc 2 209 9
  mov rdi, [rbp-16]
  call release_all_registers_43
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 210 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $38.1:rbx 
  # $39.1: @FILE = call(write_287, $38.1, "  call ")
  .loc 2 210 9
  mov rdi, rbx
  lea rsi, .LABEL__string_38[rip] # "  call "
  call write_287
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $39.1:rax 
  # $40.1: @IR_Direct_Call_Instruction = instruction.1
  .loc 2 210 65
  mov rbx, [rbp-8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $39.1:rax $40.1:rbx 
  # $41.1: @IR_Function = load_struct_member($40.1, function)
  .loc 2 210 64
  mov r15, [rbx+65]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $39.1:rax $41.1:r15 
  # $42.1: @FILE = call(write_function_label_4, $39.1, $41.1)
  .loc 2 210 9
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $39.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $42.1:rax 
  # $43.1: @FILE = call(end_line_290, $42.1)
  .loc 2 210 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.15)
.LABEL__generate_call_instruction_11__15:
  # $44.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 218 9
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $44.1:rbx 
  # $45.1: Boolean = $44.1 != null
  .loc 2 218 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $45.1:r15 
  # jump($45.1, block.20, block.21)
  test r15b, r15b
  jz .LABEL__generate_call_instruction_11__21
.LABEL__generate_call_instruction_11__20:
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 219 33
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $46.1:rbx 
  # $47.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 219 59
  mov r15, [rbp-16]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] $46.1:rbx $47.1:r14 
  # $48.1: @MC_Value = call(map_variable_value_39, self.1, $46.1, $47.1)
  .loc 2 219 9
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.21)
.LABEL__generate_call_instruction_11__21:
  # return()
  jmp .LABEL__generate_call_instruction_11__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_call_instruction_11__16:
  # IR_Dynamic_Call_Instruction.2: @Object_Type = load_variable(IR_Dynamic_Call_Instruction)
  lea rax, IR_Dynamic_Call_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Dynamic_Call_Instruction.2:rax 
  # $26.1: Boolean = call(is_293, instruction.1, IR_Dynamic_Call_Instruction.2)
  .loc 2 211 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Dynamic_Call_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $26.1:rax 
  # jump($26.1, block.17, block.19)
  test al, al
  jz .LABEL__generate_call_instruction_11__19
.LABEL__generate_call_instruction_11__17:
  # $29.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 212 34
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $29.1:rbx 
  # $30.1: @IR_Dynamic_Call_Instruction = instruction.1
  .loc 2 212 54
  mov r15, [rbp-8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $29.1:rbx $30.1:r15 
  # $31.1: @IR_Variable_Value = call(function_address_164, $30.1)
  .loc 2 212 53
  mov rdi, r15
  mov [rbp-24], rbx
  call function_address_164
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $29.1:[rbp-24] $31.1:rax 
  # call(generate_load_value_30, self.1, $29.1, $31.1)
  .loc 2 212 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $29.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # call(release_all_registers_43, self.1)
  .loc 2 213 9
  mov rdi, [rbp-16]
  call release_all_registers_43
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 214 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $32.1:rbx 
  # $33.1: @FILE = call(write_287, $32.1, "  call ")
  .loc 2 214 9
  mov rdi, rbx
  lea rsi, .LABEL__string_38[rip] # "  call "
  call write_287
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $33.1:rax 
  # $34.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 214 49
  mov rbx, [rbp-16]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $33.1:rax $34.1:r15 
  # $35.1: @String = load_struct_member($34.1, name_q)
  .loc 2 214 49
  mov r14, [r15+8]
  # [discarded value]: $34.1
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $33.1:rax $35.1:r14 
  # $36.1: @FILE = call(write_287, $33.1, $35.1)
  .loc 2 214 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $33.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $36.1:rax 
  # $37.1: @FILE = call(end_line_290, $36.1)
  .loc 2 214 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.15)
  jmp .LABEL__generate_call_instruction_11__15
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_call_instruction_11__19:
  # $27.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 2 216 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $27.1:rbx 
  # $28.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 2 216 37
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $27.1:rbx $28.1:r15 
  # call(abort_138, $27.1, $28.1)
  .loc 2 216 9
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_call_instruction_11__end:
  mov rsp, rbp
  pop rbp
  ret

generate_call_instruction_11__stack_frame_size: .word 32

  .loc 2 223 1
  .text
generate_cast_instruction_12:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_cast_instruction_12__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_cast_instruction_12__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Cast_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # ir_value.1: @IR_Value = call(get_value_166, instruction.1)
  .loc 2 224 17
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_166
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 225 24
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rax 
  # call(generate_load_value_30, self.1, result_register.1, ir_value.1)
  .loc 2 226 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 227 29
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $3.1:rbx 
  # $4.1: @MC_Value = call(map_variable_value_39, self.1, $3.1, result_register.1)
  .loc 2 227 5
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-32]
  call map_variable_value_39
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 228 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $5.1:rbx 
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  .loc 2 228 9
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:r15 
  # IR_Int_Type.2: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:r15 IR_Int_Type.2:rbx 
  # $7.1: Boolean = call(is_293, $6.1, IR_Int_Type.2)
  .loc 2 228 9
  mov rdi, r15
  mov rsi, rbx
  call is_293
  # [discarded value]: $6.1
  # [discarded value]: IR_Int_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:rax 
  # jump($7.1, block.2, block.3)
  test al, al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__2:
  # $8.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 229 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $8.1:rbx 
  # IR_Int32_Type.2: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $8.1:rbx IR_Int32_Type.2:r15 
  # $9.1: Boolean = call(is_293, $8.1, IR_Int32_Type.2)
  .loc 2 229 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $8.1
  # [discarded value]: IR_Int32_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $9.1:rax 
  # jump($9.1, block.4, block.5)
  test al, al
  jz .LABEL__generate_cast_instruction_12__5
.LABEL__generate_cast_instruction_12__4:
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 230 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $10.1:rbx 
  # $11.1: @FILE = call(write_287, $10.1, "  movsx ")
  .loc 2 230 13
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  movsx "
  call write_287
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $11.1:rax 
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 230 54
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $11.1:rax $12.1:r15 
  # $13.1: @FILE = call(write_287, $11.1, $12.1)
  .loc 2 230 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, ", ")
  .loc 2 230 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $14.1:rax 
  # $15.1: @String = load_struct_member(result_register.1, name_d)
  .loc 2 230 96
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $14.1:rax $15.1:r15 
  # $16.1: @FILE = call(write_287, $14.1, $15.1)
  .loc 2 230 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $16.1:rax 
  # $17.1: @FILE = call(end_line_290, $16.1)
  .loc 2 230 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # return()
  .loc 2 231 13
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_12__5:
  # $18.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 233 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $18.1:rbx 
  # IR_Int8_Type.2: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $18.1:rbx IR_Int8_Type.2:r15 
  # $19.1: Boolean = call(is_293, $18.1, IR_Int8_Type.2)
  .loc 2 233 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $18.1
  # [discarded value]: IR_Int8_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $19.1:rax 
  # jump($19.1, block.7, block.3)
  test al, al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__7:
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 234 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $20.1:rbx 
  # $21.1: @FILE = call(write_287, $20.1, "  movsx ")
  .loc 2 234 13
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  movsx "
  call write_287
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $21.1:rax 
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 234 54
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $21.1:rax $22.1:r15 
  # $23.1: @FILE = call(write_287, $21.1, $22.1)
  .loc 2 234 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $23.1:rax 
  # $24.1: @FILE = call(write_287, $23.1, ", ")
  .loc 2 234 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $24.1:rax 
  # $25.1: @String = load_struct_member(result_register.1, name_b)
  .loc 2 234 96
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $24.1:rax $25.1:r15 
  # $26.1: @FILE = call(write_287, $24.1, $25.1)
  .loc 2 234 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $26.1:rax 
  # $27.1: @FILE = call(end_line_290, $26.1)
  .loc 2 234 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # return()
  .loc 2 235 13
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_12__3:
  # $28.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 238 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $28.1:rbx 
  # $29.1: @IR_Type = load_struct_member($28.1, type)
  .loc 2 238 9
  mov r15, [rbx+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $29.1:r15 
  # IR_Int32_Type.3: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $29.1:r15 IR_Int32_Type.3:rbx 
  # $30.1: Boolean = call(is_293, $29.1, IR_Int32_Type.3)
  .loc 2 238 9
  mov rdi, r15
  mov rsi, rbx
  call is_293
  # [discarded value]: $29.1
  # [discarded value]: IR_Int32_Type.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $30.1:rax 
  # jump($30.1, block.10, block.11)
  test al, al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__10:
  # $31.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 239 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $31.1:rbx 
  # IR_Int_Type.3: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $31.1:rbx IR_Int_Type.3:r15 
  # $32.1: Boolean = call(is_293, $31.1, IR_Int_Type.3)
  .loc 2 239 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $31.1
  # [discarded value]: IR_Int_Type.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $32.1:rax 
  # jump($32.1, block.12, block.13)
  test al, al
  jz .LABEL__generate_cast_instruction_12__13
.LABEL__generate_cast_instruction_12__12:
  # return()
  .loc 2 240 13
  jmp .LABEL__generate_cast_instruction_12__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_12__13:
  # $33.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 242 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $33.1:rbx 
  # IR_Int8_Type.3: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $33.1:rbx IR_Int8_Type.3:r15 
  # $34.1: Boolean = call(is_293, $33.1, IR_Int8_Type.3)
  .loc 2 242 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $33.1
  # [discarded value]: IR_Int8_Type.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $34.1:rax 
  # jump($34.1, block.15, block.11)
  test al, al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__15:
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 243 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $34.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $35.1:rbx 
  # $36.1: @FILE = call(write_287, $35.1, "  movsx ")
  .loc 2 243 13
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  movsx "
  call write_287
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $36.1:rax 
  # $37.1: @String = load_struct_member(result_register.1, name_d)
  .loc 2 243 54
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $36.1:rax $37.1:r15 
  # $38.1: @FILE = call(write_287, $36.1, $37.1)
  .loc 2 243 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $38.1:rax 
  # $39.1: @FILE = call(write_287, $38.1, ", ")
  .loc 2 243 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $39.1:rax 
  # $40.1: @String = load_struct_member(result_register.1, name_b)
  .loc 2 243 96
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $39.1:rax $40.1:r15 
  # $41.1: @FILE = call(write_287, $39.1, $40.1)
  .loc 2 243 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $41.1:rax 
  # $42.1: @FILE = call(end_line_290, $41.1)
  .loc 2 243 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # return()
  .loc 2 244 13
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_12__11:
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 247 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $43.1:rbx 
  # $44.1: @IR_Type = load_struct_member($43.1, type)
  .loc 2 247 9
  mov r15, [rbx+8]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $44.1:r15 
  # IR_Int8_Type.4: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $44.1:r15 IR_Int8_Type.4:rbx 
  # $45.1: Boolean = call(is_293, $44.1, IR_Int8_Type.4)
  .loc 2 247 9
  mov rdi, r15
  mov rsi, rbx
  call is_293
  # [discarded value]: $44.1
  # [discarded value]: IR_Int8_Type.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $45.1:rax 
  # jump($45.1, block.18, block.19)
  test al, al
  jz .LABEL__generate_cast_instruction_12__19
.LABEL__generate_cast_instruction_12__18:
  # $46.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 248 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $46.1:rbx 
  # IR_Int_Type.4: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $46.1:rbx IR_Int_Type.4:r15 
  # $47.1: Boolean = call(is_293, $46.1, IR_Int_Type.4)
  .loc 2 248 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $46.1
  # [discarded value]: IR_Int_Type.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $47.1:rax 
  # jump($47.1, block.20, block.21)
  test al, al
  jz .LABEL__generate_cast_instruction_12__21
.LABEL__generate_cast_instruction_12__20:
  # return()
  .loc 2 249 13
  jmp .LABEL__generate_cast_instruction_12__end
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_12__21:
  # $48.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 251 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $48.1:rbx 
  # IR_Int32_Type.4: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $48.1:rbx IR_Int32_Type.4:r15 
  # $49.1: Boolean = call(is_293, $48.1, IR_Int32_Type.4)
  .loc 2 251 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $48.1
  # [discarded value]: IR_Int32_Type.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $49.1:rax 
  # jump($49.1, block.23, block.19)
  test al, al
  jz .LABEL__generate_cast_instruction_12__19
.LABEL__generate_cast_instruction_12__23:
  # return()
  .loc 2 252 13
  jmp .LABEL__generate_cast_instruction_12__end
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_12__19:
  # $50.1: @String = call(clone_295, "Cannot cast ")
  .loc 2 255 16
  lea rdi, .LABEL__string_40[rip] # "Cannot cast "
  call clone_295
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $50.1:rax 
  # $51.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 255 45
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $50.1:rax $51.1:r15 
  # $52.1: @Object_Type = load_struct_member($51.1, object_type)
  .loc 2 255 45
  mov r14, [r15+0]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $50.1:rax $52.1:r14 
  # $53.1: @String = load_struct_member($52.1, name)
  .loc 2 255 45
  mov r15, r14
  add r15, 8
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $50.1:rax $53.1:r15 
  # $54.1: @String = call(append_304, $50.1, $53.1)
  .loc 2 255 16
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $50.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $54.1:rax 
  # $55.1: @String = call(append_304, $54.1, " to ")
  .loc 2 255 16
  mov rdi, rax
  lea rsi, .LABEL__string_41[rip] # " to "
  call append_304
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax 
  # $56.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 255 99
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $56.1:r15 
  # $57.1: @IR_Type = load_struct_member($56.1, type)
  .loc 2 255 99
  mov r14, [r15+8]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $57.1:r14 
  # $58.1: @Object_Type = load_struct_member($57.1, object_type)
  .loc 2 255 99
  mov r15, [r14+0]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $58.1:r15 
  # $59.1: @String = load_struct_member($58.1, name)
  .loc 2 255 99
  mov r14, r15
  add r14, 8
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $59.1:r14 
  # $60.1: @String = call(append_304, $55.1, $59.1)
  .loc 2 255 16
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $55.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $60.1:rax 
  # call(abort_33, self.1, $60.1)
  .loc 2 255 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: ir_value.1
  # [discarded value]: result_register.1
  # [live values]: 
.LABEL__generate_cast_instruction_12__end:
  mov rsp, rbp
  pop rbp
  ret

generate_cast_instruction_12__stack_frame_size: .word 32

  .loc 2 258 1
  .text
generate_conditional_jump_instruction_13:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_conditional_jump_instruction_13__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_conditional_jump_instruction_13__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Conditional_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # condition_value.1: @IR_Value = call(get_condition_value_167, instruction.1)
  .loc 2 259 24
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_condition_value_167
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax 
  # $2.1: @IR_Type = load_struct_member(condition_value.1, type)
  .loc 2 260 9
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx 
  # IR_Boolean_Type.2: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx IR_Boolean_Type.2:r15 
  # $3.1: Boolean = call(is_293, $2.1, IR_Boolean_Type.2)
  .loc 2 260 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call is_293
  # [discarded value]: $2.1
  # [discarded value]: IR_Boolean_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $3.1:rax 
  # $4.1: Boolean = $3.1 == false
  .loc 2 260 9
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  jz .LABEL__generate_conditional_jump_instruction_13__3
.LABEL__generate_conditional_jump_instruction_13__2:
  # call(abort_33, self.1, "Unsupported value type")
  .loc 2 261 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Unsupported value type"
  call abort_33
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
.LABEL__generate_conditional_jump_instruction_13__3:
  # IR_Variable_Value.2: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] IR_Variable_Value.2:rax 
  # $5.1: Boolean = call(is_293, condition_value.1, IR_Variable_Value.2)
  .loc 2 264 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.4, block.6)
  test al, al
  jz .LABEL__generate_conditional_jump_instruction_13__6
.LABEL__generate_conditional_jump_instruction_13__4:
  # condition_value.1: @IR_Variable_Value = condition_value.1
  .loc 2 265 28
  mov rax, [rbp-24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value_40, self.1, condition_value.1)
  .loc 2 266 21
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_40
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:rax 
  # $9.1: Boolean = mc_value.1 == null
  .loc 2 267 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:rax $9.1:rbx 
  # jump($9.1, block.7, block.8)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_conditional_jump_instruction_13__8
.LABEL__generate_conditional_jump_instruction_13__7:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 268 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_conditional_jump_instruction_13__8:
  # condition_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 270 30
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:rax:[rbp-40] condition_register.3:rbx 
  # $11.1: Boolean = condition_register.3 == null
  .loc 2 271 13
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:rax:[rbp-40] condition_register.3:rbx $11.1:r15 
  # jump($11.1, block.9, block.5)
  test r15b, r15b
  mov [rbp-48], rbx
  jz .LABEL__generate_conditional_jump_instruction_13__5
.LABEL__generate_conditional_jump_instruction_13__9:
  # condition_register.4: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 272 34
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:rax:[rbp-48] 
  # call(generate_load_value_30, self.1, condition_register.4, condition_value.1)
  .loc 2 273 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-32]
  mov [rbp-48], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump(block.5)
.LABEL__generate_conditional_jump_instruction_13__5:
  # condition_register.5: @MC_Register = phi(condition_register.2, condition_register.4, condition_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 279 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $13.1:rbx condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $14.1: @FILE = call(write_287, $13.1, "  test ")
  .loc 2 279 5
  mov rdi, rbx
  lea rsi, .LABEL__string_44[rip] # "  test "
  call write_287
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $14.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $15.1: @String = load_struct_member(condition_register.5, name_b)
  .loc 2 279 45
  mov rbx, [rbp-48]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:rbx:[rbp-48] $14.1:rax $15.1:r15 condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $16.1: @FILE = call(write_287, $14.1, $15.1)
  .loc 2 279 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $16.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $17.1: @FILE = call(write_287, $16.1, ", ")
  .loc 2 279 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $17.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $18.1: @String = load_struct_member(condition_register.5, name_b)
  .loc 2 279 90
  mov rbx, [rbp-48]
  mov r15, [rbx+32]
  # [discarded value]: condition_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $17.1:rax $18.1:r15 condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $19.1: @FILE = call(write_287, $17.1, $18.1)
  .loc 2 279 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $19.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $20.1: @FILE = call(end_line_290, $19.1)
  .loc 2 279 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # call(release_all_registers_43, self.1)
  .loc 2 280 5
  mov rdi, [rbp-8]
  call release_all_registers_43
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $21.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 2 281 9
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $21.1:rbx condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $22.1: Boolean = load_struct_member($21.1, is_being_generated)
  .loc 2 281 9
  mov r15b, [rbx+48]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $22.1:r15 condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump($22.1, block.11, block.13)
  test r15b, r15b
  jz .LABEL__generate_conditional_jump_instruction_13__13
.LABEL__generate_conditional_jump_instruction_13__11:
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 282 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $33.1:rbx 
  # $34.1: @FILE = call(write_287, $33.1, "  jnz ")
  .loc 2 282 9
  mov rdi, rbx
  lea rsi, .LABEL__string_45[rip] # "  jnz "
  call write_287
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $34.1:rax 
  # $35.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 2 282 60
  mov rbx, [rbp-16]
  mov r15, [rbx+57]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $34.1:rax $35.1:r15 
  # $36.1: @FILE = call(write_block_label_8, $34.1, $35.1)
  .loc 2 282 9
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $36.1:rax 
  # $37.1: @FILE = call(end_line_290, $36.1)
  .loc 2 282 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $38.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 2 283 13
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $38.1:rbx 
  # $39.1: Boolean = load_struct_member($38.1, is_being_generated)
  .loc 2 283 13
  mov r15b, [rbx+48]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $39.1:r15 
  # jump($39.1, block.16, block.17)
  test r15b, r15b
  jz .LABEL__generate_conditional_jump_instruction_13__17
.LABEL__generate_conditional_jump_instruction_13__16:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 284 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
.LABEL__generate_conditional_jump_instruction_13__17:
  # $40.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 2 286 29
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $40.1:rbx 
  # call(generate_block_7, self.1, $40.1)
  .loc 2 286 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump(block.12)
.LABEL__generate_conditional_jump_instruction_13__12:
  # return()
  jmp .LABEL__generate_conditional_jump_instruction_13__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
.LABEL__generate_conditional_jump_instruction_13__13:
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 288 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $23.1:rbx 
  # $24.1: @FILE = call(write_287, $23.1, "  jz ")
  .loc 2 288 9
  mov rdi, rbx
  lea rsi, .LABEL__string_46[rip] # "  jz "
  call write_287
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $24.1:rax 
  # $25.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 2 288 59
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $24.1:rax $25.1:r15 
  # $26.1: @FILE = call(write_block_label_8, $24.1, $25.1)
  .loc 2 288 9
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $26.1:rax 
  # $27.1: @FILE = call(end_line_290, $26.1)
  .loc 2 288 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $28.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 2 289 29
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $28.1:rbx 
  # call(generate_block_7, self.1, $28.1)
  .loc 2 289 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $29.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 2 290 13
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $29.1:rbx 
  # $30.1: Boolean = load_struct_member($29.1, is_being_generated)
  .loc 2 290 13
  mov r15b, [rbx+48]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $30.1:r15 
  # $31.1: Boolean = $30.1 == false
  .loc 2 290 13
  cmp r15b, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $31.1:rbx 
  # jump($31.1, block.14, block.12)
  test bl, bl
  jz .LABEL__generate_conditional_jump_instruction_13__12
.LABEL__generate_conditional_jump_instruction_13__14:
  # $32.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 2 291 33
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $32.1:rbx 
  # call(generate_block_7, self.1, $32.1)
  .loc 2 291 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump(block.12)
  jmp .LABEL__generate_conditional_jump_instruction_13__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [discarded value]: condition_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] 
  # [discarded value]: condition_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: condition_value.1
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
.LABEL__generate_conditional_jump_instruction_13__6:
  # condition_register.2: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 276 30
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_register.2:rax:[rbp-48] 
  # call(generate_load_value_30, self.1, condition_register.2, condition_value.1)
  .loc 2 277 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-48], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_register.2:[rbp-48] 
  # jump(block.5)
  jmp .LABEL__generate_conditional_jump_instruction_13__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_register.2:[rbp-48] 
  # [discarded value]: condition_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: condition_value.1
  # [live values]: 
.LABEL__generate_conditional_jump_instruction_13__end:
  mov rsp, rbp
  pop rbp
  ret

generate_conditional_jump_instruction_13__stack_frame_size: .word 48

  .loc 2 296 1
  .text
generate_comparison_instruction_14:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_comparison_instruction_14__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_comparison_instruction_14__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Comparison_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # left_value.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 2 297 19
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_left_value_189
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:rax 
  # right_value.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 2 298 20
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_190
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax 
  # IR_Variable_Value.3: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax IR_Variable_Value.3:rbx 
  # $4.1: Boolean = call(is_293, left_value.1, IR_Variable_Value.3)
  .loc 2 299 9
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-32], rax
  call is_293
  # [discarded value]: IR_Variable_Value.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_comparison_instruction_14__3
.LABEL__generate_comparison_instruction_14__2:
  # IR_Variable_Value.4: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] IR_Variable_Value.4:rax 
  # $4.2: Boolean = call(is_293, right_value.1, IR_Variable_Value.4)
  .loc 2 299 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:rax:[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__generate_comparison_instruction_14__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 2 299 9
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # jump($4.3, block.4, block.5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__4:
  # $6.1: @IR_Variable_Value = left_value.1
  .loc 2 300 41
  mov rax, [rbp-24]
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $6.1:rax 
  # mc_left_value.1: @MC_Value = call(get_value_40, self.1, $6.1)
  .loc 2 300 26
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_40
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] mc_left_value.1:rax 
  # $8.1: @MC_Register = load_struct_member(mc_left_value.1, register)
  .loc 2 301 13
  mov rbx, [rax+32]
  # [discarded value]: mc_left_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $8.1:rbx 
  # $9.1: Boolean = $8.1 == null
  .loc 2 301 13
  cmp rbx, 0
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $9.1:rax 
  # jump($9.1, block.6, block.5)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__6:
  # $10.1: @IR_Variable_Value = right_value.1
  .loc 2 302 46
  mov rax, [rbp-32]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $10.1:rax 
  # mc_right_value.1: @MC_Value = call(get_value_40, self.1, $10.1)
  .loc 2 302 31
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_40
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] mc_right_value.1:rax 
  # $12.1: @MC_Register = load_struct_member(mc_right_value.1, register)
  .loc 2 303 17
  mov rbx, [rax+32]
  # [discarded value]: mc_right_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $12.1:rbx 
  # $13.1: Boolean = $12.1 == null
  .loc 2 303 17
  cmp rbx, 0
  sete al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $13.1:rax 
  # jump($13.1, block.8, block.5)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__8:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 304 29
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rax 
  # call(generate_load_value_30, self.1, register.1, left_value.1)
  .loc 2 305 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-41], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $15.1: @IR_Variable_Value = left_value.1
  .loc 2 306 41
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $15.1:rax 
  # $16.1: @MC_Value = call(map_variable_value_39, self.1, $15.1, register.1)
  .loc 2 306 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: register.1
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # jump(block.5)
.LABEL__generate_comparison_instruction_14__5:
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 310 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $17.1:rbx 
  # $18.1: @FILE = call(write_287, $17.1, "  cmp ")
  .loc 2 310 5
  mov rdi, rbx
  lea rsi, .LABEL__string_47[rip] # "  cmp "
  call write_287
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $18.1:rax 
  # $19.1: @FILE = call(write_operand_32, $18.1, self.1, left_value.1)
  .loc 2 310 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-24]
  call write_operand_32
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $19.1:rax 
  # $20.1: @FILE = call(write_287, $19.1, ", ")
  .loc 2 310 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $20.1:rax 
  # $21.1: @FILE = call(write_operand_32, $20.1, self.1, right_value.1)
  .loc 2 310 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-32]
  call write_operand_32
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $21.1:rax 
  # $22.1: @FILE = call(end_line_290, $21.1)
  .loc 2 310 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 311 17
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rax 
  # IR_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Equals_Comparison_Instruction)
  lea rbx, IR_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rax IR_Equals_Comparison_Instruction.2:rbx 
  # $24.1: Boolean = call(is_293, instruction.1, IR_Equals_Comparison_Instruction.2)
  .loc 2 312 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call is_293
  # [discarded value]: IR_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $24.1:rax 
  # jump($24.1, block.10, block.12)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__12
.LABEL__generate_comparison_instruction_14__10:
  # $69.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 313 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $24.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $69.1:rbx 
  # $70.1: @FILE = call(write_287, $69.1, "  sete ")
  .loc 2 313 9
  mov rdi, rbx
  lea rsi, .LABEL__string_48[rip] # "  sete "
  call write_287
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $70.1:rax 
  # $71.1: @String = load_struct_member(register.1, name_b)
  .loc 2 313 49
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rbx:[rbp-41] $70.1:rax $71.1:r15 
  # $72.1: @FILE = call(write_287, $70.1, $71.1)
  .loc 2 313 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $72.1:rax 
  # $73.1: @FILE = call(end_line_290, $72.1)
  .loc 2 313 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 314 33
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $74.1:rbx 
  # $75.1: @MC_Value = call(map_variable_value_39, self.1, $74.1, register.1)
  .loc 2 314 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: $74.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
.LABEL__generate_comparison_instruction_14__11:
  # return()
  jmp .LABEL__generate_comparison_instruction_14__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_14__12:
  # IR_Greater_Than_Comparison_Instruction.2: @Object_Type = load_variable(IR_Greater_Than_Comparison_Instruction)
  lea rax, IR_Greater_Than_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Greater_Than_Comparison_Instruction.2:rax 
  # $25.1: Boolean = call(is_293, instruction.1, IR_Greater_Than_Comparison_Instruction.2)
  .loc 2 315 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Greater_Than_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $25.1:rax 
  # jump($25.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__15
.LABEL__generate_comparison_instruction_14__13:
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 316 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $62.1:rbx 
  # $63.1: @FILE = call(write_287, $62.1, "  setg ")
  .loc 2 316 9
  mov rdi, rbx
  lea rsi, .LABEL__string_49[rip] # "  setg "
  call write_287
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $63.1:rax 
  # $64.1: @String = load_struct_member(register.1, name_b)
  .loc 2 316 49
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rbx:[rbp-41] $63.1:rax $64.1:r15 
  # $65.1: @FILE = call(write_287, $63.1, $64.1)
  .loc 2 316 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $65.1:rax 
  # $66.1: @FILE = call(end_line_290, $65.1)
  .loc 2 316 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $67.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 317 33
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $67.1:rbx 
  # $68.1: @MC_Value = call(map_variable_value_39, self.1, $67.1, register.1)
  .loc 2 317 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_14__15:
  # IR_Greater_Than_Or_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Greater_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Greater_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Greater_Than_Or_Equals_Comparison_Instruction.2:rax 
  # $26.1: Boolean = call(is_293, instruction.1, IR_Greater_Than_Or_Equals_Comparison_Instruction.2)
  .loc 2 318 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Greater_Than_Or_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $26.1:rax 
  # jump($26.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__18
.LABEL__generate_comparison_instruction_14__16:
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 319 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $55.1:rbx 
  # $56.1: @FILE = call(write_287, $55.1, "  setge ")
  .loc 2 319 9
  mov rdi, rbx
  lea rsi, .LABEL__string_50[rip] # "  setge "
  call write_287
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $56.1:rax 
  # $57.1: @String = load_struct_member(register.1, name_b)
  .loc 2 319 50
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rbx:[rbp-41] $56.1:rax $57.1:r15 
  # $58.1: @FILE = call(write_287, $56.1, $57.1)
  .loc 2 319 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $58.1:rax 
  # $59.1: @FILE = call(end_line_290, $58.1)
  .loc 2 319 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 320 33
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $60.1:rbx 
  # $61.1: @MC_Value = call(map_variable_value_39, self.1, $60.1, register.1)
  .loc 2 320 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_14__18:
  # IR_Less_Than_Comparison_Instruction.2: @Object_Type = load_variable(IR_Less_Than_Comparison_Instruction)
  lea rax, IR_Less_Than_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Less_Than_Comparison_Instruction.2:rax 
  # $27.1: Boolean = call(is_293, instruction.1, IR_Less_Than_Comparison_Instruction.2)
  .loc 2 321 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Less_Than_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $27.1:rax 
  # jump($27.1, block.19, block.21)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__21
.LABEL__generate_comparison_instruction_14__19:
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 322 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $48.1:rbx 
  # $49.1: @FILE = call(write_287, $48.1, "  setl ")
  .loc 2 322 9
  mov rdi, rbx
  lea rsi, .LABEL__string_51[rip] # "  setl "
  call write_287
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $49.1:rax 
  # $50.1: @String = load_struct_member(register.1, name_b)
  .loc 2 322 49
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rbx:[rbp-41] $49.1:rax $50.1:r15 
  # $51.1: @FILE = call(write_287, $49.1, $50.1)
  .loc 2 322 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $51.1:rax 
  # $52.1: @FILE = call(end_line_290, $51.1)
  .loc 2 322 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $51.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $53.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 323 33
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $53.1:rbx 
  # $54.1: @MC_Value = call(map_variable_value_39, self.1, $53.1, register.1)
  .loc 2 323 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_14__21:
  # IR_Less_Than_Or_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Less_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Less_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Less_Than_Or_Equals_Comparison_Instruction.2:rax 
  # $28.1: Boolean = call(is_293, instruction.1, IR_Less_Than_Or_Equals_Comparison_Instruction.2)
  .loc 2 324 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Less_Than_Or_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $28.1:rax 
  # jump($28.1, block.22, block.24)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__24
.LABEL__generate_comparison_instruction_14__22:
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 325 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $41.1:rbx 
  # $42.1: @FILE = call(write_287, $41.1, "  setle ")
  .loc 2 325 9
  mov rdi, rbx
  lea rsi, .LABEL__string_52[rip] # "  setle "
  call write_287
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $42.1:rax 
  # $43.1: @String = load_struct_member(register.1, name_b)
  .loc 2 325 50
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rbx:[rbp-41] $42.1:rax $43.1:r15 
  # $44.1: @FILE = call(write_287, $42.1, $43.1)
  .loc 2 325 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $44.1:rax 
  # $45.1: @FILE = call(end_line_290, $44.1)
  .loc 2 325 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 326 33
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $46.1:rbx 
  # $47.1: @MC_Value = call(map_variable_value_39, self.1, $46.1, register.1)
  .loc 2 326 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_14__24:
  # IR_Not_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Not_Equals_Comparison_Instruction)
  lea rax, IR_Not_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Not_Equals_Comparison_Instruction.2:rax 
  # $29.1: Boolean = call(is_293, instruction.1, IR_Not_Equals_Comparison_Instruction.2)
  .loc 2 327 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Not_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $29.1:rax 
  # jump($29.1, block.25, block.27)
  test al, al
  jz .LABEL__generate_comparison_instruction_14__27
.LABEL__generate_comparison_instruction_14__25:
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 328 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $29.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $34.1:rbx 
  # $35.1: @FILE = call(write_287, $34.1, "  setne ")
  .loc 2 328 9
  mov rdi, rbx
  lea rsi, .LABEL__string_53[rip] # "  setne "
  call write_287
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $35.1:rax 
  # $36.1: @String = load_struct_member(register.1, name_b)
  .loc 2 328 50
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rbx:[rbp-41] $35.1:rax $36.1:r15 
  # $37.1: @FILE = call(write_287, $35.1, $36.1)
  .loc 2 328 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $37.1:rax 
  # $38.1: @FILE = call(end_line_290, $37.1)
  .loc 2 328 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $39.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 329 33
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $39.1:rbx 
  # $40.1: @MC_Value = call(map_variable_value_39, self.1, $39.1, register.1)
  .loc 2 329 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-41]
  call map_variable_value_39
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_14__27:
  # $30.1: @String = call(clone_295, "Unsupported comparison instruction type: ")
  .loc 2 331 20
  lea rdi, .LABEL__string_54[rip] # "Unsupported comparison instruction type: "
  call clone_295
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $30.1:rax 
  # $31.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 2 331 78
  mov rbx, [rbp-16]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $30.1:rax $31.1:r15 
  # $32.1: @String = load_struct_member($31.1, name)
  .loc 2 331 78
  mov r14, r15
  add r14, 8
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $30.1:rax $32.1:r14 
  # $33.1: @String = call(append_304, $30.1, $32.1)
  .loc 2 331 20
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $30.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $33.1:rax 
  # call(abort_33, self.1, $33.1)
  .loc 2 331 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__generate_comparison_instruction_14__end:
  mov rsp, rbp
  pop rbp
  ret

generate_comparison_instruction_14__stack_frame_size: .word 48

  .loc 2 335 1
  .text
generate_direct_jump_instruction_15:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_direct_jump_instruction_15__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_direct_jump_instruction_15__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Direct_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # call(release_all_registers_43, self.1)
  .loc 2 336 5
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_43
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $1.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 2 337 9
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $1.1:rbx 
  # $2.1: Boolean = load_struct_member($1.1, is_being_generated)
  .loc 2 337 9
  mov r15b, [rbx+48]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, block.2, block.4)
  test r15b, r15b
  jz .LABEL__generate_direct_jump_instruction_15__4
.LABEL__generate_direct_jump_instruction_15__2:
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 338 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  # $5.1: @FILE = call(write_287, $4.1, "  jmp ")
  .loc 2 338 9
  mov rdi, rbx
  lea rsi, .LABEL__string_55[rip] # "  jmp "
  call write_287
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # $6.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 2 338 60
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $5.1:rax $6.1:r15 
  # $7.1: @FILE = call(write_block_label_8, $5.1, $6.1)
  .loc 2 338 9
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(end_line_290, $7.1)
  .loc 2 338 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_direct_jump_instruction_15__3:
  # return()
  jmp .LABEL__generate_direct_jump_instruction_15__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_direct_jump_instruction_15__4:
  # $3.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 2 340 29
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $3.1:rbx 
  # call(generate_block_7, self.1, $3.1)
  .loc 2 340 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__generate_direct_jump_instruction_15__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_direct_jump_instruction_15__end:
  mov rsp, rbp
  pop rbp
  ret

generate_direct_jump_instruction_15__stack_frame_size: .word 16

  .loc 2 344 1
  .text
generate_divide_instruction_16:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_divide_instruction_16__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_divide_instruction_16__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Divide_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 345 27
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # call(release_register_44, self.1, $1.1)
  .loc 2 345 5
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_44
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 346 30
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  # $3.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 2 346 49
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_189
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  .loc 2 346 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 347 5
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  # store_struct_member($4.1, is_reserved, true)
  .loc 2 347 5
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 348 27
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  # call(release_register_44, self.1, $5.1)
  .loc 2 348 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 349 5
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  # store_struct_member($6.1, is_reserved, true)
  .loc 2 349 5
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 350 5
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  # $8.1: @FILE = call(write_287, $7.1, "  cqto")
  .loc 2 350 5
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  cqto"
  call write_287
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(end_line_290, $8.1)
  .loc 2 350 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # right_value.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 2 351 20
  mov rdi, [rbp-8]
  call get_right_value_190
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  # IR_Constant_Value.2: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax IR_Constant_Value.2:rbx 
  # $11.1: Boolean = call(is_293, right_value.1, IR_Constant_Value.2)
  .loc 2 352 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Constant_Value.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_divide_instruction_16__4
.LABEL__generate_divide_instruction_16__2:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 353 21
  mov rdi, [rbp-16]
  call find_unused_register_36
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # store_struct_member(register.1, is_reserved, true)
  .loc 2 354 9
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  .loc 2 355 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 356 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $17.1:rbx 
  # $18.1: @FILE = call(write_287, $17.1, "  idiv ")
  .loc 2 356 9
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  idiv "
  call write_287
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $18.1:rax 
  # $19.1: @String = load_struct_member(register.1, name_q)
  .loc 2 356 49
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rbx:[rbp-32] $18.1:rax $19.1:r15 
  # $20.1: @FILE = call(write_287, $18.1, $19.1)
  .loc 2 356 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $20.1:rax 
  # $21.1: @FILE = call(end_line_290, $20.1)
  .loc 2 356 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # store_struct_member(register.1, is_reserved, false)
  .loc 2 357 9
  mov rax, [rbp-32]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_divide_instruction_16__3:
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 361 5
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $22.1:rbx 
  # store_struct_member($22.1, is_reserved, false)
  .loc 2 361 5
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 362 5
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $23.1:rbx 
  # store_struct_member($23.1, is_reserved, false)
  .loc 2 362 5
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 363 29
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $24.1:r15 
  # $25.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 363 55
  mov r14, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $24.1:r15 $25.1:r14 
  # $26.1: @MC_Value = call(map_variable_value_39, self.1, $24.1, $25.1)
  .loc 2 363 5
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # return()
  jmp .LABEL__generate_divide_instruction_16__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
.LABEL__generate_divide_instruction_16__4:
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 359 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $12.1:rbx 
  # $13.1: @FILE = call(write_287, $12.1, "  idiv ")
  .loc 2 359 9
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  idiv "
  call write_287
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_operand_32, $13.1, self.1, right_value.1)
  .loc 2 359 9
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_32
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(end_line_290, $14.1)
  .loc 2 359 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_divide_instruction_16__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__generate_divide_instruction_16__end:
  mov rsp, rbp
  pop rbp
  ret

generate_divide_instruction_16__stack_frame_size: .word 32

  .loc 2 366 1
  .text
generate_load_array_item_instruction_17:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_array_item_instruction_17__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_array_item_instruction_17__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 367 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_array_value_169, instruction.1)
  .loc 2 368 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_169
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  .loc 2 368 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 369 29
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  # $4.1: @MC_Value = call(map_variable_value_39, self.1, $3.1, result_register.1)
  .loc 2 369 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_39
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 370 50
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  .loc 2 370 50
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $6.1:r15 
  # result_value_type_size.1: Int = call(get_type_size_52, self.1, $6.1)
  .loc 2 370 31
  mov rdi, [rbp-16]
  mov rsi, r15
  call get_type_size_52
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:rax 
  # index_value.1: @IR_Value = call(get_index_value_170, instruction.1)
  .loc 2 372 20
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_index_value_170
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax 
  # IR_Constant_Value.3: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax IR_Constant_Value.3:rbx 
  # $9.1: Boolean = call(is_293, index_value.1, IR_Constant_Value.3)
  .loc 2 373 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:rax 
  # jump($9.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_17__4
.LABEL__generate_load_array_item_instruction_17__2:
  # index_value.1: @IR_Constant_Value = index_value.1
  .loc 2 374 24
  mov rax, [rbp-40]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax 
  # $29.1: @Literal_Token = load_struct_member(index_value.1, literal)
  .loc 2 375 13
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax $29.1:rbx 
  # Integer_Token.2: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax $29.1:rbx Integer_Token.2:r15 
  # $30.1: Boolean = call(is_293, $29.1, Integer_Token.2)
  .loc 2 375 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-48], rax
  call is_293
  # [discarded value]: $29.1
  # [discarded value]: Integer_Token.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $30.1:rax 
  # $31.1: Boolean = $30.1 == false
  .loc 2 375 13
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $31.1:rbx 
  # jump($31.1, block.7, block.8)
  test bl, bl
  jz .LABEL__generate_load_array_item_instruction_17__8
.LABEL__generate_load_array_item_instruction_17__7:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 376 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] 
.LABEL__generate_load_array_item_instruction_17__8:
  # $33.1: @Integer_Token = load_struct_member(index_value.1, literal)
  .loc 2 378 25
  mov rax, [rbp-48]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax:[rbp-48] $33.1:rbx 
  # index_value.1: Int = load_struct_member($33.1, value)
  .loc 2 378 24
  mov r15, [rbx+32]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax:[rbp-48] index_value.1:r15 
  # $35.1: Boolean = index_value.1 != 0
  .loc 2 379 13
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax:[rbp-48] index_value.1:r15 $35.1:rbx 
  # jump($35.1, block.9, block.3)
  test bl, bl
  mov [rbp-56], r15
  jz .LABEL__generate_load_array_item_instruction_17__3
.LABEL__generate_load_array_item_instruction_17__9:
  # $36.1: Boolean = index_value.1 < 0
  .loc 2 380 17
  cmp QWORD PTR [rbp-56], 0
  setl al
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $36.1:rax 
  # jump($36.1, block.11, block.12)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_17__12
.LABEL__generate_load_array_item_instruction_17__11:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 381 17
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_17__12:
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 383 13
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $37.1:rbx 
  # $38.1: @FILE = call(write_287, $37.1, "  add ")
  .loc 2 383 13
  mov rdi, rbx
  lea rsi, .LABEL__string_36[rip] # "  add "
  call write_287
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $38.1:rax 
  # $39.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 383 52
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $38.1:rax $39.1:r15 
  # $40.1: @FILE = call(write_287, $38.1, $39.1)
  .loc 2 383 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $40.1:rax 
  # $41.1: @FILE = call(write_287, $40.1, ", ")
  .loc 2 383 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $41.1:rax 
  # $42.1: Int = index_value.1 * result_value_type_size.1
  .loc 2 383 94
  mov rbx, [rbp-56]
  imul rbx, QWORD PTR [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $41.1:rax $42.1:rbx 
  # $43.1: @FILE = call(write_286, $41.1, $42.1)
  .loc 2 383 13
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $43.1:rax 
  # $44.1: @FILE = call(end_line_290, $43.1)
  .loc 2 383 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.3)
.LABEL__generate_load_array_item_instruction_17__3:
  # $45.1: Boolean = result_value_type_size.1 == 8
  .loc 2 394 9
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $45.1:rax index_value.1:[rbp-56] 
  # jump($45.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_17__15
.LABEL__generate_load_array_item_instruction_17__13:
  # $75.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 395 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $45.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $75.1:rbx 
  # $76.1: @FILE = call(write_287, $75.1, "  mov ")
  .loc 2 395 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $76.1:rax 
  # $77.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 395 48
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $76.1:rax $77.1:r15 
  # $78.1: @FILE = call(write_287, $76.1, $77.1)
  .loc 2 395 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $76.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $78.1:rax 
  # $79.1: @FILE = call(write_287, $78.1, ", [")
  .loc 2 395 9
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # ", ["
  call write_287
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $79.1:rax 
  # $80.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 395 91
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $79.1:rax $80.1:r15 
  # $81.1: @FILE = call(write_287, $79.1, $80.1)
  .loc 2 395 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $79.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $81.1:rax 
  # $82.1: @FILE = call(write_289, $81.1, ']')
  .loc 2 395 9
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $82.1:rax 
  # $83.1: @FILE = call(end_line_290, $82.1)
  .loc 2 395 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $82.1
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
.LABEL__generate_load_array_item_instruction_17__14:
  # return()
  jmp .LABEL__generate_load_array_item_instruction_17__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_17__15:
  # $46.1: Boolean = result_value_type_size.1 == 4
  .loc 2 396 16
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $46.1:rax 
  # jump($46.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_17__18
.LABEL__generate_load_array_item_instruction_17__16:
  # $66.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 397 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $46.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $66.1:rbx 
  # $67.1: @FILE = call(write_287, $66.1, "  mov ")
  .loc 2 397 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $67.1:rax 
  # $68.1: @String = load_struct_member(result_register.1, name_d)
  .loc 2 397 48
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $67.1:rax $68.1:r15 
  # $69.1: @FILE = call(write_287, $67.1, $68.1)
  .loc 2 397 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $69.1:rax 
  # $70.1: @FILE = call(write_287, $69.1, ", [")
  .loc 2 397 9
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # ", ["
  call write_287
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $70.1:rax 
  # $71.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 397 91
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $70.1:rax $71.1:r15 
  # $72.1: @FILE = call(write_287, $70.1, $71.1)
  .loc 2 397 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $72.1:rax 
  # $73.1: @FILE = call(write_289, $72.1, ']')
  .loc 2 397 9
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $73.1:rax 
  # $74.1: @FILE = call(end_line_290, $73.1)
  .loc 2 397 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $73.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_17__18:
  # $47.1: Boolean = result_value_type_size.1 == 2
  .loc 2 398 16
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $47.1:rax 
  # jump($47.1, block.19, block.21)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_17__21
.LABEL__generate_load_array_item_instruction_17__19:
  # $57.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 399 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $57.1:rbx 
  # $58.1: @FILE = call(write_287, $57.1, "  mov ")
  .loc 2 399 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $58.1:rax 
  # $59.1: @String = load_struct_member(result_register.1, name_w)
  .loc 2 399 48
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $58.1:rax $59.1:r15 
  # $60.1: @FILE = call(write_287, $58.1, $59.1)
  .loc 2 399 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $60.1:rax 
  # $61.1: @FILE = call(write_287, $60.1, ", [")
  .loc 2 399 9
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # ", ["
  call write_287
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $61.1:rax 
  # $62.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 399 91
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $61.1:rax $62.1:r15 
  # $63.1: @FILE = call(write_287, $61.1, $62.1)
  .loc 2 399 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $63.1:rax 
  # $64.1: @FILE = call(write_289, $63.1, ']')
  .loc 2 399 9
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $64.1:rax 
  # $65.1: @FILE = call(end_line_290, $64.1)
  .loc 2 399 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $64.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_17__21:
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 401 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $48.1:rbx 
  # $49.1: @FILE = call(write_287, $48.1, "  mov ")
  .loc 2 401 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $49.1:rax 
  # $50.1: @String = load_struct_member(result_register.1, name_b)
  .loc 2 401 48
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $49.1:rax $50.1:r15 
  # $51.1: @FILE = call(write_287, $49.1, $50.1)
  .loc 2 401 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $51.1:rax 
  # $52.1: @FILE = call(write_287, $51.1, ", [")
  .loc 2 401 9
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # ", ["
  call write_287
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $52.1:rax 
  # $53.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 401 91
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $52.1:rax $53.1:r15 
  # $54.1: @FILE = call(write_287, $52.1, $53.1)
  .loc 2 401 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $52.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $54.1:rax 
  # $55.1: @FILE = call(write_289, $54.1, ']')
  .loc 2 401 9
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $55.1:rax 
  # $56.1: @FILE = call(end_line_290, $55.1)
  .loc 2 401 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $55.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
.LABEL__generate_load_array_item_instruction_17__4:
  # index_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 386 27
  mov rdi, [rbp-16]
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:rax 
  # $11.1: @IR_Value = call(get_index_value_170, instruction.1)
  .loc 2 387 50
  mov rdi, [rbp-8]
  mov [rbp-48], rax
  call get_index_value_170
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $11.1:rax 
  # call(generate_load_value_30, self.1, index_register.1, $11.1)
  .loc 2 387 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-48]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # $12.1: Boolean = result_value_type_size.1 > 1
  .loc 2 388 13
  cmp QWORD PTR [rbp-32], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $12.1:rax 
  # jump($12.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_17__6
.LABEL__generate_load_array_item_instruction_17__5:
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 389 13
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $13.1:rbx 
  # $14.1: @FILE = call(write_287, $13.1, "  imul ")
  .loc 2 389 13
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_287
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $14.1:rax 
  # $15.1: @String = load_struct_member(index_register.1, name_q)
  .loc 2 389 53
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:rbx:[rbp-48] $14.1:rax $15.1:r15 
  # $16.1: @FILE = call(write_287, $14.1, $15.1)
  .loc 2 389 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $16.1:rax 
  # $17.1: @FILE = call(write_287, $16.1, ", ")
  .loc 2 389 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $17.1:rax 
  # $18.1: @FILE = call(write_286, $17.1, result_value_type_size.1)
  .loc 2 389 13
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_286
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $18.1:rax 
  # $19.1: @FILE = call(end_line_290, $18.1)
  .loc 2 389 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # jump(block.6)
.LABEL__generate_load_array_item_instruction_17__6:
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 391 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $20.1:rbx 
  # $21.1: @FILE = call(write_287, $20.1, "  add ")
  .loc 2 391 9
  mov rdi, rbx
  lea rsi, .LABEL__string_36[rip] # "  add "
  call write_287
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $21.1:rax 
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 391 48
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $21.1:rax $22.1:r15 
  # $23.1: @FILE = call(write_287, $21.1, $22.1)
  .loc 2 391 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $23.1:rax 
  # $24.1: @FILE = call(write_287, $23.1, ", ")
  .loc 2 391 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $24.1:rax 
  # $25.1: @String = load_struct_member(index_register.1, name_q)
  .loc 2 391 90
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:rbx:[rbp-48] $24.1:rax $25.1:r15 
  # $26.1: @FILE = call(write_287, $24.1, $25.1)
  .loc 2 391 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $26.1:rax 
  # $27.1: @FILE = call(end_line_290, $26.1)
  .loc 2 391 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # jump(block.3)
  jmp .LABEL__generate_load_array_item_instruction_17__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_register.1
  # [discarded value]: result_value_type_size.1
  # [discarded value]: index_value.1
  # [live values]: 
.LABEL__generate_load_array_item_instruction_17__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_array_item_instruction_17__stack_frame_size: .word 64

  .loc 2 405 1
  .text
generate_load_function_address_instruction_18:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_function_address_instruction_18__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_function_address_instruction_18__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Function_Address_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 406 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 407 5
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] result_register.1:rax $2.1:r15 
  # $3.1: @FILE = call(write_287, $2.1, "  lea ")
  .loc 2 407 5
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-24], rax
  call write_287
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  # $4.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 407 44
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] $3.1:rax $4.1:r15 
  # $5.1: @FILE = call(write_287, $3.1, $4.1)
  .loc 2 407 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, ", ")
  .loc 2 407 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  # $7.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 2 407 101
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] result_register.1:[rbp-24] $6.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_function_label_4, $6.1, $7.1)
  .loc 2 407 5
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $8.1:rax 
  # $9.1: @FILE = call(write_287, $8.1, "[rip]")
  .loc 2 407 5
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_287
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $9.1:rax 
  # $10.1: @FILE = call(end_line_290, $9.1)
  .loc 2 407 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 408 29
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] result_register.1:[rbp-24] $11.1:rbx 
  # $12.1: @MC_Value = call(map_variable_value_39, self.1, $11.1, result_register.1)
  .loc 2 408 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_39
  # [discarded value]: self.1
  # [discarded value]: result_register.1
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_load_function_address_instruction_18__end
  # [live values]: 
.LABEL__generate_load_function_address_instruction_18__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_function_address_instruction_18__stack_frame_size: .word 32

  .loc 2 411 1
  .text
generate_load_variable_instruction_19:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_instruction_19__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_instruction_19__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Variable = load_struct_member(instruction.1, variable)
  .loc 2 412 9
  mov rax, [rsi+57]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # IR_Function_Parameter.2: @Object_Type = load_variable(IR_Function_Parameter)
  lea rbx, IR_Function_Parameter[rip]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax IR_Function_Parameter.2:rbx 
  # $2.1: Boolean = call(is_293, $1.1, IR_Function_Parameter.2)
  .loc 2 412 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_293
  # [discarded value]: $1.1
  # [discarded value]: IR_Function_Parameter.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__4
.LABEL__generate_load_variable_instruction_19__2:
  # parameter.1: @IR_Function_Parameter = load_struct_member(instruction.1, variable)
  .loc 2 413 22
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter.1:rbx 
  # $47.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  .loc 2 414 28
  mov r15, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter.1:rbx $47.1:r15 
  # $48.1: @IR_Function = load_struct_member($47.1, function)
  .loc 2 414 28
  mov r14, [r15+16]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter.1:rbx $48.1:r14 
  # $49.1: @List = load_struct_member($48.1, parameters)
  .loc 2 414 28
  mov r15, [r14+32]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter.1:rbx $49.1:r15 
  # parameter_index.1: Int = call(index_of_275, $49.1, parameter.1)
  .loc 2 414 28
  mov rdi, r15
  mov rsi, rbx
  call index_of_275
  # [discarded value]: parameter.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:rax 
  # $51.1: Boolean = parameter_index.1 < 0
  .loc 2 415 13
  cmp rax, 0
  setl bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:rax $51.1:rbx 
  # jump($51.1, block.25, block.26)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__generate_load_variable_instruction_19__26
.LABEL__generate_load_variable_instruction_19__25:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 416 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__26:
  # $52.1: Boolean = parameter_index.1 == 0
  .loc 2 418 13
  cmp QWORD PTR [rbp-24], 0
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $52.1:rax 
  # jump($52.1, block.27, block.29)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__29
.LABEL__generate_load_variable_instruction_19__27:
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 419 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $74.1:rbx 
  # $75.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 419 63
  mov r15, [rbp-8]
  mov r14, [r15+57]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $74.1:rbx $75.1:r14 
  # $76.1: @MC_Value = call(map_variable_value_39, self.1, $74.1, $75.1)
  .loc 2 419 13
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $74.1
  # [discarded value]: $75.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_load_variable_instruction_19__3:
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__29:
  # $53.1: Boolean = parameter_index.1 == 1
  .loc 2 420 20
  cmp QWORD PTR [rbp-24], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $53.1:rax 
  # jump($53.1, block.30, block.32)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__32
.LABEL__generate_load_variable_instruction_19__30:
  # $71.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 421 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $71.1:rbx 
  # $72.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 421 63
  mov r15, [rbp-8]
  mov r14, [r15+49]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $71.1:rbx $72.1:r14 
  # $73.1: @MC_Value = call(map_variable_value_39, self.1, $71.1, $72.1)
  .loc 2 421 13
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $71.1
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__32:
  # $54.1: Boolean = parameter_index.1 == 2
  .loc 2 422 20
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $54.1:rax 
  # jump($54.1, block.33, block.35)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__35
.LABEL__generate_load_variable_instruction_19__33:
  # $68.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 423 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $68.1:rbx 
  # $69.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 423 63
  mov r15, [rbp-8]
  mov r14, [r15+33]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $68.1:rbx $69.1:r14 
  # $70.1: @MC_Value = call(map_variable_value_39, self.1, $68.1, $69.1)
  .loc 2 423 13
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__35:
  # $55.1: Boolean = parameter_index.1 == 3
  .loc 2 424 20
  cmp QWORD PTR [rbp-24], 3
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $55.1:rax 
  # jump($55.1, block.36, block.38)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__38
.LABEL__generate_load_variable_instruction_19__36:
  # $65.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 425 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $65.1:rbx 
  # $66.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 425 63
  mov r15, [rbp-8]
  mov r14, [r15+25]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $65.1:rbx $66.1:r14 
  # $67.1: @MC_Value = call(map_variable_value_39, self.1, $65.1, $66.1)
  .loc 2 425 13
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__38:
  # $56.1: Boolean = parameter_index.1 == 4
  .loc 2 426 20
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $56.1:rax 
  # jump($56.1, block.39, block.41)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__41
.LABEL__generate_load_variable_instruction_19__39:
  # $62.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 427 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $62.1:rbx 
  # $63.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 427 63
  mov r15, [rbp-8]
  mov r14, [r15+65]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $62.1:rbx $63.1:r14 
  # $64.1: @MC_Value = call(map_variable_value_39, self.1, $62.1, $63.1)
  .loc 2 427 13
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__41:
  # $57.1: Boolean = parameter_index.1 == 5
  .loc 2 428 20
  cmp QWORD PTR [rbp-24], 5
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $57.1:rax 
  # jump($57.1, block.42, block.44)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__44
.LABEL__generate_load_variable_instruction_19__42:
  # $59.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 429 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $59.1:rbx 
  # $60.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 429 63
  mov r15, [rbp-8]
  mov r14, [r15+73]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] parameter_index.1:[rbp-24] $59.1:rbx $60.1:r14 
  # $61.1: @MC_Value = call(map_variable_value_39, self.1, $59.1, $60.1)
  .loc 2 429 13
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_19__44:
  # $58.1: @String = call(clone_295, "Invalid state")
  .loc 2 431 24
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call clone_295
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $58.1:rax 
  # call(abort_33, self.1, $58.1)
  .loc 2 431 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [discarded value]: parameter_index.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
.LABEL__generate_load_variable_instruction_19__4:
  # $3.1: @IR_Variable = load_struct_member(instruction.1, variable)
  .loc 2 433 16
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $3.1:rbx 
  # IR_Global_Variable.3: @Object_Type = load_variable(IR_Global_Variable)
  lea r15, IR_Global_Variable[rip]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $3.1:rbx IR_Global_Variable.3:r15 
  # $4.1: Boolean = call(is_293, $3.1, IR_Global_Variable.3)
  .loc 2 433 16
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $3.1
  # [discarded value]: IR_Global_Variable.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.7)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__7
.LABEL__generate_load_variable_instruction_19__5:
  # ir_variable_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 434 30
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_variable_value.1:rbx 
  # mc_value.1: @MC_Value = call(get_value_40, self.1, ir_variable_value.1)
  .loc 2 435 21
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rbx
  call get_value_40
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:rax 
  # $12.1: Boolean = mc_value.1 == null
  .loc 2 436 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:rax $12.1:rbx 
  # jump($12.1, block.8, block.9)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__generate_load_variable_instruction_19__9
.LABEL__generate_load_variable_instruction_19__8:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 437 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] 
.LABEL__generate_load_variable_instruction_19__9:
  # address.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 439 20
  mov rax, [rbp-32]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:rax:[rbp-32] address.1:rbx 
  # $14.1: Boolean = address.1 != null
  .loc 2 440 13
  cmp rbx, 0
  setne r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:rax:[rbp-32] address.1:rbx $14.1:r15 
  # jump($14.1, block.10, block.11)
  test r15b, r15b
  mov [rbp-40], rbx
  jz .LABEL__generate_load_variable_instruction_19__11
.LABEL__generate_load_variable_instruction_19__10:
  # MC_Global_Variable_Address.2: @Object_Type = load_variable(MC_Global_Variable_Address)
  lea rax, MC_Global_Variable_Address[rip]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] MC_Global_Variable_Address.2:rax 
  # $15.1: Boolean = call(is_293, address.1, MC_Global_Variable_Address.2)
  .loc 2 441 17
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: MC_Global_Variable_Address.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $15.1:rax 
  # $16.1: Boolean = $15.1 == false
  .loc 2 441 17
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $16.1:rbx 
  # jump($16.1, block.12, block.13)
  test bl, bl
  jz .LABEL__generate_load_variable_instruction_19__13
.LABEL__generate_load_variable_instruction_19__12:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 442 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
.LABEL__generate_load_variable_instruction_19__13:
  # address.1: @MC_Global_Variable_Address = address.1
  .loc 2 444 24
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] address.1:rax 
  # $18.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  .loc 2 445 17
  mov rbx, [rax+8]
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $18.1:rbx 
  # $19.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  .loc 2 445 40
  mov rax, [rbp-24]
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:rax:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $18.1:rbx $19.1:r15 
  # $20.1: Boolean = $18.1 != $19.1
  .loc 2 445 17
  cmp rbx, r15
  setne r14b
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:rax:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $20.1:r14 
  # jump($20.1, block.14, block.15)
  test r14b, r14b
  jz .LABEL__generate_load_variable_instruction_19__15
.LABEL__generate_load_variable_instruction_19__14:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 446 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
.LABEL__generate_load_variable_instruction_19__15:
  # return()
  .loc 2 448 13
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
.LABEL__generate_load_variable_instruction_19__11:
  # ir_variable.1: @IR_Global_Variable = load_struct_member(instruction.1, variable)
  .loc 2 450 24
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rbx 
  # $23.1: Boolean = load_struct_member(ir_variable.1, is_external)
  .loc 2 451 13
  mov r15b, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rbx $23.1:r15 
  # jump($23.1, block.17, block.18)
  test r15b, r15b
  mov [rbp-48], rbx
  jz .LABEL__generate_load_variable_instruction_19__18
.LABEL__generate_load_variable_instruction_19__17:
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 453 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $24.1:rbx 
  # $25.1: @MC_Global_Variable_Address = new(MC_Global_Variable_Address)
  .loc 2 453 63
  mov [rbp-56], rbx
  mov rdi, 16
  call malloc
  lea rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $24.1:[rbp-56] $25.1:rax 
  # store_struct_member($25.1, ir_variable, ir_variable.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rbx:[rbp-48] $24.1:[rbp-56] $25.1:rax 
  # call(map_variable_value_38, self.1, $24.1, $25.1)
  .loc 2 453 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call map_variable_value_38
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # return()
  .loc 2 454 13
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
.LABEL__generate_load_variable_instruction_19__18:
  # $26.1: @IR_Type = load_struct_member(ir_variable.1, type)
  .loc 2 456 13
  mov rax, [rbp-48]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax:[rbp-48] $26.1:rbx 
  # IR_Pointer_Type.2: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax:[rbp-48] $26.1:rbx IR_Pointer_Type.2:r15 
  # $27.1: Boolean = call(is_293, $26.1, IR_Pointer_Type.2)
  .loc 2 456 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $26.1
  # [discarded value]: IR_Pointer_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $27.1:rax 
  # jump($27.1, block.20, block.21)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__21
.LABEL__generate_load_variable_instruction_19__20:
  # $29.1: @IR_Pointer_Type = load_struct_member(ir_variable.1, type)
  .loc 2 457 30
  mov rax, [rbp-48]
  mov rbx, [rax+16]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax:[rbp-48] $29.1:rbx 
  # pointed_type.1: @IR_Type = load_struct_member($29.1, pointed_type)
  .loc 2 457 29
  mov r15, [rbx+16]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax:[rbp-48] pointed_type.1:r15 
  # $31.1: @String = load_struct_member(pointed_type.1, name)
  .loc 2 458 17
  mov rbx, [r15+8]
  # [discarded value]: pointed_type.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax:[rbp-48] $31.1:rbx 
  # $32.1: Boolean = call(equals_296, $31.1, "Object_Type")
  .loc 2 458 17
  mov rdi, rbx
  lea rsi, .LABEL__string_62[rip] # "Object_Type"
  call equals_296
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $32.1:rax 
  # jump($32.1, block.22, block.21)
  test al, al
  jz .LABEL__generate_load_variable_instruction_19__21
.LABEL__generate_load_variable_instruction_19__22:
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 459 36
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:rax 
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 460 17
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:rax $34.1:r15 
  # $35.1: @FILE = call(write_287, $34.1, "  lea ")
  .loc 2 460 17
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-56], rax
  call write_287
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $35.1:rax 
  # $36.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 460 56
  mov rbx, [rbp-56]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:rbx:[rbp-56] $35.1:rax $36.1:r15 
  # $37.1: @FILE = call(write_287, $35.1, $36.1)
  .loc 2 460 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $37.1:rax 
  # $38.1: @FILE = call(write_287, $37.1, ", ")
  .loc 2 460 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $38.1:rax 
  # $39.1: @String = load_struct_member(ir_variable.1, name)
  .loc 2 460 98
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rbx:[rbp-48] result_register.1:[rbp-56] $38.1:rax $39.1:r15 
  # $40.1: @FILE = call(write_287, $38.1, $39.1)
  .loc 2 460 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $40.1:rax 
  # $41.1: @FILE = call(write_287, $40.1, "[rip]")
  .loc 2 460 17
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_287
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $41.1:rax 
  # $42.1: @FILE = call(end_line_290, $41.1)
  .loc 2 460 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] 
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 461 41
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $43.1:rbx 
  # $44.1: @MC_Value = call(map_variable_value_39, self.1, $43.1, result_register.1)
  .loc 2 461 17
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-56]
  call map_variable_value_39
  # [discarded value]: result_register.1
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # return()
  .loc 2 462 17
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
.LABEL__generate_load_variable_instruction_19__21:
  # call(abort_33, self.1, "Unsupported non-external variable")
  .loc 2 465 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_63[rip] # "Unsupported non-external variable"
  call abort_33
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [discarded value]: ir_variable.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] 
  # [discarded value]: ir_variable_value.1
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
.LABEL__generate_load_variable_instruction_19__7:
  # $5.1: @String = call(clone_295, "Unsupported variable type: ")
  .loc 2 467 20
  lea rdi, .LABEL__string_64[rip] # "Unsupported variable type: "
  call clone_295
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Variable = load_struct_member(instruction.1, variable)
  .loc 2 467 64
  mov rbx, [rbp-16]
  mov r15, [rbx+57]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $5.1:rax $6.1:r15 
  # $7.1: @Object_Type = load_struct_member($6.1, object_type)
  .loc 2 467 64
  mov r14, [r15+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $5.1:rax $7.1:r14 
  # $8.1: @String = load_struct_member($7.1, name)
  .loc 2 467 64
  mov r15, r14
  add r15, 8
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $5.1:rax $8.1:r15 
  # $9.1: @String = call(append_304, $5.1, $8.1)
  .loc 2 467 20
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $5.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $9.1:rax 
  # call(abort_33, self.1, $9.1)
  .loc 2 467 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_load_variable_instruction_19__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_instruction_19__stack_frame_size: .word 64

  .loc 2 471 1
  .text
generate_load_struct_member_instruction_20:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_struct_member_instruction_20__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_struct_member_instruction_20__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_173, instruction.1)
  .loc 2 472 32
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_173
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  # IR_Variable_Value.5: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax IR_Variable_Value.5:rbx 
  # $2.1: Boolean = call(is_293, ir_struct_pointer_value.1, IR_Variable_Value.5)
  .loc 2 474 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Variable_Value.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # $3.1: Boolean = $2.1 == true
  .loc 2 474 9
  cmp al, 1
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:rbx 
  # jump($3.1, block.2, block.4)
  test bl, bl
  jz .LABEL__generate_load_struct_member_instruction_20__4
.LABEL__generate_load_struct_member_instruction_20__2:
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  .loc 2 475 36
  mov rax, [rbp-24]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:rax 
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_40, self.1, ir_struct_pointer_value.1)
  .loc 2 476 36
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_40
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax 
  # $7.1: Boolean = mc_struct_pointer_value.1 == null
  .loc 2 477 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax $7.1:rbx 
  # jump($7.1, block.5, block.6)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_load_struct_member_instruction_20__6
.LABEL__generate_load_struct_member_instruction_20__5:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 478 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] 
.LABEL__generate_load_struct_member_instruction_20__6:
  # struct_pointer_register.3: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  .loc 2 480 35
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax:[rbp-40] struct_pointer_register.3:rbx 
  # $9.1: Boolean = struct_pointer_register.3 == null
  .loc 2 481 13
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax:[rbp-40] struct_pointer_register.3:rbx $9.1:r15 
  # jump($9.1, block.7, block.3)
  test r15b, r15b
  mov [rbp-48], rbx
  jz .LABEL__generate_load_struct_member_instruction_20__3
.LABEL__generate_load_struct_member_instruction_20__7:
  # struct_pointer_register.4: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 482 39
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:rax:[rbp-48] 
  # call(generate_load_value_30, self.1, struct_pointer_register.4, ir_struct_pointer_value.1)
  .loc 2 483 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-32]
  mov [rbp-48], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # $11.1: @MC_Value = call(map_variable_value_39, self.1, ir_struct_pointer_value.1, struct_pointer_register.4)
  .loc 2 484 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  mov rdx, [rbp-48]
  call map_variable_value_39
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # jump(block.3)
.LABEL__generate_load_struct_member_instruction_20__3:
  # struct_pointer_register.7: @MC_Register = phi(struct_pointer_register.2, struct_pointer_register.4, struct_pointer_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 492 24
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:rax struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # $13.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 493 29
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:rax $13.1:r15 struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # $14.1: @MC_Value = call(map_variable_value_39, self.1, $13.1, result_register.1)
  .loc 2 493 5
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  mov [rbp-56], rax
  call map_variable_value_39
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # $15.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 2 494 50
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] $15.1:rbx struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # struct_type_member_offset.1: Int = call(get_offset_31, self.1, $15.1)
  .loc 2 494 34
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_31
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:rax struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # $17.1: Boolean = load_struct_member(instruction.1, load_address)
  .loc 2 495 9
  mov rbx, [rbp-16]
  mov r15b, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:rax $17.1:r15 struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # jump($17.1, block.9, block.10)
  test r15b, r15b
  mov [rbp-64], rax
  jz .LABEL__generate_load_struct_member_instruction_20__10
.LABEL__generate_load_struct_member_instruction_20__9:
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 496 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $18.1:rbx 
  # $19.1: @FILE = call(write_287, $18.1, "  mov ")
  .loc 2 496 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $19.1:rax 
  # $20.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 496 48
  mov rbx, [rbp-56]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:rbx:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $19.1:rax $20.1:r15 
  # $21.1: @FILE = call(write_287, $19.1, $20.1)
  .loc 2 496 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $21.1:rax 
  # $22.1: @FILE = call(write_287, $21.1, ", ")
  .loc 2 496 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $22.1:rax 
  # $23.1: @String = load_struct_member(struct_pointer_register.7, name_q)
  .loc 2 496 90
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:rbx:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $22.1:rax $23.1:r15 
  # $24.1: @FILE = call(write_287, $22.1, $23.1)
  .loc 2 496 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $24.1:rax 
  # $25.1: @FILE = call(end_line_290, $24.1)
  .loc 2 496 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # $26.1: Boolean = struct_type_member_offset.1 > 0
  .loc 2 497 13
  cmp QWORD PTR [rbp-64], 0
  setg al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $26.1:rax 
  # jump($26.1, block.11, block.12)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_20__12
.LABEL__generate_load_struct_member_instruction_20__11:
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 498 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $27.1:rbx 
  # $28.1: @FILE = call(write_287, $27.1, "  add ")
  .loc 2 498 13
  mov rdi, rbx
  lea rsi, .LABEL__string_36[rip] # "  add "
  call write_287
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $28.1:rax 
  # $29.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 498 52
  mov rbx, [rbp-56]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:rbx:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $28.1:rax $29.1:r15 
  # $30.1: @FILE = call(write_287, $28.1, $29.1)
  .loc 2 498 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $30.1:rax 
  # $31.1: @FILE = call(write_287, $30.1, ", ")
  .loc 2 498 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $31.1:rax 
  # $32.1: @FILE = call(write_286, $31.1, struct_type_member_offset.1)
  .loc 2 498 13
  mov rdi, rax
  mov rsi, [rbp-64]
  call write_286
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $32.1:rax 
  # $33.1: @FILE = call(end_line_290, $32.1)
  .loc 2 498 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # jump(block.12)
.LABEL__generate_load_struct_member_instruction_20__12:
  # return()
  .loc 2 500 9
  jmp .LABEL__generate_load_struct_member_instruction_20__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
.LABEL__generate_load_struct_member_instruction_20__10:
  # $34.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 502 50
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $34.1:rbx 
  # $35.1: @IR_Type = load_struct_member($34.1, type)
  .loc 2 502 50
  mov r15, [rbx+8]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] $35.1:r15 
  # result_value_type_size.1: Int = call(get_type_size_52, self.1, $35.1)
  .loc 2 502 31
  mov rdi, [rbp-8]
  mov rsi, r15
  call get_type_size_52
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:rax 
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 503 5
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:rax $37.1:r15 
  # $38.1: @FILE = call(write_287, $37.1, "  mov ")
  .loc 2 503 5
  mov rdi, r15
  lea rsi, .LABEL__string_58[rip] # "  mov "
  mov [rbp-72], rax
  call write_287
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # $39.1: Boolean = result_value_type_size.1 == 8
  .loc 2 504 9
  cmp QWORD PTR [rbp-72], 8
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $39.1:rax 
  # jump($39.1, block.14, block.16)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_20__16
.LABEL__generate_load_struct_member_instruction_20__14:
  # $52.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 505 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $39.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $52.1:rbx 
  # $53.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 505 32
  mov r15, [rbp-56]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:r15:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $52.1:rbx $53.1:r14 
  # $54.1: @FILE = call(write_287, $52.1, $53.1)
  .loc 2 505 9
  mov rdi, rbx
  mov rsi, r14
  call write_287
  # [discarded value]: $52.1
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # jump(block.15)
.LABEL__generate_load_struct_member_instruction_20__15:
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 515 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $55.1:rbx 
  # $56.1: @FILE = call(write_287, $55.1, ", ")
  .loc 2 515 5
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $56.1:rax 
  # $57.1: @FILE = call(write_289, $56.1, '[')
  .loc 2 515 5
  mov rdi, rax
  mov sil, 91
  call write_289
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $57.1:rax 
  # $58.1: @String = load_struct_member(struct_pointer_register.7, name_q)
  .loc 2 515 51
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:rbx:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $57.1:rax $58.1:r15 
  # $59.1: @FILE = call(write_287, $57.1, $58.1)
  .loc 2 515 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $57.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $59.1:rax 
  # $60.1: @FILE = call(write_289, $59.1, '+')
  .loc 2 515 5
  mov rdi, rax
  mov sil, 43
  call write_289
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $60.1:rax 
  # $61.1: @FILE = call(write_286, $60.1, struct_type_member_offset.1)
  .loc 2 515 5
  mov rdi, rax
  mov rsi, [rbp-64]
  call write_286
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $61.1:rax 
  # $62.1: @FILE = call(write_289, $61.1, ']')
  .loc 2 515 5
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $62.1:rax 
  # $63.1: @FILE = call(end_line_290, $62.1)
  .loc 2 515 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # store_struct_member(struct_pointer_register.7, is_reserved, false)
  .loc 2 516 5
  mov rax, [rbp-48]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:rax:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # return()
  jmp .LABEL__generate_load_struct_member_instruction_20__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
.LABEL__generate_load_struct_member_instruction_20__16:
  # $40.1: Boolean = result_value_type_size.1 == 4
  .loc 2 506 16
  cmp QWORD PTR [rbp-72], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $40.1:rax 
  # jump($40.1, block.17, block.19)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_20__19
.LABEL__generate_load_struct_member_instruction_20__17:
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 507 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $40.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $49.1:rbx 
  # $50.1: @String = load_struct_member(result_register.1, name_d)
  .loc 2 507 32
  mov r15, [rbp-56]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:r15:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $49.1:rbx $50.1:r14 
  # $51.1: @FILE = call(write_287, $49.1, $50.1)
  .loc 2 507 9
  mov rdi, rbx
  mov rsi, r14
  call write_287
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # jump(block.15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
.LABEL__generate_load_struct_member_instruction_20__19:
  # $41.1: Boolean = result_value_type_size.1 == 2
  .loc 2 508 16
  cmp QWORD PTR [rbp-72], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $41.1:rax 
  # jump($41.1, block.20, block.22)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_20__22
.LABEL__generate_load_struct_member_instruction_20__20:
  # $46.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 509 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $41.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $46.1:rbx 
  # $47.1: @String = load_struct_member(result_register.1, name_w)
  .loc 2 509 32
  mov r15, [rbp-56]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:r15:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $46.1:rbx $47.1:r14 
  # $48.1: @FILE = call(write_287, $46.1, $47.1)
  .loc 2 509 9
  mov rdi, rbx
  mov rsi, r14
  call write_287
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # jump(block.15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
.LABEL__generate_load_struct_member_instruction_20__22:
  # $42.1: Boolean = result_value_type_size.1 == 1
  .loc 2 510 16
  cmp QWORD PTR [rbp-72], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $42.1:rax 
  # jump($42.1, block.23, block.25)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_20__25
.LABEL__generate_load_struct_member_instruction_20__23:
  # $43.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 511 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $42.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $43.1:rbx 
  # $44.1: @String = load_struct_member(result_register.1, name_b)
  .loc 2 511 32
  mov r15, [rbp-56]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:r15:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] $43.1:rbx $44.1:r14 
  # $45.1: @FILE = call(write_287, $43.1, $44.1)
  .loc 2 511 9
  mov rdi, rbx
  mov rsi, r14
  call write_287
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # jump(block.15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
.LABEL__generate_load_struct_member_instruction_20__25:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 513 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] result_value_type_size.1:[rbp-72] 
  # [discarded value]: result_value_type_size.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.7:[rbp-48] result_register.1:[rbp-56] struct_type_member_offset.1:[rbp-64] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # [discarded value]: struct_pointer_register.7
  # [discarded value]: result_register.1
  # [discarded value]: struct_type_member_offset.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] struct_pointer_register.4:[rbp-48] 
  # [discarded value]: struct_pointer_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.3:[rbp-48] 
  # [discarded value]: struct_pointer_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: mc_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
.LABEL__generate_load_struct_member_instruction_20__4:
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 487 35
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] struct_pointer_register.2:rax:[rbp-48] 
  # store_struct_member(struct_pointer_register.2, is_reserved, true)
  .loc 2 488 9
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] struct_pointer_register.2:rax:[rbp-48] 
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  .loc 2 489 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-48], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] struct_pointer_register.2:[rbp-48] 
  # jump(block.3)
  jmp .LABEL__generate_load_struct_member_instruction_20__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] struct_pointer_register.2:[rbp-48] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: 
.LABEL__generate_load_struct_member_instruction_20__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_struct_member_instruction_20__stack_frame_size: .word 80

  .loc 2 519 1
  .text
generate_modulo_instruction_21:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_modulo_instruction_21__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_modulo_instruction_21__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Modulo_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 520 27
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # call(release_register_44, self.1, $1.1)
  .loc 2 520 5
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_44
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 521 30
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  # $3.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 2 521 49
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_189
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  .loc 2 521 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 522 5
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  # store_struct_member($4.1, is_reserved, true)
  .loc 2 522 5
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 523 27
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  # call(release_register_44, self.1, $5.1)
  .loc 2 523 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 524 5
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  # store_struct_member($6.1, is_reserved, true)
  .loc 2 524 5
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 525 5
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  # $8.1: @FILE = call(write_287, $7.1, "  cqto")
  .loc 2 525 5
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  cqto"
  call write_287
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(end_line_290, $8.1)
  .loc 2 525 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # right_value.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 2 526 20
  mov rdi, [rbp-8]
  call get_right_value_190
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  # IR_Constant_Value.4: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax IR_Constant_Value.4:rbx 
  # $11.1: Boolean = call(is_293, right_value.1, IR_Constant_Value.4)
  .loc 2 527 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Constant_Value.4
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_modulo_instruction_21__4
.LABEL__generate_modulo_instruction_21__2:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 528 21
  mov rdi, [rbp-16]
  call find_unused_register_36
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # store_struct_member(register.1, is_reserved, true)
  .loc 2 529 9
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  .loc 2 530 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 531 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $17.1:rbx 
  # $18.1: @FILE = call(write_287, $17.1, "  idiv ")
  .loc 2 531 9
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  idiv "
  call write_287
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $18.1:rax 
  # $19.1: @String = load_struct_member(register.1, name_q)
  .loc 2 531 49
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rbx:[rbp-32] $18.1:rax $19.1:r15 
  # $20.1: @FILE = call(write_287, $18.1, $19.1)
  .loc 2 531 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $20.1:rax 
  # $21.1: @FILE = call(end_line_290, $20.1)
  .loc 2 531 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # store_struct_member(register.1, is_reserved, false)
  .loc 2 532 9
  mov rax, [rbp-32]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_modulo_instruction_21__3:
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 536 5
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $22.1:rbx 
  # store_struct_member($22.1, is_reserved, false)
  .loc 2 536 5
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 537 5
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $23.1:rbx 
  # store_struct_member($23.1, is_reserved, false)
  .loc 2 537 5
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 538 29
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $24.1:r15 
  # $25.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 538 55
  mov r14, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $24.1:r15 $25.1:r14 
  # $26.1: @MC_Value = call(map_variable_value_39, self.1, $24.1, $25.1)
  .loc 2 538 5
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # return()
  jmp .LABEL__generate_modulo_instruction_21__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
.LABEL__generate_modulo_instruction_21__4:
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 534 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $12.1:rbx 
  # $13.1: @FILE = call(write_287, $12.1, "  idiv ")
  .loc 2 534 9
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  idiv "
  call write_287
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_operand_32, $13.1, self.1, right_value.1)
  .loc 2 534 9
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_32
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(end_line_290, $14.1)
  .loc 2 534 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_modulo_instruction_21__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__generate_modulo_instruction_21__end:
  mov rsp, rbp
  pop rbp
  ret

generate_modulo_instruction_21__stack_frame_size: .word 32

  .loc 2 541 1
  .text
generate_multiply_instruction_22:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_multiply_instruction_22__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_multiply_instruction_22__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Multiply_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 542 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 2 543 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_189
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  .loc 2 543 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 544 29
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  # $4.1: @MC_Value = call(map_variable_value_39, self.1, $3.1, result_register.1)
  .loc 2 544 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_39
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 545 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  # $6.1: @FILE = call(write_287, $5.1, "  imul ")
  .loc 2 545 5
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_287
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 545 45
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_287, $6.1, $7.1)
  .loc 2 545 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write_287, $8.1, ", ")
  .loc 2 545 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 2 545 101
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_operand_32, $9.1, self.1, $10.1)
  .loc 2 545 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_32
  # [discarded value]: self.1
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # $12.1: @FILE = call(end_line_290, $11.1)
  .loc 2 545 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_multiply_instruction_22__end
  # [live values]: 
.LABEL__generate_multiply_instruction_22__end:
  mov rsp, rbp
  pop rbp
  ret

generate_multiply_instruction_22__stack_frame_size: .word 32

  .loc 2 548 1
  .text
generate_new_instruction_23:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_new_instruction_23__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_new_instruction_23__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_New_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # call(release_all_registers_43, self.1)
  .loc 2 549 5
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_43
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 550 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $1.1:rbx 
  # $2.1: @FILE = call(write_287, $1.1, "  mov ")
  .loc 2 550 5
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 550 44
  mov rbx, [rbp-16]
  mov r15, [rbx+57]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $3.1:r15 
  # $4.1: @String = load_struct_member($3.1, name_q)
  .loc 2 550 44
  mov r14, [r15+8]
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $4.1:r14 
  # $5.1: @FILE = call(write_287, $2.1, $4.1)
  .loc 2 550 5
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $2.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, ", ")
  .loc 2 550 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  # $7.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 2 550 107
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $6.1:rax $7.1:r15 
  # $8.1: Int = call(get_type_size_52, self.1, $7.1)
  .loc 2 550 88
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call get_type_size_52
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:[rbp-24] $8.1:rax 
  # $9.1: @FILE = call(write_286, $6.1, $8.1)
  .loc 2 550 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call write_286
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @FILE = call(end_line_290, $9.1)
  .loc 2 550 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $11.1: @IR_Value = call(get_size_value_176, instruction.1)
  .loc 2 551 9
  mov rdi, [rbp-8]
  call get_size_value_176
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:rax 
  # $12.1: Boolean = $11.1 != null
  .loc 2 551 9
  cmp rax, 0
  setne bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rbx 
  # jump($12.1, block.2, block.3)
  test bl, bl
  jz .LABEL__generate_new_instruction_23__3
.LABEL__generate_new_instruction_23__2:
  # call(abort_33, self.1, "TODO: compute array size")
  .loc 2 552 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_65[rip] # "TODO: compute array size"
  call abort_33
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_new_instruction_23__3:
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 554 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $13.1:rbx 
  # $14.1: @FILE = call(write_287, $13.1, "  call ")
  .loc 2 554 5
  mov rdi, rbx
  lea rsi, .LABEL__string_38[rip] # "  call "
  call write_287
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $14.1:rax 
  # $15.1: @FILE = call(write_287, $14.1, "malloc")
  .loc 2 554 5
  mov rdi, rax
  lea rsi, .LABEL__string_66[rip] # "malloc"
  call write_287
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $15.1:rax 
  # $16.1: @FILE = call(end_line_290, $15.1)
  .loc 2 554 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $17.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 555 29
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $17.1:rbx 
  # $18.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 555 55
  mov r15, [rbp-16]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] $17.1:rbx $18.1:r14 
  # $19.1: @MC_Value = call(map_variable_value_39, self.1, $17.1, $18.1)
  .loc 2 555 5
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_39
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $20.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 2 557 9
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $20.1:rbx 
  # IR_Struct_Type.2: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $20.1:rbx IR_Struct_Type.2:r15 
  # $22.1: Boolean = call(is_293, $20.1, IR_Struct_Type.2)
  .loc 2 557 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $20.1
  # [discarded value]: IR_Struct_Type.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:rax 
  # jump($22.1, block.4, block.5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_new_instruction_23__5
.LABEL__generate_new_instruction_23__4:
  # $24.1: @IR_Struct_Type = load_struct_member(instruction.1, type)
  .loc 2 557 49
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $22.1:[rbp-17] $24.1:rbx 
  # $22.2: Boolean = call(is_object_type_149, $24.1)
  .loc 2 557 48
  mov rdi, rbx
  call is_object_type_149
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:rax:[rbp-17] 
  # jump(block.5)
  mov [rbp-17], al
.LABEL__generate_new_instruction_23__5:
  # $22.3: Boolean = phi($22.1, $22.2)
  .loc 2 557 9
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] $22.3:[rbp-17] 
  # jump($22.3, block.6, block.7)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__generate_new_instruction_23__7
.LABEL__generate_new_instruction_23__6:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 558 21
  mov rdi, [rbp-16]
  call find_unused_register_36
  # [discarded value]: $22.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:rax 
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 559 9
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:rax $27.1:r15 
  # $28.1: @FILE = call(write_287, $27.1, "  lea ")
  .loc 2 559 9
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-25], rax
  call write_287
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $28.1:rax 
  # $29.1: @String = load_struct_member(register.1, name_q)
  .loc 2 559 48
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:rbx:[rbp-25] $28.1:rax $29.1:r15 
  # $30.1: @FILE = call(write_287, $28.1, $29.1)
  .loc 2 559 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $30.1:rax 
  # $31.1: @FILE = call(write_287, $30.1, ", ")
  .loc 2 559 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $31.1:rax 
  # $32.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 2 559 94
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $31.1:rax $32.1:r15 
  # $33.1: @FILE = call(write_type_label_57, $31.1, $32.1)
  .loc 2 559 9
  mov rdi, rax
  mov rsi, r15
  call write_type_label_57
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $33.1:rax 
  # $34.1: @FILE = call(write_287, $33.1, "[rip]")
  .loc 2 559 9
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_287
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $34.1:rax 
  # $35.1: @FILE = call(end_line_290, $34.1)
  .loc 2 559 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] 
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 560 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $36.1:rbx 
  # $37.1: @FILE = call(write_287, $36.1, "  mov ")
  .loc 2 560 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $37.1:rax 
  # $38.1: @FILE = call(write_289, $37.1, '[')
  .loc 2 560 9
  mov rdi, rax
  mov sil, 91
  call write_289
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $38.1:rax 
  # $39.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 560 59
  mov rbx, [rbp-16]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $38.1:rax $39.1:r15 
  # $40.1: @String = load_struct_member($39.1, name_q)
  .loc 2 560 59
  mov r14, [r15+8]
  # [discarded value]: $39.1
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $38.1:rax $40.1:r14 
  # $41.1: @FILE = call(write_287, $38.1, $40.1)
  .loc 2 560 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $38.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $41.1:rax 
  # $42.1: @FILE = call(write_289, $41.1, ']')
  .loc 2 560 9
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $42.1:rax 
  # $43.1: @FILE = call(write_287, $42.1, ", ")
  .loc 2 560 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $43.1:rax 
  # $44.1: @String = load_struct_member(register.1, name_q)
  .loc 2 560 114
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] $43.1:rax $44.1:r15 
  # $45.1: @FILE = call(write_287, $43.1, $44.1)
  .loc 2 560 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] $45.1:rax 
  # $46.1: @FILE = call(end_line_290, $45.1)
  .loc 2 560 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # jump(block.7)
.LABEL__generate_new_instruction_23__7:
  # return()
  jmp .LABEL__generate_new_instruction_23__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [discarded value]: $22.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_new_instruction_23__end:
  mov rsp, rbp
  pop rbp
  ret

generate_new_instruction_23__stack_frame_size: .word 32

  .loc 2 564 1
  .text
generate_phi_instruction_24:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_phi_instruction_24__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_phi_instruction_24__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Phi_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 565 24
  mov rax, [rsi+16]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # result_variable.1: @IR_Variable = load_struct_member($1.1, variable)
  .loc 2 565 24
  mov rbx, [rax+24]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx 
  # $3.1: @List = load_struct_member(instruction.1, values)
  .loc 2 566 31
  mov rax, [rsi+57]
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx $3.1:rax 
  # instruction_value_item.1: @List_Item = load_struct_member($3.1, first_item)
  .loc 2 566 31
  mov r15, [rax+0]
  # [discarded value]: $3.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx instruction_value_item.1:r15 
  # jump(block.2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
.LABEL__generate_phi_instruction_24__2:
  # instruction_value_item.2: @List_Item = phi(instruction_value_item.1, instruction_value_item.5)
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
  # $5.1: Boolean = instruction_value_item.2 != null
  .loc 2 567 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_phi_instruction_24__4
.LABEL__generate_phi_instruction_24__3:
  # instruction_value.1: @IR_Variable_Value = load_struct_member(instruction_value_item.2, data)
  .loc 2 568 30
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:rax:[rbp-32] instruction_value.1:rbx 
  # $8.1: @IR_Variable = load_struct_member(instruction_value.1, variable)
  .loc 2 569 32
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:rax:[rbp-32] instruction_value.1:rbx $8.1:r15 
  # $9.1: Boolean = result_variable.1 != $8.1
  .loc 2 569 13
  cmp QWORD PTR [rbp-8], r15
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:rax:[rbp-32] instruction_value.1:rbx $9.1:r14 
  # jump($9.1, block.5, block.6)
  test r14b, r14b
  mov [rbp-40], rbx
  jz .LABEL__generate_phi_instruction_24__6
.LABEL__generate_phi_instruction_24__5:
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 570 32
  mov rdi, [rbp-24]
  call find_unused_register_36
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] result_register.1:rax 
  # call(generate_load_value_30, self.1, result_register.1, instruction_value.1)
  .loc 2 571 13
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-40]
  mov [rbp-48], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] result_register.1:[rbp-48] 
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 572 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] instruction.1:rax:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] result_register.1:[rbp-48] $11.1:rbx 
  # $12.1: @MC_Value = call(map_variable_value_39, self.1, $11.1, result_register.1)
  .loc 2 572 13
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov rdx, [rbp-48]
  call map_variable_value_39
  # [discarded value]: result_register.1
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
  # return()
  .loc 2 573 13
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
.LABEL__generate_phi_instruction_24__6:
  # instruction_value_item.5: @List_Item = load_struct_member(instruction_value_item.2, next_item)
  .loc 2 575 34
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] instruction_value_item.5:rbx:[rbp-32] 
  # jump(block.2)
  mov [rbp-32], rbx
  jmp .LABEL__generate_phi_instruction_24__2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] instruction_value_item.5:[rbp-32] 
  # [discarded value]: instruction_value_item.5
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
  # [discarded value]: instruction_value.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
.LABEL__generate_phi_instruction_24__4:
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
  # [discarded value]: instruction_value_item.2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_variable.1
  # [discarded value]: instruction_value_item.1
  # [live values]: 
.LABEL__generate_phi_instruction_24__end:
  mov rsp, rbp
  pop rbp
  ret

generate_phi_instruction_24__stack_frame_size: .word 48

  .loc 2 579 1
  .text
generate_return_instruction_25:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_return_instruction_25__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_return_instruction_25__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Return_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # return_value.1: @IR_Value = call(get_return_value_178, instruction.1)
  .loc 2 580 21
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_return_value_178
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax 
  # $2.1: Boolean = return_value.1 != null
  .loc 2 581 9
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__generate_return_instruction_25__3
.LABEL__generate_return_instruction_25__2:
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 582 34
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $3.1:rbx 
  # call(generate_load_value_30, self.1, $3.1, return_value.1)
  .loc 2 582 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call generate_load_value_30
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_return_instruction_25__3:
  # call(release_all_registers_43, self.1)
  .loc 2 584 5
  mov rdi, [rbp-8]
  call release_all_registers_43
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 585 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $4.1:rbx 
  # $5.1: @FILE = call(write_287, $4.1, "  jmp ")
  .loc 2 585 5
  mov rdi, rbx
  lea rsi, .LABEL__string_55[rip] # "  jmp "
  call write_287
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $5.1:rax 
  # $6.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  .loc 2 585 63
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $5.1:rax $6.1:r15 
  # $7.1: @IR_Function = load_struct_member($6.1, function)
  .loc 2 585 63
  mov r14, [r15+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $5.1:rax $7.1:r14 
  # $8.1: @FILE = call(write_function_end_label_5, $5.1, $7.1)
  .loc 2 585 5
  mov rdi, rax
  mov rsi, r14
  call write_function_end_label_5
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $8.1:rax 
  # $9.1: @FILE = call(end_line_290, $8.1)
  .loc 2 585 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # return()
  jmp .LABEL__generate_return_instruction_25__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: return_value.1
  # [live values]: 
.LABEL__generate_return_instruction_25__end:
  mov rsp, rbp
  pop rbp
  ret

generate_return_instruction_25__stack_frame_size: .word 32

  .loc 2 588 1
  .text
generate_set_instruction_26:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_set_instruction_26__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_set_instruction_26__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Set_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # ir_value.1: @IR_Value = call(get_value_180, instruction.1)
  .loc 2 589 17
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_180
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  # IR_Undefined_Value.2: @Object_Type = load_variable(IR_Undefined_Value)
  lea rbx, IR_Undefined_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax IR_Undefined_Value.2:rbx 
  # $2.1: Boolean = call(is_293, ir_value.1, IR_Undefined_Value.2)
  .loc 2 590 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Undefined_Value.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__generate_set_instruction_26__3
.LABEL__generate_set_instruction_26__2:
  # $3.1: @String = call(clone_295, "Looks like ")
  .loc 2 591 20
  lea rdi, .LABEL__string_67[rip] # "Looks like "
  call clone_295
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $3.1:rax 
  # $4.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 591 48
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $3.1:rax $4.1:r15 
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  .loc 2 591 48
  mov r14, [r15+24]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $3.1:rax $5.1:r14 
  # $6.1: @String = load_struct_member($5.1, name)
  .loc 2 591 48
  mov r15, [r14+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $3.1:rax $6.1:r15 
  # $7.1: @String = call(append_304, $3.1, $6.1)
  .loc 2 591 20
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $3.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $7.1:rax 
  # $8.1: @String = call(append_304, $7.1, " is not properly initialized")
  .loc 2 591 20
  mov rdi, rax
  lea rsi, .LABEL__string_68[rip] # " is not properly initialized"
  call append_304
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $8.1:rax 
  # call(abort_33, self.1, $8.1)
  .loc 2 591 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
.LABEL__generate_set_instruction_26__3:
  # IR_Variable_Value.6: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] IR_Variable_Value.6:rax 
  # $9.1: Boolean = call(is_293, ir_value.1, IR_Variable_Value.6)
  .loc 2 594 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.6
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $9.1:rax 
  # jump($9.1, block.4, block.6)
  test al, al
  jz .LABEL__generate_set_instruction_26__6
.LABEL__generate_set_instruction_26__4:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 2 595 21
  mov rax, [rbp-24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value_40, self.1, ir_value.1)
  .loc 2 596 21
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_40
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax 
  # result_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 597 27
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:rbx 
  # $14.1: Boolean = result_register.3 != null
  .loc 2 598 13
  cmp rbx, 0
  setne al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:rbx $14.1:rax 
  # jump($14.1, block.7, block.9)
  test al, al
  mov [rbp-40], rbx
  jz .LABEL__generate_set_instruction_26__9
.LABEL__generate_set_instruction_26__7:
  # call(release_register_44, self.1, result_register.3)
  .loc 2 599 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  call release_register_44
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] 
  # jump(block.5)
.LABEL__generate_set_instruction_26__5:
  # result_register.6: @MC_Register = phi(result_register.2, result_register.4, result_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] result_register.6:[rbp-40] 
  # $16.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 608 29
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] result_register.6:[rbp-40] $16.1:rbx 
  # $17.1: @MC_Value = call(map_variable_value_39, self.1, $16.1, result_register.6)
  .loc 2 608 5
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-40]
  call map_variable_value_39
  # [discarded value]: result_register.6
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] 
  # return()
  jmp .LABEL__generate_set_instruction_26__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] 
.LABEL__generate_set_instruction_26__9:
  # result_register.4: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 601 31
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] result_register.4:rax:[rbp-40] 
  # call(generate_load_value_30, self.1, result_register.4, ir_value.1)
  .loc 2 602 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-32]
  mov [rbp-40], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] result_register.4:[rbp-40] 
  # jump(block.5)
  jmp .LABEL__generate_set_instruction_26__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] result_register.4:[rbp-40] 
  # [discarded value]: result_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] result_register.3:[rbp-40] 
  # [discarded value]: ir_value.1
  # [discarded value]: result_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
.LABEL__generate_set_instruction_26__6:
  # result_register.2: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 605 27
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.2:rax:[rbp-40] 
  # call(generate_load_value_30, self.1, result_register.2, ir_value.1)
  .loc 2 606 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-40], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.2:[rbp-40] 
  # jump(block.5)
  jmp .LABEL__generate_set_instruction_26__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.2:[rbp-40] 
  # [discarded value]: result_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: ir_value.1
  # [live values]: 
.LABEL__generate_set_instruction_26__end:
  mov rsp, rbp
  pop rbp
  ret

generate_set_instruction_26__stack_frame_size: .word 48

  .loc 2 611 1
  .text
generate_store_array_item_instruction_27:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_array_item_instruction_27__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_array_item_instruction_27__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # address_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 612 25
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  # store_struct_member(address_register.1, is_reserved, true)
  .loc 2 613 5
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  # $2.1: @IR_Value = call(get_array_value_182, instruction.1)
  .loc 2 614 48
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_182
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value_30, self.1, address_register.1, $2.1)
  .loc 2 614 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] 
  # ir_value.1: @IR_Value = call(get_value_184, instruction.1)
  .loc 2 616 17
  mov rdi, [rbp-8]
  call get_value_184
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax 
  # $4.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 617 46
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax $4.1:rbx 
  # ir_value_type_size.1: Int = call(get_type_size_52, self.1, $4.1)
  .loc 2 617 27
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call get_type_size_52
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:rax 
  # index_value.1: @IR_Value = call(get_index_value_183, instruction.1)
  .loc 2 619 20
  mov rdi, [rbp-8]
  mov [rbp-40], rax
  call get_index_value_183
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax 
  # IR_Constant_Value.5: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax IR_Constant_Value.5:rbx 
  # $7.1: Boolean = call(is_293, index_value.1, IR_Constant_Value.5)
  .loc 2 620 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_293
  # [discarded value]: IR_Constant_Value.5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:rax 
  # jump($7.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__4
.LABEL__generate_store_array_item_instruction_27__2:
  # index_value.1: @IR_Constant_Value = index_value.1
  .loc 2 621 24
  mov rax, [rbp-48]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax 
  # $27.1: @Literal_Token = load_struct_member(index_value.1, literal)
  .loc 2 622 13
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax $27.1:rbx 
  # Integer_Token.3: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax $27.1:rbx Integer_Token.3:r15 
  # $28.1: Boolean = call(is_293, $27.1, Integer_Token.3)
  .loc 2 622 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-56], rax
  call is_293
  # [discarded value]: $27.1
  # [discarded value]: Integer_Token.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $28.1:rax 
  # $29.1: Boolean = $28.1 == false
  .loc 2 622 13
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $29.1:rbx 
  # jump($29.1, block.7, block.8)
  test bl, bl
  jz .LABEL__generate_store_array_item_instruction_27__8
.LABEL__generate_store_array_item_instruction_27__7:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 623 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_store_array_item_instruction_27__8:
  # $31.1: @Integer_Token = load_struct_member(index_value.1, literal)
  .loc 2 625 25
  mov rax, [rbp-56]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax:[rbp-56] $31.1:rbx 
  # index_value.1: Int = load_struct_member($31.1, value)
  .loc 2 625 24
  mov r15, [rbx+32]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax:[rbp-56] index_value.1:r15 
  # $33.1: Boolean = index_value.1 != 0
  .loc 2 626 13
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax:[rbp-56] index_value.1:r15 $33.1:rbx 
  # jump($33.1, block.9, block.3)
  test bl, bl
  mov [rbp-64], r15
  jz .LABEL__generate_store_array_item_instruction_27__3
.LABEL__generate_store_array_item_instruction_27__9:
  # $34.1: Boolean = index_value.1 < 0
  .loc 2 627 17
  cmp QWORD PTR [rbp-64], 0
  setl al
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $34.1:rax 
  # jump($34.1, block.11, block.12)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__12
.LABEL__generate_store_array_item_instruction_27__11:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 628 17
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
.LABEL__generate_store_array_item_instruction_27__12:
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 630 13
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $35.1:rbx 
  # $36.1: @FILE = call(write_287, $35.1, "  add ")
  .loc 2 630 13
  mov rdi, rbx
  lea rsi, .LABEL__string_36[rip] # "  add "
  call write_287
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $36.1:rax 
  # $37.1: @String = load_struct_member(address_register.1, name_q)
  .loc 2 630 52
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $36.1:rax $37.1:r15 
  # $38.1: @FILE = call(write_287, $36.1, $37.1)
  .loc 2 630 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $38.1:rax 
  # $39.1: @FILE = call(write_287, $38.1, ", ")
  .loc 2 630 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $39.1:rax 
  # $40.1: Int = index_value.1 * ir_value_type_size.1
  .loc 2 630 95
  mov rbx, [rbp-64]
  imul rbx, QWORD PTR [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $39.1:rax $40.1:rbx 
  # $41.1: @FILE = call(write_286, $39.1, $40.1)
  .loc 2 630 13
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $41.1:rax 
  # $42.1: @FILE = call(end_line_290, $41.1)
  .loc 2 630 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # jump(block.3)
.LABEL__generate_store_array_item_instruction_27__3:
  # IR_Variable_Value.7: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] IR_Variable_Value.7:rax index_value.1:[rbp-64] 
  # $43.1: Boolean = call(is_293, ir_value.1, IR_Variable_Value.7)
  .loc 2 643 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $43.1:rax index_value.1:[rbp-64] 
  # jump($43.1, block.13, block.14)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__13:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 2 644 21
  mov rax, [rbp-32]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value_40, self.1, ir_value.1)
  .loc 2 645 21
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-72], rax
  call get_value_40
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] mc_value.1:rax 
  # $46.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 646 13
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $46.1:rbx 
  # $47.1: Boolean = $46.1 == null
  .loc 2 646 13
  cmp rbx, 0
  sete al
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $47.1:rax 
  # jump($47.1, block.15, block.14)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__15:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 647 25
  mov rdi, [rbp-16]
  call find_unused_register_36
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] register.1:rax 
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  .loc 2 648 13
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-72]
  mov [rbp-80], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] register.1:[rbp-80] 
  # $49.1: @MC_Value = call(map_variable_value_39, self.1, ir_value.1, register.1)
  .loc 2 649 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-72]
  mov rdx, [rbp-80]
  call map_variable_value_39
  # [discarded value]: register.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.14)
.LABEL__generate_store_array_item_instruction_27__14:
  # $50.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 653 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $50.1:rbx 
  # $51.1: @FILE = call(write_287, $50.1, "  mov ")
  .loc 2 653 5
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $50.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # $52.1: Boolean = ir_value_type_size.1 == 8
  .loc 2 654 9
  cmp QWORD PTR [rbp-40], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $52.1:rax 
  # jump($52.1, block.17, block.19)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__19
.LABEL__generate_store_array_item_instruction_27__17:
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 655 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $52.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $62.1:rbx 
  # $63.1: @FILE = call(write_287, $62.1, "QWORD PTR ")
  .loc 2 655 9
  mov rdi, rbx
  lea rsi, .LABEL__string_69[rip] # "QWORD PTR "
  call write_287
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
.LABEL__generate_store_array_item_instruction_27__18:
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 665 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $64.1:rbx 
  # $65.1: @FILE = call(write_289, $64.1, '[')
  .loc 2 665 5
  mov rdi, rbx
  mov sil, 91
  call write_289
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $65.1:rax 
  # $66.1: @String = load_struct_member(address_register.1, name_q)
  .loc 2 665 39
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $65.1:rax $66.1:r15 
  # $67.1: @FILE = call(write_287, $65.1, $66.1)
  .loc 2 665 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $67.1:rax 
  # $68.1: @FILE = call(write_289, $67.1, ']')
  .loc 2 665 5
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $68.1:rax 
  # $69.1: @FILE = call(write_287, $68.1, ", ")
  .loc 2 665 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $69.1:rax 
  # $70.1: @FILE = call(write_operand_32, $69.1, self.1, ir_value.1)
  .loc 2 665 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-32]
  call write_operand_32
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $70.1:rax 
  # $71.1: @FILE = call(end_line_290, $70.1)
  .loc 2 665 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # store_struct_member(address_register.1, is_reserved, false)
  .loc 2 666 5
  mov rax, [rbp-24]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # return()
  jmp .LABEL__generate_store_array_item_instruction_27__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_27__19:
  # $53.1: Boolean = ir_value_type_size.1 == 4
  .loc 2 656 16
  cmp QWORD PTR [rbp-40], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $53.1:rax 
  # jump($53.1, block.20, block.22)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__22
.LABEL__generate_store_array_item_instruction_27__20:
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 657 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $60.1:rbx 
  # $61.1: @FILE = call(write_287, $60.1, "DWORD PTR ")
  .loc 2 657 9
  mov rdi, rbx
  lea rsi, .LABEL__string_70[rip] # "DWORD PTR "
  call write_287
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_27__22:
  # $54.1: Boolean = ir_value_type_size.1 == 2
  .loc 2 658 16
  cmp QWORD PTR [rbp-40], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $54.1:rax 
  # jump($54.1, block.23, block.25)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__25
.LABEL__generate_store_array_item_instruction_27__23:
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 659 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $58.1:rbx 
  # $59.1: @FILE = call(write_287, $58.1, "WORD PTR ")
  .loc 2 659 9
  mov rdi, rbx
  lea rsi, .LABEL__string_71[rip] # "WORD PTR "
  call write_287
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_27__25:
  # $55.1: Boolean = ir_value_type_size.1 == 1
  .loc 2 660 16
  cmp QWORD PTR [rbp-40], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $55.1:rax 
  # jump($55.1, block.26, block.28)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__28
.LABEL__generate_store_array_item_instruction_27__26:
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 661 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $55.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $56.1:rbx 
  # $57.1: @FILE = call(write_287, $56.1, "BYTE PTR ")
  .loc 2 661 9
  mov rdi, rbx
  lea rsi, .LABEL__string_72[rip] # "BYTE PTR "
  call write_287
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_27__28:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 663 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
.LABEL__generate_store_array_item_instruction_27__4:
  # index_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 633 27
  mov rdi, [rbp-16]
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rax 
  # store_struct_member(index_register.1, is_reserved, true)
  .loc 2 634 9
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rax 
  # $9.1: @IR_Value = call(get_index_value_183, instruction.1)
  .loc 2 635 50
  mov rdi, [rbp-8]
  mov [rbp-56], rax
  call get_index_value_183
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $9.1:rax 
  # call(generate_load_value_30, self.1, index_register.1, $9.1)
  .loc 2 635 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-56]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # $10.1: Boolean = ir_value_type_size.1 > 1
  .loc 2 636 13
  cmp QWORD PTR [rbp-40], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $10.1:rax 
  # jump($10.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_27__6
.LABEL__generate_store_array_item_instruction_27__5:
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 637 13
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $11.1:rbx 
  # $12.1: @FILE = call(write_287, $11.1, "  imul ")
  .loc 2 637 13
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_287
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $12.1:rax 
  # $13.1: @String = load_struct_member(index_register.1, name_q)
  .loc 2 637 53
  mov rbx, [rbp-56]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rbx:[rbp-56] $12.1:rax $13.1:r15 
  # $14.1: @FILE = call(write_287, $12.1, $13.1)
  .loc 2 637 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $14.1:rax 
  # $15.1: @FILE = call(write_287, $14.1, ", ")
  .loc 2 637 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $15.1:rax 
  # $16.1: @FILE = call(write_286, $15.1, ir_value_type_size.1)
  .loc 2 637 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_286
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $16.1:rax 
  # $17.1: @FILE = call(end_line_290, $16.1)
  .loc 2 637 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # jump(block.6)
.LABEL__generate_store_array_item_instruction_27__6:
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 639 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $18.1:rbx 
  # $19.1: @FILE = call(write_287, $18.1, "  add ")
  .loc 2 639 9
  mov rdi, rbx
  lea rsi, .LABEL__string_36[rip] # "  add "
  call write_287
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $19.1:rax 
  # $20.1: @String = load_struct_member(address_register.1, name_q)
  .loc 2 639 48
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $19.1:rax $20.1:r15 
  # $21.1: @FILE = call(write_287, $19.1, $20.1)
  .loc 2 639 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $21.1:rax 
  # $22.1: @FILE = call(write_287, $21.1, ", ")
  .loc 2 639 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $22.1:rax 
  # $23.1: @String = load_struct_member(index_register.1, name_q)
  .loc 2 639 91
  mov rbx, [rbp-56]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rbx:[rbp-56] $22.1:rax $23.1:r15 
  # $24.1: @FILE = call(write_287, $22.1, $23.1)
  .loc 2 639 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $24.1:rax 
  # $25.1: @FILE = call(end_line_290, $24.1)
  .loc 2 639 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # store_struct_member(index_register.1, is_reserved, false)
  .loc 2 640 9
  mov rax, [rbp-56]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rax:[rbp-56] 
  # jump(block.3)
  jmp .LABEL__generate_store_array_item_instruction_27__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: address_register.1
  # [discarded value]: ir_value.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: index_value.1
  # [live values]: 
.LABEL__generate_store_array_item_instruction_27__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_array_item_instruction_27__stack_frame_size: .word 80

  .loc 2 669 1
  .text
generate_store_struct_member_instruction_28:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_member_instruction_28__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_member_instruction_28__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_186, instruction.1)
  .loc 2 670 32
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_186
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  # IR_Variable_Value.8: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax IR_Variable_Value.8:rbx 
  # $2.1: Boolean = call(is_293, ir_struct_pointer_value.1, IR_Variable_Value.8)
  .loc 2 671 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Variable_Value.8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # $3.1: Boolean = $2.1 == false
  .loc 2 671 9
  cmp al, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  jz .LABEL__generate_store_struct_member_instruction_28__3
.LABEL__generate_store_struct_member_instruction_28__2:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 672 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
.LABEL__generate_store_struct_member_instruction_28__3:
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  .loc 2 674 32
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:rax 
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_40, self.1, ir_struct_pointer_value.1)
  .loc 2 675 32
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_40
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax 
  # $6.1: Boolean = mc_struct_pointer_value.1 == null
  .loc 2 676 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax $6.1:rbx 
  # jump($6.1, block.4, block.5)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_store_struct_member_instruction_28__5
.LABEL__generate_store_struct_member_instruction_28__4:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 677 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] 
.LABEL__generate_store_struct_member_instruction_28__5:
  # struct_pointer_register.1: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  .loc 2 679 32
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax:[rbp-40] struct_pointer_register.1:rbx 
  # $8.1: Boolean = struct_pointer_register.1 == null
  .loc 2 680 9
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:rax:[rbp-40] struct_pointer_register.1:rbx $8.1:r15 
  # jump($8.1, block.6, block.7)
  test r15b, r15b
  mov [rbp-48], rbx
  jz .LABEL__generate_store_struct_member_instruction_28__7
.LABEL__generate_store_struct_member_instruction_28__6:
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 681 35
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:rax:[rbp-48] 
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  .loc 2 682 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-32]
  mov [rbp-48], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] 
  # $10.1: @MC_Value = call(map_variable_value_39, self.1, ir_struct_pointer_value.1, struct_pointer_register.2)
  .loc 2 683 9
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  mov rdx, [rbp-48]
  call map_variable_value_39
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] 
  # jump(block.7)
.LABEL__generate_store_struct_member_instruction_28__7:
  # struct_pointer_register.7: @MC_Register = phi(struct_pointer_register.1, struct_pointer_register.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] 
  # $11.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 2 686 50
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] $11.1:rbx 
  # struct_type_member_offset.1: Int = call(get_offset_31, self.1, $11.1)
  .loc 2 686 34
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_31
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:rax 
  # ir_value.1: @IR_Value = call(get_value_187, instruction.1)
  .loc 2 687 17
  mov rdi, [rbp-16]
  mov [rbp-56], rax
  call get_value_187
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:rax 
  # IR_Variable_Value.9: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:rax IR_Variable_Value.9:rbx 
  # $14.1: Boolean = call(is_293, ir_value.1, IR_Variable_Value.9)
  .loc 2 688 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-64], rax
  call is_293
  # [discarded value]: IR_Variable_Value.9
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] $14.1:rax 
  # jump($14.1, block.8, block.9)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__9
.LABEL__generate_store_struct_member_instruction_28__8:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 2 689 21
  mov rax, [rbp-64]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value_40, self.1, ir_value.1)
  .loc 2 690 21
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-72], rax
  call get_value_40
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] mc_value.1:rax 
  # $17.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 691 13
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $17.1:rbx 
  # $18.1: Boolean = $17.1 == null
  .loc 2 691 13
  cmp rbx, 0
  sete al
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $18.1:rax 
  # jump($18.1, block.10, block.9)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__9
.LABEL__generate_store_struct_member_instruction_28__10:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 692 25
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] register.1:rax 
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  .loc 2 693 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-72]
  mov [rbp-80], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] register.1:[rbp-80] 
  # $20.1: @MC_Value = call(map_variable_value_39, self.1, ir_value.1, register.1)
  .loc 2 694 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-72]
  mov rdx, [rbp-80]
  call map_variable_value_39
  # [discarded value]: register.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.9)
.LABEL__generate_store_struct_member_instruction_28__9:
  # IR_Constant_Value.6: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] IR_Constant_Value.6:rax 
  # $22.1: Boolean = call(is_293, ir_value.1, IR_Constant_Value.6)
  .loc 2 697 9
  mov rdi, [rbp-64]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.6
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:rax 
  # jump($22.1, block.12, block.13)
  test al, al
  mov [rbp-73], al
  jz .LABEL__generate_store_struct_member_instruction_28__13
.LABEL__generate_store_struct_member_instruction_28__12:
  # $23.1: @IR_Constant_Value = ir_value.1
  .loc 2 697 44
  mov rax, [rbp-64]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $23.1:rax 
  # $24.1: @Literal_Token = load_struct_member($23.1, literal)
  .loc 2 697 43
  mov rbx, [rax+24]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $24.1:rbx 
  # String_Token.2: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $24.1:rbx String_Token.2:rax 
  # $22.2: Boolean = call(is_293, $24.1, String_Token.2)
  .loc 2 697 43
  mov rdi, rbx
  mov rsi, rax
  call is_293
  # [discarded value]: $24.1
  # [discarded value]: String_Token.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:rax:[rbp-73] 
  # jump(block.13)
  mov [rbp-73], al
.LABEL__generate_store_struct_member_instruction_28__13:
  # $22.3: Boolean = phi($22.1, $22.2)
  .loc 2 697 9
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] $22.3:[rbp-73] 
  # jump($22.3, block.14, block.16)
  mov al, [rbp-73]
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__16
.LABEL__generate_store_struct_member_instruction_28__14:
  # register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 698 21
  mov rdi, [rbp-8]
  call find_unused_register_36
  # [discarded value]: $22.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:rax 
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  .loc 2 699 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-64]
  mov [rbp-81], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] 
  # $52.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 700 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $52.1:rbx 
  # $53.1: @FILE = call(write_287, $52.1, "  mov [")
  .loc 2 700 9
  mov rdi, rbx
  lea rsi, .LABEL__string_73[rip] # "  mov ["
  call write_287
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $53.1:rax 
  # $54.1: @String = load_struct_member(struct_pointer_register.7, name_q)
  .loc 2 700 49
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:rbx:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $53.1:rax $54.1:r15 
  # $55.1: @FILE = call(write_287, $53.1, $54.1)
  .loc 2 700 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $55.1:rax 
  # $56.1: @FILE = call(write_289, $55.1, '+')
  .loc 2 700 9
  mov rdi, rax
  mov sil, 43
  call write_289
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $56.1:rax 
  # $57.1: @FILE = call(write_286, $56.1, struct_type_member_offset.1)
  .loc 2 700 9
  mov rdi, rax
  mov rsi, [rbp-56]
  call write_286
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $57.1:rax 
  # $58.1: @FILE = call(write_287, $57.1, "], ")
  .loc 2 700 9
  mov rdi, rax
  lea rsi, .LABEL__string_74[rip] # "], "
  call write_287
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] register.1:[rbp-81] $58.1:rax 
  # $59.1: @String = load_struct_member(register.1, name_q)
  .loc 2 700 144
  mov rbx, [rbp-81]
  mov r15, [rbx+8]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] $58.1:rax $59.1:r15 
  # $60.1: @FILE = call(write_287, $58.1, $59.1)
  .loc 2 700 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] $60.1:rax 
  # $61.1: @FILE = call(end_line_290, $60.1)
  .loc 2 700 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] 
  # jump(block.15)
.LABEL__generate_store_struct_member_instruction_28__15:
  # return()
  jmp .LABEL__generate_store_struct_member_instruction_28__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] 
.LABEL__generate_store_struct_member_instruction_28__16:
  # $26.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 702 50
  mov rax, [rbp-64]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:rax:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] $26.1:rbx 
  # ir_value_type_size.1: Int = call(get_type_size_52, self.1, $26.1)
  .loc 2 702 31
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_52
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:rax 
  # $28.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 703 9
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:rax $28.1:r15 
  # $29.1: @FILE = call(write_287, $28.1, "  mov ")
  .loc 2 703 9
  mov rdi, r15
  lea rsi, .LABEL__string_58[rip] # "  mov "
  mov [rbp-81], rax
  call write_287
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # $30.1: Boolean = ir_value_type_size.1 == 8
  .loc 2 704 13
  cmp QWORD PTR [rbp-81], 8
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $30.1:rax 
  # jump($30.1, block.17, block.19)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__19
.LABEL__generate_store_struct_member_instruction_28__17:
  # $40.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 705 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $40.1:rbx 
  # $41.1: @FILE = call(write_287, $40.1, "QWORD PTR ")
  .loc 2 705 13
  mov rdi, rbx
  lea rsi, .LABEL__string_69[rip] # "QWORD PTR "
  call write_287
  # [discarded value]: $40.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # jump(block.18)
.LABEL__generate_store_struct_member_instruction_28__18:
  # $42.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 715 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $42.1:rbx 
  # $43.1: @FILE = call(write_289, $42.1, '[')
  .loc 2 715 9
  mov rdi, rbx
  mov sil, 91
  call write_289
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $43.1:rax 
  # $44.1: @String = load_struct_member(struct_pointer_register.7, name_q)
  .loc 2 715 43
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:rbx:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $43.1:rax $44.1:r15 
  # $45.1: @FILE = call(write_287, $43.1, $44.1)
  .loc 2 715 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $45.1:rax 
  # $46.1: @FILE = call(write_289, $45.1, '+')
  .loc 2 715 9
  mov rdi, rax
  mov sil, 43
  call write_289
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $46.1:rax 
  # $47.1: @FILE = call(write_286, $46.1, struct_type_member_offset.1)
  .loc 2 715 9
  mov rdi, rax
  mov rsi, [rbp-56]
  call write_286
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $47.1:rax 
  # $48.1: @FILE = call(write_287, $47.1, "], ")
  .loc 2 715 9
  mov rdi, rax
  lea rsi, .LABEL__string_74[rip] # "], "
  call write_287
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $48.1:rax 
  # $49.1: @FILE = call(write_operand_32, $48.1, self.1, ir_value.1)
  .loc 2 715 9
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-64]
  call write_operand_32
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $49.1:rax 
  # $50.1: @FILE = call(end_line_290, $49.1)
  .loc 2 715 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # jump(block.15)
  jmp .LABEL__generate_store_struct_member_instruction_28__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
.LABEL__generate_store_struct_member_instruction_28__19:
  # $31.1: Boolean = ir_value_type_size.1 == 4
  .loc 2 706 20
  cmp QWORD PTR [rbp-81], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $31.1:rax 
  # jump($31.1, block.20, block.22)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__22
.LABEL__generate_store_struct_member_instruction_28__20:
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 707 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $38.1:rbx 
  # $39.1: @FILE = call(write_287, $38.1, "DWORD PTR ")
  .loc 2 707 13
  mov rdi, rbx
  lea rsi, .LABEL__string_70[rip] # "DWORD PTR "
  call write_287
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # jump(block.18)
  jmp .LABEL__generate_store_struct_member_instruction_28__18
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
.LABEL__generate_store_struct_member_instruction_28__22:
  # $32.1: Boolean = ir_value_type_size.1 == 2
  .loc 2 708 20
  cmp QWORD PTR [rbp-81], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $32.1:rax 
  # jump($32.1, block.23, block.25)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__25
.LABEL__generate_store_struct_member_instruction_28__23:
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 709 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $32.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $36.1:rbx 
  # $37.1: @FILE = call(write_287, $36.1, "WORD PTR ")
  .loc 2 709 13
  mov rdi, rbx
  lea rsi, .LABEL__string_71[rip] # "WORD PTR "
  call write_287
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # jump(block.18)
  jmp .LABEL__generate_store_struct_member_instruction_28__18
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
.LABEL__generate_store_struct_member_instruction_28__25:
  # $33.1: Boolean = ir_value_type_size.1 == 1
  .loc 2 710 20
  cmp QWORD PTR [rbp-81], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $33.1:rax 
  # jump($33.1, block.26, block.28)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__28
.LABEL__generate_store_struct_member_instruction_28__26:
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 711 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] $34.1:rbx 
  # $35.1: @FILE = call(write_287, $34.1, "BYTE PTR ")
  .loc 2 711 13
  mov rdi, rbx
  lea rsi, .LABEL__string_72[rip] # "BYTE PTR "
  call write_287
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # jump(block.18)
  jmp .LABEL__generate_store_struct_member_instruction_28__18
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
.LABEL__generate_store_struct_member_instruction_28__28:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 713 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] ir_value_type_size.1:[rbp-81] 
  # [discarded value]: ir_value_type_size.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] $22.2:[rbp-73] 
  # [discarded value]: $22.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] $22.1:[rbp-73] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] struct_pointer_register.7:[rbp-48] struct_type_member_offset.1:[rbp-56] ir_value.1:[rbp-64] 
  # [discarded value]: struct_pointer_register.7
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] struct_pointer_register.2:[rbp-48] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] struct_pointer_register.1:[rbp-48] 
  # [discarded value]: struct_pointer_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] ir_struct_pointer_value.1:[rbp-32] mc_struct_pointer_value.1:[rbp-40] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: mc_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: 
.LABEL__generate_store_struct_member_instruction_28__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_member_instruction_28__stack_frame_size: .word 96

  .loc 2 719 1
  .text
generate_substract_instruction_29:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_substract_instruction_29__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_substract_instruction_29__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Substract_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register_36, self.1)
  .loc 2 720 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_36
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # left_value.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 2 721 19
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_189
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:rax 
  # right_value.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 2 722 20
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_right_value_190
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.7: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.7:rbx 
  # $4.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.7)
  .loc 2 723 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__2:
  # left_value.1: @IR_Constant_Value = left_value.1
  .loc 2 724 23
  mov rax, [rbp-32]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] left_value.1:rax 
  # $7.1: @Integer_Token = load_struct_member(left_value.1, literal)
  .loc 2 725 14
  mov rbx, [rax+24]
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $7.1:rbx 
  # $8.1: Int = load_struct_member($7.1, value)
  .loc 2 725 13
  mov rax, [rbx+32]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # $9.1: Boolean = $8.1 == 0
  .loc 2 725 13
  cmp rax, 0
  sete bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $9.1:rbx 
  # jump($9.1, block.4, block.3)
  test bl, bl
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__4:
  # call(generate_load_value_30, self.1, result_register.1, right_value.1)
  .loc 2 726 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-40]
  call generate_load_value_30
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 727 13
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $10.1:rbx 
  # $11.1: @FILE = call(write_287, $10.1, "  neg ")
  .loc 2 727 13
  mov rdi, rbx
  lea rsi, .LABEL__string_75[rip] # "  neg "
  call write_287
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $11.1:rax 
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 727 52
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $11.1:rax $12.1:r15 
  # $13.1: @FILE = call(write_287, $11.1, $12.1)
  .loc 2 727 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $13.1:rax 
  # $14.1: @FILE = call(end_line_290, $13.1)
  .loc 2 727 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 728 37
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $15.1:rbx 
  # $16.1: @MC_Value = call(map_variable_value_39, self.1, $15.1, result_register.1)
  .loc 2 728 13
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_39
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # return()
  .loc 2 729 13
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
.LABEL__generate_substract_instruction_29__3:
  # call(generate_load_value_30, self.1, result_register.1, left_value.1)
  .loc 2 732 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # $17.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 2 733 29
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $17.1:rbx 
  # $18.1: @MC_Value = call(map_variable_value_39, self.1, $17.1, result_register.1)
  .loc 2 733 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_39
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # IR_Constant_Value.8: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] IR_Constant_Value.8:rax 
  # $19.1: Boolean = call(is_293, right_value.1, IR_Constant_Value.8)
  .loc 2 734 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.8
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $19.1:rax 
  # jump($19.1, block.7, block.8)
  test al, al
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__7:
  # right_value.1: @IR_Constant_Value = right_value.1
  .loc 2 735 24
  mov rax, [rbp-40]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] right_value.1:rax 
  # $22.1: @Integer_Token = load_struct_member(right_value.1, literal)
  .loc 2 736 14
  mov rbx, [rax+24]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $22.1:rbx 
  # $23.1: Int = load_struct_member($22.1, value)
  .loc 2 736 13
  mov rax, [rbx+32]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $23.1:rax 
  # $24.1: Boolean = $23.1 == 1
  .loc 2 736 13
  cmp rax, 1
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $24.1:rbx 
  # jump($24.1, block.9, block.8)
  test bl, bl
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__9:
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 737 13
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $24.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $25.1:rbx 
  # $26.1: @FILE = call(write_287, $25.1, "  dec ")
  .loc 2 737 13
  mov rdi, rbx
  lea rsi, .LABEL__string_76[rip] # "  dec "
  call write_287
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $26.1:rax 
  # $27.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 737 52
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $26.1:rax $27.1:r15 
  # $28.1: @FILE = call(write_287, $26.1, $27.1)
  .loc 2 737 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $28.1:rax 
  # $29.1: @FILE = call(end_line_290, $28.1)
  .loc 2 737 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # return()
  .loc 2 738 13
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
.LABEL__generate_substract_instruction_29__8:
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 741 5
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $30.1:rbx 
  # $31.1: @FILE = call(write_287, $30.1, "  sub ")
  .loc 2 741 5
  mov rdi, rbx
  lea rsi, .LABEL__string_77[rip] # "  sub "
  call write_287
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $31.1:rax 
  # $32.1: @String = load_struct_member(result_register.1, name_q)
  .loc 2 741 44
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $31.1:rax $32.1:r15 
  # $33.1: @FILE = call(write_287, $31.1, $32.1)
  .loc 2 741 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $33.1:rax 
  # $34.1: @FILE = call(write_287, $33.1, ", ")
  .loc 2 741 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $34.1:rax 
  # $35.1: @FILE = call(write_operand_32, $34.1, self.1, right_value.1)
  .loc 2 741 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-40]
  call write_operand_32
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $35.1:rax 
  # $36.1: @FILE = call(end_line_290, $35.1)
  .loc 2 741 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_register.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__generate_substract_instruction_29__end:
  mov rsp, rbp
  pop rbp
  ret

generate_substract_instruction_29__stack_frame_size: .word 48

  .loc 2 744 1
  .text
generate_load_value_30:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_value_30__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_value_30__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx 
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 745 9
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 2 745 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__generate_load_value_30__3
.LABEL__generate_load_value_30__2:
  # IR_Variable_Value.10: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] IR_Variable_Value.10:rax 
  # $3.1: Boolean = call(is_293, ir_value.1, IR_Variable_Value.10)
  .loc 2 746 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.4, block.5)
  test al, al
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__4:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 2 747 25
  mov rax, [rbp-8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax 
  # $5.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 748 29
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $5.1:r15 
  # $6.1: @IR_Variable_Value = load_struct_member($5.1, ir_variable_value)
  .loc 2 748 29
  mov r14, [r15+24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $6.1:r14 
  # $7.1: Boolean = ir_value.1 == $6.1
  .loc 2 748 17
  cmp rax, r14
  sete r15b
  # [discarded value]: ir_value.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] $7.1:r15 
  # jump($7.1, block.6, block.5)
  test r15b, r15b
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__6:
  # return()
  .loc 2 749 17
  jmp .LABEL__generate_load_value_30__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
.LABEL__generate_load_value_30__5:
  # call(release_register_44, self.1, register.1)
  .loc 2 752 9
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call release_register_44
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_load_value_30__3:
  # IR_Constant_Value.9: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] IR_Constant_Value.9:rax 
  # $8.1: Boolean = call(is_293, ir_value.1, IR_Constant_Value.9)
  .loc 2 754 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.9
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $8.1:rax 
  # jump($8.1, block.9, block.11)
  test al, al
  jz .LABEL__generate_load_value_30__11
.LABEL__generate_load_value_30__9:
  # ir_value.1: @IR_Constant_Value = ir_value.1
  .loc 2 755 21
  mov rax, [rbp-8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax 
  # $143.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 756 13
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $143.1:rbx 
  # Boolean_Token.2: @Object_Type = load_variable(Boolean_Token)
  lea r15, Boolean_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $143.1:rbx Boolean_Token.2:r15 
  # $144.1: Boolean = call(is_293, $143.1, Boolean_Token.2)
  .loc 2 756 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_293
  # [discarded value]: $143.1
  # [discarded value]: Boolean_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $144.1:rax 
  # jump($144.1, block.56, block.58)
  test al, al
  jz .LABEL__generate_load_value_30__58
.LABEL__generate_load_value_30__56:
  # literal.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  .loc 2 757 24
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $144.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] literal.1:rbx 
  # $216.1: Boolean = load_struct_member(literal.1, value)
  .loc 2 758 17
  mov r15b, [rbx+32]
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $216.1:r15 
  # jump($216.1, block.77, block.79)
  test r15b, r15b
  jz .LABEL__generate_load_value_30__79
.LABEL__generate_load_value_30__77:
  # $224.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 759 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $216.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $224.1:rbx 
  # $225.1: @FILE = call(write_287, $224.1, "  mov ")
  .loc 2 759 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $224.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $225.1:rax 
  # $226.1: @String = load_struct_member(register.1, name_b)
  .loc 2 759 56
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $225.1:rax $226.1:r15 
  # $227.1: @FILE = call(write_287, $225.1, $226.1)
  .loc 2 759 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $225.1
  # [discarded value]: $226.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $227.1:rax 
  # $228.1: @FILE = call(write_287, $227.1, ", ")
  .loc 2 759 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $227.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $228.1:rax 
  # $229.1: @FILE = call(write_286, $228.1, 1)
  .loc 2 759 17
  mov rdi, rax
  mov rsi, 1
  call write_286
  # [discarded value]: $228.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $229.1:rax 
  # $230.1: @FILE = call(end_line_290, $229.1)
  .loc 2 759 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $229.1
  # [discarded value]: $230.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
.LABEL__generate_load_value_30__10:
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_30__79:
  # $217.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 761 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $217.1:rbx 
  # $218.1: @FILE = call(write_287, $217.1, "  mov ")
  .loc 2 761 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $217.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $218.1:rax 
  # $219.1: @String = load_struct_member(register.1, name_b)
  .loc 2 761 56
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $218.1:rax $219.1:r15 
  # $220.1: @FILE = call(write_287, $218.1, $219.1)
  .loc 2 761 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $218.1
  # [discarded value]: $219.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $220.1:rax 
  # $221.1: @FILE = call(write_287, $220.1, ", ")
  .loc 2 761 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $220.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $221.1:rax 
  # $222.1: @FILE = call(write_286, $221.1, 0)
  .loc 2 761 17
  mov rdi, rax
  xor rsi, rsi
  call write_286
  # [discarded value]: $221.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $222.1:rax 
  # $223.1: @FILE = call(end_line_290, $222.1)
  .loc 2 761 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $222.1
  # [discarded value]: $223.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_30__58:
  # $145.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 763 20
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $145.1:rbx 
  # Character_Token.2: @Object_Type = load_variable(Character_Token)
  lea r15, Character_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $145.1:rbx Character_Token.2:r15 
  # $146.1: Boolean = call(is_293, $145.1, Character_Token.2)
  .loc 2 763 20
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $145.1
  # [discarded value]: Character_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $146.1:rax 
  # jump($146.1, block.59, block.61)
  test al, al
  jz .LABEL__generate_load_value_30__61
.LABEL__generate_load_value_30__59:
  # $203.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 764 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $146.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $203.1:rbx 
  # $204.1: @FILE = call(write_287, $203.1, "  mov ")
  .loc 2 764 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $203.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $204.1:rax 
  # $205.1: @String = load_struct_member(register.1, name_b)
  .loc 2 764 52
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $204.1:rax $205.1:r15 
  # $206.1: @FILE = call(write_287, $204.1, $205.1)
  .loc 2 764 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $204.1
  # [discarded value]: $205.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $206.1:rax 
  # $207.1: @FILE = call(write_287, $206.1, ", ")
  .loc 2 764 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $206.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $207.1:rax 
  # $209.1: @Character_Token = load_struct_member(ir_value.1, literal)
  .loc 2 764 88
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rbx:[rbp-32] $207.1:rax $209.1:r15 
  # $210.1: Int8 = load_struct_member($209.1, value)
  .loc 2 764 87
  mov r14b, [r15+32]
  # [discarded value]: $209.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rbx:[rbp-32] $207.1:rax $210.1:r14 
  # $211.1: Int = cast($210.1)
  .loc 2 764 87
  mov r15b, r14b
  movsx r15, r15b
  # [discarded value]: $210.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rbx:[rbp-32] $207.1:rax $211.1:r15 
  # $212.1: @FILE = call(write_286, $207.1, $211.1)
  .loc 2 764 13
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $207.1
  # [discarded value]: $211.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $212.1:rax 
  # $213.1: @FILE = call(end_line_290, $212.1)
  .loc 2 764 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $212.1
  # [discarded value]: $213.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_30__61:
  # $147.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 765 20
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $147.1:rbx 
  # Integer_Token.4: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $147.1:rbx Integer_Token.4:r15 
  # $148.1: Boolean = call(is_293, $147.1, Integer_Token.4)
  .loc 2 765 20
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $147.1
  # [discarded value]: Integer_Token.4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $148.1:rax 
  # jump($148.1, block.62, block.64)
  test al, al
  jz .LABEL__generate_load_value_30__64
.LABEL__generate_load_value_30__62:
  # literal.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  .loc 2 766 24
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] literal.1:rbx 
  # $185.1: Int = load_struct_member(literal.1, value)
  .loc 2 767 17
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] literal.1:rbx $185.1:r15 
  # $186.1: Boolean = $185.1 == 0
  .loc 2 767 17
  cmp r15, 0
  sete r14b
  # [discarded value]: $185.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] literal.1:rbx $186.1:r14 
  # jump($186.1, block.74, block.76)
  test r14b, r14b
  mov [rbp-40], rbx
  jz .LABEL__generate_load_value_30__76
.LABEL__generate_load_value_30__74:
  # $195.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 768 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $186.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $195.1:rbx 
  # $196.1: @FILE = call(write_287, $195.1, "  xor ")
  .loc 2 768 17
  mov rdi, rbx
  lea rsi, .LABEL__string_78[rip] # "  xor "
  call write_287
  # [discarded value]: $195.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $196.1:rax 
  # $197.1: @String = load_struct_member(register.1, name_q)
  .loc 2 768 56
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $196.1:rax $197.1:r15 
  # $198.1: @FILE = call(write_287, $196.1, $197.1)
  .loc 2 768 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $196.1
  # [discarded value]: $197.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $198.1:rax 
  # $199.1: @FILE = call(write_287, $198.1, ", ")
  .loc 2 768 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $198.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $199.1:rax 
  # $200.1: @String = load_struct_member(register.1, name_q)
  .loc 2 768 91
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $199.1:rax $200.1:r15 
  # $201.1: @FILE = call(write_287, $199.1, $200.1)
  .loc 2 768 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $199.1
  # [discarded value]: $200.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $201.1:rax 
  # $202.1: @FILE = call(end_line_290, $201.1)
  .loc 2 768 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $201.1
  # [discarded value]: $202.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
.LABEL__generate_load_value_30__76:
  # $187.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 770 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $187.1:rbx 
  # $188.1: @FILE = call(write_287, $187.1, "  mov ")
  .loc 2 770 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $187.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $188.1:rax 
  # $189.1: @String = load_struct_member(register.1, name_q)
  .loc 2 770 56
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $188.1:rax $189.1:r15 
  # $190.1: @FILE = call(write_287, $188.1, $189.1)
  .loc 2 770 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $188.1
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $190.1:rax 
  # $191.1: @FILE = call(write_287, $190.1, ", ")
  .loc 2 770 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $191.1:rax 
  # $192.1: Int = load_struct_member(literal.1, value)
  .loc 2 770 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:rbx:[rbp-40] $191.1:rax $192.1:r15 
  # $193.1: @FILE = call(write_286, $191.1, $192.1)
  .loc 2 770 17
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $191.1
  # [discarded value]: $192.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $193.1:rax 
  # $194.1: @FILE = call(end_line_290, $193.1)
  .loc 2 770 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $193.1
  # [discarded value]: $194.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_30__64:
  # $149.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 772 20
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $149.1:rbx 
  # Null_Token.2: @Object_Type = load_variable(Null_Token)
  lea r15, Null_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $149.1:rbx Null_Token.2:r15 
  # $150.1: Boolean = call(is_293, $149.1, Null_Token.2)
  .loc 2 772 20
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $149.1
  # [discarded value]: Null_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $150.1:rax 
  # jump($150.1, block.65, block.67)
  test al, al
  jz .LABEL__generate_load_value_30__67
.LABEL__generate_load_value_30__65:
  # $175.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 773 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $150.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $175.1:rbx 
  # $176.1: @FILE = call(write_287, $175.1, "  xor ")
  .loc 2 773 13
  mov rdi, rbx
  lea rsi, .LABEL__string_78[rip] # "  xor "
  call write_287
  # [discarded value]: $175.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $176.1:rax 
  # $177.1: @String = load_struct_member(register.1, name_q)
  .loc 2 773 52
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $176.1:rax $177.1:r15 
  # $178.1: @FILE = call(write_287, $176.1, $177.1)
  .loc 2 773 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $176.1
  # [discarded value]: $177.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $178.1:rax 
  # $179.1: @FILE = call(write_287, $178.1, ", ")
  .loc 2 773 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $178.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $179.1:rax 
  # $180.1: @String = load_struct_member(register.1, name_q)
  .loc 2 773 87
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $179.1:rax $180.1:r15 
  # $181.1: @FILE = call(write_287, $179.1, $180.1)
  .loc 2 773 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $179.1
  # [discarded value]: $180.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $181.1:rax 
  # $182.1: @FILE = call(end_line_290, $181.1)
  .loc 2 773 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $181.1
  # [discarded value]: $182.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_30__67:
  # $151.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 774 20
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $151.1:rbx 
  # String_Token.3: @Object_Type = load_variable(String_Token)
  lea r15, String_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $151.1:rbx String_Token.3:r15 
  # $152.1: Boolean = call(is_293, $151.1, String_Token.3)
  .loc 2 774 20
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $151.1
  # [discarded value]: String_Token.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $152.1:rax 
  # jump($152.1, block.68, block.70)
  test al, al
  jz .LABEL__generate_load_value_30__70
.LABEL__generate_load_value_30__68:
  # $161.1: @String_Token = load_struct_member(ir_value.1, literal)
  .loc 2 775 46
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $161.1:rbx 
  # mc_string.1: @MC_String = call(convert_string_53, self.1, $161.1)
  .loc 2 775 26
  mov rdi, [rbp-24]
  mov rsi, rbx
  call convert_string_53
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:rax 
  # $163.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 776 13
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:rax $163.1:r15 
  # $164.1: @FILE = call(write_287, $163.1, "  lea ")
  .loc 2 776 13
  mov rdi, r15
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-40], rax
  call write_287
  # [discarded value]: $163.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $164.1:rax 
  # $165.1: @String = load_struct_member(register.1, name_q)
  .loc 2 776 52
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $164.1:rax $165.1:r15 
  # $166.1: @FILE = call(write_287, $164.1, $165.1)
  .loc 2 776 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $164.1
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $166.1:rax 
  # $167.1: @FILE = call(write_287, $166.1, ", ")
  .loc 2 776 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $167.1:rax 
  # $168.1: @FILE = call(write_string_label_55, $167.1, mc_string.1)
  .loc 2 776 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_string_label_55
  # [discarded value]: $167.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $168.1:rax 
  # $169.1: @FILE = call(write_287, $168.1, "[rip]")
  .loc 2 776 13
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_287
  # [discarded value]: $168.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $169.1:rax 
  # $170.1: @FILE = call(write_287, $169.1, " # ")
  .loc 2 776 13
  mov rdi, rax
  lea rsi, .LABEL__string_79[rip] # " # "
  call write_287
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $170.1:rax 
  # $171.1: @String_Token = load_struct_member(mc_string.1, literal)
  .loc 2 776 145
  mov rbx, [rbp-40]
  mov r15, [rbx+8]
  # [discarded value]: mc_string.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $170.1:rax $171.1:r15 
  # $172.1: @String = load_struct_member($171.1, lexeme)
  .loc 2 776 145
  mov rbx, [r15+8]
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $170.1:rax $172.1:rbx 
  # $173.1: @FILE = call(write_287, $170.1, $172.1)
  .loc 2 776 13
  mov rdi, rax
  mov rsi, rbx
  call write_287
  # [discarded value]: $170.1
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $173.1:rax 
  # $174.1: @FILE = call(end_line_290, $173.1)
  .loc 2 776 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $173.1
  # [discarded value]: $174.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_30__70:
  # $153.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 777 20
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $153.1:rbx 
  # Undefined_Token.2: @Object_Type = load_variable(Undefined_Token)
  lea r15, Undefined_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax:[rbp-32] $153.1:rbx Undefined_Token.2:r15 
  # $154.1: Boolean = call(is_293, $153.1, Undefined_Token.2)
  .loc 2 777 20
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $153.1
  # [discarded value]: Undefined_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $154.1:rax 
  # jump($154.1, block.10, block.73)
  test al, al
  jnz .LABEL__generate_load_value_30__10
.LABEL__generate_load_value_30__73:
  # $155.1: @String = call(clone_295, "Unsupported literal type: ")
  .loc 2 780 24
  lea rdi, .LABEL__string_80[rip] # "Unsupported literal type: "
  call clone_295
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $155.1:rax 
  # $156.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 780 67
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rbx:[rbp-32] $155.1:rax $156.1:r15 
  # $157.1: @Object_Type = load_struct_member($156.1, object_type)
  .loc 2 780 67
  mov r14, [r15+0]
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rbx:[rbp-32] $155.1:rax $157.1:r14 
  # $158.1: @String = load_struct_member($157.1, name)
  .loc 2 780 67
  mov r15, r14
  add r15, 8
  # [discarded value]: $157.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rbx:[rbp-32] $155.1:rax $158.1:r15 
  # $159.1: @String = call(append_304, $155.1, $158.1)
  .loc 2 780 24
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $155.1
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $159.1:rax 
  # call(abort_33, self.1, $159.1)
  .loc 2 780 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_33
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
.LABEL__generate_load_value_30__11:
  # IR_Variable_Value.11: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] IR_Variable_Value.11:rax 
  # $9.1: Boolean = call(is_293, ir_value.1, IR_Variable_Value.11)
  .loc 2 782 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.11
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.12, block.14)
  test al, al
  jz .LABEL__generate_load_value_30__14
.LABEL__generate_load_value_30__12:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 2 783 21
  mov rax, [rbp-8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax 
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 784 26
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax ir_value_type.1:rbx 
  # mc_value.1: @MC_Value = call(get_value_40, self.1, ir_value.1)
  .loc 2 785 21
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-32], rbx
  call get_value_40
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rax 
  # $17.1: Boolean = mc_value.1 == null
  .loc 2 786 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rax $17.1:rbx 
  # jump($17.1, block.15, block.16)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_load_value_30__16
.LABEL__generate_load_value_30__15:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 787 13
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__16:
  # store_struct_member(register.1, loaded_value, mc_value.1)
  .loc 2 789 9
  mov rax, [rbp-16]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+49], rbx
  # [live values]: self.1:[rbp-24] register.1:rax:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] 
  # $18.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 790 13
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rax:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $18.1:r15 
  # $19.1: Boolean = $18.1 != null
  .loc 2 790 13
  cmp r15, 0
  setne r14b
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] register.1:rax:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $19.1:r14 
  # jump($19.1, block.17, block.19)
  test r14b, r14b
  jz .LABEL__generate_load_value_30__19
.LABEL__generate_load_value_30__17:
  # IR_Boolean_Type.4: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Boolean_Type.4:rax 
  # $78.1: Boolean = call(is_293, ir_value_type.1, IR_Boolean_Type.4)
  .loc 2 791 17
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Boolean_Type.4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $78.1:rax 
  # jump($78.1, block.38, block.40)
  test al, al
  jz .LABEL__generate_load_value_30__40
.LABEL__generate_load_value_30__38:
  # $133.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 792 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $78.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $133.1:rbx 
  # $134.1: @FILE = call(write_287, $133.1, "  mov ")
  .loc 2 792 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $134.1:rax 
  # $135.1: @String = load_struct_member(register.1, name_b)
  .loc 2 792 56
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $134.1:rax $135.1:r15 
  # $136.1: @FILE = call(write_287, $134.1, $135.1)
  .loc 2 792 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $134.1
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $136.1:rax 
  # $137.1: @FILE = call(write_287, $136.1, ", ")
  .loc 2 792 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $137.1:rax 
  # $138.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 792 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $137.1:rax $138.1:r15 
  # $139.1: @String = load_struct_member($138.1, name_b)
  .loc 2 792 91
  mov r14, [r15+32]
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $137.1:rax $139.1:r14 
  # $140.1: @FILE = call(write_287, $137.1, $139.1)
  .loc 2 792 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $137.1
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $140.1:rax 
  # $141.1: @FILE = call(end_line_290, $140.1)
  .loc 2 792 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $140.1
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__40:
  # IR_Function_Type.3: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Function_Type.3:rax 
  # $79.1: Boolean = call(is_293, ir_value_type.1, IR_Function_Type.3)
  .loc 2 793 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Function_Type.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $79.1:rax 
  # jump($79.1, block.41, block.43)
  test al, al
  jz .LABEL__generate_load_value_30__43
.LABEL__generate_load_value_30__41:
  # $124.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 794 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $79.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $124.1:rbx 
  # $125.1: @FILE = call(write_287, $124.1, "  mov ")
  .loc 2 794 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $124.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $125.1:rax 
  # $126.1: @String = load_struct_member(register.1, name_q)
  .loc 2 794 56
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $125.1:rax $126.1:r15 
  # $127.1: @FILE = call(write_287, $125.1, $126.1)
  .loc 2 794 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $125.1
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $127.1:rax 
  # $128.1: @FILE = call(write_287, $127.1, ", ")
  .loc 2 794 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $128.1:rax 
  # $129.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 794 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $128.1:rax $129.1:r15 
  # $130.1: @String = load_struct_member($129.1, name_q)
  .loc 2 794 91
  mov r14, [r15+8]
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $128.1:rax $130.1:r14 
  # $131.1: @FILE = call(write_287, $128.1, $130.1)
  .loc 2 794 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $128.1
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $131.1:rax 
  # $132.1: @FILE = call(end_line_290, $131.1)
  .loc 2 794 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $131.1
  # [discarded value]: $132.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__43:
  # IR_Int_Type.6: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int_Type.6:rax 
  # $80.1: Boolean = call(is_293, ir_value_type.1, IR_Int_Type.6)
  .loc 2 795 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int_Type.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $80.1:rax 
  # jump($80.1, block.44, block.46)
  test al, al
  jz .LABEL__generate_load_value_30__46
.LABEL__generate_load_value_30__44:
  # $115.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 796 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $80.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $115.1:rbx 
  # $116.1: @FILE = call(write_287, $115.1, "  mov ")
  .loc 2 796 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $115.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $116.1:rax 
  # $117.1: @String = load_struct_member(register.1, name_q)
  .loc 2 796 56
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $116.1:rax $117.1:r15 
  # $118.1: @FILE = call(write_287, $116.1, $117.1)
  .loc 2 796 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $116.1
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $118.1:rax 
  # $119.1: @FILE = call(write_287, $118.1, ", ")
  .loc 2 796 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $119.1:rax 
  # $120.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 796 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $119.1:rax $120.1:r15 
  # $121.1: @String = load_struct_member($120.1, name_q)
  .loc 2 796 91
  mov r14, [r15+8]
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $119.1:rax $121.1:r14 
  # $122.1: @FILE = call(write_287, $119.1, $121.1)
  .loc 2 796 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $119.1
  # [discarded value]: $121.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $122.1:rax 
  # $123.1: @FILE = call(end_line_290, $122.1)
  .loc 2 796 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $122.1
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__46:
  # IR_Int32_Type.6: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int32_Type.6:rax 
  # $81.1: Boolean = call(is_293, ir_value_type.1, IR_Int32_Type.6)
  .loc 2 797 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int32_Type.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $81.1:rax 
  # jump($81.1, block.47, block.49)
  test al, al
  jz .LABEL__generate_load_value_30__49
.LABEL__generate_load_value_30__47:
  # $106.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 798 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $81.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $106.1:rbx 
  # $107.1: @FILE = call(write_287, $106.1, "  mov ")
  .loc 2 798 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $106.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $107.1:rax 
  # $108.1: @String = load_struct_member(register.1, name_d)
  .loc 2 798 56
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $107.1:rax $108.1:r15 
  # $109.1: @FILE = call(write_287, $107.1, $108.1)
  .loc 2 798 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $107.1
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $109.1:rax 
  # $110.1: @FILE = call(write_287, $109.1, ", ")
  .loc 2 798 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $110.1:rax 
  # $111.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 798 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $110.1:rax $111.1:r15 
  # $112.1: @String = load_struct_member($111.1, name_d)
  .loc 2 798 91
  mov r14, [r15+16]
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $110.1:rax $112.1:r14 
  # $113.1: @FILE = call(write_287, $110.1, $112.1)
  .loc 2 798 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $110.1
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $113.1:rax 
  # $114.1: @FILE = call(end_line_290, $113.1)
  .loc 2 798 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $113.1
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__49:
  # IR_Int8_Type.6: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int8_Type.6:rax 
  # $82.1: Boolean = call(is_293, ir_value_type.1, IR_Int8_Type.6)
  .loc 2 799 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int8_Type.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $82.1:rax 
  # jump($82.1, block.50, block.52)
  test al, al
  jz .LABEL__generate_load_value_30__52
.LABEL__generate_load_value_30__50:
  # $97.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 800 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $82.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $97.1:rbx 
  # $98.1: @FILE = call(write_287, $97.1, "  mov ")
  .loc 2 800 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $98.1:rax 
  # $99.1: @String = load_struct_member(register.1, name_b)
  .loc 2 800 56
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $98.1:rax $99.1:r15 
  # $100.1: @FILE = call(write_287, $98.1, $99.1)
  .loc 2 800 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $98.1
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $100.1:rax 
  # $101.1: @FILE = call(write_287, $100.1, ", ")
  .loc 2 800 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $101.1:rax 
  # $102.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 800 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $101.1:rax $102.1:r15 
  # $103.1: @String = load_struct_member($102.1, name_b)
  .loc 2 800 91
  mov r14, [r15+32]
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $101.1:rax $103.1:r14 
  # $104.1: @FILE = call(write_287, $101.1, $103.1)
  .loc 2 800 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $101.1
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $104.1:rax 
  # $105.1: @FILE = call(end_line_290, $104.1)
  .loc 2 800 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $104.1
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__52:
  # IR_Pointer_Type.4: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Pointer_Type.4:rax 
  # $83.1: Boolean = call(is_293, ir_value_type.1, IR_Pointer_Type.4)
  .loc 2 801 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Pointer_Type.4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $83.1:rax 
  # jump($83.1, block.53, block.55)
  test al, al
  jz .LABEL__generate_load_value_30__55
.LABEL__generate_load_value_30__53:
  # $88.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 802 17
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $83.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $88.1:rbx 
  # $89.1: @FILE = call(write_287, $88.1, "  mov ")
  .loc 2 802 17
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $89.1:rax 
  # $90.1: @String = load_struct_member(register.1, name_q)
  .loc 2 802 56
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $89.1:rax $90.1:r15 
  # $91.1: @FILE = call(write_287, $89.1, $90.1)
  .loc 2 802 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $89.1
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $91.1:rax 
  # $92.1: @FILE = call(write_287, $91.1, ", ")
  .loc 2 802 17
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $92.1:rax 
  # $93.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 802 91
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $92.1:rax $93.1:r15 
  # $94.1: @String = load_struct_member($93.1, name_q)
  .loc 2 802 91
  mov r14, [r15+8]
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $92.1:rax $94.1:r14 
  # $95.1: @FILE = call(write_287, $92.1, $94.1)
  .loc 2 802 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $92.1
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $95.1:rax 
  # $96.1: @FILE = call(end_line_290, $95.1)
  .loc 2 802 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $95.1
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__55:
  # $84.1: @String = call(clone_295, "Unsupported value type: ")
  .loc 2 804 28
  lea rdi, .LABEL__string_81[rip] # "Unsupported value type: "
  call clone_295
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $84.1:rax 
  # $85.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  .loc 2 804 69
  mov rbx, [rbp-32]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:rbx:[rbp-32] mc_value.1:[rbp-40] $84.1:rax $85.1:r15 
  # $86.1: @String = load_struct_member($85.1, name)
  .loc 2 804 69
  mov r14, r15
  add r14, 8
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:rbx:[rbp-32] mc_value.1:[rbp-40] $84.1:rax $86.1:r14 
  # $87.1: @String = call(append_304, $84.1, $86.1)
  .loc 2 804 28
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $84.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $87.1:rax 
  # call(abort_33, self.1, $87.1)
  .loc 2 804 17
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_33
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__19:
  # IR_Boolean_Type.3: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Boolean_Type.3:rax 
  # $20.1: Boolean = call(is_293, ir_value_type.1, IR_Boolean_Type.3)
  .loc 2 806 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Boolean_Type.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $20.1:rax 
  # jump($20.1, block.20, block.22)
  test al, al
  jz .LABEL__generate_load_value_30__22
.LABEL__generate_load_value_30__20:
  # $70.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 807 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $70.1:rbx 
  # $71.1: @FILE = call(write_287, $70.1, "  mov ")
  .loc 2 807 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $71.1:rax 
  # $72.1: @String = load_struct_member(register.1, name_b)
  .loc 2 807 52
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $71.1:rax $72.1:r15 
  # $73.1: @FILE = call(write_287, $71.1, $72.1)
  .loc 2 807 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $71.1
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $73.1:rax 
  # $74.1: @FILE = call(write_287, $73.1, ", ")
  .loc 2 807 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $74.1:rax 
  # $75.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 807 87
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $74.1:rax $75.1:r15 
  # $76.1: @FILE = call(write_51, $74.1, $75.1)
  .loc 2 807 13
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $74.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $76.1:rax 
  # $77.1: @FILE = call(end_line_290, $76.1)
  .loc 2 807 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $76.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__22:
  # IR_Function_Type.2: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Function_Type.2:rax 
  # $21.1: Boolean = call(is_293, ir_value_type.1, IR_Function_Type.2)
  .loc 2 808 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Function_Type.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $21.1:rax 
  # jump($21.1, block.23, block.25)
  test al, al
  jz .LABEL__generate_load_value_30__25
.LABEL__generate_load_value_30__23:
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 809 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $62.1:rbx 
  # $63.1: @FILE = call(write_287, $62.1, "  mov ")
  .loc 2 809 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $63.1:rax 
  # $64.1: @String = load_struct_member(register.1, name_q)
  .loc 2 809 52
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $63.1:rax $64.1:r15 
  # $65.1: @FILE = call(write_287, $63.1, $64.1)
  .loc 2 809 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $65.1:rax 
  # $66.1: @FILE = call(write_287, $65.1, ", ")
  .loc 2 809 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $66.1:rax 
  # $67.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 809 87
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $66.1:rax $67.1:r15 
  # $68.1: @FILE = call(write_51, $66.1, $67.1)
  .loc 2 809 13
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $68.1:rax 
  # $69.1: @FILE = call(end_line_290, $68.1)
  .loc 2 809 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__25:
  # IR_Int_Type.5: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int_Type.5:rax 
  # $22.1: Boolean = call(is_293, ir_value_type.1, IR_Int_Type.5)
  .loc 2 810 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int_Type.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $22.1:rax 
  # jump($22.1, block.26, block.28)
  test al, al
  jz .LABEL__generate_load_value_30__28
.LABEL__generate_load_value_30__26:
  # $54.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 811 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $54.1:rbx 
  # $55.1: @FILE = call(write_287, $54.1, "  mov ")
  .loc 2 811 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $55.1:rax 
  # $56.1: @String = load_struct_member(register.1, name_q)
  .loc 2 811 52
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $55.1:rax $56.1:r15 
  # $57.1: @FILE = call(write_287, $55.1, $56.1)
  .loc 2 811 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $55.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $57.1:rax 
  # $58.1: @FILE = call(write_287, $57.1, ", ")
  .loc 2 811 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $58.1:rax 
  # $59.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 811 87
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $58.1:rax $59.1:r15 
  # $60.1: @FILE = call(write_51, $58.1, $59.1)
  .loc 2 811 13
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $60.1:rax 
  # $61.1: @FILE = call(end_line_290, $60.1)
  .loc 2 811 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__28:
  # IR_Int32_Type.5: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int32_Type.5:rax 
  # $23.1: Boolean = call(is_293, ir_value_type.1, IR_Int32_Type.5)
  .loc 2 812 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int32_Type.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $23.1:rax 
  # jump($23.1, block.29, block.31)
  test al, al
  jz .LABEL__generate_load_value_30__31
.LABEL__generate_load_value_30__29:
  # $46.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 813 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $46.1:rbx 
  # $47.1: @FILE = call(write_287, $46.1, "  mov ")
  .loc 2 813 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $47.1:rax 
  # $48.1: @String = load_struct_member(register.1, name_d)
  .loc 2 813 52
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $47.1:rax $48.1:r15 
  # $49.1: @FILE = call(write_287, $47.1, $48.1)
  .loc 2 813 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $49.1:rax 
  # $50.1: @FILE = call(write_287, $49.1, ", ")
  .loc 2 813 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $50.1:rax 
  # $51.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 813 87
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $50.1:rax $51.1:r15 
  # $52.1: @FILE = call(write_51, $50.1, $51.1)
  .loc 2 813 13
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $50.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $52.1:rax 
  # $53.1: @FILE = call(end_line_290, $52.1)
  .loc 2 813 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $52.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__31:
  # IR_Int8_Type.5: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int8_Type.5:rax 
  # $24.1: Boolean = call(is_293, ir_value_type.1, IR_Int8_Type.5)
  .loc 2 814 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int8_Type.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $24.1:rax 
  # jump($24.1, block.32, block.34)
  test al, al
  jz .LABEL__generate_load_value_30__34
.LABEL__generate_load_value_30__32:
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 815 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $24.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $38.1:rbx 
  # $39.1: @FILE = call(write_287, $38.1, "  mov ")
  .loc 2 815 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $39.1:rax 
  # $40.1: @String = load_struct_member(register.1, name_b)
  .loc 2 815 52
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $39.1:rax $40.1:r15 
  # $41.1: @FILE = call(write_287, $39.1, $40.1)
  .loc 2 815 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $41.1:rax 
  # $42.1: @FILE = call(write_287, $41.1, ", ")
  .loc 2 815 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $42.1:rax 
  # $43.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 815 87
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $42.1:rax $43.1:r15 
  # $44.1: @FILE = call(write_51, $42.1, $43.1)
  .loc 2 815 13
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $44.1:rax 
  # $45.1: @FILE = call(end_line_290, $44.1)
  .loc 2 815 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__34:
  # IR_Pointer_Type.3: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Pointer_Type.3:rax 
  # $25.1: Boolean = call(is_293, ir_value_type.1, IR_Pointer_Type.3)
  .loc 2 816 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Pointer_Type.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $25.1:rax 
  # jump($25.1, block.35, block.37)
  test al, al
  jz .LABEL__generate_load_value_30__37
.LABEL__generate_load_value_30__35:
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 817 13
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $30.1:rbx 
  # $31.1: @FILE = call(write_287, $30.1, "  mov ")
  .loc 2 817 13
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $31.1:rax 
  # $32.1: @String = load_struct_member(register.1, name_q)
  .loc 2 817 52
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $31.1:rax $32.1:r15 
  # $33.1: @FILE = call(write_287, $31.1, $32.1)
  .loc 2 817 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $33.1:rax 
  # $34.1: @FILE = call(write_287, $33.1, ", ")
  .loc 2 817 13
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $34.1:rax 
  # $35.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 817 87
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rbx:[rbp-40] $34.1:rax $35.1:r15 
  # $36.1: @FILE = call(write_51, $34.1, $35.1)
  .loc 2 817 13
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $36.1:rax 
  # $37.1: @FILE = call(end_line_290, $36.1)
  .loc 2 817 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_30__37:
  # $26.1: @String = call(clone_295, "Unsupported value type: ")
  .loc 2 819 24
  lea rdi, .LABEL__string_81[rip] # "Unsupported value type: "
  call clone_295
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $26.1:rax 
  # $27.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  .loc 2 819 65
  mov rbx, [rbp-32]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:rbx:[rbp-32] mc_value.1:[rbp-40] $26.1:rax $27.1:r15 
  # $28.1: @String = load_struct_member($27.1, name)
  .loc 2 819 65
  mov r14, r15
  add r14, 8
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:rbx:[rbp-32] mc_value.1:[rbp-40] $26.1:rax $28.1:r14 
  # $29.1: @String = call(append_304, $26.1, $28.1)
  .loc 2 819 24
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $26.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $29.1:rax 
  # call(abort_33, self.1, $29.1)
  .loc 2 819 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_33
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: ir_value_type.1
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
.LABEL__generate_load_value_30__14:
  # $10.1: @String = call(clone_295, "Unsupported value type: ")
  .loc 2 822 20
  lea rdi, .LABEL__string_81[rip] # "Unsupported value type: "
  call clone_295
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $10.1:rax 
  # $11.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  .loc 2 822 61
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:rbx:[rbp-8] $10.1:rax $11.1:r15 
  # $12.1: @String = load_struct_member($11.1, name)
  .loc 2 822 61
  mov r14, r15
  add r14, 8
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:rbx:[rbp-8] $10.1:rax $12.1:r14 
  # $13.1: @String = call(append_304, $10.1, $12.1)
  .loc 2 822 20
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $10.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $13.1:rax 
  # call(abort_33, self.1, $13.1)
  .loc 2 822 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_33
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: register.1
  # [discarded value]: ir_value.1
  # [live values]: 
.LABEL__generate_load_value_30__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_value_30__stack_frame_size: .word 48

  .loc 2 826 1
  .text
get_offset_31:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_offset_31__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_offset_31__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  # offset.1: Int = 0
  .loc 2 827 5
  xor rax, rax
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax 
  # struct_type.1: @IR_Struct_Type = load_struct_member(struct_type_member.1, struct_type)
  .loc 2 828 20
  mov rbx, [rsi+0]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx 
  # $2.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  .loc 2 829 9
  mov r15, [rbx+16]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $2.1:r15 
  # $3.1: Boolean = $2.1 != null
  .loc 2 829 9
  cmp r15, 0
  setne r14b
  # [discarded value]: $2.1
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $3.1:r14 
  # jump($3.1, block.2, block.3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  jz .LABEL__get_offset_31__3
.LABEL__get_offset_31__2:
  # $4.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  .loc 2 830 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $4.1:rbx 
  # offset.2: Int = call(get_type_size_52, self.1, $4.1)
  .loc 2 830 18
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_52
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:rax:[rbp-8] 
  # jump(block.3)
  mov [rbp-8], rax
.LABEL__get_offset_31__3:
  # offset.7: Int = phi(offset.1, offset.2)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] 
  # $6.1: @List = load_struct_member(struct_type.1, members)
  .loc 2 832 40
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] $6.1:rbx 
  # current_struct_type_member_item.1: @List_Item = load_struct_member($6.1, first_item)
  .loc 2 832 40
  mov r15, [rbx+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:r15 
  # jump(block.4)
  mov [rbp-40], r15
.LABEL__get_offset_31__4:
  # offset.6: Int = phi(offset.7, offset.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] 
  # current_struct_type_member_item.2: @List_Item = phi(current_struct_type_member_item.1, current_struct_type_member_item.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
  # $8.1: Boolean = current_struct_type_member_item.2 != null
  .loc 2 833 12
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] $8.1:rax 
  # jump($8.1, block.5, block.6)
  test al, al
  jz .LABEL__get_offset_31__6
.LABEL__get_offset_31__5:
  # current_struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(current_struct_type_member_item.2, data)
  .loc 2 834 39
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-40] current_struct_type_member.1:rbx 
  # $11.1: Boolean = current_struct_type_member.1 == struct_type_member.1
  .loc 2 835 13
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-40] current_struct_type_member.1:rbx $11.1:r15 
  # jump($11.1, block.7, block.8)
  test r15b, r15b
  mov [rbp-48], rbx
  jz .LABEL__get_offset_31__8
.LABEL__get_offset_31__7:
  # return(offset.6)
  .loc 2 836 13
  mov rax, [rbp-8]
  jmp .LABEL__get_offset_31__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] 
.LABEL__get_offset_31__8:
  # $12.1: @IR_Type = load_struct_member(current_struct_type_member.1, type)
  .loc 2 838 46
  mov rax, [rbp-48]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:rax:[rbp-48] $12.1:rbx 
  # $13.1: Int = call(get_type_size_52, self.1, $12.1)
  .loc 2 838 27
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_52
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] $13.1:rax 
  # offset.5: Int = offset.6 + $13.1
  .loc 2 838 18
  mov rbx, [rbp-8]
  add rbx, rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] offset.5:rbx:[rbp-8] 
  # current_struct_type_member_item.5: @List_Item = load_struct_member(current_struct_type_member_item.2, next_item)
  .loc 2 839 43
  mov rax, [rbp-40]
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] offset.5:rbx:[rbp-8] current_struct_type_member_item.5:r15:[rbp-40] 
  # jump(block.4)
  mov [rbp-8], rbx
  mov [rbp-40], r15
  jmp .LABEL__get_offset_31__4
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] offset.5:[rbp-8] current_struct_type_member_item.5:[rbp-40] 
  # [discarded value]: offset.5
  # [discarded value]: current_struct_type_member_item.5
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] 
  # [discarded value]: current_struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
.LABEL__get_offset_31__6:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 841 5
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
  # [discarded value]: offset.6
  # [discarded value]: current_struct_type_member_item.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] 
  # [discarded value]: offset.7
  # [discarded value]: current_struct_type_member_item.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] 
  # [discarded value]: offset.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: struct_type_member.1
  # [discarded value]: offset.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__get_offset_31__end:
  mov rsp, rbp
  pop rbp
  ret

get_offset_31__stack_frame_size: .word 48

  .loc 2 844 1
  .text
write_operand_32:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_operand_32__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_operand_32__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # generator.1: @MC_Generator = load_variable(generator)
  # [live values]: file.1:rdi generator.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx 
  # IR_Constant_Value.10: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx IR_Constant_Value.10:rax 
  # $1.1: Boolean = call(is_293, ir_value.1, IR_Constant_Value.10)
  .loc 2 845 9
  mov [rbp-8], rdi
  mov rdi, rdx
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_293
  # [discarded value]: IR_Constant_Value.10
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_operand_32__3
.LABEL__write_operand_32__2:
  # ir_value.1: @IR_Constant_Value = ir_value.1
  .loc 2 846 21
  mov rax, [rbp-24]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax 
  # $3.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 847 13
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax $3.1:rbx 
  # Boolean_Token.3: @Object_Type = load_variable(Boolean_Token)
  lea r15, Boolean_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax $3.1:rbx Boolean_Token.3:r15 
  # $4.1: Boolean = call(is_293, $3.1, Boolean_Token.3)
  .loc 2 847 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_293
  # [discarded value]: $3.1
  # [discarded value]: Boolean_Token.3
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.4, block.5)
  test al, al
  jz .LABEL__write_operand_32__5
.LABEL__write_operand_32__4:
  # $6.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  .loc 2 848 18
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $6.1:rbx 
  # $7.1: Boolean = load_struct_member($6.1, value)
  .loc 2 848 17
  mov r15b, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $7.1:r15 
  # jump($7.1, block.6, block.7)
  test r15b, r15b
  jz .LABEL__write_operand_32__7
.LABEL__write_operand_32__6:
  # $8.1: @FILE = call(write_286, file.1, 1)
  .loc 2 849 24
  mov rdi, [rbp-8]
  mov rsi, 1
  call write_286
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $8.1:rax 
  # return($8.1)
  .loc 2 849 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_32__7:
  # $9.1: @FILE = call(write_286, file.1, 0)
  .loc 2 851 20
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_286
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $9.1:rax 
  # return($9.1)
  .loc 2 851 13
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_32__5:
  # $10.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 853 13
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $10.1:rbx 
  # Character_Token.3: @Object_Type = load_variable(Character_Token)
  lea r15, Character_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $10.1:rbx Character_Token.3:r15 
  # $11.1: Boolean = call(is_293, $10.1, Character_Token.3)
  .loc 2 853 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $10.1
  # [discarded value]: Character_Token.3
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $11.1:rax 
  # jump($11.1, block.10, block.11)
  test al, al
  jz .LABEL__write_operand_32__11
.LABEL__write_operand_32__10:
  # $13.1: @Character_Token = load_struct_member(ir_value.1, literal)
  .loc 2 854 32
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $13.1:rbx 
  # $14.1: Int8 = load_struct_member($13.1, value)
  .loc 2 854 31
  mov r15b, [rbx+32]
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $14.1:r15 
  # $15.1: Int = cast($14.1)
  .loc 2 854 31
  mov bl, r15b
  movsx rbx, bl
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $15.1:rbx 
  # $16.1: @FILE = call(write_286, file.1, $15.1)
  .loc 2 854 20
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_286
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $16.1:rax 
  # return($16.1)
  .loc 2 854 13
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_32__11:
  # $17.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 856 13
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $17.1:rbx 
  # Integer_Token.5: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $17.1:rbx Integer_Token.5:r15 
  # $18.1: Boolean = call(is_293, $17.1, Integer_Token.5)
  .loc 2 856 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $17.1
  # [discarded value]: Integer_Token.5
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $18.1:rax 
  # jump($18.1, block.13, block.14)
  test al, al
  jz .LABEL__write_operand_32__14
.LABEL__write_operand_32__13:
  # $20.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  .loc 2 857 32
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $20.1:rbx 
  # $21.1: Int = load_struct_member($20.1, value)
  .loc 2 857 31
  mov r15, [rbx+32]
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $21.1:r15 
  # $22.1: @FILE = call(write_286, file.1, $21.1)
  .loc 2 857 20
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_286
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $22.1:rax 
  # return($22.1)
  .loc 2 857 13
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_32__14:
  # $23.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 859 13
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $23.1:rbx 
  # Null_Token.3: @Object_Type = load_variable(Null_Token)
  lea r15, Null_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] $23.1:rbx Null_Token.3:r15 
  # $24.1: Boolean = call(is_293, $23.1, Null_Token.3)
  .loc 2 859 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $23.1
  # [discarded value]: Null_Token.3
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $24.1:rax 
  # jump($24.1, block.16, block.17)
  test al, al
  jz .LABEL__write_operand_32__17
.LABEL__write_operand_32__16:
  # $25.1: @FILE = call(write_286, file.1, 0)
  .loc 2 860 20
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_286
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $25.1:rax 
  # return($25.1)
  .loc 2 860 13
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_32__17:
  # $26.1: @String = call(clone_295, "Unsupported constant literal: ")
  .loc 2 862 25
  lea rdi, .LABEL__string_82[rip] # "Unsupported constant literal: "
  call clone_295
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $26.1:rax 
  # $27.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 2 862 72
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rbx:[rbp-32] $26.1:rax $27.1:r15 
  # $28.1: @Object_Type = load_struct_member($27.1, object_type)
  .loc 2 862 72
  mov r14, [r15+0]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rbx:[rbp-32] $26.1:rax $28.1:r14 
  # $29.1: @String = load_struct_member($28.1, name)
  .loc 2 862 72
  mov r15, r14
  add r15, 8
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rbx:[rbp-32] $26.1:rax $29.1:r15 
  # $30.1: @String = call(append_304, $26.1, $29.1)
  .loc 2 862 25
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $26.1
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $30.1:rax 
  # call(abort_33, generator.1, $30.1)
  .loc 2 862 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_33
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
.LABEL__write_operand_32__3:
  # IR_Variable_Value.12: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] IR_Variable_Value.12:rax 
  # $31.1: Boolean = call(is_293, ir_value.1, IR_Variable_Value.12)
  .loc 2 864 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.12
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $31.1:rax 
  # jump($31.1, block.19, block.20)
  test al, al
  jz .LABEL__write_operand_32__20
.LABEL__write_operand_32__19:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 2 865 21
  mov rax, [rbp-24]
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value_40, generator.1, ir_value.1)
  .loc 2 866 21
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_40
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax 
  # $34.1: Boolean = mc_value.1 == null
  .loc 2 867 13
  cmp rax, 0
  sete bl
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax $34.1:rbx 
  # jump($34.1, block.21, block.22)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__write_operand_32__22
.LABEL__write_operand_32__21:
  # call(abort_33, generator.1, "Invalid state")
  .loc 2 868 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__write_operand_32__22:
  # $35.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 2 870 52
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax:[rbp-32] mc_value.1:[rbp-40] $35.1:rbx 
  # value_type_size.1: Int = call(get_type_size_52, generator.1, $35.1)
  .loc 2 870 28
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_type_size_52
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:rax 
  # $37.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 871 13
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rbx:[rbp-40] value_type_size.1:rax $37.1:r15 
  # $38.1: Boolean = $37.1 != null
  .loc 2 871 13
  cmp r15, 0
  setne r14b
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rbx:[rbp-40] value_type_size.1:rax $38.1:r14 
  # jump($38.1, block.23, block.24)
  test r14b, r14b
  mov [rbp-48], rax
  jz .LABEL__write_operand_32__24
.LABEL__write_operand_32__23:
  # $39.1: Boolean = value_type_size.1 == 8
  .loc 2 872 17
  cmp QWORD PTR [rbp-48], 8
  sete al
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $39.1:rax 
  # jump($39.1, block.25, block.26)
  test al, al
  jz .LABEL__write_operand_32__26
.LABEL__write_operand_32__25:
  # $40.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 873 35
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $40.1:rbx 
  # $41.1: @String = load_struct_member($40.1, name_q)
  .loc 2 873 35
  mov r15, [rbx+8]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $41.1:r15 
  # $42.1: @FILE = call(write_287, file.1, $41.1)
  .loc 2 873 24
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_287
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $42.1:rax 
  # return($42.1)
  .loc 2 873 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__26:
  # $43.1: Boolean = value_type_size.1 == 4
  .loc 2 875 17
  cmp QWORD PTR [rbp-48], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $43.1:rax 
  # jump($43.1, block.28, block.29)
  test al, al
  jz .LABEL__write_operand_32__29
.LABEL__write_operand_32__28:
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 876 35
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $44.1:rbx 
  # $45.1: @String = load_struct_member($44.1, name_d)
  .loc 2 876 35
  mov r15, [rbx+16]
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $45.1:r15 
  # $46.1: @FILE = call(write_287, file.1, $45.1)
  .loc 2 876 24
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_287
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $46.1:rax 
  # return($46.1)
  .loc 2 876 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__29:
  # $47.1: Boolean = value_type_size.1 == 2
  .loc 2 878 17
  cmp QWORD PTR [rbp-48], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $47.1:rax 
  # jump($47.1, block.31, block.32)
  test al, al
  jz .LABEL__write_operand_32__32
.LABEL__write_operand_32__31:
  # $48.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 879 35
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $48.1:rbx 
  # $49.1: @String = load_struct_member($48.1, name_w)
  .loc 2 879 35
  mov r15, [rbx+24]
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $49.1:r15 
  # $50.1: @FILE = call(write_287, file.1, $49.1)
  .loc 2 879 24
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_287
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $50.1:rax 
  # return($50.1)
  .loc 2 879 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__32:
  # $51.1: Boolean = value_type_size.1 == 1
  .loc 2 881 17
  cmp QWORD PTR [rbp-48], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $51.1:rax 
  # jump($51.1, block.34, block.35)
  test al, al
  jz .LABEL__write_operand_32__35
.LABEL__write_operand_32__34:
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 882 35
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $52.1:rbx 
  # $53.1: @String = load_struct_member($52.1, name_b)
  .loc 2 882 35
  mov r15, [rbx+32]
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $53.1:r15 
  # $54.1: @FILE = call(write_287, file.1, $53.1)
  .loc 2 882 24
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_287
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $54.1:rax 
  # return($54.1)
  .loc 2 882 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__35:
  # $55.1: @String = call(clone_295, "Unsupported type size: ")
  .loc 2 884 29
  lea rdi, .LABEL__string_83[rip] # "Unsupported type size: "
  call clone_295
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $55.1:rax 
  # $56.1: @String = call(append_303, $55.1, value_type_size.1)
  .loc 2 884 29
  mov rdi, rax
  mov rsi, [rbp-48]
  call append_303
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $56.1:rax 
  # call(abort_33, generator.1, $56.1)
  .loc 2 884 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_33
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__24:
  # $57.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 886 13
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $57.1:rbx 
  # $58.1: Boolean = $57.1 != null
  .loc 2 886 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax:[rbp-40] value_type_size.1:[rbp-48] $58.1:r15 
  # jump($58.1, block.37, block.38)
  test r15b, r15b
  jz .LABEL__write_operand_32__38
.LABEL__write_operand_32__37:
  # $59.1: Boolean = value_type_size.1 == 8
  .loc 2 887 17
  cmp QWORD PTR [rbp-48], 8
  sete al
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $59.1:rax 
  # jump($59.1, block.39, block.40)
  test al, al
  jz .LABEL__write_operand_32__40
.LABEL__write_operand_32__39:
  # $60.1: @FILE = call(write_287, file.1, "QWORD PTR ")
  .loc 2 888 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_69[rip] # "QWORD PTR "
  call write_287
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $60.1:rax 
  # $61.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 888 55
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rbx:[rbp-40] value_type_size.1:[rbp-48] $60.1:rax $61.1:r15 
  # $62.1: @FILE = call(write_51, $60.1, $61.1)
  .loc 2 888 24
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $62.1:rax 
  # return($62.1)
  .loc 2 888 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__40:
  # $63.1: Boolean = value_type_size.1 == 4
  .loc 2 890 17
  cmp QWORD PTR [rbp-48], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $63.1:rax 
  # jump($63.1, block.42, block.43)
  test al, al
  jz .LABEL__write_operand_32__43
.LABEL__write_operand_32__42:
  # $64.1: @FILE = call(write_287, file.1, "DWORD PTR ")
  .loc 2 891 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_70[rip] # "DWORD PTR "
  call write_287
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $64.1:rax 
  # $65.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 891 55
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rbx:[rbp-40] value_type_size.1:[rbp-48] $64.1:rax $65.1:r15 
  # $66.1: @FILE = call(write_51, $64.1, $65.1)
  .loc 2 891 24
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $64.1
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $66.1:rax 
  # return($66.1)
  .loc 2 891 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__43:
  # $67.1: Boolean = value_type_size.1 == 2
  .loc 2 893 17
  cmp QWORD PTR [rbp-48], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $67.1:rax 
  # jump($67.1, block.45, block.46)
  test al, al
  jz .LABEL__write_operand_32__46
.LABEL__write_operand_32__45:
  # $68.1: @FILE = call(write_287, file.1, "WORD PTR ")
  .loc 2 894 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_71[rip] # "WORD PTR "
  call write_287
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $68.1:rax 
  # $69.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 894 54
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rbx:[rbp-40] value_type_size.1:[rbp-48] $68.1:rax $69.1:r15 
  # $70.1: @FILE = call(write_51, $68.1, $69.1)
  .loc 2 894 24
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $70.1:rax 
  # return($70.1)
  .loc 2 894 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__46:
  # $71.1: Boolean = value_type_size.1 == 1
  .loc 2 896 17
  cmp QWORD PTR [rbp-48], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $71.1:rax 
  # jump($71.1, block.48, block.49)
  test al, al
  jz .LABEL__write_operand_32__49
.LABEL__write_operand_32__48:
  # $72.1: @FILE = call(write_287, file.1, "BYTE PTR ")
  .loc 2 897 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_72[rip] # "BYTE PTR "
  call write_287
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $72.1:rax 
  # $73.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 897 54
  mov rbx, [rbp-40]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rbx:[rbp-40] value_type_size.1:[rbp-48] $72.1:rax $73.1:r15 
  # $74.1: @FILE = call(write_51, $72.1, $73.1)
  .loc 2 897 24
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $74.1:rax 
  # return($74.1)
  .loc 2 897 17
  jmp .LABEL__write_operand_32__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__49:
  # $75.1: @String = call(clone_295, "Unsupported type size: ")
  .loc 2 899 29
  lea rdi, .LABEL__string_83[rip] # "Unsupported type size: "
  call clone_295
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $75.1:rax 
  # $76.1: @String = call(append_303, $75.1, value_type_size.1)
  .loc 2 899 29
  mov rdi, rax
  mov rsi, [rbp-48]
  call append_303
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $76.1:rax 
  # call(abort_33, generator.1, $76.1)
  .loc 2 899 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_33
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_32__38:
  # call(abort_33, generator.1, "Invalid state")
  .loc 2 901 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [discarded value]: value_type_size.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: ir_value.1
  # [discarded value]: mc_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
.LABEL__write_operand_32__20:
  # $77.1: @String = call(clone_295, "Unsupported value: ")
  .loc 2 903 21
  lea rdi, .LABEL__string_84[rip] # "Unsupported value: "
  call clone_295
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $77.1:rax 
  # $78.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  .loc 2 903 57
  mov rbx, [rbp-24]
  mov r15, [rbx+0]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $77.1:rax $78.1:r15 
  # $79.1: @String = load_struct_member($78.1, name)
  .loc 2 903 57
  mov r14, r15
  add r14, 8
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $77.1:rax $79.1:r14 
  # $80.1: @String = call(append_304, $77.1, $79.1)
  .loc 2 903 21
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $77.1
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $80.1:rax 
  # call(abort_33, generator.1, $80.1)
  .loc 2 903 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_33
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: file.1
  # [discarded value]: generator.1
  # [discarded value]: ir_value.1
  # [live values]: 
.LABEL__write_operand_32__end:
  mov rsp, rbp
  pop rbp
  ret

write_operand_32__stack_frame_size: .word 48

  .loc 2 906 1
  .text
abort_33:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_33__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_33__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: self.1:rdi message.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 907 5
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: message.1:rsi $1.1:rax 
  # $2.1: @FILE = call(flush_291, $1.1)
  .loc 2 907 5
  mov rdi, rax
  mov [rbp-8], rsi
  call flush_291
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-8] 
  # $3.1: @String = call(clone_295, "[Generator] ")
  .loc 2 908 11
  lea rdi, .LABEL__string_85[rip] # "[Generator] "
  call clone_295
  # [live values]: message.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append_304, $3.1, message.1)
  .loc 2 908 11
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_304
  # [discarded value]: message.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # call(abort_292, $4.1)
  .loc 2 908 5
  mov rdi, rax
  call abort_292
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__abort_33__end:
  mov rsp, rbp
  pop rbp
  ret

abort_33__stack_frame_size: .word 16

  .loc 2 935 1
  .text
create_mc_generator_34:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_generator_34__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_generator_34__1:
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: output_file_path.1:rdi 
  # $1.1: @Int8 = load_struct_member(output_file_path.1, data)
  .loc 2 938 29
  mov rax, [rdi+0]
  # [live values]: output_file_path.1:rdi $1.1:rax 
  # $2.1: @Int8 = load_struct_member("w", data)
  .loc 2 938 52
  lea rbx, .LABEL__string_9[rip] # "w"
  mov r15, [rbx+0]
  # [live values]: output_file_path.1:rdi $1.1:rax $2.1:r15 
  # $3.1: @FILE = call(fopen, $1.1, $2.1)
  .loc 2 938 23
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: output_file_path.1:[rbp-8] $3.1:rax 
  # $4.1: @MC_Register_RAX = new(MC_Register_RAX)
  .loc 2 915 34
  mov [rbp-16], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RAX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_q, "rax")
  lea rbx, .LABEL__string_86[rip] # "rax"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_d, "eax")
  lea rbx, .LABEL__string_87[rip] # "eax"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_w, "ax")
  lea rbx, .LABEL__string_88[rip] # "ax"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name_b, "al")
  lea rbx, .LABEL__string_89[rip] # "al"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  # $5.1: @MC_Register_RCX = new(MC_Register_RCX)
  .loc 2 916 34
  mov [rbp-24], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RCX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_q, "rcx")
  lea rbx, .LABEL__string_90[rip] # "rcx"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_d, "ecx")
  lea rbx, .LABEL__string_91[rip] # "ecx"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_w, "cx")
  lea rbx, .LABEL__string_92[rip] # "cx"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name_b, "cl")
  lea rbx, .LABEL__string_93[rip] # "cl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # $6.1: @MC_Register_RDX = new(MC_Register_RDX)
  .loc 2 917 34
  mov [rbp-32], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RDX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_q, "rdx")
  lea rbx, .LABEL__string_94[rip] # "rdx"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_d, "edx")
  lea rbx, .LABEL__string_95[rip] # "edx"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_w, "dx")
  lea rbx, .LABEL__string_96[rip] # "dx"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name_b, "dl")
  lea rbx, .LABEL__string_97[rip] # "dl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # $7.1: @MC_Register_RBX = new(MC_Register_RBX)
  .loc 2 918 34
  mov [rbp-40], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RBX[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_q, "rbx")
  lea rbx, .LABEL__string_98[rip] # "rbx"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_d, "ebx")
  lea rbx, .LABEL__string_99[rip] # "ebx"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_w, "bx")
  lea rbx, .LABEL__string_100[rip] # "bx"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, name_b, "bl")
  lea rbx, .LABEL__string_101[rip] # "bl"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # store_struct_member($7.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # $8.1: @MC_Register_RSI = new(MC_Register_RSI)
  .loc 2 919 34
  mov [rbp-48], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RSI[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_q, "rsi")
  lea rbx, .LABEL__string_102[rip] # "rsi"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_d, "esi")
  lea rbx, .LABEL__string_103[rip] # "esi"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_w, "si")
  lea rbx, .LABEL__string_104[rip] # "si"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, name_b, "sil")
  lea rbx, .LABEL__string_105[rip] # "sil"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # $9.1: @MC_Register_RDI = new(MC_Register_RDI)
  .loc 2 920 34
  mov [rbp-56], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_RDI[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_q, "rdi")
  lea rbx, .LABEL__string_106[rip] # "rdi"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_d, "edi")
  lea rbx, .LABEL__string_107[rip] # "edi"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_w, "di")
  lea rbx, .LABEL__string_108[rip] # "di"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, name_b, "dil")
  lea rbx, .LABEL__string_109[rip] # "dil"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # store_struct_member($9.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  # $10.1: @MC_Register_R8 = new(MC_Register_R8)
  .loc 2 921 33
  mov [rbp-64], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R8[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_q, "r8")
  lea rbx, .LABEL__string_110[rip] # "r8"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_d, "r8d")
  lea rbx, .LABEL__string_111[rip] # "r8d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_w, "r8w")
  lea rbx, .LABEL__string_112[rip] # "r8w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, name_b, "r8b")
  lea rbx, .LABEL__string_113[rip] # "r8b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # store_struct_member($10.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  # $11.1: @MC_Register_R9 = new(MC_Register_R9)
  .loc 2 922 33
  mov [rbp-72], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R9[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_q, "r9")
  lea rbx, .LABEL__string_114[rip] # "r9"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_d, "r9d")
  lea rbx, .LABEL__string_115[rip] # "r9d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_w, "r9w")
  lea rbx, .LABEL__string_116[rip] # "r9w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, name_b, "r9b")
  lea rbx, .LABEL__string_117[rip] # "r9b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # store_struct_member($11.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  # $12.1: @MC_Register_R10 = new(MC_Register_R10)
  .loc 2 923 34
  mov [rbp-80], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R10[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_q, "r10")
  lea rbx, .LABEL__string_118[rip] # "r10"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_d, "r10d")
  lea rbx, .LABEL__string_119[rip] # "r10d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_w, "r10w")
  lea rbx, .LABEL__string_120[rip] # "r10w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, name_b, "r10b")
  lea rbx, .LABEL__string_121[rip] # "r10b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # store_struct_member($12.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  # $13.1: @MC_Register_R11 = new(MC_Register_R11)
  .loc 2 924 34
  mov [rbp-88], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R11[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_q, "r11")
  lea rbx, .LABEL__string_122[rip] # "r11"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_d, "r11d")
  lea rbx, .LABEL__string_123[rip] # "r11d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_w, "r11w")
  lea rbx, .LABEL__string_124[rip] # "r11w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, name_b, "r11b")
  lea rbx, .LABEL__string_125[rip] # "r11b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # store_struct_member($13.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  # $14.1: @MC_Register_R12 = new(MC_Register_R12)
  .loc 2 925 34
  mov [rbp-96], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R12[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_q, "r12")
  lea rbx, .LABEL__string_126[rip] # "r12"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_d, "r12d")
  lea rbx, .LABEL__string_127[rip] # "r12d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_w, "r12w")
  lea rbx, .LABEL__string_128[rip] # "r12w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, name_b, "r12b")
  lea rbx, .LABEL__string_129[rip] # "r12b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # store_struct_member($14.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  # $15.1: @MC_Register_R13 = new(MC_Register_R13)
  .loc 2 926 34
  mov [rbp-104], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R13[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_q, "r13")
  lea rbx, .LABEL__string_130[rip] # "r13"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_d, "r13d")
  lea rbx, .LABEL__string_131[rip] # "r13d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_w, "r13w")
  lea rbx, .LABEL__string_132[rip] # "r13w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, name_b, "r13b")
  lea rbx, .LABEL__string_133[rip] # "r13b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # store_struct_member($15.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  # $16.1: @MC_Register_R14 = new(MC_Register_R14)
  .loc 2 927 34
  mov [rbp-112], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R14[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_q, "r14")
  lea rbx, .LABEL__string_134[rip] # "r14"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_d, "r14d")
  lea rbx, .LABEL__string_135[rip] # "r14d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_w, "r14w")
  lea rbx, .LABEL__string_136[rip] # "r14w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, name_b, "r14b")
  lea rbx, .LABEL__string_137[rip] # "r14b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # store_struct_member($16.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  # $17.1: @MC_Register_R15 = new(MC_Register_R15)
  .loc 2 928 34
  mov [rbp-120], rax
  mov rdi, 57
  call malloc
  lea rbx, MC_Register_R15[rip]
  mov [rax], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_q, "r15")
  lea rbx, .LABEL__string_138[rip] # "r15"
  mov [rax+8], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_d, "r15d")
  lea rbx, .LABEL__string_139[rip] # "r15d"
  mov [rax+16], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_w, "r15w")
  lea rbx, .LABEL__string_140[rip] # "r15w"
  mov [rax+24], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, name_b, "r15b")
  lea rbx, .LABEL__string_141[rip] # "r15b"
  mov [rax+32], rbx
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, is_reserved, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, value, null)
  mov QWORD PTR [rax+41], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # store_struct_member($17.1, loaded_value, null)
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  # $18.1: @List = new(List)
  .loc 2 932 22
  mov [rbp-128], rax
  mov rdi, 24
  call malloc
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # store_struct_member($18.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  # $19.1: @MC_Generator = new(MC_Generator)
  .loc 2 936 12
  mov [rbp-136], rax
  mov rdi, 161
  call malloc
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, output_file_path, output_file_path.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: output_file_path.1
  # [live values]: $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, output_file, $3.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, output_debug_comments, true)
  mov BYTE PTR [rax+16], 1
  # [live values]: $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_rax, $4.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+17], rbx
  # [discarded value]: $4.1
  # [live values]: $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_rcx, $5.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+25], rbx
  # [discarded value]: $5.1
  # [live values]: $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_rdx, $6.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+33], rbx
  # [discarded value]: $6.1
  # [live values]: $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_rbx, $7.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+41], rbx
  # [discarded value]: $7.1
  # [live values]: $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_rsi, $8.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+49], rbx
  # [discarded value]: $8.1
  # [live values]: $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_rdi, $9.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $9.1
  # [live values]: $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r8, $10.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: $10.1
  # [live values]: $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r9, $11.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+73], rbx
  # [discarded value]: $11.1
  # [live values]: $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r10, $12.1)
  mov rbx, [rbp-88]
  mov QWORD PTR [rax+81], rbx
  # [discarded value]: $12.1
  # [live values]: $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r11, $13.1)
  mov rbx, [rbp-96]
  mov QWORD PTR [rax+89], rbx
  # [discarded value]: $13.1
  # [live values]: $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r12, $14.1)
  mov rbx, [rbp-104]
  mov QWORD PTR [rax+97], rbx
  # [discarded value]: $14.1
  # [live values]: $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r13, $15.1)
  mov rbx, [rbp-112]
  mov QWORD PTR [rax+105], rbx
  # [discarded value]: $15.1
  # [live values]: $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r14, $16.1)
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+113], rbx
  # [discarded value]: $16.1
  # [live values]: $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, register_r15, $17.1)
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+121], rbx
  # [discarded value]: $17.1
  # [live values]: $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, first_value, null)
  mov QWORD PTR [rax+129], 0
  # [live values]: $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, last_value, null)
  mov QWORD PTR [rax+137], 0
  # [live values]: $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, stack_frame_size, 0)
  mov QWORD PTR [rax+145], 0
  # [live values]: $18.1:[rbp-136] $19.1:rax 
  # store_struct_member($19.1, strings, $18.1)
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+153], rbx
  # [discarded value]: $18.1
  # [live values]: $19.1:rax 
  # return($19.1)
  .loc 2 936 5
  jmp .LABEL__create_mc_generator_34__end
  # [discarded value]: $19.1
  # [live values]: 
.LABEL__create_mc_generator_34__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_generator_34__stack_frame_size: .word 144

  .loc 2 943 1
  .text
reset_35:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_35__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_35__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(block.2)
  mov [rbp-8], rdi
.LABEL__reset_35__2:
  # $1.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 944 12
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  # $2.1: Boolean = $1.1 != null
  .loc 2 944 12
  cmp rbx, 0
  setne r15b
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, block.3, block.4)
  test r15b, r15b
  jz .LABEL__reset_35__4
.LABEL__reset_35__3:
  # value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 945 18
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] value.1:rbx 
  # $4.1: @MC_Value = load_struct_member(value.1, next_value)
  .loc 2 946 28
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-8] value.1:rbx $4.1:r15 
  # store_struct_member(self.1, first_value, $4.1)
  .loc 2 946 9
  mov QWORD PTR [rax+129], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] value.1:rbx 
  # store_struct_member(value.1, prev_value, null)
  .loc 2 947 9
  mov QWORD PTR [rbx+0], 0
  # [live values]: self.1:rax:[rbp-8] value.1:rbx 
  # store_struct_member(value.1, next_value, null)
  .loc 2 948 9
  mov QWORD PTR [rbx+8], 0
  # [live values]: self.1:rax:[rbp-8] value.1:rbx 
  # $5.1: @MC_Register = load_struct_member(value.1, register)
  .loc 2 949 13
  mov r15, [rbx+32]
  # [discarded value]: value.1
  # [live values]: self.1:rax:[rbp-8] $5.1:r15 
  # $6.1: Boolean = $5.1 != null
  .loc 2 949 13
  cmp r15, 0
  setne bl
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  # jump($6.1, block.5, block.2)
  test bl, bl
  jz .LABEL__reset_35__2
.LABEL__reset_35__5:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 950 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__reset_35__4:
  # store_struct_member(self.1, last_value, null)
  .loc 2 953 5
  mov rax, [rbp-8]
  mov QWORD PTR [rax+137], 0
  # [live values]: self.1:rax:[rbp-8] 
  # store_struct_member(self.1, stack_frame_size, 0)
  .loc 2 954 5
  mov QWORD PTR [rax+145], 0
  # [live values]: self.1:rax:[rbp-8] 
  # return()
  jmp .LABEL__reset_35__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_35__end:
  mov rsp, rbp
  pop rbp
  ret

reset_35__stack_frame_size: .word 16

  .loc 2 957 1
  .text
find_unused_register_36:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR find_unused_register_36__stack_frame_size[rip]
  sub rsp, rax
.LABEL__find_unused_register_36__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 958 9
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = load_struct_member($1.1, is_reserved)
  .loc 2 958 9
  mov bl, [rax+40]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # $4.1: Boolean = $2.1 == false
  .loc 2 958 9
  cmp bl, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__find_unused_register_36__3
.LABEL__find_unused_register_36__2:
  # $5.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 958 51
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $5.1:rbx 
  # $6.1: @MC_Value = load_struct_member($5.1, value)
  .loc 2 958 51
  mov r15, [rbx+41]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $6.1:r15 
  # $4.2: Boolean = $6.1 == null
  .loc 2 958 51
  cmp r15, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:rbx:[rbp-1] 
  # jump(block.3)
  mov [rbp-1], bl
.LABEL__find_unused_register_36__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 2 958 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # jump($4.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__find_unused_register_36__5
.LABEL__find_unused_register_36__4:
  # $8.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 959 16
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [discarded value]: $4.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $8.1:rbx 
  # return($8.1)
  .loc 2 959 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
.LABEL__find_unused_register_36__5:
  # $9.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 2 961 9
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $9.1:rbx 
  # $10.1: Boolean = load_struct_member($9.1, is_reserved)
  .loc 2 961 9
  mov r15b, [rbx+40]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $10.1:r15 
  # $12.1: Boolean = $10.1 == false
  .loc 2 961 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:rbx 
  # jump($12.1, block.7, block.8)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__find_unused_register_36__8
.LABEL__find_unused_register_36__7:
  # $13.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 2 961 51
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $13.1:rbx 
  # $14.1: @MC_Value = load_struct_member($13.1, value)
  .loc 2 961 51
  mov r15, [rbx+41]
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $14.1:r15 
  # $12.2: Boolean = $14.1 == null
  .loc 2 961 51
  cmp r15, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:rbx:[rbp-10] 
  # jump(block.8)
  mov [rbp-10], bl
.LABEL__find_unused_register_36__8:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 2 961 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # jump($12.3, block.9, block.10)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__find_unused_register_36__10
.LABEL__find_unused_register_36__9:
  # $16.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 2 962 16
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [discarded value]: $12.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $16.1:rbx 
  # return($16.1)
  .loc 2 962 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
.LABEL__find_unused_register_36__10:
  # $17.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 2 964 9
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $17.1:rbx 
  # $18.1: Boolean = load_struct_member($17.1, is_reserved)
  .loc 2 964 9
  mov r15b, [rbx+40]
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $18.1:r15 
  # $20.1: Boolean = $18.1 == false
  .loc 2 964 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:rbx 
  # jump($20.1, block.12, block.13)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__find_unused_register_36__13
.LABEL__find_unused_register_36__12:
  # $21.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 2 964 51
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $21.1:rbx 
  # $22.1: @MC_Value = load_struct_member($21.1, value)
  .loc 2 964 51
  mov r15, [rbx+41]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $22.1:r15 
  # $20.2: Boolean = $22.1 == null
  .loc 2 964 51
  cmp r15, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:rbx:[rbp-11] 
  # jump(block.13)
  mov [rbp-11], bl
.LABEL__find_unused_register_36__13:
  # $20.3: Boolean = phi($20.1, $20.2)
  .loc 2 964 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # jump($20.3, block.14, block.15)
  mov al, [rbp-11]
  test al, al
  jz .LABEL__find_unused_register_36__15
.LABEL__find_unused_register_36__14:
  # $24.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 2 965 16
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [discarded value]: $20.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $24.1:rbx 
  # return($24.1)
  .loc 2 965 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
.LABEL__find_unused_register_36__15:
  # $25.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 2 967 9
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $25.1:rbx 
  # $26.1: Boolean = load_struct_member($25.1, is_reserved)
  .loc 2 967 9
  mov r15b, [rbx+40]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $26.1:r15 
  # $28.1: Boolean = $26.1 == false
  .loc 2 967 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:rbx 
  # jump($28.1, block.17, block.18)
  test bl, bl
  mov [rbp-12], bl
  jz .LABEL__find_unused_register_36__18
.LABEL__find_unused_register_36__17:
  # $29.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 2 967 51
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $29.1:rbx 
  # $30.1: @MC_Value = load_struct_member($29.1, value)
  .loc 2 967 51
  mov r15, [rbx+41]
  # [discarded value]: $29.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $30.1:r15 
  # $28.2: Boolean = $30.1 == null
  .loc 2 967 51
  cmp r15, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:rbx:[rbp-12] 
  # jump(block.18)
  mov [rbp-12], bl
.LABEL__find_unused_register_36__18:
  # $28.3: Boolean = phi($28.1, $28.2)
  .loc 2 967 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # jump($28.3, block.19, block.20)
  mov al, [rbp-12]
  test al, al
  jz .LABEL__find_unused_register_36__20
.LABEL__find_unused_register_36__19:
  # $32.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 2 968 16
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [discarded value]: $28.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $32.1:rbx 
  # return($32.1)
  .loc 2 968 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
.LABEL__find_unused_register_36__20:
  # $33.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 2 970 9
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $33.1:rbx 
  # $34.1: Boolean = load_struct_member($33.1, is_reserved)
  .loc 2 970 9
  mov r15b, [rbx+40]
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $34.1:r15 
  # $36.1: Boolean = $34.1 == false
  .loc 2 970 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:rbx 
  # jump($36.1, block.22, block.23)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__find_unused_register_36__23
.LABEL__find_unused_register_36__22:
  # $37.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 2 970 51
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $37.1:rbx 
  # $38.1: @MC_Value = load_struct_member($37.1, value)
  .loc 2 970 51
  mov r15, [rbx+41]
  # [discarded value]: $37.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $38.1:r15 
  # $36.2: Boolean = $38.1 == null
  .loc 2 970 51
  cmp r15, 0
  sete bl
  # [discarded value]: $38.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:rbx:[rbp-13] 
  # jump(block.23)
  mov [rbp-13], bl
.LABEL__find_unused_register_36__23:
  # $36.3: Boolean = phi($36.1, $36.2)
  .loc 2 970 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # jump($36.3, block.24, block.25)
  mov al, [rbp-13]
  test al, al
  jz .LABEL__find_unused_register_36__25
.LABEL__find_unused_register_36__24:
  # $40.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 2 971 16
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [discarded value]: $36.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $40.1:rbx 
  # return($40.1)
  .loc 2 971 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
.LABEL__find_unused_register_36__25:
  # $41.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 2 973 9
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $41.1:rbx 
  # $42.1: Boolean = load_struct_member($41.1, is_reserved)
  .loc 2 973 9
  mov r15b, [rbx+40]
  # [discarded value]: $41.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $42.1:r15 
  # $44.1: Boolean = $42.1 == false
  .loc 2 973 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $42.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:rbx 
  # jump($44.1, block.27, block.28)
  test bl, bl
  mov [rbp-14], bl
  jz .LABEL__find_unused_register_36__28
.LABEL__find_unused_register_36__27:
  # $45.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 2 973 51
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $45.1:rbx 
  # $46.1: @MC_Value = load_struct_member($45.1, value)
  .loc 2 973 51
  mov r15, [rbx+41]
  # [discarded value]: $45.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $46.1:r15 
  # $44.2: Boolean = $46.1 == null
  .loc 2 973 51
  cmp r15, 0
  sete bl
  # [discarded value]: $46.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:rbx:[rbp-14] 
  # jump(block.28)
  mov [rbp-14], bl
.LABEL__find_unused_register_36__28:
  # $44.3: Boolean = phi($44.1, $44.2)
  .loc 2 973 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # jump($44.3, block.29, block.30)
  mov al, [rbp-14]
  test al, al
  jz .LABEL__find_unused_register_36__30
.LABEL__find_unused_register_36__29:
  # $48.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 2 974 16
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [discarded value]: $44.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $48.1:rbx 
  # return($48.1)
  .loc 2 974 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
.LABEL__find_unused_register_36__30:
  # $49.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 2 976 9
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $49.1:rbx 
  # $50.1: Boolean = load_struct_member($49.1, is_reserved)
  .loc 2 976 9
  mov r15b, [rbx+40]
  # [discarded value]: $49.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $50.1:r15 
  # $52.1: Boolean = $50.1 == false
  .loc 2 976 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $50.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:rbx 
  # jump($52.1, block.32, block.33)
  test bl, bl
  mov [rbp-15], bl
  jz .LABEL__find_unused_register_36__33
.LABEL__find_unused_register_36__32:
  # $53.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 2 976 51
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $53.1:rbx 
  # $54.1: @MC_Value = load_struct_member($53.1, value)
  .loc 2 976 51
  mov r15, [rbx+41]
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $54.1:r15 
  # $52.2: Boolean = $54.1 == null
  .loc 2 976 51
  cmp r15, 0
  sete bl
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:rbx:[rbp-15] 
  # jump(block.33)
  mov [rbp-15], bl
.LABEL__find_unused_register_36__33:
  # $52.3: Boolean = phi($52.1, $52.2)
  .loc 2 976 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # jump($52.3, block.34, block.35)
  mov al, [rbp-15]
  test al, al
  jz .LABEL__find_unused_register_36__35
.LABEL__find_unused_register_36__34:
  # $56.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 2 977 16
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [discarded value]: $52.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $56.1:rbx 
  # return($56.1)
  .loc 2 977 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
.LABEL__find_unused_register_36__35:
  # $57.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 2 979 9
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $57.1:rbx 
  # $58.1: Boolean = load_struct_member($57.1, is_reserved)
  .loc 2 979 9
  mov r15b, [rbx+40]
  # [discarded value]: $57.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $58.1:r15 
  # $60.1: Boolean = $58.1 == false
  .loc 2 979 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $58.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:rbx 
  # jump($60.1, block.37, block.38)
  test bl, bl
  mov [rbp-16], bl
  jz .LABEL__find_unused_register_36__38
.LABEL__find_unused_register_36__37:
  # $61.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 2 979 51
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $61.1:rbx 
  # $62.1: @MC_Value = load_struct_member($61.1, value)
  .loc 2 979 51
  mov r15, [rbx+41]
  # [discarded value]: $61.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $62.1:r15 
  # $60.2: Boolean = $62.1 == null
  .loc 2 979 51
  cmp r15, 0
  sete bl
  # [discarded value]: $62.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:rbx:[rbp-16] 
  # jump(block.38)
  mov [rbp-16], bl
.LABEL__find_unused_register_36__38:
  # $60.3: Boolean = phi($60.1, $60.2)
  .loc 2 979 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # jump($60.3, block.39, block.40)
  mov al, [rbp-16]
  test al, al
  jz .LABEL__find_unused_register_36__40
.LABEL__find_unused_register_36__39:
  # $64.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 2 980 16
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [discarded value]: $60.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $64.1:rbx 
  # return($64.1)
  .loc 2 980 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
.LABEL__find_unused_register_36__40:
  # $65.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 982 9
  mov rax, [rbp-9]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $65.1:rbx 
  # $66.1: Boolean = load_struct_member($65.1, is_reserved)
  .loc 2 982 9
  mov r15b, [rbx+40]
  # [discarded value]: $65.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $66.1:r15 
  # $68.1: Boolean = $66.1 == false
  .loc 2 982 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $66.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:rbx 
  # jump($68.1, block.42, block.43)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__find_unused_register_36__43
.LABEL__find_unused_register_36__42:
  # $69.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 982 50
  mov rax, [rbp-9]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $69.1:rbx 
  # $70.1: @MC_Value = load_struct_member($69.1, value)
  .loc 2 982 50
  mov r15, [rbx+41]
  # [discarded value]: $69.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $70.1:r15 
  # $68.2: Boolean = $70.1 == null
  .loc 2 982 50
  cmp r15, 0
  sete bl
  # [discarded value]: $70.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:rbx:[rbp-17] 
  # jump(block.43)
  mov [rbp-17], bl
.LABEL__find_unused_register_36__43:
  # $68.3: Boolean = phi($68.1, $68.2)
  .loc 2 982 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # jump($68.3, block.44, block.45)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__find_unused_register_36__45
.LABEL__find_unused_register_36__44:
  # $72.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 983 16
  mov rax, [rbp-9]
  mov rbx, [rax+73]
  # [discarded value]: $68.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $72.1:rbx 
  # return($72.1)
  .loc 2 983 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
.LABEL__find_unused_register_36__45:
  # $73.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 985 9
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $73.1:rbx 
  # $74.1: Boolean = load_struct_member($73.1, is_reserved)
  .loc 2 985 9
  mov r15b, [rbx+40]
  # [discarded value]: $73.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $74.1:r15 
  # $76.1: Boolean = $74.1 == false
  .loc 2 985 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $74.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:rbx 
  # jump($76.1, block.47, block.48)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__find_unused_register_36__48
.LABEL__find_unused_register_36__47:
  # $77.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 985 50
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $77.1:rbx 
  # $78.1: @MC_Value = load_struct_member($77.1, value)
  .loc 2 985 50
  mov r15, [rbx+41]
  # [discarded value]: $77.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $78.1:r15 
  # $76.2: Boolean = $78.1 == null
  .loc 2 985 50
  cmp r15, 0
  sete bl
  # [discarded value]: $78.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:rbx:[rbp-18] 
  # jump(block.48)
  mov [rbp-18], bl
.LABEL__find_unused_register_36__48:
  # $76.3: Boolean = phi($76.1, $76.2)
  .loc 2 985 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # jump($76.3, block.49, block.50)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__find_unused_register_36__50
.LABEL__find_unused_register_36__49:
  # $80.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 986 16
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [discarded value]: $76.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $80.1:rbx 
  # return($80.1)
  .loc 2 986 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
.LABEL__find_unused_register_36__50:
  # $81.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 988 9
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $81.1:rbx 
  # $82.1: Boolean = load_struct_member($81.1, is_reserved)
  .loc 2 988 9
  mov r15b, [rbx+40]
  # [discarded value]: $81.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $82.1:r15 
  # $84.1: Boolean = $82.1 == false
  .loc 2 988 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $82.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:rbx 
  # jump($84.1, block.52, block.53)
  test bl, bl
  mov [rbp-19], bl
  jz .LABEL__find_unused_register_36__53
.LABEL__find_unused_register_36__52:
  # $85.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 988 51
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $85.1:rbx 
  # $86.1: @MC_Value = load_struct_member($85.1, value)
  .loc 2 988 51
  mov r15, [rbx+41]
  # [discarded value]: $85.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $86.1:r15 
  # $84.2: Boolean = $86.1 == null
  .loc 2 988 51
  cmp r15, 0
  sete bl
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:rbx:[rbp-19] 
  # jump(block.53)
  mov [rbp-19], bl
.LABEL__find_unused_register_36__53:
  # $84.3: Boolean = phi($84.1, $84.2)
  .loc 2 988 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # jump($84.3, block.54, block.55)
  mov al, [rbp-19]
  test al, al
  jz .LABEL__find_unused_register_36__55
.LABEL__find_unused_register_36__54:
  # $88.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 989 16
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [discarded value]: $84.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $88.1:rbx 
  # return($88.1)
  .loc 2 989 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
.LABEL__find_unused_register_36__55:
  # $89.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 991 9
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $89.1:rbx 
  # $90.1: Boolean = load_struct_member($89.1, is_reserved)
  .loc 2 991 9
  mov r15b, [rbx+40]
  # [discarded value]: $89.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $90.1:r15 
  # $92.1: Boolean = $90.1 == false
  .loc 2 991 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $90.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:rbx 
  # jump($92.1, block.57, block.58)
  test bl, bl
  mov [rbp-20], bl
  jz .LABEL__find_unused_register_36__58
.LABEL__find_unused_register_36__57:
  # $93.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 991 51
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $93.1:rbx 
  # $94.1: @MC_Value = load_struct_member($93.1, value)
  .loc 2 991 51
  mov r15, [rbx+41]
  # [discarded value]: $93.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $94.1:r15 
  # $92.2: Boolean = $94.1 == null
  .loc 2 991 51
  cmp r15, 0
  sete bl
  # [discarded value]: $94.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:rbx:[rbp-20] 
  # jump(block.58)
  mov [rbp-20], bl
.LABEL__find_unused_register_36__58:
  # $92.3: Boolean = phi($92.1, $92.2)
  .loc 2 991 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # jump($92.3, block.59, block.60)
  mov al, [rbp-20]
  test al, al
  jz .LABEL__find_unused_register_36__60
.LABEL__find_unused_register_36__59:
  # $96.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 992 16
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [discarded value]: $92.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $96.1:rbx 
  # return($96.1)
  .loc 2 992 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
.LABEL__find_unused_register_36__60:
  # $97.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 994 9
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $97.1:rbx 
  # $98.1: Boolean = load_struct_member($97.1, is_reserved)
  .loc 2 994 9
  mov r15b, [rbx+40]
  # [discarded value]: $97.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $98.1:r15 
  # $100.1: Boolean = $98.1 == false
  .loc 2 994 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $98.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:rbx 
  # jump($100.1, block.62, block.63)
  test bl, bl
  mov [rbp-21], bl
  jz .LABEL__find_unused_register_36__63
.LABEL__find_unused_register_36__62:
  # $101.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 994 51
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $101.1:rbx 
  # $102.1: @MC_Value = load_struct_member($101.1, value)
  .loc 2 994 51
  mov r15, [rbx+41]
  # [discarded value]: $101.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $102.1:r15 
  # $100.2: Boolean = $102.1 == null
  .loc 2 994 51
  cmp r15, 0
  sete bl
  # [discarded value]: $102.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:rbx:[rbp-21] 
  # jump(block.63)
  mov [rbp-21], bl
.LABEL__find_unused_register_36__63:
  # $100.3: Boolean = phi($100.1, $100.2)
  .loc 2 994 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # jump($100.3, block.64, block.65)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__find_unused_register_36__65
.LABEL__find_unused_register_36__64:
  # $104.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 995 16
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [discarded value]: $100.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $104.1:rbx 
  # return($104.1)
  .loc 2 995 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
.LABEL__find_unused_register_36__65:
  # $105.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 997 9
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $105.1:rbx 
  # $106.1: Boolean = load_struct_member($105.1, is_reserved)
  .loc 2 997 9
  mov r15b, [rbx+40]
  # [discarded value]: $105.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $106.1:r15 
  # $108.1: Boolean = $106.1 == false
  .loc 2 997 9
  cmp r15b, 0
  sete bl
  # [discarded value]: $106.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:rbx 
  # jump($108.1, block.67, block.68)
  test bl, bl
  mov [rbp-22], bl
  jz .LABEL__find_unused_register_36__68
.LABEL__find_unused_register_36__67:
  # $109.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 997 51
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $109.1:rbx 
  # $110.1: @MC_Value = load_struct_member($109.1, value)
  .loc 2 997 51
  mov r15, [rbx+41]
  # [discarded value]: $109.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $110.1:r15 
  # $108.2: Boolean = $110.1 == null
  .loc 2 997 51
  cmp r15, 0
  sete bl
  # [discarded value]: $110.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:rbx:[rbp-22] 
  # jump(block.68)
  mov [rbp-22], bl
.LABEL__find_unused_register_36__68:
  # $108.3: Boolean = phi($108.1, $108.2)
  .loc 2 997 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # jump($108.3, block.69, block.70)
  mov al, [rbp-22]
  test al, al
  jz .LABEL__find_unused_register_36__70
.LABEL__find_unused_register_36__69:
  # $112.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 998 16
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [discarded value]: $108.3
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $112.1:rbx 
  # return($112.1)
  .loc 2 998 9
  mov rax, rbx
  jmp .LABEL__find_unused_register_36__end
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
.LABEL__find_unused_register_36__70:
  # call(abort_33, self.1, "All registered are used")
  .loc 2 1000 5
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_142[rip] # "All registered are used"
  call abort_33
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [discarded value]: $108.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] 
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [discarded value]: $100.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] 
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [discarded value]: $92.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] 
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [discarded value]: $84.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] 
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [discarded value]: $76.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [discarded value]: $68.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [discarded value]: $60.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] 
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [discarded value]: $52.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [discarded value]: $44.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [discarded value]: $36.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [discarded value]: $28.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [discarded value]: $20.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__find_unused_register_36__end:
  mov rsp, rbp
  pop rbp
  ret

find_unused_register_36__stack_frame_size: .word 32

  .loc 2 1003 1
  .text
create_mc_value_37:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_value_37__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_value_37__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_instruction.1: @IR_Instruction = load_variable(ir_instruction)
  # [live values]: self.1:rdi ir_instruction.1:rsi 
  # $1.1: @MC_Value = load_struct_member(self.1, last_value)
  .loc 2 1005 22
  mov rax, [rdi+137]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax 
  # $2.1: @IR_Variable_Value = load_struct_member(ir_instruction.1, result_value)
  .loc 2 1006 29
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: @MC_Value = new(MC_Value)
  .loc 2 1004 17
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 48
  call malloc
  # [live values]: self.1:[rbp-32] ir_instruction.1:[rbp-24] $1.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, prev_value, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] ir_instruction.1:[rbp-24] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, next_value, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] ir_instruction.1:[rbp-24] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, ir_instruction, ir_instruction.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-32] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, ir_variable_value, $2.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, register, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-32] $3.1:rax 
  # store_struct_member($3.1, address, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-32] $3.1:rax 
  # mc_value.1: @MC_Value = $3.1
  .loc 2 1004 5
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] mc_value.1:rax 
  # $4.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1009 9
  mov rbx, [rbp-32]
  mov r15, [rbx+129]
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $4.1:r15 
  # $5.1: Boolean = $4.1 == null
  .loc 2 1009 9
  cmp r15, 0
  sete r14b
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $5.1:r14 
  # jump($5.1, block.2, block.4)
  test r14b, r14b
  mov [rbp-40], rax
  jz .LABEL__create_mc_value_37__4
.LABEL__create_mc_value_37__2:
  # store_struct_member(self.1, first_value, mc_value.1)
  .loc 2 1010 9
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+129], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] 
  # jump(block.3)
.LABEL__create_mc_value_37__3:
  # store_struct_member(self.1, last_value, mc_value.1)
  .loc 2 1014 5
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+137], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] 
  # return()
  jmp .LABEL__create_mc_value_37__end
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__create_mc_value_37__4:
  # $6.1: @MC_Value = load_struct_member(self.1, last_value)
  .loc 2 1012 9
  mov rax, [rbp-32]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-32] mc_value.1:[rbp-40] $6.1:rbx 
  # store_struct_member($6.1, next_value, mc_value.1)
  .loc 2 1012 9
  mov r15, [rbp-40]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-32] mc_value.1:r15:[rbp-40] 
  # jump(block.3)
  jmp .LABEL__create_mc_value_37__3
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__create_mc_value_37__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_value_37__stack_frame_size: .word 48

  .loc 2 1017 1
  .text
map_variable_value_38:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_38__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_38__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx 
  # $1.1: Boolean = address.1 == null
  .loc 2 1018 9
  cmp rdx, 0
  sete al
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__map_variable_value_38__3
.LABEL__map_variable_value_38__2:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 1019 9
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] 
.LABEL__map_variable_value_38__3:
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1021 17
  mov rax, [rbp-24]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:rbx 
  # jump(block.4)
  mov [rbp-32], rbx
.LABEL__map_variable_value_38__4:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.7)
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # $3.1: Boolean = mc_value.2 != null
  .loc 2 1022 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  jz .LABEL__map_variable_value_38__6
.LABEL__map_variable_value_38__5:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1023 13
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] $4.1:rbx 
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  .loc 2 1023 13
  mov r15, [rbx+24]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] $5.1:r15 
  # $6.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  .loc 2 1023 52
  mov rbx, [rbp-16]
  mov r14, [rbx+24]
  # [live values]: self.1:[rbp-24] ir_variable_value.1:rbx:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] $5.1:r15 $6.1:r14 
  # $7.1: Boolean = $5.1 == $6.1
  .loc 2 1023 13
  cmp r15, r14
  sete r13b
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:rbx:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] $7.1:r13 
  # jump($7.1, block.7, block.8)
  test r13b, r13b
  jz .LABEL__map_variable_value_38__8
.LABEL__map_variable_value_38__7:
  # $8.1: @MC_Address = load_struct_member(mc_value.2, address)
  .loc 2 1024 17
  mov rax, [rbp-32]
  mov rbx, [rax+40]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] $8.1:rbx 
  # $9.1: Boolean = $8.1 != null
  .loc 2 1024 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] $9.1:r15 
  # jump($9.1, block.9, block.10)
  test r15b, r15b
  jz .LABEL__map_variable_value_38__10
.LABEL__map_variable_value_38__9:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 1025 17
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
.LABEL__map_variable_value_38__10:
  # store_struct_member(mc_value.2, address, address.1)
  .loc 2 1027 13
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:rbx:[rbp-8] mc_value.1:[rbp-32] mc_value.2:rax:[rbp-32] 
  # jump(block.8)
.LABEL__map_variable_value_38__8:
  # mc_value.7: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1029 20
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] mc_value.7:rbx:[rbp-32] 
  # jump(block.4)
  mov [rbp-32], rbx
  jmp .LABEL__map_variable_value_38__4
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] mc_value.7:[rbp-32] 
  # [discarded value]: mc_value.7
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
.LABEL__map_variable_value_38__6:
  # return()
  jmp .LABEL__map_variable_value_38__end
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: address.1
  # [live values]: 
.LABEL__map_variable_value_38__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_38__stack_frame_size: .word 32

  .loc 2 1033 1
  .text
map_variable_value_39:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_39__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_39__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1034 17
  mov rax, [rdi+129]
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx mc_value.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__map_variable_value_39__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.8)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  # $3.1: Boolean = mc_value.2 != null
  .loc 2 1035 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  mov [rbp-33], al
  jz .LABEL__map_variable_value_39__6
.LABEL__map_variable_value_39__5:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1035 32
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $4.1:rbx 
  # $3.2: Boolean = $4.1 != ir_variable_value.1
  .loc 2 1035 32
  cmp rbx, QWORD PTR [rbp-24]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $3.2:r15:[rbp-33] 
  # jump(block.6)
  mov [rbp-33], r15b
.LABEL__map_variable_value_39__6:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 2 1035 12
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, block.3, block.4)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__map_variable_value_39__4
.LABEL__map_variable_value_39__3:
  # $6.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1036 13
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $6.1:rbx $3.2:[rbp-33] 
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  .loc 2 1036 13
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $3.2:[rbp-33] 
  # $8.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  .loc 2 1036 52
  mov rbx, [rbp-24]
  mov r14, [rbx+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $8.1:r14 $3.2:[rbp-33] 
  # $10.1: Boolean = $7.1 == $8.1
  .loc 2 1036 13
  cmp r15, r14
  sete r13b
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:r13 $3.2:[rbp-33] 
  # jump($10.1, block.7, block.8)
  test r13b, r13b
  mov [rbp-34], r13b
  jz .LABEL__map_variable_value_39__8
.LABEL__map_variable_value_39__7:
  # $11.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 2 1036 82
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $11.1:rbx 
  # $10.2: Boolean = $11.1 != null
  .loc 2 1036 82
  cmp rbx, 0
  setne r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:r15:[rbp-34] 
  # jump(block.8)
  mov [rbp-34], r15b
.LABEL__map_variable_value_39__8:
  # $10.3: Boolean = phi($10.1, $10.2)
  .loc 2 1036 13
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, block.9, block.10)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__map_variable_value_39__10
.LABEL__map_variable_value_39__9:
  # $13.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 2 1037 35
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] $13.1:rbx 
  # call(release_register_44, self.1, $13.1)
  .loc 2 1037 13
  mov rdi, [rbp-32]
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] 
  # jump(block.10)
.LABEL__map_variable_value_39__10:
  # mc_value.8: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1039 20
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] mc_value.8:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__map_variable_value_39__2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] mc_value.8:[rbp-8] 
  # [discarded value]: mc_value.8
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
.LABEL__map_variable_value_39__4:
  # $15.1: Boolean = mc_value.2 == null
  .loc 2 1041 9
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:rax $3.2:[rbp-33] 
  # jump($15.1, block.11, block.12)
  test al, al
  jz .LABEL__map_variable_value_39__12
.LABEL__map_variable_value_39__11:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 1042 9
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
.LABEL__map_variable_value_39__12:
  # $16.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1044 9
  mov rax, [rbp-16]
  mov rbx, [rax+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $16.1:rbx 
  # $17.1: Boolean = $16.1 != null
  .loc 2 1044 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $17.1:r15 
  # jump($17.1, block.13, block.14)
  test r15b, r15b
  jz .LABEL__map_variable_value_39__14
.LABEL__map_variable_value_39__13:
  # $18.1: @String = call(clone_295, "Register ")
  .loc 2 1045 20
  lea rdi, .LABEL__string_143[rip] # "Register "
  call clone_295
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $18.1:rax 
  # $19.1: @String = load_struct_member(register.1, name_q)
  .loc 2 1045 46
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $18.1:rax $19.1:r15 
  # $20.1: @String = call(append_304, $18.1, $19.1)
  .loc 2 1045 20
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $20.1:rax 
  # $21.1: @String = call(append_304, $20.1, " already mapped to variable: ")
  .loc 2 1045 20
  mov rdi, rax
  lea rsi, .LABEL__string_144[rip] # " already mapped to variable: "
  call append_304
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $21.1:rax 
  # $22.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1045 110
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $21.1:rax $22.1:r15 
  # $23.1: @IR_Variable_Value = load_struct_member($22.1, ir_variable_value)
  .loc 2 1045 110
  mov r14, [r15+24]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $21.1:rax $23.1:r14 
  # $24.1: @IR_Variable = load_struct_member($23.1, variable)
  .loc 2 1045 110
  mov r15, [r14+24]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $21.1:rax $24.1:r15 
  # $25.1: @String = load_struct_member($24.1, name)
  .loc 2 1045 110
  mov r14, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $21.1:rax $25.1:r14 
  # $26.1: @String = call(append_304, $21.1, $25.1)
  .loc 2 1045 20
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $21.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $26.1:rax 
  # $27.1: @String = call(append_302, $26.1, '.')
  .loc 2 1045 20
  mov rdi, rax
  mov sil, 46
  call append_302
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $27.1:rax 
  # $28.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1045 177
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $27.1:rax $28.1:r15 
  # $29.1: @IR_Variable_Value = load_struct_member($28.1, ir_variable_value)
  .loc 2 1045 177
  mov r14, [r15+24]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $27.1:rax $29.1:r14 
  # $30.1: Int = load_struct_member($29.1, version)
  .loc 2 1045 177
  mov r15, [r14+32]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $27.1:rax $30.1:r15 
  # $31.1: @String = call(append_303, $27.1, $30.1)
  .loc 2 1045 20
  mov rdi, rax
  mov rsi, r15
  call append_303
  # [discarded value]: $27.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $31.1:rax 
  # call(abort_33, self.1, $31.1)
  .loc 2 1045 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_33
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
.LABEL__map_variable_value_39__14:
  # store_struct_member(mc_value.2, register, register.1)
  .loc 2 1047 5
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # store_struct_member(register.1, value, mc_value.2)
  .loc 2 1048 5
  mov QWORD PTR [rbx+41], rax
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # return(mc_value.2)
  .loc 2 1049 5
  jmp .LABEL__map_variable_value_39__end
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: mc_value.2
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: register.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__map_variable_value_39__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_39__stack_frame_size: .word 48

  .loc 2 1052 1
  .text
get_value_40:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_40__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_40__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1053 17
  mov rax, [rdi+129]
  # [discarded value]: self.1
  # [live values]: ir_variable_value.1:rsi mc_value.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_value_40__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  # $3.1: Boolean = mc_value.2 != null
  .loc 2 1054 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_value_40__6
.LABEL__get_value_40__5:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1054 32
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $4.1:rbx 
  # $3.2: Boolean = $4.1 != ir_variable_value.1
  .loc 2 1054 32
  cmp rbx, QWORD PTR [rbp-16]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $3.2:r15:[rbp-17] 
  # jump(block.6)
  mov [rbp-17], r15b
.LABEL__get_value_40__6:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 2 1054 12
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__get_value_40__4
.LABEL__get_value_40__3:
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1055 20
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $3.3
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:rbx:[rbp-8] $3.2:[rbp-17] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__get_value_40__2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:[rbp-8] $3.2:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
.LABEL__get_value_40__4:
  # return(mc_value.2)
  .loc 2 1057 5
  mov rax, [rbp-8]
  jmp .LABEL__get_value_40__end
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: mc_value.2
  # [discarded value]: $3.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: ir_variable_value.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__get_value_40__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_40__stack_frame_size: .word 32

  .loc 2 1060 1
  .text
spill_local_variable_41:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_local_variable_41__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_local_variable_41__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  # $1.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 2 1061 9
  mov rax, [rsi+24]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  # $2.1: @IR_Variable = load_struct_member($1.1, variable)
  .loc 2 1061 9
  mov rbx, [rax+24]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx 
  # IR_Global_Variable.4: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx IR_Global_Variable.4:rax 
  # $3.1: Boolean = call(is_293, $2.1, IR_Global_Variable.4)
  .loc 2 1061 9
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: $2.1
  # [discarded value]: IR_Global_Variable.4
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__spill_local_variable_41__3
.LABEL__spill_local_variable_41__2:
  # call(abort_33, self.1, "Invalid state")
  .loc 2 1063 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_33
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
.LABEL__spill_local_variable_41__3:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 2 1065 46
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $4.1:rbx 
  # $5.1: @IR_Type = load_struct_member($4.1, type)
  .loc 2 1065 46
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $5.1:r15 
  # variable_type_size.1: Int = call(get_type_size_52, self.1, $5.1)
  .loc 2 1065 27
  mov rdi, [rbp-8]
  mov rsi, r15
  call get_type_size_52
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:rax 
  # $7.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 1066 9
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:rax $7.1:r15 
  # $8.1: Boolean = $7.1 == null
  .loc 2 1066 9
  cmp r15, 0
  sete r14b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:rax $8.1:r14 
  # jump($8.1, block.4, block.5)
  test r14b, r14b
  mov [rbp-24], rax
  jz .LABEL__spill_local_variable_41__5
.LABEL__spill_local_variable_41__4:
  # offset.1: Int = 0
  .loc 2 1067 9
  xor rax, rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:rax 
  # other_mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1068 27
  mov rbx, [rbp-8]
  mov r15, [rbx+129]
  # [live values]: self.1:rbx:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:rax other_mc_value.1:r15 
  # jump(block.6)
  mov [rbp-32], rax
  mov [rbp-40], r15
.LABEL__spill_local_variable_41__6:
  # offset.8: Int = phi(offset.1, offset.9)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] 
  # other_mc_value.2: @MC_Value = phi(other_mc_value.1, other_mc_value.5)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
  # $10.1: Boolean = other_mc_value.2 != null
  .loc 2 1069 16
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] $10.1:rax 
  # jump($10.1, block.7, block.8)
  test al, al
  jz .LABEL__spill_local_variable_41__8
.LABEL__spill_local_variable_41__7:
  # other_mc_value_address.1: @MC_Address = load_struct_member(other_mc_value.2, address)
  .loc 2 1070 39
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:rax:[rbp-40] other_mc_value_address.1:rbx 
  # $13.1: Boolean = other_mc_value_address.1 != null
  .loc 2 1071 17
  cmp rbx, 0
  setne r15b
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:rax:[rbp-40] other_mc_value_address.1:rbx $13.1:r15 
  # jump($13.1, block.9, block.10)
  test r15b, r15b
  mov [rbp-48], rbx
  mov [rbp-49], r15b
  jz .LABEL__spill_local_variable_41__10
.LABEL__spill_local_variable_41__9:
  # MC_Local_Variable_Address.2: @Object_Type = load_variable(MC_Local_Variable_Address)
  lea rax, MC_Local_Variable_Address[rip]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] MC_Local_Variable_Address.2:rax 
  # $13.2: Boolean = call(is_293, other_mc_value_address.1, MC_Local_Variable_Address.2)
  .loc 2 1071 51
  mov rdi, [rbp-48]
  mov rsi, rax
  call is_293
  # [discarded value]: MC_Local_Variable_Address.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:rax:[rbp-49] 
  # jump(block.10)
  mov [rbp-49], al
.LABEL__spill_local_variable_41__10:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 2 1071 17
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] $13.3:[rbp-49] 
  # jump($13.3, block.11, block.12)
  mov al, [rbp-49]
  test al, al
  jz .LABEL__spill_local_variable_41__12
.LABEL__spill_local_variable_41__11:
  # other_mc_value_address.1: @MC_Local_Variable_Address = other_mc_value_address.1
  .loc 2 1072 43
  mov rax, [rbp-48]
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax 
  # $16.1: Int = load_struct_member(other_mc_value_address.1, offset)
  .loc 2 1073 30
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax $16.1:rbx 
  # $17.1: Boolean = offset.8 < $16.1
  .loc 2 1073 21
  cmp QWORD PTR [rbp-32], rbx
  setl r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax $17.1:r15 
  # jump($17.1, block.13, block.12)
  test r15b, r15b
  mov [rbp-57], rax
  jz .LABEL__spill_local_variable_41__12
.LABEL__spill_local_variable_41__13:
  # offset.3: Int = load_struct_member(other_mc_value_address.1, offset)
  .loc 2 1074 30
  mov rax, [rbp-57]
  mov rbx, [rax+8]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax:[rbp-57] offset.3:rbx:[rbp-32] 
  # jump(block.12)
  mov [rbp-32], rbx
.LABEL__spill_local_variable_41__12:
  # offset.9: Int = phi(offset.3, offset.8)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.9:[rbp-32] offset.3:[rbp-32] 
  # other_mc_value.5: @MC_Value = load_struct_member(other_mc_value.2, next_value)
  .loc 2 1077 30
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.9:[rbp-32] other_mc_value.5:rbx:[rbp-40] offset.3:[rbp-32] 
  # jump(block.6)
  mov [rbp-40], rbx
  jmp .LABEL__spill_local_variable_41__6
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.9:[rbp-32] other_mc_value.5:[rbp-40] offset.3:[rbp-32] 
  # [discarded value]: offset.9
  # [discarded value]: other_mc_value.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.3:[rbp-32] 
  # [discarded value]: offset.3
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] 
  # [discarded value]: other_mc_value_address.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] 
  # [discarded value]: other_mc_value_address.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
.LABEL__spill_local_variable_41__8:
  # offset.5: Int = offset.8 + variable_type_size.1
  .loc 2 1079 18
  mov rax, [rbp-32]
  add rax, QWORD PTR [rbp-24]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rax:[rbp-32] 
  # $21.1: Int = load_struct_member(self.1, stack_frame_size)
  .loc 2 1080 22
  mov rbx, [rbp-8]
  mov r15, [rbx+145]
  # [live values]: self.1:rbx:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rax:[rbp-32] $21.1:r15 
  # $22.1: Boolean = offset.5 > $21.1
  .loc 2 1080 13
  cmp rax, r15
  setg r14b
  # [discarded value]: $21.1
  # [live values]: self.1:rbx:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rax:[rbp-32] $22.1:r14 
  # jump($22.1, block.15, block.16)
  test r14b, r14b
  mov [rbp-32], rax
  jz .LABEL__spill_local_variable_41__16
.LABEL__spill_local_variable_41__15:
  # store_struct_member(self.1, stack_frame_size, offset.5)
  .loc 2 1081 13
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+145], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rbx:[rbp-32] 
  # jump(block.16)
.LABEL__spill_local_variable_41__16:
  # $23.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 2 1083 33
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $23.1:rbx 
  # $24.1: @MC_Local_Variable_Address = new(MC_Local_Variable_Address)
  .loc 2 1083 61
  mov [rbp-48], rbx
  mov rdi, 16
  call malloc
  lea rbx, MC_Local_Variable_Address[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $23.1:[rbp-48] $24.1:rax 
  # store_struct_member($24.1, offset, offset.5)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rbx:[rbp-32] $23.1:[rbp-48] $24.1:rax 
  # call(map_variable_value_38, self.1, $23.1, $24.1)
  .loc 2 1083 9
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov rdx, rax
  call map_variable_value_38
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.5)
.LABEL__spill_local_variable_41__5:
  # $25.1: Boolean = variable_type_size.1 == 8
  .loc 2 1085 9
  cmp QWORD PTR [rbp-24], 8
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] $25.1:rax offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump($25.1, block.17, block.19)
  test al, al
  jz .LABEL__spill_local_variable_41__19
.LABEL__spill_local_variable_41__17:
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1086 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $56.1:rbx 
  # $57.1: @FILE = call(write_287, $56.1, "  mov ")
  .loc 2 1086 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $57.1:rax 
  # $58.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 1086 48
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $57.1:rax $58.1:r15 
  # $59.1: @FILE = call(write_51, $57.1, $58.1)
  .loc 2 1086 9
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $57.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $59.1:rax 
  # $60.1: @FILE = call(write_287, $59.1, ", ")
  .loc 2 1086 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $60.1:rax 
  # $61.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 1086 84
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $60.1:rax $61.1:r15 
  # $62.1: @String = load_struct_member($61.1, name_q)
  .loc 2 1086 84
  mov r14, [r15+8]
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $60.1:rax $62.1:r14 
  # $63.1: @FILE = call(write_287, $60.1, $62.1)
  .loc 2 1086 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $60.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $63.1:rax 
  # $64.1: @FILE = call(end_line_290, $63.1)
  .loc 2 1086 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
.LABEL__spill_local_variable_41__18:
  # return()
  jmp .LABEL__spill_local_variable_41__end
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
.LABEL__spill_local_variable_41__19:
  # $26.1: Boolean = variable_type_size.1 == 4
  .loc 2 1087 16
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $26.1:rax 
  # jump($26.1, block.20, block.22)
  test al, al
  jz .LABEL__spill_local_variable_41__22
.LABEL__spill_local_variable_41__20:
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1088 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $47.1:rbx 
  # $48.1: @FILE = call(write_287, $47.1, "  mov ")
  .loc 2 1088 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $48.1:rax 
  # $49.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 1088 48
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $48.1:rax $49.1:r15 
  # $50.1: @FILE = call(write_51, $48.1, $49.1)
  .loc 2 1088 9
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $48.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $50.1:rax 
  # $51.1: @FILE = call(write_287, $50.1, ", ")
  .loc 2 1088 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $51.1:rax 
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 1088 84
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $51.1:rax $52.1:r15 
  # $53.1: @String = load_struct_member($52.1, name_d)
  .loc 2 1088 84
  mov r14, [r15+16]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $51.1:rax $53.1:r14 
  # $54.1: @FILE = call(write_287, $51.1, $53.1)
  .loc 2 1088 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $51.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $54.1:rax 
  # $55.1: @FILE = call(end_line_290, $54.1)
  .loc 2 1088 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
  jmp .LABEL__spill_local_variable_41__18
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
.LABEL__spill_local_variable_41__22:
  # $27.1: Boolean = variable_type_size.1 == 2
  .loc 2 1089 16
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $27.1:rax 
  # jump($27.1, block.23, block.25)
  test al, al
  jz .LABEL__spill_local_variable_41__25
.LABEL__spill_local_variable_41__23:
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1090 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $38.1:rbx 
  # $39.1: @FILE = call(write_287, $38.1, "  mov ")
  .loc 2 1090 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $39.1:rax 
  # $40.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 1090 48
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $39.1:rax $40.1:r15 
  # $41.1: @FILE = call(write_51, $39.1, $40.1)
  .loc 2 1090 9
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $41.1:rax 
  # $42.1: @FILE = call(write_287, $41.1, ", ")
  .loc 2 1090 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $42.1:rax 
  # $43.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 1090 84
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $42.1:rax $43.1:r15 
  # $44.1: @String = load_struct_member($43.1, name_w)
  .loc 2 1090 84
  mov r14, [r15+24]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $42.1:rax $44.1:r14 
  # $45.1: @FILE = call(write_287, $42.1, $44.1)
  .loc 2 1090 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $42.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $45.1:rax 
  # $46.1: @FILE = call(end_line_290, $45.1)
  .loc 2 1090 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
  jmp .LABEL__spill_local_variable_41__18
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
.LABEL__spill_local_variable_41__25:
  # $28.1: Boolean = variable_type_size.1 == 1
  .loc 2 1091 16
  cmp QWORD PTR [rbp-24], 1
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $28.1:rax 
  # jump($28.1, block.26, block.18)
  test al, al
  jz .LABEL__spill_local_variable_41__18
.LABEL__spill_local_variable_41__26:
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1092 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $29.1:rbx 
  # $30.1: @FILE = call(write_287, $29.1, "  mov ")
  .loc 2 1092 9
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  mov "
  call write_287
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $30.1:rax 
  # $31.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 2 1092 48
  mov rbx, [rbp-16]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $30.1:rax $31.1:r15 
  # $32.1: @FILE = call(write_51, $30.1, $31.1)
  .loc 2 1092 9
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $32.1:rax 
  # $33.1: @FILE = call(write_287, $32.1, ", ")
  .loc 2 1092 9
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $33.1:rax 
  # $34.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 2 1092 84
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $33.1:rax $34.1:r15 
  # $35.1: @String = load_struct_member($34.1, name_b)
  .loc 2 1092 84
  mov r14, [r15+32]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $33.1:rax $35.1:r14 
  # $36.1: @FILE = call(write_287, $33.1, $35.1)
  .loc 2 1092 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $33.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $36.1:rax 
  # $37.1: @FILE = call(end_line_290, $36.1)
  .loc 2 1092 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
  jmp .LABEL__spill_local_variable_41__18
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
  # [discarded value]: offset.8
  # [discarded value]: other_mc_value.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] 
  # [discarded value]: offset.1
  # [discarded value]: other_mc_value.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] 
  # [discarded value]: variable_type_size.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__spill_local_variable_41__end:
  mov rsp, rbp
  pop rbp
  ret

spill_local_variable_41__stack_frame_size: .word 64

  .loc 2 1096 1
  .text
spill_global_variable_42:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_global_variable_42__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_global_variable_42__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  # $1.1: @String = call(clone_295, "TODO: spill global variable ")
  .loc 2 1097 16
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_145[rip] # "TODO: spill global variable "
  mov [rbp-16], rsi
  call clone_295
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $1.1:rax 
  # $2.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 2 1097 61
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] $1.1:rax $2.1:r15 
  # $3.1: @IR_Variable = load_struct_member($2.1, variable)
  .loc 2 1097 61
  mov rbx, [r15+24]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:rax $3.1:rbx 
  # $4.1: @String = load_struct_member($3.1, name)
  .loc 2 1097 61
  mov r15, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $1.1:rax $4.1:r15 
  # $5.1: @String = call(append_304, $1.1, $4.1)
  .loc 2 1097 16
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $1.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # call(abort_33, self.1, $5.1)
  .loc 2 1097 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: self.1
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__spill_global_variable_42__end:
  mov rsp, rbp
  pop rbp
  ret

spill_global_variable_42__stack_frame_size: .word 16

  .loc 2 1100 1
  .text
release_all_registers_43:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_all_registers_43__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_all_registers_43__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 1101 27
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  # call(release_register_44, self.1, $1.1)
  .loc 2 1101 5
  mov rsi, rax
  mov [rbp-8], rdi
  call release_register_44
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # $2.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 1102 27
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $2.1:rbx 
  # call(release_register_44, self.1, $2.1)
  .loc 2 1102 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 1103 27
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # call(release_register_44, self.1, $3.1)
  .loc 2 1103 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 2 1104 27
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  # call(release_register_44, self.1, $4.1)
  .loc 2 1104 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 1105 27
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  # call(release_register_44, self.1, $5.1)
  .loc 2 1105 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 1106 27
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  # call(release_register_44, self.1, $6.1)
  .loc 2 1106 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  # $7.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 1107 27
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  # call(release_register_44, self.1, $7.1)
  .loc 2 1107 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # $8.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 1108 27
  mov rax, [rbp-8]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  # call(release_register_44, self.1, $8.1)
  .loc 2 1108 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # $9.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 2 1109 27
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  # call(release_register_44, self.1, $9.1)
  .loc 2 1109 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  # $10.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 2 1110 27
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  # call(release_register_44, self.1, $10.1)
  .loc 2 1110 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  # $11.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 2 1111 27
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  # call(release_register_44, self.1, $11.1)
  .loc 2 1111 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  # $12.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 2 1112 27
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  # call(release_register_44, self.1, $12.1)
  .loc 2 1112 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  # $13.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 2 1113 27
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  # call(release_register_44, self.1, $13.1)
  .loc 2 1113 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # $14.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 2 1114 27
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  # call(release_register_44, self.1, $14.1)
  .loc 2 1114 5
  mov rdi, rax
  mov rsi, rbx
  call release_register_44
  # [discarded value]: self.1
  # [discarded value]: $14.1
  # [live values]: 
  # return()
  jmp .LABEL__release_all_registers_43__end
  # [live values]: 
.LABEL__release_all_registers_43__end:
  mov rsp, rbp
  pop rbp
  ret

release_all_registers_43__stack_frame_size: .word 16

  .loc 2 1117 1
  .text
release_register_44:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_register_44__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_register_44__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # mc_value.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1118 17
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax 
  # $2.1: Boolean = mc_value.1 != null
  .loc 2 1119 9
  cmp rax, 0
  setne bl
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__release_register_44__3
.LABEL__release_register_44__2:
  # $3.1: @MC_Value = load_struct_member(register.1, loaded_value)
  .loc 2 1120 13
  mov rax, [rbp-16]
  mov rbx, [rax+49]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 != mc_value.1
  .loc 2 1120 13
  cmp rbx, QWORD PTR [rbp-8]
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] $4.1:r15 
  # jump($4.1, block.4, block.5)
  test r15b, r15b
  jz .LABEL__release_register_44__5
.LABEL__release_register_44__4:
  # persist_value.1: Boolean = false
  .loc 2 1121 13
  mov al, 0
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:rax 
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 2 1123 47
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:rbx:[rbp-8] persist_value.1:rax $5.1:r15 
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  .loc 2 1123 47
  mov r14, [r15+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:rbx:[rbp-8] persist_value.1:rax $6.1:r14 
  # ir_value_user_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  .loc 2 1123 47
  mov r15, [r14+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:rbx:[rbp-8] persist_value.1:rax ir_value_user_instruction_item.1:r15 
  # jump(block.6)
  mov [rbp-25], al
  mov [rbp-33], r15
.LABEL__release_register_44__6:
  # ir_value_user_instruction_item.2: @List_Item = phi(ir_value_user_instruction_item.1, ir_value_user_instruction_item.5)
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] 
  # $8.1: Boolean = ir_value_user_instruction_item.2 != null
  .loc 2 1124 20
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] $8.1:rax 
  # jump($8.1, block.7, block.8)
  test al, al
  jz .LABEL__release_register_44__8
.LABEL__release_register_44__7:
  # ir_value_user_instruction.1: @IR_Instruction = load_struct_member(ir_value_user_instruction_item.2, data)
  .loc 2 1125 46
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:rax:[rbp-33] ir_value_user_instruction.1:rbx 
  # $11.1: Boolean = load_struct_member(ir_value_user_instruction.1, is_generated)
  .loc 2 1126 21
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:rax:[rbp-33] ir_value_user_instruction.1:rbx $11.1:r15 
  # $13.1: Boolean = $11.1 == false
  .loc 2 1126 21
  cmp r15b, 0
  sete r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:rax:[rbp-33] ir_value_user_instruction.1:rbx $13.1:r14 
  # jump($13.1, block.10, block.9)
  test r14b, r14b
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__release_register_44__9
.LABEL__release_register_44__10:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 2 1126 21
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] $13.3:[rbp-42] 
  # jump($13.3, block.11, block.12)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__release_register_44__12
.LABEL__release_register_44__11:
  # persist_value.2: Boolean = true
  .loc 2 1127 21
  mov al, 1
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:rax:[rbp-25] 
  # jump(block.8)
  mov [rbp-25], al
.LABEL__release_register_44__8:
  # persist_value.3: Boolean = phi(persist_value.2, persist_value.1)
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.3:[rbp-25] persist_value.2:[rbp-25] 
  # jump(persist_value.3, block.14, block.5)
  mov al, [rbp-25]
  test al, al
  jz .LABEL__release_register_44__5
.LABEL__release_register_44__14:
  # call(spill_local_variable_41, self.1, mc_value.1)
  .loc 2 1134 17
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call spill_local_variable_41
  # [discarded value]: persist_value.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # jump(block.5)
.LABEL__release_register_44__5:
  # store_struct_member(mc_value.1, register, null)
  .loc 2 1138 9
  mov rax, [rbp-8]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:rax:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # store_struct_member(register.1, value, null)
  .loc 2 1139 9
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+41], 0
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:rax:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # store_struct_member(register.1, loaded_value, null)
  .loc 2 1140 9
  mov QWORD PTR [rbx+49], 0
  # [live values]: self.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:rax:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # jump(block.3)
.LABEL__release_register_44__3:
  # return()
  jmp .LABEL__release_register_44__end
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] persist_value.2:[rbp-25] 
  # [discarded value]: persist_value.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] 
.LABEL__release_register_44__12:
  # ir_value_user_instruction_item.5: @List_Item = load_struct_member(ir_value_user_instruction_item.2, next_item)
  .loc 2 1130 50
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] ir_value_user_instruction_item.5:rbx:[rbp-33] 
  # jump(block.6)
  mov [rbp-33], rbx
  jmp .LABEL__release_register_44__6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] ir_value_user_instruction_item.5:[rbp-33] 
  # [discarded value]: ir_value_user_instruction_item.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] 
.LABEL__release_register_44__9:
  # IR_Phi_Instruction.3: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] IR_Phi_Instruction.3:rax 
  # $13.2: Boolean = call(is_293, ir_value_user_instruction.1, IR_Phi_Instruction.3)
  .loc 2 1126 72
  mov rdi, [rbp-41]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Phi_Instruction.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:rax:[rbp-42] 
  # jump(block.10)
  mov [rbp-42], al
  jmp .LABEL__release_register_44__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [discarded value]: ir_value_user_instruction.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] 
  # [discarded value]: ir_value_user_instruction_item.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] 
  # [discarded value]: persist_value.1
  # [discarded value]: ir_value_user_instruction_item.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: register.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__release_register_44__end:
  mov rsp, rbp
  pop rbp
  ret

release_register_44__stack_frame_size: .word 48

  .loc 2 1144 1
  .text
discard_used_values_45:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR discard_used_values_45__stack_frame_size[rip]
  sub rsp, rax
.LABEL__discard_used_values_45__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # removed_values.1: Int = 0
  .loc 2 1145 5
  xor rax, rax
  # [live values]: self.1:rdi removed_values.1:rax 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1147 17
  mov rbx, [rdi+129]
  # [live values]: self.1:rdi removed_values.1:rax mc_value.1:rbx 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rdi
.LABEL__discard_used_values_45__2:
  # removed_values.5: Int = phi(removed_values.1, removed_values.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.19)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # $2.1: Boolean = mc_value.2 != null
  .loc 2 1148 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__discard_used_values_45__4
.LABEL__discard_used_values_45__3:
  # $3.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 2 1149 13
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $3.1:rbx 
  # $5.1: Boolean = load_struct_member($3.1, is_generated)
  .loc 2 1149 13
  mov r15b, [rbx+56]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:r15 
  # jump($5.1, block.5, block.6)
  test r15b, r15b
  mov [rbp-25], r15b
  jz .LABEL__discard_used_values_45__6
.LABEL__discard_used_values_45__5:
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 2 1149 53
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $6.1:rbx 
  # $7.1: @IR_Block = load_struct_member($6.1, parent_block)
  .loc 2 1149 53
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $7.1:r15 
  # $5.2: Boolean = load_struct_member($7.1, is_being_generated)
  .loc 2 1149 53
  mov bl, [r15+48]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:rbx:[rbp-25] 
  # jump(block.6)
  mov [rbp-25], bl
.LABEL__discard_used_values_45__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 2 1149 13
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] $5.3:[rbp-25] 
  # jump($5.3, block.7, block.8)
  mov al, [rbp-25]
  test al, al
  jz .LABEL__discard_used_values_45__8
.LABEL__discard_used_values_45__7:
  # discard_value.1: Boolean = true
  .loc 2 1150 13
  mov al, 1
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax 
  # value_is_phi_argument.1: Boolean = false
  .loc 2 1151 13
  mov bl, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax value_is_phi_argument.1:rbx 
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1153 38
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax value_is_phi_argument.1:rbx $9.1:r14 
  # $10.1: @List = load_struct_member($9.1, user_instructions)
  .loc 2 1153 38
  mov r13, [r14+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax value_is_phi_argument.1:rbx $10.1:r13 
  # user_instruction_item.1: @List_Item = load_struct_member($10.1, first_item)
  .loc 2 1153 38
  mov r14, [r13+0]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax value_is_phi_argument.1:rbx user_instruction_item.1:r14 
  # jump(block.9)
  mov [rbp-26], al
  mov [rbp-27], bl
  mov [rbp-35], r14
.LABEL__discard_used_values_45__9:
  # value_is_phi_argument.5: Boolean = phi(value_is_phi_argument.1, value_is_phi_argument.7)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] 
  # user_instruction_item.7: @List_Item = phi(user_instruction_item.1, user_instruction_item.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] 
  # discard_value.2: Boolean = phi(discard_value.1, discard_value.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] 
  # $12.1: Boolean = discard_value.2
  .loc 2 1154 20
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:rax 
  # jump($12.1, block.12, block.13)
  test al, al
  mov [rbp-36], al
  jz .LABEL__discard_used_values_45__13
.LABEL__discard_used_values_45__12:
  # $12.2: Boolean = user_instruction_item.7 != null
  .loc 2 1154 37
  cmp QWORD PTR [rbp-35], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:rax:[rbp-36] 
  # jump(block.13)
  mov [rbp-36], al
.LABEL__discard_used_values_45__13:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 2 1154 20
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $12.3:[rbp-36] 
  # jump($12.3, block.10, block.11)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__discard_used_values_45__11
.LABEL__discard_used_values_45__10:
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instruction_item.7, data)
  .loc 2 1155 37
  mov rax, [rbp-35]
  mov rbx, [rax+16]
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:rax:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rbx $12.2:[rbp-36] 
  # IR_Phi_Instruction.4: @Object_Type = load_variable(IR_Phi_Instruction)
  lea r15, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:rax:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rbx IR_Phi_Instruction.4:r15 $12.2:[rbp-36] 
  # $16.1: Boolean = call(is_293, user_instruction.1, IR_Phi_Instruction.4)
  .loc 2 1156 21
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-44], rbx
  call is_293
  # [discarded value]: IR_Phi_Instruction.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $16.1:rax $12.2:[rbp-36] 
  # jump($16.1, block.14, block.15)
  test al, al
  jz .LABEL__discard_used_values_45__15
.LABEL__discard_used_values_45__14:
  # value_is_phi_argument.2: Boolean = true
  .loc 2 1157 21
  mov al, 1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:rax:[rbp-27] 
  # jump(block.15)
  mov [rbp-27], al
.LABEL__discard_used_values_45__15:
  # value_is_phi_argument.7: Boolean = phi(value_is_phi_argument.2, value_is_phi_argument.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] 
  # $17.1: Boolean = load_struct_member(user_instruction.1, is_generated)
  .loc 2 1159 21
  mov rax, [rbp-44]
  mov bl, [rax+56]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rax:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $17.1:rbx 
  # $18.1: Boolean = $17.1 == false
  .loc 2 1159 21
  cmp bl, 0
  sete r15b
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rax:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $18.1:r15 
  # jump($18.1, block.16, block.18)
  test r15b, r15b
  jz .LABEL__discard_used_values_45__18
.LABEL__discard_used_values_45__16:
  # discard_value.4: Boolean = false
  .loc 2 1161 21
  mov al, 0
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] discard_value.4:rax:[rbp-26] 
  # jump(block.17)
  mov [rbp-26], al
.LABEL__discard_used_values_45__17:
  # discard_value.6: Boolean = phi(discard_value.4, discard_value.3, discard_value.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] discard_value.4:[rbp-26] discard_value.6:[rbp-26] 
  # user_instruction_item.5: @List_Item = load_struct_member(user_instruction_item.7, next_item)
  .loc 2 1166 41
  mov rax, [rbp-35]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] discard_value.4:[rbp-26] discard_value.6:[rbp-26] user_instruction_item.5:rbx:[rbp-35] 
  # jump(block.9)
  mov [rbp-35], rbx
  jmp .LABEL__discard_used_values_45__9
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] discard_value.4:[rbp-26] discard_value.6:[rbp-26] user_instruction_item.5:[rbp-35] 
  # [discarded value]: discard_value.6
  # [discarded value]: user_instruction_item.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] discard_value.4:[rbp-26] 
  # [discarded value]: discard_value.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] 
.LABEL__discard_used_values_45__18:
  # $19.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  .loc 2 1162 28
  mov rax, [rbp-44]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rax:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $19.1:rbx 
  # $20.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 2 1162 61
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rax:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $19.1:rbx $20.1:r14 
  # $21.1: @IR_Block = load_struct_member($20.1, parent_block)
  .loc 2 1162 61
  mov r13, [r14+32]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rax:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $19.1:rbx $21.1:r13 
  # $23.1: Boolean = $19.1 != $21.1
  .loc 2 1162 28
  cmp rbx, r13
  setne r14b
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:rax:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:r14 
  # jump($23.1, block.19, block.20)
  test r14b, r14b
  mov [rbp-45], r14b
  jz .LABEL__discard_used_values_45__20
.LABEL__discard_used_values_45__19:
  # $24.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 2 1162 101
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $24.1:rbx 
  # $25.1: @IR_Block = load_struct_member($24.1, parent_block)
  .loc 2 1162 101
  mov r15, [rbx+32]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $25.1:r15 
  # $26.1: Boolean = load_struct_member($25.1, is_generated)
  .loc 2 1162 101
  mov bl, [r15+49]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $26.1:rbx 
  # $23.2: Boolean = $26.1 == false
  .loc 2 1162 101
  cmp bl, 0
  sete r15b
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:r15:[rbp-45] 
  # jump(block.20)
  mov [rbp-45], r15b
.LABEL__discard_used_values_45__20:
  # $23.3: Boolean = phi($23.1, $23.2)
  .loc 2 1162 28
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:[rbp-45] $23.3:[rbp-45] 
  # jump($23.3, block.21, block.17)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__discard_used_values_45__17
.LABEL__discard_used_values_45__21:
  # discard_value.3: Boolean = false
  .loc 2 1164 21
  mov al, 0
  # [discarded value]: $23.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:[rbp-45] discard_value.3:rax:[rbp-26] 
  # jump(block.17)
  mov [rbp-26], al
  jmp .LABEL__discard_used_values_45__17
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:[rbp-45] discard_value.3:[rbp-26] 
  # [discarded value]: discard_value.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:[rbp-45] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:[rbp-45] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] $23.2:[rbp-45] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] $23.1:[rbp-45] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] value_is_phi_argument.7:[rbp-27] 
  # [discarded value]: value_is_phi_argument.7
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] value_is_phi_argument.2:[rbp-27] 
  # [discarded value]: value_is_phi_argument.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] user_instruction.1:[rbp-44] $12.2:[rbp-36] 
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
.LABEL__discard_used_values_45__11:
  # jump(discard_value.2, block.23, block.8)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__discard_used_values_45__8
.LABEL__discard_used_values_45__23:
  # $29.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 2 1170 21
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $29.1:rbx 
  # $30.1: Boolean = $29.1 != null
  .loc 2 1170 21
  cmp rbx, 0
  setne r15b
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $30.1:r15 
  # jump($30.1, block.25, block.26)
  test r15b, r15b
  jz .LABEL__discard_used_values_45__26
.LABEL__discard_used_values_45__25:
  # jump(value_is_phi_argument.5, block.27, block.28)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__discard_used_values_45__28
.LABEL__discard_used_values_45__27:
  # call(spill_local_variable_41, self.1, mc_value.2)
  .loc 2 1172 25
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call spill_local_variable_41
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # jump(block.28)
.LABEL__discard_used_values_45__28:
  # $31.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 2 1175 21
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $31.1:rbx 
  # store_struct_member($31.1, value, null)
  .loc 2 1175 21
  mov QWORD PTR [rbx+41], 0
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # store_struct_member(mc_value.2, register, null)
  .loc 2 1176 21
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # jump(block.26)
.LABEL__discard_used_values_45__26:
  # $32.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 2 1180 21
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $32.1:rbx 
  # $33.1: Boolean = $32.1 != null
  .loc 2 1180 21
  cmp rbx, 0
  setne r15b
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $33.1:r15 
  # jump($33.1, block.29, block.31)
  test r15b, r15b
  jz .LABEL__discard_used_values_45__31
.LABEL__discard_used_values_45__29:
  # $35.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 2 1181 21
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $35.1:rbx 
  # $36.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1181 54
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $35.1:rbx $36.1:r15 
  # store_struct_member($35.1, next_value, $36.1)
  .loc 2 1181 21
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # jump(block.30)
.LABEL__discard_used_values_45__30:
  # $37.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1185 21
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $37.1:rbx 
  # $38.1: Boolean = $37.1 != null
  .loc 2 1185 21
  cmp rbx, 0
  setne r15b
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $38.1:r15 
  # jump($38.1, block.32, block.34)
  test r15b, r15b
  jz .LABEL__discard_used_values_45__34
.LABEL__discard_used_values_45__32:
  # $40.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1186 21
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $40.1:rbx 
  # $41.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 2 1186 54
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $40.1:rbx $41.1:r15 
  # store_struct_member($40.1, prev_value, $41.1)
  .loc 2 1186 21
  mov QWORD PTR [rbx+0], r15
  # [discarded value]: $40.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # jump(block.33)
.LABEL__discard_used_values_45__33:
  # removed_values.3: Int = removed_values.5 + 1
  .loc 2 1190 34
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:rax:[rbp-8] 
  # $43.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 2 1192 21
  mov rbx, [rbp-24]
  mov r15b, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:rax:[rbp-8] $43.1:r15 
  # jump($43.1, block.35, block.8)
  test r15b, r15b
  mov [rbp-8], rax
  jz .LABEL__discard_used_values_45__8
.LABEL__discard_used_values_45__35:
  # $44.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1193 21
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $43.1
  # [live values]: self.1:rax:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $44.1:rbx 
  # $45.1: @FILE = call(write_287, $44.1, "  # [discarded value]: ")
  .loc 2 1193 21
  mov rdi, rbx
  lea rsi, .LABEL__string_146[rip] # "  # [discarded value]: "
  call write_287
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $45.1:rax 
  # $46.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1193 77
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $45.1:rax $46.1:r15 
  # $47.1: @IR_Variable = load_struct_member($46.1, variable)
  .loc 2 1193 77
  mov r14, [r15+24]
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $45.1:rax $47.1:r14 
  # $48.1: @String = load_struct_member($47.1, name)
  .loc 2 1193 77
  mov r15, [r14+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $45.1:rax $48.1:r15 
  # $49.1: @FILE = call(write_287, $45.1, $48.1)
  .loc 2 1193 21
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $45.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $49.1:rax 
  # $50.1: @FILE = call(write_289, $49.1, '.')
  .loc 2 1193 21
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $50.1:rax 
  # $51.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1193 136
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $50.1:rax $51.1:r15 
  # $52.1: Int = load_struct_member($51.1, version)
  .loc 2 1193 136
  mov r14, [r15+32]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $50.1:rax $52.1:r14 
  # $53.1: @FILE = call(write_286, $50.1, $52.1)
  .loc 2 1193 21
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $50.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] $53.1:rax 
  # $54.1: @FILE = call(end_line_290, $53.1)
  .loc 2 1193 21
  mov rdi, rax
  call end_line_290
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # jump(block.8)
.LABEL__discard_used_values_45__8:
  # removed_values.6: Int = phi(removed_values.3, removed_values.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] removed_values.6:[rbp-8] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # mc_value.19: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1198 20
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] removed_values.6:[rbp-8] mc_value.19:rbx:[rbp-16] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # jump(block.2)
  mov [rbp-16], rbx
  jmp .LABEL__discard_used_values_45__2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] removed_values.6:[rbp-8] mc_value.19:[rbp-16] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.6
  # [discarded value]: mc_value.19
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
.LABEL__discard_used_values_45__34:
  # $39.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 2 1188 39
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $39.1:rbx 
  # store_struct_member(self.1, last_value, $39.1)
  .loc 2 1188 21
  mov r15, [rbp-24]
  mov QWORD PTR [r15+137], rbx
  # [discarded value]: $39.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # jump(block.33)
  jmp .LABEL__discard_used_values_45__33
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
.LABEL__discard_used_values_45__31:
  # $34.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1183 40
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] $34.1:rbx 
  # store_struct_member(self.1, first_value, $34.1)
  .loc 2 1183 21
  mov r15, [rbp-24]
  mov QWORD PTR [r15+129], rbx
  # [discarded value]: $34.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # jump(block.30)
  jmp .LABEL__discard_used_values_45__30
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] $12.2:[rbp-36] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] value_is_phi_argument.5:[rbp-27] user_instruction_item.7:[rbp-35] discard_value.2:[rbp-26] $12.1:[rbp-36] 
  # [discarded value]: value_is_phi_argument.5
  # [discarded value]: user_instruction_item.7
  # [discarded value]: discard_value.2
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] value_is_phi_argument.1:[rbp-27] user_instruction_item.1:[rbp-35] 
  # [discarded value]: discard_value.1
  # [discarded value]: value_is_phi_argument.1
  # [discarded value]: user_instruction_item.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
.LABEL__discard_used_values_45__4:
  # return(removed_values.5)
  .loc 2 1201 5
  mov rax, [rbp-8]
  jmp .LABEL__discard_used_values_45__end
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: removed_values.5
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: removed_values.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__discard_used_values_45__end:
  mov rsp, rbp
  pop rbp
  ret

discard_used_values_45__stack_frame_size: .word 48

  .loc 2 1204 1
  .text
output_live_values_46:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_46__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_46__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1205 29
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # call(output_live_values_47, self.1, $1.1)
  .loc 2 1205 5
  mov rsi, rax
  call output_live_values_47
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__output_live_values_46__end
  # [live values]: 
.LABEL__output_live_values_46__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_46__stack_frame_size: .word 0

  .loc 2 1208 1
  .text
output_live_values_47:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_47__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_47__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # output_file.1: @FILE = load_variable(output_file)
  # [live values]: self.1:rdi output_file.1:rsi 
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 2 1209 9
  mov al, [rdi+16]
  # [live values]: self.1:rdi output_file.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == false
  .loc 2 1209 9
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi output_file.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__output_live_values_47__3
.LABEL__output_live_values_47__2:
  # return()
  .loc 2 1210 9
  jmp .LABEL__output_live_values_47__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] 
.LABEL__output_live_values_47__3:
  # $3.1: @FILE = call(write_287, output_file.1, "  # [live values]: ")
  .loc 2 1212 5
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_147[rip] # "  # [live values]: "
  call write_287
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 2 1213 17
  mov rax, [rbp-16]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-16] output_file.1:[rbp-8] mc_value.1:rbx 
  # jump(block.5)
  mov [rbp-24], rbx
.LABEL__output_live_values_47__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.9)
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # $5.1: Boolean = mc_value.2 != null
  .loc 2 1214 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] $5.1:rax 
  # jump($5.1, block.6, block.7)
  test al, al
  jz .LABEL__output_live_values_47__7
.LABEL__output_live_values_47__6:
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 2 1215 13
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $6.1:rbx 
  # $7.1: Boolean = load_struct_member($6.1, is_generated)
  .loc 2 1215 13
  mov r15b, [rbx+56]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $7.1:r15 
  # jump($7.1, block.8, block.9)
  test r15b, r15b
  jz .LABEL__output_live_values_47__9
.LABEL__output_live_values_47__8:
  # $8.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1216 31
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $8.1:rbx 
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  .loc 2 1216 31
  mov r15, [rbx+24]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $9.1:r15 
  # $10.1: @String = load_struct_member($9.1, name)
  .loc 2 1216 31
  mov rbx, [r15+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $10.1:rbx 
  # $11.1: @FILE = call(write_287, output_file.1, $10.1)
  .loc 2 1216 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_287
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] $11.1:rax 
  # $12.1: @FILE = call(write_289, $11.1, '.')
  .loc 2 1216 13
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] $12.1:rax 
  # $13.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 2 1216 90
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rbx:[rbp-24] $12.1:rax $13.1:r15 
  # $14.1: Int = load_struct_member($13.1, version)
  .loc 2 1216 90
  mov r14, [r15+32]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rbx:[rbp-24] $12.1:rax $14.1:r14 
  # $15.1: @FILE = call(write_286, $12.1, $14.1)
  .loc 2 1216 13
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $12.1
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # $16.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 2 1217 17
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $16.1:rbx 
  # $17.1: Boolean = $16.1 != null
  .loc 2 1217 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $17.1:r15 
  # jump($17.1, block.10, block.11)
  test r15b, r15b
  jz .LABEL__output_live_values_47__11
.LABEL__output_live_values_47__10:
  # $18.1: @FILE = call(write_289, output_file.1, ':')
  .loc 2 1218 17
  mov rdi, [rbp-8]
  mov sil, 58
  call write_289
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] $18.1:rax 
  # $19.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 2 1218 46
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rbx:[rbp-24] $18.1:rax $19.1:r15 
  # $20.1: @String = load_struct_member($19.1, name_q)
  .loc 2 1218 46
  mov r14, [r15+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rbx:[rbp-24] $18.1:rax $20.1:r14 
  # $21.1: @FILE = call(write_287, $18.1, $20.1)
  .loc 2 1218 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $18.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # jump(block.11)
.LABEL__output_live_values_47__11:
  # $22.1: @MC_Address = load_struct_member(mc_value.2, address)
  .loc 2 1220 17
  mov rax, [rbp-24]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $22.1:rbx 
  # $23.1: Boolean = $22.1 != null
  .loc 2 1220 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rax:[rbp-24] $23.1:r15 
  # jump($23.1, block.12, block.13)
  test r15b, r15b
  jz .LABEL__output_live_values_47__13
.LABEL__output_live_values_47__12:
  # $24.1: @FILE = call(write_289, output_file.1, ':')
  .loc 2 1221 17
  mov rdi, [rbp-8]
  mov sil, 58
  call write_289
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] $24.1:rax 
  # $25.1: @MC_Address = load_struct_member(mc_value.2, address)
  .loc 2 1221 46
  mov rbx, [rbp-24]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:rbx:[rbp-24] $24.1:rax $25.1:r15 
  # $26.1: @FILE = call(write_51, $24.1, $25.1)
  .loc 2 1221 17
  mov rdi, rax
  mov rsi, r15
  call write_51
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # jump(block.13)
.LABEL__output_live_values_47__13:
  # $27.1: @FILE = call(write_289, output_file.1, ' ')
  .loc 2 1223 13
  mov rdi, [rbp-8]
  mov sil, 32
  call write_289
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # jump(block.9)
.LABEL__output_live_values_47__9:
  # mc_value.9: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 2 1225 20
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] mc_value.9:rbx:[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rbx
  jmp .LABEL__output_live_values_47__5
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] mc_value.9:[rbp-24] 
  # [discarded value]: mc_value.9
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
.LABEL__output_live_values_47__7:
  # $29.1: @FILE = call(end_line_290, output_file.1)
  .loc 2 1227 5
  mov rdi, [rbp-8]
  call end_line_290
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # return()
  jmp .LABEL__output_live_values_47__end
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] mc_value.2:[rbp-24] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] mc_value.1:[rbp-24] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] output_file.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: output_file.1
  # [live values]: 
.LABEL__output_live_values_47__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_47__stack_frame_size: .word 32

  .loc 2 1230 1
  .text
output_used_registers_48:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_registers_48__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_registers_48__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(true, block.2, block.3)
  mov al, 1
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__output_used_registers_48__3
.LABEL__output_used_registers_48__2:
  # return()
  .loc 2 1232 9
  jmp .LABEL__output_used_registers_48__end
  # [live values]: self.1:[rbp-8] 
.LABEL__output_used_registers_48__3:
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1234 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  # $2.1: @FILE = call(write_287, $1.1, "  # [used registers]: ")
  .loc 2 1234 5
  mov rdi, rbx
  lea rsi, .LABEL__string_148[rip] # "  # [used registers]: "
  call write_287
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 2 1235 31
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # call(output_used_register_49, self.1, $3.1)
  .loc 2 1235 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 2 1236 31
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  # call(output_used_register_49, self.1, $4.1)
  .loc 2 1236 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 2 1237 31
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  # call(output_used_register_49, self.1, $5.1)
  .loc 2 1237 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 2 1238 31
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  # call(output_used_register_49, self.1, $6.1)
  .loc 2 1238 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 2 1239 31
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  # call(output_used_register_49, self.1, $7.1)
  .loc 2 1239 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # $8.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 2 1240 31
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  # call(output_used_register_49, self.1, $8.1)
  .loc 2 1240 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # $9.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 2 1241 31
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  # call(output_used_register_49, self.1, $9.1)
  .loc 2 1241 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  # $10.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 2 1242 31
  mov rax, [rbp-8]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  # call(output_used_register_49, self.1, $10.1)
  .loc 2 1242 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  # $11.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 2 1243 31
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  # call(output_used_register_49, self.1, $11.1)
  .loc 2 1243 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  # $12.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 2 1244 31
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  # call(output_used_register_49, self.1, $12.1)
  .loc 2 1244 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  # $13.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 2 1245 31
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  # call(output_used_register_49, self.1, $13.1)
  .loc 2 1245 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # $14.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 2 1246 31
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  # call(output_used_register_49, self.1, $14.1)
  .loc 2 1246 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] 
  # $15.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 2 1247 31
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $15.1:rbx 
  # call(output_used_register_49, self.1, $15.1)
  .loc 2 1247 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] 
  # $16.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 2 1248 31
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $16.1:rbx 
  # call(output_used_register_49, self.1, $16.1)
  .loc 2 1248 5
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_49
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1249 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $17.1:rbx 
  # $18.1: @FILE = call(end_line_290, $17.1)
  .loc 2 1249 5
  mov rdi, rbx
  call end_line_290
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__output_used_registers_48__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_registers_48__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_registers_48__stack_frame_size: .word 16

  .loc 2 1252 1
  .text
output_used_register_49:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_register_49__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_register_49__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1253 9
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 2 1253 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__output_used_register_49__3
.LABEL__output_used_register_49__2:
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1254 9
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-16] register.1:[rbp-8] $3.1:rbx 
  # $4.1: @String = load_struct_member(register.1, name_q)
  .loc 2 1254 32
  mov r15, [rbp-8]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] register.1:r15:[rbp-8] $3.1:rbx $4.1:r14 
  # $5.1: @FILE = call(write_287, $3.1, $4.1)
  .loc 2 1254 9
  mov rdi, rbx
  mov rsi, r14
  call write_287
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write_289, $5.1, ':')
  .loc 2 1254 9
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $6.1:rax 
  # $7.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1254 66
  mov rbx, [rbp-8]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $6.1:rax $7.1:r15 
  # $8.1: @IR_Variable_Value = load_struct_member($7.1, ir_variable_value)
  .loc 2 1254 66
  mov r14, [r15+24]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $6.1:rax $8.1:r14 
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  .loc 2 1254 66
  mov r15, [r14+24]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $6.1:rax $9.1:r15 
  # $10.1: @String = load_struct_member($9.1, name)
  .loc 2 1254 66
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $6.1:rax $10.1:r14 
  # $11.1: @FILE = call(write_287, $6.1, $10.1)
  .loc 2 1254 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $6.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $11.1:rax 
  # $12.1: @FILE = call(write_289, $11.1, '.')
  .loc 2 1254 9
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $12.1:rax 
  # $13.1: @MC_Value = load_struct_member(register.1, value)
  .loc 2 1254 131
  mov rbx, [rbp-8]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $12.1:rax $13.1:r15 
  # $14.1: @IR_Variable_Value = load_struct_member($13.1, ir_variable_value)
  .loc 2 1254 131
  mov r14, [r15+24]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $12.1:rax $14.1:r14 
  # $15.1: Int = load_struct_member($14.1, version)
  .loc 2 1254 131
  mov r15, [r14+32]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] register.1:rbx:[rbp-8] $12.1:rax $15.1:r15 
  # $16.1: @FILE = call(write_286, $12.1, $15.1)
  .loc 2 1254 9
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $12.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $16.1:rax 
  # $17.1: @FILE = call(write_289, $16.1, ' ')
  .loc 2 1254 9
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # jump(block.3)
.LABEL__output_used_register_49__3:
  # return()
  jmp .LABEL__output_used_register_49__end
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: register.1
  # [live values]: 
.LABEL__output_used_register_49__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_register_49__stack_frame_size: .word 16

  .loc 2 1277 1
  .text
init_50:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_50__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_50__1:
  # self.1: @MC_Register = load_variable(self)
  # [live values]: self.1:rdi 
  # name_q.1: @String = load_variable(name_q)
  # [live values]: self.1:rdi name_q.1:rsi 
  # name_d.1: @String = load_variable(name_d)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx 
  # name_w.1: @String = load_variable(name_w)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx 
  # name_b.1: @String = load_variable(name_b)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  # store_struct_member(self.1, name_q, name_q.1)
  .loc 2 1278 5
  mov QWORD PTR [rdi+8], rsi
  # [discarded value]: name_q.1
  # [live values]: self.1:rdi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  # store_struct_member(self.1, name_d, name_d.1)
  .loc 2 1279 5
  mov QWORD PTR [rdi+16], rdx
  # [discarded value]: name_d.1
  # [live values]: self.1:rdi name_w.1:rcx name_b.1:r8 
  # store_struct_member(self.1, name_w, name_w.1)
  .loc 2 1280 5
  mov QWORD PTR [rdi+24], rcx
  # [discarded value]: name_w.1
  # [live values]: self.1:rdi name_b.1:r8 
  # store_struct_member(self.1, name_b, name_b.1)
  .loc 2 1281 5
  mov QWORD PTR [rdi+32], r8
  # [discarded value]: name_b.1
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, is_reserved, false)
  .loc 2 1282 5
  mov BYTE PTR [rdi+40], 0
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, value, null)
  .loc 2 1283 5
  mov QWORD PTR [rdi+41], 0
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, loaded_value, null)
  .loc 2 1284 5
  mov QWORD PTR [rdi+49], 0
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 2 1285 5
  mov rax, rdi
  jmp .LABEL__init_50__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_50__end:
  mov rsp, rbp
  pop rbp
  ret

init_50__stack_frame_size: .word 0

  .loc 2 1333 1
  .text
write_51:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_51__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_51__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: file.1:rdi address.1:rsi 
  # MC_Global_Variable_Address.3: @Object_Type = load_variable(MC_Global_Variable_Address)
  lea rax, MC_Global_Variable_Address[rip]
  # [live values]: file.1:rdi address.1:rsi MC_Global_Variable_Address.3:rax 
  # $1.1: Boolean = call(is_293, address.1, MC_Global_Variable_Address.3)
  .loc 2 1334 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: MC_Global_Variable_Address.3
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_51__3
.LABEL__write_51__2:
  # address.1: @MC_Global_Variable_Address = address.1
  .loc 2 1335 20
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] address.1:rax 
  # $3.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  .loc 2 1336 27
  mov rbx, [rax+8]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $3.1:rbx 
  # $4.1: @String = load_struct_member($3.1, name)
  .loc 2 1336 27
  mov rax, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $4.1:rax 
  # $5.1: @FILE = call(write_287, file.1, $4.1)
  .loc 2 1336 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_287
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, "[rip]")
  .loc 2 1336 16
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_287
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 2 1336 9
  jmp .LABEL__write_51__end
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
.LABEL__write_51__3:
  # MC_Local_Variable_Address.3: @Object_Type = load_variable(MC_Local_Variable_Address)
  lea rax, MC_Local_Variable_Address[rip]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] MC_Local_Variable_Address.3:rax 
  # $7.1: Boolean = call(is_293, address.1, MC_Local_Variable_Address.3)
  .loc 2 1338 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: MC_Local_Variable_Address.3
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__write_51__6
.LABEL__write_51__5:
  # address.1: @MC_Local_Variable_Address = address.1
  .loc 2 1339 20
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] address.1:rax 
  # $9.1: @FILE = call(write_287, file.1, "[rbp-")
  .loc 2 1340 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_149[rip] # "[rbp-"
  mov [rbp-24], rax
  call write_287
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] address.1:[rbp-24] $9.1:rax 
  # $10.1: Int = load_struct_member(address.1, offset)
  .loc 2 1340 42
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $9.1:rax $10.1:r15 
  # $11.1: @FILE = call(write_286, $9.1, $10.1)
  .loc 2 1340 16
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $11.1:rax 
  # $12.1: @FILE = call(write_289, $11.1, ']')
  .loc 2 1340 16
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 2 1340 9
  jmp .LABEL__write_51__end
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
.LABEL__write_51__6:
  # $13.1: @String = call(clone_295, "Unsupported type: ")
  .loc 2 1342 11
  lea rdi, .LABEL__string_150[rip] # "Unsupported type: "
  call clone_295
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $13.1:rax 
  # $14.1: @Object_Type = load_struct_member(address.1, object_type)
  .loc 2 1342 46
  mov rbx, [rbp-16]
  mov r15, [rbx+0]
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $13.1:rax $14.1:r15 
  # $15.1: @String = load_struct_member($14.1, name)
  .loc 2 1342 46
  mov r14, r15
  add r14, 8
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $13.1:rax $15.1:r14 
  # $16.1: @String = call(append_304, $13.1, $15.1)
  .loc 2 1342 11
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $16.1:rax 
  # call(abort_292, $16.1)
  .loc 2 1342 5
  mov rdi, rax
  call abort_292
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: address.1
  # [live values]: 
.LABEL__write_51__end:
  mov rsp, rbp
  pop rbp
  ret

write_51__stack_frame_size: .word 32

  .loc 2 1353 1
  .text
get_type_size_52:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_type_size_52__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_type_size_52__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_type.1: @IR_Type = load_variable(ir_type)
  # [live values]: self.1:rdi ir_type.1:rsi 
  # IR_Boolean_Type.5: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:rdi ir_type.1:rsi IR_Boolean_Type.5:rax 
  # $1.1: Boolean = call(is_293, ir_type.1, IR_Boolean_Type.5)
  .loc 2 1354 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Boolean_Type.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__get_type_size_52__3
.LABEL__get_type_size_52__2:
  # return(1)
  .loc 2 1355 9
  mov rax, 1
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__3:
  # IR_Function_Type.4: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Function_Type.4:rax 
  # $2.1: Boolean = call(is_293, ir_type.1, IR_Function_Type.4)
  .loc 2 1357 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Function_Type.4
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.5, block.6)
  test al, al
  jz .LABEL__get_type_size_52__6
.LABEL__get_type_size_52__5:
  # return(8)
  .loc 2 1358 9
  mov rax, 8
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__6:
  # IR_Int_Type.7: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int_Type.7:rax 
  # $3.1: Boolean = call(is_293, ir_type.1, IR_Int_Type.7)
  .loc 2 1360 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.8, block.9)
  test al, al
  jz .LABEL__get_type_size_52__9
.LABEL__get_type_size_52__8:
  # return(8)
  .loc 2 1361 9
  mov rax, 8
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__9:
  # IR_Int16_Type.2: @Object_Type = load_variable(IR_Int16_Type)
  lea rax, IR_Int16_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int16_Type.2:rax 
  # $4.1: Boolean = call(is_293, ir_type.1, IR_Int16_Type.2)
  .loc 2 1363 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int16_Type.2
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.11, block.12)
  test al, al
  jz .LABEL__get_type_size_52__12
.LABEL__get_type_size_52__11:
  # return(2)
  .loc 2 1364 9
  mov rax, 2
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__12:
  # IR_Int32_Type.7: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int32_Type.7:rax 
  # $5.1: Boolean = call(is_293, ir_type.1, IR_Int32_Type.7)
  .loc 2 1366 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int32_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $5.1:rax 
  # jump($5.1, block.14, block.15)
  test al, al
  jz .LABEL__get_type_size_52__15
.LABEL__get_type_size_52__14:
  # return(4)
  .loc 2 1367 9
  mov rax, 4
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__15:
  # IR_Int8_Type.7: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int8_Type.7:rax 
  # $6.1: Boolean = call(is_293, ir_type.1, IR_Int8_Type.7)
  .loc 2 1369 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Int8_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $6.1:rax 
  # jump($6.1, block.17, block.18)
  test al, al
  jz .LABEL__get_type_size_52__18
.LABEL__get_type_size_52__17:
  # return(1)
  .loc 2 1370 9
  mov rax, 1
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__18:
  # IR_Null_Type.2: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Null_Type.2:rax 
  # $7.1: Boolean = call(is_293, ir_type.1, IR_Null_Type.2)
  .loc 2 1372 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Null_Type.2
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.20, block.21)
  test al, al
  jz .LABEL__get_type_size_52__21
.LABEL__get_type_size_52__20:
  # return(8)
  .loc 2 1373 9
  mov rax, 8
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__21:
  # IR_Pointer_Type.5: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Pointer_Type.5:rax 
  # $8.1: Boolean = call(is_293, ir_type.1, IR_Pointer_Type.5)
  .loc 2 1375 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Pointer_Type.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $8.1:rax 
  # jump($8.1, block.23, block.24)
  test al, al
  jz .LABEL__get_type_size_52__24
.LABEL__get_type_size_52__23:
  # return(8)
  .loc 2 1376 9
  mov rax, 8
  jmp .LABEL__get_type_size_52__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__24:
  # IR_Struct_Type.3: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Struct_Type.3:rax 
  # $9.1: Boolean = call(is_293, ir_type.1, IR_Struct_Type.3)
  .loc 2 1378 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Struct_Type.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $9.1:rax 
  # jump($9.1, block.26, block.27)
  test al, al
  jz .LABEL__get_type_size_52__27
.LABEL__get_type_size_52__26:
  # ir_type.1: @IR_Struct_Type = ir_type.1
  .loc 2 1379 20
  mov rax, [rbp-16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax 
  # size.1: Int = 0
  .loc 2 1380 9
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax size.1:rbx 
  # $11.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  .loc 2 1381 13
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax size.1:rbx $11.1:r15 
  # $12.1: Boolean = $11.1 != null
  .loc 2 1381 13
  cmp r15, 0
  setne r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax size.1:rbx $12.1:r14 
  # jump($12.1, block.28, block.29)
  test r14b, r14b
  mov [rbp-24], rax
  mov [rbp-32], rbx
  jz .LABEL__get_type_size_52__29
.LABEL__get_type_size_52__28:
  # $13.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  .loc 2 1382 46
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax:[rbp-24] size.1:[rbp-32] $13.1:rbx 
  # $14.1: Int = call(get_type_size_52, self.1, $13.1)
  .loc 2 1382 27
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_52
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] $14.1:rax 
  # size.3: Int = size.1 + $14.1
  .loc 2 1382 20
  mov rbx, [rbp-32]
  add rbx, rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:rbx:[rbp-32] 
  # jump(block.29)
  mov [rbp-32], rbx
.LABEL__get_type_size_52__29:
  # size.8: Int = phi(size.1, size.3)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] 
  # $16.1: @List = load_struct_member(ir_type.1, members)
  .loc 2 1384 32
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] $16.1:rbx 
  # struct_type_members.1: @List_Iterator = call(create_iterator_279, $16.1)
  .loc 2 1384 32
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:rax 
  # jump(block.30)
  mov [rbp-40], rax
.LABEL__get_type_size_52__30:
  # size.7: Int = phi(size.8, size.5)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
  # $18.1: Boolean = call(has_next_282, struct_type_members.1)
  .loc 2 1385 16
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] $18.1:rax 
  # jump($18.1, block.31, block.32)
  test al, al
  jz .LABEL__get_type_size_52__32
.LABEL__get_type_size_52__31:
  # struct_type_member.1: @IR_Struct_Type_Member = call(next_283, struct_type_members.1)
  .loc 2 1386 35
  mov rdi, [rbp-40]
  call next_283
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] struct_type_member.1:rax 
  # $21.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 2 1387 46
  mov rbx, [rax+16]
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] $21.1:rbx 
  # $22.1: Int = call(get_type_size_52, self.1, $21.1)
  .loc 2 1387 27
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_52
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] $22.1:rax 
  # size.5: Int = size.7 + $22.1
  .loc 2 1387 20
  mov rbx, [rbp-32]
  add rbx, rax
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] size.5:rbx:[rbp-32] 
  # jump(block.30)
  mov [rbp-32], rbx
  jmp .LABEL__get_type_size_52__30
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] size.5:[rbp-32] 
  # [discarded value]: size.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
.LABEL__get_type_size_52__32:
  # return(size.7)
  .loc 2 1389 9
  mov rax, [rbp-32]
  jmp .LABEL__get_type_size_52__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
  # [discarded value]: size.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] 
  # [discarded value]: size.8
  # [discarded value]: struct_type_members.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] 
  # [discarded value]: size.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] 
  # [discarded value]: ir_type.1
  # [discarded value]: size.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_52__27:
  # $24.1: @String = call(clone_295, "Unsupported type: ")
  .loc 2 1391 16
  lea rdi, .LABEL__string_150[rip] # "Unsupported type: "
  call clone_295
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $24.1:rax 
  # $25.1: @Object_Type = load_struct_member(ir_type.1, object_type)
  .loc 2 1391 51
  mov rbx, [rbp-16]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $24.1:rax $25.1:r15 
  # $26.1: @String = load_struct_member($25.1, name)
  .loc 2 1391 51
  mov r14, r15
  add r14, 8
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $24.1:rax $26.1:r14 
  # $27.1: @String = call(append_304, $24.1, $26.1)
  .loc 2 1391 16
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $24.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $27.1:rax 
  # call(abort_33, self.1, $27.1)
  .loc 2 1391 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_33
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: ir_type.1
  # [live values]: 
.LABEL__get_type_size_52__end:
  mov rsp, rbp
  pop rbp
  ret

get_type_size_52__stack_frame_size: .word 48

  .loc 2 1399 1
  .text
convert_string_53:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_string_53__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_string_53__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # literal.1: @String_Token = load_variable(literal)
  # [live values]: self.1:rdi literal.1:rsi 
  # $1.1: @List = load_struct_member(self.1, strings)
  .loc 2 1400 20
  mov rax, [rdi+153]
  # [live values]: self.1:rdi literal.1:rsi $1.1:rax 
  # string_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 2 1400 20
  mov rbx, [rax+0]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi literal.1:rsi string_item.1:rbx 
  # jump(block.2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__convert_string_53__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.5)
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # $3.1: Boolean = string_item.2 != null
  .loc 2 1401 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__convert_string_53__4
.LABEL__convert_string_53__3:
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  .loc 2 1402 19
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] string.1:rbx 
  # $6.1: @String_Token = load_struct_member(string.1, literal)
  .loc 2 1403 13
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] string.1:rbx $6.1:r15 
  # $7.1: @String = load_struct_member($6.1, lexeme)
  .loc 2 1403 13
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] string.1:rbx $7.1:r14 
  # $8.1: @String = load_struct_member(literal.1, lexeme)
  .loc 2 1403 42
  mov r15, [rbp-16]
  mov r13, [r15+8]
  # [live values]: self.1:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] string.1:rbx $7.1:r14 $8.1:r13 
  # $9.1: Boolean = call(equals_296, $7.1, $8.1)
  .loc 2 1403 13
  mov rdi, r14
  mov rsi, r13
  mov [rbp-32], rbx
  call equals_296
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_string_53__6
.LABEL__convert_string_53__5:
  # return(string.1)
  .loc 2 1404 13
  mov rax, [rbp-32]
  jmp .LABEL__convert_string_53__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
.LABEL__convert_string_53__6:
  # string_item.5: @List_Item = load_struct_member(string_item.2, next_item)
  .loc 2 1406 23
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] string_item.5:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__convert_string_53__2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] string_item.5:[rbp-8] 
  # [discarded value]: string_item.5
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
.LABEL__convert_string_53__4:
  # $11.1: @List = load_struct_member(self.1, strings)
  .loc 2 1408 34
  mov rax, [rbp-24]
  mov rbx, [rax+153]
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $11.1:rbx 
  # $12.1: Int = load_struct_member($11.1, size)
  .loc 2 1408 34
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $12.1:r15 
  # $13.1: @MC_String = new(MC_String)
  .loc 2 1408 15
  mov [rbp-32], r15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $12.1:[rbp-32] $13.1:rax 
  # store_struct_member($13.1, id, $12.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $13.1:rax 
  # store_struct_member($13.1, literal, literal.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] literal.1:rbx:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $13.1:rax 
  # string.1: @MC_String = $13.1
  .loc 2 1408 5
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] literal.1:rbx:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax 
  # $14.1: @List = load_struct_member(self.1, strings)
  .loc 2 1409 5
  mov r15, [rbp-24]
  mov r14, [r15+153]
  # [live values]: self.1:r15:[rbp-24] literal.1:rbx:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $14.1:r14 
  # call(append_268, $14.1, string.1)
  .loc 2 1409 5
  mov rdi, r14
  mov rsi, rax
  mov [rbp-32], rax
  call append_268
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
  # return(string.1)
  .loc 2 1410 5
  mov rax, [rbp-32]
  jmp .LABEL__convert_string_53__end
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: literal.1
  # [discarded value]: string_item.1
  # [live values]: 
.LABEL__convert_string_53__end:
  mov rsp, rbp
  pop rbp
  ret

convert_string_53__stack_frame_size: .word 32

  .loc 2 1413 1
  .text
generate_strings_54:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_strings_54__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_strings_54__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1414 5
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @FILE = call(end_line_290, $1.1)
  .loc 2 1414 5
  mov [rbp-8], rdi
  mov rdi, rax
  call end_line_290
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, "  .section .rodata")
  .loc 2 1414 5
  mov rdi, rax
  lea rsi, .LABEL__string_151[rip] # "  .section .rodata"
  call write_287
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: @FILE = call(end_line_290, $3.1)
  .loc 2 1414 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # $5.1: @List = load_struct_member(self.1, strings)
  .loc 2 1415 20
  mov rax, [rbp-8]
  mov rbx, [rax+153]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  # string_item.1: @List_Item = load_struct_member($5.1, first_item)
  .loc 2 1415 20
  mov r15, [rbx+0]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] string_item.1:r15 
  # jump(block.2)
  mov [rbp-16], r15
.LABEL__generate_strings_54__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.4)
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # $7.1: Boolean = string_item.2 != null
  .loc 2 1416 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:rax 
  # jump($7.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_strings_54__4
.LABEL__generate_strings_54__3:
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  .loc 2 1417 19
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] string.1:rbx 
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1419 9
  mov r15, [rbp-8]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] string.1:rbx $10.1:r14 
  # $11.1: @FILE = call(end_line_290, $10.1)
  .loc 2 1419 9
  mov rdi, r14
  mov [rbp-24], rbx
  call end_line_290
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1420 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $12.1:rbx 
  # $13.1: @FILE = call(write_287, $12.1, "  .align 8")
  .loc 2 1420 9
  mov rdi, rbx
  lea rsi, .LABEL__string_152[rip] # "  .align 8"
  call write_287
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(end_line_290, $13.1)
  .loc 2 1420 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1421 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $15.1:rbx 
  # $16.1: @FILE = call(write_string_label_55, $15.1, string.1)
  .loc 2 1421 9
  mov rdi, rbx
  mov rsi, [rbp-24]
  call write_string_label_55
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $16.1:rax 
  # $17.1: @FILE = call(write_289, $16.1, ':')
  .loc 2 1421 9
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $17.1:rax 
  # $18.1: @FILE = call(end_line_290, $17.1)
  .loc 2 1421 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1422 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $19.1:rbx 
  # $20.1: @FILE = call(write_287, $19.1, "  .quad ")
  .loc 2 1422 9
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $20.1:rax 
  # $21.1: @FILE = call(write_string_label_55, $20.1, string.1)
  .loc 2 1422 9
  mov rdi, rax
  mov rsi, [rbp-24]
  call write_string_label_55
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $21.1:rax 
  # $22.1: @FILE = call(write_287, $21.1, "__data")
  .loc 2 1422 9
  mov rdi, rax
  lea rsi, .LABEL__string_154[rip] # "__data"
  call write_287
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $22.1:rax 
  # $23.1: @FILE = call(end_line_290, $22.1)
  .loc 2 1422 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1423 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $24.1:rbx 
  # $25.1: @FILE = call(write_287, $24.1, "  .quad ")
  .loc 2 1423 9
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $25.1:rax 
  # $26.1: @String_Token = load_struct_member(string.1, literal)
  .loc 2 1423 50
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $25.1:rax $26.1:r15 
  # $27.1: @String = load_struct_member($26.1, value)
  .loc 2 1423 50
  mov r14, [r15+32]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $25.1:rax $27.1:r14 
  # $28.1: Int = load_struct_member($27.1, length)
  .loc 2 1423 50
  mov r15, [r14+16]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $25.1:rax $28.1:r15 
  # $29.1: Int = $28.1 + 1
  .loc 2 1423 50
  mov r14, r15
  add r14, 1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $25.1:rax $29.1:r14 
  # $30.1: @FILE = call(write_286, $25.1, $29.1)
  .loc 2 1423 9
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $25.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $30.1:rax 
  # $31.1: @FILE = call(end_line_290, $30.1)
  .loc 2 1423 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1424 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $32.1:rbx 
  # $33.1: @FILE = call(write_287, $32.1, "  .quad ")
  .loc 2 1424 9
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $33.1:rax 
  # $34.1: @String_Token = load_struct_member(string.1, literal)
  .loc 2 1424 50
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $33.1:rax $34.1:r15 
  # $35.1: @String = load_struct_member($34.1, value)
  .loc 2 1424 50
  mov r14, [r15+32]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $33.1:rax $35.1:r14 
  # $36.1: Int = load_struct_member($35.1, length)
  .loc 2 1424 50
  mov r15, [r14+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rbx:[rbp-24] $33.1:rax $36.1:r15 
  # $37.1: @FILE = call(write_286, $33.1, $36.1)
  .loc 2 1424 9
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $33.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $37.1:rax 
  # $38.1: @FILE = call(end_line_290, $37.1)
  .loc 2 1424 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1425 9
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $39.1:rbx 
  # $40.1: @FILE = call(write_string_label_55, $39.1, string.1)
  .loc 2 1425 9
  mov rdi, rbx
  mov rsi, [rbp-24]
  call write_string_label_55
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $40.1:rax 
  # $41.1: @FILE = call(write_287, $40.1, "__data: .string ")
  .loc 2 1425 9
  mov rdi, rax
  lea rsi, .LABEL__string_155[rip] # "__data: .string "
  call write_287
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $41.1:rax 
  # $42.1: @String_Token = load_struct_member(string.1, literal)
  .loc 2 1425 85
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $41.1:rax $42.1:r15 
  # $43.1: @String = load_struct_member($42.1, lexeme)
  .loc 2 1425 85
  mov rbx, [r15+8]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $41.1:rax $43.1:rbx 
  # $44.1: @FILE = call(write_287, $41.1, $43.1)
  .loc 2 1425 9
  mov rdi, rax
  mov rsi, rbx
  call write_287
  # [discarded value]: $41.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $44.1:rax 
  # $45.1: @FILE = call(end_line_290, $44.1)
  .loc 2 1425 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # string_item.4: @List_Item = load_struct_member(string_item.2, next_item)
  .loc 2 1427 23
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string_item.4:rbx:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_strings_54__2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string_item.4:[rbp-16] 
  # [discarded value]: string_item.4
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
.LABEL__generate_strings_54__4:
  # return()
  jmp .LABEL__generate_strings_54__end
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: string_item.1
  # [live values]: 
.LABEL__generate_strings_54__end:
  mov rsp, rbp
  pop rbp
  ret

generate_strings_54__stack_frame_size: .word 32

  .loc 2 1431 1
  .text
write_string_label_55:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_string_label_55__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_string_label_55__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @MC_String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  # $1.1: @FILE = call(write_287, file.1, ".LABEL__string_")
  .loc 2 1432 12
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_156[rip] # ".LABEL__string_"
  call write_287
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  # $2.1: Int = load_struct_member(string.1, id)
  .loc 2 1432 48
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [discarded value]: string.1
  # [live values]: $1.1:rax $2.1:r15 
  # $3.1: @FILE = call(write_286, $1.1, $2.1)
  .loc 2 1432 12
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 2 1432 5
  jmp .LABEL__write_string_label_55__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__write_string_label_55__end:
  mov rsp, rbp
  pop rbp
  ret

write_string_label_55__stack_frame_size: .word 16

  .loc 2 1435 1
  .text
generate_object_types_56:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_object_types_56__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_object_types_56__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # types.1: @List = load_variable(types)
  # [live values]: self.1:rdi types.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1436 5
  mov rax, [rdi+8]
  # [live values]: self.1:rdi types.1:rsi $1.1:rax 
  # $2.1: @FILE = call(end_line_290, $1.1)
  .loc 2 1436 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_290
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, "  .section .rodata")
  .loc 2 1436 5
  mov rdi, rax
  lea rsi, .LABEL__string_151[rip] # "  .section .rodata"
  call write_287
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(end_line_290, $3.1)
  .loc 2 1436 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # type_item.1: @List_Item = load_struct_member(types.1, first_item)
  .loc 2 1437 18
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-8] type_item.1:rbx 
  # jump(block.2)
  mov [rbp-16], rbx
.LABEL__generate_object_types_56__2:
  # type_item.2: @List_Item = phi(type_item.1, type_item.5)
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # $6.1: Boolean = type_item.2 != null
  .loc 2 1438 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_object_types_56__4
.LABEL__generate_object_types_56__3:
  # type.1: @IR_Type = load_struct_member(type_item.2, data)
  .loc 2 1439 17
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:rax:[rbp-16] type.1:rbx 
  # IR_Struct_Type.4: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:rax:[rbp-16] type.1:rbx IR_Struct_Type.4:r15 
  # $9.1: Boolean = call(is_293, type.1, IR_Struct_Type.4)
  .loc 2 1440 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rbx
  call is_293
  # [discarded value]: IR_Struct_Type.4
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_object_types_56__6
.LABEL__generate_object_types_56__5:
  # type.1: @IR_Struct_Type = type.1
  .loc 2 1441 21
  mov rax, [rbp-24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rax 
  # $11.1: Boolean = call(is_object_type_149, type.1)
  .loc 2 1442 17
  mov rdi, rax
  mov [rbp-32], rax
  call is_object_type_149
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $11.1:rax 
  # jump($11.1, block.7, block.6)
  test al, al
  jz .LABEL__generate_object_types_56__6
.LABEL__generate_object_types_56__7:
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1443 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $12.1:rbx 
  # $13.1: @FILE = call(end_line_290, $12.1)
  .loc 2 1443 17
  mov rdi, rbx
  call end_line_290
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1444 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $14.1:rbx 
  # $15.1: @FILE = call(write_287, $14.1, "  .align 8")
  .loc 2 1444 17
  mov rdi, rbx
  lea rsi, .LABEL__string_152[rip] # "  .align 8"
  call write_287
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(end_line_290, $15.1)
  .loc 2 1444 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1445 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $17.1:rbx 
  # $18.1: @FILE = call(write_type_label_57, $17.1, type.1)
  .loc 2 1445 17
  mov rdi, rbx
  mov rsi, [rbp-32]
  call write_type_label_57
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $18.1:rax 
  # $19.1: @FILE = call(write_289, $18.1, ':')
  .loc 2 1445 17
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $19.1:rax 
  # $20.1: @FILE = call(end_line_290, $19.1)
  .loc 2 1445 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1446 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $21.1:rbx 
  # $22.1: @FILE = call(write_287, $21.1, "  .quad ")
  .loc 2 1446 17
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $22.1:rax 
  # $23.1: @FILE = call(write_286, $22.1, 0)
  .loc 2 1446 17
  mov rdi, rax
  xor rsi, rsi
  call write_286
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $23.1:rax 
  # $24.1: @FILE = call(end_line_290, $23.1)
  .loc 2 1446 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1447 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $25.1:rbx 
  # $26.1: @FILE = call(write_287, $25.1, "  .quad .LABEL__")
  .loc 2 1447 17
  mov rdi, rbx
  lea rsi, .LABEL__string_157[rip] # "  .quad .LABEL__"
  call write_287
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $26.1:rax 
  # $27.1: @String = load_struct_member(type.1, name)
  .loc 2 1447 66
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $26.1:rax $27.1:r15 
  # $28.1: @FILE = call(write_287, $26.1, $27.1)
  .loc 2 1447 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $28.1:rax 
  # $29.1: @FILE = call(write_287, $28.1, "__type_name__data")
  .loc 2 1447 17
  mov rdi, rax
  lea rsi, .LABEL__string_158[rip] # "__type_name__data"
  call write_287
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $29.1:rax 
  # $30.1: @FILE = call(end_line_290, $29.1)
  .loc 2 1447 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1448 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $31.1:rbx 
  # $32.1: @FILE = call(write_287, $31.1, "  .quad ")
  .loc 2 1448 17
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $32.1:rax 
  # $33.1: @String = load_struct_member(type.1, name)
  .loc 2 1448 58
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $32.1:rax $33.1:r15 
  # $34.1: Int = load_struct_member($33.1, length)
  .loc 2 1448 58
  mov r14, [r15+16]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $32.1:rax $34.1:r14 
  # $35.1: Int = $34.1 + 1
  .loc 2 1448 58
  mov r15, r14
  add r15, 1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $32.1:rax $35.1:r15 
  # $36.1: @FILE = call(write_286, $32.1, $35.1)
  .loc 2 1448 17
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $32.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $36.1:rax 
  # $37.1: @FILE = call(end_line_290, $36.1)
  .loc 2 1448 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1449 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $38.1:rbx 
  # $39.1: @FILE = call(write_287, $38.1, "  .quad ")
  .loc 2 1449 17
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $39.1:rax 
  # $40.1: @String = load_struct_member(type.1, name)
  .loc 2 1449 58
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $39.1:rax $40.1:r15 
  # $41.1: Int = load_struct_member($40.1, length)
  .loc 2 1449 58
  mov r14, [r15+16]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $39.1:rax $41.1:r14 
  # $42.1: @FILE = call(write_286, $39.1, $41.1)
  .loc 2 1449 17
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $39.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $42.1:rax 
  # $43.1: @FILE = call(end_line_290, $42.1)
  .loc 2 1449 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $44.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  .loc 2 1450 21
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rax:[rbp-32] $44.1:rbx 
  # $45.1: Boolean = $44.1 != null
  .loc 2 1450 21
  cmp rbx, 0
  setne r15b
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rax:[rbp-32] $45.1:r15 
  # jump($45.1, block.9, block.11)
  test r15b, r15b
  jz .LABEL__generate_object_types_56__11
.LABEL__generate_object_types_56__9:
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1451 21
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $45.1
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $49.1:rbx 
  # $50.1: @FILE = call(write_287, $49.1, "  .quad ")
  .loc 2 1451 21
  mov rdi, rbx
  lea rsi, .LABEL__string_153[rip] # "  .quad "
  call write_287
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $50.1:rax 
  # $51.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  .loc 2 1451 62
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $50.1:rax $51.1:r15 
  # $52.1: @String = load_struct_member($51.1, name)
  .loc 2 1451 62
  mov r14, [r15+8]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $50.1:rax $52.1:r14 
  # $53.1: @FILE = call(write_287, $50.1, $52.1)
  .loc 2 1451 21
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $50.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $53.1:rax 
  # $54.1: @FILE = call(end_line_290, $53.1)
  .loc 2 1451 21
  mov rdi, rax
  call end_line_290
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # jump(block.10)
.LABEL__generate_object_types_56__10:
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1455 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $55.1:rbx 
  # $56.1: @FILE = call(write_287, $55.1, ".LABEL__")
  .loc 2 1455 17
  mov rdi, rbx
  lea rsi, .LABEL__string_30[rip] # ".LABEL__"
  call write_287
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $56.1:rax 
  # $57.1: @String = load_struct_member(type.1, name)
  .loc 2 1455 58
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $56.1:rax $57.1:r15 
  # $58.1: @FILE = call(write_287, $56.1, $57.1)
  .loc 2 1455 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $58.1:rax 
  # $59.1: @FILE = call(write_287, $58.1, "__type_name__data: .string \"")
  .loc 2 1455 17
  mov rdi, rax
  lea rsi, .LABEL__string_159[rip] # "__type_name__data: .string \""
  call write_287
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $59.1:rax 
  # $60.1: @String = load_struct_member(type.1, name)
  .loc 2 1455 114
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rbx:[rbp-32] $59.1:rax $60.1:r15 
  # $61.1: @FILE = call(write_287, $59.1, $60.1)
  .loc 2 1455 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $61.1:rax 
  # $62.1: @FILE = call(write_289, $61.1, '"')
  .loc 2 1455 17
  mov rdi, rax
  mov sil, 34
  call write_289
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $62.1:rax 
  # $63.1: @FILE = call(end_line_290, $62.1)
  .loc 2 1455 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # jump(block.6)
.LABEL__generate_object_types_56__6:
  # type_item.5: @List_Item = load_struct_member(type_item.2, next_item)
  .loc 2 1458 21
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] type_item.5:rbx:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_object_types_56__2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] type_item.5:[rbp-16] 
  # [discarded value]: type_item.5
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
.LABEL__generate_object_types_56__11:
  # $46.1: @FILE = load_struct_member(self.1, output_file)
  .loc 2 1453 21
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $46.1:rbx 
  # $47.1: @FILE = call(write_287, $46.1, "  .quad 0")
  .loc 2 1453 21
  mov rdi, rbx
  lea rsi, .LABEL__string_160[rip] # "  .quad 0"
  call write_287
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $47.1:rax 
  # $48.1: @FILE = call(end_line_290, $47.1)
  .loc 2 1453 21
  mov rdi, rax
  call end_line_290
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_object_types_56__10
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
.LABEL__generate_object_types_56__4:
  # return()
  jmp .LABEL__generate_object_types_56__end
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [discarded value]: type_item.2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: type_item.1
  # [live values]: 
.LABEL__generate_object_types_56__end:
  mov rsp, rbp
  pop rbp
  ret

generate_object_types_56__stack_frame_size: .word 32

  .loc 2 1462 1
  .text
write_type_label_57:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_type_label_57__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_type_label_57__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  # $1.1: @String = load_struct_member(type.1, name)
  .loc 2 1463 23
  mov rax, [rsi+8]
  # [discarded value]: type.1
  # [live values]: file.1:rdi $1.1:rax 
  # $2.1: @FILE = call(write_287, file.1, $1.1)
  .loc 2 1463 12
  mov rsi, rax
  call write_287
  # [discarded value]: file.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 2 1463 5
  jmp .LABEL__write_type_label_57__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_type_label_57__end:
  mov rsp, rbp
  pop rbp
  ret

write_type_label_57__stack_frame_size: .word 0

  .loc 3 3 1
  .text
build_58:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_58__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_58__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  # builder.1: @IR_Builder = call(create_ir_builder_59, compilation_unit.1)
  .loc 3 4 16
  mov [rbp-8], rdi
  call create_ir_builder_59
  # [live values]: compilation_unit.1:[rbp-8] builder.1:rax 
  # call(build_72, builder.1)
  .loc 3 5 5
  mov rdi, rax
  mov [rbp-16], rax
  call build_72
  # [live values]: compilation_unit.1:[rbp-8] builder.1:[rbp-16] 
  # $2.1: @List = load_struct_member(compilation_unit.1, sources)
  .loc 3 7 19
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: compilation_unit.1
  # [live values]: builder.1:[rbp-16] $2.1:rbx 
  # $3.1: @List = load_struct_member(builder.1, named_functions)
  .loc 3 8 27
  mov rax, [rbp-16]
  mov r15, [rax+24]
  # [live values]: builder.1:rax:[rbp-16] $2.1:rbx $3.1:r15 
  # $4.1: @List = load_struct_member(builder.1, named_types)
  .loc 3 9 23
  mov r14, [rax+16]
  # [discarded value]: builder.1
  # [live values]: $2.1:rbx $3.1:r15 $4.1:r14 
  # $5.1: @IR_Build = new(IR_Build)
  .loc 3 6 12
  mov [rbp-8], rbx
  mov [rbp-16], r14
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  # [live values]: $2.1:[rbp-8] $3.1:[rbp-24] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, sources, $2.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $2.1
  # [live values]: $3.1:[rbp-24] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, named_functions, $3.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, named_types, $4.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  # return($5.1)
  .loc 3 6 5
  jmp .LABEL__build_58__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__build_58__end:
  mov rsp, rbp
  pop rbp
  ret

build_58__stack_frame_size: .word 32

  .loc 3 40 1
  .text
create_ir_builder_59:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_builder_59__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_builder_59__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  # $1.1: @List = new(List)
  .loc 3 41 20
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] $1.1:rax 
  # named_types.1: @List = $1.1
  .loc 3 41 5
  # [discarded value]: $1.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:rax 
  # $2.1: @IR_Any_Type = new(IR_Any_Type)
  .loc 3 42 24
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Any_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, name, "Any")
  lea rbx, .LABEL__string_161[rip] # "Any"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $2.1:rax 
  # call(append_268, named_types.1, $2.1)
  .loc 3 42 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $2.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $3.1: @IR_Boolean_Type = new(IR_Boolean_Type)
  .loc 3 43 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Boolean_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, name, "Boolean")
  lea rbx, .LABEL__string_162[rip] # "Boolean"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # call(append_268, named_types.1, $3.1)
  .loc 3 43 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $4.1: @IR_Int_Type = new(IR_Int_Type)
  .loc 3 44 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Int_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name, "Int")
  lea rbx, .LABEL__string_163[rip] # "Int"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $4.1:rax 
  # call(append_268, named_types.1, $4.1)
  .loc 3 44 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $4.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $5.1: @IR_Int8_Type = new(IR_Int8_Type)
  .loc 3 45 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Int8_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, name, "Int8")
  lea rbx, .LABEL__string_164[rip] # "Int8"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $5.1:rax 
  # call(append_268, named_types.1, $5.1)
  .loc 3 45 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $5.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $6.1: @IR_Int16_Type = new(IR_Int16_Type)
  .loc 3 46 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Int16_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, name, "Int16")
  lea rbx, .LABEL__string_165[rip] # "Int16"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $6.1:rax 
  # call(append_268, named_types.1, $6.1)
  .loc 3 46 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $6.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $7.1: @IR_Int32_Type = new(IR_Int32_Type)
  .loc 3 47 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Int32_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $7.1:rax 
  # store_struct_member($7.1, name, "Int32")
  lea rbx, .LABEL__string_166[rip] # "Int32"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $7.1:rax 
  # call(append_268, named_types.1, $7.1)
  .loc 3 47 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $7.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $8.1: @IR_Int64_Type = new(IR_Int64_Type)
  .loc 3 48 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Int64_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $8.1:rax 
  # store_struct_member($8.1, name, "Int64")
  lea rbx, .LABEL__string_167[rip] # "Int64"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $8.1:rax 
  # call(append_268, named_types.1, $8.1)
  .loc 3 48 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $8.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $9.1: @IR_Nothing_Type = new(IR_Nothing_Type)
  .loc 3 49 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Nothing_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $9.1:rax 
  # store_struct_member($9.1, name, "Nothing")
  lea rbx, .LABEL__string_168[rip] # "Nothing"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $9.1:rax 
  # call(append_268, named_types.1, $9.1)
  .loc 3 49 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $9.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $10.1: @IR_Null_Type = new(IR_Null_Type)
  .loc 3 50 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Null_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $10.1:rax 
  # store_struct_member($10.1, name, "Null")
  lea rbx, .LABEL__string_169[rip] # "Null"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $10.1:rax 
  # call(append_268, named_types.1, $10.1)
  .loc 3 50 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $10.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $11.1: @IR_Undefined_Type = new(IR_Undefined_Type)
  .loc 3 51 24
  mov rdi, 16
  call malloc
  lea rbx, IR_Undefined_Type[rip]
  mov [rax], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $11.1:rax 
  # store_struct_member($11.1, name, "Undefined")
  lea rbx, .LABEL__string_170[rip] # "Undefined"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $11.1:rax 
  # call(append_268, named_types.1, $11.1)
  .loc 3 51 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_268
  # [discarded value]: $11.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  # $12.1: @List = new(List)
  .loc 3 31 24
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # store_struct_member($12.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # store_struct_member($12.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # store_struct_member($12.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 3 32 27
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  # $14.1: @IR_Builder_Context = new(IR_Builder_Context)
  .loc 3 53 19
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:[rbp-32] $14.1:rax 
  # store_struct_member($14.1, parent, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:[rbp-32] $14.1:rax 
  # store_struct_member($14.1, variables, $12.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $12.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $13.1:[rbp-32] $14.1:rax 
  # store_struct_member($14.1, named_values, $13.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $13.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:rax 
  # $15.1: @List = new(List)
  .loc 3 23 30
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # store_struct_member($15.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # store_struct_member($15.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # store_struct_member($15.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  # $16.1: @Counter = new(Counter)
  .loc 3 26 25
  mov [rbp-32], rax
  mov rdi, 8
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:rax 
  # store_struct_member($16.1, value, 0)
  mov QWORD PTR [rax+0], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:rax 
  # $17.1: @IR_Builder = new(IR_Builder)
  .loc 3 52 12
  mov [rbp-40], rax
  mov rdi, 56
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, context, $14.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $14.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, compilation_unit, compilation_unit.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: compilation_unit.1
  # [live values]: named_types.1:[rbp-16] $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, named_types, named_types.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: named_types.1
  # [live values]: $15.1:[rbp-32] $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, named_functions, $15.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $15.1
  # [live values]: $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, current_block, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, current_loop, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: $16.1:[rbp-40] $17.1:rax 
  # store_struct_member($17.1, counter, $16.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+48], rbx
  # [discarded value]: $16.1
  # [live values]: $17.1:rax 
  # return($17.1)
  .loc 3 52 5
  jmp .LABEL__create_ir_builder_59__end
  # [discarded value]: $17.1
  # [live values]: 
.LABEL__create_ir_builder_59__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_builder_59__stack_frame_size: .word 48

  .loc 3 59 1
  .text
get_named_type_60:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_type_60__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_type_60__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # $1.1: @List = load_struct_member(self.1, named_types)
  .loc 3 60 20
  mov rax, [rdi+16]
  # [discarded value]: self.1
  # [live values]: name.1:rsi $1.1:rax 
  # named_types.1: @List_Iterator = call(create_iterator_279, $1.1)
  .loc 3 60 20
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_279
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-8] named_types.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__get_named_type_60__2:
  # $3.1: Boolean = call(has_next_282, named_types.1)
  .loc 3 61 12
  mov rdi, [rbp-16]
  call has_next_282
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__get_named_type_60__4
.LABEL__get_named_type_60__3:
  # named_type.1: @IR_Type = call(next_283, named_types.1)
  .loc 3 62 23
  mov rdi, [rbp-16]
  call next_283
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:rax 
  # $6.1: @String = load_struct_member(named_type.1, name)
  .loc 3 63 25
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:rax $6.1:rbx 
  # $7.1: Boolean = call(equals_296, name.1, $6.1)
  .loc 3 63 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call equals_296
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:[rbp-24] $7.1:rax 
  # jump($7.1, block.5, block.2)
  test al, al
  jz .LABEL__get_named_type_60__2
.LABEL__get_named_type_60__5:
  # return(named_type.1)
  .loc 3 64 13
  mov rax, [rbp-24]
  jmp .LABEL__get_named_type_60__end
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:[rbp-24] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:[rbp-24] 
  # [discarded value]: named_type.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
.LABEL__get_named_type_60__4:
  # return(null)
  .loc 3 67 5
  xor rax, rax
  jmp .LABEL__get_named_type_60__end
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [discarded value]: name.1
  # [discarded value]: named_types.1
  # [live values]: 
.LABEL__get_named_type_60__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_type_60__stack_frame_size: .word 32

  .loc 3 70 1
  .text
add_variable_61:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_variable_61__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_variable_61__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 71 5
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: variable.1:rsi $1.1:rax 
  # $2.1: @List = load_struct_member($1.1, variables)
  .loc 3 71 5
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: variable.1:rsi $2.1:rbx 
  # call(prepend_269, $2.1, variable.1)
  .loc 3 71 5
  mov rdi, rbx
  mov [rbp-8], rsi
  call prepend_269
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-8] 
  # return(variable.1)
  .loc 3 72 5
  mov rax, [rbp-8]
  jmp .LABEL__add_variable_61__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__add_variable_61__end:
  mov rsp, rbp
  pop rbp
  ret

add_variable_61__stack_frame_size: .word 16

  .loc 3 75 1
  .text
get_variable_62:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_62__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_62__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # context.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 76 16
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: name.1:rsi context.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_variable_62__2:
  # context.2: @IR_Builder_Context = phi(context.1, context.4)
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] 
  # $2.1: @List = load_struct_member(context.2, variables)
  .loc 3 78 22
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:rax:[rbp-8] $2.1:rbx 
  # variables.1: @List_Iterator = call(create_iterator_279, $2.1)
  .loc 3 78 22
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__get_variable_62__4:
  # $4.1: Boolean = call(has_next_282, variables.1)
  .loc 3 79 16
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__get_variable_62__6
.LABEL__get_variable_62__5:
  # variable.1: @IR_Variable = call(next_283, variables.1)
  .loc 3 80 25
  mov rdi, [rbp-24]
  call next_283
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:rax 
  # $7.1: @String = load_struct_member(variable.1, name)
  .loc 3 81 29
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:rax $7.1:rbx 
  # $8.1: Boolean = call(equals_296, name.1, $7.1)
  .loc 3 81 17
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call equals_296
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.7, block.4)
  test al, al
  jz .LABEL__get_variable_62__4
.LABEL__get_variable_62__7:
  # return(variable.1)
  .loc 3 82 17
  mov rax, [rbp-32]
  jmp .LABEL__get_variable_62__end
  # [discarded value]: $8.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:[rbp-32] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:[rbp-32] 
  # [discarded value]: variable.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
.LABEL__get_variable_62__6:
  # context.4: @IR_Builder_Context = load_struct_member(context.2, parent)
  .loc 3 85 19
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:rbx:[rbp-8] 
  # $10.1: Boolean = context.4 == null
  .loc 3 86 13
  cmp rbx, 0
  sete al
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:rbx:[rbp-8] $10.1:rax 
  # jump($10.1, block.10, block.2)
  test al, al
  mov [rbp-8], rbx
  jz .LABEL__get_variable_62__2
.LABEL__get_variable_62__10:
  # return(null)
  .loc 3 87 13
  xor rax, rax
  jmp .LABEL__get_variable_62__end
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:[rbp-8] 
  # [discarded value]: context.4
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [discarded value]: context.2
  # [discarded value]: variables.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [discarded value]: name.1
  # [discarded value]: context.1
  # [live values]: 
.LABEL__get_variable_62__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_62__stack_frame_size: .word 32

  .loc 3 92 1
  .text
get_variable_value_63:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_63__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_63__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # IR_Global_Variable.5: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:rdi variable.1:rsi IR_Global_Variable.5:rax 
  # $1.1: Boolean = call(is_293, variable.1, IR_Global_Variable.5)
  .loc 3 93 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Global_Variable.5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__get_variable_value_63__3
.LABEL__get_variable_value_63__2:
  # $2.1: @IR_Variable_Value = call(create_variable_value_64, self.1, variable.1)
  .loc 3 94 64
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  call create_variable_value_64
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction_174, $2.1)
  .loc 3 94 28
  mov rdi, rax
  call create_ir_load_variable_instruction_174
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $3.1:rax 
  # $5.1: @IR_Variable_Value = call(append_71, self.1, $3.1, null)
  .loc 3 94 16
  mov rdi, [rbp-8]
  mov rsi, rax
  xor rdx, rdx
  call append_71
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $5.1:rax 
  # return($5.1)
  .loc 3 94 9
  jmp .LABEL__get_variable_value_63__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
.LABEL__get_variable_value_63__3:
  # $6.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 96 34
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $6.1:rbx 
  # current_block_instruction.1: @IR_Instruction = load_struct_member($6.1, last_instruction)
  .loc 3 96 34
  mov r15, [rbx+40]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:r15 
  # jump(block.5)
  mov [rbp-24], r15
.LABEL__get_variable_value_63__5:
  # current_block_instruction.2: @IR_Instruction = phi(current_block_instruction.1, current_block_instruction.7)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
  # $8.1: Boolean = current_block_instruction.2 != null
  .loc 3 97 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $8.1:rax 
  # jump($8.1, block.6, block.7)
  test al, al
  jz .LABEL__get_variable_value_63__7
.LABEL__get_variable_value_63__6:
  # $9.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  .loc 3 98 13
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:rax:[rbp-24] $9.1:rbx 
  # $11.1: Boolean = $9.1 != null
  .loc 3 98 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:rax:[rbp-24] $11.1:r15 
  # jump($11.1, block.8, block.9)
  test r15b, r15b
  mov [rbp-25], r15b
  jz .LABEL__get_variable_value_63__9
.LABEL__get_variable_value_63__8:
  # $12.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  .loc 3 98 63
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:rax:[rbp-24] $11.1:[rbp-25] $12.1:rbx 
  # $13.1: @IR_Variable = load_struct_member($12.1, variable)
  .loc 3 98 63
  mov r15, [rbx+24]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:rax:[rbp-24] $11.1:[rbp-25] $13.1:r15 
  # $11.2: Boolean = $13.1 == variable.1
  .loc 3 98 63
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:rax:[rbp-24] $11.1:[rbp-25] $11.2:rbx:[rbp-25] 
  # jump(block.9)
  mov [rbp-25], bl
.LABEL__get_variable_value_63__9:
  # $11.3: Boolean = phi($11.1, $11.2)
  .loc 3 98 13
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] $11.3:[rbp-25] 
  # jump($11.3, block.10, block.11)
  mov al, [rbp-25]
  test al, al
  jz .LABEL__get_variable_value_63__11
.LABEL__get_variable_value_63__10:
  # $15.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  .loc 3 99 20
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $11.3
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:rax:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] $15.1:rbx 
  # return($15.1)
  .loc 3 99 13
  mov rax, rbx
  jmp .LABEL__get_variable_value_63__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
.LABEL__get_variable_value_63__11:
  # current_block_instruction.7: @IR_Instruction = load_struct_member(current_block_instruction.2, prev_instruction)
  .loc 3 101 37
  mov rax, [rbp-24]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] current_block_instruction.7:rbx:[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rbx
  jmp .LABEL__get_variable_value_63__5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] current_block_instruction.7:[rbp-24] 
  # [discarded value]: current_block_instruction.7
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
.LABEL__get_variable_value_63__7:
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 103 20
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $17.1:rbx 
  # $18.1: @IR_Variable_Value = call(create_variable_value_64, self.1, variable.1)
  .loc 3 103 73
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-32], rbx
  call create_variable_value_64
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $17.1:[rbp-32] $18.1:rax 
  # $19.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_191, $18.1)
  .loc 3 103 47
  mov rdi, rax
  call create_ir_phi_instruction_191
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $17.1:[rbp-32] $19.1:rax 
  # instruction.1: @IR_Instruction = call(prepend_152, $17.1, $19.1)
  .loc 3 103 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call prepend_152
  # [discarded value]: $17.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] instruction.1:rax 
  # $21.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 3 104 12
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $21.1:rbx 
  # return($21.1)
  .loc 3 104 5
  mov rax, rbx
  jmp .LABEL__get_variable_value_63__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
  # [discarded value]: current_block_instruction.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] 
  # [discarded value]: current_block_instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__get_variable_value_63__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_63__stack_frame_size: .word 32

  .loc 3 107 1
  .text
create_variable_value_64:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_variable_value_64__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_variable_value_64__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: variable.1:rsi 
  # $1.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 3 108 41
  mov rax, [rsi+16]
  # [live values]: variable.1:rsi $1.1:rax 
  # $2.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov rdi, 24
  call malloc
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # $3.1: @IR_Variable_Value = new(IR_Variable_Value)
  .loc 3 108 12
  mov [rbp-24], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Variable_Value[rip]
  mov [rax], rbx
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, type, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: variable.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, user_instructions, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-16] $3.1:rax 
  # $4.1: @IR_Variable_Value = call(init_150, $3.1, variable.1)
  .loc 3 108 12
  mov rdi, rax
  mov rsi, [rbp-16]
  call init_150
  # [discarded value]: variable.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 3 108 5
  jmp .LABEL__create_variable_value_64__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__create_variable_value_64__end:
  mov rsp, rbp
  pop rbp
  ret

create_variable_value_64__stack_frame_size: .word 32

  .loc 3 111 1
  .text
get_named_function_65:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_65__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_65__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  # $1.1: @String = load_struct_member(name.1, lexeme)
  .loc 3 112 41
  mov rax, [rsi+8]
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx $1.1:rax 
  # function.1: @IR_Function = call(get_named_function_66, self.1, $1.1, argument_types.1)
  .loc 3 112 17
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdx
  call get_named_function_66
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax 
  # $3.1: Boolean = function.1 == null
  .loc 3 113 9
  cmp rax, 0
  sete bl
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__get_named_function_65__3
.LABEL__get_named_function_65__2:
  # $4.1: @String = call(clone_295, "Undefined function: ")
  .loc 3 114 20
  lea rdi, .LABEL__string_171[rip] # "Undefined function: "
  call clone_295
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $4.1:rax 
  # $5.1: @String = load_struct_member(name.1, lexeme)
  .loc 3 114 57
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: name.1:rbx:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $4.1:rax $5.1:r15 
  # $6.1: @String = call(append_304, $4.1, $5.1)
  .loc 3 114 20
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $6.1:rax 
  # message.1: @String = call(append_304, $6.1, " :: (")
  .loc 3 114 20
  mov rdi, rax
  lea rsi, .LABEL__string_172[rip] # " :: ("
  call append_304
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:rax 
  # argument_types.1: @List_Iterator = call(create_iterator_279, argument_types.1)
  .loc 3 115 27
  mov rdi, [rbp-16]
  mov [rbp-32], rax
  call create_iterator_279
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:rax 
  # jump(block.4)
  mov [rbp-40], rax
.LABEL__get_named_function_65__4:
  # $9.1: Boolean = call(has_next_282, argument_types.1)
  .loc 3 116 16
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__get_named_function_65__6
.LABEL__get_named_function_65__5:
  # argument_type.1: @IR_Type = call(next_283, argument_types.1)
  .loc 3 117 30
  mov rdi, [rbp-40]
  call next_283
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] argument_type.1:rax 
  # $12.1: @String = load_struct_member(argument_type.1, name)
  .loc 3 118 28
  mov rbx, [rax+8]
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $12.1:rbx 
  # $13.1: @String = call(append_304, message.1, $12.1)
  .loc 3 118 13
  mov rdi, [rbp-32]
  mov rsi, rbx
  call append_304
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # $14.1: Boolean = call(has_next_282, argument_types.1)
  .loc 3 119 17
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $14.1:rax 
  # jump($14.1, block.7, block.4)
  test al, al
  jz .LABEL__get_named_function_65__4
.LABEL__get_named_function_65__7:
  # $15.1: @String = call(append_304, message.1, ", ")
  .loc 3 120 17
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_37[rip] # ", "
  call append_304
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # jump(block.4)
  jmp .LABEL__get_named_function_65__4
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
.LABEL__get_named_function_65__6:
  # $16.1: @String = call(append_304, message.1, ")")
  .loc 3 123 9
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_173[rip] # ")"
  call append_304
  # [discarded value]: $16.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # $17.1: @Source_Location = load_struct_member(name.1, location)
  .loc 3 124 15
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:rax:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $17.1:rbx 
  # call(abort_264, $17.1, message.1)
  .loc 3 124 9
  mov rdi, rbx
  mov rsi, [rbp-32]
  call abort_264
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [discarded value]: message.1
  # [discarded value]: argument_types.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
.LABEL__get_named_function_65__3:
  # return(function.1)
  .loc 3 126 5
  mov rax, [rbp-24]
  jmp .LABEL__get_named_function_65__end
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: name.1
  # [discarded value]: argument_types.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__get_named_function_65__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_65__stack_frame_size: .word 48

  .loc 3 129 1
  .text
get_named_function_66:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_66__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_66__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  # function.1: @IR_Function = null
  .loc 3 130 5
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx function.1:rax 
  # $1.1: @List = load_struct_member(self.1, named_functions)
  .loc 3 131 24
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi argument_types.1:rdx function.1:rax $1.1:rbx 
  # named_functions.1: @List_Iterator = call(create_iterator_279, $1.1)
  .loc 3 131 24
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_279
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__get_named_function_66__2:
  # function.5: @IR_Function = phi(function.1, function.3, function.5)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # $3.1: Boolean = call(has_next_282, named_functions.1)
  .loc 3 132 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__get_named_function_66__4
.LABEL__get_named_function_66__3:
  # named_function.1: @IR_Function = call(next_283, named_functions.1)
  .loc 3 133 27
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax 
  # $6.1: @String = load_struct_member(named_function.1, name)
  .loc 3 134 25
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax $6.1:rbx 
  # $7.1: Boolean = call(equals_296, name.1, $6.1)
  .loc 3 134 13
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-40], rax
  call equals_296
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $7.1:rax 
  # jump($7.1, block.5, block.2)
  test al, al
  jz .LABEL__get_named_function_66__2
.LABEL__get_named_function_66__5:
  # is_match.1: Boolean = true
  .loc 3 135 13
  mov al, 1
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:rax 
  # argument_types.1: @List_Iterator = call(create_iterator_279, argument_types.1)
  .loc 3 136 31
  mov rdi, [rbp-16]
  mov [rbp-41], al
  call create_iterator_279
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:rax 
  # $9.1: @List = load_struct_member(named_function.1, parameters)
  .loc 3 137 42
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rbx:[rbp-40] is_match.1:[rbp-41] argument_types.1:rax $9.1:r15 
  # named_function_parameters.1: @List_Iterator = call(create_iterator_279, $9.1)
  .loc 3 137 42
  mov rdi, r15
  mov [rbp-49], rax
  call create_iterator_279
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:rax 
  # jump(block.7)
  mov [rbp-57], rax
.LABEL__get_named_function_66__7:
  # $12.1: Boolean = call(has_next_282, argument_types.1)
  .loc 3 138 20
  mov rdi, [rbp-49]
  call has_next_282
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:rax 
  # jump($12.1, block.10, block.11)
  test al, al
  mov [rbp-58], al
  jz .LABEL__get_named_function_66__11
.LABEL__get_named_function_66__10:
  # $12.2: Boolean = call(has_next_282, named_function_parameters.1)
  .loc 3 138 49
  mov rdi, [rbp-57]
  call has_next_282
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:rax:[rbp-58] 
  # jump(block.11)
  mov [rbp-58], al
.LABEL__get_named_function_66__11:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 3 138 20
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] $12.3:[rbp-58] 
  # jump($12.3, block.8, block.9)
  mov al, [rbp-58]
  test al, al
  jz .LABEL__get_named_function_66__9
.LABEL__get_named_function_66__8:
  # argument_type.1: @IR_Type = call(next_283, argument_types.1)
  .loc 3 139 34
  mov rdi, [rbp-49]
  call next_283
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] argument_type.1:rax $12.2:[rbp-58] 
  # named_function_parameter.1: @IR_Function_Parameter = call(next_283, named_function_parameters.1)
  .loc 3 140 45
  mov rdi, [rbp-57]
  mov [rbp-66], rax
  call next_283
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] argument_type.1:[rbp-66] named_function_parameter.1:rax $12.2:[rbp-58] 
  # $18.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  .loc 3 141 21
  mov rbx, [rax+16]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] argument_type.1:[rbp-66] $18.1:rbx $12.2:[rbp-58] 
  # $19.1: Boolean = call(accepts_68, $18.1, argument_type.1)
  .loc 3 141 21
  mov rdi, rbx
  mov rsi, [rbp-66]
  call accepts_68
  # [discarded value]: argument_type.1
  # [discarded value]: $18.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $19.1:rax $12.2:[rbp-58] 
  # $20.1: Boolean = $19.1 == false
  .loc 3 141 21
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $20.1:rbx $12.2:[rbp-58] 
  # jump($20.1, block.12, block.7)
  test bl, bl
  jz .LABEL__get_named_function_66__7
.LABEL__get_named_function_66__12:
  # is_match.2: Boolean = false
  .loc 3 142 21
  mov al, 0
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] is_match.2:rax:[rbp-41] 
  # jump(block.9)
  mov [rbp-41], al
.LABEL__get_named_function_66__9:
  # $21.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-41]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:rax $12.2:[rbp-58] is_match.2:[rbp-41] 
  # jump($21.1, block.17, block.18)
  test al, al
  mov [rbp-59], al
  jz .LABEL__get_named_function_66__18
.LABEL__get_named_function_66__17:
  # $22.1: Boolean = call(has_next_282, argument_types.1)
  .loc 3 146 29
  mov rdi, [rbp-49]
  call has_next_282
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $22.1:rax 
  # $21.2: Boolean = $22.1 == false
  .loc 3 146 29
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:rbx:[rbp-59] 
  # jump(block.18)
  mov [rbp-59], bl
.LABEL__get_named_function_66__18:
  # $24.1: Boolean = phi($21.1, $21.2)
  .loc 3 146 17
  mov al, [rbp-59]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] $24.1:rax 
  # jump($24.1, block.15, block.16)
  test al, al
  mov [rbp-60], al
  jz .LABEL__get_named_function_66__16
.LABEL__get_named_function_66__15:
  # $25.1: Boolean = call(has_next_282, named_function_parameters.1)
  .loc 3 146 67
  mov rdi, [rbp-57]
  call has_next_282
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $25.1:rax $21.2:[rbp-59] $24.1:[rbp-60] 
  # $24.2: Boolean = $25.1 == false
  .loc 3 146 67
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:rbx:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # jump(block.16)
  mov [rbp-60], bl
.LABEL__get_named_function_66__16:
  # $24.3: Boolean = phi($24.1, $24.2)
  .loc 3 146 17
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $24.3:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # jump($24.3, block.19, block.2)
  mov al, [rbp-60]
  test al, al
  jz .LABEL__get_named_function_66__2
.LABEL__get_named_function_66__19:
  # $27.1: Boolean = function.5 != null
  .loc 3 147 21
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [discarded value]: $24.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] $27.1:rax 
  # jump($27.1, block.21, block.22)
  test al, al
  jz .LABEL__get_named_function_66__22
.LABEL__get_named_function_66__21:
  # call(abort_292, name.1)
  .loc 3 148 21
  mov rdi, [rbp-24]
  call abort_292
  # [discarded value]: $27.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
.LABEL__get_named_function_66__22:
  # function.3: @IR_Function = named_function.1
  .loc 3 150 17
  mov rax, [rbp-40]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] function.3:rax:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_66__2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [discarded value]: $24.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [discarded value]: $24.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] 
  # [discarded value]: $21.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [discarded value]: $21.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] 
  # [discarded value]: is_match.1
  # [discarded value]: argument_types.1
  # [discarded value]: named_function_parameters.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] 
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
.LABEL__get_named_function_66__4:
  # return(function.5)
  .loc 3 154 5
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_66__end
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: name.1
  # [discarded value]: argument_types.1
  # [discarded value]: function.1
  # [discarded value]: named_functions.1
  # [live values]: 
.LABEL__get_named_function_66__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_66__stack_frame_size: .word 80

  .loc 3 157 1
  .text
get_named_function_67:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_67__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_67__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # function_type.1: @IR_Function_Type = load_variable(function_type)
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx 
  # function.1: @IR_Function = null
  .loc 3 158 5
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx function.1:rax 
  # $1.1: @List = load_struct_member(self.1, named_functions)
  .loc 3 159 24
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi function_type.1:rdx function.1:rax $1.1:rbx 
  # named_functions.1: @List_Iterator = call(create_iterator_279, $1.1)
  .loc 3 159 24
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_279
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__get_named_function_67__2:
  # function.5: @IR_Function = phi(function.1, function.3, function.5)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # $3.1: Boolean = call(has_next_282, named_functions.1)
  .loc 3 160 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__get_named_function_67__4
.LABEL__get_named_function_67__3:
  # named_function.1: @IR_Function = call(next_283, named_functions.1)
  .loc 3 161 27
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax 
  # $6.1: @String = load_struct_member(named_function.1, name)
  .loc 3 162 25
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax $6.1:rbx 
  # $8.1: Boolean = call(equals_296, name.1, $6.1)
  .loc 3 162 13
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-40], rax
  call equals_296
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.7, block.8)
  test al, al
  mov [rbp-41], al
  jz .LABEL__get_named_function_67__8
.LABEL__get_named_function_67__7:
  # $9.1: @IR_Type = load_struct_member(named_function.1, return_type)
  .loc 3 162 49
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $9.1:rbx 
  # $10.1: @IR_Type = load_struct_member(function_type.1, return_type)
  .loc 3 162 83
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: name.1:[rbp-24] function_type.1:r15:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $9.1:rbx $10.1:r14 
  # $8.2: Boolean = call(equals_141, $9.1, $10.1)
  .loc 3 162 49
  mov rdi, rbx
  mov rsi, r14
  call equals_141
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.8)
  mov [rbp-41], al
.LABEL__get_named_function_67__8:
  # $12.1: Boolean = phi($8.1, $8.2)
  .loc 3 162 13
  mov al, [rbp-41]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # jump($12.1, block.5, block.6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_67__6
.LABEL__get_named_function_67__5:
  # $13.1: @List = load_struct_member(named_function.1, parameters)
  .loc 3 162 113
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $13.1:rbx $8.2:[rbp-41] $12.1:[rbp-42] 
  # $14.1: Int = load_struct_member($13.1, size)
  .loc 3 162 113
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $14.1:r15 $8.2:[rbp-41] $12.1:[rbp-42] 
  # $15.1: @List = load_struct_member(function_type.1, parameters)
  .loc 3 162 147
  mov rbx, [rbp-16]
  mov r14, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $14.1:r15 $15.1:r14 $8.2:[rbp-41] $12.1:[rbp-42] 
  # $16.1: Int = load_struct_member($15.1, size)
  .loc 3 162 147
  mov r13, [r14+16]
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $14.1:r15 $16.1:r13 $8.2:[rbp-41] $12.1:[rbp-42] 
  # $12.2: Boolean = $14.1 == $16.1
  .loc 3 162 113
  cmp r15, r13
  sete r14b
  # [discarded value]: $14.1
  # [discarded value]: $16.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax:[rbp-40] $8.1:[rbp-41] $12.2:r14:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] 
  # jump(block.6)
  mov [rbp-42], r14b
.LABEL__get_named_function_67__6:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 3 162 13
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $12.3:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] 
  # jump($12.3, block.9, block.2)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__get_named_function_67__2
.LABEL__get_named_function_67__9:
  # is_match.1: Boolean = true
  .loc 3 163 13
  mov al, 1
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:rax 
  # $18.1: @List = load_struct_member(function_type.1, parameters)
  .loc 3 164 41
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:rax $18.1:r15 
  # function_type_parameters.1: @List_Iterator = call(create_iterator_279, $18.1)
  .loc 3 164 41
  mov rdi, r15
  mov [rbp-43], al
  call create_iterator_279
  # [discarded value]: $18.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:rax 
  # $20.1: @List = load_struct_member(named_function.1, parameters)
  .loc 3 165 42
  mov rbx, [rbp-40]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rbx:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:rax $20.1:r15 
  # named_function_parameters.1: @List_Iterator = call(create_iterator_279, $20.1)
  .loc 3 165 42
  mov rdi, r15
  mov [rbp-51], rax
  call create_iterator_279
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:rax 
  # jump(block.11)
  mov [rbp-59], rax
.LABEL__get_named_function_67__11:
  # $23.1: Boolean = call(has_next_282, function_type_parameters.1)
  .loc 3 166 20
  mov rdi, [rbp-51]
  call has_next_282
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:rax 
  # jump($23.1, block.14, block.15)
  test al, al
  mov [rbp-60], al
  jz .LABEL__get_named_function_67__15
.LABEL__get_named_function_67__14:
  # $23.2: Boolean = call(has_next_282, named_function_parameters.1)
  .loc 3 166 59
  mov rdi, [rbp-59]
  call has_next_282
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:rax:[rbp-60] 
  # jump(block.15)
  mov [rbp-60], al
.LABEL__get_named_function_67__15:
  # $23.3: Boolean = phi($23.1, $23.2)
  .loc 3 166 20
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] $23.3:[rbp-60] 
  # jump($23.3, block.12, block.13)
  mov al, [rbp-60]
  test al, al
  jz .LABEL__get_named_function_67__13
.LABEL__get_named_function_67__12:
  # function_type_parameter.1: @IR_Function_Type_Parameter = call(next_283, function_type_parameters.1)
  .loc 3 167 44
  mov rdi, [rbp-51]
  call next_283
  # [discarded value]: $23.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] function_type_parameter.1:rax $23.2:[rbp-60] 
  # named_function_parameter.1: @IR_Function_Parameter = call(next_283, named_function_parameters.1)
  .loc 3 168 45
  mov rdi, [rbp-59]
  mov [rbp-68], rax
  call next_283
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] function_type_parameter.1:[rbp-68] named_function_parameter.1:rax $23.2:[rbp-60] 
  # $29.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  .loc 3 169 21
  mov rbx, [rax+16]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] function_type_parameter.1:[rbp-68] $29.1:rbx $23.2:[rbp-60] 
  # $30.1: @IR_Type = load_struct_member(function_type_parameter.1, type)
  .loc 3 169 58
  mov rax, [rbp-68]
  mov r15, [rax+8]
  # [discarded value]: function_type_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $29.1:rbx $30.1:r15 $23.2:[rbp-60] 
  # $31.1: Boolean = call(equals_141, $29.1, $30.1)
  .loc 3 169 21
  mov rdi, rbx
  mov rsi, r15
  call equals_141
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $31.1:rax $23.2:[rbp-60] 
  # $32.1: Boolean = $31.1 == false
  .loc 3 169 21
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $32.1:rbx $23.2:[rbp-60] 
  # jump($32.1, block.16, block.11)
  test bl, bl
  jz .LABEL__get_named_function_67__11
.LABEL__get_named_function_67__16:
  # is_match.2: Boolean = false
  .loc 3 170 21
  mov al, 0
  # [discarded value]: $32.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] is_match.2:rax:[rbp-43] 
  # jump(block.13)
  mov [rbp-43], al
.LABEL__get_named_function_67__13:
  # $33.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-43]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:rax $23.2:[rbp-60] is_match.2:[rbp-43] 
  # jump($33.1, block.21, block.22)
  test al, al
  mov [rbp-61], al
  jz .LABEL__get_named_function_67__22
.LABEL__get_named_function_67__21:
  # $34.1: Boolean = call(has_next_282, function_type_parameters.1)
  .loc 3 174 29
  mov rdi, [rbp-51]
  call has_next_282
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $34.1:rax 
  # $33.2: Boolean = $34.1 == false
  .loc 3 174 29
  cmp al, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $33.2:rbx:[rbp-61] 
  # jump(block.22)
  mov [rbp-61], bl
.LABEL__get_named_function_67__22:
  # $36.1: Boolean = phi($33.1, $33.2)
  .loc 3 174 17
  mov al, [rbp-61]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $33.2:[rbp-61] $36.1:rax 
  # jump($36.1, block.19, block.20)
  test al, al
  mov [rbp-62], al
  jz .LABEL__get_named_function_67__20
.LABEL__get_named_function_67__19:
  # $37.1: Boolean = call(has_next_282, named_function_parameters.1)
  .loc 3 174 77
  mov rdi, [rbp-59]
  call has_next_282
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $37.1:rax $33.2:[rbp-61] $36.1:[rbp-62] 
  # $36.2: Boolean = $37.1 == false
  .loc 3 174 77
  cmp al, 0
  sete bl
  # [discarded value]: $37.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:rbx:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
  # jump(block.20)
  mov [rbp-62], bl
.LABEL__get_named_function_67__20:
  # $36.3: Boolean = phi($36.1, $36.2)
  .loc 3 174 17
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $36.3:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
  # jump($36.3, block.23, block.2)
  mov al, [rbp-62]
  test al, al
  jz .LABEL__get_named_function_67__2
.LABEL__get_named_function_67__23:
  # $39.1: Boolean = function.5 != null
  .loc 3 175 21
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [discarded value]: $36.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] $39.1:rax 
  # jump($39.1, block.25, block.26)
  test al, al
  jz .LABEL__get_named_function_67__26
.LABEL__get_named_function_67__25:
  # call(abort_292, name.1)
  .loc 3 176 21
  mov rdi, [rbp-24]
  call abort_292
  # [discarded value]: $39.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
.LABEL__get_named_function_67__26:
  # function.3: @IR_Function = named_function.1
  .loc 3 178 17
  mov rax, [rbp-40]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] function.3:rax:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_67__2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $36.2:[rbp-62] $33.2:[rbp-61] $36.1:[rbp-62] 
  # [discarded value]: $36.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $33.2:[rbp-61] $36.1:[rbp-62] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $33.2:[rbp-61] $36.1:[rbp-62] 
  # [discarded value]: $36.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $33.2:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] $33.2:[rbp-61] 
  # [discarded value]: $33.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $33.1:[rbp-61] $23.2:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: $33.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] $23.2:[rbp-60] 
  # [discarded value]: $23.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] $23.1:[rbp-60] 
  # [discarded value]: $23.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] is_match.1:[rbp-43] function_type_parameters.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [discarded value]: is_match.1
  # [discarded value]: function_type_parameters.1
  # [discarded value]: named_function_parameters.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $12.2:[rbp-42] $8.2:[rbp-41] $12.1:[rbp-42] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-42] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: named_function.1
  # [discarded value]: $8.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
.LABEL__get_named_function_67__4:
  # return(function.5)
  .loc 3 182 5
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_67__end
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: name.1
  # [discarded value]: function_type.1
  # [discarded value]: function.1
  # [discarded value]: named_functions.1
  # [live values]: 
.LABEL__get_named_function_67__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_67__stack_frame_size: .word 80

  .loc 3 185 1
  .text
accepts_68:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_68__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_68__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $2.1: Boolean = self.1 == other.1
  .loc 3 186 9
  cmp rdi, rsi
  sete al
  # [live values]: self.1:rdi other.1:rsi $2.1:rax 
  # jump($2.1, block.3, block.2)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__accepts_68__2
.LABEL__accepts_68__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 3 186 9
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # jump($2.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__accepts_68__5
.LABEL__accepts_68__4:
  # return(true)
  .loc 3 187 9
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_68__5:
  # IR_Pointer_Type.6: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] IR_Pointer_Type.6:rax 
  # $4.1: Boolean = call(is_293, self.1, IR_Pointer_Type.6)
  .loc 3 189 9
  mov rdi, [rbp-17]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Pointer_Type.6
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, block.7, block.8)
  test al, al
  jz .LABEL__accepts_68__8
.LABEL__accepts_68__7:
  # self.1: @IR_Pointer_Type = self.1
  .loc 3 190 17
  mov rax, [rbp-17]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax 
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 3 191 13
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax $6.1:rbx 
  # IR_Pointer_Type.7: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax $6.1:rbx IR_Pointer_Type.7:r15 
  # $7.1: Boolean = call(is_293, $6.1, IR_Pointer_Type.7)
  .loc 3 191 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-25], rax
  call is_293
  # [discarded value]: $6.1
  # [discarded value]: IR_Pointer_Type.7
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] $7.1:rax 
  # jump($7.1, block.9, block.10)
  test al, al
  jz .LABEL__accepts_68__10
.LABEL__accepts_68__9:
  # stop.1: Boolean = true
  .loc 3 192 13
  mov al, 1
  # [discarded value]: $7.1
  # [discarded value]: stop.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
  # jump(block.10)
.LABEL__accepts_68__10:
  # IR_Pointer_Type.8: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] IR_Pointer_Type.8:rax 
  # $8.1: Boolean = call(is_293, other.1, IR_Pointer_Type.8)
  .loc 3 194 13
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Pointer_Type.8
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] $8.1:rax 
  # jump($8.1, block.11, block.12)
  test al, al
  jz .LABEL__accepts_68__12
.LABEL__accepts_68__11:
  # other.1: @IR_Pointer_Type = other.1
  .loc 3 195 22
  mov rax, [rbp-9]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:rax 
  # $10.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 3 196 17
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rbx:[rbp-25] other.1:rax $10.1:r15 
  # $11.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 3 196 38
  mov r14, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rbx:[rbp-25] other.1:rax $10.1:r15 $11.1:r14 
  # $12.1: Boolean = $10.1 == $11.1
  .loc 3 196 17
  cmp r15, r14
  sete r13b
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rbx:[rbp-25] other.1:rax $12.1:r13 
  # jump($12.1, block.13, block.14)
  test r13b, r13b
  mov [rbp-33], rax
  jz .LABEL__accepts_68__14
.LABEL__accepts_68__13:
  # return(true)
  .loc 3 197 17
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] 
.LABEL__accepts_68__14:
  # $13.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 3 199 17
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:[rbp-33] $13.1:rbx 
  # IR_Any_Type.2: @Object_Type = load_variable(IR_Any_Type)
  lea r15, IR_Any_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:[rbp-33] $13.1:rbx IR_Any_Type.2:r15 
  # $14.1: Boolean = call(is_293, $13.1, IR_Any_Type.2)
  .loc 3 199 17
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $13.1
  # [discarded value]: IR_Any_Type.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $14.1:rax 
  # jump($14.1, block.16, block.17)
  test al, al
  jz .LABEL__accepts_68__17
.LABEL__accepts_68__16:
  # return(true)
  .loc 3 200 17
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] 
.LABEL__accepts_68__17:
  # $15.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 3 202 17
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:[rbp-33] $15.1:rbx 
  # IR_Struct_Type.5: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:[rbp-33] $15.1:rbx IR_Struct_Type.5:r15 
  # $17.1: Boolean = call(is_293, $15.1, IR_Struct_Type.5)
  .loc 3 202 17
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $15.1
  # [discarded value]: IR_Struct_Type.5
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:rax 
  # jump($17.1, block.19, block.20)
  test al, al
  mov [rbp-34], al
  jz .LABEL__accepts_68__20
.LABEL__accepts_68__19:
  # $18.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 3 202 57
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:rax:[rbp-33] $17.1:[rbp-34] $18.1:rbx 
  # IR_Struct_Type.6: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:rax:[rbp-33] $17.1:[rbp-34] $18.1:rbx IR_Struct_Type.6:r15 
  # $17.2: Boolean = call(is_293, $18.1, IR_Struct_Type.6)
  .loc 3 202 57
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $18.1
  # [discarded value]: IR_Struct_Type.6
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:rax:[rbp-34] 
  # jump(block.20)
  mov [rbp-34], al
.LABEL__accepts_68__20:
  # $17.3: Boolean = phi($17.1, $17.2)
  .loc 3 202 17
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $17.3:[rbp-34] 
  # jump($17.3, block.21, block.22)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__accepts_68__22
.LABEL__accepts_68__21:
  # $21.1: @IR_Struct_Type = load_struct_member(self.1, pointed_type)
  .loc 3 203 25
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [discarded value]: $17.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $21.1:rbx 
  # $23.1: @IR_Struct_Type = load_struct_member(other.1, pointed_type)
  .loc 3 203 76
  mov r15, [rbp-33]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:r15:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $21.1:rbx $23.1:r14 
  # $24.1: Boolean = call(is_base_type_148, $21.1, $23.1)
  .loc 3 203 24
  mov rdi, rbx
  mov rsi, r14
  call is_base_type_148
  # [discarded value]: $21.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $24.1:rax 
  # return($24.1)
  .loc 3 203 17
  jmp .LABEL__accepts_68__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] 
.LABEL__accepts_68__22:
  # $25.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 3 205 20
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $25.1:rbx 
  # $26.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 3 205 46
  mov r15, [rbp-33]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:rax:[rbp-25] other.1:r15:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $25.1:rbx $26.1:r14 
  # $27.1: Boolean = call(accepts_68, $25.1, $26.1)
  .loc 3 205 20
  mov rdi, rbx
  mov rsi, r14
  call accepts_68
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] $27.1:rax 
  # return($27.1)
  .loc 3 205 13
  jmp .LABEL__accepts_68__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] $17.2:[rbp-34] 
  # [discarded value]: $17.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] $17.1:[rbp-34] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] other.1:[rbp-33] 
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
.LABEL__accepts_68__12:
  # IR_Null_Type.3: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] IR_Null_Type.3:rax 
  # $28.1: Boolean = call(is_293, other.1, IR_Null_Type.3)
  .loc 3 207 13
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Null_Type.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] $28.1:rax 
  # jump($28.1, block.25, block.26)
  test al, al
  jz .LABEL__accepts_68__26
.LABEL__accepts_68__25:
  # return(true)
  .loc 3 208 13
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
.LABEL__accepts_68__26:
  # return(false)
  .loc 3 210 9
  mov al, 0
  jmp .LABEL__accepts_68__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] self.1:[rbp-25] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_68__8:
  # IR_Function_Type.5: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] IR_Function_Type.5:rax 
  # $29.1: Boolean = call(is_293, self.1, IR_Function_Type.5)
  .loc 3 212 9
  mov rdi, [rbp-17]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Function_Type.5
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $29.1:rax 
  # jump($29.1, block.29, block.30)
  test al, al
  jz .LABEL__accepts_68__30
.LABEL__accepts_68__29:
  # IR_Null_Type.4: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] IR_Null_Type.4:rax 
  # $30.1: Boolean = call(is_293, other.1, IR_Null_Type.4)
  .loc 3 213 13
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Null_Type.4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $30.1:rax 
  # jump($30.1, block.31, block.30)
  test al, al
  jz .LABEL__accepts_68__30
.LABEL__accepts_68__31:
  # return(true)
  .loc 3 214 13
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_68__30:
  # return(false)
  .loc 3 217 5
  mov al, 0
  jmp .LABEL__accepts_68__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_68__2:
  # IR_Undefined_Type.2: @Object_Type = load_variable(IR_Undefined_Type)
  lea rax, IR_Undefined_Type[rip]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] IR_Undefined_Type.2:rax 
  # $2.2: Boolean = call(is_293, other.1, IR_Undefined_Type.2)
  .loc 3 186 26
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Undefined_Type.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(block.3)
  mov [rbp-1], al
  jmp .LABEL__accepts_68__3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__accepts_68__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_68__stack_frame_size: .word 48

  .loc 3 220 1
  .text
create_temp_variable_69:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_variable_69__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_variable_69__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @String = call(clone_295, "$")
  .loc 3 221 35
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_174[rip] # "$"
  mov [rbp-16], rsi
  call clone_295
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # $2.1: @Counter = load_struct_member(self.1, counter)
  .loc 3 221 53
  mov rbx, [rbp-8]
  mov r15, [rbx+48]
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-16] $1.1:rax $2.1:r15 
  # $3.1: Int = call(next_139, $2.1)
  .loc 3 221 53
  mov rdi, r15
  mov [rbp-24], rax
  call next_139
  # [discarded value]: $2.1
  # [live values]: type.1:[rbp-16] $1.1:[rbp-24] $3.1:rax 
  # $4.1: @String = call(append_303, $1.1, $3.1)
  .loc 3 221 35
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_303
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: type.1:[rbp-16] $4.1:rax 
  # $5.1: @List = new(List)
  .loc 5 278 21
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # $6.1: @IR_Variable = new(IR_Variable)
  .loc 3 221 12
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Variable[rip]
  mov [rax], rbx
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, name, $4.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: type.1:[rbp-16] $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, type, type.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: type.1
  # [live values]: $5.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, values, $5.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  # return($6.1)
  .loc 3 221 5
  jmp .LABEL__create_temp_variable_69__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__create_temp_variable_69__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_variable_69__stack_frame_size: .word 32

  .loc 3 224 1
  .text
create_temp_value_70:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_value_70__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_value_70__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @IR_Variable = call(create_temp_variable_69, self.1, type.1)
  .loc 3 225 39
  mov [rbp-8], rdi
  call create_temp_variable_69
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Variable_Value = call(create_variable_value_64, self.1, $1.1)
  .loc 3 225 12
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_variable_value_64
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 3 225 5
  jmp .LABEL__create_temp_value_70__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_temp_value_70__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_value_70__stack_frame_size: .word 16

  .loc 3 228 1
  .text
append_71:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_71__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_71__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi instruction.1:rsi location.1:rdx 
  # store_struct_member(instruction.1, location, location.1)
  .loc 3 229 5
  mov QWORD PTR [rsi+8], rdx
  # [discarded value]: location.1
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 230 5
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: instruction.1:rsi $1.1:rax 
  # $2.1: @IR_Instruction = call(append_153, $1.1, instruction.1)
  .loc 3 230 5
  mov rdi, rax
  mov [rbp-8], rsi
  call append_153
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-8] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 3 231 12
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rbx 
  # return($3.1)
  .loc 3 231 5
  mov rax, rbx
  jmp .LABEL__append_71__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__append_71__end:
  mov rsp, rbp
  pop rbp
  ret

append_71__stack_frame_size: .word 16

  .loc 3 234 1
  .text
build_72:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_72__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_72__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 3 235 14
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @List = load_struct_member($1.1, types)
  .loc 3 235 14
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # types.1: @List_Iterator = call(create_iterator_279, $2.1)
  .loc 3 235 14
  mov [rbp-8], rdi
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__build_72__2:
  # $4.1: Boolean = call(has_next_282, types.1)
  .loc 3 236 12
  mov rdi, [rbp-16]
  call has_next_282
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__build_72__4
.LABEL__build_72__3:
  # statement.1: @AST_Statement = call(next_283, types.1)
  .loc 3 237 22
  mov rdi, [rbp-16]
  call next_283
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] statement.1:rax 
  # $7.1: @IR_Type = call(convert_type_statement_73, self.1, statement.1)
  .loc 3 238 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_type_statement_73
  # [discarded value]: statement.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # jump(block.2)
  jmp .LABEL__build_72__2
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
.LABEL__build_72__4:
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 3 241 25
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $8.1:rbx 
  # $9.1: @List = load_struct_member($8.1, global_variables)
  .loc 3 241 25
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $9.1:r15 
  # global_variables.1: @List_Iterator = call(create_iterator_279, $9.1)
  .loc 3 241 25
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__build_72__5:
  # $11.1: Boolean = call(has_next_282, global_variables.1)
  .loc 3 242 12
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.6, block.7)
  test al, al
  jz .LABEL__build_72__7
.LABEL__build_72__6:
  # variable_statement.1: @AST_Variable_Statement = call(next_283, global_variables.1)
  .loc 3 243 31
  mov rdi, [rbp-24]
  call next_283
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] variable_statement.1:rax 
  # call(create_global_variable_80, self.1, variable_statement.1)
  .loc 3 244 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_global_variable_80
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # jump(block.5)
  jmp .LABEL__build_72__5
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
.LABEL__build_72__7:
  # $14.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 3 247 18
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] $14.1:rbx 
  # $15.1: @List = load_struct_member($14.1, functions)
  .loc 3 247 18
  mov r15, [rbx+24]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] $15.1:r15 
  # functions.1: @List_Iterator = call(create_iterator_279, $15.1)
  .loc 3 247 18
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:rax 
  # jump(block.8)
  mov [rbp-32], rax
.LABEL__build_72__8:
  # $17.1: Boolean = call(has_next_282, functions.1)
  .loc 3 248 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] $17.1:rax 
  # jump($17.1, block.9, block.10)
  test al, al
  jz .LABEL__build_72__10
.LABEL__build_72__9:
  # function_statement.1: @AST_Function_Statement = call(next_283, functions.1)
  .loc 3 249 31
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] function_statement.1:rax 
  # $20.1: @IR_Function = call(create_function_81, self.1, function_statement.1)
  .loc 3 250 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_function_81
  # [discarded value]: function_statement.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # jump(block.8)
  jmp .LABEL__build_72__8
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
.LABEL__build_72__10:
  # $21.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 3 253 18
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] $21.1:rbx 
  # $22.1: @List = load_struct_member($21.1, functions)
  .loc 3 253 18
  mov r15, [rbx+24]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] $22.1:r15 
  # functions.1: @List_Iterator = call(create_iterator_279, $22.1)
  .loc 3 253 18
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:rax 
  # jump(block.11)
  mov [rbp-40], rax
.LABEL__build_72__11:
  # $24.1: Boolean = call(has_next_282, functions.1)
  .loc 3 254 12
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] $24.1:rax 
  # jump($24.1, block.12, block.13)
  test al, al
  jz .LABEL__build_72__13
.LABEL__build_72__12:
  # function_statement.1: @AST_Function_Statement = call(next_283, functions.1)
  .loc 3 255 31
  mov rdi, [rbp-40]
  call next_283
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] function_statement.1:rax 
  # call(build_function_82, self.1, function_statement.1)
  .loc 3 256 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call build_function_82
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # jump(block.11)
  jmp .LABEL__build_72__11
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
.LABEL__build_72__13:
  # return()
  jmp .LABEL__build_72__end
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # [discarded value]: global_variables.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: types.1
  # [live values]: 
.LABEL__build_72__end:
  mov rsp, rbp
  pop rbp
  ret

build_72__stack_frame_size: .word 48

  .loc 3 260 1
  .text
convert_type_statement_73:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_type_statement_73__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_type_statement_73__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # AST_Struct_Statement.2: @Object_Type = load_variable(AST_Struct_Statement)
  lea rax, AST_Struct_Statement[rip]
  # [live values]: self.1:rdi statement.1:rsi AST_Struct_Statement.2:rax 
  # $1.1: Boolean = call(is_293, statement.1, AST_Struct_Statement.2)
  .loc 3 261 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Struct_Statement.2
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_type_statement_73__3
.LABEL__convert_type_statement_73__2:
  # $2.1: @AST_Struct_Statement = statement.1
  .loc 3 262 46
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Type = call(convert_struct_statement_74, self.1, $2.1)
  .loc 3 262 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_struct_statement_74
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 3 262 9
  jmp .LABEL__convert_type_statement_73__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
.LABEL__convert_type_statement_73__3:
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 264 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $4.1:rbx 
  # $5.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 3 264 31
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $4.1:rbx $5.1:r15 
  # call(abort_138, $4.1, $5.1)
  .loc 3 264 5
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_type_statement_73__end:
  mov rsp, rbp
  pop rbp
  ret

convert_type_statement_73__stack_frame_size: .word 16

  .loc 3 267 1
  .text
convert_struct_statement_74:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_statement_74__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_statement_74__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_statement.1: @AST_Struct_Statement = load_variable(struct_statement)
  # [live values]: self.1:rdi struct_statement.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  .loc 3 268 20
  mov rax, [rsi+16]
  # [live values]: self.1:rdi struct_statement.1:rsi $1.1:rax 
  # struct_name.1: @String = load_struct_member($1.1, lexeme)
  .loc 3 268 20
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi struct_statement.1:rsi struct_name.1:rbx 
  # type.1: @IR_Type = call(get_named_type_60, self.1, struct_name.1)
  .loc 3 269 13
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax 
  # $4.1: Boolean = type.1 != null
  .loc 3 270 9
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__convert_struct_statement_74__3
.LABEL__convert_struct_statement_74__2:
  # IR_Struct_Type.7: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] IR_Struct_Type.7:rax 
  # $6.1: Boolean = call(is_293, type.1, IR_Struct_Type.7)
  .loc 3 271 13
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Struct_Type.7
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:rax 
  # jump($6.1, block.4, block.5)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_struct_statement_74__5
.LABEL__convert_struct_statement_74__4:
  # $7.1: @IR_Struct_Type = type.1
  .loc 3 271 41
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $7.1:rax 
  # $8.1: @AST_Struct_Statement = load_struct_member($7.1, statement)
  .loc 3 271 40
  mov rbx, [rax+32]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $8.1:rbx 
  # $6.2: Boolean = $8.1 == struct_statement.1
  .loc 3 271 40
  cmp rbx, QWORD PTR [rbp-8]
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:rax:[rbp-33] 
  # jump(block.5)
  mov [rbp-33], al
.LABEL__convert_struct_statement_74__5:
  # $6.3: Boolean = phi($6.1, $6.2)
  .loc 3 271 13
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $6.3:[rbp-33] 
  # jump($6.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_struct_statement_74__7
.LABEL__convert_struct_statement_74__6:
  # return(type.1)
  .loc 3 272 13
  mov rax, [rbp-32]
  jmp .LABEL__convert_struct_statement_74__end
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
.LABEL__convert_struct_statement_74__7:
  # $10.1: @Source_Location = load_struct_member(struct_statement.1, location)
  .loc 3 274 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $10.1:rbx 
  # $11.1: @String = call(clone_295, "Duplicate type declaration: ")
  .loc 3 274 42
  lea rdi, .LABEL__string_175[rip] # "Duplicate type declaration: "
  mov [rbp-41], rbx
  call clone_295
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $10.1:[rbp-41] $11.1:rax 
  # $12.1: @String = call(append_304, $11.1, struct_name.1)
  .loc 3 274 42
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_304
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $10.1:[rbp-41] $12.1:rax 
  # call(abort_264, $10.1, $12.1)
  .loc 3 274 9
  mov rdi, [rbp-41]
  mov rsi, rax
  call abort_264
  # [discarded value]: $10.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
.LABEL__convert_struct_statement_74__3:
  # type.1: @IR_Struct_Type = call(create_ir_struct_type_145, struct_name.1, struct_statement.1)
  .loc 3 276 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_ir_struct_type_145
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:rax 
  # $14.1: @List = load_struct_member(self.1, named_types)
  .loc 3 277 5
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:rax $14.1:r15 
  # call(append_268, $14.1, type.1)
  .loc 3 277 5
  mov rdi, r15
  mov rsi, rax
  mov [rbp-40], rax
  call append_268
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] 
  # $15.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  .loc 3 278 9
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] $15.1:rbx 
  # $16.1: Boolean = $15.1 != null
  .loc 3 278 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] $16.1:r15 
  # jump($16.1, block.9, block.10)
  test r15b, r15b
  jz .LABEL__convert_struct_statement_74__10
.LABEL__convert_struct_statement_74__9:
  # $17.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  .loc 3 279 46
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] $17.1:rbx 
  # base_type.1: @IR_Type = call(convert_value_type_75, self.1, $17.1)
  .loc 3 279 22
  mov rdi, [rbp-24]
  mov rsi, rbx
  call convert_value_type_75
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:rax 
  # IR_Struct_Type.8: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:rax IR_Struct_Type.8:rbx 
  # $19.1: Boolean = call(is_293, base_type.1, IR_Struct_Type.8)
  .loc 3 280 14
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_293
  # [discarded value]: IR_Struct_Type.8
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $19.1:rax 
  # $20.1: Boolean = $19.1 == false
  .loc 3 280 13
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $20.1:rbx 
  # jump($20.1, block.11, block.12)
  test bl, bl
  jz .LABEL__convert_struct_statement_74__12
.LABEL__convert_struct_statement_74__11:
  # $21.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  .loc 3 281 19
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $21.1:rbx 
  # $22.1: @Source_Location = load_struct_member($21.1, location)
  .loc 3 281 19
  mov r15, [rbx+8]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $22.1:r15 
  # call(abort_264, $22.1, "Not a struct type.")
  .loc 3 281 13
  mov rdi, r15
  lea rsi, .LABEL__string_176[rip] # "Not a struct type."
  call abort_264
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
.LABEL__convert_struct_statement_74__12:
  # $23.1: @IR_Struct_Type = base_type.1
  .loc 3 283 26
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $23.1:rax 
  # store_struct_member(type.1, base_type, $23.1)
  .loc 3 283 9
  mov rbx, [rbp-40]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:rbx:[rbp-40] base_type.1:[rbp-48] 
  # jump(block.10)
.LABEL__convert_struct_statement_74__10:
  # $24.1: @List = load_struct_member(struct_statement.1, members)
  .loc 3 285 9
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $24.1:rbx 
  # $25.1: Boolean = $24.1 != null
  .loc 3 285 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $25.1:r15 
  # jump($25.1, block.13, block.14)
  test r15b, r15b
  jz .LABEL__convert_struct_statement_74__14
.LABEL__convert_struct_statement_74__13:
  # $26.1: @List = load_struct_member(struct_statement.1, members)
  .loc 3 286 27
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $26.1:rbx 
  # struct_members.1: @List_Iterator = call(create_iterator_279, $26.1)
  .loc 3 286 27
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:rax 
  # jump(block.15)
  mov [rbp-56], rax
.LABEL__convert_struct_statement_74__15:
  # $28.1: Boolean = call(has_next_282, struct_members.1)
  .loc 3 287 16
  mov rdi, [rbp-56]
  call has_next_282
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $28.1:rax 
  # jump($28.1, block.16, block.14)
  test al, al
  jz .LABEL__convert_struct_statement_74__14
.LABEL__convert_struct_statement_74__16:
  # struct_member.1: @AST_Struct_Member = call(next_283, struct_members.1)
  .loc 3 288 30
  mov rdi, [rbp-56]
  call next_283
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member.1:rax 
  # $31.1: @Identifier_Token = load_struct_member(struct_member.1, name)
  .loc 3 289 35
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member.1:rax $31.1:rbx 
  # struct_member_name.1: @String = load_struct_member($31.1, lexeme)
  .loc 3 289 35
  mov r15, [rbx+8]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member.1:rax struct_member_name.1:r15 
  # $33.1: @AST_Type = load_struct_member(struct_member.1, type)
  .loc 3 290 59
  mov rbx, [rax+16]
  # [discarded value]: struct_member.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member_name.1:r15 $33.1:rbx 
  # struct_member_type.1: @IR_Type = call(convert_value_type_75, self.1, $33.1)
  .loc 3 290 35
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-64], r15
  call convert_value_type_75
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member_name.1:[rbp-64] struct_member_type.1:rax 
  # $35.1: @IR_Struct_Type_Member = call(add_member_146, type.1, struct_member_name.1, struct_member_type.1)
  .loc 3 291 13
  mov rdi, [rbp-40]
  mov rsi, [rbp-64]
  mov rdx, rax
  call add_member_146
  # [discarded value]: struct_member_name.1
  # [discarded value]: struct_member_type.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # jump(block.15)
  jmp .LABEL__convert_struct_statement_74__15
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
.LABEL__convert_struct_statement_74__14:
  # $36.1: Boolean = call(is_object_type_149, type.1)
  .loc 3 294 9
  mov rdi, [rbp-40]
  call is_object_type_149
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $36.1:rax 
  # jump($36.1, block.18, block.19)
  test al, al
  jz .LABEL__convert_struct_statement_74__19
.LABEL__convert_struct_statement_74__18:
  # $37.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  .loc 3 297 28
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $37.1:rbx 
  # $38.1: @Source_Location = load_struct_member($37.1, location)
  .loc 3 297 28
  mov r15, [rbx+16]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:r15 
  # $39.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  .loc 3 298 24
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:r15 $39.1:rbx 
  # $40.1: @Identifier_Token = new(Identifier_Token)
  .loc 3 301 32
  mov [rbp-64], rbx
  mov [rbp-72], r15
  mov rdi, 32
  call malloc
  lea rbx, Identifier_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $40.1:rax 
  # store_struct_member($40.1, lexeme, "Object_Type")
  lea rbx, .LABEL__string_62[rip] # "Object_Type"
  mov [rax+8], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $40.1:rax 
  # store_struct_member($40.1, location, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $40.1:rax 
  # store_struct_member($40.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $40.1:rax 
  # $41.1: @AST_Named_Type = new(AST_Named_Type)
  .loc 3 300 36
  mov [rbp-80], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Named_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $40.1:[rbp-80] $41.1:rax 
  # store_struct_member($41.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $40.1:[rbp-80] $41.1:rax 
  # store_struct_member($41.1, name, $40.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $41.1:rax 
  # $42.1: @AST_Pointer_Type = new(AST_Pointer_Type)
  .loc 3 299 24
  mov [rbp-80], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $41.1:[rbp-80] $42.1:rax 
  # store_struct_member($42.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $41.1:[rbp-80] $42.1:rax 
  # store_struct_member($42.1, pointed_type, $41.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $42.1:rax 
  # $43.1: @AST_Variable_Statement = new(AST_Variable_Statement)
  .loc 3 296 13
  mov [rbp-80], rax
  mov rdi, 41
  call malloc
  lea rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $38.1:[rbp-72] $39.1:[rbp-64] $42.1:[rbp-80] $43.1:rax 
  # store_struct_member($43.1, location, $38.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $39.1:[rbp-64] $42.1:[rbp-80] $43.1:rax 
  # store_struct_member($43.1, name, $39.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $42.1:[rbp-80] $43.1:rax 
  # store_struct_member($43.1, type, $42.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $43.1:rax 
  # store_struct_member($43.1, value_expression, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $43.1:rax 
  # store_struct_member($43.1, is_external, false)
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $43.1:rax 
  # call(create_global_variable_80, self.1, $43.1)
  .loc 3 295 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_global_variable_80
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # jump(block.19)
.LABEL__convert_struct_statement_74__19:
  # return(type.1)
  .loc 3 307 5
  mov rax, [rbp-40]
  jmp .LABEL__convert_struct_statement_74__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [discarded value]: base_type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: struct_statement.1
  # [discarded value]: struct_name.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_struct_statement_74__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_statement_74__stack_frame_size: .word 80

  .loc 3 310 1
  .text
convert_value_type_75:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_value_type_75__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_value_type_75__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # AST_Array_Type.2: @Object_Type = load_variable(AST_Array_Type)
  lea rax, AST_Array_Type[rip]
  # [live values]: self.1:rdi type.1:rsi AST_Array_Type.2:rax 
  # $1.1: Boolean = call(is_293, type.1, AST_Array_Type.2)
  .loc 3 311 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Array_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_value_type_75__3
.LABEL__convert_value_type_75__2:
  # $2.1: @AST_Array_Type = type.1
  .loc 3 312 40
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Type = call(convert_array_type_76, self.1, $2.1)
  .loc 3 312 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_type_76
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 3 312 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__3:
  # AST_Function_Type.2: @Object_Type = load_variable(AST_Function_Type)
  lea rax, AST_Function_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] AST_Function_Type.2:rax 
  # $4.1: Boolean = call(is_293, type.1, AST_Function_Type.2)
  .loc 3 314 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Function_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_value_type_75__6
.LABEL__convert_value_type_75__5:
  # $5.1: @AST_Function_Type = type.1
  .loc 3 315 43
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Type = call(convert_function_type_77, self.1, $5.1)
  .loc 3 315 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_function_type_77
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 3 315 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__6:
  # AST_Named_Type.2: @Object_Type = load_variable(AST_Named_Type)
  lea rax, AST_Named_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] AST_Named_Type.2:rax 
  # $7.1: Boolean = call(is_293, type.1, AST_Named_Type.2)
  .loc 3 317 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Named_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_value_type_75__9
.LABEL__convert_value_type_75__8:
  # $8.1: @AST_Named_Type = type.1
  .loc 3 318 40
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Type = call(convert_named_type_78, self.1, $8.1)
  .loc 3 318 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_named_type_78
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 3 318 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__9:
  # AST_Pointer_Type.2: @Object_Type = load_variable(AST_Pointer_Type)
  lea rax, AST_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] AST_Pointer_Type.2:rax 
  # $10.1: Boolean = call(is_293, type.1, AST_Pointer_Type.2)
  .loc 3 320 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Pointer_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $10.1:rax 
  # jump($10.1, block.11, block.12)
  test al, al
  jz .LABEL__convert_value_type_75__12
.LABEL__convert_value_type_75__11:
  # $11.1: @AST_Pointer_Type = type.1
  .loc 3 321 42
  mov rax, [rbp-16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $11.1:rax 
  # $12.1: @IR_Type = call(convert_pointer_type_79, self.1, $11.1)
  .loc 3 321 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_pointer_type_79
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 3 321 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__12:
  # $13.1: @Source_Location = load_struct_member(type.1, location)
  .loc 3 323 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $13.1:rbx 
  # $14.1: @Object_Type = load_struct_member(type.1, object_type)
  .loc 3 323 26
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $13.1:rbx $14.1:r15 
  # call(abort_138, $13.1, $14.1)
  .loc 3 323 5
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_value_type_75__end:
  mov rsp, rbp
  pop rbp
  ret

convert_value_type_75__stack_frame_size: .word 16

  .loc 3 326 1
  .text
convert_array_type_76:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_type_76__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_type_76__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Array_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @AST_Type = load_struct_member(type.1, item_type)
  .loc 3 327 57
  mov rax, [rsi+16]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(convert_value_type_75, self.1, $1.1)
  .loc 3 327 33
  mov [rbp-8], rsi
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-8] $2.1:rax 
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 3 327 74
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [discarded value]: type.1
  # [live values]: $2.1:rax $3.1:r15 
  # $4.1: @IR_Type = call(create_ir_array_type_143, $2.1, $3.1)
  .loc 3 327 12
  mov rdi, rax
  mov rsi, r15
  call create_ir_array_type_143
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 3 327 5
  jmp .LABEL__convert_array_type_76__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__convert_array_type_76__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_type_76__stack_frame_size: .word 16

  .loc 3 330 1
  .text
convert_function_type_77:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_function_type_77__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_function_type_77__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Function_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @List = new(List)
  .loc 3 331 19
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # parameters.1: @List = $1.1
  .loc 3 331 5
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:rax 
  # $2.1: @List = load_struct_member(type.1, parameters)
  .loc 3 332 33
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax $2.1:r15 
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  .loc 3 332 33
  mov r14, [r15+0]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax function_parameters_item.1:r14 
  # jump(block.2)
  mov [rbp-24], rax
  mov [rbp-32], r14
.LABEL__convert_function_type_77__2:
  # function_parameters_item.2: @List_Item = phi(function_parameters_item.1, function_parameters_item.4)
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # $4.1: Boolean = function_parameters_item.2 != null
  .loc 3 333 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__convert_function_type_77__4
.LABEL__convert_function_type_77__3:
  # function_parameter.1: @AST_Function_Parameter = load_struct_member(function_parameters_item.2, data)
  .loc 3 334 31
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] function_parameter.1:rbx 
  # $7.1: @Identifier_Token = load_struct_member(function_parameter.1, name)
  .loc 3 335 65
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] function_parameter.1:rbx $7.1:r15 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 3 335 65
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] function_parameter.1:rbx $8.1:r14 
  # $9.1: @AST_Type = load_struct_member(function_parameter.1, type)
  .loc 3 335 128
  mov r15, [rbx+16]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $8.1:r14 $9.1:r15 
  # $10.1: @IR_Type = call(convert_value_type_75, self.1, $9.1)
  .loc 3 335 104
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-40], r14
  call convert_value_type_75
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $8.1:[rbp-40] $10.1:rax 
  # $11.1: @IR_Function_Type_Parameter = new(IR_Function_Type_Parameter)
  .loc 3 335 27
  mov [rbp-48], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $8.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, name, $8.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, type, $10.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $11.1:rax 
  # call(append_268, parameters.1, $11.1)
  .loc 3 335 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_268
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # function_parameters_item.4: @List_Item = load_struct_member(function_parameters_item.2, next_item)
  .loc 3 336 36
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] function_parameters_item.4:rbx:[rbp-32] 
  # jump(block.2)
  mov [rbp-32], rbx
  jmp .LABEL__convert_function_type_77__2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] function_parameters_item.4:[rbp-32] 
  # [discarded value]: function_parameters_item.4
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
.LABEL__convert_function_type_77__4:
  # $13.1: @AST_Type = load_struct_member(type.1, return_type)
  .loc 3 338 72
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] type.1:rax:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $13.1:rbx 
  # $14.1: @IR_Type = call(convert_value_type_75, self.1, $13.1)
  .loc 3 338 48
  mov rdi, [rbp-16]
  mov rsi, rbx
  call convert_value_type_75
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $14.1:rax 
  # $15.1: @IR_Function_Type = call(create_ir_function_type_144, parameters.1, $14.1)
  .loc 3 338 12
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_ir_function_type_144
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $15.1:rax 
  # return($15.1)
  .loc 3 338 5
  jmp .LABEL__convert_function_type_77__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # [discarded value]: function_parameters_item.2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: type.1
  # [discarded value]: parameters.1
  # [discarded value]: function_parameters_item.1
  # [live values]: 
.LABEL__convert_function_type_77__end:
  mov rsp, rbp
  pop rbp
  ret

convert_function_type_77__stack_frame_size: .word 48

  .loc 3 341 1
  .text
convert_named_type_78:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_named_type_78__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_named_type_78__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Named_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # type_name.1: @Identifier_Token = load_struct_member(type.1, name)
  .loc 3 342 18
  mov rax, [rsi+16]
  # [discarded value]: type.1
  # [live values]: self.1:rdi type_name.1:rax 
  # $2.1: @String = load_struct_member(type_name.1, lexeme)
  .loc 3 343 33
  mov rbx, [rax+8]
  # [live values]: self.1:rdi type_name.1:rax $2.1:rbx 
  # type.1: @IR_Type = call(get_named_type_60, self.1, $2.1)
  .loc 3 343 13
  mov rsi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdi
  call get_named_type_60
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax 
  # $4.1: Boolean = type.1 == null
  .loc 3 344 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__convert_named_type_78__3
.LABEL__convert_named_type_78__2:
  # $5.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 3 345 18
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $5.1:rbx 
  # $6.1: @List = load_struct_member($5.1, types)
  .loc 3 345 18
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $6.1:r15 
  # types.1: @List_Iterator = call(create_iterator_279, $6.1)
  .loc 3 345 18
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:rax 
  # jump(block.4)
  mov [rbp-32], rax
.LABEL__convert_named_type_78__4:
  # $8.1: Boolean = call(has_next_282, types.1)
  .loc 3 346 16
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_named_type_78__6
.LABEL__convert_named_type_78__5:
  # statement.1: @AST_Statement = call(next_283, types.1)
  .loc 3 347 26
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:rax 
  # AST_Struct_Statement.3: @Object_Type = load_variable(AST_Struct_Statement)
  lea rbx, AST_Struct_Statement[rip]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:rax AST_Struct_Statement.3:rbx 
  # $11.1: Boolean = call(is_293, statement.1, AST_Struct_Statement.3)
  .loc 3 348 17
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: AST_Struct_Statement.3
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] $11.1:rax 
  # jump($11.1, block.7, block.9)
  test al, al
  jz .LABEL__convert_named_type_78__9
.LABEL__convert_named_type_78__7:
  # statement.1: @AST_Struct_Statement = statement.1
  .loc 3 349 30
  mov rax, [rbp-40]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax 
  # $15.1: @Identifier_Token = load_struct_member(statement.1, name)
  .loc 3 350 21
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax $15.1:rbx 
  # $16.1: @String = load_struct_member($15.1, lexeme)
  .loc 3 350 21
  mov r15, [rbx+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax $16.1:r15 
  # $17.1: @String = load_struct_member(type_name.1, lexeme)
  .loc 3 350 50
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] type_name.1:rbx:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax $16.1:r15 $17.1:r14 
  # $18.1: Boolean = call(equals_296, $16.1, $17.1)
  .loc 3 350 21
  mov rdi, r15
  mov rsi, r14
  mov [rbp-48], rax
  call equals_296
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] $18.1:rax 
  # jump($18.1, block.10, block.4)
  test al, al
  jz .LABEL__convert_named_type_78__4
.LABEL__convert_named_type_78__10:
  # $19.1: @IR_Type = call(convert_struct_statement_74, self.1, statement.1)
  .loc 3 351 28
  mov rdi, [rbp-16]
  mov rsi, [rbp-48]
  call convert_struct_statement_74
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] $19.1:rax 
  # return($19.1)
  .loc 3 351 21
  jmp .LABEL__convert_named_type_78__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] 
.LABEL__convert_named_type_78__9:
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 354 23
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:rax:[rbp-40] $12.1:rbx 
  # $13.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 3 354 43
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:rax:[rbp-40] $12.1:rbx $13.1:r15 
  # call(abort_138, $12.1, $13.1)
  .loc 3 354 17
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
.LABEL__convert_named_type_78__6:
  # $20.1: @Source_Location = load_struct_member(type_name.1, location)
  .loc 3 357 15
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type_name.1:rax:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:rbx 
  # $21.1: @String = call(clone_295, "Unknown type: ")
  .loc 3 357 35
  lea rdi, .LABEL__string_177[rip] # "Unknown type: "
  mov [rbp-40], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:[rbp-40] $21.1:rax 
  # $22.1: @String = load_struct_member(type_name.1, lexeme)
  .loc 3 357 66
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type_name.1:rbx:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:[rbp-40] $21.1:rax $22.1:r15 
  # $23.1: @String = call(append_304, $21.1, $22.1)
  .loc 3 357 35
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:[rbp-40] $23.1:rax 
  # call(abort_264, $20.1, $23.1)
  .loc 3 357 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_264
  # [discarded value]: $20.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
.LABEL__convert_named_type_78__3:
  # return(type.1)
  .loc 3 359 5
  mov rax, [rbp-24]
  jmp .LABEL__convert_named_type_78__end
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: type_name.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_named_type_78__end:
  mov rsp, rbp
  pop rbp
  ret

convert_named_type_78__stack_frame_size: .word 48

  .loc 3 362 1
  .text
convert_pointer_type_79:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_pointer_type_79__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_pointer_type_79__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Pointer_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @AST_Type = load_struct_member(type.1, pointed_type)
  .loc 3 363 59
  mov rax, [rsi+16]
  # [discarded value]: type.1
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @IR_Type = call(convert_value_type_75, self.1, $1.1)
  .loc 3 363 35
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # $3.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, $2.1)
  .loc 3 363 12
  mov rdi, rax
  call create_ir_pointer_type_142
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 3 363 5
  jmp .LABEL__convert_pointer_type_79__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__convert_pointer_type_79__end:
  mov rsp, rbp
  pop rbp
  ret

convert_pointer_type_79__stack_frame_size: .word 0

  .loc 3 366 1
  .text
create_global_variable_80:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_global_variable_80__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_global_variable_80__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  .loc 3 367 22
  mov rax, [rsi+16]
  # [live values]: self.1:rdi variable_statement.1:rsi $1.1:rax 
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  .loc 3 367 22
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx 
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 3 369 9
  mov rax, [rsi+24]
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $3.1:rax 
  # $4.1: Boolean = $3.1 != null
  .loc 3 369 9
  cmp rax, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $4.1:r15 
  # jump($4.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__create_global_variable_80__4
.LABEL__create_global_variable_80__2:
  # $6.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 3 370 49
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $6.1:rbx 
  # variable_type.2: @IR_Type = call(convert_value_type_75, self.1, $6.1)
  .loc 3 370 25
  mov rdi, [rbp-24]
  mov rsi, rbx
  call convert_value_type_75
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:rax 
  # jump(block.3)
  mov [rbp-32], rax
.LABEL__create_global_variable_80__3:
  # $8.1: Boolean = load_struct_member(variable_statement.1, is_external)
  .loc 3 374 73
  mov rax, [rbp-16]
  mov bl, [rax+40]
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] $8.1:rbx 
  # variable.1: @IR_Global_Variable = call(create_ir_global_variable_158, variable_name.1, variable_type.2, $8.1)
  .loc 3 374 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  mov dl, bl
  call create_ir_global_variable_158
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:rax 
  # $10.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 3 375 9
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] variable_statement.1:rbx:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:rax $10.1:r15 
  # $11.1: Boolean = $10.1 != null
  .loc 3 375 9
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] variable_statement.1:rbx:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:rax $11.1:r14 
  # jump($11.1, block.5, block.6)
  test r14b, r14b
  mov [rbp-40], rax
  jz .LABEL__create_global_variable_80__6
.LABEL__create_global_variable_80__5:
  # $12.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 3 376 15
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] $12.1:rbx 
  # $13.1: @Source_Location = load_struct_member($12.1, location)
  .loc 3 376 15
  mov r15, [rbx+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] $13.1:r15 
  # call(abort_264, $13.1, "Initialized global variables are not supported yet.")
  .loc 3 376 9
  mov rdi, r15
  lea rsi, .LABEL__string_178[rip] # "Initialized global variables are not supported yet."
  call abort_264
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
.LABEL__create_global_variable_80__6:
  # $14.1: @IR_Variable = call(add_variable_61, self.1, variable.1)
  .loc 3 378 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  call add_variable_61
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # $15.1: @IR_Variable_Value = call(create_variable_value_64, self.1, variable.1)
  .loc 3 379 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  call create_variable_value_64
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # return()
  jmp .LABEL__create_global_variable_80__end
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
.LABEL__create_global_variable_80__4:
  # $5.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 3 372 15
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] variable_statement.1:rax:[rbp-16] variable_name.1:[rbp-8] $5.1:rbx 
  # call(abort_264, $5.1, "Type inference is not supported yet.")
  .loc 3 372 9
  mov rdi, rbx
  lea rsi, .LABEL__string_179[rip] # "Type inference is not supported yet."
  call abort_264
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: variable_statement.1
  # [discarded value]: variable_name.1
  # [live values]: 
.LABEL__create_global_variable_80__end:
  mov rsp, rbp
  pop rbp
  ret

create_global_variable_80__stack_frame_size: .word 48

  .loc 3 382 1
  .text
create_function_81:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_function_81__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_function_81__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  # $1.1: @List = load_struct_member(self.1, named_functions)
  .loc 3 384 14
  mov rax, [rdi+24]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member($1.1, size)
  .loc 3 384 14
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  # $3.1: Int = $2.1 + 1
  .loc 3 384 14
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax 
  # $4.1: @Source_Location = load_struct_member(function_statement.1, location)
  .loc 3 385 20
  mov rbx, [rsi+8]
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax $4.1:rbx 
  # $5.1: @List = new(List)
  .loc 3 386 18
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # $6.1: @Identifier_Token = load_struct_member(function_statement.1, name)
  .loc 3 387 16
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $6.1:r15 
  # $7.1: @String = load_struct_member($6.1, lexeme)
  .loc 3 387 16
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $7.1:r14 
  # $8.1: @List = new(List)
  .loc 3 388 22
  mov [rbp-40], rax
  mov [rbp-48], r14
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # store_struct_member($8.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  # $9.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  .loc 3 389 47
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $9.1:r15 
  # $10.1: @AST_Type = load_struct_member($9.1, return_type)
  .loc 3 389 47
  mov r14, [r15+24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $10.1:r14 
  # $11.1: @IR_Type = call(convert_value_type_75, self.1, $10.1)
  .loc 3 389 23
  mov rdi, [rbp-32]
  mov rsi, r14
  mov [rbp-56], rax
  call convert_value_type_75
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax 
  # $12.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  .loc 3 390 23
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $12.1:r15 
  # $13.1: Boolean = $12.1 == null
  .loc 3 390 23
  cmp r15, 0
  sete r14b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $13.1:r14 
  # $14.1: @IR_Function = new(IR_Function)
  .loc 3 383 17
  mov [rbp-64], rax
  mov [rbp-65], r14b
  mov rdi, 65
  call malloc
  lea rbx, IR_Function[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, id, $3.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, location, $4.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, name, $7.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $8.1:[rbp-56] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, parameters, $8.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $11.1:[rbp-64] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, return_type, $11.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+40], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $13.1:[rbp-65] $14.1:rax 
  # store_struct_member($14.1, is_external, $13.1)
  mov bl, [rbp-65]
  mov BYTE PTR [rax+56], bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $5.1:[rbp-40] $14.1:rax 
  # store_struct_member($14.1, blocks, $5.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $14.1:rax 
  # function.1: @IR_Function = $14.1
  .loc 3 383 5
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax 
  # $15.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  .loc 3 394 19
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $15.1:r15 
  # $16.1: @List = load_struct_member($15.1, parameters)
  .loc 3 394 19
  mov r14, [r15+16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $16.1:r14 
  # parameters.1: @List_Iterator = call(create_iterator_279, $16.1)
  .loc 3 394 19
  mov rdi, r14
  mov [rbp-40], rax
  call create_iterator_279
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:rax 
  # $18.1: @List = new(List)
  .loc 3 395 33
  mov [rbp-48], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] $18.1:rax 
  # function_type_parameters.1: @List = $18.1
  .loc 3 395 5
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:rax 
  # jump(block.2)
  mov [rbp-56], rax
.LABEL__create_function_81__2:
  # $19.1: Boolean = call(has_next_282, parameters.1)
  .loc 3 396 12
  mov rdi, [rbp-48]
  call has_next_282
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:rax 
  # jump($19.1, block.3, block.4)
  test al, al
  jz .LABEL__create_function_81__4
.LABEL__create_function_81__3:
  # parameter.1: @AST_Function_Parameter = call(next_283, parameters.1)
  .loc 3 397 22
  mov rdi, [rbp-48]
  call next_283
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter.1:rax 
  # $22.1: @AST_Type = load_struct_member(parameter.1, type)
  .loc 3 398 51
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter.1:rax $22.1:rbx 
  # parameter_type.1: @IR_Type = call(convert_value_type_75, self.1, $22.1)
  .loc 3 398 27
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-64], rax
  call convert_value_type_75
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter.1:[rbp-64] parameter_type.1:rax 
  # $24.1: @Identifier_Token = load_struct_member(parameter.1, name)
  .loc 3 399 27
  mov rbx, [rbp-64]
  mov r15, [rbx+8]
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:rax $24.1:r15 
  # parameter_name.1: @String = load_struct_member($24.1, lexeme)
  .loc 3 399 27
  mov rbx, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:rax parameter_name.1:rbx 
  # $26.1: @List = new(List)
  .loc 5 278 21
  mov [rbp-64], rax
  mov [rbp-72], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] $26.1:rax 
  # store_struct_member($26.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] $26.1:rax 
  # store_struct_member($26.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] $26.1:rax 
  # store_struct_member($26.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] $26.1:rax 
  # $27.1: @IR_Function_Parameter = new(IR_Function_Parameter)
  .loc 3 400 31
  mov [rbp-80], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Function_Parameter[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] $26.1:[rbp-80] $27.1:rax 
  # store_struct_member($27.1, name, parameter_name.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:rbx:[rbp-72] $26.1:[rbp-80] $27.1:rax 
  # store_struct_member($27.1, type, parameter_type.1)
  mov r15, [rbp-64]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:r15:[rbp-64] parameter_name.1:rbx:[rbp-72] $26.1:[rbp-80] $27.1:rax 
  # store_struct_member($27.1, values, $26.1)
  mov r14, [rbp-80]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:r15:[rbp-64] parameter_name.1:rbx:[rbp-72] $27.1:rax 
  # function_parameter.1: @IR_Function_Parameter = $27.1
  .loc 3 400 9
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:r15:[rbp-64] parameter_name.1:rbx:[rbp-72] function_parameter.1:rax 
  # $28.1: @List = load_struct_member(function.1, parameters)
  .loc 3 401 9
  mov r14, [rbp-40]
  mov r13, [r14+32]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:r14:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:r15:[rbp-64] parameter_name.1:rbx:[rbp-72] function_parameter.1:rax $28.1:r13 
  # call(append_268, $28.1, function_parameter.1)
  .loc 3 401 9
  mov rdi, r13
  mov rsi, rax
  call append_268
  # [discarded value]: function_parameter.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] 
  # $29.1: @IR_Function_Type_Parameter = new(IR_Function_Type_Parameter)
  .loc 3 402 41
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] parameter_name.1:[rbp-72] $29.1:rax 
  # store_struct_member($29.1, name, parameter_name.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: parameter_name.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] parameter_type.1:[rbp-64] $29.1:rax 
  # store_struct_member($29.1, type, parameter_type.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: parameter_type.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $29.1:rax 
  # call(append_268, function_type_parameters.1, $29.1)
  .loc 3 402 9
  mov rdi, [rbp-56]
  mov rsi, rax
  call append_268
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # jump(block.2)
  jmp .LABEL__create_function_81__2
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
.LABEL__create_function_81__4:
  # store_struct_member(function_statement.1, ir_function, function.1)
  .loc 3 405 5
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # $30.1: @List = load_struct_member(self.1, named_functions)
  .loc 3 406 5
  mov r15, [rbp-32]
  mov r14, [r15+24]
  # [live values]: self.1:r15:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $30.1:r14 
  # call(append_268, $30.1, function.1)
  .loc 3 406 5
  mov rdi, r14
  mov rsi, rbx
  call append_268
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # $31.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 3 408 71
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $31.1:rbx 
  # $32.1: @IR_Function_Type = call(create_ir_function_type_144, function_type_parameters.1, $31.1)
  .loc 3 408 21
  mov rdi, [rbp-56]
  mov rsi, rbx
  call create_ir_function_type_144
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $32.1:rax 
  # store_struct_member(function.1, type, $32.1)
  .loc 3 408 5
  mov rbx, [rbp-40]
  mov QWORD PTR [rbx+48], rax
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # return(function.1)
  .loc 3 410 5
  mov rax, rbx
  jmp .LABEL__create_function_81__end
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [discarded value]: self.1
  # [discarded value]: function_statement.1
  # [discarded value]: function.1
  # [discarded value]: parameters.1
  # [discarded value]: function_type_parameters.1
  # [live values]: 
.LABEL__create_function_81__end:
  mov rsp, rbp
  pop rbp
  ret

create_function_81__stack_frame_size: .word 80

  .loc 3 413 1
  .text
build_function_82:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_function_82__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_function_82__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  # $1.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  .loc 3 414 9
  mov rax, [rsi+32]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 3 414 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__build_function_82__3
.LABEL__build_function_82__2:
  # return()
  .loc 3 415 9
  jmp .LABEL__build_function_82__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] 
.LABEL__build_function_82__3:
  # function.1: @IR_Function = load_struct_member(function_statement.1, ir_function)
  .loc 3 418 17
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] function_statement.1:rax:[rbp-8] function.1:rbx 
  # $4.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 420 52
  mov r15, [rbp-16]
  mov r14, [r15+0]
  # [live values]: self.1:r15:[rbp-16] function_statement.1:rax:[rbp-8] function.1:rbx $4.1:r14 
  # $5.1: @List = new(List)
  .loc 3 31 24
  mov [rbp-24], rbx
  mov [rbp-32], r14
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # $6.1: @List = new(List)
  .loc 3 32 27
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # $7.1: @IR_Builder_Context = new(IR_Builder_Context)
  .loc 3 420 20
  mov [rbp-48], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, parent, $4.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, variables, $5.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, named_values, $6.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $7.1:rax 
  # store_struct_member(self.1, context, $7.1)
  .loc 3 420 5
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+0], rax
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $8.1: @Counter = load_struct_member(self.1, counter)
  .loc 3 421 5
  mov rax, [rbx+48]
  # [live values]: self.1:rbx:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $8.1:rax 
  # $9.1: @Counter = call(reset_140, $8.1)
  .loc 3 421 5
  mov rdi, rax
  call reset_140
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $10.1: @IR_Block = call(create_block_157, function.1)
  .loc 3 423 26
  mov rdi, [rbp-24]
  call create_block_157
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $10.1:rax 
  # store_struct_member(self.1, current_block, $10.1)
  .loc 3 423 5
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $11.1: @List = load_struct_member(function.1, parameters)
  .loc 3 425 28
  mov rax, [rbp-24]
  mov r15, [rax+32]
  # [live values]: self.1:rbx:[rbp-16] function_statement.1:[rbp-8] function.1:rax:[rbp-24] $11.1:r15 
  # function_parameters.1: @List_Iterator = call(create_iterator_279, $11.1)
  .loc 3 425 28
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__build_function_82__5:
  # $13.1: Boolean = call(has_next_282, function_parameters.1)
  .loc 3 426 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $13.1:rax 
  # jump($13.1, block.6, block.7)
  test al, al
  jz .LABEL__build_function_82__7
.LABEL__build_function_82__6:
  # function_parameter.1: @IR_Function_Parameter = call(next_283, function_parameters.1)
  .loc 3 427 31
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] function_parameter.1:rax 
  # $16.1: @IR_Variable = call(add_variable_61, self.1, function_parameter.1)
  .loc 3 428 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-40], rax
  call add_variable_61
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] function_parameter.1:[rbp-40] 
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 429 9
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] function_parameter.1:[rbp-40] $17.1:rbx 
  # $18.1: @IR_Variable_Value = call(create_variable_value_64, self.1, function_parameter.1)
  .loc 3 429 71
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-48], rbx
  call create_variable_value_64
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $17.1:[rbp-48] $18.1:rax 
  # $19.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction_174, $18.1)
  .loc 3 429 35
  mov rdi, rax
  call create_ir_load_variable_instruction_174
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $17.1:[rbp-48] $19.1:rax 
  # $20.1: @IR_Instruction = call(append_153, $17.1, $19.1)
  .loc 3 429 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call append_153
  # [discarded value]: $17.1
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # jump(block.5)
  jmp .LABEL__build_function_82__5
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
.LABEL__build_function_82__7:
  # $21.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  .loc 3 432 34
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] function_statement.1:rax:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $21.1:rbx 
  # call(convert_block_statement_91, self.1, $21.1)
  .loc 3 432 5
  mov rdi, [rbp-16]
  mov rsi, rbx
  call convert_block_statement_91
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # $22.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 433 9
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $22.1:rbx 
  # $23.1: @IR_Instruction = load_struct_member($22.1, last_instruction)
  .loc 3 433 9
  mov r15, [rbx+40]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:r15 
  # $25.1: Boolean = $23.1 == null
  .loc 3 433 9
  cmp r15, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:rbx 
  # jump($25.1, block.9, block.8)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__build_function_82__8
.LABEL__build_function_82__9:
  # $25.3: Boolean = phi($25.1, $25.2)
  .loc 3 433 9
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $25.3:[rbp-33] 
  # jump($25.3, block.10, block.11)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__build_function_82__11
.LABEL__build_function_82__10:
  # $30.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 434 13
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [discarded value]: $25.3
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $30.1:rbx 
  # $31.1: @List = load_struct_member($30.1, predecessors)
  .loc 3 434 13
  mov r15, [rbx+24]
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $31.1:r15 
  # $32.1: Int = load_struct_member($31.1, size)
  .loc 3 434 13
  mov rbx, [r15+16]
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $32.1:rbx 
  # $34.1: Boolean = $32.1 == 0
  .loc 3 434 13
  cmp rbx, 0
  sete r15b
  # [discarded value]: $32.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:r15 
  # jump($34.1, block.12, block.13)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__build_function_82__13
.LABEL__build_function_82__12:
  # $35.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 434 58
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $35.1:rbx 
  # $36.1: Int = load_struct_member($35.1, id)
  .loc 3 434 58
  mov r15, [rbx+8]
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $36.1:r15 
  # $34.2: Boolean = $36.1 != 1
  .loc 3 434 58
  cmp r15, 1
  setne bl
  # [discarded value]: $36.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:rbx:[rbp-34] 
  # jump(block.13)
  mov [rbp-34], bl
.LABEL__build_function_82__13:
  # $34.3: Boolean = phi($34.1, $34.2)
  .loc 3 434 13
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $34.3:[rbp-34] 
  # jump($34.3, block.14, block.16)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__build_function_82__16
.LABEL__build_function_82__14:
  # $43.1: @List = load_struct_member(function.1, blocks)
  .loc 3 436 13
  mov rax, [rbp-24]
  mov rbx, [rax+57]
  # [discarded value]: $34.3
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $43.1:rbx 
  # $44.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 436 36
  mov r15, [rbp-16]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-16] function_statement.1:[rbp-8] function.1:rax:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $43.1:rbx $44.1:r14 
  # $45.1: @List = call(remove_270, $43.1, $44.1)
  .loc 3 436 13
  mov rdi, rbx
  mov rsi, r14
  call remove_270
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $45.1:rax 
  # $46.1: @List = call(prune_272, $45.1)
  .loc 3 436 13
  mov rdi, rax
  call prune_272
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # jump(block.11)
.LABEL__build_function_82__11:
  # store_struct_member(self.1, current_block, null)
  .loc 3 443 5
  mov rax, [rbp-16]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # call(remove_redundant_blocks_83, self.1, function.1)
  .loc 3 445 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call remove_redundant_blocks_83
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # call(populate_phi_instructions_84, self.1, function.1)
  .loc 3 446 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call populate_phi_instructions_84
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # call(remove_trivial_phi_instructions_86, self.1, function.1)
  .loc 3 447 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call remove_trivial_phi_instructions_86
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # call(remove_redundant_set_instructions_87, self.1, function.1)
  .loc 3 448 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call remove_redundant_set_instructions_87
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # $47.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 450 20
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $47.1:rbx $34.2:[rbp-34] 
  # $48.1: @IR_Builder_Context = load_struct_member($47.1, parent)
  .loc 3 450 20
  mov r15, [rbx+0]
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $48.1:r15 $34.2:[rbp-34] 
  # store_struct_member(self.1, context, $48.1)
  .loc 3 450 5
  mov QWORD PTR [rax+0], r15
  # [discarded value]: $48.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # return()
  jmp .LABEL__build_function_82__end
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
.LABEL__build_function_82__16:
  # $38.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 3 437 20
  mov rax, [rbp-24]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $38.1:rbx 
  # IR_Nothing_Type.2: @Object_Type = load_variable(IR_Nothing_Type)
  lea r15, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $38.1:rbx IR_Nothing_Type.2:r15 
  # $39.1: Boolean = call(is_293, $38.1, IR_Nothing_Type.2)
  .loc 3 437 20
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $38.1
  # [discarded value]: IR_Nothing_Type.2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $39.1:rax 
  # jump($39.1, block.17, block.19)
  test al, al
  jz .LABEL__build_function_82__19
.LABEL__build_function_82__17:
  # $41.1: @IR_Return_Instruction = call(create_ir_return_instruction_177, null)
  .loc 3 438 25
  xor rdi, rdi
  call create_ir_return_instruction_177
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $41.1:rax 
  # $42.1: @IR_Variable_Value = call(append_71, self.1, $41.1, null)
  .loc 3 438 13
  mov rdi, [rbp-16]
  mov rsi, rax
  xor rdx, rdx
  call append_71
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # jump(block.11)
  jmp .LABEL__build_function_82__11
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
.LABEL__build_function_82__19:
  # $40.1: @Source_Location = load_struct_member(function_statement.1, location)
  .loc 3 440 19
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] function_statement.1:rax:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] $40.1:rbx 
  # call(abort_264, $40.1, "Missing return statement")
  .loc 3 440 13
  mov rdi, rbx
  lea rsi, .LABEL__string_180[rip] # "Missing return statement"
  call abort_264
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] $34.2:[rbp-34] 
  # [discarded value]: $34.2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $34.1:[rbp-34] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] 
.LABEL__build_function_82__8:
  # $26.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 433 56
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $26.1:rbx 
  # $27.1: @IR_Instruction = load_struct_member($26.1, last_instruction)
  .loc 3 433 56
  mov r15, [rbx+40]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $27.1:r15 
  # $28.1: Boolean = call(is_exit_instruction_159, $27.1)
  .loc 3 433 56
  mov rdi, r15
  call is_exit_instruction_159
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $28.1:rax 
  # $25.2: Boolean = $28.1 == false
  .loc 3 433 56
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $25.2:rbx:[rbp-33] 
  # jump(block.9)
  mov [rbp-33], bl
  jmp .LABEL__build_function_82__9
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] $25.2:[rbp-33] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $25.1:[rbp-33] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # [discarded value]: function.1
  # [discarded value]: function_parameters.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: function_statement.1
  # [live values]: 
.LABEL__build_function_82__end:
  mov rsp, rbp
  pop rbp
  ret

build_function_82__stack_frame_size: .word 48

  .loc 3 453 1
  .text
remove_redundant_blocks_83:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_blocks_83__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_blocks_83__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_blocks_83__2:
  # repeat.1: Boolean = false
  .loc 3 455 9
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 3 457 19
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  # $2.1: @List = call(prune_272, $1.1)
  .loc 3 457 19
  mov rdi, r15
  mov [rbp-9], al
  call prune_272
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator_279, $2.1)
  .loc 3 457 19
  mov rdi, rax
  call create_iterator_279
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(block.4)
  mov [rbp-17], rax
.LABEL__remove_redundant_blocks_83__4:
  # $4.1: Boolean = call(has_next_282, blocks.1)
  .loc 3 459 16
  mov rdi, [rbp-17]
  call has_next_282
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__remove_redundant_blocks_83__6
.LABEL__remove_redundant_blocks_83__5:
  # block.1: @IR_Block = call(next_283, blocks.1)
  .loc 3 460 22
  mov rdi, [rbp-17]
  call next_283
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax 
  # $7.1: Int = load_struct_member(block.1, id)
  .loc 3 461 17
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax $7.1:rbx 
  # $8.1: Boolean = $7.1 != 1
  .loc 3 461 17
  cmp rbx, 1
  setne r15b
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax $8.1:r15 
  # jump($8.1, block.7, block.4)
  test r15b, r15b
  mov [rbp-25], rax
  jz .LABEL__remove_redundant_blocks_83__4
.LABEL__remove_redundant_blocks_83__7:
  # $9.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 462 21
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $9.1:rbx 
  # $10.1: Int = load_struct_member($9.1, size)
  .loc 3 462 21
  mov r15, [rbx+16]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $10.1:r15 
  # $11.1: Boolean = $10.1 == 0
  .loc 3 462 21
  cmp r15, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $11.1:rbx 
  # jump($11.1, block.9, block.10)
  test bl, bl
  jz .LABEL__remove_redundant_blocks_83__10
.LABEL__remove_redundant_blocks_83__9:
  # $12.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 3 464 25
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $12.1:rbx 
  # $13.1: Boolean = $12.1 == null
  .loc 3 464 25
  cmp rbx, 0
  sete r15b
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $13.1:r15 
  # jump($13.1, block.11, block.13)
  test r15b, r15b
  jz .LABEL__remove_redundant_blocks_83__13
.LABEL__remove_redundant_blocks_83__11:
  # call(remove_current_281, blocks.1)
  .loc 3 465 25
  mov rdi, [rbp-17]
  call remove_current_281
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # jump(block.10)
.LABEL__remove_redundant_blocks_83__10:
  # $32.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 477 21
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $32.1:rbx 
  # $33.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 3 477 48
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $32.1:rbx $33.1:r15 
  # $35.1: Boolean = $32.1 == $33.1
  .loc 3 477 21
  cmp rbx, r15
  sete r14b
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $35.1:r14 
  # jump($35.1, block.20, block.21)
  test r14b, r14b
  mov [rbp-26], r14b
  jz .LABEL__remove_redundant_blocks_83__21
.LABEL__remove_redundant_blocks_83__20:
  # $36.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 477 74
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $35.1:[rbp-26] $36.1:rbx 
  # IR_Direct_Jump_Instruction.4: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea r15, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $35.1:[rbp-26] $36.1:rbx IR_Direct_Jump_Instruction.4:r15 
  # $35.2: Boolean = call(is_293, $36.1, IR_Direct_Jump_Instruction.4)
  .loc 3 477 74
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $36.1
  # [discarded value]: IR_Direct_Jump_Instruction.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:rax:[rbp-26] 
  # jump(block.21)
  mov [rbp-26], al
.LABEL__remove_redundant_blocks_83__21:
  # $35.3: Boolean = phi($35.1, $35.2)
  .loc 3 477 21
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] $35.3:[rbp-26] 
  # jump($35.3, block.22, block.4)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_redundant_blocks_83__4
.LABEL__remove_redundant_blocks_83__22:
  # $38.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 479 42
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [discarded value]: $35.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] $38.1:rbx 
  # block_predecessor.1: @IR_Block = call(last_278, $38.1)
  .loc 3 479 42
  mov rdi, rbx
  call last_278
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax 
  # $42.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 480 41
  mov rbx, [rbp-25]
  mov r15, [rbx+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rbx:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax $42.1:r15 
  # block_successor.1: @IR_Block = load_struct_member($42.1, block)
  .loc 3 480 40
  mov r14, [r15+57]
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rbx:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax block_successor.1:r14 
  # $44.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 3 481 25
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rbx:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax block_successor.1:r14 $44.1:r15 
  # IR_Conditional_Jump_Instruction.3: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea r13, IR_Conditional_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rbx:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax block_successor.1:r14 $44.1:r15 IR_Conditional_Jump_Instruction.3:r13 
  # $45.1: Boolean = call(is_293, $44.1, IR_Conditional_Jump_Instruction.3)
  .loc 3 481 25
  mov rdi, r15
  mov rsi, r13
  mov [rbp-34], rax
  mov [rbp-42], r14
  call is_293
  # [discarded value]: $44.1
  # [discarded value]: IR_Conditional_Jump_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $45.1:rax 
  # jump($45.1, block.24, block.25)
  test al, al
  jz .LABEL__remove_redundant_blocks_83__25
.LABEL__remove_redundant_blocks_83__24:
  # $46.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 482 25
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $46.1:rbx 
  # $47.1: @List = call(remove_270, $46.1, block_predecessor.1)
  .loc 3 482 25
  mov rdi, rbx
  mov rsi, [rbp-34]
  call remove_270
  # [discarded value]: $46.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $47.1:rax 
  # $48.1: @List = call(prune_272, $47.1)
  .loc 3 482 25
  mov rdi, rax
  call prune_272
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # block_predecessor_instruction.1: @IR_Conditional_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 3 483 58
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rbx 
  # $51.1: @IR_Block = load_struct_member(block_predecessor_instruction.1, false_block)
  .loc 3 484 29
  mov r15, [rbx+65]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rbx $51.1:r15 
  # $52.1: Boolean = $51.1 == block.1
  .loc 3 484 29
  cmp r15, QWORD PTR [rbp-25]
  sete r14b
  # [discarded value]: $51.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rbx $52.1:r14 
  # jump($52.1, block.26, block.28)
  test r14b, r14b
  mov [rbp-50], rbx
  jz .LABEL__remove_redundant_blocks_83__28
.LABEL__remove_redundant_blocks_83__26:
  # store_struct_member(block_predecessor_instruction.1, false_block, block_successor.1)
  .loc 3 485 29
  mov rax, [rbp-50]
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: $52.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:rbx:[rbp-42] block_predecessor_instruction.1:rax:[rbp-50] 
  # jump(block.27)
.LABEL__remove_redundant_blocks_83__27:
  # $53.1: @List = load_struct_member(block_successor.1, predecessors)
  .loc 3 489 25
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:rax:[rbp-42] block_predecessor_instruction.1:[rbp-50] $53.1:rbx 
  # $54.1: @List = call(remove_270, $53.1, block.1)
  .loc 3 489 25
  mov rdi, rbx
  mov rsi, [rbp-25]
  call remove_270
  # [discarded value]: $53.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] $54.1:rax 
  # $55.1: @List = call(prune_272, $54.1)
  .loc 3 489 25
  mov rdi, rax
  call prune_272
  # [discarded value]: $54.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] $55.1:rax 
  # call(append_268, $55.1, block_predecessor.1)
  .loc 3 489 25
  mov rdi, rax
  mov rsi, [rbp-34]
  call append_268
  # [discarded value]: $55.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # repeat.3: Boolean = true
  .loc 3 490 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:rax:[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
.LABEL__remove_redundant_blocks_83__6:
  # repeat.5: Boolean = phi(repeat.2, repeat.3, repeat.4, repeat.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] repeat.5:[rbp-9] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # $66.1: Boolean = repeat.5 == false
  .loc 3 505 13
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $66.1:rax $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # jump($66.1, block.3, block.2)
  test al, al
  jz .LABEL__remove_redundant_blocks_83__2
.LABEL__remove_redundant_blocks_83__3:
  # return()
  jmp .LABEL__remove_redundant_blocks_83__end
  # [discarded value]: $66.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
.LABEL__remove_redundant_blocks_83__28:
  # store_struct_member(block_predecessor_instruction.1, true_block, block_successor.1)
  .loc 3 487 29
  mov rax, [rbp-50]
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+57], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:rbx:[rbp-42] block_predecessor_instruction.1:rax:[rbp-50] 
  # jump(block.27)
  jmp .LABEL__remove_redundant_blocks_83__27
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
.LABEL__remove_redundant_blocks_83__25:
  # $56.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 3 493 25
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:[rbp-42] $56.1:rbx 
  # IR_Direct_Jump_Instruction.5: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea r15, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:[rbp-42] $56.1:rbx IR_Direct_Jump_Instruction.5:r15 
  # $57.1: Boolean = call(is_293, $56.1, IR_Direct_Jump_Instruction.5)
  .loc 3 493 25
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $56.1
  # [discarded value]: IR_Direct_Jump_Instruction.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $57.1:rax 
  # jump($57.1, block.30, block.4)
  test al, al
  jz .LABEL__remove_redundant_blocks_83__4
.LABEL__remove_redundant_blocks_83__30:
  # $58.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 494 25
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [discarded value]: $57.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $58.1:rbx 
  # $59.1: @List = call(remove_270, $58.1, block_predecessor.1)
  .loc 3 494 25
  mov rdi, rbx
  mov rsi, [rbp-34]
  call remove_270
  # [discarded value]: $58.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $59.1:rax 
  # $60.1: @List = call(prune_272, $59.1)
  .loc 3 494 25
  mov rdi, rax
  call prune_272
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # block_predecessor_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 3 495 58
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rbx 
  # store_struct_member(block_predecessor_instruction.1, block, block_successor.1)
  .loc 3 496 25
  mov r15, [rbp-42]
  mov QWORD PTR [rbx+57], r15
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:r15:[rbp-42] 
  # $63.1: @List = load_struct_member(block_successor.1, predecessors)
  .loc 3 497 25
  mov rbx, [r15+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax:[rbp-34] block_successor.1:r15:[rbp-42] $63.1:rbx 
  # $64.1: @List = call(remove_270, $63.1, block.1)
  .loc 3 497 25
  mov rdi, rbx
  mov rsi, [rbp-25]
  call remove_270
  # [discarded value]: $63.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $64.1:rax 
  # $65.1: @List = call(prune_272, $64.1)
  .loc 3 497 25
  mov rdi, rax
  call prune_272
  # [discarded value]: $64.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $65.1:rax 
  # call(append_268, $65.1, block_predecessor.1)
  .loc 3 497 25
  mov rdi, rax
  mov rsi, [rbp-34]
  call append_268
  # [discarded value]: $65.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # repeat.4: Boolean = true
  .loc 3 498 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] repeat.4:rax:[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_83__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # [discarded value]: block_predecessor.1
  # [discarded value]: block_successor.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] 
  # [discarded value]: $35.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] 
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
.LABEL__remove_redundant_blocks_83__13:
  # $14.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 3 466 32
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $14.1:rbx 
  # $15.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 466 58
  mov r15, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $14.1:rbx $15.1:r15 
  # $17.1: Boolean = $14.1 == $15.1
  .loc 3 466 32
  cmp rbx, r15
  sete r14b
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $17.1:r14 
  # jump($17.1, block.14, block.15)
  test r14b, r14b
  mov [rbp-26], r14b
  jz .LABEL__remove_redundant_blocks_83__15
.LABEL__remove_redundant_blocks_83__14:
  # $18.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 3 466 85
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $17.1:[rbp-26] $18.1:rbx 
  # IR_Direct_Jump_Instruction.3: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea r15, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $17.1:[rbp-26] $18.1:rbx IR_Direct_Jump_Instruction.3:r15 
  # $17.2: Boolean = call(is_293, $18.1, IR_Direct_Jump_Instruction.3)
  .loc 3 466 85
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $18.1
  # [discarded value]: IR_Direct_Jump_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:rax:[rbp-26] 
  # jump(block.15)
  mov [rbp-26], al
.LABEL__remove_redundant_blocks_83__15:
  # $17.3: Boolean = phi($17.1, $17.2)
  .loc 3 466 32
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $17.3:[rbp-26] 
  # jump($17.3, block.16, block.18)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_redundant_blocks_83__18
.LABEL__remove_redundant_blocks_83__16:
  # block_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, last_instruction)
  .loc 3 467 46
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [discarded value]: $17.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:rbx 
  # $26.1: @IR_Block = load_struct_member(block_instruction.1, block)
  .loc 3 468 25
  mov r15, [rbx+57]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:rbx $26.1:r15 
  # $27.1: @List = load_struct_member($26.1, predecessors)
  .loc 3 468 25
  mov r14, [r15+24]
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:rbx $27.1:r14 
  # $28.1: @List = call(remove_270, $27.1, block.1)
  .loc 3 468 25
  mov rdi, r14
  mov rsi, rax
  mov [rbp-34], rbx
  call remove_270
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:[rbp-34] 
  # $29.1: @IR_Block = load_struct_member(block_instruction.1, block)
  .loc 3 469 25
  mov rax, [rbp-34]
  mov rbx, [rax+57]
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $29.1:rbx 
  # $30.1: @List = load_struct_member($29.1, predecessors)
  .loc 3 469 25
  mov rax, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $30.1:rax 
  # $31.1: @List = call(prune_272, $30.1)
  .loc 3 469 25
  mov rdi, rax
  call prune_272
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # call(remove_current_281, blocks.1)
  .loc 3 470 25
  mov rdi, [rbp-17]
  call remove_current_281
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # repeat.2: Boolean = true
  .loc 3 471 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] repeat.2:rax:[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_83__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
.LABEL__remove_redundant_blocks_83__18:
  # $20.1: @Source_Location = load_struct_member(function.1, location)
  .loc 3 474 31
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: function.1:rax:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:rbx 
  # $21.1: @String = call(clone_295, "Found non-empty unreachable block: block.")
  .loc 3 474 50
  lea rdi, .LABEL__string_181[rip] # "Found non-empty unreachable block: block."
  mov [rbp-34], rbx
  call clone_295
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:[rbp-34] $21.1:rax 
  # $22.1: Int = load_struct_member(block.1, id)
  .loc 3 474 108
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rbx:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:[rbp-34] $21.1:rax $22.1:r15 
  # $23.1: @String = call(append_303, $21.1, $22.1)
  .loc 3 474 50
  mov rdi, rax
  mov rsi, r15
  call append_303
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:[rbp-34] $23.1:rax 
  # call(abort_264, $20.1, $23.1)
  .loc 3 474 25
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_264
  # [discarded value]: $20.1
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # [discarded value]: $17.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] 
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: repeat.1
  # [discarded value]: blocks.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_blocks_83__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_blocks_83__stack_frame_size: .word 64

  .loc 3 511 1
  .text
populate_phi_instructions_84:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR populate_phi_instructions_84__stack_frame_size[rip]
  sub rsp, rax
.LABEL__populate_phi_instructions_84__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 3 512 15
  mov rax, [rsi+57]
  # [discarded value]: function.1
  # [live values]: self.1:rdi $1.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator_279, $1.1)
  .loc 3 512 15
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_279
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] blocks.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__populate_phi_instructions_84__2:
  # $3.1: Boolean = call(has_next_282, blocks.1)
  .loc 3 513 12
  mov rdi, [rbp-16]
  call has_next_282
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__populate_phi_instructions_84__4
.LABEL__populate_phi_instructions_84__3:
  # block.1: @IR_Block = call(next_283, blocks.1)
  .loc 3 514 18
  mov rdi, [rbp-16]
  call next_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 515 30
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:rax block_instruction.1:rbx 
  # jump(block.5)
  mov [rbp-24], rax
  mov [rbp-32], rbx
.LABEL__populate_phi_instructions_84__5:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # $8.1: Boolean = block_instruction.2 != null
  .loc 3 516 16
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:rax 
  # jump($8.1, block.8, block.9)
  test al, al
  mov [rbp-33], al
  jz .LABEL__populate_phi_instructions_84__9
.LABEL__populate_phi_instructions_84__8:
  # IR_Phi_Instruction.5: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] IR_Phi_Instruction.5:rax 
  # $8.2: Boolean = call(is_293, block_instruction.2, IR_Phi_Instruction.5)
  .loc 3 516 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Phi_Instruction.5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:rax:[rbp-33] 
  # jump(block.9)
  mov [rbp-33], al
.LABEL__populate_phi_instructions_84__9:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 516 16
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # jump($8.3, block.6, block.2)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__populate_phi_instructions_84__2
.LABEL__populate_phi_instructions_84__6:
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  .loc 3 517 28
  mov rax, [rbp-32]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $8.2:[rbp-33] 
  # $11.1: @List = load_struct_member(instruction.1, values)
  .loc 3 518 17
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $11.1:rbx $8.2:[rbp-33] 
  # $12.1: Int = load_struct_member($11.1, size)
  .loc 3 518 17
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $12.1:r15 $8.2:[rbp-33] 
  # $13.1: Boolean = $12.1 == 0
  .loc 3 518 17
  cmp r15, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $13.1:rbx $8.2:[rbp-33] 
  # jump($13.1, block.10, block.11)
  test bl, bl
  mov [rbp-41], rax
  jz .LABEL__populate_phi_instructions_84__11
.LABEL__populate_phi_instructions_84__10:
  # $14.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 519 39
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:rax:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] $14.1:rbx 
  # block_predecessors.1: @List_Iterator = call(create_iterator_279, $14.1)
  .loc 3 519 39
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:rax 
  # jump(block.12)
  mov [rbp-49], rax
.LABEL__populate_phi_instructions_84__12:
  # $16.1: Boolean = call(has_next_282, block_predecessors.1)
  .loc 3 520 24
  mov rdi, [rbp-49]
  call has_next_282
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] $16.1:rax 
  # jump($16.1, block.13, block.11)
  test al, al
  jz .LABEL__populate_phi_instructions_84__11
.LABEL__populate_phi_instructions_84__13:
  # block_predecessor.1: @IR_Block = call(next_283, block_predecessors.1)
  .loc 3 521 42
  mov rdi, [rbp-49]
  call next_283
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_predecessor.1:rax 
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 3 522 89
  mov rbx, [rbp-41]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rbx:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_predecessor.1:rax $19.1:r15 
  # $20.1: @IR_Variable = load_struct_member($19.1, variable)
  .loc 3 522 89
  mov r14, [r15+24]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rbx:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_predecessor.1:rax $20.1:r14 
  # $21.1: @IR_Value = call(get_block_variable_value_85, self.1, block_predecessor.1, $20.1)
  .loc 3 522 40
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r14
  call get_block_variable_value_85
  # [discarded value]: block_predecessor.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] $21.1:rax 
  # call(append_192, instruction.1, $21.1)
  .loc 3 522 21
  mov rdi, [rbp-41]
  mov rsi, rax
  call append_192
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # jump(block.12)
  jmp .LABEL__populate_phi_instructions_84__12
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
.LABEL__populate_phi_instructions_84__11:
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 3 525 33
  mov rax, [rbp-32]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_instruction.6:rbx:[rbp-32] 
  # jump(block.5)
  mov [rbp-32], rbx
  jmp .LABEL__populate_phi_instructions_84__5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_instruction.6:[rbp-32] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] 
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: block_instruction.2
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
.LABEL__populate_phi_instructions_84__4:
  # return()
  jmp .LABEL__populate_phi_instructions_84__end
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: blocks.1
  # [live values]: 
.LABEL__populate_phi_instructions_84__end:
  mov rsp, rbp
  pop rbp
  ret

populate_phi_instructions_84__stack_frame_size: .word 64

  .loc 3 530 1
  .text
get_block_variable_value_85:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_block_variable_value_85__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_block_variable_value_85__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 3 531 26
  mov rax, [rsi+40]
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx block_instruction.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__get_block_variable_value_85__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.7)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # $2.1: Boolean = block_instruction.2 != null
  .loc 3 532 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__get_block_variable_value_85__4
.LABEL__get_block_variable_value_85__3:
  # $3.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 3 533 13
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $3.1:rbx 
  # $5.1: Boolean = $3.1 != null
  .loc 3 533 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $5.1:r15 
  # jump($5.1, block.5, block.6)
  test r15b, r15b
  mov [rbp-33], r15b
  jz .LABEL__get_block_variable_value_85__6
.LABEL__get_block_variable_value_85__5:
  # $6.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 3 533 55
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $5.1:[rbp-33] $6.1:rbx 
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  .loc 3 533 55
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $5.1:[rbp-33] $7.1:r15 
  # $5.2: Boolean = $7.1 == variable.1
  .loc 3 533 55
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $5.1:[rbp-33] $5.2:rbx:[rbp-33] 
  # jump(block.6)
  mov [rbp-33], bl
.LABEL__get_block_variable_value_85__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 3 533 13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] $5.3:[rbp-33] 
  # jump($5.3, block.7, block.8)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__get_block_variable_value_85__8
.LABEL__get_block_variable_value_85__7:
  # $9.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 3 534 20
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] $9.1:rbx 
  # return($9.1)
  .loc 3 534 13
  mov rax, rbx
  jmp .LABEL__get_block_variable_value_85__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
.LABEL__get_block_variable_value_85__8:
  # block_instruction.7: @IR_Instruction = load_struct_member(block_instruction.2, prev_instruction)
  .loc 3 536 29
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] block_instruction.7:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__get_block_variable_value_85__2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] block_instruction.7:[rbp-8] 
  # [discarded value]: block_instruction.7
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
.LABEL__get_block_variable_value_85__4:
  # $11.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 538 9
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $11.1:rbx 
  # $12.1: Int = load_struct_member($11.1, size)
  .loc 3 538 9
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $12.1:r15 
  # $13.1: Boolean = $12.1 == 1
  .loc 3 538 9
  cmp r15, 1
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $13.1:rbx 
  # jump($13.1, block.10, block.11)
  test bl, bl
  jz .LABEL__get_block_variable_value_85__11
.LABEL__get_block_variable_value_85__10:
  # $14.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 539 46
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $14.1:rbx 
  # $16.1: @IR_Block = call(last_278, $14.1)
  .loc 3 539 46
  mov rdi, rbx
  call last_278
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $16.1:rax 
  # $17.1: @IR_Value = call(get_block_variable_value_85, self.1, $16.1, variable.1)
  .loc 3 539 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_85
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $17.1:rax 
  # return($17.1)
  .loc 3 539 9
  jmp .LABEL__get_block_variable_value_85__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
.LABEL__get_block_variable_value_85__11:
  # $18.1: @IR_Variable_Value = call(create_variable_value_64, self.1, variable.1)
  .loc 3 541 46
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  call create_variable_value_64
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $18.1:rax 
  # instruction.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_191, $18.1)
  .loc 3 541 20
  mov rdi, rax
  call create_ir_phi_instruction_191
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:rax 
  # $20.1: @IR_Instruction = call(prepend_152, block.1, instruction.1)
  .loc 3 542 5
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-40], rax
  call prepend_152
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] 
  # $21.1: @List = load_struct_member(block.1, predecessors)
  .loc 3 543 27
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] $21.1:rbx 
  # block_predecessors.1: @List_Iterator = call(create_iterator_279, $21.1)
  .loc 3 543 27
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:rax 
  # jump(block.13)
  mov [rbp-48], rax
.LABEL__get_block_variable_value_85__13:
  # $23.1: Boolean = call(has_next_282, block_predecessors.1)
  .loc 3 544 12
  mov rdi, [rbp-48]
  call has_next_282
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] $23.1:rax 
  # jump($23.1, block.14, block.15)
  test al, al
  jz .LABEL__get_block_variable_value_85__15
.LABEL__get_block_variable_value_85__14:
  # block_predecessor.1: @IR_Block = call(next_283, block_predecessors.1)
  .loc 3 545 30
  mov rdi, [rbp-48]
  call next_283
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] block_predecessor.1:rax 
  # $26.1: @IR_Value = call(get_block_variable_value_85, self.1, block_predecessor.1, variable.1)
  .loc 3 546 28
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_85
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] $26.1:rax 
  # call(append_192, instruction.1, $26.1)
  .loc 3 546 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call append_192
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # jump(block.13)
  jmp .LABEL__get_block_variable_value_85__13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
.LABEL__get_block_variable_value_85__15:
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 3 548 12
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:rax:[rbp-40] block_predecessors.1:[rbp-48] $27.1:rbx 
  # return($27.1)
  .loc 3 548 5
  mov rax, rbx
  jmp .LABEL__get_block_variable_value_85__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # [discarded value]: instruction.1
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: block.1
  # [discarded value]: variable.1
  # [discarded value]: block_instruction.1
  # [live values]: 
.LABEL__get_block_variable_value_85__end:
  mov rsp, rbp
  pop rbp
  ret

get_block_variable_value_85__stack_frame_size: .word 48

  .loc 3 551 1
  .text
remove_trivial_phi_instructions_86:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_trivial_phi_instructions_86__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_trivial_phi_instructions_86__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
.LABEL__remove_trivial_phi_instructions_86__2:
  # repeat.1: Boolean = false
  .loc 3 553 9
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 3 555 19
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  # $2.1: @List = call(prune_272, $1.1)
  .loc 3 555 19
  mov rdi, r15
  mov [rbp-9], al
  call prune_272
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator_279, $2.1)
  .loc 3 555 19
  mov rdi, rax
  call create_iterator_279
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # $4.1: @Any = call(next_283, blocks.1)
  .loc 3 558 9
  mov rdi, rax
  mov [rbp-17], rax
  call next_283
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # jump(block.4)
.LABEL__remove_trivial_phi_instructions_86__4:
  # repeat.4: Boolean = phi(repeat.1, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # $5.1: Boolean = call(has_next_282, blocks.1)
  .loc 3 560 16
  mov rdi, [rbp-17]
  call has_next_282
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_86__6
.LABEL__remove_trivial_phi_instructions_86__5:
  # block.1: @IR_Block = call(next_283, blocks.1)
  .loc 3 561 22
  mov rdi, [rbp-17]
  call next_283
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 562 34
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:rax block_instruction.1:rbx 
  # jump(block.7)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__remove_trivial_phi_instructions_86__7:
  # repeat.6: Boolean = phi(repeat.4, repeat.7)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] 
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] 
  # $10.1: Boolean = block_instruction.2 != null
  .loc 3 563 20
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:rax 
  # jump($10.1, block.10, block.11)
  test al, al
  mov [rbp-34], al
  jz .LABEL__remove_trivial_phi_instructions_86__11
.LABEL__remove_trivial_phi_instructions_86__10:
  # IR_Phi_Instruction.6: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] IR_Phi_Instruction.6:rax 
  # $10.2: Boolean = call(is_293, block_instruction.2, IR_Phi_Instruction.6)
  .loc 3 563 49
  mov rdi, [rbp-33]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Phi_Instruction.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:rax:[rbp-34] 
  # jump(block.11)
  mov [rbp-34], al
.LABEL__remove_trivial_phi_instructions_86__11:
  # $10.3: Boolean = phi($10.1, $10.2)
  .loc 3 563 20
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, block.8, block.4)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_86__4
.LABEL__remove_trivial_phi_instructions_86__8:
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  .loc 3 564 32
  mov rax, [rbp-33]
  # [discarded value]: $10.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:rax $10.2:[rbp-34] 
  # $13.1: Boolean = call(is_trivial_194, instruction.1)
  .loc 3 565 21
  mov rdi, rax
  mov [rbp-42], rax
  call is_trivial_194
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $13.1:rax $10.2:[rbp-34] 
  # jump($13.1, block.12, block.13)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_86__13
.LABEL__remove_trivial_phi_instructions_86__12:
  # $14.1: @List = load_struct_member(instruction.1, values)
  .loc 3 567 21
  mov rax, [rbp-42]
  mov rbx, [rax+57]
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:rax:[rbp-42] $10.2:[rbp-34] $14.1:rbx 
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 3 567 51
  mov r15, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:rax:[rbp-42] $10.2:[rbp-34] $14.1:rbx $15.1:r15 
  # $16.1: @List = call(remove_all_271, $14.1, $15.1)
  .loc 3 567 21
  mov rdi, rbx
  mov rsi, r15
  call remove_all_271
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] $16.1:rax 
  # $17.1: @List = call(prune_272, $16.1)
  .loc 3 567 21
  mov rdi, rax
  call prune_272
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # jump(block.13)
.LABEL__remove_trivial_phi_instructions_86__13:
  # $18.1: Boolean = call(is_redundant_193, instruction.1)
  .loc 3 569 21
  mov rdi, [rbp-42]
  call is_redundant_193
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] $18.1:rax 
  # jump($18.1, block.14, block.15)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_86__15
.LABEL__remove_trivial_phi_instructions_86__14:
  # old_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 3 571 34
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:rax:[rbp-42] $10.2:[rbp-34] old_value.1:rbx 
  # $20.1: @List = load_struct_member(instruction.1, values)
  .loc 3 572 34
  mov r15, [rax+57]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:rax:[rbp-42] $10.2:[rbp-34] old_value.1:rbx $20.1:r15 
  # new_value.1: @IR_Value = call(first_277, $20.1)
  .loc 3 572 34
  mov rdi, r15
  mov [rbp-50], rbx
  call first_277
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:rax 
  # $23.1: @List = load_struct_member(old_value.1, user_instructions)
  .loc 3 573 42
  mov rbx, [rbp-50]
  mov r15, [rbx+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:rbx:[rbp-50] new_value.1:rax $23.1:r15 
  # user_instructions.1: @List_Iterator = call(create_iterator_279, $23.1)
  .loc 3 573 42
  mov rdi, r15
  mov [rbp-58], rax
  call create_iterator_279
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:rax 
  # jump(block.16)
  mov [rbp-66], rax
.LABEL__remove_trivial_phi_instructions_86__16:
  # $25.1: Boolean = call(has_next_282, user_instructions.1)
  .loc 3 574 28
  mov rdi, [rbp-66]
  call has_next_282
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] $25.1:rax 
  # jump($25.1, block.17, block.18)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_86__18
.LABEL__remove_trivial_phi_instructions_86__17:
  # user_instruction.1: @IR_Instruction = call(next_283, user_instructions.1)
  .loc 3 575 45
  mov rdi, [rbp-66]
  call next_283
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] user_instruction.1:rax 
  # call(replace_value_88, user_instruction.1, old_value.1, new_value.1)
  .loc 3 576 25
  mov rdi, rax
  mov rsi, [rbp-50]
  mov rdx, [rbp-58]
  call replace_value_88
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # jump(block.16)
  jmp .LABEL__remove_trivial_phi_instructions_86__16
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
.LABEL__remove_trivial_phi_instructions_86__18:
  # $28.1: @List = load_struct_member(new_value.1, user_instructions)
  .loc 3 578 21
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:rax:[rbp-58] user_instructions.1:[rbp-66] $28.1:rbx 
  # $29.1: @List = call(remove_all_271, $28.1, instruction.1)
  .loc 3 578 21
  mov rdi, rbx
  mov rsi, [rbp-42]
  call remove_all_271
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] $29.1:rax 
  # $30.1: @List = call(prune_272, $29.1)
  .loc 3 578 21
  mov rdi, rax
  call prune_272
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # call(remove_156, block.1, instruction.1)
  .loc 3 579 21
  mov rdi, [rbp-25]
  mov rsi, [rbp-42]
  call remove_156
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # repeat.2: Boolean = true
  .loc 3 580 21
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.2:rax:[rbp-9] 
  # jump(block.15)
  mov [rbp-9], al
.LABEL__remove_trivial_phi_instructions_86__15:
  # repeat.7: Boolean = phi(repeat.2, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.7:[rbp-9] repeat.2:[rbp-9] 
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 3 582 37
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.7:[rbp-9] block_instruction.6:rbx:[rbp-33] repeat.2:[rbp-9] 
  # jump(block.7)
  mov [rbp-33], rbx
  jmp .LABEL__remove_trivial_phi_instructions_86__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.7:[rbp-9] block_instruction.6:[rbp-33] repeat.2:[rbp-9] 
  # [discarded value]: repeat.7
  # [discarded value]: block_instruction.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.2:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # [discarded value]: old_value.1
  # [discarded value]: new_value.1
  # [discarded value]: user_instructions.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [discarded value]: instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] 
  # [discarded value]: repeat.6
  # [discarded value]: block_instruction.2
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
.LABEL__remove_trivial_phi_instructions_86__6:
  # $32.1: Boolean = repeat.4 == false
  .loc 3 586 13
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $32.1:rax 
  # jump($32.1, block.3, block.2)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_86__2
.LABEL__remove_trivial_phi_instructions_86__3:
  # return()
  jmp .LABEL__remove_trivial_phi_instructions_86__end
  # [discarded value]: $32.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: repeat.1
  # [discarded value]: blocks.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_trivial_phi_instructions_86__end:
  mov rsp, rbp
  pop rbp
  ret

remove_trivial_phi_instructions_86__stack_frame_size: .word 80

  .loc 3 592 1
  .text
remove_redundant_set_instructions_87:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_set_instructions_87__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_set_instructions_87__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_set_instructions_87__2:
  # repeat.1: Boolean = false
  .loc 3 594 9
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 3 596 19
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  # $2.1: @List = call(prune_272, $1.1)
  .loc 3 596 19
  mov rdi, r15
  mov [rbp-9], al
  call prune_272
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator_279, $2.1)
  .loc 3 596 19
  mov rdi, rax
  call create_iterator_279
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(block.4)
  mov [rbp-17], rax
.LABEL__remove_redundant_set_instructions_87__4:
  # repeat.5: Boolean = phi(repeat.1, repeat.3, repeat.2, repeat.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # $4.1: Boolean = call(has_next_282, blocks.1)
  .loc 3 597 16
  mov rdi, [rbp-17]
  call has_next_282
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__6
.LABEL__remove_redundant_set_instructions_87__5:
  # block.1: @IR_Block = call(next_283, blocks.1)
  .loc 3 598 22
  mov rdi, [rbp-17]
  call next_283
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 3 600 34
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:rax block_instruction.1:rbx 
  # jump(block.7)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__remove_redundant_set_instructions_87__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.10)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # $8.1: Boolean = block_instruction.2 != null
  .loc 3 601 20
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:rax 
  # jump($8.1, block.8, block.4)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__4
.LABEL__remove_redundant_set_instructions_87__8:
  # IR_Set_Instruction.3: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] IR_Set_Instruction.3:rax 
  # $9.1: Boolean = call(is_293, block_instruction.2, IR_Set_Instruction.3)
  .loc 3 602 21
  mov rdi, [rbp-33]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Set_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $9.1:rax 
  # jump($9.1, block.10, block.11)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__11
.LABEL__remove_redundant_set_instructions_87__10:
  # block_instruction.1: @IR_Set_Instruction = block_instruction.2
  .loc 3 603 42
  mov rax, [rbp-33]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:rax 
  # $11.1: @IR_Value = call(get_value_180, block_instruction.1)
  .loc 3 604 25
  mov rdi, rax
  mov [rbp-41], rax
  call get_value_180
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $11.1:rax 
  # IR_Undefined_Value.3: @Object_Type = load_variable(IR_Undefined_Value)
  lea rbx, IR_Undefined_Value[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $11.1:rax IR_Undefined_Value.3:rbx 
  # $13.1: Boolean = call(is_293, $11.1, IR_Undefined_Value.3)
  .loc 3 604 25
  mov rdi, rax
  mov rsi, rbx
  call is_293
  # [discarded value]: $11.1
  # [discarded value]: IR_Undefined_Value.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:rax 
  # jump($13.1, block.12, block.13)
  test al, al
  mov [rbp-42], al
  jz .LABEL__remove_redundant_set_instructions_87__13
.LABEL__remove_redundant_set_instructions_87__12:
  # $14.1: @IR_Variable_Value = load_struct_member(block_instruction.1, result_value)
  .loc 3 604 81
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:rax:[rbp-41] $13.1:[rbp-42] $14.1:rbx 
  # $15.1: @List = load_struct_member($14.1, user_instructions)
  .loc 3 604 81
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:rax:[rbp-41] $13.1:[rbp-42] $15.1:r15 
  # $16.1: Int = load_struct_member($15.1, size)
  .loc 3 604 81
  mov rbx, [r15+16]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:rax:[rbp-41] $13.1:[rbp-42] $16.1:rbx 
  # $13.2: Boolean = $16.1 == 0
  .loc 3 604 81
  cmp rbx, 0
  sete r15b
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:rax:[rbp-41] $13.1:[rbp-42] $13.2:r15:[rbp-42] 
  # jump(block.13)
  mov [rbp-42], r15b
.LABEL__remove_redundant_set_instructions_87__13:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 3 604 25
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] $13.3:[rbp-42] 
  # jump($13.3, block.14, block.11)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__11
.LABEL__remove_redundant_set_instructions_87__14:
  # call(remove_156, block.1, block_instruction.1)
  .loc 3 605 25
  mov rdi, [rbp-25]
  mov rsi, [rbp-41]
  call remove_156
  # [discarded value]: $13.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # repeat.2: Boolean = true
  .loc 3 606 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] repeat.2:rax:[rbp-9] 
  # jump(block.4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_87__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
.LABEL__remove_redundant_set_instructions_87__11:
  # $18.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 3 610 21
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $18.1:rbx $13.2:[rbp-42] 
  # $20.1: Boolean = $18.1 != null
  .loc 3 610 21
  cmp rbx, 0
  setne r15b
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:r15 $13.2:[rbp-42] 
  # jump($20.1, block.17, block.18)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__remove_redundant_set_instructions_87__18
.LABEL__remove_redundant_set_instructions_87__17:
  # $21.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 3 610 63
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $21.1:rbx 
  # $22.1: @List = load_struct_member($21.1, user_instructions)
  .loc 3 610 63
  mov r15, [rbx+16]
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $22.1:r15 
  # $23.1: Int = load_struct_member($22.1, size)
  .loc 3 610 63
  mov rbx, [r15+16]
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $23.1:rbx 
  # $20.2: Boolean = $23.1 == 1
  .loc 3 610 63
  cmp rbx, 1
  sete r15b
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:r15:[rbp-43] 
  # jump(block.18)
  mov [rbp-43], r15b
.LABEL__remove_redundant_set_instructions_87__18:
  # $20.3: Boolean = phi($20.1, $20.2)
  .loc 3 610 21
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] $20.3:[rbp-43] 
  # jump($20.3, block.19, block.20)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__20
.LABEL__remove_redundant_set_instructions_87__19:
  # $25.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 3 611 41
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [discarded value]: $20.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] $25.1:rbx 
  # $26.1: @List = load_struct_member($25.1, user_instructions)
  .loc 3 611 41
  mov r15, [rbx+16]
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:rax:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] $26.1:r15 
  # user_instruction.1: @IR_Instruction = call(first_277, $26.1)
  .loc 3 611 41
  mov rdi, r15
  call first_277
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax 
  # IR_Set_Instruction.4: @Object_Type = load_variable(IR_Set_Instruction)
  lea rbx, IR_Set_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax IR_Set_Instruction.4:rbx 
  # $30.1: Boolean = call(is_293, user_instruction.1, IR_Set_Instruction.4)
  .loc 3 612 25
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-51], rax
  call is_293
  # [discarded value]: IR_Set_Instruction.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:rax 
  # jump($30.1, block.21, block.22)
  test al, al
  mov [rbp-52], al
  jz .LABEL__remove_redundant_set_instructions_87__22
.LABEL__remove_redundant_set_instructions_87__21:
  # $31.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  .loc 3 612 68
  mov rax, [rbp-51]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax:[rbp-51] $30.1:[rbp-52] $31.1:rbx 
  # $30.2: Boolean = $31.1 == block.1
  .loc 3 612 68
  cmp rbx, QWORD PTR [rbp-25]
  sete r15b
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax:[rbp-51] $30.1:[rbp-52] $30.2:r15:[rbp-52] 
  # jump(block.22)
  mov [rbp-52], r15b
.LABEL__remove_redundant_set_instructions_87__22:
  # $30.3: Boolean = phi($30.1, $30.2)
  .loc 3 612 25
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] $30.3:[rbp-52] 
  # jump($30.3, block.23, block.20)
  mov al, [rbp-52]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__20
.LABEL__remove_redundant_set_instructions_87__23:
  # call(remove_156, block.1, user_instruction.1)
  .loc 3 613 25
  mov rdi, [rbp-25]
  mov rsi, [rbp-51]
  call remove_156
  # [discarded value]: $30.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # $33.1: @IR_Variable_Value = load_struct_member(user_instruction.1, result_value)
  .loc 3 614 58
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] $33.1:rbx 
  # store_struct_member(block_instruction.2, result_value, $33.1)
  .loc 3 614 25
  mov r15, [rbp-33]
  mov QWORD PTR [r15+16], rbx
  # [discarded value]: $33.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:r15:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # repeat.3: Boolean = true
  .loc 3 615 25
  mov bl, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:r15:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] repeat.3:rbx:[rbp-9] 
  # jump(block.4)
  mov [rbp-9], bl
  jmp .LABEL__remove_redundant_set_instructions_87__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
.LABEL__remove_redundant_set_instructions_87__20:
  # block_instruction.10: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 3 619 37
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] block_instruction.10:rbx:[rbp-33] $30.2:[rbp-52] 
  # jump(block.7)
  mov [rbp-33], rbx
  jmp .LABEL__remove_redundant_set_instructions_87__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] block_instruction.10:[rbp-33] $30.2:[rbp-52] 
  # [discarded value]: block_instruction.10
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # [discarded value]: $30.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] 
  # [discarded value]: user_instruction.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] 
  # [discarded value]: $20.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] 
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [discarded value]: $13.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [discarded value]: block_instruction.1
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # [discarded value]: block_instruction.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
.LABEL__remove_redundant_set_instructions_87__6:
  # $35.1: Boolean = repeat.5 == false
  .loc 3 623 13
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $35.1:rax 
  # jump($35.1, block.3, block.2)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_87__2
.LABEL__remove_redundant_set_instructions_87__3:
  # return()
  jmp .LABEL__remove_redundant_set_instructions_87__end
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: repeat.1
  # [discarded value]: blocks.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_set_instructions_87__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_set_instructions_87__stack_frame_size: .word 64

  .loc 3 629 1
  .text
replace_value_88:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_value_88__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_value_88__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: instruction.1:rdi value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: instruction.1:rdi value.1:rsi new_value.1:rdx 
  # $1.1: @List = load_struct_member(value.1, user_instructions)
  .loc 3 630 5
  mov rax, [rsi+16]
  # [live values]: instruction.1:rdi value.1:rsi new_value.1:rdx $1.1:rax 
  # $2.1: @List = call(remove_270, $1.1, instruction.1)
  .loc 3 630 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov [rbp-24], rdx
  call remove_270
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $2.1:rax 
  # $3.1: @List = call(prune_272, $2.1)
  .loc 3 630 5
  mov rdi, rax
  call prune_272
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # $4.1: @List = load_struct_member(new_value.1, user_instructions)
  .loc 3 631 5
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:rax:[rbp-24] $4.1:rbx 
  # call(append_268, $4.1, instruction.1)
  .loc 3 631 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # IR_Phi_Instruction.7: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] IR_Phi_Instruction.7:rax 
  # $5.1: Boolean = call(is_293, instruction.1, IR_Phi_Instruction.7)
  .loc 3 632 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Phi_Instruction.7
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.2, block.3)
  test al, al
  jz .LABEL__replace_value_88__3
.LABEL__replace_value_88__2:
  # instruction.1: @IR_Phi_Instruction = instruction.1
  .loc 3 633 24
  mov rax, [rbp-8]
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:rax 
  # $7.1: @List = load_struct_member(instruction.1, values)
  .loc 3 634 31
  mov rbx, [rax+57]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:rax $7.1:rbx 
  # instruction_values.1: @List_Iterator = call(create_iterator_279, $7.1)
  .loc 3 634 31
  mov rdi, rbx
  mov [rbp-32], rax
  call create_iterator_279
  # [discarded value]: $7.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:rax 
  # jump(block.4)
  mov [rbp-40], rax
.LABEL__replace_value_88__4:
  # $9.1: Boolean = call(has_next_282, instruction_values.1)
  .loc 3 635 16
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__replace_value_88__6
.LABEL__replace_value_88__5:
  # instruction_value.1: @IR_Value = call(next_283, instruction_values.1)
  .loc 3 636 34
  mov rdi, [rbp-40]
  call next_283
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] instruction_value.1:rax 
  # $12.1: Boolean = instruction_value.1 == value.1
  .loc 3 637 17
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: instruction_value.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $12.1:rbx 
  # jump($12.1, block.7, block.4)
  test bl, bl
  jz .LABEL__replace_value_88__4
.LABEL__replace_value_88__7:
  # $13.1: @List = load_struct_member(instruction.1, values)
  .loc 3 638 17
  mov rax, [rbp-32]
  mov rbx, [rax+57]
  # [discarded value]: $12.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:rax:[rbp-32] instruction_values.1:[rbp-40] $13.1:rbx 
  # $14.1: @List = call(remove_all_271, $13.1, value.1)
  .loc 3 638 17
  mov rdi, rbx
  mov rsi, [rbp-16]
  call remove_all_271
  # [discarded value]: $13.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $14.1:rax 
  # $15.1: @List = call(remove_all_271, $14.1, new_value.1)
  .loc 3 638 17
  mov rdi, rax
  mov rsi, [rbp-24]
  call remove_all_271
  # [discarded value]: $14.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $15.1:rax 
  # $16.1: @List = call(prune_272, $15.1)
  .loc 3 638 17
  mov rdi, rax
  call prune_272
  # [discarded value]: $15.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $16.1:rax 
  # call(append_268, $16.1, new_value.1)
  .loc 3 638 17
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_268
  # [discarded value]: $16.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # jump(block.4)
  jmp .LABEL__replace_value_88__4
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
.LABEL__replace_value_88__6:
  # return()
  .loc 3 641 9
  jmp .LABEL__replace_value_88__end
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [discarded value]: instruction.1
  # [discarded value]: instruction_values.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
.LABEL__replace_value_88__3:
  # $17.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 3 643 5
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: instruction.1:rax:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $17.1:rbx 
  # call(replace_273, $17.1, value.1, new_value.1)
  .loc 3 643 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call replace_273
  # [discarded value]: $17.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # return()
  jmp .LABEL__replace_value_88__end
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [discarded value]: value.1
  # [discarded value]: new_value.1
  # [live values]: 
.LABEL__replace_value_88__end:
  mov rsp, rbp
  pop rbp
  ret

replace_value_88__stack_frame_size: .word 48

  .loc 3 646 1
  .text
convert_statement_89:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_statement_89__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_statement_89__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 647 9
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 3 647 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__convert_statement_89__3
.LABEL__convert_statement_89__2:
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 648 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 3 648 41
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $3.1:rbx $4.1:r15 
  # $5.1: @String = load_struct_member($4.1, name)
  .loc 3 648 41
  mov r14, r15
  add r14, 8
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $3.1:rbx $5.1:r14 
  # $6.1: @String = call(clone_295, $5.1)
  .loc 3 648 35
  mov rdi, r14
  mov [rbp-24], rbx
  call clone_295
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:[rbp-24] $6.1:rax 
  # $7.1: @String = call(append_304, $6.1, " requires a basic block.")
  .loc 3 648 35
  mov rdi, rax
  lea rsi, .LABEL__string_182[rip] # " requires a basic block."
  call append_304
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:[rbp-24] $7.1:rax 
  # call(abort_264, $3.1, $7.1)
  .loc 3 648 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_264
  # [discarded value]: $3.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__3:
  # AST_Assignment_Statement.2: @Object_Type = load_variable(AST_Assignment_Statement)
  lea rax, AST_Assignment_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Assignment_Statement.2:rax 
  # $8.1: Boolean = call(is_293, statement.1, AST_Assignment_Statement.2)
  .loc 3 650 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Assignment_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $8.1:rax 
  # jump($8.1, block.4, block.6)
  test al, al
  jz .LABEL__convert_statement_89__6
.LABEL__convert_statement_89__4:
  # $27.1: @AST_Assignment_Statement = statement.1
  .loc 3 651 43
  mov rax, [rbp-8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $27.1:rax 
  # call(convert_assignment_statement_90, self.1, $27.1)
  .loc 3 651 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_assignment_statement_90
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
.LABEL__convert_statement_89__5:
  # return()
  jmp .LABEL__convert_statement_89__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__6:
  # AST_Block_Statement.2: @Object_Type = load_variable(AST_Block_Statement)
  lea rax, AST_Block_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Block_Statement.2:rax 
  # $9.1: Boolean = call(is_293, statement.1, AST_Block_Statement.2)
  .loc 3 652 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Block_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.7, block.9)
  test al, al
  jz .LABEL__convert_statement_89__9
.LABEL__convert_statement_89__7:
  # $26.1: @AST_Block_Statement = statement.1
  .loc 3 653 38
  mov rax, [rbp-8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $26.1:rax 
  # call(convert_block_statement_91, self.1, $26.1)
  .loc 3 653 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_block_statement_91
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__9:
  # AST_Break_Statement.2: @Object_Type = load_variable(AST_Break_Statement)
  lea rax, AST_Break_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Break_Statement.2:rax 
  # $10.1: Boolean = call(is_293, statement.1, AST_Break_Statement.2)
  .loc 3 654 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Break_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $10.1:rax 
  # jump($10.1, block.10, block.12)
  test al, al
  jz .LABEL__convert_statement_89__12
.LABEL__convert_statement_89__10:
  # $25.1: @AST_Break_Statement = statement.1
  .loc 3 655 38
  mov rax, [rbp-8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $25.1:rax 
  # call(convert_break_statement_92, self.1, $25.1)
  .loc 3 655 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_break_statement_92
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__12:
  # AST_Expression_Statement.2: @Object_Type = load_variable(AST_Expression_Statement)
  lea rax, AST_Expression_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Expression_Statement.2:rax 
  # $11.1: Boolean = call(is_293, statement.1, AST_Expression_Statement.2)
  .loc 3 656 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Expression_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $11.1:rax 
  # jump($11.1, block.13, block.15)
  test al, al
  jz .LABEL__convert_statement_89__15
.LABEL__convert_statement_89__13:
  # $24.1: @AST_Expression_Statement = statement.1
  .loc 3 657 43
  mov rax, [rbp-8]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $24.1:rax 
  # call(convert_expression_statement_93, self.1, $24.1, null)
  .loc 3 657 9
  mov rdi, [rbp-16]
  mov rsi, rax
  xor rdx, rdx
  call convert_expression_statement_93
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__15:
  # AST_If_Statement.2: @Object_Type = load_variable(AST_If_Statement)
  lea rax, AST_If_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_If_Statement.2:rax 
  # $12.1: Boolean = call(is_293, statement.1, AST_If_Statement.2)
  .loc 3 658 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_If_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $12.1:rax 
  # jump($12.1, block.16, block.18)
  test al, al
  jz .LABEL__convert_statement_89__18
.LABEL__convert_statement_89__16:
  # $23.1: @AST_If_Statement = statement.1
  .loc 3 659 35
  mov rax, [rbp-8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $23.1:rax 
  # call(convert_if_statement_94, self.1, $23.1)
  .loc 3 659 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_if_statement_94
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__18:
  # AST_Loop_Statement.2: @Object_Type = load_variable(AST_Loop_Statement)
  lea rax, AST_Loop_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Loop_Statement.2:rax 
  # $13.1: Boolean = call(is_293, statement.1, AST_Loop_Statement.2)
  .loc 3 660 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Loop_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $13.1:rax 
  # jump($13.1, block.19, block.21)
  test al, al
  jz .LABEL__convert_statement_89__21
.LABEL__convert_statement_89__19:
  # $22.1: @AST_Loop_Statement = statement.1
  .loc 3 661 37
  mov rax, [rbp-8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $22.1:rax 
  # call(convert_loop_statement_95, self.1, $22.1)
  .loc 3 661 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_loop_statement_95
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__21:
  # AST_Return_Statement.2: @Object_Type = load_variable(AST_Return_Statement)
  lea rax, AST_Return_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Return_Statement.2:rax 
  # $14.1: Boolean = call(is_293, statement.1, AST_Return_Statement.2)
  .loc 3 662 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Return_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $14.1:rax 
  # jump($14.1, block.22, block.24)
  test al, al
  jz .LABEL__convert_statement_89__24
.LABEL__convert_statement_89__22:
  # $21.1: @AST_Return_Statement = statement.1
  .loc 3 663 39
  mov rax, [rbp-8]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $21.1:rax 
  # call(convert_return_statement_96, self.1, $21.1)
  .loc 3 663 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_return_statement_96
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__24:
  # AST_Variable_Statement.2: @Object_Type = load_variable(AST_Variable_Statement)
  lea rax, AST_Variable_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Variable_Statement.2:rax 
  # $15.1: Boolean = call(is_293, statement.1, AST_Variable_Statement.2)
  .loc 3 664 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $15.1:rax 
  # jump($15.1, block.25, block.27)
  test al, al
  jz .LABEL__convert_statement_89__27
.LABEL__convert_statement_89__25:
  # $20.1: @AST_Variable_Statement = statement.1
  .loc 3 665 41
  mov rax, [rbp-8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $20.1:rax 
  # call(convert_variable_statement_97, self.1, $20.1)
  .loc 3 665 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_variable_statement_97
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__27:
  # AST_While_Statement.2: @Object_Type = load_variable(AST_While_Statement)
  lea rax, AST_While_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_While_Statement.2:rax 
  # $16.1: Boolean = call(is_293, statement.1, AST_While_Statement.2)
  .loc 3 666 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_While_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $16.1:rax 
  # jump($16.1, block.28, block.30)
  test al, al
  jz .LABEL__convert_statement_89__30
.LABEL__convert_statement_89__28:
  # $19.1: @AST_While_Statement = statement.1
  .loc 3 667 38
  mov rax, [rbp-8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $19.1:rax 
  # call(convert_while_statement_98, self.1, $19.1)
  .loc 3 667 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_while_statement_98
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_89__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_89__30:
  # $17.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 669 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $17.1:rbx 
  # $18.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 3 669 35
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $17.1:rbx $18.1:r15 
  # call(abort_138, $17.1, $18.1)
  .loc 3 669 9
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_statement_89__end:
  mov rsp, rbp
  pop rbp
  ret

convert_statement_89__stack_frame_size: .word 32

  .loc 3 673 1
  .text
convert_assignment_statement_90:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_assignment_statement_90__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_assignment_statement_90__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # assignment_statement.1: @AST_Assignment_Statement = load_variable(assignment_statement)
  # [live values]: self.1:rdi assignment_statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 674 9
  mov rax, [rsi+16]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax 
  # AST_Array_Access_Expression.2: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rbx, AST_Array_Access_Expression[rip]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax AST_Array_Access_Expression.2:rbx 
  # $2.1: Boolean = call(is_293, $1.1, AST_Array_Access_Expression.2)
  .loc 3 674 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_293
  # [discarded value]: $1.1
  # [discarded value]: AST_Array_Access_Expression.2
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.4)
  test al, al
  jz .LABEL__convert_assignment_statement_90__4
.LABEL__convert_assignment_statement_90__2:
  # array_access_expression.1: @AST_Array_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 675 36
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] array_access_expression.1:rbx 
  # $70.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  .loc 3 676 59
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] array_access_expression.1:rbx $70.1:r15 
  # $71.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 676 101
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-24], rbx
  mov [rbp-32], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:[rbp-24] $70.1:[rbp-32] $71.1:rax 
  # array_item_index_value.1: @IR_Value = call(convert_expression_99, self.1, $70.1, $71.1)
  .loc 3 676 35
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:[rbp-24] array_item_index_value.1:rax 
  # $73.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  .loc 3 677 58
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [discarded value]: array_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:rax $73.1:r15 
  # array_address.1: @IR_Value = call(convert_expression_address_100, self.1, $73.1)
  .loc 3 677 26
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-24], rax
  call convert_expression_address_100
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:rax 
  # $75.1: @IR_Type = load_struct_member(array_address.1, type)
  .loc 3 678 13
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:rax $75.1:rbx 
  # IR_Pointer_Type.11: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:rax $75.1:rbx IR_Pointer_Type.11:r15 
  # $76.1: Boolean = call(is_293, $75.1, IR_Pointer_Type.11)
  .loc 3 678 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_293
  # [discarded value]: $75.1
  # [discarded value]: IR_Pointer_Type.11
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] $76.1:rax 
  # $77.1: Boolean = $76.1 == false
  .loc 3 678 13
  cmp al, 0
  sete bl
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] $77.1:rbx 
  # jump($77.1, block.19, block.20)
  test bl, bl
  jz .LABEL__convert_assignment_statement_90__20
.LABEL__convert_assignment_statement_90__19:
  # $78.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 679 19
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] $78.1:rbx 
  # $79.1: @String = call(clone_295, "Not an array pointer")
  .loc 3 679 50
  lea rdi, .LABEL__string_183[rip] # "Not an array pointer"
  mov [rbp-40], rbx
  call clone_295
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] $78.1:[rbp-40] $79.1:rax 
  # call(abort_264, $78.1, $79.1)
  .loc 3 679 13
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_264
  # [discarded value]: $78.1
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] 
.LABEL__convert_assignment_statement_90__20:
  # $81.1: @IR_Pointer_Type = load_struct_member(array_address.1, type)
  .loc 3 681 29
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:rax:[rbp-32] $81.1:rbx 
  # array_item_type.1: @IR_Type = load_struct_member($81.1, pointed_type)
  .loc 3 681 28
  mov r15, [rbx+16]
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:rax:[rbp-32] array_item_type.1:r15 
  # $83.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 3 682 42
  mov rbx, [rbp-16]
  mov r14, [rbx+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:rax:[rbp-32] array_item_type.1:r15 $83.1:r14 
  # value.1: @IR_Value = call(convert_expression_99, self.1, $83.1, array_item_type.1)
  .loc 3 682 18
  mov rdi, [rbp-8]
  mov rsi, r14
  mov rdx, r15
  call convert_expression_99
  # [discarded value]: array_item_type.1
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] value.1:rax 
  # $85.1: @IR_Store_Array_Item_Instruction = call(create_ir_store_array_item_instruction_181, array_address.1, array_item_index_value.1, value.1)
  .loc 3 683 21
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  mov rdx, rax
  call create_ir_store_array_item_instruction_181
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] $85.1:rax 
  # $86.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 683 107
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] $85.1:rax $86.1:r15 
  # $87.1: @IR_Variable_Value = call(append_71, self.1, $85.1, $86.1)
  .loc 3 683 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $85.1
  # [discarded value]: $86.1
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] 
  # jump(block.3)
.LABEL__convert_assignment_statement_90__3:
  # return()
  jmp .LABEL__convert_assignment_statement_90__end
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-24] array_address.1:[rbp-32] 
  # [discarded value]: array_item_index_value.1
  # [discarded value]: array_address.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
.LABEL__convert_assignment_statement_90__4:
  # $3.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 684 16
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $3.1:rbx 
  # AST_Member_Access_Expression.2: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea r15, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $3.1:rbx AST_Member_Access_Expression.2:r15 
  # $4.1: Boolean = call(is_293, $3.1, AST_Member_Access_Expression.2)
  .loc 3 684 16
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $3.1
  # [discarded value]: AST_Member_Access_Expression.2
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.7)
  test al, al
  jz .LABEL__convert_assignment_statement_90__7
.LABEL__convert_assignment_statement_90__5:
  # member_access_expression.1: @AST_Member_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 685 37
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] member_access_expression.1:rbx 
  # $28.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  .loc 3 686 65
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] member_access_expression.1:rbx $28.1:r15 
  # object_address_value.1: @IR_Value = call(convert_expression_address_100, self.1, $28.1)
  .loc 3 686 33
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-24], rbx
  call convert_expression_address_100
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:rax 
  # $30.1: @IR_Type = load_struct_member(object_address_value.1, type)
  .loc 3 687 13
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:rax $30.1:rbx 
  # IR_Pointer_Type.9: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:rax $30.1:rbx IR_Pointer_Type.9:r15 
  # $31.1: Boolean = call(is_293, $30.1, IR_Pointer_Type.9)
  .loc 3 687 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_293
  # [discarded value]: $30.1
  # [discarded value]: IR_Pointer_Type.9
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $31.1:rax 
  # $32.1: Boolean = $31.1 == false
  .loc 3 687 13
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $32.1:rbx 
  # jump($32.1, block.13, block.14)
  test bl, bl
  jz .LABEL__convert_assignment_statement_90__14
.LABEL__convert_assignment_statement_90__13:
  # $33.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 688 19
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $33.1:rbx 
  # $34.1: @String = call(clone_295, "Not a '")
  .loc 3 688 50
  lea rdi, .LABEL__string_184[rip] # "Not a '"
  mov [rbp-40], rbx
  call clone_295
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $33.1:[rbp-40] $34.1:rax 
  # IR_Pointer_Type.10: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $33.1:[rbp-40] $34.1:rax IR_Pointer_Type.10:rbx 
  # $35.1: @String = load_struct_member(IR_Pointer_Type.10, name)
  .loc 3 688 74
  mov r15, rbx
  add r15, 8
  # [discarded value]: IR_Pointer_Type.10
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $33.1:[rbp-40] $34.1:rax $35.1:r15 
  # $36.1: @String = call(append_304, $34.1, $35.1)
  .loc 3 688 50
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $33.1:[rbp-40] $36.1:rax 
  # $37.1: @String = call(append_304, $36.1, "' value")
  .loc 3 688 50
  mov rdi, rax
  lea rsi, .LABEL__string_185[rip] # "' value"
  call append_304
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] $33.1:[rbp-40] $37.1:rax 
  # call(abort_264, $33.1, $37.1)
  .loc 3 688 13
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_264
  # [discarded value]: $33.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] 
.LABEL__convert_assignment_statement_90__14:
  # $39.1: @IR_Pointer_Type = load_struct_member(object_address_value.1, type)
  .loc 3 690 25
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:rax:[rbp-32] $39.1:rbx 
  # object_type.1: @IR_Type = load_struct_member($39.1, pointed_type)
  .loc 3 690 24
  mov r15, [rbx+16]
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:rax:[rbp-32] object_type.1:r15 
  # IR_Struct_Type.9: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:rax:[rbp-32] object_type.1:r15 IR_Struct_Type.9:rbx 
  # $41.1: Boolean = call(is_293, object_type.1, IR_Struct_Type.9)
  .loc 3 691 13
  mov rdi, r15
  mov rsi, rbx
  mov [rbp-40], r15
  call is_293
  # [discarded value]: IR_Struct_Type.9
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $41.1:rax 
  # $42.1: Boolean = $41.1 == false
  .loc 3 691 13
  cmp al, 0
  sete bl
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $42.1:rbx 
  # jump($42.1, block.15, block.16)
  test bl, bl
  jz .LABEL__convert_assignment_statement_90__16
.LABEL__convert_assignment_statement_90__15:
  # $43.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 692 19
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $43.1:rbx 
  # $44.1: @String = call(clone_295, "Not a '")
  .loc 3 692 50
  lea rdi, .LABEL__string_184[rip] # "Not a '"
  mov [rbp-48], rbx
  call clone_295
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $43.1:[rbp-48] $44.1:rax 
  # IR_Struct_Type.10: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $43.1:[rbp-48] $44.1:rax IR_Struct_Type.10:rbx 
  # $45.1: @String = load_struct_member(IR_Struct_Type.10, name)
  .loc 3 692 74
  mov r15, rbx
  add r15, 8
  # [discarded value]: IR_Struct_Type.10
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $43.1:[rbp-48] $44.1:rax $45.1:r15 
  # $46.1: @String = call(append_304, $44.1, $45.1)
  .loc 3 692 50
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $43.1:[rbp-48] $46.1:rax 
  # $47.1: @String = call(append_304, $46.1, "' value")
  .loc 3 692 50
  mov rdi, rax
  lea rsi, .LABEL__string_185[rip] # "' value"
  call append_304
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] $43.1:[rbp-48] $47.1:rax 
  # call(abort_264, $43.1, $47.1)
  .loc 3 692 13
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $43.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] 
.LABEL__convert_assignment_statement_90__16:
  # struct_type.1: @IR_Struct_Type = object_type.1
  .loc 3 694 25
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:rax 
  # $49.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 3 695 54
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rbx:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:rax $49.1:r15 
  # $50.1: @String = load_struct_member($49.1, lexeme)
  .loc 3 695 54
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rbx:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:rax $50.1:r14 
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_147, struct_type.1, $50.1)
  .loc 3 695 31
  mov rdi, rax
  mov rsi, r14
  mov [rbp-48], rax
  call get_member_147
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax 
  # $52.1: Boolean = struct_type_member.1 == null
  .loc 3 696 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax $52.1:rbx 
  # jump($52.1, block.17, block.18)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__convert_assignment_statement_90__18
.LABEL__convert_assignment_statement_90__17:
  # call(dump_struct_members_119, struct_type.1)
  .loc 3 697 13
  mov rdi, [rbp-48]
  call dump_struct_members_119
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # $53.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 3 698 19
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rax:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $53.1:rbx 
  # $54.1: @Source_Location = load_struct_member($53.1, location)
  .loc 3 698 19
  mov r15, [rbx+16]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rax:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:r15 
  # $55.1: @String = load_struct_member(object_type.1, name)
  .loc 3 698 72
  mov rbx, [rbp-40]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rax:[rbp-24] object_address_value.1:[rbp-32] object_type.1:rbx:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:r15 $55.1:r14 
  # $56.1: @String = call(clone_295, $55.1)
  .loc 3 698 66
  mov rdi, r14
  mov [rbp-64], r15
  call clone_295
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:[rbp-64] $56.1:rax 
  # $57.1: @String = call(append_304, $56.1, " doesn't have a '")
  .loc 3 698 66
  mov rdi, rax
  lea rsi, .LABEL__string_186[rip] # " doesn't have a '"
  call append_304
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:[rbp-64] $57.1:rax 
  # $58.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 3 698 125
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rbx:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:[rbp-64] $57.1:rax $58.1:r15 
  # $59.1: @String = load_struct_member($58.1, lexeme)
  .loc 3 698 125
  mov r14, [r15+8]
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:rbx:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:[rbp-64] $57.1:rax $59.1:r14 
  # $60.1: @String = call(append_304, $57.1, $59.1)
  .loc 3 698 66
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $57.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:[rbp-64] $60.1:rax 
  # $61.1: @String = call(append_304, $60.1, "' member")
  .loc 3 698 66
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # "' member"
  call append_304
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $54.1:[rbp-64] $61.1:rax 
  # call(abort_264, $54.1, $61.1)
  .loc 3 698 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_264
  # [discarded value]: $54.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_assignment_statement_90__18:
  # $62.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 3 700 42
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $62.1:rbx 
  # $63.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 700 81
  mov r15, [rbp-56]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:r15:[rbp-56] $62.1:rbx $63.1:r14 
  # value.1: @IR_Value = call(convert_expression_99, self.1, $62.1, $63.1)
  .loc 3 700 18
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_99
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] value.1:rax 
  # $65.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction_185, object_address_value.1, struct_type_member.1, value.1)
  .loc 3 701 21
  mov rdi, [rbp-32]
  mov rsi, [rbp-56]
  mov rdx, rax
  call create_ir_store_struct_member_instruction_185
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $65.1:rax 
  # $66.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 701 113
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $65.1:rax $66.1:r15 
  # $67.1: @IR_Variable_Value = call(append_71, self.1, $65.1, $66.1)
  .loc 3 701 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # jump(block.3)
  jmp .LABEL__convert_assignment_statement_90__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [discarded value]: struct_type.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] object_type.1:[rbp-40] 
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] member_access_expression.1:[rbp-24] object_address_value.1:[rbp-32] 
  # [discarded value]: member_access_expression.1
  # [discarded value]: object_address_value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
.LABEL__convert_assignment_statement_90__7:
  # $5.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 702 16
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $5.1:rbx 
  # AST_Variable_Expression.2: @Object_Type = load_variable(AST_Variable_Expression)
  lea r15, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $5.1:rbx AST_Variable_Expression.2:r15 
  # $6.1: Boolean = call(is_293, $5.1, AST_Variable_Expression.2)
  .loc 3 702 16
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $5.1
  # [discarded value]: AST_Variable_Expression.2
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $6.1:rax 
  # jump($6.1, block.8, block.10)
  test al, al
  jz .LABEL__convert_assignment_statement_90__10
.LABEL__convert_assignment_statement_90__8:
  # variable_expression.1: @AST_Variable_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 703 32
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] variable_expression.1:rbx 
  # $12.1: @Identifier_Token = load_struct_member(variable_expression.1, name)
  .loc 3 704 26
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] variable_expression.1:rbx $12.1:r15 
  # variable_name.1: @String = load_struct_member($12.1, lexeme)
  .loc 3 704 26
  mov r14, [r15+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] variable_expression.1:rbx variable_name.1:r14 
  # variable.1: @IR_Variable = call(get_variable_62, self.1, variable_name.1)
  .loc 3 705 21
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-24], rbx
  mov [rbp-32], r14
  call get_variable_62
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:rax 
  # $15.1: Boolean = variable.1 == null
  .loc 3 706 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:rax $15.1:rbx 
  # jump($15.1, block.11, block.12)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__convert_assignment_statement_90__12
.LABEL__convert_assignment_statement_90__11:
  # $16.1: @Source_Location = load_struct_member(variable_expression.1, location)
  .loc 3 707 19
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:rax:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] $16.1:rbx 
  # $17.1: @String = call(clone_295, "Undeclared variable: ")
  .loc 3 707 49
  lea rdi, .LABEL__string_188[rip] # "Undeclared variable: "
  mov [rbp-48], rbx
  call clone_295
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] $16.1:[rbp-48] $17.1:rax 
  # $18.1: @String = call(append_304, $17.1, variable_name.1)
  .loc 3 707 49
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_304
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] $16.1:[rbp-48] $18.1:rax 
  # call(abort_264, $16.1, $18.1)
  .loc 3 707 13
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $16.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] 
.LABEL__convert_assignment_statement_90__12:
  # $19.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 3 709 42
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] $19.1:rbx 
  # $20.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 3 709 81
  mov r15, [rbp-40]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:r15:[rbp-40] $19.1:rbx $20.1:r14 
  # value.1: @IR_Value = call(convert_expression_99, self.1, $19.1, $20.1)
  .loc 3 709 18
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_99
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] value.1:rax 
  # $22.1: @IR_Variable_Value = call(create_variable_value_64, self.1, variable.1)
  .loc 3 710 47
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov [rbp-48], rax
  call create_variable_value_64
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] value.1:[rbp-48] $22.1:rax 
  # $23.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, $22.1, value.1)
  .loc 3 710 21
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_ir_set_instruction_179
  # [discarded value]: value.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] $23.1:rax 
  # $24.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 710 93
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] $23.1:rax $24.1:r15 
  # $25.1: @IR_Variable_Value = call(append_71, self.1, $23.1, $24.1)
  .loc 3 710 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] 
  # jump(block.3)
  jmp .LABEL__convert_assignment_statement_90__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] variable_expression.1:[rbp-24] variable_name.1:[rbp-32] variable.1:[rbp-40] 
  # [discarded value]: variable_expression.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
.LABEL__convert_assignment_statement_90__10:
  # $7.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 3 712 15
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $7.1:rbx 
  # $8.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 3 712 46
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $7.1:rbx $8.1:r15 
  # $9.1: @Object_Type = load_struct_member($8.1, object_type)
  .loc 3 712 46
  mov r14, [r15+0]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $7.1:rbx $9.1:r14 
  # call(abort_138, $7.1, $9.1)
  .loc 3 712 9
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: assignment_statement.1
  # [live values]: 
.LABEL__convert_assignment_statement_90__end:
  mov rsp, rbp
  pop rbp
  ret

convert_assignment_statement_90__stack_frame_size: .word 64

  .loc 3 716 1
  .text
convert_block_statement_91:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_block_statement_91__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_block_statement_91__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Block_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 717 52
  mov rax, [rdi+0]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 717 81
  mov rbx, [rdi+0]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: @List = load_struct_member($2.1, named_values)
  .loc 3 717 81
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $3.1:r15 
  # $4.1: @List = new(List)
  .loc 3 31 24
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  # $5.1: @IR_Builder_Context = new(IR_Builder_Context)
  .loc 3 717 20
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, parent, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, variables, $4.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $3.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, named_values, $3.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $5.1:rax 
  # store_struct_member(self.1, context, $5.1)
  .loc 3 717 5
  mov rbx, [rbp-24]
  mov QWORD PTR [rbx+0], rax
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-16] 
  # $6.1: @List = load_struct_member(statement.1, statements)
  .loc 3 718 25
  mov rax, [rbp-16]
  mov r15, [rax+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-24] $6.1:r15 
  # block_statements.1: @List_Iterator = call(create_iterator_279, $6.1)
  .loc 3 718 25
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] block_statements.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__convert_block_statement_91__2:
  # $8.1: Boolean = call(has_next_282, block_statements.1)
  .loc 3 719 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.3, block.4)
  test al, al
  jz .LABEL__convert_block_statement_91__4
.LABEL__convert_block_statement_91__3:
  # block_statement.1: @AST_Statement = call(next_283, block_statements.1)
  .loc 3 720 28
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax 
  # call(convert_statement_89, self.1, block_statement.1)
  .loc 3 721 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_statement_89
  # [discarded value]: block_statement.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # jump(block.2)
  jmp .LABEL__convert_block_statement_91__2
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
.LABEL__convert_block_statement_91__4:
  # $11.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 3 723 20
  mov rax, [rbp-24]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $11.1:rbx 
  # $12.1: @IR_Builder_Context = load_struct_member($11.1, parent)
  .loc 3 723 20
  mov r15, [rbx+0]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $12.1:r15 
  # store_struct_member(self.1, context, $12.1)
  .loc 3 723 5
  mov QWORD PTR [rax+0], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] 
  # return()
  jmp .LABEL__convert_block_statement_91__end
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: block_statements.1
  # [live values]: 
.LABEL__convert_block_statement_91__end:
  mov rsp, rbp
  pop rbp
  ret

convert_block_statement_91__stack_frame_size: .word 48

  .loc 3 726 1
  .text
convert_break_statement_92:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_break_statement_92__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_break_statement_92__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Break_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 3 727 9
  mov rax, [rdi+40]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 3 727 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__convert_break_statement_92__3
.LABEL__convert_break_statement_92__2:
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 728 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $3.1:rbx 
  # call(abort_264, $3.1, "Break outside of a loop?")
  .loc 3 728 9
  mov rdi, rbx
  lea rsi, .LABEL__string_189[rip] # "Break outside of a loop?"
  call abort_264
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_break_statement_92__3:
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 730 5
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $4.1:rbx 
  # $5.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 3 730 36
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $4.1:rbx $5.1:r15 
  # $6.1: @IR_Block = load_struct_member($5.1, end_block)
  .loc 3 730 36
  mov r14, [r15+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $4.1:rbx $6.1:r14 
  # $7.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $4.1, $6.1)
  .loc 3 730 5
  mov rdi, rbx
  mov rsi, r14
  call append_jump_154
  # [discarded value]: $4.1
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # $8.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 731 26
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $8.1:rbx 
  # $9.1: @IR_Function = load_struct_member($8.1, function)
  .loc 3 731 26
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $9.1:r15 
  # $10.1: @IR_Block = call(create_block_157, $9.1)
  .loc 3 731 26
  mov rdi, r15
  call create_block_157
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $10.1:rax 
  # store_struct_member(self.1, current_block, $10.1)
  .loc 3 731 5
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-16] statement.1:[rbp-8] 
  # return()
  jmp .LABEL__convert_break_statement_92__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_break_statement_92__end:
  mov rsp, rbp
  pop rbp
  ret

convert_break_statement_92__stack_frame_size: .word 16

  .loc 3 734 1
  .text
convert_expression_statement_93:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_statement_93__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_statement_93__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Expression_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi statement.1:rsi expected_type.1:rdx 
  # $1.1: @AST_Expression = load_struct_member(statement.1, expression)
  .loc 3 735 29
  mov rax, [rsi+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rdi expected_type.1:rdx $1.1:rax 
  # $2.1: @IR_Value = call(convert_expression_99, self.1, $1.1, expected_type.1)
  .loc 3 735 5
  mov rsi, rax
  call convert_expression_99
  # [discarded value]: self.1
  # [discarded value]: expected_type.1
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_expression_statement_93__end
  # [live values]: 
.LABEL__convert_expression_statement_93__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_statement_93__stack_frame_size: .word 0

  .loc 3 738 1
  .text
convert_if_statement_94:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_if_statement_94__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_if_statement_94__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_If_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 3 739 48
  mov rax, [rsi+16]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 739 80
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # condition_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 739 24
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 740 19
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $4.1:r15 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 3 740 19
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $5.1:r14 
  # true_block.1: @IR_Block = call(create_block_157, $5.1)
  .loc 3 740 19
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_157
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax 
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 741 18
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $7.1:r15 
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  .loc 3 741 18
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $8.1:r14 
  # end_block.1: @IR_Block = call(create_block_157, $8.1)
  .loc 3 741 18
  mov rdi, r14
  mov [rbp-40], rax
  call create_block_157
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax 
  # $10.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 3 742 9
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $10.1:r15 
  # $11.1: Boolean = $10.1 != null
  .loc 3 742 9
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $11.1:r14 
  # jump($11.1, block.2, block.4)
  test r14b, r14b
  mov [rbp-48], rax
  jz .LABEL__convert_if_statement_94__4
.LABEL__convert_if_statement_94__2:
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 743 24
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $14.1:rbx 
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  .loc 3 743 24
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $15.1:r15 
  # false_block.1: @IR_Block = call(create_block_157, $15.1)
  .loc 3 743 24
  mov rdi, r15
  call create_block_157
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] false_block.1:rax 
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 744 9
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] false_block.1:rax $17.1:r15 
  # $18.1: @IR_Conditional_Jump_Instruction = call(append_jump_155, $17.1, condition_value.1, true_block.1, false_block.1)
  .loc 3 744 9
  mov rdi, r15
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, rax
  mov [rbp-56], rax
  call append_jump_155
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] false_block.1:[rbp-56] 
  # store_struct_member(self.1, current_block, false_block.1)
  .loc 3 745 9
  mov rax, [rbp-24]
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: false_block.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # $19.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 3 746 32
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $19.1:r15 
  # call(convert_statement_89, self.1, $19.1)
  .loc 3 746 9
  mov rdi, rax
  mov rsi, r15
  call convert_statement_89
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 747 13
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $20.1:rbx 
  # $21.1: @IR_Instruction = load_struct_member($20.1, last_instruction)
  .loc 3 747 13
  mov r15, [rbx+40]
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $21.1:r15 
  # $22.1: Boolean = call(is_exit_instruction_159, $21.1)
  .loc 3 747 13
  mov rdi, r15
  call is_exit_instruction_159
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $22.1:rax 
  # $23.1: Boolean = $22.1 == false
  .loc 3 747 13
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $23.1:rbx 
  # jump($23.1, block.5, block.3)
  test bl, bl
  jz .LABEL__convert_if_statement_94__3
.LABEL__convert_if_statement_94__5:
  # $24.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 748 13
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $24.1:rbx 
  # $25.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $24.1, end_block.1)
  .loc 3 748 13
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_154
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # jump(block.3)
.LABEL__convert_if_statement_94__3:
  # store_struct_member(self.1, current_block, true_block.1)
  .loc 3 753 5
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] 
  # $26.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  .loc 3 754 28
  mov r15, [rbp-8]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-24] statement.1:r15:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $26.1:r14 
  # call(convert_statement_89, self.1, $26.1)
  .loc 3 754 5
  mov rdi, rax
  mov rsi, r14
  call convert_statement_89
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # $27.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 755 9
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $27.1:rbx 
  # $28.1: @IR_Instruction = load_struct_member($27.1, last_instruction)
  .loc 3 755 9
  mov r15, [rbx+40]
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $28.1:r15 
  # $29.1: Boolean = call(is_exit_instruction_159, $28.1)
  .loc 3 755 9
  mov rdi, r15
  call is_exit_instruction_159
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $29.1:rax 
  # $30.1: Boolean = $29.1 == false
  .loc 3 755 9
  cmp al, 0
  sete bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $30.1:rbx 
  # jump($30.1, block.7, block.8)
  test bl, bl
  jz .LABEL__convert_if_statement_94__8
.LABEL__convert_if_statement_94__7:
  # $31.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 756 9
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $31.1:rbx 
  # $32.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $31.1, end_block.1)
  .loc 3 756 9
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_154
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # jump(block.8)
.LABEL__convert_if_statement_94__8:
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 3 758 5
  mov rax, [rbp-24]
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rbx:[rbp-48] 
  # return()
  jmp .LABEL__convert_if_statement_94__end
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
.LABEL__convert_if_statement_94__4:
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 751 9
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $12.1:rbx 
  # $13.1: @IR_Conditional_Jump_Instruction = call(append_jump_155, $12.1, condition_value.1, true_block.1, end_block.1)
  .loc 3 751 9
  mov rdi, rbx
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, [rbp-48]
  call append_jump_155
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # jump(block.3)
  jmp .LABEL__convert_if_statement_94__3
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [discarded value]: condition_value.1
  # [discarded value]: true_block.1
  # [discarded value]: end_block.1
  # [live values]: 
.LABEL__convert_if_statement_94__end:
  mov rsp, rbp
  pop rbp
  ret

convert_if_statement_94__stack_frame_size: .word 64

  .loc 3 761 1
  .text
convert_loop_statement_95:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_loop_statement_95__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_loop_statement_95__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Loop_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 762 19
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 3 762 19
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # loop_block.1: @IR_Block = call(create_block_157, $2.1)
  .loc 3 762 19
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_157
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 763 18
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $4.1:r15 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 3 763 18
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $5.1:r14 
  # end_block.1: @IR_Block = call(create_block_157, $5.1)
  .loc 3 763 18
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_157
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax 
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 764 5
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  # $8.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $7.1, loop_block.1)
  .loc 3 764 5
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_jump_154
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  # store_struct_member(self.1, current_block, loop_block.1)
  .loc 3 765 5
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] 
  # $9.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 3 766 46
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] $9.1:r15 
  # $10.1: @IR_Loop = new(IR_Loop)
  .loc 3 766 25
  mov [rbp-40], r15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, parent, $9.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, end_block, end_block.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rbx:[rbp-32] $10.1:rax 
  # store_struct_member(self.1, current_loop, $10.1)
  .loc 3 766 5
  mov r15, [rbp-8]
  mov QWORD PTR [r15+40], rax
  # [discarded value]: $10.1
  # [live values]: self.1:r15:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rbx:[rbp-32] 
  # $11.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 3 767 34
  mov rax, [rbp-16]
  mov r14, [rax+16]
  # [discarded value]: statement.1
  # [live values]: self.1:r15:[rbp-8] loop_block.1:[rbp-24] end_block.1:rbx:[rbp-32] $11.1:r14 
  # call(convert_block_statement_91, self.1, $11.1)
  .loc 3 767 5
  mov rdi, r15
  mov rsi, r14
  call convert_block_statement_91
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 768 5
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] $12.1:rbx 
  # $13.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $12.1, loop_block.1)
  .loc 3 768 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_154
  # [discarded value]: loop_block.1
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-32] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 3 769 5
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  # $14.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 3 770 25
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  # $15.1: @IR_Loop = load_struct_member($14.1, parent)
  .loc 3 770 25
  mov r15, [rbx+0]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] $15.1:r15 
  # store_struct_member(self.1, current_loop, $15.1)
  .loc 3 770 5
  mov QWORD PTR [rax+40], r15
  # [discarded value]: self.1
  # [discarded value]: $15.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_loop_statement_95__end
  # [live values]: 
.LABEL__convert_loop_statement_95__end:
  mov rsp, rbp
  pop rbp
  ret

convert_loop_statement_95__stack_frame_size: .word 48

  .loc 3 773 1
  .text
convert_return_statement_96:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_return_statement_96__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_return_statement_96__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Return_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 3 774 9
  mov rax, [rsi+16]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 3 774 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.4)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__convert_return_statement_96__4
.LABEL__convert_return_statement_96__2:
  # $6.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 3 775 49
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statement.1:rax:[rbp-8] $6.1:rbx 
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 775 77
  mov r15, [rbp-16]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-16] statement.1:rax:[rbp-8] $6.1:rbx $7.1:r14 
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  .loc 3 775 77
  mov r13, [r14+16]
  # [discarded value]: $7.1
  # [live values]: self.1:r15:[rbp-16] statement.1:rax:[rbp-8] $6.1:rbx $8.1:r13 
  # $9.1: @IR_Type = load_struct_member($8.1, return_type)
  .loc 3 775 77
  mov r14, [r13+40]
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-16] statement.1:rax:[rbp-8] $6.1:rbx $9.1:r14 
  # return_value.1: @IR_Value = call(convert_expression_99, self.1, $6.1, $9.1)
  .loc 3 775 25
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_99
  # [discarded value]: $6.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:rax 
  # $11.1: @IR_Return_Instruction = call(create_ir_return_instruction_177, return_value.1)
  .loc 3 776 21
  mov rdi, rax
  call create_ir_return_instruction_177
  # [discarded value]: return_value.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $11.1:rax 
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 776 65
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] statement.1:rbx:[rbp-8] $11.1:rax $12.1:r15 
  # $13.1: @IR_Variable_Value = call(append_71, self.1, $11.1, $12.1)
  .loc 3 776 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.3)
.LABEL__convert_return_statement_96__3:
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 780 26
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $14.1:rbx 
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  .loc 3 780 26
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-16] statement.1:[rbp-8] $15.1:r15 
  # $16.1: @IR_Block = call(create_block_157, $15.1)
  .loc 3 780 26
  mov rdi, r15
  call create_block_157
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $16.1:rax 
  # store_struct_member(self.1, current_block, $16.1)
  .loc 3 780 5
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-16] statement.1:[rbp-8] 
  # return()
  jmp .LABEL__convert_return_statement_96__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_return_statement_96__4:
  # $3.1: @IR_Return_Instruction = call(create_ir_return_instruction_177, null)
  .loc 3 778 21
  xor rdi, rdi
  call create_ir_return_instruction_177
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax 
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 3 778 57
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] statement.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  # $5.1: @IR_Variable_Value = call(append_71, self.1, $3.1, $4.1)
  .loc 3 778 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__convert_return_statement_96__3
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_return_statement_96__end:
  mov rsp, rbp
  pop rbp
  ret

convert_return_statement_96__stack_frame_size: .word 16

  .loc 3 783 1
  .text
convert_variable_statement_97:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_statement_97__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_statement_97__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  .loc 3 784 22
  mov rax, [rsi+16]
  # [live values]: self.1:rdi variable_statement.1:rsi $1.1:rax 
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  .loc 3 784 22
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx 
  # variable_type.1: @IR_Type = null
  .loc 3 785 5
  xor rax, rax
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx variable_type.1:rax 
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 3 786 9
  mov r15, [rsi+24]
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx variable_type.1:rax $3.1:r15 
  # $4.1: Boolean = $3.1 != null
  .loc 3 786 9
  cmp r15, 0
  setne r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx variable_type.1:rax $4.1:r14 
  # jump($4.1, block.2, block.3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  jz .LABEL__convert_variable_statement_97__3
.LABEL__convert_variable_statement_97__2:
  # $5.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 3 787 49
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] $5.1:rbx 
  # variable_type.2: @IR_Type = call(convert_value_type_75, self.1, $5.1)
  .loc 3 787 25
  mov rdi, [rbp-32]
  mov rsi, rbx
  call convert_value_type_75
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:rax:[rbp-8] 
  # jump(block.3)
  mov [rbp-8], rax
.LABEL__convert_variable_statement_97__3:
  # variable_type.15: @IR_Type = phi(variable_type.1, variable_type.2)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] 
  # variable_value.1: @IR_Value = null
  .loc 3 789 5
  xor rax, rax
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:rax 
  # $7.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 3 790 9
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] variable_statement.1:rbx:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:rax $7.1:r15 
  # $8.1: Boolean = $7.1 != null
  .loc 3 790 9
  cmp r15, 0
  setne r14b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rbx:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:rax $8.1:r14 
  # jump($8.1, block.4, block.5)
  test r14b, r14b
  mov [rbp-40], rax
  jz .LABEL__convert_variable_statement_97__5
.LABEL__convert_variable_statement_97__4:
  # $9.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 3 791 50
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] $9.1:rbx 
  # variable_value.2: @IR_Value = call(convert_expression_99, self.1, $9.1, variable_type.15)
  .loc 3 791 26
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov rdx, [rbp-8]
  call convert_expression_99
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:rax:[rbp-40] 
  # jump(block.5)
  mov [rbp-40], rax
.LABEL__convert_variable_statement_97__5:
  # variable_value.13: @IR_Value = phi(variable_value.1, variable_value.2)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # $11.1: Boolean = variable_type.15 != null
  .loc 3 793 9
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $11.1:rax 
  # jump($11.1, block.6, block.8)
  test al, al
  jz .LABEL__convert_variable_statement_97__8
.LABEL__convert_variable_statement_97__6:
  # $19.1: Boolean = variable_value.13 != null
  .loc 3 794 13
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $19.1:rax 
  # jump($19.1, block.13, block.7)
  test al, al
  jz .LABEL__convert_variable_statement_97__7
.LABEL__convert_variable_statement_97__13:
  # $20.1: @IR_Type = load_struct_member(variable_value.13, type)
  .loc 3 795 39
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rax:[rbp-40] $20.1:rbx 
  # $21.1: Boolean = call(accepts_68, variable_type.15, $20.1)
  .loc 3 795 17
  mov rdi, [rbp-8]
  mov rsi, rbx
  call accepts_68
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $21.1:rax 
  # $22.1: Boolean = $21.1 == false
  .loc 3 795 17
  cmp al, 0
  sete bl
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $22.1:rbx 
  # jump($22.1, block.15, block.16)
  test bl, bl
  jz .LABEL__convert_variable_statement_97__16
.LABEL__convert_variable_statement_97__15:
  # $23.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 3 796 23
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $23.1:rbx 
  # $24.1: @Source_Location = load_struct_member($23.1, location)
  .loc 3 796 23
  mov r15, [rbx+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:r15 
  # $25.1: @String = call(clone_295, "Cannot assign a '")
  .loc 3 796 69
  lea rdi, .LABEL__string_190[rip] # "Cannot assign a '"
  mov [rbp-48], r15
  call clone_295
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:[rbp-48] $25.1:rax 
  # $26.1: @IR_Type = load_struct_member(variable_value.13, type)
  .loc 3 796 103
  mov rbx, [rbp-40]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rbx:[rbp-40] $24.1:[rbp-48] $25.1:rax $26.1:r15 
  # $27.1: @String = load_struct_member($26.1, name)
  .loc 3 796 103
  mov r14, [r15+8]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rbx:[rbp-40] $24.1:[rbp-48] $25.1:rax $27.1:r14 
  # $28.1: @String = call(append_304, $25.1, $27.1)
  .loc 3 796 69
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $25.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:[rbp-48] $28.1:rax 
  # $29.1: @String = call(append_304, $28.1, "' value to a '")
  .loc 3 796 69
  mov rdi, rax
  lea rsi, .LABEL__string_191[rip] # "' value to a '"
  call append_304
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:[rbp-48] $29.1:rax 
  # $30.1: @String = load_struct_member(variable_type.15, name)
  .loc 3 796 161
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:rbx:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:[rbp-48] $29.1:rax $30.1:r15 
  # $31.1: @String = call(append_304, $29.1, $30.1)
  .loc 3 796 69
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:[rbp-48] $31.1:rax 
  # $32.1: @String = call(append_304, $31.1, "' variable")
  .loc 3 796 69
  mov rdi, rax
  lea rsi, .LABEL__string_192[rip] # "' variable"
  call append_304
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $24.1:[rbp-48] $32.1:rax 
  # call(abort_264, $24.1, $32.1)
  .loc 3 796 17
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $24.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
.LABEL__convert_variable_statement_97__16:
  # $33.1: @IR_Type = load_struct_member(variable_value.13, type)
  .loc 3 798 38
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rax:[rbp-40] $33.1:rbx 
  # $34.1: Boolean = call(equals_141, variable_type.15, $33.1)
  .loc 3 798 17
  mov rdi, [rbp-8]
  mov rsi, rbx
  call equals_141
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $34.1:rax 
  # jump($34.1, block.17, block.7)
  test al, al
  jz .LABEL__convert_variable_statement_97__7
.LABEL__convert_variable_statement_97__17:
  # stderr.2: @FILE = load_variable(stderr)
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] stderr.2:stderr[rip] 
  # $35.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 3 799 30
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] stderr.2:stderr[rip] $35.1:rbx 
  # $36.1: @Source_Location = load_struct_member($35.1, location)
  .loc 3 799 30
  mov r15, [rbx+8]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] stderr.2:stderr[rip] $36.1:r15 
  # $37.1: @FILE = call(write_267, stderr.2, $36.1)
  .loc 3 799 17
  mov rdi, stderr[rip]
  mov rsi, r15
  call write_267
  # [discarded value]: stderr.2
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $37.1:rax 
  # $38.1: @FILE = call(write_287, $37.1, ": Redundant type declaration")
  .loc 3 799 17
  mov rdi, rax
  lea rsi, .LABEL__string_193[rip] # ": Redundant type declaration"
  call write_287
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $38.1:rax 
  # $39.1: @FILE = call(end_line_290, $38.1)
  .loc 3 799 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # jump(block.7)
.LABEL__convert_variable_statement_97__7:
  # variable_type.9: @IR_Type = phi(variable_type.5, variable_type.15)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] 
  # IR_Any_Type.3: @Object_Type = load_variable(IR_Any_Type)
  lea rax, IR_Any_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] IR_Any_Type.3:rax 
  # $41.1: Boolean = call(is_293, variable_type.9, IR_Any_Type.3)
  .loc 3 811 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Any_Type.3
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:rax 
  # jump($41.1, block.22, block.21)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_variable_statement_97__21
.LABEL__convert_variable_statement_97__22:
  # $43.1: Boolean = phi($41.1, $41.2)
  .loc 3 811 9
  mov al, [rbp-41]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:rax 
  # jump($43.1, block.20, block.19)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_variable_statement_97__19
.LABEL__convert_variable_statement_97__20:
  # $43.3: Boolean = phi($43.1, $43.2)
  .loc 3 811 9
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.3:[rbp-42] $43.1:[rbp-42] 
  # jump($43.3, block.23, block.24)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__convert_variable_statement_97__24
.LABEL__convert_variable_statement_97__23:
  # $45.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 3 812 15
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $43.3
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $45.1:rbx 
  # $46.1: @String = call(clone_295, "Invalid variable type: ")
  .loc 3 812 44
  lea rdi, .LABEL__string_194[rip] # "Invalid variable type: "
  mov [rbp-50], rbx
  call clone_295
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $45.1:[rbp-50] $46.1:rax 
  # $47.1: @String = load_struct_member(variable_type.9, name)
  .loc 3 812 84
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:rbx:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $45.1:[rbp-50] $46.1:rax $47.1:r15 
  # $48.1: @String = call(append_304, $46.1, $47.1)
  .loc 3 812 44
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $45.1:[rbp-50] $48.1:rax 
  # call(abort_264, $45.1, $48.1)
  .loc 3 812 9
  mov rdi, [rbp-50]
  mov rsi, rax
  call abort_264
  # [discarded value]: $45.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] 
.LABEL__convert_variable_statement_97__24:
  # $49.1: @List = new(List)
  .loc 5 278 21
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:rax 
  # store_struct_member($49.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:rax 
  # store_struct_member($49.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:rax 
  # store_struct_member($49.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:rax 
  # $50.1: @IR_Variable = new(IR_Variable)
  .loc 3 814 17
  mov [rbp-50], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Variable[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:[rbp-50] $50.1:rax 
  # store_struct_member($50.1, name, variable_name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:[rbp-50] $50.1:rax 
  # store_struct_member($50.1, type, variable_type.9)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:r15:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $49.1:[rbp-50] $50.1:rax 
  # store_struct_member($50.1, values, $49.1)
  mov r14, [rbp-50]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:r15:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] $50.1:rax 
  # variable.1: @IR_Variable = $50.1
  .loc 3 814 5
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:rbx:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:r15:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:rax 
  # $51.1: @IR_Variable = call(add_variable_61, self.1, variable.1)
  .loc 3 815 5
  mov rdi, [rbp-32]
  mov rsi, rax
  mov [rbp-50], rax
  call add_variable_61
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] 
  # $52.1: Boolean = variable_value.13 == null
  .loc 3 816 9
  cmp QWORD PTR [rbp-40], 0
  sete al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $52.1:rax 
  # jump($52.1, block.25, block.26)
  test al, al
  jz .LABEL__convert_variable_statement_97__26
.LABEL__convert_variable_statement_97__25:
  # $53.1: @List = new(List)
  .loc 5 158 32
  mov rdi, 24
  call malloc
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $53.1:rax 
  # store_struct_member($53.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $53.1:rax 
  # store_struct_member($53.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $53.1:rax 
  # store_struct_member($53.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $53.1:rax 
  # $54.1: @IR_Undefined_Value = new(IR_Undefined_Value)
  .loc 3 817 26
  mov [rbp-58], rax
  mov rdi, 24
  call malloc
  lea rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $53.1:[rbp-58] $54.1:rax 
  # store_struct_member($54.1, type, variable_type.9)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:rbx:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $53.1:[rbp-58] $54.1:rax 
  # store_struct_member($54.1, user_instructions, $53.1)
  mov r15, [rbp-58]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:rbx:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] $54.1:rax 
  # variable_value.11: @IR_Value = $54.1
  .loc 3 817 9
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:rbx:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:rax:[rbp-40] 
  # jump(block.26)
  mov [rbp-40], rax
.LABEL__convert_variable_statement_97__26:
  # variable_value.12: @IR_Value = phi(variable_value.11, variable_value.13)
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] variable_value.12:[rbp-40] 
  # $55.1: @IR_Variable_Value = call(create_variable_value_64, self.1, variable.1)
  .loc 3 819 43
  mov rdi, [rbp-32]
  mov rsi, [rbp-50]
  call create_variable_value_64
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] variable_value.12:[rbp-40] $55.1:rax 
  # $56.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, $55.1, variable_value.12)
  .loc 3 819 17
  mov rdi, rax
  mov rsi, [rbp-40]
  call create_ir_set_instruction_179
  # [discarded value]: variable_value.12
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] $56.1:rax 
  # $57.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 3 819 98
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:rbx:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] $56.1:rax $57.1:r15 
  # $58.1: @IR_Variable_Value = call(append_71, self.1, $56.1, $57.1)
  .loc 3 819 5
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] 
  # return()
  jmp .LABEL__convert_variable_statement_97__end
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] variable_value.11:[rbp-40] 
  # [discarded value]: variable_value.11
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] variable.1:[rbp-50] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] 
.LABEL__convert_variable_statement_97__19:
  # IR_Undefined_Type.3: @Object_Type = load_variable(IR_Undefined_Type)
  lea rax, IR_Undefined_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] IR_Undefined_Type.3:rax $43.1:[rbp-42] 
  # $43.2: Boolean = call(is_293, variable_type.9, IR_Undefined_Type.3)
  .loc 3 811 79
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Undefined_Type.3
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.2:rax:[rbp-42] $43.1:[rbp-42] 
  # jump(block.20)
  mov [rbp-42], al
  jmp .LABEL__convert_variable_statement_97__20
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.2:[rbp-42] $43.1:[rbp-42] 
  # [discarded value]: $43.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $43.1:[rbp-42] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] 
.LABEL__convert_variable_statement_97__21:
  # IR_Nothing_Type.3: @Object_Type = load_variable(IR_Nothing_Type)
  lea rax, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] IR_Nothing_Type.3:rax 
  # $41.2: Boolean = call(is_293, variable_type.9, IR_Nothing_Type.3)
  .loc 3 811 42
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Nothing_Type.3
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $41.2:rax:[rbp-41] 
  # jump(block.22)
  mov [rbp-41], al
  jmp .LABEL__convert_variable_statement_97__22
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] $41.2:[rbp-41] 
  # [discarded value]: $41.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.9:[rbp-8] $41.1:[rbp-41] 
  # [discarded value]: variable_type.9
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
.LABEL__convert_variable_statement_97__8:
  # $12.1: Boolean = variable_value.13 == null
  .loc 3 803 13
  cmp QWORD PTR [rbp-40], 0
  sete al
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $12.1:rax 
  # jump($12.1, block.9, block.10)
  test al, al
  jz .LABEL__convert_variable_statement_97__10
.LABEL__convert_variable_statement_97__9:
  # $13.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 3 804 19
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $13.1:rbx 
  # call(abort_264, $13.1, "Invalid state")
  .loc 3 804 13
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "Invalid state"
  call abort_264
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
.LABEL__convert_variable_statement_97__10:
  # $14.1: @IR_Type = load_struct_member(variable_value.13, type)
  .loc 3 806 13
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rax:[rbp-40] $14.1:rbx 
  # IR_Null_Type.5: @Object_Type = load_variable(IR_Null_Type)
  lea r15, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rax:[rbp-40] $14.1:rbx IR_Null_Type.5:r15 
  # $15.1: Boolean = call(is_293, $14.1, IR_Null_Type.5)
  .loc 3 806 13
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $14.1
  # [discarded value]: IR_Null_Type.5
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $15.1:rax 
  # jump($15.1, block.11, block.12)
  test al, al
  jz .LABEL__convert_variable_statement_97__12
.LABEL__convert_variable_statement_97__11:
  # $16.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 3 807 19
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $16.1:rbx 
  # $17.1: @Source_Location = load_struct_member($16.1, location)
  .loc 3 807 19
  mov r15, [rbx+8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] variable_statement.1:rax:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] $17.1:r15 
  # call(abort_264, $17.1, "Cannot infer type from null value")
  .loc 3 807 13
  mov rdi, r15
  lea rsi, .LABEL__string_195[rip] # "Cannot infer type from null value"
  call abort_264
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
.LABEL__convert_variable_statement_97__12:
  # variable_type.5: @IR_Type = load_struct_member(variable_value.13, type)
  .loc 3 809 25
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:rax:[rbp-40] variable_type.5:rbx:[rbp-8] 
  # jump(block.7)
  mov [rbp-8], rbx
  jmp .LABEL__convert_variable_statement_97__7
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] variable_type.5:[rbp-8] 
  # [discarded value]: variable_type.5
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] variable_value.13:[rbp-40] 
  # [discarded value]: variable_value.13
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] variable_value.2:[rbp-40] 
  # [discarded value]: variable_value.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] variable_type.15:[rbp-8] variable_value.1:[rbp-40] 
  # [discarded value]: variable_type.15
  # [discarded value]: variable_value.1
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] variable_type.2:[rbp-8] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] variable_statement.1:[rbp-24] variable_name.1:[rbp-16] variable_type.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: variable_statement.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable_type.1
  # [live values]: 
.LABEL__convert_variable_statement_97__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_statement_97__stack_frame_size: .word 64

  .loc 3 822 1
  .text
convert_while_statement_98:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_while_statement_98__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_while_statement_98__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_While_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 823 24
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 3 823 24
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # condition_block.1: @IR_Block = call(create_block_157, $2.1)
  .loc 3 823 24
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_157
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 824 19
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $4.1:r15 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 3 824 19
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $5.1:r14 
  # loop_block.1: @IR_Block = call(create_block_157, $5.1)
  .loc 3 824 19
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_157
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax 
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 825 18
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $7.1:r15 
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  .loc 3 825 18
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $8.1:r14 
  # end_block.1: @IR_Block = call(create_block_157, $8.1)
  .loc 3 825 18
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_157
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax 
  # $10.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 826 5
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax $10.1:r15 
  # $11.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $10.1, condition_block.1)
  .loc 3 826 5
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-40], rax
  call append_jump_154
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  # store_struct_member(self.1, current_block, condition_block.1)
  .loc 3 827 5
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  # $12.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 3 828 48
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] statement.1:r15:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:r14 
  # $13.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 828 80
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-48], r14
  call get_named_type_60
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:[rbp-48] $13.1:rax 
  # condition_value.1: @IR_Value = call(convert_expression_99, self.1, $12.1, $13.1)
  .loc 3 828 24
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax 
  # $15.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 829 5
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax $15.1:r15 
  # $16.1: @IR_Conditional_Jump_Instruction = call(append_jump_155, $15.1, condition_value.1, loop_block.1, end_block.1)
  .loc 3 829 5
  mov rdi, r15
  mov rsi, rax
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call append_jump_155
  # [discarded value]: condition_value.1
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  # store_struct_member(self.1, current_block, loop_block.1)
  .loc 3 830 5
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: loop_block.1
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  # $17.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 3 831 46
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:rbx 
  # $18.1: @IR_Loop = new(IR_Loop)
  .loc 3 831 25
  mov [rbp-48], rbx
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:[rbp-48] $18.1:rax 
  # store_struct_member($18.1, parent, $17.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $18.1:rax 
  # store_struct_member($18.1, end_block, end_block.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:rbx:[rbp-40] $18.1:rax 
  # store_struct_member(self.1, current_loop, $18.1)
  .loc 3 831 5
  mov r15, [rbp-8]
  mov QWORD PTR [r15+40], rax
  # [discarded value]: $18.1
  # [live values]: self.1:r15:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:rbx:[rbp-40] 
  # $19.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 3 832 34
  mov rax, [rbp-16]
  mov r14, [rax+24]
  # [discarded value]: statement.1
  # [live values]: self.1:r15:[rbp-8] condition_block.1:[rbp-24] end_block.1:rbx:[rbp-40] $19.1:r14 
  # call(convert_block_statement_91, self.1, $19.1)
  .loc 3 832 5
  mov rdi, r15
  mov rsi, r14
  call convert_block_statement_91
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 833 5
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] $20.1:rbx 
  # $21.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $20.1, condition_block.1)
  .loc 3 833 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_154
  # [discarded value]: condition_block.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-40] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 3 834 5
  mov rax, [rbp-8]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  # $22.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 3 835 25
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $22.1:rbx 
  # $23.1: @IR_Loop = load_struct_member($22.1, parent)
  .loc 3 835 25
  mov r15, [rbx+0]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] $23.1:r15 
  # store_struct_member(self.1, current_loop, $23.1)
  .loc 3 835 5
  mov QWORD PTR [rax+40], r15
  # [discarded value]: self.1
  # [discarded value]: $23.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_while_statement_98__end
  # [live values]: 
.LABEL__convert_while_statement_98__end:
  mov rsp, rbp
  pop rbp
  ret

convert_while_statement_98__stack_frame_size: .word 48

  .loc 3 838 1
  .text
convert_expression_99:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_99__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_99__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  # AST_Add_Expression.2: @Object_Type = load_variable(AST_Add_Expression)
  lea rax, AST_Add_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx AST_Add_Expression.2:rax 
  # $1.1: Boolean = call(is_293, expression.1, AST_Add_Expression.2)
  .loc 3 840 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_293
  # [discarded value]: AST_Add_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:rax 
  # jump($1.1, block.2, block.4)
  test al, al
  jz .LABEL__convert_expression_99__4
.LABEL__convert_expression_99__2:
  # $68.1: @AST_Add_Expression = expression.1
  .loc 3 841 45
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $68.1:rax 
  # value.23: @IR_Value = call(convert_add_expression_101, self.1, $68.1)
  .loc 3 841 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_add_expression_101
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:rax 
  # jump(block.3)
  mov [rbp-32], rax
.LABEL__convert_expression_99__3:
  # value.26: @IR_Value = phi(value.23, value.22, value.21, value.20, value.19, value.18, value.17, value.16, value.15, value.14, value.13, value.12, value.11, value.10, value.9, value.8, value.7, value.6, value.5, value.4, value.3, value.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] 
  # $71.1: Boolean = expected_type.1 != null
  .loc 3 887 9
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:rax 
  # jump($71.1, block.68, block.69)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_expression_99__69
.LABEL__convert_expression_99__68:
  # $72.1: @IR_Type = load_struct_member(value.26, type)
  .loc 3 887 56
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:rax:[rbp-32] $71.1:[rbp-33] $72.1:rbx 
  # $73.1: Boolean = call(accepts_68, expected_type.1, $72.1)
  .loc 3 887 34
  mov rdi, [rbp-24]
  mov rsi, rbx
  call accepts_68
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $73.1:rax 
  # $71.2: Boolean = $73.1 == false
  .loc 3 887 34
  cmp al, 0
  sete bl
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:rbx:[rbp-33] 
  # jump(block.69)
  mov [rbp-33], bl
.LABEL__convert_expression_99__69:
  # $71.3: Boolean = phi($71.1, $71.2)
  .loc 3 887 9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] $71.3:[rbp-33] 
  # jump($71.3, block.70, block.71)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_expression_99__71
.LABEL__convert_expression_99__70:
  # $75.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 888 15
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $71.3
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] $75.1:rbx 
  # $76.1: @String = call(clone_295, "Not an \"")
  .loc 3 888 36
  lea rdi, .LABEL__string_196[rip] # "Not an \""
  mov [rbp-41], rbx
  call clone_295
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] $75.1:[rbp-41] $76.1:rax 
  # $77.1: @String = load_struct_member(expected_type.1, name)
  .loc 3 888 62
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:rbx:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] $75.1:[rbp-41] $76.1:rax $77.1:r15 
  # $78.1: @String = call(append_304, $76.1, $77.1)
  .loc 3 888 36
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $76.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] $75.1:[rbp-41] $78.1:rax 
  # $79.1: @String = call(append_304, $78.1, "\" expression")
  .loc 3 888 36
  mov rdi, rax
  lea rsi, .LABEL__string_197[rip] # "\" expression"
  call append_304
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] $75.1:[rbp-41] $79.1:rax 
  # call(abort_264, $75.1, $79.1)
  .loc 3 888 9
  mov rdi, [rbp-41]
  mov rsi, rax
  call abort_264
  # [discarded value]: $75.1
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] 
.LABEL__convert_expression_99__71:
  # return(value.26)
  .loc 3 890 5
  mov rax, [rbp-32]
  jmp .LABEL__convert_expression_99__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] $71.2:[rbp-33] 
  # [discarded value]: $71.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] value.26:[rbp-32] $71.1:[rbp-33] 
  # [discarded value]: value.26
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.23:[rbp-32] 
  # [discarded value]: value.23
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__4:
  # AST_Array_Access_Expression.3: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rax, AST_Array_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Array_Access_Expression.3:rax 
  # $2.1: Boolean = call(is_293, expression.1, AST_Array_Access_Expression.3)
  .loc 3 842 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Array_Access_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, block.5, block.7)
  test al, al
  jz .LABEL__convert_expression_99__7
.LABEL__convert_expression_99__5:
  # $66.1: @AST_Array_Access_Expression = expression.1
  .loc 3 843 54
  mov rax, [rbp-16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $66.1:rax 
  # value.22: @IR_Value = call(convert_array_access_expression_102, self.1, $66.1)
  .loc 3 843 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_access_expression_102
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.22:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.22:[rbp-32] 
  # [discarded value]: value.22
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__7:
  # AST_Atomic_Expression.2: @Object_Type = load_variable(AST_Atomic_Expression)
  lea rax, AST_Atomic_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Atomic_Expression.2:rax 
  # $3.1: Boolean = call(is_293, expression.1, AST_Atomic_Expression.2)
  .loc 3 844 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Atomic_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.8, block.10)
  test al, al
  jz .LABEL__convert_expression_99__10
.LABEL__convert_expression_99__8:
  # $63.1: @AST_Atomic_Expression = expression.1
  .loc 3 845 42
  mov rax, [rbp-16]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $63.1:rax 
  # $64.1: @AST_Expression = load_struct_member($63.1, expression)
  .loc 3 845 41
  mov rbx, [rax+16]
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $64.1:rbx 
  # value.21: @IR_Value = call(convert_expression_99, self.1, $64.1, expected_type.1)
  .loc 3 845 17
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call convert_expression_99
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.21:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.21:[rbp-32] 
  # [discarded value]: value.21
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__10:
  # AST_Call_Expression.2: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Call_Expression.2:rax 
  # $4.1: Boolean = call(is_293, expression.1, AST_Call_Expression.2)
  .loc 3 846 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Call_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.11, block.13)
  test al, al
  jz .LABEL__convert_expression_99__13
.LABEL__convert_expression_99__11:
  # $61.1: @AST_Call_Expression = expression.1
  .loc 3 847 46
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $61.1:rax 
  # value.20: @IR_Value = call(convert_call_expression_103, self.1, $61.1)
  .loc 3 847 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_call_expression_103
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.20:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.20:[rbp-32] 
  # [discarded value]: value.20
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__13:
  # AST_Cast_Expression.2: @Object_Type = load_variable(AST_Cast_Expression)
  lea rax, AST_Cast_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Cast_Expression.2:rax 
  # $5.1: Boolean = call(is_293, expression.1, AST_Cast_Expression.2)
  .loc 3 848 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Cast_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.14, block.16)
  test al, al
  jz .LABEL__convert_expression_99__16
.LABEL__convert_expression_99__14:
  # $59.1: @AST_Cast_Expression = expression.1
  .loc 3 849 46
  mov rax, [rbp-16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $59.1:rax 
  # value.19: @IR_Value = call(convert_cast_expression_108, self.1, $59.1)
  .loc 3 849 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_cast_expression_108
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.19:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.19:[rbp-32] 
  # [discarded value]: value.19
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__16:
  # AST_Divide_Expression.2: @Object_Type = load_variable(AST_Divide_Expression)
  lea rax, AST_Divide_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Divide_Expression.2:rax 
  # $6.1: Boolean = call(is_293, expression.1, AST_Divide_Expression.2)
  .loc 3 850 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Divide_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $6.1:rax 
  # jump($6.1, block.17, block.19)
  test al, al
  jz .LABEL__convert_expression_99__19
.LABEL__convert_expression_99__17:
  # $57.1: @AST_Divide_Expression = expression.1
  .loc 3 851 48
  mov rax, [rbp-16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $57.1:rax 
  # value.18: @IR_Value = call(convert_divide_expression_109, self.1, $57.1)
  .loc 3 851 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_divide_expression_109
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.18:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.18:[rbp-32] 
  # [discarded value]: value.18
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__19:
  # AST_Equals_Expression.2: @Object_Type = load_variable(AST_Equals_Expression)
  lea rax, AST_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Equals_Expression.2:rax 
  # $7.1: Boolean = call(is_293, expression.1, AST_Equals_Expression.2)
  .loc 3 852 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $7.1:rax 
  # jump($7.1, block.20, block.22)
  test al, al
  jz .LABEL__convert_expression_99__22
.LABEL__convert_expression_99__20:
  # $55.1: @AST_Equals_Expression = expression.1
  .loc 3 853 48
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $55.1:rax 
  # value.17: @IR_Value = call(convert_equals_expression_110, self.1, $55.1)
  .loc 3 853 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_equals_expression_110
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.17:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.17:[rbp-32] 
  # [discarded value]: value.17
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__22:
  # AST_Greater_Than_Expression.2: @Object_Type = load_variable(AST_Greater_Than_Expression)
  lea rax, AST_Greater_Than_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Greater_Than_Expression.2:rax 
  # $8.1: Boolean = call(is_293, expression.1, AST_Greater_Than_Expression.2)
  .loc 3 854 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Greater_Than_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $8.1:rax 
  # jump($8.1, block.23, block.25)
  test al, al
  jz .LABEL__convert_expression_99__25
.LABEL__convert_expression_99__23:
  # $53.1: @AST_Greater_Than_Expression = expression.1
  .loc 3 855 54
  mov rax, [rbp-16]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $53.1:rax 
  # value.16: @IR_Value = call(convert_greater_than_expression_111, self.1, $53.1)
  .loc 3 855 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_expression_111
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.16:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.16:[rbp-32] 
  # [discarded value]: value.16
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__25:
  # AST_Greater_Than_Or_Equals_Expression.2: @Object_Type = load_variable(AST_Greater_Than_Or_Equals_Expression)
  lea rax, AST_Greater_Than_Or_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Greater_Than_Or_Equals_Expression.2:rax 
  # $9.1: Boolean = call(is_293, expression.1, AST_Greater_Than_Or_Equals_Expression.2)
  .loc 3 856 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Greater_Than_Or_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $9.1:rax 
  # jump($9.1, block.26, block.28)
  test al, al
  jz .LABEL__convert_expression_99__28
.LABEL__convert_expression_99__26:
  # $51.1: @AST_Greater_Than_Or_Equals_Expression = expression.1
  .loc 3 857 64
  mov rax, [rbp-16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $51.1:rax 
  # value.15: @IR_Value = call(convert_greater_than_or_equals_expression_112, self.1, $51.1)
  .loc 3 857 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_or_equals_expression_112
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.15:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.15:[rbp-32] 
  # [discarded value]: value.15
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__28:
  # AST_Less_Than_Expression.2: @Object_Type = load_variable(AST_Less_Than_Expression)
  lea rax, AST_Less_Than_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Less_Than_Expression.2:rax 
  # $10.1: Boolean = call(is_293, expression.1, AST_Less_Than_Expression.2)
  .loc 3 858 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Less_Than_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $10.1:rax 
  # jump($10.1, block.29, block.31)
  test al, al
  jz .LABEL__convert_expression_99__31
.LABEL__convert_expression_99__29:
  # $49.1: @AST_Less_Than_Expression = expression.1
  .loc 3 859 51
  mov rax, [rbp-16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $49.1:rax 
  # value.14: @IR_Value = call(convert_less_than_expression_113, self.1, $49.1)
  .loc 3 859 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_expression_113
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.14:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.14:[rbp-32] 
  # [discarded value]: value.14
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__31:
  # AST_Less_Than_Or_Equals_Expression.2: @Object_Type = load_variable(AST_Less_Than_Or_Equals_Expression)
  lea rax, AST_Less_Than_Or_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Less_Than_Or_Equals_Expression.2:rax 
  # $11.1: Boolean = call(is_293, expression.1, AST_Less_Than_Or_Equals_Expression.2)
  .loc 3 860 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Less_Than_Or_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.32, block.34)
  test al, al
  jz .LABEL__convert_expression_99__34
.LABEL__convert_expression_99__32:
  # $47.1: @AST_Less_Than_Or_Equals_Expression = expression.1
  .loc 3 861 61
  mov rax, [rbp-16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $47.1:rax 
  # value.13: @IR_Value = call(convert_less_than_or_equals_expression_114, self.1, $47.1)
  .loc 3 861 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_or_equals_expression_114
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.13:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.13:[rbp-32] 
  # [discarded value]: value.13
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__34:
  # AST_Literal_Expression.2: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Literal_Expression.2:rax 
  # $12.1: Boolean = call(is_293, expression.1, AST_Literal_Expression.2)
  .loc 3 862 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Literal_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $12.1:rax 
  # jump($12.1, block.35, block.37)
  test al, al
  jz .LABEL__convert_expression_99__37
.LABEL__convert_expression_99__35:
  # $45.1: @AST_Literal_Expression = expression.1
  .loc 3 863 49
  mov rax, [rbp-16]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $45.1:rax 
  # value.12: @IR_Value = call(convert_literal_expression_115, self.1, $45.1)
  .loc 3 863 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_literal_expression_115
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.12:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.12:[rbp-32] 
  # [discarded value]: value.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__37:
  # AST_Logic_And_Expression.2: @Object_Type = load_variable(AST_Logic_And_Expression)
  lea rax, AST_Logic_And_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Logic_And_Expression.2:rax 
  # $13.1: Boolean = call(is_293, expression.1, AST_Logic_And_Expression.2)
  .loc 3 864 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Logic_And_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $13.1:rax 
  # jump($13.1, block.38, block.40)
  test al, al
  jz .LABEL__convert_expression_99__40
.LABEL__convert_expression_99__38:
  # $43.1: @AST_Logic_And_Expression = expression.1
  .loc 3 865 51
  mov rax, [rbp-16]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $43.1:rax 
  # value.11: @IR_Value = call(convert_logic_and_expression_116, self.1, $43.1)
  .loc 3 865 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_and_expression_116
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.11:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.11:[rbp-32] 
  # [discarded value]: value.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__40:
  # AST_Logic_Or_Expression.2: @Object_Type = load_variable(AST_Logic_Or_Expression)
  lea rax, AST_Logic_Or_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Logic_Or_Expression.2:rax 
  # $14.1: Boolean = call(is_293, expression.1, AST_Logic_Or_Expression.2)
  .loc 3 866 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Logic_Or_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $14.1:rax 
  # jump($14.1, block.41, block.43)
  test al, al
  jz .LABEL__convert_expression_99__43
.LABEL__convert_expression_99__41:
  # $41.1: @AST_Logic_Or_Expression = expression.1
  .loc 3 867 50
  mov rax, [rbp-16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $41.1:rax 
  # value.10: @IR_Value = call(convert_logic_or_expression_117, self.1, $41.1)
  .loc 3 867 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_or_expression_117
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.10:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.10:[rbp-32] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__43:
  # AST_Member_Access_Expression.3: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Member_Access_Expression.3:rax 
  # $15.1: Boolean = call(is_293, expression.1, AST_Member_Access_Expression.3)
  .loc 3 868 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Member_Access_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $15.1:rax 
  # jump($15.1, block.44, block.46)
  test al, al
  jz .LABEL__convert_expression_99__46
.LABEL__convert_expression_99__44:
  # $39.1: @AST_Member_Access_Expression = expression.1
  .loc 3 869 55
  mov rax, [rbp-16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $39.1:rax 
  # value.9: @IR_Value = call(convert_member_access_expression_118, self.1, $39.1)
  .loc 3 869 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_118
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.9:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.9:[rbp-32] 
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__46:
  # AST_Modulo_Expression.2: @Object_Type = load_variable(AST_Modulo_Expression)
  lea rax, AST_Modulo_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Modulo_Expression.2:rax 
  # $16.1: Boolean = call(is_293, expression.1, AST_Modulo_Expression.2)
  .loc 3 870 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Modulo_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $16.1:rax 
  # jump($16.1, block.47, block.49)
  test al, al
  jz .LABEL__convert_expression_99__49
.LABEL__convert_expression_99__47:
  # $37.1: @AST_Modulo_Expression = expression.1
  .loc 3 871 48
  mov rax, [rbp-16]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $37.1:rax 
  # value.8: @IR_Value = call(convert_modulo_expression_121, self.1, $37.1)
  .loc 3 871 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_modulo_expression_121
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.8:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.8:[rbp-32] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__49:
  # AST_Multiply_Expression.2: @Object_Type = load_variable(AST_Multiply_Expression)
  lea rax, AST_Multiply_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Multiply_Expression.2:rax 
  # $17.1: Boolean = call(is_293, expression.1, AST_Multiply_Expression.2)
  .loc 3 872 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Multiply_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $17.1:rax 
  # jump($17.1, block.50, block.52)
  test al, al
  jz .LABEL__convert_expression_99__52
.LABEL__convert_expression_99__50:
  # $35.1: @AST_Multiply_Expression = expression.1
  .loc 3 873 50
  mov rax, [rbp-16]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $35.1:rax 
  # value.7: @IR_Value = call(convert_multiply_expression_122, self.1, $35.1)
  .loc 3 873 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_multiply_expression_122
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.7:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.7:[rbp-32] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__52:
  # AST_Negate_Expression.2: @Object_Type = load_variable(AST_Negate_Expression)
  lea rax, AST_Negate_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Negate_Expression.2:rax 
  # $18.1: Boolean = call(is_293, expression.1, AST_Negate_Expression.2)
  .loc 3 874 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Negate_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $18.1:rax 
  # jump($18.1, block.53, block.55)
  test al, al
  jz .LABEL__convert_expression_99__55
.LABEL__convert_expression_99__53:
  # $33.1: @AST_Negate_Expression = expression.1
  .loc 3 875 48
  mov rax, [rbp-16]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $33.1:rax 
  # value.6: @IR_Value = call(convert_negate_expression_123, self.1, $33.1)
  .loc 3 875 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_negate_expression_123
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.6:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.6:[rbp-32] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__55:
  # AST_New_Expression.2: @Object_Type = load_variable(AST_New_Expression)
  lea rax, AST_New_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_New_Expression.2:rax 
  # $19.1: Boolean = call(is_293, expression.1, AST_New_Expression.2)
  .loc 3 876 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_New_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $19.1:rax 
  # jump($19.1, block.56, block.58)
  test al, al
  jz .LABEL__convert_expression_99__58
.LABEL__convert_expression_99__56:
  # $31.1: @AST_New_Expression = expression.1
  .loc 3 877 45
  mov rax, [rbp-16]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $31.1:rax 
  # value.5: @IR_Value = call(convert_new_expression_124, self.1, $31.1)
  .loc 3 877 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_new_expression_124
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.5:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.5:[rbp-32] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__58:
  # AST_Not_Equals_Expression.2: @Object_Type = load_variable(AST_Not_Equals_Expression)
  lea rax, AST_Not_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Not_Equals_Expression.2:rax 
  # $20.1: Boolean = call(is_293, expression.1, AST_Not_Equals_Expression.2)
  .loc 3 878 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Not_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $20.1:rax 
  # jump($20.1, block.59, block.61)
  test al, al
  jz .LABEL__convert_expression_99__61
.LABEL__convert_expression_99__59:
  # $29.1: @AST_Not_Equals_Expression = expression.1
  .loc 3 879 52
  mov rax, [rbp-16]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $29.1:rax 
  # value.4: @IR_Value = call(convert_not_equals_expression_129, self.1, $29.1)
  .loc 3 879 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_not_equals_expression_129
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.4:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.4:[rbp-32] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__61:
  # AST_Substract_Expression.2: @Object_Type = load_variable(AST_Substract_Expression)
  lea rax, AST_Substract_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Substract_Expression.2:rax 
  # $21.1: Boolean = call(is_293, expression.1, AST_Substract_Expression.2)
  .loc 3 880 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Substract_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $21.1:rax 
  # jump($21.1, block.62, block.64)
  test al, al
  jz .LABEL__convert_expression_99__64
.LABEL__convert_expression_99__62:
  # $27.1: @AST_Substract_Expression = expression.1
  .loc 3 881 51
  mov rax, [rbp-16]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $27.1:rax 
  # value.3: @IR_Value = call(convert_substract_expression_130, self.1, $27.1)
  .loc 3 881 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_substract_expression_130
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.3:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.3:[rbp-32] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__64:
  # AST_Variable_Expression.3: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] AST_Variable_Expression.3:rax 
  # $22.1: Boolean = call(is_293, expression.1, AST_Variable_Expression.3)
  .loc 3 882 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $22.1:rax 
  # jump($22.1, block.65, block.67)
  test al, al
  jz .LABEL__convert_expression_99__67
.LABEL__convert_expression_99__65:
  # $25.1: @AST_Variable_Expression = expression.1
  .loc 3 883 50
  mov rax, [rbp-16]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $25.1:rax 
  # value.2: @IR_Value = call(convert_variable_expression_131, self.1, $25.1, expected_type.1)
  .loc 3 883 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  call convert_variable_expression_131
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.2:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_expression_99__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] value.2:[rbp-32] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
.LABEL__convert_expression_99__67:
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 885 15
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $23.1:rbx 
  # $24.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 3 885 36
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $23.1:rbx $24.1:r15 
  # call(abort_138, $23.1, $24.1)
  .loc 3 885 9
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: expected_type.1
  # [live values]: 
.LABEL__convert_expression_99__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_99__stack_frame_size: .word 48

  .loc 3 893 1
  .text
convert_expression_address_100:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_address_100__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_address_100__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Member_Access_Expression.4: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Member_Access_Expression.4:rax 
  # $1.1: Boolean = call(is_293, expression.1, AST_Member_Access_Expression.4)
  .loc 3 894 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Member_Access_Expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_expression_address_100__3
.LABEL__convert_expression_address_100__2:
  # $2.1: @AST_Member_Access_Expression = expression.1
  .loc 3 895 62
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Value = call(convert_member_access_expression_address_120, self.1, $2.1)
  .loc 3 895 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_address_120
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 3 895 9
  jmp .LABEL__convert_expression_address_100__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_address_100__3:
  # AST_Variable_Expression.4: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.4:rax 
  # $4.1: Boolean = call(is_293, expression.1, AST_Variable_Expression.4)
  .loc 3 897 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_expression_address_100__6
.LABEL__convert_expression_address_100__5:
  # $5.1: @AST_Variable_Expression = expression.1
  .loc 3 898 57
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Value = call(convert_variable_expression_address_132, self.1, $5.1)
  .loc 3 898 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_variable_expression_address_132
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 3 898 9
  jmp .LABEL__convert_expression_address_100__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_address_100__6:
  # $7.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 900 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $7.1:rbx 
  # $8.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 3 900 32
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $7.1:rbx $8.1:r15 
  # call(abort_138, $7.1, $8.1)
  .loc 3 900 5
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_expression_address_100__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_address_100__stack_frame_size: .word 16

  .loc 3 903 1
  .text
convert_add_expression_101:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_add_expression_101__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_add_expression_101__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Add_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 904 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 904 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 904 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 905 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 905 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 905 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.11: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.11:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.11)
  .loc 3 906 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.11
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_add_expression_101__3
.LABEL__convert_add_expression_101__2:
  # IR_Constant_Value.12: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.12:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.12)
  .loc 3 906 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.12
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_add_expression_101__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 906 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_add_expression_101__5
.LABEL__convert_add_expression_101__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 907 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 907 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_add_expression_101__5:
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 909 85
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rbx 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 909 62
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Add_Instruction = new(IR_Add_Instruction)
  .loc 3 909 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Add_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 909 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 909 134
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 909 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 909 5
  jmp .LABEL__convert_add_expression_101__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_add_expression_101__end:
  mov rsp, rbp
  pop rbp
  ret

convert_add_expression_101__stack_frame_size: .word 64

  .loc 3 912 1
  .text
convert_array_access_expression_102:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_access_expression_102__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_access_expression_102__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # array_access_expression.1: @AST_Array_Access_Expression = load_variable(array_access_expression)
  # [live values]: self.1:rdi array_access_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  .loc 3 913 44
  mov rax, [rsi+24]
  # [live values]: self.1:rdi array_access_expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 913 86
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # index_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 913 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  .loc 3 914 45
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:rax $4.1:r15 
  # object_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, null)
  .loc 3 914 21
  mov rdi, [rbp-24]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-32], rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax 
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  .loc 3 915 26
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax object_value_type.1:rbx 
  # IR_Pointer_Type.12: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax object_value_type.1:rbx IR_Pointer_Type.12:r15 
  # $7.1: Boolean = call(is_293, object_value_type.1, IR_Pointer_Type.12)
  .loc 3 916 10
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  mov [rbp-48], rbx
  call is_293
  # [discarded value]: IR_Pointer_Type.12
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:rax 
  # $8.1: Boolean = $7.1 == false
  .loc 3 916 9
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:rbx 
  # jump($8.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_array_access_expression_102__3
.LABEL__convert_array_access_expression_102__2:
  # $9.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  .loc 3 917 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:rax:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $9.1:rbx 
  # $10.1: @String = call(clone_295, "Not an IR_Pointer_Type value: ")
  .loc 3 917 49
  lea rdi, .LABEL__string_199[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-56], rbx
  call clone_295
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $9.1:[rbp-56] $10.1:rax 
  # $11.1: @String = load_struct_member(object_value_type.1, name)
  .loc 3 917 96
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:rbx:[rbp-48] $9.1:[rbp-56] $10.1:rax $11.1:r15 
  # $12.1: @String = call(append_304, $10.1, $11.1)
  .loc 3 917 49
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $9.1:[rbp-56] $12.1:rax 
  # call(abort_264, $9.1, $12.1)
  .loc 3 917 9
  mov rdi, [rbp-56]
  mov rsi, rax
  call abort_264
  # [discarded value]: $9.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] 
.LABEL__convert_array_access_expression_102__3:
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  .loc 3 919 26
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] object_value_type.1:rax 
  # $14.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  .loc 3 920 85
  mov rbx, [rax+16]
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $14.1:rbx 
  # $15.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $14.1)
  .loc 3 920 62
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $15.1:rax 
  # $16.1: @IR_Load_Array_Item_Instruction = call(create_ir_load_array_item_instruction_168, $15.1, object_value.1, index_value.1)
  .loc 3 920 24
  mov rdi, rax
  mov rsi, [rbp-40]
  mov rdx, [rbp-32]
  call create_ir_load_array_item_instruction_168
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $16.1:rax 
  # $17.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  .loc 3 920 146
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $16.1:rax $17.1:r15 
  # $18.1: @IR_Variable_Value = call(append_71, self.1, $16.1, $17.1)
  .loc 3 920 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $18.1:rax 
  # return($18.1)
  .loc 3 920 5
  jmp .LABEL__convert_array_access_expression_102__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] 
  # [discarded value]: self.1
  # [discarded value]: array_access_expression.1
  # [discarded value]: index_value.1
  # [discarded value]: object_value.1
  # [discarded value]: object_value_type.1
  # [live values]: 
.LABEL__convert_array_access_expression_102__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_access_expression_102__stack_frame_size: .word 64

  .loc 3 923 1
  .text
convert_call_expression_103:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_expression_103__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_expression_103__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 924 9
  mov rax, [rsi+16]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax 
  # AST_Atomic_Expression.3: @Object_Type = load_variable(AST_Atomic_Expression)
  lea rbx, AST_Atomic_Expression[rip]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax AST_Atomic_Expression.3:rbx 
  # $2.1: Boolean = call(is_293, $1.1, AST_Atomic_Expression.3)
  .loc 3 924 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_293
  # [discarded value]: $1.1
  # [discarded value]: AST_Atomic_Expression.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_call_expression_103__3
.LABEL__convert_call_expression_103__2:
  # $3.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 925 49
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $3.1:rbx 
  # callee_value.1: @IR_Value = call(convert_expression_99, self.1, $3.1, null)
  .loc 3 925 25
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  call convert_expression_99
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(callee_value.1, type)
  .loc 3 926 13
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:rax $5.1:rbx 
  # IR_Function_Type.6: @Object_Type = load_variable(IR_Function_Type)
  lea r15, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:rax $5.1:rbx IR_Function_Type.6:r15 
  # $6.1: Boolean = call(is_293, $5.1, IR_Function_Type.6)
  .loc 3 926 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call is_293
  # [discarded value]: $5.1
  # [discarded value]: IR_Function_Type.6
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 3 926 13
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] $7.1:rbx 
  # jump($7.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_call_expression_103__5
.LABEL__convert_call_expression_103__4:
  # $8.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 927 19
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] callee_value.1:[rbp-24] $8.1:rbx 
  # $9.1: @String = call(clone_295, "Values of type ")
  .loc 3 927 45
  lea rdi, .LABEL__string_200[rip] # "Values of type "
  mov [rbp-32], rbx
  call clone_295
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # $10.1: @IR_Type = load_struct_member(callee_value.1, type)
  .loc 3 927 77
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:rbx:[rbp-24] $8.1:[rbp-32] $9.1:rax $10.1:r15 
  # $11.1: @String = load_struct_member($10.1, name)
  .loc 3 927 77
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:rbx:[rbp-24] $8.1:[rbp-32] $9.1:rax $11.1:r14 
  # $12.1: @String = call(append_304, $9.1, $11.1)
  .loc 3 927 45
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] $8.1:[rbp-32] $12.1:rax 
  # $13.1: @String = call(append_304, $12.1, " are not callable")
  .loc 3 927 45
  mov rdi, rax
  lea rsi, .LABEL__string_201[rip] # " are not callable"
  call append_304
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] $8.1:[rbp-32] $13.1:rax 
  # call(abort_264, $8.1, $13.1)
  .loc 3 927 13
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_264
  # [discarded value]: $8.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] 
.LABEL__convert_call_expression_103__5:
  # $14.1: @IR_Value = call(convert_dynamic_call_expression_105, self.1, call_expression.1, callee_value.1, null)
  .loc 3 929 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  xor rcx, rcx
  call convert_dynamic_call_expression_105
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] $14.1:rax 
  # return($14.1)
  .loc 3 929 9
  jmp .LABEL__convert_call_expression_103__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee_value.1:[rbp-24] 
  # [discarded value]: callee_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
.LABEL__convert_call_expression_103__3:
  # $15.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 931 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $15.1:rbx 
  # AST_Member_Access_Expression.5: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea r15, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $15.1:rbx AST_Member_Access_Expression.5:r15 
  # $16.1: Boolean = call(is_293, $15.1, AST_Member_Access_Expression.5)
  .loc 3 931 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $15.1
  # [discarded value]: AST_Member_Access_Expression.5
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $16.1:rax 
  # jump($16.1, block.7, block.8)
  test al, al
  jz .LABEL__convert_call_expression_103__8
.LABEL__convert_call_expression_103__7:
  # callee.1: @AST_Member_Access_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 932 19
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] callee.1:rbx 
  # $19.1: @AST_Expression = load_struct_member(callee.1, object_expression)
  .loc 3 933 49
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] callee.1:rbx $19.1:r15 
  # callee_value.1: @IR_Value = call(convert_expression_99, self.1, $19.1, null)
  .loc 3 933 25
  mov rdi, [rbp-8]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rbx
  call convert_expression_99
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:rax 
  # callee_value_type.1: @IR_Type = load_struct_member(callee_value.1, type)
  .loc 3 934 30
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:rax callee_value_type.1:rbx 
  # IR_Pointer_Type.13: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:rax callee_value_type.1:rbx IR_Pointer_Type.13:r15 
  # $22.1: Boolean = call(is_293, callee_value_type.1, IR_Pointer_Type.13)
  .loc 3 935 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call is_293
  # [discarded value]: IR_Pointer_Type.13
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] $22.1:rax 
  # jump($22.1, block.9, block.10)
  test al, al
  jz .LABEL__convert_call_expression_103__10
.LABEL__convert_call_expression_103__9:
  # callee_value_type.1: @IR_Pointer_Type = callee_value_type.1
  .loc 3 936 34
  mov rax, [rbp-40]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:rax 
  # $24.1: @IR_Type = load_struct_member(callee_value_type.1, pointed_type)
  .loc 3 937 17
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:rax $24.1:rbx 
  # IR_Struct_Type.11: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:rax $24.1:rbx IR_Struct_Type.11:r15 
  # $25.1: Boolean = call(is_293, $24.1, IR_Struct_Type.11)
  .loc 3 937 17
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-48], rax
  call is_293
  # [discarded value]: $24.1
  # [discarded value]: IR_Struct_Type.11
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] $25.1:rax 
  # jump($25.1, block.11, block.10)
  test al, al
  jz .LABEL__convert_call_expression_103__10
.LABEL__convert_call_expression_103__11:
  # $27.1: @IR_Struct_Type = load_struct_member(callee_value_type.1, pointed_type)
  .loc 3 938 40
  mov rax, [rbp-48]
  mov rbx, [rax+16]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:rax:[rbp-48] $27.1:rbx 
  # $28.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 3 938 102
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:r15:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:rax:[rbp-48] $27.1:rbx $28.1:r14 
  # $29.1: @String = load_struct_member($28.1, lexeme)
  .loc 3 938 102
  mov r13, [r14+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:r15:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:rax:[rbp-48] $27.1:rbx $29.1:r13 
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_147, $27.1, $29.1)
  .loc 3 938 39
  mov rdi, rbx
  mov rsi, r13
  call get_member_147
  # [discarded value]: $27.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:rax 
  # $32.1: Boolean = struct_type_member.1 != null
  .loc 3 939 21
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:rax $32.1:rbx 
  # jump($32.1, block.13, block.14)
  test bl, bl
  mov [rbp-56], rax
  mov [rbp-57], bl
  jz .LABEL__convert_call_expression_103__14
.LABEL__convert_call_expression_103__13:
  # $33.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 939 51
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $32.1:[rbp-57] $33.1:rbx 
  # IR_Function_Type.7: @Object_Type = load_variable(IR_Function_Type)
  lea r15, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $32.1:[rbp-57] $33.1:rbx IR_Function_Type.7:r15 
  # $32.2: Boolean = call(is_293, $33.1, IR_Function_Type.7)
  .loc 3 939 51
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $33.1
  # [discarded value]: IR_Function_Type.7
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:rax:[rbp-57] 
  # jump(block.14)
  mov [rbp-57], al
.LABEL__convert_call_expression_103__14:
  # $32.3: Boolean = phi($32.1, $32.2)
  .loc 3 939 21
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] $32.3:[rbp-57] 
  # jump($32.3, block.15, block.10)
  mov al, [rbp-57]
  test al, al
  jz .LABEL__convert_call_expression_103__10
.LABEL__convert_call_expression_103__15:
  # $35.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 940 120
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [discarded value]: $32.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] $35.1:rbx 
  # $36.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $35.1)
  .loc 3 940 97
  mov rdi, [rbp-8]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] $36.1:rax 
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_172, $36.1, callee_value.1, struct_type_member.1, false)
  .loc 3 940 56
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-56]
  mov cl, 0
  call create_ir_load_struct_member_instruction_172
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] $37.1:rax 
  # $38.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 940 188
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rbx:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] $37.1:rax $38.1:r15 
  # call_function_value.1: @IR_Variable_Value = call(append_71, self.1, $37.1, $38.1)
  .loc 3 940 44
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] call_function_value.1:rax 
  # $40.1: @IR_Value = call(convert_dynamic_call_expression_105, self.1, call_expression.1, call_function_value.1, callee_value.1)
  .loc 3 941 28
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  mov rcx, [rbp-32]
  call convert_dynamic_call_expression_105
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] $40.1:rax 
  # return($40.1)
  .loc 3 941 21
  jmp .LABEL__convert_call_expression_103__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] 
.LABEL__convert_call_expression_103__10:
  # $41.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 3 945 69
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:rax:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] $41.1:rbx struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] 
  # $42.1: @IR_Value = call(convert_direct_call_expression_104, self.1, call_expression.1, $41.1, callee_value.1)
  .loc 3 945 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  mov rcx, [rbp-32]
  call convert_direct_call_expression_104
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] $42.1:rax struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] 
  # return($42.1)
  .loc 3 945 9
  jmp .LABEL__convert_call_expression_103__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] $32.2:[rbp-57] 
  # [discarded value]: $32.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:[rbp-57] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] callee_value_type.1:[rbp-48] 
  # [discarded value]: callee_value_type.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] callee_value.1:[rbp-32] callee_value_type.1:[rbp-40] 
  # [discarded value]: callee.1
  # [discarded value]: callee_value.1
  # [discarded value]: callee_value_type.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
.LABEL__convert_call_expression_103__8:
  # $43.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 947 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $43.1:rbx 
  # AST_Variable_Expression.5: @Object_Type = load_variable(AST_Variable_Expression)
  lea r15, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $43.1:rbx AST_Variable_Expression.5:r15 
  # $44.1: Boolean = call(is_293, $43.1, AST_Variable_Expression.5)
  .loc 3 947 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $43.1
  # [discarded value]: AST_Variable_Expression.5
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $44.1:rax 
  # jump($44.1, block.19, block.20)
  test al, al
  jz .LABEL__convert_call_expression_103__20
.LABEL__convert_call_expression_103__19:
  # callee.1: @AST_Variable_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 948 19
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] callee.1:rbx 
  # $47.1: @Identifier_Token = load_struct_member(callee.1, name)
  .loc 3 949 39
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] callee.1:rbx $47.1:r15 
  # $48.1: @String = load_struct_member($47.1, lexeme)
  .loc 3 949 39
  mov r14, [r15+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] callee.1:rbx $48.1:r14 
  # variable.1: @IR_Variable = call(get_variable_62, self.1, $48.1)
  .loc 3 949 21
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-24], rbx
  call get_variable_62
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:rax 
  # $51.1: Boolean = variable.1 != null
  .loc 3 950 13
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:rax $51.1:rbx 
  # jump($51.1, block.21, block.22)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_call_expression_103__22
.LABEL__convert_call_expression_103__21:
  # $52.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 3 950 33
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:rax:[rbp-32] $51.1:[rbp-33] $52.1:rbx 
  # IR_Function_Type.8: @Object_Type = load_variable(IR_Function_Type)
  lea r15, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:rax:[rbp-32] $51.1:[rbp-33] $52.1:rbx IR_Function_Type.8:r15 
  # $51.2: Boolean = call(is_293, $52.1, IR_Function_Type.8)
  .loc 3 950 33
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $52.1
  # [discarded value]: IR_Function_Type.8
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:rax:[rbp-33] 
  # jump(block.22)
  mov [rbp-33], al
.LABEL__convert_call_expression_103__22:
  # $51.3: Boolean = phi($51.1, $51.2)
  .loc 3 950 13
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] $51.3:[rbp-33] 
  # jump($51.3, block.23, block.24)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_call_expression_103__24
.LABEL__convert_call_expression_103__23:
  # call_function_value.1: @IR_Value = call(convert_expression_99, self.1, callee.1, null)
  .loc 3 951 36
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  xor rdx, rdx
  call convert_expression_99
  # [discarded value]: $51.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] call_function_value.1:rax 
  # $55.1: @IR_Value = call(convert_dynamic_call_expression_105, self.1, call_expression.1, call_function_value.1, null)
  .loc 3 952 20
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  xor rcx, rcx
  call convert_dynamic_call_expression_105
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] $55.1:rax 
  # return($55.1)
  .loc 3 952 13
  jmp .LABEL__convert_call_expression_103__end
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] 
.LABEL__convert_call_expression_103__24:
  # $56.1: @Identifier_Token = load_struct_member(callee.1, name)
  .loc 3 954 69
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:rax:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] $56.1:rbx 
  # $57.1: @IR_Value = call(convert_direct_call_expression_104, self.1, call_expression.1, $56.1, null)
  .loc 3 954 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  xor rcx, rcx
  call convert_direct_call_expression_104
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] $57.1:rax 
  # return($57.1)
  .loc 3 954 9
  jmp .LABEL__convert_call_expression_103__end
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] $51.2:[rbp-33] 
  # [discarded value]: $51.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] variable.1:[rbp-32] $51.1:[rbp-33] 
  # [discarded value]: callee.1
  # [discarded value]: variable.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
.LABEL__convert_call_expression_103__20:
  # $58.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 956 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $58.1:rbx 
  # $59.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 3 956 37
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $58.1:rbx $59.1:r15 
  # $60.1: @Object_Type = load_struct_member($59.1, object_type)
  .loc 3 956 37
  mov r14, [r15+0]
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $58.1:rbx $60.1:r14 
  # call(abort_138, $58.1, $60.1)
  .loc 3 956 5
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $58.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: call_expression.1
  # [live values]: 
.LABEL__convert_call_expression_103__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_expression_103__stack_frame_size: .word 64

  .loc 3 959 1
  .text
convert_direct_call_expression_104:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_direct_call_expression_104__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_direct_call_expression_104__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # call_function_name.1: @Identifier_Token = load_variable(call_function_name)
  # [live values]: self.1:rdi call_expression.1:rsi call_function_name.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi call_function_name.1:rdx first_argument.1:rcx 
  # $1.1: @List = load_struct_member(call_expression.1, arguments)
  .loc 3 960 51
  mov rax, [rsi+24]
  # [live values]: self.1:rdi call_expression.1:rsi call_function_name.1:rdx first_argument.1:rcx $1.1:rax 
  # call_arguments.1: @List = call(convert_call_arguments_107, self.1, $1.1)
  .loc 3 960 23
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call convert_call_arguments_107
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax 
  # $3.1: Boolean = first_argument.1 != null
  .loc 3 961 9
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__convert_direct_call_expression_104__3
.LABEL__convert_direct_call_expression_104__2:
  # $4.1: @IR_Call_Argument = new(IR_Call_Argument)
  .loc 3 962 32
  mov rdi, 16
  call malloc
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $4.1:rax 
  # store_struct_member($4.1, name, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $4.1:rax 
  # store_struct_member($4.1, value, first_argument.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:rbx:[rbp-16] call_arguments.1:[rbp-40] $4.1:rax 
  # call(prepend_269, call_arguments.1, $4.1)
  .loc 3 962 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call prepend_269
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # jump(block.3)
.LABEL__convert_direct_call_expression_104__3:
  # call_function.1: @IR_Function = null
  .loc 3 965 5
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:rax 
  # $5.1: @List = load_struct_member(self.1, named_functions)
  .loc 3 966 29
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:rax $5.1:r15 
  # named_functions_item.1: @List_Item = load_struct_member($5.1, first_item)
  .loc 3 966 29
  mov r14, [r15+0]
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:rax named_functions_item.1:r14 
  # jump(block.4)
  mov [rbp-48], rax
  mov [rbp-56], r14
.LABEL__convert_direct_call_expression_104__4:
  # call_function.8: @IR_Function = phi(call_function.1, call_function.9)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] 
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] 
  # $7.1: Boolean = named_functions_item.2 != null
  .loc 3 967 12
  cmp QWORD PTR [rbp-56], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__6
.LABEL__convert_direct_call_expression_104__5:
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  .loc 3 968 27
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:rax:[rbp-56] named_function.1:rbx 
  # $10.1: @String = load_struct_member(named_function.1, name)
  .loc 3 969 13
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:rax:[rbp-56] named_function.1:rbx $10.1:r15 
  # $11.1: @String = load_struct_member(call_function_name.1, lexeme)
  .loc 3 969 40
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:r14:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:rax:[rbp-56] named_function.1:rbx $10.1:r15 $11.1:r13 
  # $12.1: Boolean = call(equals_296, $10.1, $11.1)
  .loc 3 969 13
  mov rdi, r15
  mov rsi, r13
  mov [rbp-64], rbx
  call equals_296
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] $12.1:rax 
  # jump($12.1, block.7, block.8)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__8
.LABEL__convert_direct_call_expression_104__7:
  # $13.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  .loc 3 970 17
  mov rax, [rbp-64]
  mov rbx, [rax+48]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:rax:[rbp-64] $13.1:rbx 
  # $14.1: Boolean = call(accepts_106, $13.1, call_arguments.1)
  .loc 3 970 17
  mov rdi, rbx
  mov rsi, [rbp-40]
  call accepts_106
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] $14.1:rax 
  # jump($14.1, block.9, block.8)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__8
.LABEL__convert_direct_call_expression_104__9:
  # $15.1: Boolean = call_function.8 != null
  .loc 3 971 21
  cmp QWORD PTR [rbp-48], 0
  setne al
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] $15.1:rax 
  # jump($15.1, block.11, block.12)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__12
.LABEL__convert_direct_call_expression_104__11:
  # $16.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 972 27
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] $16.1:rbx 
  # call(abort_264, $16.1, "Found at least two matching functions")
  .loc 3 972 21
  mov rdi, rbx
  lea rsi, .LABEL__string_202[rip] # "Found at least two matching functions"
  call abort_264
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] 
.LABEL__convert_direct_call_expression_104__12:
  # call_function.3: @IR_Function = named_function.1
  .loc 3 974 17
  mov rax, [rbp-64]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] call_function.3:rax:[rbp-48] 
  # jump(block.8)
  mov [rbp-48], rax
.LABEL__convert_direct_call_expression_104__8:
  # call_function.9: @IR_Function = phi(call_function.3, call_function.8)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] call_function.9:[rbp-48] call_function.3:[rbp-48] 
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  .loc 3 977 32
  mov rax, [rbp-56]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] call_function.9:[rbp-48] named_functions_item.5:rbx:[rbp-56] call_function.3:[rbp-48] 
  # jump(block.4)
  mov [rbp-56], rbx
  jmp .LABEL__convert_direct_call_expression_104__4
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] call_function.9:[rbp-48] named_functions_item.5:[rbp-56] call_function.3:[rbp-48] 
  # [discarded value]: call_function.9
  # [discarded value]: named_functions_item.5
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] call_function.3:[rbp-48] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] call_function.3:[rbp-48] 
  # [discarded value]: call_function.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_function.1:[rbp-64] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] 
.LABEL__convert_direct_call_expression_104__6:
  # $18.1: Boolean = call_function.8 == null
  .loc 3 979 9
  cmp QWORD PTR [rbp-48], 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] $18.1:rax 
  # jump($18.1, block.13, block.14)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__14
.LABEL__convert_direct_call_expression_104__13:
  # $19.1: @List = load_struct_member(self.1, named_functions)
  .loc 3 980 33
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] $19.1:rbx 
  # named_functions_item.1: @List_Item = load_struct_member($19.1, first_item)
  .loc 3 980 33
  mov r15, [rbx+0]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:r15 
  # jump(block.15)
  mov [rbp-64], r15
.LABEL__convert_direct_call_expression_104__15:
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] 
  # $21.1: Boolean = named_functions_item.2 != null
  .loc 3 981 16
  cmp QWORD PTR [rbp-64], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] $21.1:rax 
  # jump($21.1, block.16, block.17)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__17
.LABEL__convert_direct_call_expression_104__16:
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  .loc 3 982 31
  mov rax, [rbp-64]
  mov rbx, [rax+16]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:rax:[rbp-64] named_function.1:rbx 
  # $24.1: @String = load_struct_member(named_function.1, name)
  .loc 3 983 17
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:rax:[rbp-64] named_function.1:rbx $24.1:r15 
  # $25.1: @String = load_struct_member(call_function_name.1, lexeme)
  .loc 3 983 44
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:r14:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:rax:[rbp-64] named_function.1:rbx $24.1:r15 $25.1:r13 
  # $26.1: Boolean = call(equals_296, $24.1, $25.1)
  .loc 3 983 17
  mov rdi, r15
  mov rsi, r13
  mov [rbp-72], rbx
  call equals_296
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $26.1:rax 
  # jump($26.1, block.18, block.19)
  test al, al
  jz .LABEL__convert_direct_call_expression_104__19
.LABEL__convert_direct_call_expression_104__18:
  # stderr.3: @FILE = load_variable(stderr)
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] stderr.3:stderr[rip] 
  # $27.1: @FILE = call(end_line_290, stderr.3)
  .loc 3 984 17
  mov rdi, stderr[rip]
  call end_line_290
  # [discarded value]: stderr.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $27.1:rax 
  # $28.1: @Source_Location = load_struct_member(named_function.1, location)
  .loc 3 984 41
  mov rbx, [rbp-72]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:rbx:[rbp-72] $27.1:rax $28.1:r15 
  # $29.1: @FILE = call(write_267, $27.1, $28.1)
  .loc 3 984 17
  mov rdi, rax
  mov rsi, r15
  call write_267
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $29.1:rax 
  # $30.1: @FILE = call(write_287, $29.1, ": ")
  .loc 3 984 17
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $30.1:rax 
  # $31.1: @String = load_struct_member(named_function.1, name)
  .loc 3 984 84
  mov rbx, [rbp-72]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:rbx:[rbp-72] $30.1:rax $31.1:r15 
  # $32.1: @FILE = call(write_287, $30.1, $31.1)
  .loc 3 984 17
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $32.1:rax 
  # $33.1: @FILE = call(write_287, $32.1, " :: ")
  .loc 3 984 17
  mov rdi, rax
  lea rsi, .LABEL__string_204[rip] # " :: "
  call write_287
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $33.1:rax 
  # $34.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  .loc 3 984 125
  mov rbx, [rbp-72]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:rbx:[rbp-72] $33.1:rax $34.1:r15 
  # $35.1: @String = load_struct_member($34.1, name)
  .loc 3 984 125
  mov r14, [r15+8]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:rbx:[rbp-72] $33.1:rax $35.1:r14 
  # $36.1: @FILE = call(write_287, $33.1, $35.1)
  .loc 3 984 17
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $33.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] $36.1:rax 
  # $37.1: @FILE = call(end_line_290, $36.1)
  .loc 3 984 17
  mov rdi, rax
  call end_line_290
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] 
  # jump(block.19)
.LABEL__convert_direct_call_expression_104__19:
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  .loc 3 986 36
  mov rax, [rbp-64]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] named_functions_item.5:rbx:[rbp-64] 
  # jump(block.15)
  mov [rbp-64], rbx
  jmp .LABEL__convert_direct_call_expression_104__15
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] named_functions_item.5:[rbp-64] 
  # [discarded value]: named_functions_item.5
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] named_function.1:[rbp-72] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] 
.LABEL__convert_direct_call_expression_104__17:
  # $39.1: @String = call(clone_295, "Found no matching function: ")
  .loc 3 988 20
  lea rdi, .LABEL__string_205[rip] # "Found no matching function: "
  call clone_295
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] $39.1:rax 
  # $40.1: @String = load_struct_member(call_function_name.1, lexeme)
  .loc 3 988 65
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:rbx:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] $39.1:rax $40.1:r15 
  # $41.1: @String = call(append_304, $39.1, $40.1)
  .loc 3 988 20
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] $41.1:rax 
  # message.1: @String = call(append_304, $41.1, " :: (")
  .loc 3 988 20
  mov rdi, rax
  lea rsi, .LABEL__string_172[rip] # " :: ("
  call append_304
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:rax 
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  .loc 3 989 32
  mov rbx, [rbp-40]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rbx:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:rax call_arguments_item.1:r15 
  # $44.1: Boolean = call_arguments_item.1 != null
  .loc 3 990 13
  cmp r15, 0
  setne r14b
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rbx:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:rax call_arguments_item.1:r15 $44.1:r14 
  # jump($44.1, block.22, block.21)
  test r14b, r14b
  mov [rbp-72], rax
  mov [rbp-80], r15
  jz .LABEL__convert_direct_call_expression_104__21
.LABEL__convert_direct_call_expression_104__22:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.4, call_arguments_item.1)
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] 
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  .loc 3 992 34
  mov rax, [rbp-80]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:rax:[rbp-80] call_argument.1:rbx 
  # $47.1: @String = load_struct_member(call_argument.1, name)
  .loc 3 993 21
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:rax:[rbp-80] call_argument.1:rbx $47.1:r15 
  # $48.1: Boolean = $47.1 != null
  .loc 3 993 21
  cmp r15, 0
  setne r14b
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:rax:[rbp-80] call_argument.1:rbx $48.1:r14 
  # jump($48.1, block.24, block.25)
  test r14b, r14b
  mov [rbp-88], rbx
  jz .LABEL__convert_direct_call_expression_104__25
.LABEL__convert_direct_call_expression_104__24:
  # $49.1: @String = load_struct_member(call_argument.1, name)
  .loc 3 994 36
  mov rax, [rbp-88]
  mov rbx, [rax+0]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:rax:[rbp-88] $49.1:rbx 
  # $50.1: @String = call(append_304, message.1, $49.1)
  .loc 3 994 21
  mov rdi, [rbp-72]
  mov rsi, rbx
  call append_304
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] $50.1:rax 
  # $51.1: @String = call(append_304, $50.1, ": ")
  .loc 3 994 21
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call append_304
  # [discarded value]: $50.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] 
  # jump(block.25)
.LABEL__convert_direct_call_expression_104__25:
  # $52.1: @IR_Value = load_struct_member(call_argument.1, value)
  .loc 3 996 32
  mov rax, [rbp-88]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:rax:[rbp-88] $52.1:rbx 
  # $53.1: @IR_Type = load_struct_member($52.1, type)
  .loc 3 996 32
  mov r15, [rbx+8]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:rax:[rbp-88] $53.1:r15 
  # $54.1: @String = load_struct_member($53.1, name)
  .loc 3 996 32
  mov rbx, [r15+8]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:rax:[rbp-88] $54.1:rbx 
  # $55.1: @String = call(append_304, message.1, $54.1)
  .loc 3 996 17
  mov rdi, [rbp-72]
  mov rsi, rbx
  call append_304
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] 
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  .loc 3 997 39
  mov rax, [rbp-80]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:rbx:[rbp-80] 
  # $57.1: Boolean = call_arguments_item.4 == null
  .loc 3 998 21
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:rbx:[rbp-80] $57.1:rax 
  # jump($57.1, block.21, block.27)
  test al, al
  mov [rbp-80], rbx
  jz .LABEL__convert_direct_call_expression_104__27
.LABEL__convert_direct_call_expression_104__21:
  # $59.1: @String = call(append_304, message.1, ") -> Any")
  .loc 3 1004 9
  mov rdi, [rbp-72]
  lea rsi, .LABEL__string_206[rip] # ") -> Any"
  call append_304
  # [discarded value]: $59.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:[rbp-80] 
  # $60.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 1005 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] $60.1:rbx call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:[rbp-80] 
  # call(abort_264, $60.1, message.1)
  .loc 3 1005 9
  mov rdi, rbx
  mov rsi, [rbp-72]
  call abort_264
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:[rbp-80] 
.LABEL__convert_direct_call_expression_104__27:
  # $58.1: @String = call(append_304, message.1, ", ")
  .loc 3 1001 17
  mov rdi, [rbp-72]
  lea rsi, .LABEL__string_37[rip] # ", "
  call append_304
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:[rbp-80] 
  # jump(block.22)
  jmp .LABEL__convert_direct_call_expression_104__22
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:[rbp-80] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] call_arguments_item.4:[rbp-80] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] call_arguments_item.2:[rbp-80] call_argument.1:[rbp-88] 
  # [discarded value]: call_arguments_item.2
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] message.1:[rbp-72] call_arguments_item.1:[rbp-80] 
  # [discarded value]: message.1
  # [discarded value]: call_arguments_item.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] named_functions_item.2:[rbp-64] 
  # [discarded value]: named_functions_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] named_functions_item.1:[rbp-64] 
  # [discarded value]: named_functions_item.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] 
.LABEL__convert_direct_call_expression_104__14:
  # result_value.1: @IR_Variable_Value = null
  .loc 3 1008 5
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:rax 
  # $61.1: @IR_Type = load_struct_member(call_function.8, return_type)
  .loc 3 1009 9
  mov rbx, [rbp-48]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:rbx:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:rax $61.1:r15 
  # IR_Nothing_Type.4: @Object_Type = load_variable(IR_Nothing_Type)
  lea r14, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:rbx:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:rax $61.1:r15 IR_Nothing_Type.4:r14 
  # $62.1: Boolean = call(is_293, $61.1, IR_Nothing_Type.4)
  .loc 3 1009 9
  mov rdi, r15
  mov rsi, r14
  mov [rbp-64], rax
  call is_293
  # [discarded value]: $61.1
  # [discarded value]: IR_Nothing_Type.4
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] $62.1:rax 
  # $63.1: Boolean = $62.1 == false
  .loc 3 1009 9
  cmp al, 0
  sete bl
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] $63.1:rbx 
  # jump($63.1, block.29, block.30)
  test bl, bl
  jz .LABEL__convert_direct_call_expression_104__30
.LABEL__convert_direct_call_expression_104__29:
  # $64.1: @IR_Type = load_struct_member(call_function.8, return_type)
  .loc 3 1010 47
  mov rax, [rbp-48]
  mov rbx, [rax+40]
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:rax:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] $64.1:rbx 
  # result_value.2: @IR_Variable_Value = call(create_temp_value_70, self.1, $64.1)
  .loc 3 1010 24
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:rax:[rbp-64] 
  # jump(block.30)
  mov [rbp-64], rax
.LABEL__convert_direct_call_expression_104__30:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] result_value.3:[rbp-64] 
  # $66.1: @IR_Call_Instruction = call(create_ir_direct_call_instruction_162, result_value.3, call_arguments.1, call_function.8)
  .loc 3 1012 24
  mov rdi, [rbp-64]
  mov rsi, [rbp-40]
  mov rdx, [rbp-48]
  call create_ir_direct_call_instruction_162
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $66.1:rax 
  # $67.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 1012 104
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $66.1:rax $67.1:r15 
  # $68.1: @IR_Variable_Value = call(append_71, self.1, $66.1, $67.1)
  .loc 3 1012 12
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $68.1:rax 
  # return($68.1)
  .loc 3 1012 5
  jmp .LABEL__convert_direct_call_expression_104__end
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] result_value.1:[rbp-64] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] call_function.8:[rbp-48] named_functions_item.2:[rbp-56] 
  # [discarded value]: call_function.8
  # [discarded value]: named_functions_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function.1:[rbp-48] named_functions_item.1:[rbp-56] 
  # [discarded value]: call_function.1
  # [discarded value]: named_functions_item.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function_name.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: call_expression.1
  # [discarded value]: call_function_name.1
  # [discarded value]: first_argument.1
  # [discarded value]: call_arguments.1
  # [live values]: 
.LABEL__convert_direct_call_expression_104__end:
  mov rsp, rbp
  pop rbp
  ret

convert_direct_call_expression_104__stack_frame_size: .word 96

  .loc 3 1015 1
  .text
convert_dynamic_call_expression_105:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_dynamic_call_expression_105__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_dynamic_call_expression_105__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # call_function.1: @IR_Value = load_variable(call_function)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx 
  # $1.1: @List = load_struct_member(call_expression.1, arguments)
  .loc 3 1016 51
  mov rax, [rsi+24]
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx $1.1:rax 
  # call_arguments.1: @List = call(convert_call_arguments_107, self.1, $1.1)
  .loc 3 1016 23
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call convert_call_arguments_107
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax 
  # $3.1: Boolean = first_argument.1 != null
  .loc 3 1017 9
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__convert_dynamic_call_expression_105__3
.LABEL__convert_dynamic_call_expression_105__2:
  # $4.1: @IR_Call_Argument = new(IR_Call_Argument)
  .loc 3 1018 32
  mov rdi, 16
  call malloc
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $4.1:rax 
  # store_struct_member($4.1, name, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] $4.1:rax 
  # store_struct_member($4.1, value, first_argument.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:rbx:[rbp-16] call_arguments.1:[rbp-40] $4.1:rax 
  # call(prepend_269, call_arguments.1, $4.1)
  .loc 3 1018 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call prepend_269
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # jump(block.3)
.LABEL__convert_dynamic_call_expression_105__3:
  # call_function_type.1: @IR_Function_Type = load_struct_member(call_function.1, type)
  .loc 3 1020 27
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:rax:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:rbx 
  # $7.1: Boolean = call(accepts_106, call_function_type.1, call_arguments.1)
  .loc 3 1021 9
  mov rdi, rbx
  mov rsi, [rbp-40]
  mov [rbp-48], rbx
  call accepts_106
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] $7.1:rax 
  # $8.1: Boolean = $7.1 == false
  .loc 3 1021 9
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] $8.1:rbx 
  # jump($8.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_dynamic_call_expression_105__5
.LABEL__convert_dynamic_call_expression_105__4:
  # $9.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 1022 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] $9.1:rbx 
  # call(abort_264, $9.1, "Unsupported arguments")
  .loc 3 1022 9
  mov rdi, rbx
  lea rsi, .LABEL__string_207[rip] # "Unsupported arguments"
  call abort_264
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] 
.LABEL__convert_dynamic_call_expression_105__5:
  # result_value.1: @IR_Variable_Value = null
  .loc 3 1024 5
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:rax 
  # $10.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  .loc 3 1025 9
  mov rbx, [rbp-48]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:rbx:[rbp-48] result_value.1:rax $10.1:r15 
  # IR_Nothing_Type.5: @Object_Type = load_variable(IR_Nothing_Type)
  lea r14, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:rbx:[rbp-48] result_value.1:rax $10.1:r15 IR_Nothing_Type.5:r14 
  # $11.1: Boolean = call(is_293, $10.1, IR_Nothing_Type.5)
  .loc 3 1025 9
  mov rdi, r15
  mov rsi, r14
  mov [rbp-56], rax
  call is_293
  # [discarded value]: $10.1
  # [discarded value]: IR_Nothing_Type.5
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 3 1025 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] $12.1:rbx 
  # jump($12.1, block.6, block.7)
  test bl, bl
  jz .LABEL__convert_dynamic_call_expression_105__7
.LABEL__convert_dynamic_call_expression_105__6:
  # $13.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  .loc 3 1026 47
  mov rax, [rbp-48]
  mov rbx, [rax+24]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:rax:[rbp-48] result_value.1:[rbp-56] $13.1:rbx 
  # result_value.2: @IR_Variable_Value = call(create_temp_value_70, self.1, $13.1)
  .loc 3 1026 24
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:rax:[rbp-56] 
  # jump(block.7)
  mov [rbp-56], rax
.LABEL__convert_dynamic_call_expression_105__7:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] result_value.3:[rbp-56] 
  # $15.1: @IR_Variable_Value = call_function.1
  .loc 3 1028 89
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] result_value.3:[rbp-56] $15.1:rax 
  # $16.1: @IR_Call_Instruction = call(create_ir_dynamic_call_instruction_163, result_value.3, call_arguments.1, $15.1)
  .loc 3 1028 24
  mov rdi, [rbp-56]
  mov rsi, [rbp-40]
  mov rdx, rax
  call create_ir_dynamic_call_instruction_163
  # [discarded value]: result_value.3
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] $16.1:rax 
  # $17.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 3 1028 127
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] $16.1:rax $17.1:r15 
  # $18.1: @IR_Variable_Value = call(append_71, self.1, $16.1, $17.1)
  .loc 3 1028 12
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] $18.1:rax 
  # return($18.1)
  .loc 3 1028 5
  jmp .LABEL__convert_dynamic_call_expression_105__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] result_value.2:[rbp-56] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] result_value.1:[rbp-56] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] call_function_type.1:[rbp-48] 
  # [discarded value]: call_function_type.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: call_expression.1
  # [discarded value]: call_function.1
  # [discarded value]: first_argument.1
  # [discarded value]: call_arguments.1
  # [live values]: 
.LABEL__convert_dynamic_call_expression_105__end:
  mov rsp, rbp
  pop rbp
  ret

convert_dynamic_call_expression_105__stack_frame_size: .word 64

  .loc 3 1031 1
  .text
accepts_106:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_106__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_106__1:
  # self.1: @IR_Function_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  .loc 3 1032 28
  mov rax, [rsi+0]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  # $2.1: @List = load_struct_member(self.1, parameters)
  .loc 3 1033 33
  mov rbx, [rdi+16]
  # [discarded value]: self.1
  # [live values]: call_arguments_item.1:rax $2.1:rbx 
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  .loc 3 1033 33
  mov r15, [rbx+0]
  # [discarded value]: $2.1
  # [live values]: call_arguments_item.1:rax function_parameters_item.1:r15 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], r15
.LABEL__accepts_106__2:
  # function_parameters_item.9: @List_Item = phi(function_parameters_item.1, function_parameters_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] 
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] 
  # $5.1: Boolean = call_arguments_item.2 != null
  .loc 3 1034 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, block.7, block.8)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_106__8
.LABEL__accepts_106__7:
  # $5.2: Boolean = function_parameters_item.9 != null
  .loc 3 1034 43
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(block.8)
  mov [rbp-17], al
.LABEL__accepts_106__8:
  # $7.1: Boolean = phi($5.1, $5.2)
  .loc 3 1034 12
  mov al, [rbp-17]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_106__6
.LABEL__accepts_106__5:
  # $9.1: @IR_Function_Type_Parameter = load_struct_member(function_parameters_item.9, data)
  .loc 3 1034 80
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $9.1:rbx $5.2:[rbp-17] $7.1:[rbp-18] 
  # $10.1: @IR_Type = load_struct_member($9.1, type)
  .loc 3 1034 79
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $10.1:r15 $5.2:[rbp-17] $7.1:[rbp-18] 
  # $12.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  .loc 3 1034 156
  mov rbx, [rbp-8]
  mov r14, [rbx+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $12.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  # $13.1: @IR_Value = load_struct_member($12.1, value)
  .loc 3 1034 155
  mov r13, [r14+8]
  # [discarded value]: $12.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $13.1:r13 $5.2:[rbp-17] $7.1:[rbp-18] 
  # $14.1: @IR_Type = load_struct_member($13.1, type)
  .loc 3 1034 155
  mov r14, [r13+8]
  # [discarded value]: $13.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $14.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  # $7.2: Boolean = call(accepts_68, $10.1, $14.1)
  .loc 3 1034 79
  mov rdi, r15
  mov rsi, r14
  call accepts_68
  # [discarded value]: $10.1
  # [discarded value]: $14.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:rax:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(block.6)
  mov [rbp-18], al
.LABEL__accepts_106__6:
  # $7.3: Boolean = phi($7.1, $7.2)
  .loc 3 1034 12
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($7.3, block.3, block.4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__accepts_106__4
.LABEL__accepts_106__3:
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  .loc 3 1035 31
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $7.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # function_parameters_item.5: @List_Item = load_struct_member(function_parameters_item.9, next_item)
  .loc 3 1036 36
  mov rax, [rbp-16]
  mov r15, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] function_parameters_item.5:r15:[rbp-16] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(block.2)
  mov [rbp-8], rbx
  mov [rbp-16], r15
  jmp .LABEL__accepts_106__2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:[rbp-8] function_parameters_item.5:[rbp-16] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: call_arguments_item.5
  # [discarded value]: function_parameters_item.5
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
.LABEL__accepts_106__4:
  # $19.1: Boolean = call_arguments_item.2 == null
  .loc 3 1038 12
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:rax $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($19.1, block.9, block.10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_106__10
.LABEL__accepts_106__9:
  # $19.2: Boolean = function_parameters_item.9 == null
  .loc 3 1038 43
  cmp QWORD PTR [rbp-16], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:rax:[rbp-19] 
  # jump(block.10)
  mov [rbp-19], al
.LABEL__accepts_106__10:
  # $19.3: Boolean = phi($19.1, $19.2)
  .loc 3 1038 12
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] $19.3:[rbp-19] 
  # return($19.3)
  .loc 3 1038 5
  mov al, [rbp-19]
  jmp .LABEL__accepts_106__end
  # [discarded value]: $19.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [discarded value]: $19.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $19.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [discarded value]: function_parameters_item.9
  # [discarded value]: call_arguments_item.2
  # [discarded value]: $5.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: function_parameters_item.1
  # [live values]: 
.LABEL__accepts_106__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_106__stack_frame_size: .word 32

  .loc 3 1041 1
  .text
convert_call_arguments_107:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_arguments_107__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_arguments_107__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # ast_call_arguments.1: @List = load_variable(ast_call_arguments)
  # [live values]: self.1:rdi ast_call_arguments.1:rsi 
  # has_named_arguments.1: Boolean = false
  .loc 3 1042 5
  mov al, 0
  # [live values]: self.1:rdi ast_call_arguments.1:rsi has_named_arguments.1:rax 
  # $1.1: @List = new(List)
  .loc 3 1043 23
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] $1.1:rax 
  # call_arguments.1: @List = $1.1
  .loc 3 1043 5
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] call_arguments.1:rax 
  # ast_call_arguments_item.1: @List_Item = load_struct_member(ast_call_arguments.1, first_item)
  .loc 3 1044 32
  mov rbx, [rbp-9]
  mov r15, [rbx+0]
  # [discarded value]: ast_call_arguments.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:rax ast_call_arguments_item.1:r15 
  # jump(block.2)
  mov [rbp-25], rax
  mov [rbp-33], r15
.LABEL__convert_call_arguments_107__2:
  # has_named_arguments.4: Boolean = phi(has_named_arguments.1, has_named_arguments.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] 
  # ast_call_arguments_item.2: @List_Item = phi(ast_call_arguments_item.1, ast_call_arguments_item.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  # $3.1: Boolean = ast_call_arguments_item.2 != null
  .loc 3 1045 12
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__convert_call_arguments_107__4
.LABEL__convert_call_arguments_107__3:
  # call_argument.1: @AST_Call_Argument = load_struct_member(ast_call_arguments_item.2, data)
  .loc 3 1046 26
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] call_argument.1:rbx 
  # $6.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  .loc 3 1047 56
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] call_argument.1:rbx $6.1:r15 
  # call_argument_value.1: @IR_Value = call(convert_expression_99, self.1, $6.1, null)
  .loc 3 1047 32
  mov rdi, [rbp-17]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-41], rbx
  call convert_expression_99
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:rax 
  # $8.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  .loc 3 1048 13
  mov rbx, [rbp-41]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:rbx:[rbp-41] call_argument_value.1:rax $8.1:r15 
  # $9.1: Boolean = $8.1 != null
  .loc 3 1048 13
  cmp r15, 0
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:rbx:[rbp-41] call_argument_value.1:rax $9.1:r14 
  # jump($9.1, block.5, block.7)
  test r14b, r14b
  mov [rbp-49], rax
  jz .LABEL__convert_call_arguments_107__7
.LABEL__convert_call_arguments_107__5:
  # $13.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  .loc 3 1049 63
  mov rax, [rbp-41]
  mov rbx, [rax+0]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:rax:[rbp-41] call_argument_value.1:[rbp-49] $13.1:rbx 
  # $14.1: @String = load_struct_member($13.1, lexeme)
  .loc 3 1049 63
  mov r15, [rbx+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:rax:[rbp-41] call_argument_value.1:[rbp-49] $14.1:r15 
  # $15.1: @IR_Call_Argument = new(IR_Call_Argument)
  .loc 3 1049 35
  mov [rbp-57], r15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] $14.1:[rbp-57] $15.1:rax 
  # store_struct_member($15.1, name, $14.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] $15.1:rax 
  # store_struct_member($15.1, value, call_argument_value.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:rbx:[rbp-49] $15.1:rax 
  # call(append_268, call_arguments.1, $15.1)
  .loc 3 1049 13
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_268
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
  # has_named_arguments.3: Boolean = true
  .loc 3 1050 13
  mov al, 1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] has_named_arguments.3:rax:[rbp-1] 
  # jump(block.6)
  mov [rbp-1], al
.LABEL__convert_call_arguments_107__6:
  # has_named_arguments.5: Boolean = phi(has_named_arguments.3, has_named_arguments.4)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] 
  # ast_call_arguments_item.5: @List_Item = load_struct_member(ast_call_arguments_item.2, next_item)
  .loc 3 1057 35
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:rbx:[rbp-33] 
  # jump(block.2)
  mov [rbp-33], rbx
  jmp .LABEL__convert_call_arguments_107__2
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:[rbp-33] 
  # [discarded value]: has_named_arguments.5
  # [discarded value]: ast_call_arguments_item.5
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] has_named_arguments.3:[rbp-1] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] has_named_arguments.3:[rbp-1] 
  # [discarded value]: has_named_arguments.3
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
.LABEL__convert_call_arguments_107__7:
  # jump(has_named_arguments.4, block.8, block.9)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__convert_call_arguments_107__9
.LABEL__convert_call_arguments_107__8:
  # $10.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  .loc 3 1053 23
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:rax:[rbp-41] call_argument_value.1:[rbp-49] $10.1:rbx 
  # $11.1: @Source_Location = load_struct_member($10.1, location)
  .loc 3 1053 23
  mov r15, [rbx+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:rax:[rbp-41] call_argument_value.1:[rbp-49] $11.1:r15 
  # call(abort_264, $11.1, "Positional arguments cannot be added after named ones")
  .loc 3 1053 17
  mov rdi, r15
  lea rsi, .LABEL__string_208[rip] # "Positional arguments cannot be added after named ones"
  call abort_264
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
.LABEL__convert_call_arguments_107__9:
  # $12.1: @IR_Call_Argument = new(IR_Call_Argument)
  .loc 3 1055 35
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] $12.1:rax 
  # store_struct_member($12.1, name, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] $12.1:rax 
  # store_struct_member($12.1, value, call_argument_value.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:rbx:[rbp-49] $12.1:rax 
  # call(append_268, call_arguments.1, $12.1)
  .loc 3 1055 13
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_268
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
  # jump(block.6)
  jmp .LABEL__convert_call_arguments_107__6
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] call_argument.1:[rbp-41] call_argument_value.1:[rbp-49] 
  # [discarded value]: call_argument.1
  # [discarded value]: call_argument_value.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
.LABEL__convert_call_arguments_107__4:
  # return(call_arguments.1)
  .loc 3 1059 5
  mov rax, [rbp-25]
  jmp .LABEL__convert_call_arguments_107__end
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  # [discarded value]: has_named_arguments.4
  # [discarded value]: ast_call_arguments_item.2
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: has_named_arguments.1
  # [discarded value]: call_arguments.1
  # [discarded value]: ast_call_arguments_item.1
  # [live values]: 
.LABEL__convert_call_arguments_107__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_arguments_107__stack_frame_size: .word 64

  .loc 3 1062 1
  .text
convert_cast_expression_108:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_cast_expression_108__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_cast_expression_108__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # cast_expression.1: @AST_Cast_Expression = load_variable(cast_expression)
  # [live values]: self.1:rdi cast_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(cast_expression.1, value_expression)
  .loc 3 1063 38
  mov rax, [rsi+16]
  # [live values]: self.1:rdi cast_expression.1:rsi $1.1:rax 
  # value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, null)
  .loc 3 1063 14
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_99
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax 
  # $3.1: @AST_Type = load_struct_member(cast_expression.1, type)
  .loc 3 1064 68
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:rax $3.1:r15 
  # $4.1: @IR_Type = call(convert_value_type_75, self.1, $3.1)
  .loc 3 1064 44
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call convert_value_type_75
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] $4.1:rax 
  # result_value.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $4.1)
  .loc 3 1064 21
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax 
  # $6.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1065 9
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:rax $6.1:r15 
  # IR_Pointer_Type.14: @Object_Type = load_variable(IR_Pointer_Type)
  lea r14, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:rax $6.1:r15 IR_Pointer_Type.14:r14 
  # $8.1: Boolean = call(is_293, $6.1, IR_Pointer_Type.14)
  .loc 3 1065 9
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call is_293
  # [discarded value]: $6.1
  # [discarded value]: IR_Pointer_Type.14
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_cast_expression_108__3
.LABEL__convert_cast_expression_108__2:
  # $9.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1065 43
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $9.1:rbx 
  # IR_Pointer_Type.15: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $9.1:rbx IR_Pointer_Type.15:r15 
  # $8.2: Boolean = call(is_293, $9.1, IR_Pointer_Type.15)
  .loc 3 1065 43
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $9.1
  # [discarded value]: IR_Pointer_Type.15
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:rax:[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__convert_cast_expression_108__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1065 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_cast_expression_108__5
.LABEL__convert_cast_expression_108__4:
  # $11.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, result_value.1, value.1)
  .loc 3 1066 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_set_instruction_179
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $11.1:rax 
  # $12.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 3 1066 76
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $11.1:rax $12.1:r15 
  # $13.1: @IR_Variable_Value = call(append_71, self.1, $11.1, $12.1)
  .loc 3 1066 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $13.1:rax 
  # return($13.1)
  .loc 3 1066 9
  jmp .LABEL__convert_cast_expression_108__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
.LABEL__convert_cast_expression_108__5:
  # $14.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1068 9
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $14.1:rbx 
  # IR_Int_Type.8: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $14.1:rbx IR_Int_Type.8:r15 
  # $16.1: Boolean = call(is_293, $14.1, IR_Int_Type.8)
  .loc 3 1068 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $14.1
  # [discarded value]: IR_Int_Type.8
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:rax 
  # jump($16.1, block.7, block.8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_cast_expression_108__8
.LABEL__convert_cast_expression_108__7:
  # $17.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1068 40
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $17.1:rbx 
  # IR_Int32_Type.8: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $17.1:rbx IR_Int32_Type.8:r15 
  # $19.1: Boolean = call(is_293, $17.1, IR_Int32_Type.8)
  .loc 3 1068 40
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $17.1
  # [discarded value]: IR_Int32_Type.8
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:rax 
  # jump($19.1, block.10, block.9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_cast_expression_108__9
.LABEL__convert_cast_expression_108__10:
  # $16.2: Boolean = phi($19.1, $19.2)
  .loc 3 1068 40
  mov al, [rbp-35]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:rax:[rbp-34] 
  # jump(block.8)
  mov [rbp-34], al
.LABEL__convert_cast_expression_108__8:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 3 1068 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
  # jump($16.3, block.11, block.12)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_cast_expression_108__12
.LABEL__convert_cast_expression_108__11:
  # $22.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_165, result_value.1, value.1)
  .loc 3 1069 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_165
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 3 1069 77
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $22.1:rax $23.1:r15 
  # $24.1: @IR_Variable_Value = call(append_71, self.1, $22.1, $23.1)
  .loc 3 1069 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $24.1:rax 
  # return($24.1)
  .loc 3 1069 9
  jmp .LABEL__convert_cast_expression_108__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
.LABEL__convert_cast_expression_108__12:
  # $25.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1071 9
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $25.1:rbx 
  # IR_Int32_Type.9: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $25.1:rbx IR_Int32_Type.9:r15 
  # $27.1: Boolean = call(is_293, $25.1, IR_Int32_Type.9)
  .loc 3 1071 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $25.1
  # [discarded value]: IR_Int32_Type.9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:rax 
  # jump($27.1, block.14, block.15)
  test al, al
  mov [rbp-36], al
  jz .LABEL__convert_cast_expression_108__15
.LABEL__convert_cast_expression_108__14:
  # $28.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1071 42
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rbx 
  # IR_Int_Type.9: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rbx IR_Int_Type.9:r15 
  # $30.1: Boolean = call(is_293, $28.1, IR_Int_Type.9)
  .loc 3 1071 42
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $28.1
  # [discarded value]: IR_Int_Type.9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:rax 
  # jump($30.1, block.17, block.16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__convert_cast_expression_108__16
.LABEL__convert_cast_expression_108__17:
  # $27.2: Boolean = phi($30.1, $30.2)
  .loc 3 1071 42
  mov al, [rbp-37]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:rax:[rbp-36] 
  # jump(block.15)
  mov [rbp-36], al
.LABEL__convert_cast_expression_108__15:
  # $27.3: Boolean = phi($27.1, $27.2)
  .loc 3 1071 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
  # jump($27.3, block.18, block.19)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_cast_expression_108__19
.LABEL__convert_cast_expression_108__18:
  # $33.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_165, result_value.1, value.1)
  .loc 3 1072 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_165
  # [discarded value]: $27.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $33.1:rax 
  # $34.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 3 1072 77
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $33.1:rax $34.1:r15 
  # $35.1: @IR_Variable_Value = call(append_71, self.1, $33.1, $34.1)
  .loc 3 1072 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $35.1:rax 
  # return($35.1)
  .loc 3 1072 9
  jmp .LABEL__convert_cast_expression_108__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
.LABEL__convert_cast_expression_108__19:
  # $36.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1074 9
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $36.1:rbx 
  # IR_Int8_Type.10: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $36.1:rbx IR_Int8_Type.10:r15 
  # $38.1: Boolean = call(is_293, $36.1, IR_Int8_Type.10)
  .loc 3 1074 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $36.1
  # [discarded value]: IR_Int8_Type.10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:rax 
  # jump($38.1, block.21, block.22)
  test al, al
  mov [rbp-38], al
  jz .LABEL__convert_cast_expression_108__22
.LABEL__convert_cast_expression_108__21:
  # $39.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1074 41
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rbx 
  # IR_Int_Type.10: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rbx IR_Int_Type.10:r15 
  # $41.1: Boolean = call(is_293, $39.1, IR_Int_Type.10)
  .loc 3 1074 41
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $39.1
  # [discarded value]: IR_Int_Type.10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:rax 
  # jump($41.1, block.24, block.23)
  test al, al
  mov [rbp-39], al
  jz .LABEL__convert_cast_expression_108__23
.LABEL__convert_cast_expression_108__24:
  # $38.2: Boolean = phi($41.1, $41.2)
  .loc 3 1074 41
  mov al, [rbp-39]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:rax:[rbp-38] 
  # jump(block.22)
  mov [rbp-38], al
.LABEL__convert_cast_expression_108__22:
  # $38.3: Boolean = phi($38.1, $38.2)
  .loc 3 1074 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
  # jump($38.3, block.25, block.26)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__convert_cast_expression_108__26
.LABEL__convert_cast_expression_108__25:
  # $44.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_165, result_value.1, value.1)
  .loc 3 1075 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_165
  # [discarded value]: $38.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $44.1:rax 
  # $45.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 3 1075 77
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $44.1:rax $45.1:r15 
  # $46.1: @IR_Variable_Value = call(append_71, self.1, $44.1, $45.1)
  .loc 3 1075 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $46.1:rax 
  # return($46.1)
  .loc 3 1075 9
  jmp .LABEL__convert_cast_expression_108__end
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
.LABEL__convert_cast_expression_108__26:
  # $47.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 3 1077 11
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rax:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:rbx 
  # $48.1: @String = call(clone_295, "Cannot cast ")
  .loc 3 1077 37
  lea rdi, .LABEL__string_40[rip] # "Cannot cast "
  mov [rbp-47], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax 
  # $49.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1077 66
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $49.1:r15 
  # $50.1: @String = load_struct_member($49.1, name)
  .loc 3 1077 66
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $50.1:r14 
  # $51.1: @String = call(append_304, $48.1, $50.1)
  .loc 3 1077 37
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $48.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $51.1:rax 
  # $52.1: @String = call(append_304, $51.1, " to ")
  .loc 3 1077 37
  mov rdi, rax
  lea rsi, .LABEL__string_41[rip] # " to "
  call append_304
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax 
  # $53.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1077 105
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $53.1:r15 
  # $54.1: @String = load_struct_member($53.1, name)
  .loc 3 1077 105
  mov r14, [r15+8]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $54.1:r14 
  # $55.1: @String = call(append_304, $52.1, $54.1)
  .loc 3 1077 37
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $52.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $55.1:rax 
  # call(abort_264, $47.1, $55.1)
  .loc 3 1077 5
  mov rdi, [rbp-47]
  mov rsi, rax
  call abort_264
  # [discarded value]: $47.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [discarded value]: $38.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
.LABEL__convert_cast_expression_108__23:
  # $42.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1074 78
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rbx 
  # IR_Int32_Type.10: @Object_Type = load_variable(IR_Int32_Type)
  lea r15, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rbx IR_Int32_Type.10:r15 
  # $41.2: Boolean = call(is_293, $42.1, IR_Int32_Type.10)
  .loc 3 1074 78
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $42.1
  # [discarded value]: IR_Int32_Type.10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:rax:[rbp-39] 
  # jump(block.24)
  mov [rbp-39], al
  jmp .LABEL__convert_cast_expression_108__24
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:[rbp-39] 
  # [discarded value]: $41.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
.LABEL__convert_cast_expression_108__16:
  # $31.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1071 79
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rbx 
  # IR_Int8_Type.9: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rbx IR_Int8_Type.9:r15 
  # $30.2: Boolean = call(is_293, $31.1, IR_Int8_Type.9)
  .loc 3 1071 79
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $31.1
  # [discarded value]: IR_Int8_Type.9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:rax:[rbp-37] 
  # jump(block.17)
  mov [rbp-37], al
  jmp .LABEL__convert_cast_expression_108__17
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:[rbp-37] 
  # [discarded value]: $30.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
.LABEL__convert_cast_expression_108__9:
  # $20.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 3 1068 79
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  # IR_Int8_Type.8: @Object_Type = load_variable(IR_Int8_Type)
  lea r15, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx IR_Int8_Type.8:r15 
  # $19.2: Boolean = call(is_293, $20.1, IR_Int8_Type.8)
  .loc 3 1068 79
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $20.1
  # [discarded value]: IR_Int8_Type.8
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:rax:[rbp-35] 
  # jump(block.10)
  mov [rbp-35], al
  jmp .LABEL__convert_cast_expression_108__10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:[rbp-35] 
  # [discarded value]: $19.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: cast_expression.1
  # [discarded value]: value.1
  # [discarded value]: result_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_cast_expression_108__end:
  mov rsp, rbp
  pop rbp
  ret

convert_cast_expression_108__stack_frame_size: .word 48

  .loc 3 1080 1
  .text
convert_divide_expression_109:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_divide_expression_109__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_divide_expression_109__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Divide_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1081 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1081 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1081 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1082 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1082 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1082 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.13: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.13:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.13)
  .loc 3 1083 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.13
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_divide_expression_109__3
.LABEL__convert_divide_expression_109__2:
  # IR_Constant_Value.14: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.14:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.14)
  .loc 3 1083 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.14
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_divide_expression_109__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1083 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_divide_expression_109__5
.LABEL__convert_divide_expression_109__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1084 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1084 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_divide_expression_109__5:
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1086 88
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rbx 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1086 65
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Divide_Instruction = new(IR_Divide_Instruction)
  .loc 3 1086 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Divide_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1086 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1086 137
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1086 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1086 5
  jmp .LABEL__convert_divide_expression_109__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_divide_expression_109__end:
  mov rsp, rbp
  pop rbp
  ret

convert_divide_expression_109__stack_frame_size: .word 64

  .loc 3 1089 1
  .text
convert_equals_expression_110:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_equals_expression_110__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_equals_expression_110__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1090 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, null)
  .loc 3 1090 19
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_99
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1091 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $3.1, null)
  .loc 3 1091 20
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_99
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1092 9
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 3 1092 32
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  # $7.1: Boolean = call(equals_141, $5.1, $6.1)
  .loc 3 1092 9
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call equals_141
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  # $9.1: Boolean = $7.1 == false
  .loc 3 1092 9
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, block.2, block.3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_equals_expression_110__3
.LABEL__convert_equals_expression_110__2:
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1092 63
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx 
  # IR_Pointer_Type.16: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx IR_Pointer_Type.16:r15 
  # $12.1: Boolean = call(is_293, $10.1, IR_Pointer_Type.16)
  .loc 3 1092 63
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $10.1
  # [discarded value]: IR_Pointer_Type.16
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, block.4, block.5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_equals_expression_110__5
.LABEL__convert_equals_expression_110__4:
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 3 1092 102
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  # IR_Null_Type.6: @Object_Type = load_variable(IR_Null_Type)
  lea r15, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx IR_Null_Type.6:r15 
  # $14.1: Boolean = call(is_293, $13.1, IR_Null_Type.6)
  .loc 3 1092 102
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $13.1
  # [discarded value]: IR_Null_Type.6
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  # $12.2: Boolean = $14.1 == false
  .loc 3 1092 102
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(block.5)
  mov [rbp-34], bl
.LABEL__convert_equals_expression_110__5:
  # $9.2: Boolean = phi($12.1, $12.2)
  .loc 3 1092 63
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax:[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__convert_equals_expression_110__3:
  # $9.3: Boolean = phi($9.1, $9.2)
  .loc 3 1092 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_equals_expression_110__7
.LABEL__convert_equals_expression_110__6:
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1093 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rbx 
  # call(abort_264, $16.1, "Operands are not the same type")
  .loc 3 1093 9
  mov rdi, rbx
  lea rsi, .LABEL__string_209[rip] # "Operands are not the same type"
  call abort_264
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_equals_expression_110__7:
  # IR_Constant_Value.15: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] IR_Constant_Value.15:rax 
  # $18.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.15)
  .loc 3 1095 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.15
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, block.8, block.9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_equals_expression_110__9
.LABEL__convert_equals_expression_110__8:
  # IR_Constant_Value.16: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] IR_Constant_Value.16:rax 
  # $18.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.16)
  .loc 3 1095 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.16
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(block.9)
  mov [rbp-35], al
.LABEL__convert_equals_expression_110__9:
  # $18.3: Boolean = phi($18.1, $18.2)
  .loc 3 1095 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, block.10, block.11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_equals_expression_110__11
.LABEL__convert_equals_expression_110__10:
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1096 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $20.1:rbx 
  # call(abort_264, $20.1, "TODO: Evaluate constant expression")
  .loc 3 1096 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
.LABEL__convert_equals_expression_110__11:
  # $21.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1098 99
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:rax 
  # $22.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $21.1)
  .loc 3 1098 76
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:rax 
  # $23.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-43], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # store_struct_member($23.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # store_struct_member($23.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # store_struct_member($23.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # $24.1: @IR_Equals_Comparison_Instruction = new(IR_Equals_Comparison_Instruction)
  .loc 3 1098 24
  mov [rbp-51], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, result_value, $22.1)
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, operand_values, $23.1)
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # $25.1: @IR_Binary_Instruction = call(init_188, $24.1, left_value.1, right_value.1)
  .loc 3 1098 24
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_188
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $25.1:rax 
  # $26.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1098 163
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $25.1:rax $26.1:r15 
  # $27.1: @IR_Variable_Value = call(append_71, self.1, $25.1, $26.1)
  .loc 3 1098 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $27.1:rax 
  # return($27.1)
  .loc 3 1098 5
  jmp .LABEL__convert_equals_expression_110__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $9.1
  # [live values]: 
.LABEL__convert_equals_expression_110__end:
  mov rsp, rbp
  pop rbp
  ret

convert_equals_expression_110__stack_frame_size: .word 64

  .loc 3 1101 1
  .text
convert_greater_than_expression_111:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_expression_111__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_expression_111__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1102 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1102 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1102 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1103 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1103 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1103 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.17: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.17:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.17)
  .loc 3 1104 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.17
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_greater_than_expression_111__3
.LABEL__convert_greater_than_expression_111__2:
  # IR_Constant_Value.18: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.18:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.18)
  .loc 3 1104 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.18
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_greater_than_expression_111__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1104 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_greater_than_expression_111__5
.LABEL__convert_greater_than_expression_111__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1105 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1105 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_greater_than_expression_111__5:
  # $11.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1107 105
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rax 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1107 82
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Greater_Than_Comparison_Instruction = new(IR_Greater_Than_Comparison_Instruction)
  .loc 3 1107 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Greater_Than_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1107 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1107 169
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1107 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1107 5
  jmp .LABEL__convert_greater_than_expression_111__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_greater_than_expression_111__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_expression_111__stack_frame_size: .word 64

  .loc 3 1110 1
  .text
convert_greater_than_or_equals_expression_112:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_or_equals_expression_112__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_or_equals_expression_112__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1111 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1111 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1111 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1112 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1112 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1112 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.19: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.19:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.19)
  .loc 3 1113 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.19
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_greater_than_or_equals_expression_112__3
.LABEL__convert_greater_than_or_equals_expression_112__2:
  # IR_Constant_Value.20: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.20:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.20)
  .loc 3 1113 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.20
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_greater_than_or_equals_expression_112__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1113 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_greater_than_or_equals_expression_112__5
.LABEL__convert_greater_than_or_equals_expression_112__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1114 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1114 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_greater_than_or_equals_expression_112__5:
  # $11.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1116 115
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rax 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1116 92
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Greater_Than_Or_Equals_Comparison_Instruction = new(IR_Greater_Than_Or_Equals_Comparison_Instruction)
  .loc 3 1116 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Greater_Than_Or_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1116 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1116 179
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1116 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1116 5
  jmp .LABEL__convert_greater_than_or_equals_expression_112__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_greater_than_or_equals_expression_112__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_or_equals_expression_112__stack_frame_size: .word 64

  .loc 3 1119 1
  .text
convert_less_than_expression_113:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_expression_113__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_expression_113__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1120 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1120 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1120 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1121 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1121 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1121 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.21: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.21:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.21)
  .loc 3 1122 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.21
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_less_than_expression_113__3
.LABEL__convert_less_than_expression_113__2:
  # IR_Constant_Value.22: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.22:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.22)
  .loc 3 1122 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.22
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_less_than_expression_113__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1122 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_less_than_expression_113__5
.LABEL__convert_less_than_expression_113__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1123 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1123 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_less_than_expression_113__5:
  # $11.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1125 102
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rax 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1125 79
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Less_Than_Comparison_Instruction = new(IR_Less_Than_Comparison_Instruction)
  .loc 3 1125 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Less_Than_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1125 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1125 166
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1125 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1125 5
  jmp .LABEL__convert_less_than_expression_113__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_less_than_expression_113__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_expression_113__stack_frame_size: .word 64

  .loc 3 1128 1
  .text
convert_less_than_or_equals_expression_114:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_or_equals_expression_114__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_or_equals_expression_114__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1129 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1129 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1129 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1130 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1130 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1130 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.23: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.23:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.23)
  .loc 3 1131 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.23
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_less_than_or_equals_expression_114__3
.LABEL__convert_less_than_or_equals_expression_114__2:
  # IR_Constant_Value.24: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.24:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.24)
  .loc 3 1131 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.24
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_less_than_or_equals_expression_114__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1131 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_less_than_or_equals_expression_114__5
.LABEL__convert_less_than_or_equals_expression_114__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1132 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1132 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_less_than_or_equals_expression_114__5:
  # $11.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1134 112
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rax 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1134 89
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Less_Than_Or_Equals_Comparison_Instruction = new(IR_Less_Than_Or_Equals_Comparison_Instruction)
  .loc 3 1134 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Less_Than_Or_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1134 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1134 176
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1134 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1134 5
  jmp .LABEL__convert_less_than_or_equals_expression_114__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_less_than_or_equals_expression_114__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_or_equals_expression_114__stack_frame_size: .word 64

  .loc 3 1137 1
  .text
convert_literal_expression_115:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_literal_expression_115__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_literal_expression_115__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1138 9
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # Boolean_Token.4: @Object_Type = load_variable(Boolean_Token)
  lea rbx, Boolean_Token[rip]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax Boolean_Token.4:rbx 
  # $2.1: Boolean = call(is_293, $1.1, Boolean_Token.4)
  .loc 3 1138 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_293
  # [discarded value]: $1.1
  # [discarded value]: Boolean_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_literal_expression_115__3
.LABEL__convert_literal_expression_115__2:
  # $3.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1139 45
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # $4.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1139 87
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $3.1:rax $4.1:r15 
  # $5.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-24] $4.1:[rbp-32] $5.1:rax 
  # $6.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1139 16
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-24] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, type, $3.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, user_instructions, $5.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-32] $6.1:rax 
  # store_struct_member($6.1, literal, $4.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 3 1139 9
  jmp .LABEL__convert_literal_expression_115__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_115__3:
  # $7.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1141 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $7.1:rbx 
  # Character_Token.4: @Object_Type = load_variable(Character_Token)
  lea r15, Character_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $7.1:rbx Character_Token.4:r15 
  # $8.1: Boolean = call(is_293, $7.1, Character_Token.4)
  .loc 3 1141 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $7.1
  # [discarded value]: Character_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # jump($8.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_literal_expression_115__6
.LABEL__convert_literal_expression_115__5:
  # $9.1: @IR_Type = call(get_named_type_60, self.1, "Int8")
  .loc 3 1142 45
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_164[rip] # "Int8"
  call get_named_type_60
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:rax 
  # $10.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1142 84
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $9.1:rax $10.1:r15 
  # $11.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:rax 
  # $12.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1142 16
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:[rbp-40] $12.1:rax 
  # store_struct_member($12.1, type, $9.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $10.1:[rbp-32] $11.1:[rbp-40] $12.1:rax 
  # store_struct_member($12.1, user_instructions, $11.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $10.1:[rbp-32] $12.1:rax 
  # store_struct_member($12.1, literal, $10.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 3 1142 9
  jmp .LABEL__convert_literal_expression_115__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_115__6:
  # $13.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1144 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $13.1:rbx 
  # Integer_Token.6: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $13.1:rbx Integer_Token.6:r15 
  # $14.1: Boolean = call(is_293, $13.1, Integer_Token.6)
  .loc 3 1144 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $13.1
  # [discarded value]: Integer_Token.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $14.1:rax 
  # jump($14.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_literal_expression_115__9
.LABEL__convert_literal_expression_115__8:
  # $15.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1145 45
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_163[rip] # "Int"
  call get_named_type_60
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:rax 
  # $16.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1145 83
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $15.1:rax $16.1:r15 
  # $17.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:[rbp-24] $16.1:[rbp-32] $17.1:rax 
  # store_struct_member($17.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:[rbp-24] $16.1:[rbp-32] $17.1:rax 
  # store_struct_member($17.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:[rbp-24] $16.1:[rbp-32] $17.1:rax 
  # store_struct_member($17.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:[rbp-24] $16.1:[rbp-32] $17.1:rax 
  # $18.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1145 16
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:[rbp-24] $16.1:[rbp-32] $17.1:[rbp-40] $18.1:rax 
  # store_struct_member($18.1, type, $15.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $16.1:[rbp-32] $17.1:[rbp-40] $18.1:rax 
  # store_struct_member($18.1, user_instructions, $17.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $16.1:[rbp-32] $18.1:rax 
  # store_struct_member($18.1, literal, $16.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $18.1:rax 
  # return($18.1)
  .loc 3 1145 9
  jmp .LABEL__convert_literal_expression_115__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_115__9:
  # $19.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1147 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $19.1:rbx 
  # Null_Token.4: @Object_Type = load_variable(Null_Token)
  lea r15, Null_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $19.1:rbx Null_Token.4:r15 
  # $20.1: Boolean = call(is_293, $19.1, Null_Token.4)
  .loc 3 1147 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $19.1
  # [discarded value]: Null_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $20.1:rax 
  # jump($20.1, block.11, block.12)
  test al, al
  jz .LABEL__convert_literal_expression_115__12
.LABEL__convert_literal_expression_115__11:
  # $21.1: @IR_Type = call(get_named_type_60, self.1, "Null")
  .loc 3 1148 45
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_169[rip] # "Null"
  call get_named_type_60
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:rax 
  # $22.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1148 84
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $21.1:rax $22.1:r15 
  # $23.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:[rbp-24] $22.1:[rbp-32] $23.1:rax 
  # store_struct_member($23.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:[rbp-24] $22.1:[rbp-32] $23.1:rax 
  # store_struct_member($23.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:[rbp-24] $22.1:[rbp-32] $23.1:rax 
  # store_struct_member($23.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:[rbp-24] $22.1:[rbp-32] $23.1:rax 
  # $24.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1148 16
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:[rbp-24] $22.1:[rbp-32] $23.1:[rbp-40] $24.1:rax 
  # store_struct_member($24.1, type, $21.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $22.1:[rbp-32] $23.1:[rbp-40] $24.1:rax 
  # store_struct_member($24.1, user_instructions, $23.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $22.1:[rbp-32] $24.1:rax 
  # store_struct_member($24.1, literal, $22.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $24.1:rax 
  # return($24.1)
  .loc 3 1148 9
  jmp .LABEL__convert_literal_expression_115__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_115__12:
  # $25.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1150 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $25.1:rbx 
  # String_Token.4: @Object_Type = load_variable(String_Token)
  lea r15, String_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $25.1:rbx String_Token.4:r15 
  # $26.1: Boolean = call(is_293, $25.1, String_Token.4)
  .loc 3 1150 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $25.1
  # [discarded value]: String_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $26.1:rax 
  # jump($26.1, block.14, block.15)
  test al, al
  jz .LABEL__convert_literal_expression_115__15
.LABEL__convert_literal_expression_115__14:
  # $27.1: @IR_Type = call(get_named_type_60, self.1, "String")
  .loc 3 1151 68
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_210[rip] # "String"
  call get_named_type_60
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # $28.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, $27.1)
  .loc 3 1151 45
  mov rdi, rax
  call create_ir_pointer_type_142
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  # $29.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1151 110
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $28.1:rax $29.1:r15 
  # $30.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:[rbp-24] $29.1:[rbp-32] $30.1:rax 
  # store_struct_member($30.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:[rbp-24] $29.1:[rbp-32] $30.1:rax 
  # store_struct_member($30.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:[rbp-24] $29.1:[rbp-32] $30.1:rax 
  # store_struct_member($30.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:[rbp-24] $29.1:[rbp-32] $30.1:rax 
  # $31.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1151 16
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:[rbp-24] $29.1:[rbp-32] $30.1:[rbp-40] $31.1:rax 
  # store_struct_member($31.1, type, $28.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $29.1:[rbp-32] $30.1:[rbp-40] $31.1:rax 
  # store_struct_member($31.1, user_instructions, $30.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $29.1:[rbp-32] $31.1:rax 
  # store_struct_member($31.1, literal, $29.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $31.1:rax 
  # return($31.1)
  .loc 3 1151 9
  jmp .LABEL__convert_literal_expression_115__end
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_115__15:
  # $32.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1153 9
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $32.1:rbx 
  # Undefined_Token.3: @Object_Type = load_variable(Undefined_Token)
  lea r15, Undefined_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $32.1:rbx Undefined_Token.3:r15 
  # $33.1: Boolean = call(is_293, $32.1, Undefined_Token.3)
  .loc 3 1153 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $32.1
  # [discarded value]: Undefined_Token.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $33.1:rax 
  # jump($33.1, block.17, block.18)
  test al, al
  jz .LABEL__convert_literal_expression_115__18
.LABEL__convert_literal_expression_115__17:
  # $34.1: @IR_Type = call(get_named_type_60, self.1, "Undefined")
  .loc 3 1154 45
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_170[rip] # "Undefined"
  call get_named_type_60
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:rax 
  # $35.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1154 89
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $34.1:rax $35.1:r15 
  # $36.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:[rbp-24] $35.1:[rbp-32] $36.1:rax 
  # store_struct_member($36.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:[rbp-24] $35.1:[rbp-32] $36.1:rax 
  # store_struct_member($36.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:[rbp-24] $35.1:[rbp-32] $36.1:rax 
  # store_struct_member($36.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:[rbp-24] $35.1:[rbp-32] $36.1:rax 
  # $37.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1154 16
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:[rbp-24] $35.1:[rbp-32] $36.1:[rbp-40] $37.1:rax 
  # store_struct_member($37.1, type, $34.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $35.1:[rbp-32] $36.1:[rbp-40] $37.1:rax 
  # store_struct_member($37.1, user_instructions, $36.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $35.1:[rbp-32] $37.1:rax 
  # store_struct_member($37.1, literal, $35.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $37.1:rax 
  # return($37.1)
  .loc 3 1154 9
  jmp .LABEL__convert_literal_expression_115__end
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_115__18:
  # $38.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1156 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $38.1:rbx 
  # $39.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1156 32
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $38.1:rbx $39.1:r15 
  # $40.1: @Object_Type = load_struct_member($39.1, object_type)
  .loc 3 1156 32
  mov r14, [r15+0]
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $38.1:rbx $40.1:r14 
  # call(abort_138, $38.1, $40.1)
  .loc 3 1156 5
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $38.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_literal_expression_115__end:
  mov rsp, rbp
  pop rbp
  ret

convert_literal_expression_115__stack_frame_size: .word 48

  .loc 3 1159 1
  .text
convert_logic_and_expression_116:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_and_expression_116__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_and_expression_116__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_And_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1160 19
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 3 1160 19
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # next_block.1: @IR_Block = call(create_block_157, $2.1)
  .loc 3 1160 19
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_157
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1161 18
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 3 1161 18
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  # end_block.1: @IR_Block = call(create_block_157, $5.1)
  .loc 3 1161 18
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_157
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1162 43
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  # $8.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1162 71
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $7.1, $8.1)
  .loc 3 1162 19
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  # $10.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1163 50
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-40], rax
  call get_named_type_60
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  # result_variable.1: @IR_Variable = call(create_temp_variable_69, self.1, $10.1)
  .loc 3 1163 24
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_69
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_64, self.1, result_variable.1)
  .loc 3 1164 26
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_64
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, result_value_left.1, left_value.1)
  .loc 3 1165 17
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_179
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1165 75
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  # $15.1: @IR_Variable_Value = call(append_71, self.1, $13.1, $14.1)
  .loc 3 1165 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1166 5
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_155, $16.1, result_value_left.1, next_block.1, end_block.1)
  .loc 3 1166 5
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call append_jump_155
  # [discarded value]: result_value_left.1
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # store_struct_member(self.1, current_block, next_block.1)
  .loc 3 1167 5
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1168 44
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  # $19.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1168 73
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-56], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $18.1, $19.1)
  .loc 3 1168 20
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  # $21.1: @IR_Variable_Value = call(create_variable_value_64, self.1, result_variable.1)
  .loc 3 1169 43
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_64
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, $21.1, right_value.1)
  .loc 3 1169 17
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_179
  # [discarded value]: right_value.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1169 102
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  # $24.1: @IR_Variable_Value = call(append_71, self.1, $22.1, $23.1)
  .loc 3 1169 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1170 5
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $25.1, end_block.1)
  .loc 3 1170 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_154
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 3 1171 5
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  # $27.1: @IR_Variable_Value = call(create_variable_value_64, self.1, result_variable.1)
  .loc 3 1172 50
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_64
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_191, $27.1)
  .loc 3 1172 24
  mov rdi, rax
  call create_ir_phi_instruction_191
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1172 96
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  # $30.1: @IR_Variable_Value = call(append_71, self.1, $28.1, $29.1)
  .loc 3 1172 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: self.1
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: $30.1:rax 
  # return($30.1)
  .loc 3 1172 5
  jmp .LABEL__convert_logic_and_expression_116__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_and_expression_116__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_and_expression_116__stack_frame_size: .word 64

  .loc 3 1175 1
  .text
convert_logic_or_expression_117:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_or_expression_117__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_or_expression_117__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_Or_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1176 19
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 3 1176 19
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # next_block.1: @IR_Block = call(create_block_157, $2.1)
  .loc 3 1176 19
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_157
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1177 18
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 3 1177 18
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  # end_block.1: @IR_Block = call(create_block_157, $5.1)
  .loc 3 1177 18
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_157
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1178 43
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  # $8.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1178 71
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $7.1, $8.1)
  .loc 3 1178 19
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  # $10.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1179 50
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-40], rax
  call get_named_type_60
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  # result_variable.1: @IR_Variable = call(create_temp_variable_69, self.1, $10.1)
  .loc 3 1179 24
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_69
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_64, self.1, result_variable.1)
  .loc 3 1180 26
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_64
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, result_value_left.1, left_value.1)
  .loc 3 1181 17
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_179
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1181 75
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  # $15.1: @IR_Variable_Value = call(append_71, self.1, $13.1, $14.1)
  .loc 3 1181 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1182 5
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_155, $16.1, result_value_left.1, end_block.1, next_block.1)
  .loc 3 1182 5
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  mov rcx, [rbp-24]
  call append_jump_155
  # [discarded value]: result_value_left.1
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # store_struct_member(self.1, current_block, next_block.1)
  .loc 3 1183 5
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1184 44
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  # $19.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1184 73
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  mov [rbp-56], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $18.1, $19.1)
  .loc 3 1184 20
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  # $21.1: @IR_Variable_Value = call(create_variable_value_64, self.1, result_variable.1)
  .loc 3 1185 43
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_64
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_179, $21.1, right_value.1)
  .loc 3 1185 17
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_179
  # [discarded value]: right_value.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1185 102
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  # $24.1: @IR_Variable_Value = call(append_71, self.1, $22.1, $23.1)
  .loc 3 1185 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 3 1186 5
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_154, $25.1, end_block.1)
  .loc 3 1186 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_154
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 3 1187 5
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  # $27.1: @IR_Variable_Value = call(create_variable_value_64, self.1, result_variable.1)
  .loc 3 1188 50
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_64
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_191, $27.1)
  .loc 3 1188 24
  mov rdi, rax
  call create_ir_phi_instruction_191
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1188 96
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  # $30.1: @IR_Variable_Value = call(append_71, self.1, $28.1, $29.1)
  .loc 3 1188 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: self.1
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: $30.1:rax 
  # return($30.1)
  .loc 3 1188 5
  jmp .LABEL__convert_logic_or_expression_117__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_or_expression_117__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_or_expression_117__stack_frame_size: .word 64

  .loc 3 1191 1
  .text
convert_member_access_expression_118:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_118__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_118__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  .loc 3 1192 45
  mov rax, [rsi+16]
  # [live values]: self.1:rdi member_access_expression.1:rsi $1.1:rax 
  # object_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, null)
  .loc 3 1192 21
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_99
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax 
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  .loc 3 1193 26
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx 
  # IR_Pointer_Type.17: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx IR_Pointer_Type.17:r15 
  # $4.1: Boolean = call(is_293, object_value_type.1, IR_Pointer_Type.17)
  .loc 3 1194 10
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  mov [rbp-32], rbx
  call is_293
  # [discarded value]: IR_Pointer_Type.17
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:rax 
  # $5.1: Boolean = $4.1 == false
  .loc 3 1194 9
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:rbx 
  # jump($5.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_member_access_expression_118__3
.LABEL__convert_member_access_expression_118__2:
  # $6.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 3 1195 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:rbx 
  # $7.1: @String = call(clone_295, "Not an IR_Pointer_Type value: ")
  .loc 3 1195 50
  lea rdi, .LABEL__string_199[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-40], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # $8.1: @String = load_struct_member(object_value_type.1, name)
  .loc 3 1195 97
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:rbx:[rbp-32] $6.1:[rbp-40] $7.1:rax $8.1:r15 
  # $9.1: @String = call(append_304, $7.1, $8.1)
  .loc 3 1195 50
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:[rbp-40] $9.1:rax 
  # call(abort_264, $6.1, $9.1)
  .loc 3 1195 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_264
  # [discarded value]: $6.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
.LABEL__convert_member_access_expression_118__3:
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  .loc 3 1197 26
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax 
  # $11.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  .loc 3 1198 10
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax $11.1:rbx 
  # IR_Struct_Type.12: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax $11.1:rbx IR_Struct_Type.12:r15 
  # $12.1: Boolean = call(is_293, $11.1, IR_Struct_Type.12)
  .loc 3 1198 10
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  call is_293
  # [discarded value]: $11.1
  # [discarded value]: IR_Struct_Type.12
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $12.1:rax 
  # $13.1: Boolean = $12.1 == false
  .loc 3 1198 9
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $13.1:rbx 
  # jump($13.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_member_access_expression_118__5
.LABEL__convert_member_access_expression_118__4:
  # $14.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 3 1199 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:rbx 
  # $15.1: @String = call(clone_295, "Not a IR_Struct_Type pointer value: ")
  .loc 3 1199 50
  lea rdi, .LABEL__string_211[rip] # "Not a IR_Struct_Type pointer value: "
  mov [rbp-48], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:[rbp-48] $15.1:rax 
  # $16.1: @String = load_struct_member(object_value_type.1, name)
  .loc 3 1199 103
  mov rbx, [rbp-40]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rbx:[rbp-40] $14.1:[rbp-48] $15.1:rax $16.1:r15 
  # $17.1: @String = call(append_304, $15.1, $16.1)
  .loc 3 1199 50
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:[rbp-48] $17.1:rax 
  # call(abort_264, $14.1, $17.1)
  .loc 3 1199 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $14.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] 
.LABEL__convert_member_access_expression_118__5:
  # struct_type.1: @IR_Struct_Type = load_struct_member(object_value_type.1, pointed_type)
  .loc 3 1201 20
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax:[rbp-40] struct_type.1:rbx 
  # $20.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 3 1202 50
  mov r15, [rbp-8]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:r15:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax:[rbp-40] struct_type.1:rbx $20.1:r14 
  # $21.1: @String = load_struct_member($20.1, lexeme)
  .loc 3 1202 50
  mov r13, [r14+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:r15:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax:[rbp-40] struct_type.1:rbx $21.1:r13 
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_147, struct_type.1, $21.1)
  .loc 3 1202 27
  mov rdi, rbx
  mov rsi, r13
  mov [rbp-48], rbx
  call get_member_147
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax 
  # $23.1: Boolean = struct_type_member.1 == null
  .loc 3 1203 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax $23.1:rbx 
  # jump($23.1, block.6, block.7)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__convert_member_access_expression_118__7
.LABEL__convert_member_access_expression_118__6:
  # call(dump_struct_members_119, struct_type.1)
  .loc 3 1204 9
  mov rdi, [rbp-48]
  call dump_struct_members_119
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # $24.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 3 1205 15
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $24.1:rbx 
  # $25.1: @Source_Location = load_struct_member($24.1, location)
  .loc 3 1205 15
  mov r15, [rbx+16]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:r15 
  # $26.1: @String = load_struct_member(struct_type.1, name)
  .loc 3 1205 68
  mov rbx, [rbp-48]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:rbx:[rbp-48] struct_type_member.1:[rbp-56] $25.1:r15 $26.1:r14 
  # $27.1: @String = call(clone_295, $26.1)
  .loc 3 1205 62
  mov rdi, r14
  mov [rbp-64], r15
  call clone_295
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $27.1:rax 
  # $28.1: @String = call(append_304, $27.1, " has no such member: ")
  .loc 3 1205 62
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # " has no such member: "
  call append_304
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $28.1:rax 
  # $29.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 3 1205 125
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $28.1:rax $29.1:r15 
  # $30.1: @String = load_struct_member($29.1, lexeme)
  .loc 3 1205 125
  mov r14, [r15+8]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $28.1:rax $30.1:r14 
  # $31.1: @String = call(append_304, $28.1, $30.1)
  .loc 3 1205 62
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $28.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $31.1:rax 
  # call(abort_264, $25.1, $31.1)
  .loc 3 1205 9
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_264
  # [discarded value]: $25.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_member_access_expression_118__7:
  # $32.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 1207 9
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $32.1:rbx 
  # IR_Struct_Type.13: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $32.1:rbx IR_Struct_Type.13:r15 
  # $33.1: Boolean = call(is_293, $32.1, IR_Struct_Type.13)
  .loc 3 1207 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $32.1
  # [discarded value]: IR_Struct_Type.13
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $33.1:rax 
  # jump($33.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_member_access_expression_118__9
.LABEL__convert_member_access_expression_118__8:
  # $34.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 1208 115
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $34.1:rbx 
  # $35.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, $34.1)
  .loc 3 1208 92
  mov rdi, rbx
  call create_ir_pointer_type_142
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $35.1:rax 
  # $36.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $35.1)
  .loc 3 1208 69
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $36.1:rax 
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_172, $36.1, object_value.1, struct_type_member.1, true)
  .loc 3 1208 28
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-56]
  mov cl, 1
  call create_ir_load_struct_member_instruction_172
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $37.1:rax 
  # $38.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 3 1208 183
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $37.1:rax $38.1:r15 
  # $39.1: @IR_Variable_Value = call(append_71, self.1, $37.1, $38.1)
  .loc 3 1208 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $39.1:rax 
  # return($39.1)
  .loc 3 1208 9
  jmp .LABEL__convert_member_access_expression_118__end
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_member_access_expression_118__9:
  # $40.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 1210 88
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax:[rbp-56] $40.1:rbx 
  # $41.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $40.1)
  .loc 3 1210 65
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $41.1:rax 
  # $42.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_172, $41.1, object_value.1, struct_type_member.1, false)
  .loc 3 1210 24
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-56]
  mov cl, 0
  call create_ir_load_struct_member_instruction_172
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $42.1:rax 
  # $43.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 3 1210 156
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $42.1:rax $43.1:r15 
  # $44.1: @IR_Variable_Value = call(append_71, self.1, $42.1, $43.1)
  .loc 3 1210 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $44.1:rax 
  # return($44.1)
  .loc 3 1210 5
  jmp .LABEL__convert_member_access_expression_118__end
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [discarded value]: struct_type.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] 
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: object_value.1
  # [discarded value]: object_value_type.1
  # [live values]: 
.LABEL__convert_member_access_expression_118__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_118__stack_frame_size: .word 64

  .loc 3 1213 1
  .text
dump_struct_members_119:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_struct_members_119__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_struct_members_119__1:
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: struct_type.1:rdi 
  # stderr.4: @FILE = load_variable(stderr)
  # [live values]: struct_type.1:rdi stderr.4:stderr[rip] 
  # $1.1: @FILE = call(end_line_290, stderr.4)
  .loc 3 1214 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_290
  # [discarded value]: stderr.4
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] 
  # jump(block.2)
.LABEL__dump_struct_members_119__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.6)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # $2.1: Boolean = struct_type.2 != null
  .loc 3 1215 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__dump_struct_members_119__4
.LABEL__dump_struct_members_119__3:
  # $3.1: @AST_Struct_Statement = load_struct_member(struct_type.2, statement)
  .loc 3 1216 37
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $3.1:rbx 
  # $4.1: @List = load_struct_member($3.1, members)
  .loc 3 1216 37
  mov r15, [rbx+32]
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $4.1:r15 
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  .loc 3 1216 37
  mov rbx, [r15+0]
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] struct_type_members_item.1:rbx 
  # jump(block.5)
  mov [rbp-16], rbx
.LABEL__dump_struct_members_119__5:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] 
  # $6.1: Boolean = struct_type_members_item.2 != null
  .loc 3 1217 16
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, block.6, block.7)
  test al, al
  jz .LABEL__dump_struct_members_119__7
.LABEL__dump_struct_members_119__6:
  # struct_type_member.1: @AST_Struct_Member = load_struct_member(struct_type_members_item.2, data)
  .loc 3 1218 35
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:rax:[rbp-16] struct_type_member.1:rbx 
  # $9.1: @Identifier_Token = load_struct_member(struct_type_member.1, name)
  .loc 3 1219 40
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:rax:[rbp-16] struct_type_member.1:rbx $9.1:r15 
  # struct_type_member_name.1: @String = load_struct_member($9.1, lexeme)
  .loc 3 1219 40
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:rax:[rbp-16] struct_type_member.1:rbx struct_type_member_name.1:r14 
  # $11.1: @IR_Struct_Type_Member = call(get_member_147, struct_type.2, struct_type_member_name.1)
  .loc 3 1220 40
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-24], rbx
  mov [rbp-32], r14
  call get_member_147
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member.1:[rbp-24] struct_type_member_name.1:[rbp-32] $11.1:rax 
  # struct_type_member_type.1: @IR_Type = load_struct_member($11.1, type)
  .loc 3 1220 40
  mov rbx, [rax+16]
  # [discarded value]: $11.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member.1:[rbp-24] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:rbx 
  # stderr.5: @FILE = load_variable(stderr)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member.1:[rbp-24] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:rbx stderr.5:stderr[rip] 
  # $13.1: @Source_Location = load_struct_member(struct_type_member.1, location)
  .loc 3 1221 26
  mov rax, [rbp-24]
  mov r15, [rax+0]
  # [discarded value]: struct_type_member.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:rbx stderr.5:stderr[rip] $13.1:r15 
  # $14.1: @FILE = call(write_267, stderr.5, $13.1)
  .loc 3 1221 13
  mov rdi, stderr[rip]
  mov rsi, r15
  mov [rbp-40], rbx
  call write_267
  # [discarded value]: stderr.5
  # [discarded value]: $13.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:[rbp-40] $14.1:rax 
  # $15.1: @FILE = call(write_287, $14.1, ": ")
  .loc 3 1221 13
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $14.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:[rbp-40] $15.1:rax 
  # $16.1: @String = load_struct_member(struct_type.2, name)
  .loc 3 1221 73
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rbx:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:[rbp-40] $15.1:rax $16.1:r15 
  # $17.1: @FILE = call(write_287, $15.1, $16.1)
  .loc 3 1221 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:[rbp-40] $17.1:rax 
  # $18.1: @FILE = call(write_289, $17.1, '.')
  .loc 3 1221 13
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $17.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_name.1:[rbp-32] struct_type_member_type.1:[rbp-40] $18.1:rax 
  # $19.1: @FILE = call(write_287, $18.1, struct_type_member_name.1)
  .loc 3 1221 13
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_287
  # [discarded value]: struct_type_member_name.1
  # [discarded value]: $18.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_type.1:[rbp-40] $19.1:rax 
  # $20.1: @FILE = call(write_287, $19.1, ": ")
  .loc 3 1221 13
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $19.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_member_type.1:[rbp-40] $20.1:rax 
  # $21.1: @String = load_struct_member(struct_type_member_type.1, name)
  .loc 3 1221 151
  mov rbx, [rbp-40]
  mov r15, [rbx+8]
  # [discarded value]: struct_type_member_type.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] $20.1:rax $21.1:r15 
  # $22.1: @FILE = call(write_287, $20.1, $21.1)
  .loc 3 1221 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] $22.1:rax 
  # $23.1: @FILE = call(end_line_290, $22.1)
  .loc 3 1221 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] 
  # struct_type_members_item.4: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  .loc 3 1222 40
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_members_item.4:rbx:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rbx
  jmp .LABEL__dump_struct_members_119__5
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type_members_item.4:[rbp-16] 
  # [discarded value]: struct_type_members_item.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] 
.LABEL__dump_struct_members_119__7:
  # struct_type.6: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 3 1224 23
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type.6:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__dump_struct_members_119__2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] struct_type.6:[rbp-8] 
  # [discarded value]: struct_type.6
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] struct_type_members_item.2:[rbp-16] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type_members_item.1:[rbp-16] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
.LABEL__dump_struct_members_119__4:
  # return()
  jmp .LABEL__dump_struct_members_119__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__dump_struct_members_119__end:
  mov rsp, rbp
  pop rbp
  ret

dump_struct_members_119__stack_frame_size: .word 48

  .loc 3 1228 1
  .text
convert_member_access_expression_address_120:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_address_120__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_address_120__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  # result_type.1: @IR_Type = call(deduce_expression_type_133, self.1, member_access_expression.1)
  .loc 3 1229 20
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call deduce_expression_type_133
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax 
  # IR_Pointer_Type.18: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax IR_Pointer_Type.18:rbx 
  # $2.1: Boolean = call(is_293, result_type.1, IR_Pointer_Type.18)
  .loc 3 1230 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Pointer_Type.18
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_member_access_expression_address_120__3
.LABEL__convert_member_access_expression_address_120__2:
  # $3.1: @IR_Value = call(convert_member_access_expression_118, self.1, member_access_expression.1)
  .loc 3 1231 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call convert_member_access_expression_118
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $3.1:rax 
  # return($3.1)
  .loc 3 1231 9
  jmp .LABEL__convert_member_access_expression_address_120__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
.LABEL__convert_member_access_expression_address_120__3:
  # $4.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 3 1233 11
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:[rbp-24] $4.1:rbx 
  # $5.1: @Object_Type = load_struct_member(result_type.1, object_type)
  .loc 3 1233 46
  mov r15, [rbp-24]
  mov r14, [r15+0]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:r15:[rbp-24] $4.1:rbx $5.1:r14 
  # call(abort_138, $4.1, $5.1)
  .loc 3 1233 5
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: result_type.1
  # [live values]: 
.LABEL__convert_member_access_expression_address_120__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_address_120__stack_frame_size: .word 32

  .loc 3 1236 1
  .text
convert_modulo_expression_121:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_modulo_expression_121__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_modulo_expression_121__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Modulo_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1237 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1237 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1237 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1238 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1238 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1238 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.25: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.25:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.25)
  .loc 3 1239 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.25
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_modulo_expression_121__3
.LABEL__convert_modulo_expression_121__2:
  # IR_Constant_Value.26: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.26:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.26)
  .loc 3 1239 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.26
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_modulo_expression_121__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1239 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_modulo_expression_121__5
.LABEL__convert_modulo_expression_121__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1240 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1240 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_modulo_expression_121__5:
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1242 88
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rbx 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1242 65
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Modulo_Instruction = new(IR_Modulo_Instruction)
  .loc 3 1242 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Modulo_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1242 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1242 137
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1242 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1242 5
  jmp .LABEL__convert_modulo_expression_121__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_modulo_expression_121__end:
  mov rsp, rbp
  pop rbp
  ret

convert_modulo_expression_121__stack_frame_size: .word 64

  .loc 3 1245 1
  .text
convert_multiply_expression_122:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_multiply_expression_122__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_multiply_expression_122__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Multiply_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1246 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1246 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1246 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1247 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1247 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1247 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.27: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.27:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.27)
  .loc 3 1248 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.27
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_multiply_expression_122__3
.LABEL__convert_multiply_expression_122__2:
  # IR_Constant_Value.28: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.28:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.28)
  .loc 3 1248 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.28
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_multiply_expression_122__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1248 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_multiply_expression_122__5
.LABEL__convert_multiply_expression_122__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1249 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1249 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_multiply_expression_122__5:
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1251 90
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rbx 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1251 67
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Multiply_Instruction = new(IR_Multiply_Instruction)
  .loc 3 1251 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Multiply_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1251 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1251 139
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1251 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1251 5
  jmp .LABEL__convert_multiply_expression_122__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_multiply_expression_122__end:
  mov rsp, rbp
  pop rbp
  ret

convert_multiply_expression_122__stack_frame_size: .word 64

  .loc 3 1254 1
  .text
convert_negate_expression_123:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_negate_expression_123__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_negate_expression_123__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Negate_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, expression)
  .loc 3 1255 38
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1255 61
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1255 14
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rax 
  # $4.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1257 76
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rax $4.1:rbx 
  # $5.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $4.1)
  .loc 3 1257 53
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-32], rax
  call create_temp_value_70
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:rax 
  # $6.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # $7.1: @IR_Substract_Instruction = new(IR_Substract_Instruction)
  .loc 3 1257 9
  mov [rbp-48], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, result_value, $5.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $6.1:[rbp-48] $7.1:rax 
  # store_struct_member($7.1, operand_values, $6.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:rax 
  # store_struct_member($7.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:rax 
  # store_struct_member($7.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:rax 
  # store_struct_member($7.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:rax 
  # $8.1: @IR_Type = load_struct_member(value.1, type)
  .loc 3 1259 24
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rbx:[rbp-32] $7.1:rax $8.1:r15 
  # $9.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1260 69
  mov r14, [rbp-8]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-24] expression.1:r14:[rbp-8] value.1:rbx:[rbp-32] $7.1:rax $8.1:r15 $9.1:r13 
  # $10.1: @Integer_Token = new(Integer_Token)
  .loc 3 1260 27
  mov [rbp-40], rax
  mov [rbp-48], r13
  mov [rbp-56], r15
  mov rdi, 40
  call malloc
  lea rbx, Integer_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $9.1:[rbp-48] $10.1:rax 
  # store_struct_member($10.1, lexeme, "")
  lea rbx, .LABEL__string_213[rip] # ""
  mov [rax+8], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $9.1:[rbp-48] $10.1:rax 
  # store_struct_member($10.1, location, $9.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:rax 
  # store_struct_member($10.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:rax 
  # store_struct_member($10.1, value, 0)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:rax 
  # $11.1: @List = new(List)
  .loc 5 158 32
  mov [rbp-64], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:rax 
  # store_struct_member($11.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:rax 
  # store_struct_member($11.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:rax 
  # store_struct_member($11.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:rax 
  # $12.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 3 1258 13
  mov [rbp-72], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:[rbp-72] $12.1:rax 
  # store_struct_member($12.1, type, $8.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $10.1:[rbp-64] $11.1:[rbp-72] $12.1:rax 
  # store_struct_member($12.1, user_instructions, $11.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $10.1:[rbp-64] $12.1:rax 
  # store_struct_member($12.1, literal, $10.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $12.1:rax 
  # $13.1: @IR_Binary_Instruction = call(init_188, $7.1, $12.1, value.1)
  .loc 3 1257 9
  mov rdi, [rbp-40]
  mov rsi, rax
  mov rdx, [rbp-32]
  call init_188
  # [discarded value]: value.1
  # [discarded value]: $7.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1264 9
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-24] $13.1:rax $14.1:r15 
  # $15.1: @IR_Variable_Value = call(append_71, self.1, $13.1, $14.1)
  .loc 3 1256 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: self.1
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: $15.1:rax 
  # return($15.1)
  .loc 3 1256 5
  jmp .LABEL__convert_negate_expression_123__end
  # [discarded value]: $15.1
  # [live values]: 
.LABEL__convert_negate_expression_123__end:
  mov rsp, rbp
  pop rbp
  ret

convert_negate_expression_123__stack_frame_size: .word 80

  .loc 3 1268 1
  .text
convert_new_expression_124:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_new_expression_124__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_new_expression_124__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Type = load_struct_member(expression.1, type)
  .loc 3 1269 37
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # type.1: @IR_Type = call(convert_value_type_75, self.1, $1.1)
  .loc 3 1269 13
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_value_type_75
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax 
  # IR_Array_Type.2: @Object_Type = load_variable(IR_Array_Type)
  lea rbx, IR_Array_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax IR_Array_Type.2:rbx 
  # $3.1: Boolean = call(is_293, type.1, IR_Array_Type.2)
  .loc 3 1270 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: IR_Array_Type.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_new_expression_124__3
.LABEL__convert_new_expression_124__2:
  # type.1: @IR_Array_Type = type.1
  .loc 3 1271 17
  mov rax, [rbp-24]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:rax 
  # $5.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 3 1272 47
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:rax $5.1:rbx 
  # $6.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1272 69
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call get_named_type_60
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  # size_value.1: @IR_Value = call(convert_expression_99, self.1, $5.1, $6.1)
  .loc 3 1272 23
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:rax 
  # $8.1: @IR_Type = load_struct_member(type.1, pointed_type)
  .loc 3 1275 63
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:rbx:[rbp-32] size_value.1:rax $8.1:r15 
  # $9.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, $8.1)
  .loc 3 1275 40
  mov rdi, r15
  mov [rbp-40], rax
  call create_ir_pointer_type_142
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:[rbp-40] $9.1:rax 
  # $10.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $9.1)
  .loc 3 1275 17
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:[rbp-40] $10.1:rax 
  # $11.1: @IR_Type = load_struct_member(type.1, pointed_type)
  .loc 3 1276 17
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] size_value.1:[rbp-40] $10.1:rax $11.1:r15 
  # $12.1: @IR_New_Instruction = call(create_ir_new_instruction_175, $10.1, $11.1, size_value.1)
  .loc 3 1274 13
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-40]
  call create_ir_new_instruction_175
  # [discarded value]: size_value.1
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $12.1:rax 
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1279 13
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] $12.1:rax $13.1:r15 
  # $14.1: @IR_Variable_Value = call(append_71, self.1, $12.1, $13.1)
  .loc 3 1273 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $14.1:rax 
  # return($14.1)
  .loc 3 1273 9
  jmp .LABEL__convert_new_expression_124__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
.LABEL__convert_new_expression_124__3:
  # IR_Struct_Type.14: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] IR_Struct_Type.14:rax 
  # $15.1: Boolean = call(is_293, type.1, IR_Struct_Type.14)
  .loc 3 1282 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Struct_Type.14
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $15.1:rax 
  # jump($15.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_new_expression_124__6
.LABEL__convert_new_expression_124__5:
  # type.1: @IR_Struct_Type = type.1
  .loc 3 1283 17
  mov rax, [rbp-24]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:rax 
  # $17.1: @List = new(List)
  .loc 3 1284 27
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] $17.1:rax 
  # store_struct_member($17.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] $17.1:rax 
  # store_struct_member($17.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] $17.1:rax 
  # store_struct_member($17.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] $17.1:rax 
  # init_arguments.1: @List = $17.1
  .loc 3 1284 9
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:rax 
  # $18.1: @List = load_struct_member(expression.1, init_arguments)
  .loc 3 1285 60
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:rax $18.1:r15 
  # call(prepare_struct_init_arguments_125, self.1, init_arguments.1, $18.1, type.1, type.1)
  .loc 3 1285 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  mov rcx, [rbp-32]
  mov r8, [rbp-32]
  mov [rbp-40], rax
  call prepare_struct_init_arguments_125
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:[rbp-40] 
  # $19.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, type.1)
  .loc 3 1286 86
  mov rdi, [rbp-32]
  call create_ir_pointer_type_142
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:[rbp-40] $19.1:rax 
  # $20.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $19.1)
  .loc 3 1286 63
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:[rbp-40] $20.1:rax 
  # $21.1: @IR_New_Instruction = call(create_ir_new_instruction_175, $20.1, type.1, null)
  .loc 3 1286 37
  mov rdi, rax
  mov rsi, [rbp-32]
  xor rdx, rdx
  call create_ir_new_instruction_175
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:[rbp-40] $21.1:rax 
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1286 130
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:[rbp-40] $21.1:rax $22.1:r15 
  # result_value.1: @IR_Variable_Value = call(append_71, self.1, $21.1, $22.1)
  .loc 3 1286 25
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] init_arguments.1:[rbp-40] result_value.1:rax 
  # call(apply_struct_init_arguments_127, self.1, result_value.1, type.1, init_arguments.1, expression.1)
  .loc 3 1287 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  mov r8, [rbp-8]
  mov [rbp-48], rax
  call apply_struct_init_arguments_127
  # [discarded value]: type.1
  # [discarded value]: init_arguments.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] result_value.1:[rbp-48] 
  # return(result_value.1)
  .loc 3 1288 9
  mov rax, [rbp-48]
  jmp .LABEL__convert_new_expression_124__end
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
.LABEL__convert_new_expression_124__6:
  # $24.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1290 11
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] type.1:[rbp-24] $24.1:rbx 
  # $25.1: @String = call(clone_295, "Unsupported type: ")
  .loc 3 1290 32
  lea rdi, .LABEL__string_150[rip] # "Unsupported type: "
  mov [rbp-32], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $24.1:[rbp-32] $25.1:rax 
  # $26.1: @String = load_struct_member(type.1, name)
  .loc 3 1290 67
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rbx:[rbp-24] $24.1:[rbp-32] $25.1:rax $26.1:r15 
  # $27.1: @String = call(append_304, $25.1, $26.1)
  .loc 3 1290 32
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $24.1:[rbp-32] $27.1:rax 
  # call(abort_264, $24.1, $27.1)
  .loc 3 1290 5
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_264
  # [discarded value]: $24.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_new_expression_124__end:
  mov rsp, rbp
  pop rbp
  ret

convert_new_expression_124__stack_frame_size: .word 48

  .loc 3 1293 1
  .text
prepare_struct_init_arguments_125:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepare_struct_init_arguments_125__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepare_struct_init_arguments_125__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # init_arguments.1: @List = load_variable(init_arguments)
  # [live values]: self.1:rdi init_arguments.1:rsi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi init_arguments.1:rsi call_arguments.1:rdx 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi init_arguments.1:rsi call_arguments.1:rdx struct_type.1:rcx 
  # base_type.1: @IR_Struct_Type = load_variable(base_type)
  # [live values]: self.1:rdi init_arguments.1:rsi call_arguments.1:rdx struct_type.1:rcx base_type.1:r8 
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  .loc 3 1294 28
  mov rax, [rdx+0]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi init_arguments.1:rsi struct_type.1:rcx base_type.1:r8 call_arguments_item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rcx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-40], r8
.LABEL__prepare_struct_init_arguments_125__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # $2.1: Boolean = call_arguments_item.2 != null
  .loc 3 1295 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__prepare_struct_init_arguments_125__4
.LABEL__prepare_struct_init_arguments_125__3:
  # call_argument.1: @AST_Call_Argument = load_struct_member(call_arguments_item.2, data)
  .loc 3 1296 26
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] call_argument.1:rbx 
  # $5.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  .loc 3 1297 13
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] call_argument.1:rbx $5.1:r15 
  # $6.1: Boolean = $5.1 == null
  .loc 3 1297 13
  cmp r15, 0
  sete r14b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] call_argument.1:rbx $6.1:r14 
  # jump($6.1, block.5, block.6)
  test r14b, r14b
  mov [rbp-48], rbx
  jz .LABEL__prepare_struct_init_arguments_125__6
.LABEL__prepare_struct_init_arguments_125__5:
  # $7.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  .loc 3 1298 19
  mov rax, [rbp-48]
  mov rbx, [rax+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] $7.1:rbx 
  # $8.1: @Source_Location = load_struct_member($7.1, location)
  .loc 3 1298 19
  mov r15, [rbx+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] $8.1:r15 
  # call(abort_264, $8.1, "Struct init argument without name")
  .loc 3 1298 13
  mov rdi, r15
  lea rsi, .LABEL__string_214[rip] # "Struct init argument without name"
  call abort_264
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] 
.LABEL__prepare_struct_init_arguments_125__6:
  # $9.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  .loc 3 1300 31
  mov rax, [rbp-48]
  mov rbx, [rax+0]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] $9.1:rbx 
  # call_argument_name.1: @String = load_struct_member($9.1, lexeme)
  .loc 3 1300 31
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] call_argument_name.1:r15 
  # $11.1: @IR_Call_Argument = call(get_named_argument_126, init_arguments.1, call_argument_name.1)
  .loc 3 1301 13
  mov rdi, [rbp-24]
  mov rsi, r15
  mov [rbp-56], r15
  call get_named_argument_126
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] $11.1:rax 
  # $12.1: Boolean = $11.1 == null
  .loc 3 1301 13
  cmp rax, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] $12.1:rbx 
  # jump($12.1, block.7, block.8)
  test bl, bl
  jz .LABEL__prepare_struct_init_arguments_125__8
.LABEL__prepare_struct_init_arguments_125__7:
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_147, struct_type.1, call_argument_name.1)
  .loc 3 1302 35
  mov rdi, [rbp-16]
  mov rsi, [rbp-56]
  call get_member_147
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:rax 
  # $14.1: Boolean = struct_type_member.1 == null
  .loc 3 1303 17
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:rax $14.1:rbx 
  # jump($14.1, block.9, block.10)
  test bl, bl
  mov [rbp-64], rax
  jz .LABEL__prepare_struct_init_arguments_125__10
.LABEL__prepare_struct_init_arguments_125__9:
  # $15.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  .loc 3 1304 23
  mov rax, [rbp-48]
  mov rbx, [rax+0]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $15.1:rbx 
  # $16.1: @Source_Location = load_struct_member($15.1, location)
  .loc 3 1304 23
  mov r15, [rbx+16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $16.1:r15 
  # $17.1: @String = load_struct_member(struct_type.1, name)
  .loc 3 1304 58
  mov rbx, [rbp-16]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:rbx:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $16.1:r15 $17.1:r14 
  # $18.1: @String = call(clone_295, $17.1)
  .loc 3 1304 52
  mov rdi, r14
  mov [rbp-72], r15
  call clone_295
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $16.1:[rbp-72] $18.1:rax 
  # $19.1: @String = call(append_304, $18.1, " has no such member: ")
  .loc 3 1304 52
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # " has no such member: "
  call append_304
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $16.1:[rbp-72] $19.1:rax 
  # $20.1: @String = call(append_304, $19.1, call_argument_name.1)
  .loc 3 1304 52
  mov rdi, rax
  mov rsi, [rbp-56]
  call append_304
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $16.1:[rbp-72] $20.1:rax 
  # call(abort_264, $16.1, $20.1)
  .loc 3 1304 17
  mov rdi, [rbp-72]
  mov rsi, rax
  call abort_264
  # [discarded value]: $16.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] 
.LABEL__prepare_struct_init_arguments_125__10:
  # $21.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  .loc 3 1306 115
  mov rax, [rbp-48]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $21.1:rbx 
  # $22.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 3 1306 147
  mov r15, [rbp-64]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:rax:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:r15:[rbp-64] $21.1:rbx $22.1:r14 
  # $23.1: @IR_Value = call(convert_expression_99, self.1, $21.1, $22.1)
  .loc 3 1306 91
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_99
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $23.1:rax 
  # $24.1: @IR_Call_Argument = new(IR_Call_Argument)
  .loc 3 1306 35
  mov [rbp-72], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] $23.1:[rbp-72] $24.1:rax 
  # store_struct_member($24.1, name, call_argument_name.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+0], rbx
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:rbx:[rbp-56] struct_type_member.1:[rbp-64] $23.1:[rbp-72] $24.1:rax 
  # store_struct_member($24.1, value, $23.1)
  mov r15, [rbp-72]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:rbx:[rbp-56] struct_type_member.1:[rbp-64] $24.1:rax 
  # call(append_268, init_arguments.1, $24.1)
  .loc 3 1306 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_268
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] 
  # jump(block.8)
.LABEL__prepare_struct_init_arguments_125__8:
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  .loc 3 1308 31
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] call_arguments_item.5:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__prepare_struct_init_arguments_125__2
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] call_arguments_item.5:[rbp-8] 
  # [discarded value]: call_arguments_item.5
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] struct_type_member.1:[rbp-64] 
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] call_argument_name.1:[rbp-56] 
  # [discarded value]: call_argument_name.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-48] 
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
.LABEL__prepare_struct_init_arguments_125__4:
  # $26.1: Boolean = base_type.1 != null
  .loc 3 1310 9
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $26.1:rax 
  # jump($26.1, block.11, block.12)
  test al, al
  jz .LABEL__prepare_struct_init_arguments_125__12
.LABEL__prepare_struct_init_arguments_125__11:
  # $27.1: @AST_Struct_Statement = load_struct_member(base_type.1, statement)
  .loc 3 1311 60
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $27.1:rbx 
  # $28.1: @List = load_struct_member($27.1, init_arguments)
  .loc 3 1311 60
  mov r15, [rbx+40]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $28.1:r15 
  # $29.1: @IR_Struct_Type = load_struct_member(base_type.1, base_type)
  .loc 3 1311 109
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $28.1:r15 $29.1:rbx 
  # call(prepare_struct_init_arguments_125, self.1, init_arguments.1, $28.1, struct_type.1, $29.1)
  .loc 3 1311 9
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  mov rdx, r15
  mov rcx, [rbp-16]
  mov r8, rbx
  call prepare_struct_init_arguments_125
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # jump(block.12)
.LABEL__prepare_struct_init_arguments_125__12:
  # return()
  jmp .LABEL__prepare_struct_init_arguments_125__end
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] init_arguments.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: init_arguments.1
  # [discarded value]: struct_type.1
  # [discarded value]: base_type.1
  # [discarded value]: call_arguments_item.1
  # [live values]: 
.LABEL__prepare_struct_init_arguments_125__end:
  mov rsp, rbp
  pop rbp
  ret

prepare_struct_init_arguments_125__stack_frame_size: .word 80

  .loc 3 1315 1
  .text
get_named_argument_126:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_argument_126__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_argument_126__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: list.1:rdi name.1:rsi 
  # list_item.1: @List_Item = load_struct_member(list.1, first_item)
  .loc 3 1316 18
  mov rax, [rdi+0]
  # [discarded value]: list.1
  # [live values]: name.1:rsi list_item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_named_argument_126__2:
  # list_item.2: @List_Item = phi(list_item.1, list_item.5)
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # $2.1: Boolean = list_item.2 != null
  .loc 3 1317 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__get_named_argument_126__4
.LABEL__get_named_argument_126__3:
  # call_argument.1: @IR_Call_Argument = load_struct_member(list_item.2, data)
  .loc 3 1318 26
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] call_argument.1:rbx 
  # $5.1: @String = load_struct_member(call_argument.1, name)
  .loc 3 1319 25
  mov r15, [rbx+0]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] call_argument.1:rbx $5.1:r15 
  # $6.1: Boolean = call(equals_296, name.1, $5.1)
  .loc 3 1319 13
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rbx
  call equals_296
  # [discarded value]: $5.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] call_argument.1:[rbp-24] $6.1:rax 
  # jump($6.1, block.5, block.6)
  test al, al
  jz .LABEL__get_named_argument_126__6
.LABEL__get_named_argument_126__5:
  # return(call_argument.1)
  .loc 3 1320 13
  mov rax, [rbp-24]
  jmp .LABEL__get_named_argument_126__end
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] call_argument.1:[rbp-24] 
.LABEL__get_named_argument_126__6:
  # list_item.5: @List_Item = load_struct_member(list_item.2, next_item)
  .loc 3 1322 21
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] call_argument.1:[rbp-24] list_item.5:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__get_named_argument_126__2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] call_argument.1:[rbp-24] list_item.5:[rbp-8] 
  # [discarded value]: list_item.5
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] call_argument.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] call_argument.1:[rbp-24] 
  # [discarded value]: call_argument.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
.LABEL__get_named_argument_126__4:
  # return(null)
  .loc 3 1324 5
  xor rax, rax
  jmp .LABEL__get_named_argument_126__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [discarded value]: list_item.2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [discarded value]: name.1
  # [discarded value]: list_item.1
  # [live values]: 
.LABEL__get_named_argument_126__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_argument_126__stack_frame_size: .word 32

  .loc 3 1327 1
  .text
apply_struct_init_arguments_127:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR apply_struct_init_arguments_127__stack_frame_size[rip]
  sub rsp, rax
.LABEL__apply_struct_init_arguments_127__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # object_address_value.1: @IR_Value = load_variable(object_address_value)
  # [live values]: self.1:rdi object_address_value.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx expression.1:r8 
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  .loc 3 1328 9
  mov rax, [rdx+16]
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx expression.1:r8 $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 3 1328 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi object_address_value.1:rsi struct_type.1:rdx call_arguments.1:rcx expression.1:r8 $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-40], r8
  jz .LABEL__apply_struct_init_arguments_127__3
.LABEL__apply_struct_init_arguments_127__2:
  # $3.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  .loc 3 1329 64
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:rax:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] $3.1:rbx 
  # call(apply_struct_init_arguments_127, self.1, object_address_value.1, $3.1, call_arguments.1, expression.1)
  .loc 3 1329 9
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  mov rdx, rbx
  mov rcx, [rbp-8]
  mov r8, [rbp-40]
  call apply_struct_init_arguments_127
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] 
  # jump(block.3)
.LABEL__apply_struct_init_arguments_127__3:
  # $4.1: @List = load_struct_member(struct_type.1, members)
  .loc 3 1331 33
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:rax:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] $4.1:rbx 
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  .loc 3 1331 33
  mov r15, [rbx+0]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:rax:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:r15 
  # jump(block.4)
  mov [rbp-48], r15
.LABEL__apply_struct_init_arguments_127__4:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.5)
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] 
  # $6.1: Boolean = struct_type_members_item.2 != null
  .loc 3 1332 12
  cmp QWORD PTR [rbp-48], 0
  setne al
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] $6.1:rax 
  # jump($6.1, block.5, block.6)
  test al, al
  jz .LABEL__apply_struct_init_arguments_127__6
.LABEL__apply_struct_init_arguments_127__5:
  # struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(struct_type_members_item.2, data)
  .loc 3 1333 31
  mov rax, [rbp-48]
  mov rbx, [rax+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:rax:[rbp-48] struct_type_member.1:rbx 
  # struct_type_member_name.1: @String = load_struct_member(struct_type_member.1, name)
  .loc 3 1334 36
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:rax:[rbp-48] struct_type_member.1:rbx struct_type_member_name.1:r15 
  # call_argument.1: @IR_Call_Argument = call(get_named_argument_126, call_arguments.1, struct_type_member_name.1)
  .loc 3 1335 26
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-56], rbx
  mov [rbp-64], r15
  call get_named_argument_126
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:rax 
  # $11.1: Boolean = call_argument.1 != null
  .loc 3 1336 13
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:rax $11.1:rbx 
  # jump($11.1, block.7, block.9)
  test bl, bl
  mov [rbp-72], rax
  jz .LABEL__apply_struct_init_arguments_127__9
.LABEL__apply_struct_init_arguments_127__7:
  # call_argument_value.1: @IR_Value = load_struct_member(call_argument.1, value)
  .loc 3 1337 36
  mov rax, [rbp-72]
  mov rbx, [rax+8]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:rax:[rbp-72] call_argument_value.1:rbx 
  # $22.1: @IR_Type = load_struct_member(call_argument_value.1, type)
  .loc 3 1338 17
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:rax:[rbp-72] call_argument_value.1:rbx $22.1:r15 
  # IR_Undefined_Type.4: @Object_Type = load_variable(IR_Undefined_Type)
  lea r14, IR_Undefined_Type[rip]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:rax:[rbp-72] call_argument_value.1:rbx $22.1:r15 IR_Undefined_Type.4:r14 
  # $23.1: Boolean = call(is_293, $22.1, IR_Undefined_Type.4)
  .loc 3 1338 17
  mov rdi, r15
  mov rsi, r14
  mov [rbp-80], rbx
  call is_293
  # [discarded value]: $22.1
  # [discarded value]: IR_Undefined_Type.4
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] $23.1:rax 
  # $24.1: Boolean = $23.1 == false
  .loc 3 1338 17
  cmp al, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] $24.1:rbx 
  # jump($24.1, block.10, block.8)
  test bl, bl
  jz .LABEL__apply_struct_init_arguments_127__8
.LABEL__apply_struct_init_arguments_127__10:
  # $25.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction_185, object_address_value.1, struct_type_member.1, call_argument_value.1)
  .loc 3 1339 29
  mov rdi, [rbp-24]
  mov rsi, [rbp-56]
  mov rdx, [rbp-80]
  call create_ir_store_struct_member_instruction_185
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] $25.1:rax 
  # $26.1: @IR_Variable_Value = call(append_71, self.1, $25.1, null)
  .loc 3 1339 17
  mov rdi, [rbp-32]
  mov rsi, rax
  xor rdx, rdx
  call append_71
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] 
  # jump(block.8)
.LABEL__apply_struct_init_arguments_127__8:
  # struct_type_members_item.5: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  .loc 3 1344 36
  mov rax, [rbp-48]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] struct_type_members_item.5:rbx:[rbp-48] 
  # jump(block.4)
  mov [rbp-48], rbx
  jmp .LABEL__apply_struct_init_arguments_127__4
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] struct_type_members_item.5:[rbp-48] 
  # [discarded value]: struct_type_members_item.5
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] call_argument_value.1:[rbp-80] 
  # [discarded value]: call_argument_value.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] 
.LABEL__apply_struct_init_arguments_127__9:
  # stdout.7: @FILE = load_variable(stdout)
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] stdout.7:stdout[rip] 
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1342 26
  mov rax, [rbp-40]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:rax:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] stdout.7:stdout[rip] $12.1:rbx 
  # $13.1: @FILE = call(write_267, stdout.7, $12.1)
  .loc 3 1342 13
  mov rdi, stdout[rip]
  mov rsi, rbx
  call write_267
  # [discarded value]: stdout.7
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, ": ")
  .loc 3 1342 13
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $14.1:rax 
  # $15.1: @String = load_struct_member(struct_type.1, name)
  .loc 3 1342 65
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:rbx:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $14.1:rax $15.1:r15 
  # $16.1: @FILE = call(write_287, $14.1, $15.1)
  .loc 3 1342 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $16.1:rax 
  # $17.1: @FILE = call(write_289, $16.1, '.')
  .loc 3 1342 13
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $17.1:rax 
  # $18.1: @FILE = call(write_287, $17.1, struct_type_member_name.1)
  .loc 3 1342 13
  mov rdi, rax
  mov rsi, [rbp-64]
  call write_287
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $18.1:rax 
  # $19.1: @FILE = call(write_287, $18.1, " is not initialized")
  .loc 3 1342 13
  mov rdi, rax
  lea rsi, .LABEL__string_215[rip] # " is not initialized"
  call write_287
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] $19.1:rax 
  # $20.1: @FILE = call(end_line_290, $19.1)
  .loc 3 1342 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] 
  # jump(block.8)
  jmp .LABEL__apply_struct_init_arguments_127__8
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] struct_type_member.1:[rbp-56] struct_type_member_name.1:[rbp-64] call_argument.1:[rbp-72] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type_member_name.1
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] 
.LABEL__apply_struct_init_arguments_127__6:
  # return()
  jmp .LABEL__apply_struct_init_arguments_127__end
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] struct_type_members_item.2:[rbp-48] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] struct_type_members_item.1:[rbp-48] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] object_address_value.1:[rbp-24] struct_type.1:[rbp-16] call_arguments.1:[rbp-8] expression.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: object_address_value.1
  # [discarded value]: struct_type.1
  # [discarded value]: call_arguments.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__apply_struct_init_arguments_127__end:
  mov rsp, rbp
  pop rbp
  ret

apply_struct_init_arguments_127__stack_frame_size: .word 80

  .loc 3 1354 1
  .text
get_128:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_128__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_128__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # struct_member.1: @IR_Struct_Type_Member = load_variable(struct_member)
  # [live values]: list.1:rdi struct_member.1:rsi 
  # list_item.1: @List_Item = load_struct_member(list.1, first_item)
  .loc 3 1355 18
  mov rax, [rdi+0]
  # [discarded value]: list.1
  # [live values]: struct_member.1:rsi list_item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_128__2:
  # list_item.2: @List_Item = phi(list_item.1, list_item.5)
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # $2.1: Boolean = list_item.2 != null
  .loc 3 1356 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__get_128__4
.LABEL__get_128__3:
  # struct_member_value.1: @IR_Struct_Member_Value = load_struct_member(list_item.2, data)
  .loc 3 1357 32
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] struct_member_value.1:rbx 
  # $5.1: @IR_Struct_Type_Member = load_struct_member(struct_member_value.1, struct_member)
  .loc 3 1358 13
  mov r15, [rbx+0]
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] struct_member_value.1:rbx $5.1:r15 
  # $6.1: Boolean = $5.1 == struct_member.1
  .loc 3 1358 13
  cmp r15, QWORD PTR [rbp-16]
  sete r14b
  # [discarded value]: $5.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] struct_member_value.1:rbx $6.1:r14 
  # jump($6.1, block.5, block.6)
  test r14b, r14b
  mov [rbp-24], rbx
  jz .LABEL__get_128__6
.LABEL__get_128__5:
  # return(struct_member_value.1)
  .loc 3 1359 13
  mov rax, [rbp-24]
  jmp .LABEL__get_128__end
  # [discarded value]: $6.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] struct_member_value.1:[rbp-24] 
.LABEL__get_128__6:
  # list_item.5: @List_Item = load_struct_member(list_item.2, next_item)
  .loc 3 1361 21
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] struct_member_value.1:[rbp-24] list_item.5:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__get_128__2
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] struct_member_value.1:[rbp-24] list_item.5:[rbp-8] 
  # [discarded value]: list_item.5
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] struct_member_value.1:[rbp-24] 
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] struct_member_value.1:[rbp-24] 
  # [discarded value]: struct_member_value.1
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
.LABEL__get_128__4:
  # return(null)
  .loc 3 1363 5
  xor rax, rax
  jmp .LABEL__get_128__end
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [discarded value]: list_item.2
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] 
  # [live values]: struct_member.1:[rbp-16] list_item.1:[rbp-8] 
  # [discarded value]: struct_member.1
  # [discarded value]: list_item.1
  # [live values]: 
.LABEL__get_128__end:
  mov rsp, rbp
  pop rbp
  ret

get_128__stack_frame_size: .word 32

  .loc 3 1366 1
  .text
convert_not_equals_expression_129:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_not_equals_expression_129__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_not_equals_expression_129__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Not_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1367 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, null)
  .loc 3 1367 19
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_99
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1368 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $3.1, null)
  .loc 3 1368 20
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_99
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1369 9
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 3 1369 32
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  # $7.1: Boolean = call(equals_141, $5.1, $6.1)
  .loc 3 1369 9
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call equals_141
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  # $9.1: Boolean = $7.1 == false
  .loc 3 1369 9
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, block.2, block.3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_not_equals_expression_129__3
.LABEL__convert_not_equals_expression_129__2:
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1369 63
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx 
  # IR_Pointer_Type.19: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx IR_Pointer_Type.19:r15 
  # $12.1: Boolean = call(is_293, $10.1, IR_Pointer_Type.19)
  .loc 3 1369 63
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $10.1
  # [discarded value]: IR_Pointer_Type.19
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, block.4, block.5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_not_equals_expression_129__5
.LABEL__convert_not_equals_expression_129__4:
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 3 1369 102
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  # IR_Null_Type.7: @Object_Type = load_variable(IR_Null_Type)
  lea r15, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx IR_Null_Type.7:r15 
  # $14.1: Boolean = call(is_293, $13.1, IR_Null_Type.7)
  .loc 3 1369 102
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $13.1
  # [discarded value]: IR_Null_Type.7
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  # $12.2: Boolean = $14.1 == false
  .loc 3 1369 102
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(block.5)
  mov [rbp-34], bl
.LABEL__convert_not_equals_expression_129__5:
  # $9.2: Boolean = phi($12.1, $12.2)
  .loc 3 1369 63
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax:[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__convert_not_equals_expression_129__3:
  # $9.3: Boolean = phi($9.1, $9.2)
  .loc 3 1369 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_not_equals_expression_129__7
.LABEL__convert_not_equals_expression_129__6:
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1370 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rbx 
  # call(abort_264, $16.1, "Operands are not the same type")
  .loc 3 1370 9
  mov rdi, rbx
  lea rsi, .LABEL__string_209[rip] # "Operands are not the same type"
  call abort_264
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_not_equals_expression_129__7:
  # IR_Constant_Value.29: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] IR_Constant_Value.29:rax 
  # $18.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.29)
  .loc 3 1372 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.29
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, block.8, block.9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_not_equals_expression_129__9
.LABEL__convert_not_equals_expression_129__8:
  # IR_Constant_Value.30: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] IR_Constant_Value.30:rax 
  # $18.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.30)
  .loc 3 1372 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.30
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(block.9)
  mov [rbp-35], al
.LABEL__convert_not_equals_expression_129__9:
  # $18.3: Boolean = phi($18.1, $18.2)
  .loc 3 1372 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, block.10, block.11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_not_equals_expression_129__11
.LABEL__convert_not_equals_expression_129__10:
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1373 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $20.1:rbx 
  # call(abort_264, $20.1, "TODO: Evaluate constant expression")
  .loc 3 1373 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
.LABEL__convert_not_equals_expression_129__11:
  # $21.1: @IR_Type = call(get_named_type_60, self.1, "Boolean")
  .loc 3 1375 103
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_162[rip] # "Boolean"
  call get_named_type_60
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:rax 
  # $22.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $21.1)
  .loc 3 1375 80
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:rax 
  # $23.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-43], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # store_struct_member($23.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # store_struct_member($23.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # store_struct_member($23.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  # $24.1: @IR_Not_Equals_Comparison_Instruction = new(IR_Not_Equals_Comparison_Instruction)
  .loc 3 1375 24
  mov [rbp-51], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Not_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $22.1:[rbp-43] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, result_value, $22.1)
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $23.1:[rbp-51] $24.1:rax 
  # store_struct_member($24.1, operand_values, $23.1)
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # store_struct_member($24.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # $25.1: @IR_Binary_Instruction = call(init_188, $24.1, left_value.1, right_value.1)
  .loc 3 1375 24
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_188
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $25.1:rax 
  # $26.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1375 167
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $25.1:rax $26.1:r15 
  # $27.1: @IR_Variable_Value = call(append_71, self.1, $25.1, $26.1)
  .loc 3 1375 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $27.1:rax 
  # return($27.1)
  .loc 3 1375 5
  jmp .LABEL__convert_not_equals_expression_129__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $9.1
  # [live values]: 
.LABEL__convert_not_equals_expression_129__end:
  mov rsp, rbp
  pop rbp
  ret

convert_not_equals_expression_129__stack_frame_size: .word 64

  .loc 3 1378 1
  .text
convert_substract_expression_130:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_substract_expression_130__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_substract_expression_130__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Substract_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 3 1379 43
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1379 71
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # left_value.1: @IR_Value = call(convert_expression_99, self.1, $1.1, $2.1)
  .loc 3 1379 19
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 3 1380 44
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  # $5.1: @IR_Type = call(get_named_type_60, self.1, "Int")
  .loc 3 1380 73
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_163[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_60
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # right_value.1: @IR_Value = call(convert_expression_99, self.1, $4.1, $5.1)
  .loc 3 1380 20
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_99
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  # IR_Constant_Value.31: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax IR_Constant_Value.31:rbx 
  # $8.1: Boolean = call(is_293, left_value.1, IR_Constant_Value.31)
  .loc 3 1381 9
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-40], rax
  call is_293
  # [discarded value]: IR_Constant_Value.31
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_substract_expression_130__3
.LABEL__convert_substract_expression_130__2:
  # IR_Constant_Value.32: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] IR_Constant_Value.32:rax 
  # $8.2: Boolean = call(is_293, right_value.1, IR_Constant_Value.32)
  .loc 3 1381 45
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.32
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(block.3)
  mov [rbp-41], al
.LABEL__convert_substract_expression_130__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 3 1381 9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_substract_expression_130__5
.LABEL__convert_substract_expression_130__4:
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1382 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $10.1:rbx 
  # call(abort_264, $10.1, "TODO: Evaluate constant expression")
  .loc 3 1382 9
  mov rdi, rbx
  lea rsi, .LABEL__string_198[rip] # "TODO: Evaluate constant expression"
  call abort_264
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
.LABEL__convert_substract_expression_130__5:
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 3 1384 91
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $11.1:rbx 
  # $12.1: @IR_Variable_Value = call(create_temp_value_70, self.1, $11.1)
  .loc 3 1384 68
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:rax 
  # $13.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # store_struct_member($13.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  # $14.1: @IR_Substract_Instruction = new(IR_Substract_Instruction)
  .loc 3 1384 24
  mov [rbp-57], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $12.1:[rbp-49] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, result_value, $12.1)
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $13.1:[rbp-57] $14.1:rax 
  # store_struct_member($14.1, operand_values, $13.1)
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # store_struct_member($14.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $14.1:rax 
  # $15.1: @IR_Binary_Instruction = call(init_188, $14.1, left_value.1, right_value.1)
  .loc 3 1384 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_188
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1384 140
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $15.1:rax $16.1:r15 
  # $17.1: @IR_Variable_Value = call(append_71, self.1, $15.1, $16.1)
  .loc 3 1384 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $17.1:rax 
  # return($17.1)
  .loc 3 1384 5
  jmp .LABEL__convert_substract_expression_130__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_substract_expression_130__end:
  mov rsp, rbp
  pop rbp
  ret

convert_substract_expression_130__stack_frame_size: .word 64

  .loc 3 1387 1
  .text
convert_variable_expression_131:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_131__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_131__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1388 35
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, lexeme)
  .loc 3 1388 35
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $2.1:rbx 
  # variable.1: @IR_Variable = call(get_variable_62, self.1, $2.1)
  .loc 3 1388 17
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call get_variable_62
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax 
  # $4.1: Boolean = variable.1 == null
  .loc 3 1389 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__convert_variable_expression_131__3
.LABEL__convert_variable_expression_131__2:
  # $6.1: Boolean = expected_type.1 != null
  .loc 3 1390 13
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:rax 
  # jump($6.1, block.4, block.5)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_variable_expression_131__5
.LABEL__convert_variable_expression_131__4:
  # IR_Function_Type.9: @Object_Type = load_variable(IR_Function_Type)
  lea rax, IR_Function_Type[rip]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] IR_Function_Type.9:rax 
  # $6.2: Boolean = call(is_293, expected_type.1, IR_Function_Type.9)
  .loc 3 1390 38
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Function_Type.9
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:rax:[rbp-33] 
  # jump(block.5)
  mov [rbp-33], al
.LABEL__convert_variable_expression_131__5:
  # $6.3: Boolean = phi($6.1, $6.2)
  .loc 3 1390 13
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $6.3:[rbp-33] 
  # jump($6.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_variable_expression_131__7
.LABEL__convert_variable_expression_131__6:
  # $8.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1391 49
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $8.1:rbx 
  # $9.1: @String = load_struct_member($8.1, lexeme)
  .loc 3 1391 49
  mov r15, [rbx+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $9.1:r15 
  # $10.1: @IR_Function_Type = expected_type.1
  .loc 3 1391 73
  mov rbx, [rbp-16]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $9.1:r15 $10.1:rbx 
  # function.1: @IR_Function = call(get_named_function_67, self.1, $9.1, $10.1)
  .loc 3 1391 25
  mov rdi, [rbp-24]
  mov rsi, r15
  mov rdx, rbx
  call get_named_function_67
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:rax 
  # $12.1: Boolean = function.1 != null
  .loc 3 1392 17
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:rax $12.1:rbx 
  # jump($12.1, block.8, block.7)
  test bl, bl
  mov [rbp-41], rax
  jz .LABEL__convert_variable_expression_131__7
.LABEL__convert_variable_expression_131__8:
  # $13.1: @IR_Variable_Value = call(create_temp_value_70, self.1, expected_type.1)
  .loc 3 1393 80
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call create_temp_value_70
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $13.1:rax 
  # $14.1: @IR_Load_Function_Address_Instruction = call(create_ir_load_function_address_instruction_171, $13.1, function.1)
  .loc 3 1393 36
  mov rdi, rax
  mov rsi, [rbp-41]
  call create_ir_load_function_address_instruction_171
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $14.1:rax 
  # $15.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1393 130
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $14.1:rax $15.1:r15 
  # $16.1: @IR_Variable_Value = call(append_71, self.1, $14.1, $15.1)
  .loc 3 1393 24
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_71
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $16.1:rax 
  # return($16.1)
  .loc 3 1393 17
  jmp .LABEL__convert_variable_expression_131__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] 
.LABEL__convert_variable_expression_131__7:
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1396 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $17.1:rbx 
  # $18.1: @String = call(clone_295, "Undeclared variable: ")
  .loc 3 1396 36
  lea rdi, .LABEL__string_188[rip] # "Undeclared variable: "
  mov [rbp-49], rbx
  call clone_295
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $17.1:[rbp-49] $18.1:rax 
  # $19.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1396 74
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $17.1:[rbp-49] $18.1:rax $19.1:r15 
  # $20.1: @String = load_struct_member($19.1, lexeme)
  .loc 3 1396 74
  mov r14, [r15+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $17.1:[rbp-49] $18.1:rax $20.1:r14 
  # $21.1: @String = call(append_304, $18.1, $20.1)
  .loc 3 1396 36
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $18.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] $17.1:[rbp-49] $21.1:rax 
  # call(abort_264, $17.1, $21.1)
  .loc 3 1396 9
  mov rdi, [rbp-49]
  mov rsi, rax
  call abort_264
  # [discarded value]: $17.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] function.1:[rbp-41] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] 
.LABEL__convert_variable_expression_131__3:
  # value.1: @IR_Variable_Value = call(get_variable_value_63, self.1, variable.1)
  .loc 3 1398 14
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call get_variable_value_63
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:rax 
  # $23.1: Boolean = value.1 == null
  .loc 3 1399 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:rax $23.1:rbx 
  # jump($23.1, block.11, block.12)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__convert_variable_expression_131__12
.LABEL__convert_variable_expression_131__11:
  # $24.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1400 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] $24.1:rbx 
  # $25.1: @String = call(clone_295, "Undeclared variable value: ")
  .loc 3 1400 36
  lea rdi, .LABEL__string_216[rip] # "Undeclared variable value: "
  mov [rbp-48], rbx
  call clone_295
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] $24.1:[rbp-48] $25.1:rax 
  # $26.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1400 80
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] $24.1:[rbp-48] $25.1:rax $26.1:r15 
  # $27.1: @String = load_struct_member($26.1, lexeme)
  .loc 3 1400 80
  mov r14, [r15+8]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] $24.1:[rbp-48] $25.1:rax $27.1:r14 
  # $28.1: @String = call(append_304, $25.1, $27.1)
  .loc 3 1400 36
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $25.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] $24.1:[rbp-48] $28.1:rax 
  # call(abort_264, $24.1, $28.1)
  .loc 3 1400 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $24.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] 
.LABEL__convert_variable_expression_131__12:
  # return(value.1)
  .loc 3 1402 5
  mov rax, [rbp-40]
  jmp .LABEL__convert_variable_expression_131__end
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] value.1:[rbp-40] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: expected_type.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__convert_variable_expression_131__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_131__stack_frame_size: .word 64

  .loc 3 1405 1
  .text
convert_variable_expression_address_132:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_address_132__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_address_132__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1406 35
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, lexeme)
  .loc 3 1406 35
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # variable.1: @IR_Variable = call(get_variable_62, self.1, $2.1)
  .loc 3 1406 17
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_variable_62
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax 
  # $4.1: Boolean = variable.1 == null
  .loc 3 1407 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__convert_variable_expression_address_132__3
.LABEL__convert_variable_expression_address_132__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1408 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $5.1:rbx 
  # $6.1: @String = call(clone_295, "Undeclared variable: ")
  .loc 3 1408 36
  lea rdi, .LABEL__string_188[rip] # "Undeclared variable: "
  mov [rbp-32], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1408 74
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax $7.1:r15 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 3 1408 74
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax $8.1:r14 
  # $9.1: @String = call(append_304, $6.1, $8.1)
  .loc 3 1408 36
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $9.1:rax 
  # call(abort_264, $5.1, $9.1)
  .loc 3 1408 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_264
  # [discarded value]: $5.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
.LABEL__convert_variable_expression_address_132__3:
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 3 1410 9
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $10.1:rbx 
  # IR_Pointer_Type.20: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $10.1:rbx IR_Pointer_Type.20:r15 
  # $11.1: Boolean = call(is_293, $10.1, IR_Pointer_Type.20)
  .loc 3 1410 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $10.1
  # [discarded value]: IR_Pointer_Type.20
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.4, block.5)
  test al, al
  jz .LABEL__convert_variable_expression_address_132__5
.LABEL__convert_variable_expression_address_132__4:
  # $12.1: @IR_Variable_Value = call(get_variable_value_63, self.1, variable.1)
  .loc 3 1411 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_63
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $12.1:rax 
  # return($12.1)
  .loc 3 1411 9
  jmp .LABEL__convert_variable_expression_address_132__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
.LABEL__convert_variable_expression_address_132__5:
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1413 11
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $13.1:rbx 
  # $14.1: @String = call(clone_295, "Variable type without address: ")
  .loc 3 1413 32
  lea rdi, .LABEL__string_217[rip] # "Variable type without address: "
  mov [rbp-32], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:[rbp-32] $14.1:rax 
  # $15.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 3 1413 80
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $13.1:[rbp-32] $14.1:rax $15.1:r15 
  # $16.1: @String = load_struct_member($15.1, name)
  .loc 3 1413 80
  mov r14, [r15+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $13.1:[rbp-32] $14.1:rax $16.1:r14 
  # $17.1: @String = call(append_304, $14.1, $16.1)
  .loc 3 1413 32
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $14.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:[rbp-32] $17.1:rax 
  # call(abort_264, $13.1, $17.1)
  .loc 3 1413 5
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_264
  # [discarded value]: $13.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__convert_variable_expression_address_132__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_address_132__stack_frame_size: .word 32

  .loc 3 1416 1
  .text
deduce_expression_type_133:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_expression_type_133__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_expression_type_133__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Call_Expression.3: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Call_Expression.3:rax 
  # $1.1: Boolean = call(is_293, expression.1, AST_Call_Expression.3)
  .loc 3 1417 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Call_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__deduce_expression_type_133__3
.LABEL__deduce_expression_type_133__2:
  # $2.1: @AST_Call_Expression = expression.1
  .loc 3 1418 49
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Type = call(deduce_call_expression_type_134, self.1, $2.1)
  .loc 3 1418 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_call_expression_type_134
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 3 1418 9
  jmp .LABEL__deduce_expression_type_133__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_133__3:
  # AST_Literal_Expression.3: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Literal_Expression.3:rax 
  # $4.1: Boolean = call(is_293, expression.1, AST_Literal_Expression.3)
  .loc 3 1420 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Literal_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__deduce_expression_type_133__6
.LABEL__deduce_expression_type_133__5:
  # $5.1: @AST_Literal_Expression = expression.1
  .loc 3 1421 52
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Type = call(deduce_literal_expression_type_135, self.1, $5.1)
  .loc 3 1421 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_literal_expression_type_135
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 3 1421 9
  jmp .LABEL__deduce_expression_type_133__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_133__6:
  # AST_Member_Access_Expression.6: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Member_Access_Expression.6:rax 
  # $7.1: Boolean = call(is_293, expression.1, AST_Member_Access_Expression.6)
  .loc 3 1423 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Member_Access_Expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__deduce_expression_type_133__9
.LABEL__deduce_expression_type_133__8:
  # $8.1: @AST_Member_Access_Expression = expression.1
  .loc 3 1424 58
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Type = call(deduce_member_access_expression_type_136, self.1, $8.1)
  .loc 3 1424 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_member_access_expression_type_136
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 3 1424 9
  jmp .LABEL__deduce_expression_type_133__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_133__9:
  # AST_Variable_Expression.6: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.6:rax 
  # $10.1: Boolean = call(is_293, expression.1, AST_Variable_Expression.6)
  .loc 3 1426 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $10.1:rax 
  # jump($10.1, block.11, block.12)
  test al, al
  jz .LABEL__deduce_expression_type_133__12
.LABEL__deduce_expression_type_133__11:
  # $11.1: @AST_Variable_Expression = expression.1
  .loc 3 1427 53
  mov rax, [rbp-16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $11.1:rax 
  # $12.1: @IR_Type = call(deduce_variable_expression_type_137, self.1, $11.1)
  .loc 3 1427 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_variable_expression_type_137
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 3 1427 9
  jmp .LABEL__deduce_expression_type_133__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_133__12:
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1429 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $13.1:rbx 
  # $14.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 3 1429 32
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $13.1:rbx $14.1:r15 
  # call(abort_138, $13.1, $14.1)
  .loc 3 1429 5
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_expression_type_133__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_expression_type_133__stack_frame_size: .word 16

  .loc 3 1432 1
  .text
deduce_call_expression_type_134:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_call_expression_type_134__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_call_expression_type_134__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Call_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @List = new(List)
  .loc 3 1433 23
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] $1.1:rax 
  # argument_types.1: @List = $1.1
  .loc 3 1433 5
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:rax 
  # $2.1: @List = load_struct_member(expression.1, arguments)
  .loc 3 1434 18
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] argument_types.1:rax $2.1:r15 
  # arguments.1: @List_Iterator = call(create_iterator_279, $2.1)
  .loc 3 1434 18
  mov rdi, r15
  mov [rbp-24], rax
  call create_iterator_279
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__deduce_call_expression_type_134__2:
  # $4.1: Boolean = call(has_next_282, arguments.1)
  .loc 3 1435 12
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__deduce_call_expression_type_134__4
.LABEL__deduce_call_expression_type_134__3:
  # argument.1: @AST_Expression = call(next_283, arguments.1)
  .loc 3 1436 21
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] argument.1:rax 
  # argument_type.1: @IR_Type = call(deduce_expression_type_133, self.1, argument.1)
  .loc 3 1437 26
  mov rdi, [rbp-16]
  mov rsi, rax
  call deduce_expression_type_133
  # [discarded value]: argument.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] argument_type.1:rax 
  # call(append_268, argument_types.1, argument_type.1)
  .loc 3 1438 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_268
  # [discarded value]: argument_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # jump(block.2)
  jmp .LABEL__deduce_call_expression_type_134__2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
.LABEL__deduce_call_expression_type_134__4:
  # $8.1: @AST_Expression = load_struct_member(expression.1, callee)
  .loc 3 1440 9
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $8.1:rbx 
  # AST_Member_Access_Expression.7: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea r15, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $8.1:rbx AST_Member_Access_Expression.7:r15 
  # $9.1: Boolean = call(is_293, $8.1, AST_Member_Access_Expression.7)
  .loc 3 1440 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $8.1
  # [discarded value]: AST_Member_Access_Expression.7
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__deduce_call_expression_type_134__6
.LABEL__deduce_call_expression_type_134__5:
  # callee.1: @AST_Member_Access_Expression = load_struct_member(expression.1, callee)
  .loc 3 1441 19
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rbx 
  # $12.1: @AST_Expression = load_struct_member(callee.1, object_expression)
  .loc 3 1442 52
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rbx $12.1:r15 
  # object_type.1: @IR_Type = call(deduce_expression_type_133, self.1, $12.1)
  .loc 3 1442 24
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-40], rbx
  call deduce_expression_type_133
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:rax 
  # IR_Struct_Type.15: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:rax IR_Struct_Type.15:rbx 
  # $14.1: Boolean = call(is_293, object_type.1, IR_Struct_Type.15)
  .loc 3 1443 13
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_293
  # [discarded value]: IR_Struct_Type.15
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] $14.1:rax 
  # jump($14.1, block.7, block.9)
  test al, al
  jz .LABEL__deduce_call_expression_type_134__9
.LABEL__deduce_call_expression_type_134__7:
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, object_type.1)
  .loc 3 1444 36
  mov rdi, [rbp-48]
  call create_ir_pointer_type_142
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] $15.1:rax 
  # call(prepend_269, argument_types.1, $15.1)
  .loc 3 1444 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call prepend_269
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # jump(block.8)
.LABEL__deduce_call_expression_type_134__8:
  # $16.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 3 1448 45
  mov rax, [rbp-40]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rax:[rbp-40] object_type.1:[rbp-48] $16.1:rbx 
  # $17.1: @String = load_struct_member($16.1, lexeme)
  .loc 3 1448 45
  mov r15, [rbx+8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rax:[rbp-40] object_type.1:[rbp-48] $17.1:r15 
  # function.1: @IR_Function = call(get_named_function_66, self.1, $17.1, argument_types.1)
  .loc 3 1448 21
  mov rdi, [rbp-16]
  mov rsi, r15
  mov rdx, [rbp-24]
  call get_named_function_66
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:rax 
  # $19.1: Boolean = function.1 == null
  .loc 3 1449 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:rax $19.1:rbx 
  # jump($19.1, block.10, block.11)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__deduce_call_expression_type_134__11
.LABEL__deduce_call_expression_type_134__10:
  # $20.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 3 1450 19
  mov rax, [rbp-40]
  mov rbx, [rax+24]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rax:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $20.1:rbx 
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  .loc 3 1450 19
  mov r15, [rbx+16]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rax:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:r15 
  # $22.1: @String = call(clone_295, "Unknown function: ")
  .loc 3 1450 48
  lea rdi, .LABEL__string_218[rip] # "Unknown function: "
  mov [rbp-64], r15
  call clone_295
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax 
  # $23.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 3 1450 83
  mov rbx, [rbp-40]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rbx:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax $23.1:r15 
  # $24.1: @String = load_struct_member($23.1, lexeme)
  .loc 3 1450 83
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rbx:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax $24.1:r14 
  # $25.1: @String = call(append_304, $22.1, $24.1)
  .loc 3 1450 48
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $25.1:rax 
  # call(abort_264, $21.1, $25.1)
  .loc 3 1450 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_264
  # [discarded value]: $21.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] 
.LABEL__deduce_call_expression_type_134__11:
  # $26.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 3 1452 16
  mov rax, [rbp-56]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:rax:[rbp-56] $26.1:rbx 
  # return($26.1)
  .loc 3 1452 9
  mov rax, rbx
  jmp .LABEL__deduce_call_expression_type_134__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
.LABEL__deduce_call_expression_type_134__9:
  # call(prepend_269, argument_types.1, object_type.1)
  .loc 3 1446 13
  mov rdi, [rbp-24]
  mov rsi, [rbp-48]
  call prepend_269
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # jump(block.8)
  jmp .LABEL__deduce_call_expression_type_134__8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # [discarded value]: callee.1
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
.LABEL__deduce_call_expression_type_134__6:
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1454 11
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $27.1:rbx 
  # $28.1: @AST_Expression = load_struct_member(expression.1, callee)
  .loc 3 1454 32
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $27.1:rbx $28.1:r15 
  # $29.1: @Object_Type = load_struct_member($28.1, object_type)
  .loc 3 1454 32
  mov r14, [r15+0]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $27.1:rbx $29.1:r14 
  # call(abort_138, $27.1, $29.1)
  .loc 3 1454 5
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $27.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: argument_types.1
  # [discarded value]: arguments.1
  # [live values]: 
.LABEL__deduce_call_expression_type_134__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_call_expression_type_134__stack_frame_size: .word 64

  .loc 3 1457 1
  .text
deduce_literal_expression_type_135:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_literal_expression_type_135__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_literal_expression_type_135__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # literal.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 3 1458 16
  mov rax, [rsi+16]
  # [discarded value]: expression.1
  # [live values]: self.1:rdi literal.1:rax 
  # String_Token.5: @Object_Type = load_variable(String_Token)
  lea rbx, String_Token[rip]
  # [live values]: self.1:rdi literal.1:rax String_Token.5:rbx 
  # $2.1: Boolean = call(is_293, literal.1, String_Token.5)
  .loc 3 1459 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call is_293
  # [discarded value]: String_Token.5
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__deduce_literal_expression_type_135__3
.LABEL__deduce_literal_expression_type_135__2:
  # $3.1: @IR_Type = call(get_named_type_60, self.1, "String")
  .loc 3 1460 39
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_210[rip] # "String"
  call get_named_type_60
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $3.1:rax 
  # $4.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, $3.1)
  .loc 3 1460 16
  mov rdi, rax
  call create_ir_pointer_type_142
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $4.1:rax 
  # return($4.1)
  .loc 3 1460 9
  jmp .LABEL__deduce_literal_expression_type_135__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
.LABEL__deduce_literal_expression_type_135__3:
  # $5.1: @Source_Location = load_struct_member(literal.1, location)
  .loc 3 1462 11
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $5.1:rbx 
  # $6.1: @Object_Type = load_struct_member(literal.1, object_type)
  .loc 3 1462 29
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $5.1:rbx $6.1:r15 
  # call(abort_138, $5.1, $6.1)
  .loc 3 1462 5
  mov rdi, rbx
  mov rsi, r15
  call abort_138
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: literal.1
  # [live values]: 
.LABEL__deduce_literal_expression_type_135__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_literal_expression_type_135__stack_frame_size: .word 16

  .loc 3 1465 1
  .text
deduce_member_access_expression_type_136:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_member_access_expression_type_136__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_member_access_expression_type_136__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Member_Access_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, object_expression)
  .loc 3 1466 48
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # object_type.1: @IR_Type = call(deduce_expression_type_133, self.1, $1.1)
  .loc 3 1466 20
  mov [rbp-8], rsi
  mov rsi, rax
  call deduce_expression_type_133
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: expression.1:[rbp-8] object_type.1:rax 
  # IR_Pointer_Type.21: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:rax IR_Pointer_Type.21:rbx 
  # $3.1: Boolean = call(is_293, object_type.1, IR_Pointer_Type.21)
  .loc 3 1467 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call is_293
  # [discarded value]: IR_Pointer_Type.21
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $3.1:rax 
  # $4.1: Boolean = $3.1 == false
  .loc 3 1467 9
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  jz .LABEL__deduce_member_access_expression_type_136__3
.LABEL__deduce_member_access_expression_type_136__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1468 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $4.1
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $5.1:rbx 
  # $6.1: @Object_Type = load_struct_member(object_type.1, object_type)
  .loc 3 1468 36
  mov r15, [rbp-16]
  mov r14, [r15+0]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:r15:[rbp-16] $5.1:rbx $6.1:r14 
  # call(abort_138, $5.1, $6.1)
  .loc 3 1468 9
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
.LABEL__deduce_member_access_expression_type_136__3:
  # $7.1: @IR_Pointer_Type = object_type.1
  .loc 3 1470 21
  mov rax, [rbp-16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $7.1:rax 
  # object_type.1: @IR_Type = load_struct_member($7.1, pointed_type)
  .loc 3 1470 20
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:rbx 
  # IR_Struct_Type.16: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:rbx IR_Struct_Type.16:rax 
  # $9.1: Boolean = call(is_293, object_type.1, IR_Struct_Type.16)
  .loc 3 1471 9
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-24], rbx
  call is_293
  # [discarded value]: IR_Struct_Type.16
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $9.1:rax 
  # $10.1: Boolean = $9.1 == false
  .loc 3 1471 9
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $10.1:rbx 
  # jump($10.1, block.4, block.5)
  test bl, bl
  jz .LABEL__deduce_member_access_expression_type_136__5
.LABEL__deduce_member_access_expression_type_136__4:
  # $11.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1472 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $10.1
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $11.1:rbx 
  # $12.1: @Object_Type = load_struct_member(object_type.1, object_type)
  .loc 3 1472 36
  mov r15, [rbp-24]
  mov r14, [r15+0]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] object_type.1:r15:[rbp-24] $11.1:rbx $12.1:r14 
  # call(abort_138, $11.1, $12.1)
  .loc 3 1472 9
  mov rdi, rbx
  mov rsi, r14
  call abort_138
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] 
.LABEL__deduce_member_access_expression_type_136__5:
  # object_type.1: @IR_Struct_Type = object_type.1
  .loc 3 1474 20
  mov rax, [rbp-24]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rax 
  # $14.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  .loc 3 1475 38
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rax $14.1:r15 
  # $15.1: @String = load_struct_member($14.1, lexeme)
  .loc 3 1475 38
  mov r14, [r15+8]
  # [discarded value]: $14.1
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rax $15.1:r14 
  # member.1: @IR_Struct_Type_Member = call(get_member_147, object_type.1, $15.1)
  .loc 3 1475 15
  mov rdi, rax
  mov rsi, r14
  mov [rbp-32], rax
  call get_member_147
  # [discarded value]: $15.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax 
  # $17.1: Boolean = member.1 == null
  .loc 3 1476 9
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax $17.1:rbx 
  # jump($17.1, block.6, block.7)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__deduce_member_access_expression_type_136__7
.LABEL__deduce_member_access_expression_type_136__6:
  # $18.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  .loc 3 1477 15
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: $17.1
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $18.1:rbx 
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  .loc 3 1477 15
  mov r15, [rbx+16]
  # [discarded value]: $18.1
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:r15 
  # $20.1: @String = load_struct_member(object_type.1, name)
  .loc 3 1477 54
  mov rbx, [rbp-32]
  mov r14, [rbx+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rbx:[rbp-32] member.1:[rbp-40] $19.1:r15 $20.1:r14 
  # $21.1: @String = call(clone_295, $20.1)
  .loc 3 1477 48
  mov rdi, r14
  mov [rbp-48], r15
  call clone_295
  # [discarded value]: $20.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $21.1:rax 
  # $22.1: @String = call(append_304, $21.1, " has no such member: ")
  .loc 3 1477 48
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # " has no such member: "
  call append_304
  # [discarded value]: $21.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $22.1:rax 
  # $23.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  .loc 3 1477 111
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $22.1:rax $23.1:r15 
  # $24.1: @String = load_struct_member($23.1, lexeme)
  .loc 3 1477 111
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $22.1:rax $24.1:r14 
  # $25.1: @String = call(append_304, $22.1, $24.1)
  .loc 3 1477 48
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $25.1:rax 
  # call(abort_264, $19.1, $25.1)
  .loc 3 1477 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $19.1
  # [discarded value]: $25.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
.LABEL__deduce_member_access_expression_type_136__7:
  # $26.1: @IR_Type = load_struct_member(member.1, type)
  .loc 3 1479 9
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax:[rbp-40] $26.1:rbx 
  # IR_Struct_Type.17: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax:[rbp-40] $26.1:rbx IR_Struct_Type.17:r15 
  # $27.1: Boolean = call(is_293, $26.1, IR_Struct_Type.17)
  .loc 3 1479 9
  mov rdi, rbx
  mov rsi, r15
  call is_293
  # [discarded value]: $26.1
  # [discarded value]: IR_Struct_Type.17
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $27.1:rax 
  # jump($27.1, block.8, block.9)
  test al, al
  jz .LABEL__deduce_member_access_expression_type_136__9
.LABEL__deduce_member_access_expression_type_136__8:
  # $28.1: @IR_Type = load_struct_member(member.1, type)
  .loc 3 1480 39
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [discarded value]: $27.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax:[rbp-40] $28.1:rbx 
  # $29.1: @IR_Pointer_Type = call(create_ir_pointer_type_142, $28.1)
  .loc 3 1480 16
  mov rdi, rbx
  call create_ir_pointer_type_142
  # [discarded value]: $28.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $29.1:rax 
  # return($29.1)
  .loc 3 1480 9
  jmp .LABEL__deduce_member_access_expression_type_136__end
  # [discarded value]: $29.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
.LABEL__deduce_member_access_expression_type_136__9:
  # $30.1: @IR_Type = load_struct_member(member.1, type)
  .loc 3 1482 12
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax:[rbp-40] $30.1:rbx 
  # return($30.1)
  .loc 3 1482 5
  mov rax, rbx
  jmp .LABEL__deduce_member_access_expression_type_136__end
  # [discarded value]: $30.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
  # [discarded value]: object_type.1
  # [discarded value]: member.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] 
  # [discarded value]: object_type.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: object_type.1
  # [live values]: 
.LABEL__deduce_member_access_expression_type_136__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_member_access_expression_type_136__stack_frame_size: .word 48

  .loc 3 1485 1
  .text
deduce_variable_expression_type_137:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_variable_expression_type_137__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_variable_expression_type_137__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1486 35
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, lexeme)
  .loc 3 1486 35
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # variable.1: @IR_Variable = call(get_variable_62, self.1, $2.1)
  .loc 3 1486 17
  mov [rbp-8], rsi
  mov rsi, rbx
  call get_variable_62
  # [discarded value]: self.1
  # [discarded value]: $2.1
  # [live values]: expression.1:[rbp-8] variable.1:rax 
  # $4.1: Boolean = variable.1 == null
  .loc 3 1487 9
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-16], rax
  jz .LABEL__deduce_variable_expression_type_137__3
.LABEL__deduce_variable_expression_type_137__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 3 1488 15
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $4.1
  # [live values]: expression.1:rax:[rbp-8] variable.1:[rbp-16] $5.1:rbx 
  # $6.1: @String = call(clone_295, "Unknown variable: ")
  .loc 3 1488 36
  lea rdi, .LABEL__string_219[rip] # "Unknown variable: "
  mov [rbp-24], rbx
  call clone_295
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $6.1:rax 
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 3 1488 71
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $6.1:rax $7.1:r15 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 3 1488 71
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $6.1:rax $8.1:r14 
  # $9.1: @String = call(append_304, $6.1, $8.1)
  .loc 3 1488 36
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $9.1:rax 
  # call(abort_264, $5.1, $9.1)
  .loc 3 1488 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_264
  # [discarded value]: $5.1
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
.LABEL__deduce_variable_expression_type_137__3:
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 3 1490 12
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] variable.1:rax:[rbp-16] $10.1:rbx 
  # return($10.1)
  .loc 3 1490 5
  mov rax, rbx
  jmp .LABEL__deduce_variable_expression_type_137__end
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__deduce_variable_expression_type_137__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_variable_expression_type_137__stack_frame_size: .word 32

  .loc 1 48 1
  .text
abort_138:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_138__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_138__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # unexpected_type.1: @Object_Type = load_variable(unexpected_type)
  # [live values]: location.1:rdi unexpected_type.1:rsi 
  # stderr.6: @FILE = load_variable(stderr)
  # [live values]: location.1:rdi unexpected_type.1:rsi stderr.6:stderr[rip] 
  # $1.1: @FILE = call(end_line_290, stderr.6)
  .loc 1 49 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_290
  # [discarded value]: stderr.6
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $1.1:rax 
  # $2.1: @FILE = call(end_line_290, $1.1)
  .loc 1 49 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $1.1
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write_267, $2.1, location.1)
  .loc 1 49 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_267
  # [discarded value]: location.1
  # [discarded value]: $2.1
  # [live values]: unexpected_type.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write_287, $3.1, ": Unexpected type: ")
  .loc 1 49 5
  mov rdi, rax
  lea rsi, .LABEL__string_220[rip] # ": Unexpected type: "
  call write_287
  # [discarded value]: $3.1
  # [live values]: unexpected_type.1:[rbp-16] $4.1:rax 
  # $5.1: @String = load_struct_member(unexpected_type.1, name)
  .loc 1 49 85
  mov rbx, [rbp-16]
  mov r15, rbx
  add r15, 8
  # [discarded value]: unexpected_type.1
  # [live values]: $4.1:rax $5.1:r15 
  # $6.1: @FILE = call(write_287, $4.1, $5.1)
  .loc 1 49 5
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  # $7.1: @FILE = call(end_line_290, $6.1)
  .loc 1 49 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: 
  # call(abort)
  .loc 1 50 5
  call abort
  # [live values]: 
.LABEL__abort_138__end:
  mov rsp, rbp
  pop rbp
  ret

abort_138__stack_frame_size: .word 16

  .loc 4 7 1
  .text
next_139:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_139__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_139__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, value)
  .loc 4 8 18
  mov rax, [rdi+0]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Int = $1.1 + 1
  .loc 4 8 18
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # store_struct_member(self.1, value, $2.1)
  .loc 4 8 5
  mov QWORD PTR [rdi+0], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:rdi 
  # $3.1: Int = load_struct_member(self.1, value)
  .loc 4 9 12
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 4 9 5
  jmp .LABEL__next_139__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__next_139__end:
  mov rsp, rbp
  pop rbp
  ret

next_139__stack_frame_size: .word 0

  .loc 4 12 1
  .text
reset_140:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_140__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_140__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, value, 0)
  .loc 4 13 5
  mov QWORD PTR [rdi+0], 0
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 4 14 5
  mov rax, rdi
  jmp .LABEL__reset_140__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_140__end:
  mov rsp, rbp
  pop rbp
  ret

reset_140__stack_frame_size: .word 0

  .loc 5 41 1
  .text
equals_141:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_141__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_141__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # IR_Pointer_Type.22: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:rdi other.1:rsi IR_Pointer_Type.22:rax 
  # $2.1: Boolean = call(is_293, self.1, IR_Pointer_Type.22)
  .loc 5 42 9
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call is_293
  # [discarded value]: IR_Pointer_Type.22
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__equals_141__3
.LABEL__equals_141__2:
  # IR_Pointer_Type.23: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] IR_Pointer_Type.23:rax 
  # $2.2: Boolean = call(is_293, other.1, IR_Pointer_Type.23)
  .loc 5 42 37
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Pointer_Type.23
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:rax:[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
.LABEL__equals_141__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 5 42 9
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, block.4, block.5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__equals_141__5
.LABEL__equals_141__4:
  # self.1: @IR_Pointer_Type = self.1
  .loc 5 43 17
  mov rax, [rbp-16]
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] self.1:rax 
  # other.1: @IR_Pointer_Type = other.1
  .loc 5 44 18
  mov rbx, [rbp-8]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] self.1:rax other.1:rbx 
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 5 45 16
  mov r15, [rax+16]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] other.1:rbx $6.1:r15 
  # $7.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 5 45 41
  mov rax, [rbx+16]
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $6.1:r15 $7.1:rax 
  # $8.1: Boolean = call(equals_141, $6.1, $7.1)
  .loc 5 45 16
  mov rdi, r15
  mov rsi, rax
  call equals_141
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $8.1:rax 
  # return($8.1)
  .loc 5 45 9
  jmp .LABEL__equals_141__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
.LABEL__equals_141__5:
  # $9.1: Boolean = self.1 == other.1
  .loc 5 47 12
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $9.1:rbx 
  # return($9.1)
  .loc 5 47 5
  mov al, bl
  jmp .LABEL__equals_141__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__equals_141__end:
  mov rsp, rbp
  pop rbp
  ret

equals_141__stack_frame_size: .word 32

  .loc 5 50 1
  .text
create_ir_pointer_type_142:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_pointer_type_142__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_pointer_type_142__1:
  # pointed_type.1: @IR_Type = load_variable(pointed_type)
  # [live values]: pointed_type.1:rdi 
  # $1.1: @String = call(clone_295, "@")
  .loc 5 51 18
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_221[rip] # "@"
  call clone_295
  # [live values]: pointed_type.1:[rbp-8] $1.1:rax 
  # $2.1: @String = load_struct_member(pointed_type.1, name)
  .loc 5 51 36
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: pointed_type.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  # type_name.1: @String = call(append_304, $1.1, $2.1)
  .loc 5 51 18
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: pointed_type.1:[rbp-8] type_name.1:rax 
  # $4.1: @IR_Pointer_Type = new(IR_Pointer_Type)
  .loc 5 52 12
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  lea rbx, IR_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: pointed_type.1:[rbp-8] type_name.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, name, type_name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: type_name.1
  # [live values]: pointed_type.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, pointed_type, pointed_type.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: pointed_type.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 5 52 5
  jmp .LABEL__create_ir_pointer_type_142__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__create_ir_pointer_type_142__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_pointer_type_142__stack_frame_size: .word 16

  .loc 5 59 1
  .text
create_ir_array_type_143:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_array_type_143__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_array_type_143__1:
  # item_type.1: @IR_Type = load_variable(item_type)
  # [live values]: item_type.1:rdi 
  # size_expression.1: @AST_Expression = load_variable(size_expression)
  # [live values]: item_type.1:rdi size_expression.1:rsi 
  # $1.1: @String = call(clone_295, "[")
  .loc 5 60 18
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_222[rip] # "["
  mov [rbp-16], rsi
  call clone_295
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $1.1:rax 
  # $2.1: @String = load_struct_member(item_type.1, name)
  .loc 5 60 36
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: item_type.1:rbx:[rbp-8] size_expression.1:[rbp-16] $1.1:rax $2.1:r15 
  # $3.1: @String = call(append_304, $1.1, $2.1)
  .loc 5 60 18
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $3.1:rax 
  # type_name.1: @String = call(append_304, $3.1, "]")
  .loc 5 60 18
  mov rdi, rax
  lea rsi, .LABEL__string_223[rip] # "]"
  call append_304
  # [discarded value]: $3.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] type_name.1:rax 
  # $5.1: @IR_Array_Type = new(IR_Array_Type)
  .loc 5 61 12
  mov [rbp-24], rax
  mov rdi, 32
  call malloc
  lea rbx, IR_Array_Type[rip]
  mov [rax], rbx
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] type_name.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, name, type_name.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: type_name.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, pointed_type, item_type.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: item_type.1
  # [live values]: size_expression.1:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, size_expression, size_expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: size_expression.1
  # [live values]: $5.1:rax 
  # return($5.1)
  .loc 5 61 5
  jmp .LABEL__create_ir_array_type_143__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__create_ir_array_type_143__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_array_type_143__stack_frame_size: .word 32

  .loc 5 74 1
  .text
create_ir_function_type_144:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_function_type_144__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_function_type_144__1:
  # parameters.1: @List = load_variable(parameters)
  # [live values]: parameters.1:rdi 
  # return_type.1: @IR_Type = load_variable(return_type)
  # [live values]: parameters.1:rdi return_type.1:rsi 
  # $2.1: @Int8 = call(malloc, 16)
  .loc 13 4 19
  mov [rbp-8], rdi
  mov rdi, 16
  mov [rbp-16], rsi
  call malloc
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $2.1:rax 
  # $3.1: @String = new(String)
  .loc 5 75 18
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, data, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $2.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, data_size, 16)
  mov QWORD PTR [rax+8], 16
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  # type_name.1: @String = call(append_304, $3.1, "(")
  .loc 5 75 18
  mov rdi, rax
  lea rsi, .LABEL__string_224[rip] # "("
  call append_304
  # [discarded value]: $3.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:rax 
  # parameters_item.1: @List_Item = load_struct_member(parameters.1, first_item)
  .loc 5 76 24
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: parameters.1:rbx:[rbp-8] return_type.1:[rbp-16] type_name.1:rax parameters_item.1:r15 
  # jump(block.2)
  mov [rbp-24], rax
  mov [rbp-32], r15
.LABEL__create_ir_function_type_144__2:
  # parameters_item.2: @List_Item = phi(parameters_item.1, parameters_item.4)
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # $6.1: Boolean = parameters_item.2 != null
  .loc 5 77 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:rax 
  # jump($6.1, block.3, block.4)
  test al, al
  jz .LABEL__create_ir_function_type_144__4
.LABEL__create_ir_function_type_144__3:
  # parameter.1: @IR_Function_Type_Parameter = load_struct_member(parameters_item.2, data)
  .loc 5 78 22
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [discarded value]: $6.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] parameter.1:rbx 
  # $9.1: @String = load_struct_member(parameter.1, name)
  .loc 5 79 26
  mov r15, [rbx+0]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] parameter.1:rbx $9.1:r15 
  # $10.1: @String = call(append_304, type_name.1, $9.1)
  .loc 5 79 9
  mov rdi, [rbp-24]
  mov rsi, r15
  mov [rbp-40], rbx
  call append_304
  # [discarded value]: $9.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameter.1:[rbp-40] $10.1:rax 
  # $11.1: @String = call(append_304, $10.1, ": ")
  .loc 5 79 9
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call append_304
  # [discarded value]: $10.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameter.1:[rbp-40] $11.1:rax 
  # $12.1: @IR_Type = load_struct_member(parameter.1, type)
  .loc 5 79 62
  mov rbx, [rbp-40]
  mov r15, [rbx+8]
  # [discarded value]: parameter.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $11.1:rax $12.1:r15 
  # $13.1: @String = load_struct_member($12.1, name)
  .loc 5 79 62
  mov rbx, [r15+8]
  # [discarded value]: $12.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $11.1:rax $13.1:rbx 
  # $14.1: @String = call(append_304, $11.1, $13.1)
  .loc 5 79 9
  mov rdi, rax
  mov rsi, rbx
  call append_304
  # [discarded value]: $11.1
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # parameters_item.4: @List_Item = load_struct_member(parameters_item.2, next_item)
  .loc 5 80 27
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameters_item.4:rbx:[rbp-32] 
  # $16.1: Boolean = parameters_item.4 != null
  .loc 5 81 13
  cmp rbx, 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameters_item.4:rbx:[rbp-32] $16.1:rax 
  # jump($16.1, block.5, block.2)
  test al, al
  mov [rbp-32], rbx
  jz .LABEL__create_ir_function_type_144__2
.LABEL__create_ir_function_type_144__5:
  # $17.1: @String = call(append_304, type_name.1, ", ")
  .loc 5 82 13
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_37[rip] # ", "
  call append_304
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameters_item.4:[rbp-32] 
  # jump(block.2)
  jmp .LABEL__create_ir_function_type_144__2
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameters_item.4:[rbp-32] 
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] parameters_item.4:[rbp-32] 
  # [discarded value]: parameters_item.4
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
.LABEL__create_ir_function_type_144__4:
  # $18.1: @String = call(append_304, type_name.1, ") -> ")
  .loc 5 85 5
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_225[rip] # ") -> "
  call append_304
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $18.1:rax 
  # $19.1: @String = load_struct_member(return_type.1, name)
  .loc 5 85 38
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:rbx:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $18.1:rax $19.1:r15 
  # $20.1: @String = call(append_304, $18.1, $19.1)
  .loc 5 85 5
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # $21.1: @IR_Function_Type = new(IR_Function_Type)
  .loc 5 87 12
  mov rdi, 32
  call malloc
  lea rbx, IR_Function_Type[rip]
  mov [rax], rbx
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $21.1:rax 
  # store_struct_member($21.1, name, type_name.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $21.1:rax 
  # store_struct_member($21.1, parameters, parameters.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: parameters.1:r15:[rbp-8] return_type.1:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $21.1:rax 
  # store_struct_member($21.1, return_type, return_type.1)
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  # [live values]: parameters.1:r15:[rbp-8] return_type.1:r14:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $21.1:rax 
  # return($21.1)
  .loc 5 87 5
  jmp .LABEL__create_ir_function_type_144__end
  # [discarded value]: $21.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # [discarded value]: parameters_item.2
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [discarded value]: parameters.1
  # [discarded value]: return_type.1
  # [discarded value]: type_name.1
  # [discarded value]: parameters_item.1
  # [live values]: 
.LABEL__create_ir_function_type_144__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_function_type_144__stack_frame_size: .word 48

  .loc 5 102 1
  .text
create_ir_struct_type_145:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_struct_type_145__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_struct_type_145__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # statement.1: @AST_Struct_Statement = load_variable(statement)
  # [live values]: name.1:rdi statement.1:rsi 
  # $1.1: @List = new(List)
  .loc 5 92 22
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Struct_Type = new(IR_Struct_Type)
  .loc 5 103 12
  mov [rbp-24], rax
  mov rdi, 40
  call malloc
  lea rbx, IR_Struct_Type[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, name, name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: name.1
  # [live values]: statement.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, base_type, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: statement.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, members, $1.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: statement.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, statement, statement.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: statement.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 5 103 5
  jmp .LABEL__create_ir_struct_type_145__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_ir_struct_type_145__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_struct_type_145__stack_frame_size: .word 32

  .loc 5 106 1
  .text
add_member_146:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_member_146__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_member_146__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi name.1:rsi type.1:rdx 
  # $1.1: @IR_Struct_Type_Member = new(IR_Struct_Type_Member)
  .loc 5 107 15
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] name.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, struct_type, self.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+0], rbx
  # [live values]: self.1:rbx:[rbp-24] name.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, name, name.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: name.1
  # [live values]: self.1:rbx:[rbp-24] type.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, type, type.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: type.1
  # [live values]: self.1:rbx:[rbp-24] $1.1:rax 
  # member.1: @IR_Struct_Type_Member = $1.1
  .loc 5 107 5
  # [discarded value]: $1.1
  # [live values]: self.1:rbx:[rbp-24] member.1:rax 
  # $2.1: @List = load_struct_member(self.1, members)
  .loc 5 108 5
  mov r15, [rbx+24]
  # [discarded value]: self.1
  # [live values]: member.1:rax $2.1:r15 
  # call(append_268, $2.1, member.1)
  .loc 5 108 5
  mov rdi, r15
  mov rsi, rax
  mov [rbp-8], rax
  call append_268
  # [discarded value]: $2.1
  # [live values]: member.1:[rbp-8] 
  # return(member.1)
  .loc 5 109 5
  mov rax, [rbp-8]
  jmp .LABEL__add_member_146__end
  # [discarded value]: member.1
  # [live values]: 
.LABEL__add_member_146__end:
  mov rsp, rbp
  pop rbp
  ret

add_member_146__stack_frame_size: .word 32

  .loc 5 112 1
  .text
get_member_147:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_147__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_147__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: struct_type.1:rdi name.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__get_member_147__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] 
  # $1.1: @List = load_struct_member(struct_type.2, members)
  .loc 5 115 25
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] $1.1:rbx 
  # members_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 5 115 25
  mov r15, [rbx+0]
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] members_item.1:r15 
  # jump(block.4)
  mov [rbp-24], r15
.LABEL__get_member_147__4:
  # members_item.2: @List_Item = phi(members_item.1, members_item.5)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  # $3.1: Boolean = members_item.2 != null
  .loc 5 116 16
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  jz .LABEL__get_member_147__6
.LABEL__get_member_147__5:
  # member.1: @IR_Struct_Type_Member = load_struct_member(members_item.2, data)
  .loc 5 117 23
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] member.1:rbx 
  # $6.1: @String = load_struct_member(member.1, name)
  .loc 5 118 17
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] member.1:rbx $6.1:r15 
  # $7.1: Boolean = call(equals_296, $6.1, name.1)
  .loc 5 118 17
  mov rdi, r15
  mov rsi, [rbp-8]
  mov [rbp-32], rbx
  call equals_296
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] member.1:[rbp-32] $7.1:rax 
  # jump($7.1, block.7, block.8)
  test al, al
  jz .LABEL__get_member_147__8
.LABEL__get_member_147__7:
  # return(member.1)
  .loc 5 119 17
  mov rax, [rbp-32]
  jmp .LABEL__get_member_147__end
  # [discarded value]: $7.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] member.1:[rbp-32] 
.LABEL__get_member_147__8:
  # members_item.5: @List_Item = load_struct_member(members_item.2, next_item)
  .loc 5 121 28
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] member.1:[rbp-32] members_item.5:rbx:[rbp-24] 
  # jump(block.4)
  mov [rbp-24], rbx
  jmp .LABEL__get_member_147__4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] member.1:[rbp-32] members_item.5:[rbp-24] 
  # [discarded value]: members_item.5
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] member.1:[rbp-32] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] member.1:[rbp-32] 
  # [discarded value]: member.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
.LABEL__get_member_147__6:
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 5 123 23
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] struct_type.4:rbx:[rbp-16] 
  # $10.1: Boolean = struct_type.4 == null
  .loc 5 124 13
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] struct_type.4:rbx:[rbp-16] $10.1:rax 
  # jump($10.1, block.10, block.2)
  test al, al
  mov [rbp-16], rbx
  jz .LABEL__get_member_147__2
.LABEL__get_member_147__10:
  # return(null)
  .loc 5 125 13
  xor rax, rax
  jmp .LABEL__get_member_147__end
  # [discarded value]: $10.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] struct_type.4:[rbp-16] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] struct_type.4:[rbp-16] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  # [discarded value]: members_item.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [discarded value]: struct_type.2
  # [discarded value]: members_item.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_member_147__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_147__stack_frame_size: .word 32

  .loc 5 130 1
  .text
is_base_type_148:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_base_type_148__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_base_type_148__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type.1: @IR_Struct_Type = load_variable(other)
  # [live values]: self.1:rdi struct_type.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__is_base_type_148__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 5 133 21
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  # $2.1: Boolean = self.1 == $1.1
  .loc 5 133 13
  cmp QWORD PTR [rbp-16], rbx
  sete r15b
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:r15 
  # jump($2.1, block.4, block.5)
  test r15b, r15b
  jz .LABEL__is_base_type_148__5
.LABEL__is_base_type_148__4:
  # return(true)
  .loc 5 134 13
  mov al, 1
  jmp .LABEL__is_base_type_148__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
.LABEL__is_base_type_148__5:
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 5 136 23
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rbx:[rbp-8] 
  # $4.1: Boolean = struct_type.4 == null
  .loc 5 137 13
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, block.7, block.2)
  test al, al
  mov [rbp-8], rbx
  jz .LABEL__is_base_type_148__2
.LABEL__is_base_type_148__7:
  # return(false)
  .loc 5 138 13
  mov al, 0
  jmp .LABEL__is_base_type_148__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_base_type_148__end:
  mov rsp, rbp
  pop rbp
  ret

is_base_type_148__stack_frame_size: .word 16

  .loc 5 143 1
  .text
is_object_type_149:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_object_type_149__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_object_type_149__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # jump(block.2)
  mov [rbp-8], rdi
.LABEL__is_object_type_149__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # $1.1: @String = load_struct_member(struct_type.2, name)
  .loc 5 146 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  # $2.1: Boolean = call(equals_296, $1.1, "Object")
  .loc 5 146 13
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "Object"
  call equals_296
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.4, block.5)
  test al, al
  jz .LABEL__is_object_type_149__5
.LABEL__is_object_type_149__4:
  # return(true)
  .loc 5 147 13
  mov al, 1
  jmp .LABEL__is_object_type_149__end
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
.LABEL__is_object_type_149__5:
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 5 149 23
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rbx:[rbp-8] 
  # $4.1: Boolean = struct_type.4 == null
  .loc 5 150 13
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, block.7, block.2)
  test al, al
  mov [rbp-8], rbx
  jz .LABEL__is_object_type_149__2
.LABEL__is_object_type_149__7:
  # return(false)
  .loc 5 151 13
  mov al, 0
  jmp .LABEL__is_object_type_149__end
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_object_type_149__end:
  mov rsp, rbp
  pop rbp
  ret

is_object_type_149__stack_frame_size: .word 16

  .loc 5 173 1
  .text
init_150:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_150__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_150__1:
  # self.1: @IR_Variable_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # store_struct_member(self.1, variable, variable.1)
  .loc 5 174 5
  mov QWORD PTR [rdi+24], rsi
  # [live values]: self.1:rdi variable.1:rsi 
  # $1.1: @List = load_struct_member(variable.1, values)
  .loc 5 175 20
  mov rax, [rsi+24]
  # [live values]: self.1:rdi variable.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member($1.1, size)
  .loc 5 175 20
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable.1:rsi $2.1:rbx 
  # $3.1: Int = $2.1 + 1
  .loc 5 175 20
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi variable.1:rsi $3.1:rax 
  # store_struct_member(self.1, version, $3.1)
  .loc 5 175 5
  mov QWORD PTR [rdi+32], rax
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable.1:rsi 
  # $4.1: @List = load_struct_member(variable.1, values)
  .loc 5 176 5
  mov rax, [rsi+24]
  # [discarded value]: variable.1
  # [live values]: self.1:rdi $4.1:rax 
  # call(append_268, $4.1, self.1)
  .loc 5 176 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 5 177 5
  mov rax, [rbp-8]
  jmp .LABEL__init_150__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_150__end:
  mov rsp, rbp
  pop rbp
  ret

init_150__stack_frame_size: .word 16

  .loc 5 190 1
  .text
has_instructions_151:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_instructions_151__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_instructions_151__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 5 191 12
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 5 191 12
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  # return($2.1)
  .loc 5 191 5
  mov al, bl
  jmp .LABEL__has_instructions_151__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_instructions_151__end:
  mov rsp, rbp
  pop rbp
  ret

has_instructions_151__stack_frame_size: .word 0

  .loc 5 194 1
  .text
prepend_152:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_152__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_152__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, parent_block, self.1)
  .loc 5 195 5
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, prev_instruction, null)
  .loc 5 196 5
  mov QWORD PTR [rsi+40], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 5 197 36
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # store_struct_member(instruction.1, next_instruction, $1.1)
  .loc 5 197 5
  mov QWORD PTR [rsi+48], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  # $2.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 5 198 9
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  # $3.1: Boolean = $2.1 == null
  .loc 5 198 9
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, block.2, block.4)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__prepend_152__4
.LABEL__prepend_152__2:
  # store_struct_member(self.1, last_instruction, instruction.1)
  .loc 5 199 9
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+40], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] 
  # jump(block.3)
.LABEL__prepend_152__3:
  # store_struct_member(self.1, first_instruction, instruction.1)
  .loc 5 203 5
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] 
  # return(instruction.1)
  .loc 5 204 5
  mov rax, rbx
  jmp .LABEL__prepend_152__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__prepend_152__4:
  # $4.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 5 201 9
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  # store_struct_member($4.1, prev_instruction, instruction.1)
  .loc 5 201 9
  mov r15, [rbp-8]
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:r15:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__prepend_152__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__prepend_152__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_152__stack_frame_size: .word 16

  .loc 5 207 1
  .text
append_153:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_153__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_153__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, parent_block, self.1)
  .loc 5 208 5
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 5 209 36
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # store_struct_member(instruction.1, prev_instruction, $1.1)
  .loc 5 209 5
  mov QWORD PTR [rsi+40], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, next_instruction, null)
  .loc 5 210 5
  mov QWORD PTR [rsi+48], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  # $2.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 5 211 9
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  # $3.1: Boolean = $2.1 == null
  .loc 5 211 9
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, block.2, block.4)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__append_153__4
.LABEL__append_153__2:
  # store_struct_member(self.1, first_instruction, instruction.1)
  .loc 5 212 9
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] 
  # jump(block.3)
.LABEL__append_153__3:
  # store_struct_member(self.1, last_instruction, instruction.1)
  .loc 5 216 5
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] 
  # return(instruction.1)
  .loc 5 217 5
  mov rax, rbx
  jmp .LABEL__append_153__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__append_153__4:
  # $4.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 5 214 9
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  # store_struct_member($4.1, next_instruction, instruction.1)
  .loc 5 214 9
  mov r15, [rbp-8]
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:r15:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__append_153__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_153__end:
  mov rsp, rbp
  pop rbp
  ret

append_153__stack_frame_size: .word 16

  .loc 5 220 1
  .text
append_jump_154:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_154__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_154__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Direct_Jump_Instruction = new(IR_Direct_Jump_Instruction)
  .loc 5 221 20
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Direct_Jump_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, block, block.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [live values]: self.1:[rbp-16] block.1:rbx:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Direct_Jump_Instruction = $2.1
  .loc 5 221 5
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] block.1:rbx:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(block.1, predecessors)
  .loc 5 222 5
  mov r15, [rbx+24]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-16] instruction.1:rax $3.1:r15 
  # call(append_268, $3.1, self.1)
  .loc 5 222 5
  mov rdi, r15
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-24] 
  # $4.1: @IR_Instruction = call(append_153, self.1, instruction.1)
  .loc 5 223 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call append_153
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 5 224 5
  mov rax, [rbp-24]
  jmp .LABEL__append_jump_154__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_154__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_154__stack_frame_size: .word 32

  .loc 5 227 1
  .text
append_jump_155:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_155__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_155__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # condition_value.1: @IR_Value = load_variable(condition_value)
  # [live values]: self.1:rdi condition_value.1:rsi 
  # true_block.1: @IR_Block = load_variable(true_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx 
  # false_block.1: @IR_Block = load_variable(false_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx false_block.1:rcx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Conditional_Jump_Instruction = new(IR_Conditional_Jump_Instruction)
  .loc 5 228 20
  mov [rbp-40], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Conditional_Jump_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:[rbp-40] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:[rbp-40] $2.1:rax 
  # store_struct_member($2.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:[rbp-40] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, true_block, true_block.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+57], rbx
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:rbx:[rbp-16] false_block.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, false_block, false_block.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+65], r15
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:rbx:[rbp-16] false_block.1:r15:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Conditional_Jump_Instruction = $2.1
  .loc 5 228 5
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:rbx:[rbp-16] false_block.1:r15:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 229 5
  mov r14, [rax+24]
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:rbx:[rbp-16] false_block.1:r15:[rbp-8] instruction.1:rax $3.1:r14 
  # call(append_268, $3.1, condition_value.1)
  .loc 5 229 5
  mov rdi, r14
  mov rsi, [rbp-24]
  mov [rbp-40], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  # $4.1: @List = load_struct_member(true_block.1, predecessors)
  .loc 5 230 5
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: true_block.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] false_block.1:[rbp-8] instruction.1:[rbp-40] $4.1:rbx 
  # call(append_268, $4.1, self.1)
  .loc 5 230 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  # $5.1: @List = load_struct_member(false_block.1, predecessors)
  .loc 5 231 5
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: false_block.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] instruction.1:[rbp-40] $5.1:rbx 
  # call(append_268, $5.1, self.1)
  .loc 5 231 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] instruction.1:[rbp-40] 
  # $6.1: @List = load_struct_member(condition_value.1, user_instructions)
  .loc 5 232 5
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] $6.1:rbx 
  # call(append_268, $6.1, instruction.1)
  .loc 5 232 5
  mov rdi, rbx
  mov rsi, [rbp-40]
  call append_268
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] 
  # $7.1: @IR_Instruction = call(append_153, self.1, instruction.1)
  .loc 5 233 5
  mov rdi, [rbp-32]
  mov rsi, [rbp-40]
  call append_153
  # [discarded value]: self.1
  # [discarded value]: $7.1
  # [live values]: instruction.1:[rbp-40] 
  # return(instruction.1)
  .loc 5 234 5
  mov rax, [rbp-40]
  jmp .LABEL__append_jump_155__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_155__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_155__stack_frame_size: .word 48

  .loc 5 237 1
  .text
remove_156:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_156__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_156__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  .loc 5 238 9
  mov rax, [rsi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != self.1
  .loc 5 238 9
  cmp rax, rdi
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__remove_156__3
.LABEL__remove_156__2:
  # call(abort_292, "Tried to remove instruction belonging to another block")
  .loc 5 239 9
  lea rdi, .LABEL__string_227[rip] # "Tried to remove instruction belonging to another block"
  call abort_292
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__remove_156__3:
  # $3.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 5 241 9
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 != null
  .loc 5 241 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $4.1:r15 
  # jump($4.1, block.4, block.5)
  test r15b, r15b
  jz .LABEL__remove_156__5
.LABEL__remove_156__4:
  # $5.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 5 242 9
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $5.1:rbx 
  # $6.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 5 242 57
  mov r15, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $5.1:rbx $6.1:r15 
  # store_struct_member($5.1, next_instruction, $6.1)
  .loc 5 242 9
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] 
  # jump(block.5)
.LABEL__remove_156__5:
  # $7.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 5 244 9
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $7.1:rbx 
  # $8.1: Boolean = $7.1 != null
  .loc 5 244 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $8.1:r15 
  # jump($8.1, block.6, block.7)
  test r15b, r15b
  jz .LABEL__remove_156__7
.LABEL__remove_156__6:
  # $9.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 5 245 9
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $9.1:rbx 
  # $10.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 5 245 57
  mov r15, [rax+40]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $9.1:rbx $10.1:r15 
  # store_struct_member($9.1, prev_instruction, $10.1)
  .loc 5 245 9
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] 
  # jump(block.7)
.LABEL__remove_156__7:
  # $11.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 5 247 9
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $11.1:rbx 
  # $12.1: Boolean = $11.1 == instruction.1
  .loc 5 247 9
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $12.1:r15 
  # jump($12.1, block.8, block.9)
  test r15b, r15b
  jz .LABEL__remove_156__9
.LABEL__remove_156__8:
  # $13.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 5 248 34
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $13.1:rbx 
  # store_struct_member(self.1, first_instruction, $13.1)
  .loc 5 248 9
  mov r15, [rbp-16]
  mov QWORD PTR [r15+32], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] 
  # jump(block.9)
.LABEL__remove_156__9:
  # $14.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 5 250 9
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $14.1:rbx 
  # $15.1: Boolean = $14.1 == instruction.1
  .loc 5 250 9
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $15.1:r15 
  # jump($15.1, block.10, block.11)
  test r15b, r15b
  jz .LABEL__remove_156__11
.LABEL__remove_156__10:
  # $16.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 5 251 33
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $16.1:rbx 
  # store_struct_member(self.1, last_instruction, $16.1)
  .loc 5 251 9
  mov r15, [rbp-16]
  mov QWORD PTR [r15+40], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] 
  # jump(block.11)
.LABEL__remove_156__11:
  # store_struct_member(instruction.1, parent_block, null)
  .loc 5 253 5
  mov rax, [rbp-8]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] 
  # store_struct_member(instruction.1, prev_instruction, null)
  .loc 5 254 5
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] 
  # store_struct_member(instruction.1, next_instruction, null)
  .loc 5 255 5
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] 
  # return()
  jmp .LABEL__remove_156__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__remove_156__end:
  mov rsp, rbp
  pop rbp
  ret

remove_156__stack_frame_size: .word 16

  .loc 5 269 1
  .text
create_block_157:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_block_157__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_block_157__1:
  # self.1: @IR_Function = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, blocks)
  .loc 5 270 32
  mov rax, [rdi+57]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Int = load_struct_member($1.1, size)
  .loc 5 270 32
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # $3.1: Int = $2.1 + 1
  .loc 5 270 32
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  # $4.1: @List = new(List)
  .loc 5 183 27
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  # $5.1: @IR_Block = new(IR_Block)
  .loc 5 270 14
  mov [rbp-24], rax
  mov rdi, 50
  call malloc
  lea rbx, IR_Block[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, id, $3.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, function, self.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:rbx:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, predecessors, $4.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, first_instruction, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, last_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, is_being_generated, false)
  mov BYTE PTR [rax+48], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # store_struct_member($5.1, is_generated, false)
  mov BYTE PTR [rax+49], 0
  # [live values]: self.1:rbx:[rbp-16] $5.1:rax 
  # block.1: @IR_Block = $5.1
  .loc 5 270 5
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-16] block.1:rax 
  # $6.1: @List = load_struct_member(self.1, blocks)
  .loc 5 271 5
  mov r15, [rbx+57]
  # [discarded value]: self.1
  # [live values]: block.1:rax $6.1:r15 
  # call(append_268, $6.1, block.1)
  .loc 5 271 5
  mov rdi, r15
  mov rsi, rax
  mov [rbp-8], rax
  call append_268
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] 
  # return(block.1)
  .loc 5 272 5
  mov rax, [rbp-8]
  jmp .LABEL__create_block_157__end
  # [discarded value]: block.1
  # [live values]: 
.LABEL__create_block_157__end:
  mov rsp, rbp
  pop rbp
  ret

create_block_157__stack_frame_size: .word 32

  .loc 5 285 1
  .text
create_ir_global_variable_158:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_global_variable_158__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_global_variable_158__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: name.1:rdi type.1:rsi 
  # is_external.1: Boolean = load_variable(is_external)
  # [live values]: name.1:rdi type.1:rsi is_external.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 278 21
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 24
  call malloc
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:rax 
  # $2.1: @IR_Global_Variable = new(IR_Global_Variable)
  .loc 5 286 17
  mov [rbp-25], rax
  mov rdi, 33
  call malloc
  lea rbx, IR_Global_Variable[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] $1.1:[rbp-25] $2.1:rax 
  # store_struct_member($2.1, name, name.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: name.1
  # [live values]: type.1:[rbp-9] is_external.1:[rbp-1] $1.1:[rbp-25] $2.1:rax 
  # store_struct_member($2.1, type, type.1)
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: type.1
  # [live values]: is_external.1:[rbp-1] $1.1:[rbp-25] $2.1:rax 
  # store_struct_member($2.1, values, $1.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: is_external.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, is_external, is_external.1)
  mov bl, [rbp-1]
  mov BYTE PTR [rax+32], bl
  # [discarded value]: is_external.1
  # [live values]: $2.1:rax 
  # variable.1: @IR_Global_Variable = $2.1
  .loc 5 286 5
  # [discarded value]: $2.1
  # [live values]: variable.1:rax 
  # return(variable.1)
  .loc 5 287 5
  jmp .LABEL__create_ir_global_variable_158__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__create_ir_global_variable_158__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_global_variable_158__stack_frame_size: .word 32

  .loc 5 303 1
  .text
is_exit_instruction_159:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_exit_instruction_159__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_exit_instruction_159__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Boolean = self.1 == null
  .loc 5 304 9
  cmp rdi, 0
  sete al
  # [live values]: self.1:rdi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__is_exit_instruction_159__3
.LABEL__is_exit_instruction_159__2:
  # return(false)
  .loc 5 305 9
  mov al, 0
  jmp .LABEL__is_exit_instruction_159__end
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
.LABEL__is_exit_instruction_159__3:
  # IR_Jump_Instruction.2: @Object_Type = load_variable(IR_Jump_Instruction)
  lea rax, IR_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-8] IR_Jump_Instruction.2:rax 
  # $3.1: Boolean = call(is_293, self.1, IR_Jump_Instruction.2)
  .loc 5 307 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Jump_Instruction.2
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.6, block.5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__is_exit_instruction_159__5
.LABEL__is_exit_instruction_159__6:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 5 307 9
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $3.3:[rbp-9] 
  # jump($3.3, block.7, block.8)
  mov al, [rbp-9]
  test al, al
  jz .LABEL__is_exit_instruction_159__8
.LABEL__is_exit_instruction_159__7:
  # return(true)
  .loc 5 308 9
  mov al, 1
  jmp .LABEL__is_exit_instruction_159__end
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__is_exit_instruction_159__8:
  # IR_Direct_Call_Instruction.3: @Object_Type = load_variable(IR_Direct_Call_Instruction)
  lea rax, IR_Direct_Call_Instruction[rip]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] IR_Direct_Call_Instruction.3:rax 
  # $5.1: Boolean = call(is_293, self.1, IR_Direct_Call_Instruction.3)
  .loc 5 310 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Direct_Call_Instruction.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $5.1:rax 
  # jump($5.1, block.10, block.11)
  test al, al
  jz .LABEL__is_exit_instruction_159__11
.LABEL__is_exit_instruction_159__10:
  # self.1: @IR_Direct_Call_Instruction = self.1
  .loc 5 311 17
  mov rax, [rbp-8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] self.1:rax 
  # function.1: @IR_Function = load_struct_member(self.1, function)
  .loc 5 312 21
  mov rbx, [rax+65]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rbx 
  # $8.1: @String = load_struct_member(function.1, name)
  .loc 5 313 13
  mov rax, [rbx+24]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rbx $8.1:rax 
  # $9.1: Boolean = call(equals_296, $8.1, "abort")
  .loc 5 313 13
  mov rdi, rax
  lea rsi, .LABEL__string_228[rip] # "abort"
  mov [rbp-17], rbx
  call equals_296
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $9.1:rax 
  # jump($9.1, block.12, block.13)
  test al, al
  jz .LABEL__is_exit_instruction_159__13
.LABEL__is_exit_instruction_159__12:
  # return(true)
  .loc 5 314 13
  mov al, 1
  jmp .LABEL__is_exit_instruction_159__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] 
.LABEL__is_exit_instruction_159__13:
  # $10.1: @String = load_struct_member(function.1, name)
  .loc 5 316 13
  mov rax, [rbp-17]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rax:[rbp-17] $10.1:rbx 
  # $12.1: Boolean = call(equals_296, $10.1, "exit")
  .loc 5 316 13
  mov rdi, rbx
  lea rsi, .LABEL__string_229[rip] # "exit"
  call equals_296
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:rax 
  # jump($12.1, block.15, block.16)
  test al, al
  mov [rbp-18], al
  jz .LABEL__is_exit_instruction_159__16
.LABEL__is_exit_instruction_159__15:
  # $13.1: @List = load_struct_member(function.1, parameters)
  .loc 5 316 45
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rax:[rbp-17] $12.1:[rbp-18] $13.1:rbx 
  # $14.1: Int = load_struct_member($13.1, size)
  .loc 5 316 45
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rax:[rbp-17] $12.1:[rbp-18] $14.1:r15 
  # $12.2: Boolean = $14.1 == 1
  .loc 5 316 45
  cmp r15, 1
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rax:[rbp-17] $12.1:[rbp-18] $12.2:rbx:[rbp-18] 
  # jump(block.16)
  mov [rbp-18], bl
.LABEL__is_exit_instruction_159__16:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 5 316 13
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $12.3:[rbp-18] 
  # jump($12.3, block.17, block.11)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__is_exit_instruction_159__11
.LABEL__is_exit_instruction_159__17:
  # $16.1: @List = load_struct_member(function.1, parameters)
  .loc 5 317 35
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rax:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $16.1:rbx 
  # function_parameter.1: @IR_Function_Parameter = call(get_276, $16.1, 0)
  .loc 5 317 35
  mov rdi, rbx
  xor rsi, rsi
  call get_276
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] function_parameter.1:rax 
  # $19.1: @IR_Type = load_struct_member(function_parameter.1, type)
  .loc 5 318 17
  mov rbx, [rax+16]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $19.1:rbx 
  # IR_Int_Type.11: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $19.1:rbx IR_Int_Type.11:rax 
  # $20.1: Boolean = call(is_293, $19.1, IR_Int_Type.11)
  .loc 5 318 17
  mov rdi, rbx
  mov rsi, rax
  call is_293
  # [discarded value]: $19.1
  # [discarded value]: IR_Int_Type.11
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $20.1:rax 
  # jump($20.1, block.19, block.11)
  test al, al
  jz .LABEL__is_exit_instruction_159__11
.LABEL__is_exit_instruction_159__19:
  # return(true)
  .loc 5 319 17
  mov al, 1
  jmp .LABEL__is_exit_instruction_159__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
.LABEL__is_exit_instruction_159__11:
  # return(false)
  .loc 5 323 5
  mov al, 0
  jmp .LABEL__is_exit_instruction_159__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__is_exit_instruction_159__5:
  # IR_Return_Instruction.3: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] IR_Return_Instruction.3:rax 
  # $3.2: Boolean = call(is_293, self.1, IR_Return_Instruction.3)
  .loc 5 307 41
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Return_Instruction.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $3.2:rax:[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__is_exit_instruction_159__6
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $3.2:[rbp-9] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_exit_instruction_159__end:
  mov rsp, rbp
  pop rbp
  ret

is_exit_instruction_159__stack_frame_size: .word 32

  .loc 5 335 1
  .text
add_arguments_160:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_arguments_160__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_arguments_160__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  # $1.1: Int = load_struct_member(self.1, arguments_size)
  .loc 5 336 27
  mov rax, [rdi+57]
  # [live values]: self.1:rdi call_arguments.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(call_arguments.1, size)
  .loc 5 336 49
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi call_arguments.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Int = $1.1 + $2.1
  .loc 5 336 27
  mov r15, rax
  add r15, rbx
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi call_arguments.1:rsi $3.1:r15 
  # store_struct_member(self.1, arguments_size, $3.1)
  .loc 5 336 5
  mov QWORD PTR [rdi+57], r15
  # [discarded value]: $3.1
  # [live values]: self.1:rdi call_arguments.1:rsi 
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  .loc 5 337 28
  mov rax, [rsi+0]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__add_arguments_160__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.4)
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # $5.1: Boolean = call_arguments_item.2 != null
  .loc 5 338 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__add_arguments_160__4
.LABEL__add_arguments_160__3:
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  .loc 5 339 26
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] call_argument.1:rbx 
  # $8.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 340 9
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: self.1:r15:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] call_argument.1:rbx $8.1:r14 
  # $9.1: @IR_Value = load_struct_member(call_argument.1, value)
  .loc 5 340 36
  mov r13, [rbx+8]
  # [live values]: self.1:r15:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] call_argument.1:rbx $8.1:r14 $9.1:r13 
  # call(append_268, $8.1, $9.1)
  .loc 5 340 9
  mov rdi, r14
  mov rsi, r13
  mov [rbp-24], rbx
  call append_268
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_argument.1:[rbp-24] 
  # $10.1: @IR_Value = load_struct_member(call_argument.1, value)
  .loc 5 341 9
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $10.1:rbx 
  # $11.1: @List = load_struct_member($10.1, user_instructions)
  .loc 5 341 9
  mov rax, [rbx+16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $11.1:rax 
  # call(append_268, $11.1, self.1)
  .loc 5 341 9
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  .loc 5 342 31
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_arguments_item.4:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__add_arguments_160__2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] call_arguments_item.4:[rbp-8] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
.LABEL__add_arguments_160__4:
  # return(self.1)
  .loc 5 344 5
  mov rax, [rbp-16]
  jmp .LABEL__add_arguments_160__end
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: call_arguments_item.1
  # [live values]: 
.LABEL__add_arguments_160__end:
  mov rsp, rbp
  pop rbp
  ret

add_arguments_160__stack_frame_size: .word 32

  .loc 5 347 1
  .text
argument_161:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR argument_161__stack_frame_size[rip]
  sub rsp, rax
.LABEL__argument_161__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  # $1.1: Int = load_struct_member(self.1, arguments_size)
  .loc 5 348 18
  mov rax, [rdi+57]
  # [live values]: self.1:rdi index.1:rsi $1.1:rax 
  # $2.1: Boolean = index.1 >= $1.1
  .loc 5 348 9
  cmp rsi, rax
  setge bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi index.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__argument_161__3
.LABEL__argument_161__2:
  # return(null)
  .loc 5 349 9
  xor rax, rax
  jmp .LABEL__argument_161__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] index.1:[rbp-8] 
.LABEL__argument_161__3:
  # $3.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 351 12
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-16] index.1:[rbp-8] $3.1:rbx 
  # $5.1: @IR_Value = call(get_276, $3.1, index.1)
  .loc 5 351 12
  mov rdi, rbx
  mov rsi, [rbp-8]
  call get_276
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] index.1:[rbp-8] $5.1:rax 
  # return($5.1)
  .loc 5 351 5
  jmp .LABEL__argument_161__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] index.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] index.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: index.1
  # [live values]: 
.LABEL__argument_161__end:
  mov rsp, rbp
  pop rbp
  ret

argument_161__stack_frame_size: .word 16

  .loc 5 358 1
  .text
create_ir_direct_call_instruction_162:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_direct_call_instruction_162__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_direct_call_instruction_162__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Direct_Call_Instruction = new(IR_Direct_Call_Instruction)
  .loc 5 359 20
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  lea rbx, IR_Direct_Call_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: call_arguments.1:[rbp-16] function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: call_arguments.1:[rbp-16] function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: call_arguments.1:[rbp-16] function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: call_arguments.1:[rbp-16] function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, arguments_size, 0)
  mov QWORD PTR [rax+57], 0
  # [live values]: call_arguments.1:[rbp-16] function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, function, function.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+65], rbx
  # [discarded value]: function.1
  # [live values]: call_arguments.1:[rbp-16] $2.1:rax 
  # instruction.1: @IR_Direct_Call_Instruction = $2.1
  .loc 5 359 5
  # [discarded value]: $2.1
  # [live values]: call_arguments.1:[rbp-16] instruction.1:rax 
  # $3.1: @IR_Call_Instruction = call(add_arguments_160, instruction.1, call_arguments.1)
  .loc 5 360 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call add_arguments_160
  # [discarded value]: call_arguments.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 5 361 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_direct_call_instruction_162__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_direct_call_instruction_162__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_direct_call_instruction_162__stack_frame_size: .word 32

  .loc 5 367 1
  .text
create_ir_dynamic_call_instruction_163:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_dynamic_call_instruction_163__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_dynamic_call_instruction_163__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function_address.1: @IR_Variable_Value = load_variable(function_address)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function_address.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Dynamic_Call_Instruction = new(IR_Dynamic_Call_Instruction)
  .loc 5 368 20
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Dynamic_Call_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, arguments_size, 0)
  mov QWORD PTR [rax+57], 0
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Dynamic_Call_Instruction = $2.1
  .loc 5 368 5
  # [discarded value]: $2.1
  # [live values]: call_arguments.1:[rbp-16] function_address.1:[rbp-8] instruction.1:rax 
  # $3.1: @IR_Call_Instruction = call(add_arguments_160, instruction.1, call_arguments.1)
  .loc 5 369 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call add_arguments_160
  # [discarded value]: call_arguments.1
  # [discarded value]: $3.1
  # [live values]: function_address.1:[rbp-8] instruction.1:[rbp-24] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 370 5
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: function_address.1:[rbp-8] instruction.1:rax:[rbp-24] $4.1:rbx 
  # call(append_268, $4.1, function_address.1)
  .loc 5 370 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $4.1
  # [live values]: function_address.1:[rbp-8] instruction.1:[rbp-24] 
  # $5.1: @List = load_struct_member(function_address.1, user_instructions)
  .loc 5 371 5
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: function_address.1
  # [live values]: instruction.1:[rbp-24] $5.1:rbx 
  # call(append_268, $5.1, instruction.1)
  .loc 5 371 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_268
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 5 372 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_dynamic_call_instruction_163__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_dynamic_call_instruction_163__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_dynamic_call_instruction_163__stack_frame_size: .word 32

  .loc 5 375 1
  .text
function_address_164:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR function_address_164__stack_frame_size[rip]
  sub rsp, rax
.LABEL__function_address_164__1:
  # self.1: @IR_Dynamic_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 376 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Variable_Value = call(last_278, $1.1)
  .loc 5 376 12
  mov rdi, rax
  call last_278
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 376 5
  jmp .LABEL__function_address_164__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__function_address_164__end:
  mov rsp, rbp
  pop rbp
  ret

function_address_164__stack_frame_size: .word 0

  .loc 5 382 1
  .text
create_ir_cast_instruction_165:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_cast_instruction_165__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_cast_instruction_165__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Cast_Instruction = new(IR_Cast_Instruction)
  .loc 5 383 20
  mov [rbp-24], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Cast_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: value.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Cast_Instruction = $2.1
  .loc 5 383 5
  # [discarded value]: $2.1
  # [live values]: value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 384 5
  mov rbx, [rax+24]
  # [live values]: value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, value.1)
  .loc 5 384 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-16] 
  # $4.1: @List = load_struct_member(value.1, user_instructions)
  .loc 5 385 5
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-16] $4.1:rbx 
  # call(append_268, $4.1, instruction.1)
  .loc 5 385 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-16] 
  # return(instruction.1)
  .loc 5 386 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_cast_instruction_165__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_cast_instruction_165__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_cast_instruction_165__stack_frame_size: .word 32

  .loc 5 389 1
  .text
get_value_166:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_166__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_166__1:
  # self.1: @IR_Cast_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 390 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 390 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 390 5
  jmp .LABEL__get_value_166__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_166__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_166__stack_frame_size: .word 0

  .loc 5 401 1
  .text
get_condition_value_167:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_condition_value_167__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_condition_value_167__1:
  # self.1: @IR_Conditional_Jump_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 402 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 402 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 402 5
  jmp .LABEL__get_condition_value_167__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_condition_value_167__end:
  mov rsp, rbp
  pop rbp
  ret

get_condition_value_167__stack_frame_size: .word 0

  .loc 5 412 1
  .text
create_ir_load_array_item_instruction_168:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_array_item_instruction_168__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_array_item_instruction_168__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: result_value.1:rdi array_value.1:rsi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: result_value.1:rdi array_value.1:rsi index_value.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Load_Array_Item_Instruction = new(IR_Load_Array_Item_Instruction)
  .loc 5 413 20
  mov [rbp-32], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Load_Array_Item_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Load_Array_Item_Instruction = $2.1
  .loc 5 413 5
  # [discarded value]: $2.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 414 5
  mov rbx, [rax+24]
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, array_value.1)
  .loc 5 414 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-24] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 415 5
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:rax:[rbp-24] $4.1:rbx 
  # call(append_268, $4.1, index_value.1)
  .loc 5 415 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $4.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-24] 
  # $5.1: @List = load_struct_member(array_value.1, user_instructions)
  .loc 5 416 5
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-8] instruction.1:[rbp-24] $5.1:rbx 
  # call(append_268, $5.1, instruction.1)
  .loc 5 416 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_268
  # [discarded value]: $5.1
  # [live values]: index_value.1:[rbp-8] instruction.1:[rbp-24] 
  # $6.1: @List = load_struct_member(index_value.1, user_instructions)
  .loc 5 417 5
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: index_value.1
  # [live values]: instruction.1:[rbp-24] $6.1:rbx 
  # call(append_268, $6.1, instruction.1)
  .loc 5 417 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_268
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 5 418 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_load_array_item_instruction_168__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_array_item_instruction_168__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_array_item_instruction_168__stack_frame_size: .word 32

  .loc 5 421 1
  .text
get_array_value_169:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_169__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_169__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 422 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 422 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 422 5
  jmp .LABEL__get_array_value_169__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_array_value_169__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_169__stack_frame_size: .word 0

  .loc 5 425 1
  .text
get_index_value_170:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_170__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_170__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 426 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last_278, $1.1)
  .loc 5 426 12
  mov rdi, rax
  call last_278
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 426 5
  jmp .LABEL__get_index_value_170__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_index_value_170__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_170__stack_frame_size: .word 0

  .loc 5 433 1
  .text
create_ir_load_function_address_instruction_171:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_function_address_instruction_171__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_function_address_instruction_171__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi function.1:rsi 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Load_Function_Address_Instruction = new(IR_Load_Function_Address_Instruction)
  .loc 5 434 20
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Load_Function_Address_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] function.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] function.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: function.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: function.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, function, function.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: function.1
  # [live values]: $2.1:rax 
  # instruction.1: @IR_Load_Function_Address_Instruction = $2.1
  .loc 5 434 5
  # [discarded value]: $2.1
  # [live values]: instruction.1:rax 
  # return(instruction.1)
  .loc 5 435 5
  jmp .LABEL__create_ir_load_function_address_instruction_171__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_function_address_instruction_171__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_function_address_instruction_171__stack_frame_size: .word 32

  .loc 5 443 1
  .text
create_ir_load_struct_member_instruction_172:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_struct_member_instruction_172__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_struct_member_instruction_172__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx 
  # load_address.1: Boolean = load_variable(load_address)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx load_address.1:rcx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-1], cl
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:rax 
  # $2.1: @IR_Load_Struct_Member_Instruction = new(IR_Load_Struct_Member_Instruction)
  .loc 5 444 20
  mov [rbp-33], rax
  mov rdi, 66
  call malloc
  lea rbx, IR_Load_Struct_Member_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:[rbp-33] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:[rbp-33] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:[rbp-33] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, struct_type_member, struct_type_member.1)
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-17] load_address.1:[rbp-1] $2.1:rax 
  # store_struct_member($2.1, load_address, load_address.1)
  mov bl, [rbp-1]
  mov BYTE PTR [rax+65], bl
  # [discarded value]: load_address.1
  # [live values]: struct_pointer_value.1:[rbp-17] $2.1:rax 
  # instruction.1: @IR_Load_Struct_Member_Instruction = $2.1
  .loc 5 444 5
  # [discarded value]: $2.1
  # [live values]: struct_pointer_value.1:[rbp-17] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 445 5
  mov rbx, [rax+24]
  # [live values]: struct_pointer_value.1:[rbp-17] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, struct_pointer_value.1)
  .loc 5 445 5
  mov rdi, rbx
  mov rsi, [rbp-17]
  mov [rbp-25], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: struct_pointer_value.1:[rbp-17] instruction.1:[rbp-25] 
  # $4.1: @List = load_struct_member(struct_pointer_value.1, user_instructions)
  .loc 5 446 5
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [discarded value]: struct_pointer_value.1
  # [live values]: instruction.1:[rbp-25] $4.1:rbx 
  # call(append_268, $4.1, instruction.1)
  .loc 5 446 5
  mov rdi, rbx
  mov rsi, [rbp-25]
  call append_268
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-25] 
  # return(instruction.1)
  .loc 5 447 5
  mov rax, [rbp-25]
  jmp .LABEL__create_ir_load_struct_member_instruction_172__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_struct_member_instruction_172__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_struct_member_instruction_172__stack_frame_size: .word 48

  .loc 5 450 1
  .text
get_struct_pointer_value_173:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_173__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_173__1:
  # self.1: @IR_Load_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 451 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 451 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 451 5
  jmp .LABEL__get_struct_pointer_value_173__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_struct_pointer_value_173__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_173__stack_frame_size: .word 0

  .loc 5 458 1
  .text
create_ir_load_variable_instruction_174:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_instruction_174__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_instruction_174__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # $1.1: @IR_Variable = load_struct_member(result_value.1, variable)
  .loc 5 459 93
  mov rax, [rdi+24]
  # [live values]: result_value.1:rdi $1.1:rax 
  # $2.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # $3.1: @IR_Load_Variable_Instruction = new(IR_Load_Variable_Instruction)
  .loc 5 459 20
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Load_Variable_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, result_value, result_value.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, operand_values, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $2.1
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: $1.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, variable, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # instruction.1: @IR_Load_Variable_Instruction = $3.1
  .loc 5 459 5
  # [discarded value]: $3.1
  # [live values]: instruction.1:rax 
  # return(instruction.1)
  .loc 5 460 5
  jmp .LABEL__create_ir_load_variable_instruction_174__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_instruction_174__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_instruction_174__stack_frame_size: .word 32

  .loc 5 467 1
  .text
create_ir_new_instruction_175:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_new_instruction_175__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_new_instruction_175__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: result_value.1:rdi type.1:rsi 
  # size_value.1: @IR_Value = load_variable(size_value)
  # [live values]: result_value.1:rdi type.1:rsi size_value.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_New_Instruction = new(IR_New_Instruction)
  .loc 5 468 20
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_New_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: type.1:[rbp-16] size_value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-16] size_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: type.1:[rbp-16] size_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: type.1:[rbp-16] size_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: type.1:[rbp-16] size_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, type, type.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: type.1
  # [live values]: size_value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_New_Instruction = $2.1
  .loc 5 468 5
  # [discarded value]: $2.1
  # [live values]: size_value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 469 5
  mov rbx, [rax+24]
  # [live values]: size_value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, size_value.1)
  .loc 5 469 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-16] 
  # $4.1: Boolean = size_value.1 != null
  .loc 5 470 9
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__create_ir_new_instruction_175__3
.LABEL__create_ir_new_instruction_175__2:
  # $5.1: @List = load_struct_member(size_value.1, user_instructions)
  .loc 5 471 9
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: size_value.1:rax:[rbp-8] instruction.1:[rbp-16] $5.1:rbx 
  # call(append_268, $5.1, instruction.1)
  .loc 5 471 9
  mov rdi, rbx
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $5.1
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-16] 
  # jump(block.3)
.LABEL__create_ir_new_instruction_175__3:
  # return(instruction.1)
  .loc 5 473 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_new_instruction_175__end
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: size_value.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_new_instruction_175__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_new_instruction_175__stack_frame_size: .word 32

  .loc 5 476 1
  .text
get_size_value_176:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_size_value_176__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_size_value_176__1:
  # self.1: @IR_New_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 477 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 477 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 477 5
  jmp .LABEL__get_size_value_176__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_size_value_176__end:
  mov rsp, rbp
  pop rbp
  ret

get_size_value_176__stack_frame_size: .word 0

  .loc 5 483 1
  .text
create_ir_return_instruction_177:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_return_instruction_177__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_return_instruction_177__1:
  # return_value.1: @IR_Value = load_variable(return_value)
  # [live values]: return_value.1:rdi 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: return_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: return_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: return_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: return_value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Return_Instruction = new(IR_Return_Instruction)
  .loc 5 484 20
  mov [rbp-16], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Return_Instruction[rip]
  mov [rax], rbx
  # [live values]: return_value.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: return_value.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: return_value.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: return_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: return_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: return_value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: return_value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Return_Instruction = $2.1
  .loc 5 484 5
  # [discarded value]: $2.1
  # [live values]: return_value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 485 5
  mov rbx, [rax+24]
  # [live values]: return_value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, return_value.1)
  .loc 5 485 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # $4.1: Boolean = return_value.1 != null
  .loc 5 486 9
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__create_ir_return_instruction_177__3
.LABEL__create_ir_return_instruction_177__2:
  # $5.1: @List = load_struct_member(return_value.1, user_instructions)
  .loc 5 487 9
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: return_value.1:rax:[rbp-8] instruction.1:[rbp-16] $5.1:rbx 
  # call(append_268, $5.1, instruction.1)
  .loc 5 487 9
  mov rdi, rbx
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $5.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # jump(block.3)
.LABEL__create_ir_return_instruction_177__3:
  # return(instruction.1)
  .loc 5 489 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_return_instruction_177__end
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: return_value.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_return_instruction_177__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_return_instruction_177__stack_frame_size: .word 16

  .loc 5 492 1
  .text
get_return_value_178:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_return_value_178__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_return_value_178__1:
  # self.1: @IR_Return_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 493 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 493 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 493 5
  jmp .LABEL__get_return_value_178__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_return_value_178__end:
  mov rsp, rbp
  pop rbp
  ret

get_return_value_178__stack_frame_size: .word 0

  .loc 5 499 1
  .text
create_ir_set_instruction_179:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_set_instruction_179__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_set_instruction_179__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Set_Instruction = new(IR_Set_Instruction)
  .loc 5 500 20
  mov [rbp-24], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Set_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: value.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Set_Instruction = $2.1
  .loc 5 500 5
  # [discarded value]: $2.1
  # [live values]: value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 501 5
  mov rbx, [rax+24]
  # [live values]: value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, value.1)
  .loc 5 501 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-16] 
  # $4.1: @List = load_struct_member(value.1, user_instructions)
  .loc 5 502 5
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-16] $4.1:rbx 
  # call(append_268, $4.1, instruction.1)
  .loc 5 502 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-16] 
  # return(instruction.1)
  .loc 5 503 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_set_instruction_179__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_set_instruction_179__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_set_instruction_179__stack_frame_size: .word 32

  .loc 5 506 1
  .text
get_value_180:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_180__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_180__1:
  # self.1: @IR_Set_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 507 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 507 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 507 5
  jmp .LABEL__get_value_180__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_180__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_180__stack_frame_size: .word 0

  .loc 5 513 1
  .text
create_ir_store_array_item_instruction_181:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_array_item_instruction_181__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_array_item_instruction_181__1:
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: array_value.1:rdi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: array_value.1:rdi index_value.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: array_value.1:rdi index_value.1:rsi value.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Store_Array_Item_Instruction = new(IR_Store_Array_Item_Instruction)
  .loc 5 514 20
  mov [rbp-32], rax
  mov rdi, 57
  call malloc
  lea rbx, IR_Store_Array_Item_Instruction[rip]
  mov [rax], rbx
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Store_Array_Item_Instruction = $2.1
  .loc 5 514 5
  # [discarded value]: $2.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 515 5
  mov rbx, [rax+24]
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, array_value.1)
  .loc 5 515 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 516 5
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax:[rbp-32] $4.1:rbx 
  # call(append_268, $4.1, index_value.1)
  .loc 5 516 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $4.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $5.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 517 5
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax:[rbp-32] $5.1:rbx 
  # call(append_268, $5.1, value.1)
  .loc 5 517 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $5.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $6.1: @List = load_struct_member(array_value.1, user_instructions)
  .loc 5 518 5
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] $6.1:rbx 
  # call(append_268, $6.1, instruction.1)
  .loc 5 518 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $6.1
  # [live values]: index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $7.1: @List = load_struct_member(index_value.1, user_instructions)
  .loc 5 519 5
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: index_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] $7.1:rbx 
  # call(append_268, $7.1, instruction.1)
  .loc 5 519 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $7.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  # $8.1: @List = load_struct_member(value.1, user_instructions)
  .loc 5 520 5
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] $8.1:rbx 
  # call(append_268, $8.1, instruction.1)
  .loc 5 520 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-32] 
  # return(instruction.1)
  .loc 5 521 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_array_item_instruction_181__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_array_item_instruction_181__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_array_item_instruction_181__stack_frame_size: .word 32

  .loc 5 524 1
  .text
get_array_value_182:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_182__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_182__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 525 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 525 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 525 5
  jmp .LABEL__get_array_value_182__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_array_value_182__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_182__stack_frame_size: .word 0

  .loc 5 528 1
  .text
get_index_value_183:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_183__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_183__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 529 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(get_276, $1.1, 1)
  .loc 5 529 12
  mov rdi, rax
  mov rsi, 1
  call get_276
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 529 5
  jmp .LABEL__get_index_value_183__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_index_value_183__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_183__stack_frame_size: .word 0

  .loc 5 532 1
  .text
get_value_184:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_184__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_184__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 533 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last_278, $1.1)
  .loc 5 533 12
  mov rdi, rax
  call last_278
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 533 5
  jmp .LABEL__get_value_184__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_184__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_184__stack_frame_size: .word 0

  .loc 5 540 1
  .text
create_ir_store_struct_member_instruction_185:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_struct_member_instruction_185__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_struct_member_instruction_185__1:
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: struct_pointer_value.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi value.1:rdx 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Store_Struct_Member_Instruction = new(IR_Store_Struct_Member_Instruction)
  .loc 5 541 20
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Store_Struct_Member_Instruction[rip]
  mov [rax], rbx
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, result_value, null)
  mov QWORD PTR [rax+16], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:[rbp-32] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, struct_type_member, struct_type_member.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] $2.1:rax 
  # instruction.1: @IR_Store_Struct_Member_Instruction = $2.1
  .loc 5 541 5
  # [discarded value]: $2.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 542 5
  mov rbx, [rax+24]
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # call(append_268, $3.1, struct_pointer_value.1)
  .loc 5 542 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_268
  # [discarded value]: $3.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 543 5
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:rax:[rbp-32] $4.1:rbx 
  # call(append_268, $4.1, value.1)
  .loc 5 543 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $4.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $5.1: @List = load_struct_member(struct_pointer_value.1, user_instructions)
  .loc 5 544 5
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: struct_pointer_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] $5.1:rbx 
  # call(append_268, $5.1, instruction.1)
  .loc 5 544 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $5.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  # $6.1: @List = load_struct_member(value.1, user_instructions)
  .loc 5 545 5
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] $6.1:rbx 
  # call(append_268, $6.1, instruction.1)
  .loc 5 545 5
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-32] 
  # return(instruction.1)
  .loc 5 546 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_struct_member_instruction_185__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_struct_member_instruction_185__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_struct_member_instruction_185__stack_frame_size: .word 32

  .loc 5 549 1
  .text
get_struct_pointer_value_186:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_186__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_186__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 550 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 550 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 550 5
  jmp .LABEL__get_struct_pointer_value_186__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_struct_pointer_value_186__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_186__stack_frame_size: .word 0

  .loc 5 553 1
  .text
get_value_187:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_187__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_187__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 554 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last_278, $1.1)
  .loc 5 554 12
  mov rdi, rax
  call last_278
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 554 5
  jmp .LABEL__get_value_187__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_187__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_187__stack_frame_size: .word 0

  .loc 5 560 1
  .text
init_188:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_188__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_188__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # left_value.1: @IR_Value = load_variable(left_value)
  # [live values]: self.1:rdi left_value.1:rsi 
  # right_value.1: @IR_Value = load_variable(right_value)
  # [live values]: self.1:rdi left_value.1:rsi right_value.1:rdx 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 561 5
  mov rax, [rdi+24]
  # [live values]: self.1:rdi left_value.1:rsi right_value.1:rdx $1.1:rax 
  # call(append_268, $1.1, left_value.1)
  .loc 5 561 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call append_268
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-16] 
  # $2.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 562 5
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-16] $2.1:rbx 
  # call(append_268, $2.1, right_value.1)
  .loc 5 562 5
  mov rdi, rbx
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-16] 
  # $3.1: @List = load_struct_member(left_value.1, user_instructions)
  .loc 5 563 5
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] right_value.1:[rbp-16] $3.1:rbx 
  # call(append_268, $3.1, self.1)
  .loc 5 563 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] right_value.1:[rbp-16] 
  # $4.1: @List = load_struct_member(right_value.1, user_instructions)
  .loc 5 564 5
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] $4.1:rbx 
  # call(append_268, $4.1, self.1)
  .loc 5 564 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 5 565 5
  mov rax, [rbp-8]
  jmp .LABEL__init_188__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_188__end:
  mov rsp, rbp
  pop rbp
  ret

init_188__stack_frame_size: .word 32

  .loc 5 568 1
  .text
get_left_value_189:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_left_value_189__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_left_value_189__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 569 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first_277, $1.1)
  .loc 5 569 12
  mov rdi, rax
  call first_277
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 569 5
  jmp .LABEL__get_left_value_189__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_left_value_189__end:
  mov rsp, rbp
  pop rbp
  ret

get_left_value_189__stack_frame_size: .word 0

  .loc 5 572 1
  .text
get_right_value_190:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_right_value_190__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_right_value_190__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 5 573 12
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last_278, $1.1)
  .loc 5 573 12
  mov rdi, rax
  call last_278
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 5 573 5
  jmp .LABEL__get_right_value_190__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_right_value_190__end:
  mov rsp, rbp
  pop rbp
  ret

get_right_value_190__stack_frame_size: .word 0

  .loc 5 616 1
  .text
create_ir_phi_instruction_191:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_phi_instruction_191__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_phi_instruction_191__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # $1.1: @List = new(List)
  .loc 5 296 29
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: result_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: result_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: result_value.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Phi_Instruction = new(IR_Phi_Instruction)
  .loc 5 617 20
  mov [rbp-16], rax
  mov rdi, 65
  call malloc
  lea rbx, IR_Phi_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, location, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, result_value, result_value.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, operand_values, $1.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # store_struct_member($2.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: $2.1:rax 
  # store_struct_member($2.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: $2.1:rax 
  # store_struct_member($2.1, is_generated, false)
  mov BYTE PTR [rax+56], 0
  # [live values]: $2.1:rax 
  # instruction.1: @IR_Phi_Instruction = $2.1
  .loc 5 617 5
  # [discarded value]: $2.1
  # [live values]: instruction.1:rax 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 5 618 26
  mov rbx, [rax+24]
  # [live values]: instruction.1:rax $3.1:rbx 
  # store_struct_member(instruction.1, values, $3.1)
  .loc 5 618 5
  mov QWORD PTR [rax+57], rbx
  # [discarded value]: $3.1
  # [live values]: instruction.1:rax 
  # return(instruction.1)
  .loc 5 619 5
  jmp .LABEL__create_ir_phi_instruction_191__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_phi_instruction_191__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_phi_instruction_191__stack_frame_size: .word 16

  .loc 5 622 1
  .text
append_192:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_192__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_192__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  # $1.1: @List = load_struct_member(self.1, values)
  .loc 5 623 5
  mov rax, [rdi+57]
  # [live values]: self.1:rdi value.1:rsi $1.1:rax 
  # $2.1: @List = call(remove_all_271, $1.1, value.1)
  .loc 5 623 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call remove_all_271
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $2.1:rax 
  # $3.1: @List = call(prune_272, $2.1)
  .loc 5 623 5
  mov rdi, rax
  call prune_272
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $3.1:rax 
  # call(append_268, $3.1, value.1)
  .loc 5 623 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_268
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  # $4.1: @List = load_struct_member(value.1, user_instructions)
  .loc 5 624 5
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $4.1:rbx 
  # call(append_268, $4.1, self.1)
  .loc 5 624 5
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_268
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: 
  # return()
  jmp .LABEL__append_192__end
  # [live values]: 
.LABEL__append_192__end:
  mov rsp, rbp
  pop rbp
  ret

append_192__stack_frame_size: .word 16

  .loc 5 627 1
  .text
is_redundant_193:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_redundant_193__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_redundant_193__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, values)
  .loc 5 631 19
  mov rax, [rdi+57]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # value_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 5 631 19
  mov rbx, [rax+0]
  # [discarded value]: $1.1
  # [live values]: value_item.1:rbx 
  # $3.1: Boolean = value_item.1 == null
  .loc 5 632 9
  cmp rbx, 0
  sete al
  # [live values]: value_item.1:rbx $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rbx
  jz .LABEL__is_redundant_193__3
.LABEL__is_redundant_193__2:
  # call(abort)
  .loc 5 633 9
  call abort
  # [discarded value]: $3.1
  # [live values]: value_item.1:[rbp-8] 
.LABEL__is_redundant_193__3:
  # other_value.1: @IR_Value = load_struct_member(value_item.1, data)
  .loc 5 635 20
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: value_item.1:rax:[rbp-8] other_value.1:rbx 
  # value_item.3: @List_Item = load_struct_member(value_item.1, next_item)
  .loc 5 636 18
  mov r15, [rax+8]
  # [live values]: value_item.1:[rbp-8] other_value.1:rbx value_item.3:r15:[rbp-8] 
  # jump(block.4)
  mov [rbp-16], rbx
  mov [rbp-8], r15
.LABEL__is_redundant_193__4:
  # value_item.4: @List_Item = phi(value_item.3, value_item.7)
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # $7.1: Boolean = value_item.4 != null
  .loc 5 637 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__is_redundant_193__6
.LABEL__is_redundant_193__5:
  # value.1: @IR_Value = load_struct_member(value_item.4, data)
  .loc 5 638 18
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:rax:[rbp-8] value.1:rbx 
  # $10.1: Boolean = value.1 != other_value.1
  .loc 5 639 13
  cmp rbx, QWORD PTR [rbp-16]
  setne r15b
  # [discarded value]: value.1
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:rax:[rbp-8] $10.1:r15 
  # jump($10.1, block.7, block.8)
  test r15b, r15b
  jz .LABEL__is_redundant_193__8
.LABEL__is_redundant_193__7:
  # return(false)
  .loc 5 640 13
  mov al, 0
  jmp .LABEL__is_redundant_193__end
  # [discarded value]: $10.1
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
.LABEL__is_redundant_193__8:
  # value_item.7: @List_Item = load_struct_member(value_item.4, next_item)
  .loc 5 642 22
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] value_item.7:rbx:[rbp-8] 
  # jump(block.4)
  mov [rbp-8], rbx
  jmp .LABEL__is_redundant_193__4
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] value_item.7:[rbp-8] 
  # [discarded value]: value_item.7
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
.LABEL__is_redundant_193__6:
  # return(true)
  .loc 5 644 5
  mov al, 1
  jmp .LABEL__is_redundant_193__end
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # [discarded value]: value_item.4
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] 
  # [discarded value]: other_value.1
  # [discarded value]: value_item.3
  # [live values]: value_item.1:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] 
  # [discarded value]: value_item.1
  # [live values]: 
.LABEL__is_redundant_193__end:
  mov rsp, rbp
  pop rbp
  ret

is_redundant_193__stack_frame_size: .word 16

  .loc 5 647 1
  .text
is_trivial_194:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_trivial_194__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_trivial_194__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, values)
  .loc 5 652 19
  mov rax, [rdi+57]
  # [live values]: self.1:rdi $1.1:rax 
  # value_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 5 652 19
  mov rbx, [rax+0]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi value_item.1:rbx 
  # $3.1: Boolean = value_item.1 == null
  .loc 5 653 9
  cmp rbx, 0
  sete al
  # [live values]: self.1:rdi value_item.1:rbx $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rbx
  mov [rbp-16], rdi
  jz .LABEL__is_trivial_194__3
.LABEL__is_trivial_194__2:
  # call(abort)
  .loc 5 654 9
  call abort
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] 
.LABEL__is_trivial_194__3:
  # result_value.1: @IR_Value = load_struct_member(self.1, result_value)
  .loc 5 656 31
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] value_item.1:[rbp-8] result_value.1:rbx 
  # other_value.1: @IR_Value = null
  .loc 5 657 5
  xor r15, r15
  # [live values]: self.1:rax:[rbp-16] value_item.1:[rbp-8] result_value.1:rbx other_value.1:r15 
  # jump(block.4)
  mov [rbp-24], rbx
  mov [rbp-32], r15
.LABEL__is_trivial_194__4:
  # other_value.5: @IR_Value = phi(other_value.1, other_value.6)
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] 
  # value_item.2: @List_Item = phi(value_item.1, value_item.5)
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
  # $5.1: Boolean = value_item.2 != null
  .loc 5 658 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__is_trivial_194__6
.LABEL__is_trivial_194__5:
  # value.1: @IR_Value = load_struct_member(value_item.2, data)
  .loc 5 659 18
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:rax:[rbp-8] value.1:rbx 
  # $8.1: Boolean = value.1 != result_value.1
  .loc 5 660 13
  cmp rbx, QWORD PTR [rbp-24]
  setne r15b
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:rax:[rbp-8] value.1:rbx $8.1:r15 
  # jump($8.1, block.7, block.8)
  test r15b, r15b
  mov [rbp-40], rbx
  jz .LABEL__is_trivial_194__8
.LABEL__is_trivial_194__7:
  # $9.1: Boolean = value.1 != other_value.5
  .loc 5 661 17
  mov rax, [rbp-40]
  cmp rax, QWORD PTR [rbp-32]
  setne bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:rax:[rbp-40] $9.1:rbx 
  # jump($9.1, block.9, block.8)
  test bl, bl
  jz .LABEL__is_trivial_194__8
.LABEL__is_trivial_194__9:
  # $10.1: Boolean = other_value.5 != null
  .loc 5 662 21
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] $10.1:rax 
  # jump($10.1, block.11, block.12)
  test al, al
  jz .LABEL__is_trivial_194__12
.LABEL__is_trivial_194__11:
  # return(false)
  .loc 5 663 21
  mov al, 0
  jmp .LABEL__is_trivial_194__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
.LABEL__is_trivial_194__12:
  # other_value.4: @IR_Value = value.1
  .loc 5 665 17
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.4:rax:[rbp-32] 
  # jump(block.8)
  mov [rbp-32], rax
.LABEL__is_trivial_194__8:
  # other_value.6: @IR_Value = phi(other_value.4, other_value.5)
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.6:[rbp-32] other_value.4:[rbp-32] 
  # value_item.5: @List_Item = load_struct_member(value_item.2, next_item)
  .loc 5 668 22
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.6:[rbp-32] value_item.5:rbx:[rbp-8] other_value.4:[rbp-32] 
  # jump(block.4)
  mov [rbp-8], rbx
  jmp .LABEL__is_trivial_194__4
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.6:[rbp-32] value_item.5:[rbp-8] other_value.4:[rbp-32] 
  # [discarded value]: other_value.6
  # [discarded value]: value_item.5
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.4:[rbp-32] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.4:[rbp-32] 
  # [discarded value]: other_value.4
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
.LABEL__is_trivial_194__6:
  # return(true)
  .loc 5 670 5
  mov al, 1
  jmp .LABEL__is_trivial_194__end
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
  # [discarded value]: other_value.5
  # [discarded value]: value_item.2
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] 
  # [discarded value]: result_value.1
  # [discarded value]: other_value.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: value_item.1
  # [live values]: 
.LABEL__is_trivial_194__end:
  mov rsp, rbp
  pop rbp
  ret

is_trivial_194__stack_frame_size: .word 48

  .loc 1 57 1
  .text
dump_195:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_195__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_195__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: build.1:rdi file.1:rsi 
  # $1.1: @List = load_struct_member(build.1, named_functions)
  .loc 1 58 18
  mov rax, [rdi+8]
  # [discarded value]: build.1
  # [live values]: file.1:rsi $1.1:rax 
  # functions.1: @List_Iterator = call(create_iterator_279, $1.1)
  .loc 1 58 18
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_279
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] functions.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__dump_195__2:
  # $3.1: Boolean = call(has_next_282, functions.1)
  .loc 1 59 12
  mov rdi, [rbp-16]
  call has_next_282
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__dump_195__4
.LABEL__dump_195__3:
  # function.1: @IR_Function = call(next_283, functions.1)
  .loc 1 60 21
  mov rdi, [rbp-16]
  call next_283
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:rax 
  # $6.1: Boolean = load_struct_member(function.1, is_external)
  .loc 1 61 13
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:rax $6.1:rbx 
  # $7.1: Boolean = $6.1 == false
  .loc 1 61 13
  cmp bl, 0
  sete r15b
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:rax $7.1:r15 
  # jump($7.1, block.5, block.2)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__dump_195__2
.LABEL__dump_195__5:
  # call(dump_196, function.1, file.1)
  .loc 1 62 13
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call dump_196
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # $8.1: @FILE = call(end_line_290, file.1)
  .loc 1 63 13
  mov rdi, [rbp-8]
  call end_line_290
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # jump(block.2)
  jmp .LABEL__dump_195__2
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: function.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
.LABEL__dump_195__4:
  # return()
  jmp .LABEL__dump_195__end
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: functions.1
  # [live values]: 
.LABEL__dump_195__end:
  mov rsp, rbp
  pop rbp
  ret

dump_195__stack_frame_size: .word 32

  .loc 1 68 1
  .text
dump_196:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_196__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_196__1:
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: function.1:rdi file.1:rsi 
  # $1.1: @String = load_struct_member(function.1, name)
  .loc 1 69 16
  mov rax, [rdi+24]
  # [live values]: function.1:rdi file.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write_287, file.1, $1.1)
  .loc 1 69 5
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call write_287
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write_289, $2.1, '.')
  .loc 1 69 5
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $3.1:rax 
  # $4.1: Int = load_struct_member(function.1, id)
  .loc 1 69 48
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:rax $4.1:r15 
  # $5.1: @FILE = call(write_286, $3.1, $4.1)
  .loc 1 69 5
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, " :: (")
  .loc 1 69 5
  mov rdi, rax
  lea rsi, .LABEL__string_172[rip] # " :: ("
  call write_287
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] 
  # $7.1: @List = load_struct_member(function.1, parameters)
  .loc 1 70 28
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] $7.1:rbx 
  # function_parameters.1: @List_Iterator = call(create_iterator_279, $7.1)
  .loc 1 70 28
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:rax 
  # jump(block.2)
  mov [rbp-24], rax
.LABEL__dump_196__2:
  # $9.1: Boolean = call(has_next_282, function_parameters.1)
  .loc 1 71 12
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $9.1:rax 
  # jump($9.1, block.3, block.4)
  test al, al
  jz .LABEL__dump_196__4
.LABEL__dump_196__3:
  # function_parameter.1: @IR_Function_Parameter = call(next_283, function_parameters.1)
  .loc 1 72 31
  mov rdi, [rbp-24]
  call next_283
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:rax 
  # $12.1: @String = load_struct_member(function_parameter.1, name)
  .loc 1 73 20
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:rax $12.1:rbx 
  # $13.1: @FILE = call(write_287, file.1, $12.1)
  .loc 1 73 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_287
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, ": ")
  .loc 1 73 9
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:[rbp-32] $14.1:rax 
  # $15.1: @IR_Type = load_struct_member(function_parameter.1, type)
  .loc 1 73 63
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [discarded value]: function_parameter.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $14.1:rax $15.1:r15 
  # $16.1: @String = load_struct_member($15.1, name)
  .loc 1 73 63
  mov rbx, [r15+8]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $14.1:rax $16.1:rbx 
  # $17.1: @FILE = call(write_287, $14.1, $16.1)
  .loc 1 73 9
  mov rdi, rax
  mov rsi, rbx
  call write_287
  # [discarded value]: $14.1
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $18.1: Boolean = call(has_next_282, function_parameters.1)
  .loc 1 74 13
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $18.1:rax 
  # jump($18.1, block.5, block.2)
  test al, al
  jz .LABEL__dump_196__2
.LABEL__dump_196__5:
  # $19.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 75 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # jump(block.2)
  jmp .LABEL__dump_196__2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
.LABEL__dump_196__4:
  # $20.1: @FILE = call(write_287, file.1, ") -> ")
  .loc 1 78 5
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_225[rip] # ") -> "
  call write_287
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $20.1:rax 
  # $21.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 1 78 31
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $20.1:rax $21.1:r15 
  # $22.1: @String = load_struct_member($21.1, name)
  .loc 1 78 31
  mov r14, [r15+8]
  # [discarded value]: $21.1
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $20.1:rax $22.1:r14 
  # $23.1: @FILE = call(write_287, $20.1, $22.1)
  .loc 1 78 5
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $20.1
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $23.1:rax 
  # $24.1: @FILE = call(write_287, $23.1, " {")
  .loc 1 78 5
  mov rdi, rax
  lea rsi, .LABEL__string_230[rip] # " {"
  call write_287
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $24.1:rax 
  # $25.1: @FILE = call(end_line_290, $24.1)
  .loc 1 78 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $26.1: @List = load_struct_member(function.1, blocks)
  .loc 1 79 19
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $26.1:rbx 
  # block_item.1: @List_Item = load_struct_member($26.1, first_item)
  .loc 1 79 19
  mov r15, [rbx+0]
  # [discarded value]: $26.1
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:r15 
  # jump(block.7)
  mov [rbp-32], r15
.LABEL__dump_196__7:
  # block_item.2: @List_Item = phi(block_item.1, block_item.4)
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # $28.1: Boolean = block_item.2 != null
  .loc 1 80 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] $28.1:rax 
  # jump($28.1, block.8, block.9)
  test al, al
  jz .LABEL__dump_196__9
.LABEL__dump_196__8:
  # $30.1: @IR_Block = load_struct_member(block_item.2, data)
  .loc 1 81 10
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:rax:[rbp-32] $30.1:rbx 
  # $31.1: @FILE = call(dump_197, $30.1, file.1)
  .loc 1 81 9
  mov rdi, rbx
  mov rsi, [rbp-16]
  call dump_197
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # block_item.4: @List_Item = load_struct_member(block_item.2, next_item)
  .loc 1 82 22
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] block_item.4:rbx:[rbp-32] 
  # jump(block.7)
  mov [rbp-32], rbx
  jmp .LABEL__dump_196__7
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] block_item.4:[rbp-32] 
  # [discarded value]: block_item.4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
.LABEL__dump_196__9:
  # $33.1: @FILE = call(write_289, file.1, '}')
  .loc 1 84 5
  mov rdi, [rbp-16]
  mov sil, 125
  call write_289
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] $33.1:rax 
  # $34.1: @FILE = call(end_line_290, $33.1)
  .loc 1 84 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # return()
  jmp .LABEL__dump_196__end
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # [discarded value]: block_item.2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] 
  # [discarded value]: block_item.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: function.1
  # [discarded value]: file.1
  # [discarded value]: function_parameters.1
  # [live values]: 
.LABEL__dump_196__end:
  mov rsp, rbp
  pop rbp
  ret

dump_196__stack_frame_size: .word 32

  .loc 1 87 1
  .text
dump_197:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_197__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_197__1:
  # block.1: @IR_Block = load_variable(block)
  # [live values]: block.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: block.1:rdi file.1:rsi 
  # $1.1: @FILE = call(write_287, file.1, "block.")
  .loc 1 88 5
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_231[rip] # "block."
  call write_287
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  # $2.1: Int = load_struct_member(block.1, id)
  .loc 1 88 32
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: block.1:rbx:[rbp-8] file.1:[rbp-16] $1.1:rax $2.1:r15 
  # $3.1: @FILE = call(write_286, $1.1, $2.1)
  .loc 1 88 5
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] 
  # $4.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 89 27
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] $4.1:rbx 
  # block_predecessors.1: @List_Iterator = call(create_iterator_279, $4.1)
  .loc 1 89 27
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:rax 
  # $6.1: Boolean = call(has_next_282, block_predecessors.1)
  .loc 1 90 9
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_282
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:rax 
  # jump($6.1, block.2, block.3)
  test al, al
  jz .LABEL__dump_197__3
.LABEL__dump_197__2:
  # $7.1: @FILE = call(write_289, file.1, '(')
  .loc 1 91 9
  mov rdi, [rbp-16]
  mov sil, 40
  call write_289
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # jump(block.4)
.LABEL__dump_197__4:
  # block_predecessor.1: @IR_Block = call(next_283, block_predecessors.1)
  .loc 1 93 34
  mov rdi, [rbp-24]
  call next_283
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_predecessor.1:rax 
  # $10.1: @FILE = call(write_287, file.1, "block.")
  .loc 1 94 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_231[rip] # "block."
  mov [rbp-32], rax
  call write_287
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_predecessor.1:[rbp-32] $10.1:rax 
  # $11.1: Int = load_struct_member(block_predecessor.1, id)
  .loc 1 94 40
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [discarded value]: block_predecessor.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $10.1:rax $11.1:r15 
  # $12.1: @FILE = call(write_286, $10.1, $11.1)
  .loc 1 94 13
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # $13.1: Boolean = call(has_next_282, block_predecessors.1)
  .loc 1 95 17
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $13.1:rax 
  # jump($13.1, block.6, block.5)
  test al, al
  jz .LABEL__dump_197__5
.LABEL__dump_197__6:
  # $14.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 96 17
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # jump(block.4)
  jmp .LABEL__dump_197__4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
.LABEL__dump_197__5:
  # $15.1: @FILE = call(write_289, file.1, ')')
  .loc 1 101 9
  mov rdi, [rbp-16]
  mov sil, 41
  call write_289
  # [discarded value]: $15.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # jump(block.3)
.LABEL__dump_197__3:
  # $16.1: @FILE = call(write_289, file.1, ':')
  .loc 1 103 5
  mov rdi, [rbp-16]
  mov sil, 58
  call write_289
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $16.1:rax 
  # $17.1: @FILE = call(end_line_290, $16.1)
  .loc 1 103 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 104 26
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:rbx 
  # jump(block.10)
  mov [rbp-32], rbx
.LABEL__dump_197__10:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.4)
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # $19.1: Boolean = block_instruction.2 != null
  .loc 1 105 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $19.1:rax 
  # jump($19.1, block.11, block.12)
  test al, al
  jz .LABEL__dump_197__12
.LABEL__dump_197__11:
  # $20.1: @FILE = call(dump_198, block_instruction.2, file.1, "   ")
  .loc 1 106 9
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  lea rdx, .LABEL__string_232[rip] # "   "
  call dump_198
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # block_instruction.4: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 107 29
  mov rax, [rbp-32]
  mov rbx, [rax+48]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.4:rbx:[rbp-32] 
  # jump(block.10)
  mov [rbp-32], rbx
  jmp .LABEL__dump_197__10
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.4:[rbp-32] 
  # [discarded value]: block_instruction.4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
.LABEL__dump_197__12:
  # return(file.1)
  .loc 1 109 5
  mov rax, [rbp-16]
  jmp .LABEL__dump_197__end
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [discarded value]: block_instruction.2
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [discarded value]: block_instruction.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [discarded value]: block.1
  # [discarded value]: file.1
  # [discarded value]: block_predecessors.1
  # [live values]: 
.LABEL__dump_197__end:
  mov rsp, rbp
  pop rbp
  ret

dump_197__stack_frame_size: .word 32

  .loc 1 112 1
  .text
dump_198:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_198__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_198__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  # $1.1: @FILE = call(write_287, file.1, prefix.1)
  .loc 1 113 5
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rdx
  call write_287
  # [discarded value]: prefix.1
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # IR_Add_Instruction.3: @Object_Type = load_variable(IR_Add_Instruction)
  lea rax, IR_Add_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Add_Instruction.3:rax 
  # $2.1: Boolean = call(is_293, instruction.1, IR_Add_Instruction.3)
  .loc 1 114 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Add_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__dump_198__3
.LABEL__dump_198__2:
  # instruction.1: @IR_Add_Instruction = instruction.1
  .loc 1 115 24
  mov rax, [rbp-8]
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $4.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 116 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $4.1:rbx 
  # $5.1: @FILE = call(write_199, file.1, $4.1, false)
  .loc 1 116 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, ": ")
  .loc 1 116 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $6.1:rax 
  # $7.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 116 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $6.1:rax $7.1:r15 
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  .loc 1 116 78
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $6.1:rax $8.1:r14 
  # $9.1: @String = load_struct_member($8.1, name)
  .loc 1 116 78
  mov r15, [r14+8]
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $6.1:rax $9.1:r15 
  # $10.1: @FILE = call(write_287, $6.1, $9.1)
  .loc 1 116 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $6.1
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_287, $10.1, " = ")
  .loc 1 116 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $10.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $11.1:rax 
  # $12.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 116 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $11.1:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write_199, $11.1, $12.1, true)
  .loc 1 116 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, " + ")
  .loc 1 116 16
  mov rdi, rax
  lea rsi, .LABEL__string_234[rip] # " + "
  call write_287
  # [discarded value]: $13.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $14.1:rax 
  # $15.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 116 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $14.1:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(write_199, $14.1, $15.1, true)
  .loc 1 116 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $16.1:rax 
  # $17.1: @FILE = call(end_line_290, $16.1)
  .loc 1 116 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $16.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $17.1:rax 
  # return($17.1)
  .loc 1 116 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $17.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__3:
  # IR_Call_Instruction.3: @Object_Type = load_variable(IR_Call_Instruction)
  lea rax, IR_Call_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Call_Instruction.3:rax 
  # $18.1: Boolean = call(is_293, instruction.1, IR_Call_Instruction.3)
  .loc 1 118 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Call_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $18.1:rax 
  # jump($18.1, block.5, block.6)
  test al, al
  jz .LABEL__dump_198__6
.LABEL__dump_198__5:
  # instruction.1: @IR_Call_Instruction = instruction.1
  .loc 1 119 24
  mov rax, [rbp-8]
  # [discarded value]: $18.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $20.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 120 13
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $20.1:rbx 
  # $21.1: Boolean = $20.1 != null
  .loc 1 120 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $20.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $21.1:r15 
  # jump($21.1, block.7, block.8)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__dump_198__8
.LABEL__dump_198__7:
  # $22.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 121 24
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [discarded value]: $21.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax:[rbp-24] $22.1:rbx 
  # $23.1: @FILE = call(write_199, file.1, $22.1, false)
  .loc 1 121 13
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  call write_199
  # [discarded value]: $22.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $23.1:rax 
  # $24.1: @FILE = call(write_287, $23.1, ": ")
  .loc 1 121 13
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $23.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $24.1:rax 
  # $25.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 121 75
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $24.1:rax $25.1:r15 
  # $26.1: @IR_Type = load_struct_member($25.1, type)
  .loc 1 121 75
  mov r14, [r15+8]
  # [discarded value]: $25.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $24.1:rax $26.1:r14 
  # $27.1: @String = load_struct_member($26.1, name)
  .loc 1 121 75
  mov r15, [r14+8]
  # [discarded value]: $26.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $24.1:rax $27.1:r15 
  # $28.1: @FILE = call(write_287, $24.1, $27.1)
  .loc 1 121 13
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $24.1
  # [discarded value]: $27.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $28.1:rax 
  # $29.1: @FILE = call(write_287, $28.1, " = ")
  .loc 1 121 13
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.8)
.LABEL__dump_198__8:
  # IR_Direct_Call_Instruction.4: @Object_Type = load_variable(IR_Direct_Call_Instruction)
  lea rax, IR_Direct_Call_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] IR_Direct_Call_Instruction.4:rax 
  # $30.1: Boolean = call(is_293, instruction.1, IR_Direct_Call_Instruction.4)
  .loc 1 123 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Direct_Call_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $30.1:rax 
  # $31.1: Boolean = $30.1 != null
  .loc 1 123 13
  cmp al, 0
  setne bl
  # [discarded value]: $30.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $31.1:rbx 
  # jump($31.1, block.9, block.11)
  test bl, bl
  jz .LABEL__dump_198__11
.LABEL__dump_198__9:
  # $48.1: @FILE = call(write_287, file.1, "call")
  .loc 1 124 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_235[rip] # "call"
  call write_287
  # [discarded value]: $31.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $48.1:rax 
  # $49.1: @FILE = call(write_289, $48.1, '(')
  .loc 1 124 13
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $48.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $49.1:rax 
  # $50.1: @IR_Direct_Call_Instruction = instruction.1
  .loc 1 124 65
  mov rbx, [rbp-24]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $49.1:rax $50.1:rbx 
  # $51.1: @IR_Function = load_struct_member($50.1, function)
  .loc 1 124 64
  mov r15, [rbx+65]
  # [discarded value]: $50.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $49.1:rax $51.1:r15 
  # $52.1: @FILE = call(write_function_label_4, $49.1, $51.1)
  .loc 1 124 13
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $49.1
  # [discarded value]: $51.1
  # [discarded value]: $52.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.10)
.LABEL__dump_198__10:
  # call_argument_index.1: Int = 0
  .loc 1 131 9
  xor rax, rax
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:rax 
  # jump(block.15)
  mov [rbp-32], rax
.LABEL__dump_198__15:
  # call_argument_index.2: Int = phi(call_argument_index.1, call_argument_index.4)
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] 
  # $53.1: Int = load_struct_member(instruction.1, arguments_size)
  .loc 1 132 38
  mov rax, [rbp-24]
  mov rbx, [rax+57]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] $53.1:rbx 
  # $54.1: Boolean = call_argument_index.2 < $53.1
  .loc 1 132 16
  cmp QWORD PTR [rbp-32], rbx
  setl r15b
  # [discarded value]: $53.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] $54.1:r15 
  # jump($54.1, block.16, block.17)
  test r15b, r15b
  jz .LABEL__dump_198__17
.LABEL__dump_198__16:
  # $55.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 133 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $54.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] $55.1:rax 
  # $56.1: @IR_Value = call(argument_161, instruction.1, call_argument_index.2)
  .loc 1 133 36
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  mov [rbp-40], rax
  call argument_161
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] $55.1:[rbp-40] $56.1:rax 
  # $57.1: @FILE = call(write_199, $55.1, $56.1, true)
  .loc 1 133 13
  mov rdi, [rbp-40]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $55.1
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] 
  # call_argument_index.4: Int = call_argument_index.2 + 1
  .loc 1 134 35
  mov rax, [rbp-32]
  add rax, 1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] call_argument_index.4:rax:[rbp-32] 
  # jump(block.15)
  mov [rbp-32], rax
  jmp .LABEL__dump_198__15
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] call_argument_index.4:[rbp-32] 
  # [discarded value]: call_argument_index.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] 
.LABEL__dump_198__17:
  # $59.1: @FILE = call(write_289, file.1, ')')
  .loc 1 136 16
  mov rdi, [rbp-16]
  mov sil, 41
  call write_289
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] $59.1:rax 
  # $60.1: @FILE = call(end_line_290, $59.1)
  .loc 1 136 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $59.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] $60.1:rax 
  # return($60.1)
  .loc 1 136 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $60.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] call_argument_index.2:[rbp-32] 
  # [discarded value]: call_argument_index.2
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_argument_index.1:[rbp-32] 
  # [discarded value]: call_argument_index.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
.LABEL__dump_198__11:
  # IR_Dynamic_Call_Instruction.3: @Object_Type = load_variable(IR_Dynamic_Call_Instruction)
  lea rax, IR_Dynamic_Call_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] IR_Dynamic_Call_Instruction.3:rax 
  # $32.1: Boolean = call(is_293, instruction.1, IR_Dynamic_Call_Instruction.3)
  .loc 1 125 20
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Dynamic_Call_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $32.1:rax 
  # $33.1: Boolean = $32.1 != null
  .loc 1 125 20
  cmp al, 0
  setne bl
  # [discarded value]: $32.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $33.1:rbx 
  # jump($33.1, block.12, block.14)
  test bl, bl
  jz .LABEL__dump_198__14
.LABEL__dump_198__12:
  # $38.1: @IR_Dynamic_Call_Instruction = instruction.1
  .loc 1 126 34
  mov rax, [rbp-24]
  # [discarded value]: $33.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $38.1:rax 
  # function_address.1: @IR_Variable_Value = call(function_address_164, $38.1)
  .loc 1 126 33
  mov rdi, rax
  call function_address_164
  # [discarded value]: $38.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:rax 
  # $40.1: @FILE = call(write_287, file.1, "call")
  .loc 1 127 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_235[rip] # "call"
  mov [rbp-32], rax
  call write_287
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:[rbp-32] $40.1:rax 
  # $41.1: @FILE = call(write_289, $40.1, '(')
  .loc 1 127 13
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $40.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:[rbp-32] $41.1:rax 
  # $42.1: @IR_Variable = load_struct_member(function_address.1, variable)
  .loc 1 127 49
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:rbx:[rbp-32] $41.1:rax $42.1:r15 
  # $43.1: @String = load_struct_member($42.1, name)
  .loc 1 127 49
  mov r14, [r15+8]
  # [discarded value]: $42.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:rbx:[rbp-32] $41.1:rax $43.1:r14 
  # $44.1: @FILE = call(write_287, $41.1, $43.1)
  .loc 1 127 13
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $41.1
  # [discarded value]: $43.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:[rbp-32] $44.1:rax 
  # $45.1: @FILE = call(write_289, $44.1, '.')
  .loc 1 127 13
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $44.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] function_address.1:[rbp-32] $45.1:rax 
  # $46.1: Int = load_struct_member(function_address.1, version)
  .loc 1 127 98
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [discarded value]: function_address.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $45.1:rax $46.1:r15 
  # $47.1: @FILE = call(write_286, $45.1, $46.1)
  .loc 1 127 13
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.10)
  jmp .LABEL__dump_198__10
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
.LABEL__dump_198__14:
  # $34.1: @String = call(clone_295, "Unsupported type: ")
  .loc 1 129 19
  lea rdi, .LABEL__string_150[rip] # "Unsupported type: "
  call clone_295
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $34.1:rax 
  # $35.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 1 129 54
  mov rbx, [rbp-24]
  mov r15, [rbx+0]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $34.1:rax $35.1:r15 
  # $36.1: @String = load_struct_member($35.1, name)
  .loc 1 129 54
  mov r14, r15
  add r14, 8
  # [discarded value]: $35.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $34.1:rax $36.1:r14 
  # $37.1: @String = call(append_304, $34.1, $36.1)
  .loc 1 129 19
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $34.1
  # [discarded value]: $36.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $37.1:rax 
  # call(abort_292, $37.1)
  .loc 1 129 13
  mov rdi, rax
  call abort_292
  # [discarded value]: $37.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__6:
  # IR_Cast_Instruction.3: @Object_Type = load_variable(IR_Cast_Instruction)
  lea rax, IR_Cast_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Cast_Instruction.3:rax 
  # $61.1: Boolean = call(is_293, instruction.1, IR_Cast_Instruction.3)
  .loc 1 138 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Cast_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $61.1:rax 
  # jump($61.1, block.19, block.20)
  test al, al
  jz .LABEL__dump_198__20
.LABEL__dump_198__19:
  # instruction.1: @IR_Cast_Instruction = instruction.1
  .loc 1 139 24
  mov rax, [rbp-8]
  # [discarded value]: $61.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $63.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 140 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $63.1:rbx 
  # $64.1: @FILE = call(write_199, file.1, $63.1, false)
  .loc 1 140 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $63.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $64.1:rax 
  # $65.1: @FILE = call(write_287, $64.1, ": ")
  .loc 1 140 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $64.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $65.1:rax 
  # $66.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 140 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $65.1:rax $66.1:r15 
  # $67.1: @IR_Type = load_struct_member($66.1, type)
  .loc 1 140 78
  mov r14, [r15+8]
  # [discarded value]: $66.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $65.1:rax $67.1:r14 
  # $68.1: @String = load_struct_member($67.1, name)
  .loc 1 140 78
  mov r15, [r14+8]
  # [discarded value]: $67.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $65.1:rax $68.1:r15 
  # $69.1: @FILE = call(write_287, $65.1, $68.1)
  .loc 1 140 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $65.1
  # [discarded value]: $68.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $69.1:rax 
  # $70.1: @FILE = call(write_287, $69.1, " = ")
  .loc 1 140 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $69.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $70.1:rax 
  # $71.1: @FILE = call(write_287, $70.1, "cast")
  .loc 1 140 16
  mov rdi, rax
  lea rsi, .LABEL__string_236[rip] # "cast"
  call write_287
  # [discarded value]: $70.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $71.1:rax 
  # $72.1: @FILE = call(write_289, $71.1, '(')
  .loc 1 140 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $71.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $72.1:rax 
  # $73.1: @IR_Value = call(get_value_166, instruction.1)
  .loc 1 140 158
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_166
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $72.1:[rbp-32] $73.1:rax 
  # $74.1: @FILE = call(write_199, $72.1, $73.1, true)
  .loc 1 140 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $74.1:rax 
  # $75.1: @FILE = call(write_289, $74.1, ')')
  .loc 1 140 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $74.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $75.1:rax 
  # $76.1: @FILE = call(end_line_290, $75.1)
  .loc 1 140 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $75.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $76.1:rax 
  # return($76.1)
  .loc 1 140 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $76.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__20:
  # IR_Conditional_Jump_Instruction.4: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea rax, IR_Conditional_Jump_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Conditional_Jump_Instruction.4:rax 
  # $77.1: Boolean = call(is_293, instruction.1, IR_Conditional_Jump_Instruction.4)
  .loc 1 142 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Conditional_Jump_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $77.1:rax 
  # jump($77.1, block.22, block.23)
  test al, al
  jz .LABEL__dump_198__23
.LABEL__dump_198__22:
  # instruction.1: @IR_Conditional_Jump_Instruction = instruction.1
  .loc 1 143 24
  mov rax, [rbp-8]
  # [discarded value]: $77.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $79.1: @FILE = call(write_287, file.1, "jump")
  .loc 1 144 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_237[rip] # "jump"
  mov [rbp-24], rax
  call write_287
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $79.1:rax 
  # $80.1: @FILE = call(write_289, $79.1, '(')
  .loc 1 144 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $79.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $80.1:rax 
  # $81.1: @IR_Value = call(get_condition_value_167, instruction.1)
  .loc 1 144 52
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_condition_value_167
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $80.1:[rbp-32] $81.1:rax 
  # $82.1: @FILE = call(write_199, $80.1, $81.1, true)
  .loc 1 144 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $80.1
  # [discarded value]: $81.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $82.1:rax 
  # $83.1: @FILE = call(write_287, $82.1, ", block.")
  .loc 1 144 16
  mov rdi, rax
  lea rsi, .LABEL__string_238[rip] # ", block."
  call write_287
  # [discarded value]: $82.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $83.1:rax 
  # $84.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 1 144 117
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $83.1:rax $84.1:r15 
  # $85.1: Int = load_struct_member($84.1, id)
  .loc 1 144 117
  mov r14, [r15+8]
  # [discarded value]: $84.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $83.1:rax $85.1:r14 
  # $86.1: @FILE = call(write_286, $83.1, $85.1)
  .loc 1 144 16
  mov rdi, rax
  mov rsi, r14
  call write_286
  # [discarded value]: $83.1
  # [discarded value]: $85.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $86.1:rax 
  # $87.1: @FILE = call(write_287, $86.1, ", block.")
  .loc 1 144 16
  mov rdi, rax
  lea rsi, .LABEL__string_238[rip] # ", block."
  call write_287
  # [discarded value]: $86.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $87.1:rax 
  # $88.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 144 168
  mov rbx, [rbp-24]
  mov r15, [rbx+65]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $87.1:rax $88.1:r15 
  # $89.1: Int = load_struct_member($88.1, id)
  .loc 1 144 168
  mov rbx, [r15+8]
  # [discarded value]: $88.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $87.1:rax $89.1:rbx 
  # $90.1: @FILE = call(write_286, $87.1, $89.1)
  .loc 1 144 16
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $87.1
  # [discarded value]: $89.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $90.1:rax 
  # $91.1: @FILE = call(write_289, $90.1, ')')
  .loc 1 144 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $90.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $91.1:rax 
  # $92.1: @FILE = call(end_line_290, $91.1)
  .loc 1 144 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $91.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $92.1:rax 
  # return($92.1)
  .loc 1 144 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $92.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__23:
  # IR_Direct_Jump_Instruction.6: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rax, IR_Direct_Jump_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Direct_Jump_Instruction.6:rax 
  # $93.1: Boolean = call(is_293, instruction.1, IR_Direct_Jump_Instruction.6)
  .loc 1 146 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Direct_Jump_Instruction.6
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $93.1:rax 
  # jump($93.1, block.25, block.26)
  test al, al
  jz .LABEL__dump_198__26
.LABEL__dump_198__25:
  # instruction.1: @IR_Direct_Jump_Instruction = instruction.1
  .loc 1 147 24
  mov rax, [rbp-8]
  # [discarded value]: $93.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $95.1: @FILE = call(write_287, file.1, "jump")
  .loc 1 148 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_237[rip] # "jump"
  mov [rbp-24], rax
  call write_287
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $95.1:rax 
  # $96.1: @FILE = call(write_289, $95.1, '(')
  .loc 1 148 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $95.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $96.1:rax 
  # $97.1: @FILE = call(write_287, $96.1, "block.")
  .loc 1 148 16
  mov rdi, rax
  lea rsi, .LABEL__string_231[rip] # "block."
  call write_287
  # [discarded value]: $96.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $97.1:rax 
  # $98.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 1 148 68
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $97.1:rax $98.1:r15 
  # $99.1: Int = load_struct_member($98.1, id)
  .loc 1 148 68
  mov rbx, [r15+8]
  # [discarded value]: $98.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $97.1:rax $99.1:rbx 
  # $100.1: @FILE = call(write_286, $97.1, $99.1)
  .loc 1 148 16
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $97.1
  # [discarded value]: $99.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $100.1:rax 
  # $101.1: @FILE = call(write_289, $100.1, ')')
  .loc 1 148 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $100.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $101.1:rax 
  # $102.1: @FILE = call(end_line_290, $101.1)
  .loc 1 148 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $101.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $102.1:rax 
  # return($102.1)
  .loc 1 148 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $102.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__26:
  # IR_Divide_Instruction.3: @Object_Type = load_variable(IR_Divide_Instruction)
  lea rax, IR_Divide_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Divide_Instruction.3:rax 
  # $103.1: Boolean = call(is_293, instruction.1, IR_Divide_Instruction.3)
  .loc 1 150 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Divide_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $103.1:rax 
  # jump($103.1, block.28, block.29)
  test al, al
  jz .LABEL__dump_198__29
.LABEL__dump_198__28:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 151 24
  mov rax, [rbp-8]
  # [discarded value]: $103.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $105.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 152 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $105.1:rbx 
  # $106.1: @FILE = call(write_199, file.1, $105.1, false)
  .loc 1 152 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $105.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $106.1:rax 
  # $107.1: @FILE = call(write_287, $106.1, ": ")
  .loc 1 152 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $106.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $107.1:rax 
  # $108.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 152 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $107.1:rax $108.1:r15 
  # $109.1: @IR_Type = load_struct_member($108.1, type)
  .loc 1 152 78
  mov r14, [r15+8]
  # [discarded value]: $108.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $107.1:rax $109.1:r14 
  # $110.1: @String = load_struct_member($109.1, name)
  .loc 1 152 78
  mov r15, [r14+8]
  # [discarded value]: $109.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $107.1:rax $110.1:r15 
  # $111.1: @FILE = call(write_287, $107.1, $110.1)
  .loc 1 152 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $107.1
  # [discarded value]: $110.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $111.1:rax 
  # $112.1: @FILE = call(write_287, $111.1, " = ")
  .loc 1 152 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $111.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $112.1:rax 
  # $113.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 152 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $112.1:[rbp-32] $113.1:rax 
  # $114.1: @FILE = call(write_199, $112.1, $113.1, true)
  .loc 1 152 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $112.1
  # [discarded value]: $113.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $114.1:rax 
  # $115.1: @FILE = call(write_287, $114.1, " / ")
  .loc 1 152 16
  mov rdi, rax
  lea rsi, .LABEL__string_239[rip] # " / "
  call write_287
  # [discarded value]: $114.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $115.1:rax 
  # $116.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 152 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $115.1:[rbp-32] $116.1:rax 
  # $117.1: @FILE = call(write_199, $115.1, $116.1, true)
  .loc 1 152 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $115.1
  # [discarded value]: $116.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $117.1:rax 
  # $118.1: @FILE = call(end_line_290, $117.1)
  .loc 1 152 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $117.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $118.1:rax 
  # return($118.1)
  .loc 1 152 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $118.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__29:
  # IR_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Equals_Comparison_Instruction)
  lea rax, IR_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Equals_Comparison_Instruction.3:rax 
  # $119.1: Boolean = call(is_293, instruction.1, IR_Equals_Comparison_Instruction.3)
  .loc 1 154 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $119.1:rax 
  # jump($119.1, block.31, block.32)
  test al, al
  jz .LABEL__dump_198__32
.LABEL__dump_198__31:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 155 24
  mov rax, [rbp-8]
  # [discarded value]: $119.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $121.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 156 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $121.1:rbx 
  # $122.1: @FILE = call(write_199, file.1, $121.1, false)
  .loc 1 156 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $121.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $122.1:rax 
  # $123.1: @FILE = call(write_287, $122.1, ": ")
  .loc 1 156 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $122.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $123.1:rax 
  # $124.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 156 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $123.1:rax $124.1:r15 
  # $125.1: @IR_Type = load_struct_member($124.1, type)
  .loc 1 156 78
  mov r14, [r15+8]
  # [discarded value]: $124.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $123.1:rax $125.1:r14 
  # $126.1: @String = load_struct_member($125.1, name)
  .loc 1 156 78
  mov r15, [r14+8]
  # [discarded value]: $125.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $123.1:rax $126.1:r15 
  # $127.1: @FILE = call(write_287, $123.1, $126.1)
  .loc 1 156 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $123.1
  # [discarded value]: $126.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $127.1:rax 
  # $128.1: @FILE = call(write_287, $127.1, " = ")
  .loc 1 156 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $127.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $128.1:rax 
  # $129.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 156 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $128.1:[rbp-32] $129.1:rax 
  # $130.1: @FILE = call(write_199, $128.1, $129.1, true)
  .loc 1 156 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $128.1
  # [discarded value]: $129.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $130.1:rax 
  # $131.1: @FILE = call(write_287, $130.1, " == ")
  .loc 1 156 16
  mov rdi, rax
  lea rsi, .LABEL__string_240[rip] # " == "
  call write_287
  # [discarded value]: $130.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $131.1:rax 
  # $132.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 156 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $131.1:[rbp-32] $132.1:rax 
  # $133.1: @FILE = call(write_199, $131.1, $132.1, true)
  .loc 1 156 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $131.1
  # [discarded value]: $132.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $133.1:rax 
  # $134.1: @FILE = call(end_line_290, $133.1)
  .loc 1 156 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $133.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $134.1:rax 
  # return($134.1)
  .loc 1 156 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $134.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__32:
  # IR_Greater_Than_Comparison_Instruction.3: @Object_Type = load_variable(IR_Greater_Than_Comparison_Instruction)
  lea rax, IR_Greater_Than_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Greater_Than_Comparison_Instruction.3:rax 
  # $135.1: Boolean = call(is_293, instruction.1, IR_Greater_Than_Comparison_Instruction.3)
  .loc 1 158 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Greater_Than_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $135.1:rax 
  # jump($135.1, block.34, block.35)
  test al, al
  jz .LABEL__dump_198__35
.LABEL__dump_198__34:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 159 24
  mov rax, [rbp-8]
  # [discarded value]: $135.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $137.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 160 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $137.1:rbx 
  # $138.1: @FILE = call(write_199, file.1, $137.1, false)
  .loc 1 160 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $137.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $138.1:rax 
  # $139.1: @FILE = call(write_287, $138.1, ": ")
  .loc 1 160 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $138.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $139.1:rax 
  # $140.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 160 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $139.1:rax $140.1:r15 
  # $141.1: @IR_Type = load_struct_member($140.1, type)
  .loc 1 160 78
  mov r14, [r15+8]
  # [discarded value]: $140.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $139.1:rax $141.1:r14 
  # $142.1: @String = load_struct_member($141.1, name)
  .loc 1 160 78
  mov r15, [r14+8]
  # [discarded value]: $141.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $139.1:rax $142.1:r15 
  # $143.1: @FILE = call(write_287, $139.1, $142.1)
  .loc 1 160 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $139.1
  # [discarded value]: $142.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $143.1:rax 
  # $144.1: @FILE = call(write_287, $143.1, " = ")
  .loc 1 160 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $143.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $144.1:rax 
  # $145.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 160 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $144.1:[rbp-32] $145.1:rax 
  # $146.1: @FILE = call(write_199, $144.1, $145.1, true)
  .loc 1 160 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $144.1
  # [discarded value]: $145.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $146.1:rax 
  # $147.1: @FILE = call(write_287, $146.1, " > ")
  .loc 1 160 16
  mov rdi, rax
  lea rsi, .LABEL__string_241[rip] # " > "
  call write_287
  # [discarded value]: $146.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $147.1:rax 
  # $148.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 160 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $147.1:[rbp-32] $148.1:rax 
  # $149.1: @FILE = call(write_199, $147.1, $148.1, true)
  .loc 1 160 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $147.1
  # [discarded value]: $148.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $149.1:rax 
  # $150.1: @FILE = call(end_line_290, $149.1)
  .loc 1 160 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $149.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $150.1:rax 
  # return($150.1)
  .loc 1 160 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $150.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__35:
  # IR_Greater_Than_Or_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Greater_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Greater_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Greater_Than_Or_Equals_Comparison_Instruction.3:rax 
  # $151.1: Boolean = call(is_293, instruction.1, IR_Greater_Than_Or_Equals_Comparison_Instruction.3)
  .loc 1 162 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Greater_Than_Or_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $151.1:rax 
  # jump($151.1, block.37, block.38)
  test al, al
  jz .LABEL__dump_198__38
.LABEL__dump_198__37:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 163 24
  mov rax, [rbp-8]
  # [discarded value]: $151.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $153.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 164 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $153.1:rbx 
  # $154.1: @FILE = call(write_199, file.1, $153.1, false)
  .loc 1 164 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $153.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $154.1:rax 
  # $155.1: @FILE = call(write_287, $154.1, ": ")
  .loc 1 164 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $154.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $155.1:rax 
  # $156.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 164 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $155.1:rax $156.1:r15 
  # $157.1: @IR_Type = load_struct_member($156.1, type)
  .loc 1 164 78
  mov r14, [r15+8]
  # [discarded value]: $156.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $155.1:rax $157.1:r14 
  # $158.1: @String = load_struct_member($157.1, name)
  .loc 1 164 78
  mov r15, [r14+8]
  # [discarded value]: $157.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $155.1:rax $158.1:r15 
  # $159.1: @FILE = call(write_287, $155.1, $158.1)
  .loc 1 164 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $155.1
  # [discarded value]: $158.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $159.1:rax 
  # $160.1: @FILE = call(write_287, $159.1, " = ")
  .loc 1 164 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $159.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $160.1:rax 
  # $161.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 164 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $160.1:[rbp-32] $161.1:rax 
  # $162.1: @FILE = call(write_199, $160.1, $161.1, true)
  .loc 1 164 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $160.1
  # [discarded value]: $161.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $162.1:rax 
  # $163.1: @FILE = call(write_287, $162.1, " >= ")
  .loc 1 164 16
  mov rdi, rax
  lea rsi, .LABEL__string_242[rip] # " >= "
  call write_287
  # [discarded value]: $162.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $163.1:rax 
  # $164.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 164 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $163.1:[rbp-32] $164.1:rax 
  # $165.1: @FILE = call(write_199, $163.1, $164.1, true)
  .loc 1 164 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $163.1
  # [discarded value]: $164.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $165.1:rax 
  # $166.1: @FILE = call(end_line_290, $165.1)
  .loc 1 164 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $165.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $166.1:rax 
  # return($166.1)
  .loc 1 164 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $166.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__38:
  # IR_Less_Than_Comparison_Instruction.3: @Object_Type = load_variable(IR_Less_Than_Comparison_Instruction)
  lea rax, IR_Less_Than_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Less_Than_Comparison_Instruction.3:rax 
  # $167.1: Boolean = call(is_293, instruction.1, IR_Less_Than_Comparison_Instruction.3)
  .loc 1 166 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Less_Than_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $167.1:rax 
  # jump($167.1, block.40, block.41)
  test al, al
  jz .LABEL__dump_198__41
.LABEL__dump_198__40:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 167 24
  mov rax, [rbp-8]
  # [discarded value]: $167.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $169.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 168 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $169.1:rbx 
  # $170.1: @FILE = call(write_199, file.1, $169.1, false)
  .loc 1 168 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $169.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $170.1:rax 
  # $171.1: @FILE = call(write_287, $170.1, ": ")
  .loc 1 168 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $170.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $171.1:rax 
  # $172.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 168 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $171.1:rax $172.1:r15 
  # $173.1: @IR_Type = load_struct_member($172.1, type)
  .loc 1 168 78
  mov r14, [r15+8]
  # [discarded value]: $172.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $171.1:rax $173.1:r14 
  # $174.1: @String = load_struct_member($173.1, name)
  .loc 1 168 78
  mov r15, [r14+8]
  # [discarded value]: $173.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $171.1:rax $174.1:r15 
  # $175.1: @FILE = call(write_287, $171.1, $174.1)
  .loc 1 168 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $171.1
  # [discarded value]: $174.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $175.1:rax 
  # $176.1: @FILE = call(write_287, $175.1, " = ")
  .loc 1 168 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $175.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $176.1:rax 
  # $177.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 168 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $176.1:[rbp-32] $177.1:rax 
  # $178.1: @FILE = call(write_199, $176.1, $177.1, true)
  .loc 1 168 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $176.1
  # [discarded value]: $177.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $178.1:rax 
  # $179.1: @FILE = call(write_287, $178.1, " < ")
  .loc 1 168 16
  mov rdi, rax
  lea rsi, .LABEL__string_243[rip] # " < "
  call write_287
  # [discarded value]: $178.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $179.1:rax 
  # $180.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 168 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $179.1:[rbp-32] $180.1:rax 
  # $181.1: @FILE = call(write_199, $179.1, $180.1, true)
  .loc 1 168 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $179.1
  # [discarded value]: $180.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $181.1:rax 
  # $182.1: @FILE = call(end_line_290, $181.1)
  .loc 1 168 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $181.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $182.1:rax 
  # return($182.1)
  .loc 1 168 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $182.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__41:
  # IR_Less_Than_Or_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Less_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Less_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Less_Than_Or_Equals_Comparison_Instruction.3:rax 
  # $183.1: Boolean = call(is_293, instruction.1, IR_Less_Than_Or_Equals_Comparison_Instruction.3)
  .loc 1 170 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Less_Than_Or_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $183.1:rax 
  # jump($183.1, block.43, block.44)
  test al, al
  jz .LABEL__dump_198__44
.LABEL__dump_198__43:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 171 24
  mov rax, [rbp-8]
  # [discarded value]: $183.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $185.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 172 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $185.1:rbx 
  # $186.1: @FILE = call(write_199, file.1, $185.1, false)
  .loc 1 172 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $185.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $186.1:rax 
  # $187.1: @FILE = call(write_287, $186.1, ": ")
  .loc 1 172 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $186.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $187.1:rax 
  # $188.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 172 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $187.1:rax $188.1:r15 
  # $189.1: @IR_Type = load_struct_member($188.1, type)
  .loc 1 172 78
  mov r14, [r15+8]
  # [discarded value]: $188.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $187.1:rax $189.1:r14 
  # $190.1: @String = load_struct_member($189.1, name)
  .loc 1 172 78
  mov r15, [r14+8]
  # [discarded value]: $189.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $187.1:rax $190.1:r15 
  # $191.1: @FILE = call(write_287, $187.1, $190.1)
  .loc 1 172 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $187.1
  # [discarded value]: $190.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $191.1:rax 
  # $192.1: @FILE = call(write_287, $191.1, " = ")
  .loc 1 172 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $191.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $192.1:rax 
  # $193.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 172 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $192.1:[rbp-32] $193.1:rax 
  # $194.1: @FILE = call(write_199, $192.1, $193.1, true)
  .loc 1 172 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $192.1
  # [discarded value]: $193.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $194.1:rax 
  # $195.1: @FILE = call(write_287, $194.1, " <= ")
  .loc 1 172 16
  mov rdi, rax
  lea rsi, .LABEL__string_244[rip] # " <= "
  call write_287
  # [discarded value]: $194.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $195.1:rax 
  # $196.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 172 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $195.1:[rbp-32] $196.1:rax 
  # $197.1: @FILE = call(write_199, $195.1, $196.1, true)
  .loc 1 172 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $195.1
  # [discarded value]: $196.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $197.1:rax 
  # $198.1: @FILE = call(end_line_290, $197.1)
  .loc 1 172 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $197.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $198.1:rax 
  # return($198.1)
  .loc 1 172 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $198.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__44:
  # IR_Load_Array_Item_Instruction.3: @Object_Type = load_variable(IR_Load_Array_Item_Instruction)
  lea rax, IR_Load_Array_Item_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Array_Item_Instruction.3:rax 
  # $199.1: Boolean = call(is_293, instruction.1, IR_Load_Array_Item_Instruction.3)
  .loc 1 174 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Array_Item_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $199.1:rax 
  # jump($199.1, block.46, block.47)
  test al, al
  jz .LABEL__dump_198__47
.LABEL__dump_198__46:
  # instruction.1: @IR_Load_Array_Item_Instruction = instruction.1
  .loc 1 175 24
  mov rax, [rbp-8]
  # [discarded value]: $199.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $201.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 176 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $201.1:rbx 
  # $202.1: @FILE = call(write_199, file.1, $201.1, false)
  .loc 1 176 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $201.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $202.1:rax 
  # $203.1: @FILE = call(write_287, $202.1, ": ")
  .loc 1 176 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $202.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $203.1:rax 
  # $204.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 176 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $203.1:rax $204.1:r15 
  # $205.1: @IR_Type = load_struct_member($204.1, type)
  .loc 1 176 78
  mov r14, [r15+8]
  # [discarded value]: $204.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $203.1:rax $205.1:r14 
  # $206.1: @String = load_struct_member($205.1, name)
  .loc 1 176 78
  mov r15, [r14+8]
  # [discarded value]: $205.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $203.1:rax $206.1:r15 
  # $207.1: @FILE = call(write_287, $203.1, $206.1)
  .loc 1 176 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $203.1
  # [discarded value]: $206.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $207.1:rax 
  # $208.1: @FILE = call(write_287, $207.1, " = ")
  .loc 1 176 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $207.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $208.1:rax 
  # $209.1: @FILE = call(write_287, $208.1, "load_array_item")
  .loc 1 176 16
  mov rdi, rax
  lea rsi, .LABEL__string_245[rip] # "load_array_item"
  call write_287
  # [discarded value]: $208.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $209.1:rax 
  # $210.1: @FILE = call(write_289, $209.1, '(')
  .loc 1 176 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $209.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $210.1:rax 
  # $211.1: @IR_Value = call(get_array_value_169, instruction.1)
  .loc 1 176 169
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_array_value_169
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $210.1:[rbp-32] $211.1:rax 
  # $212.1: @FILE = call(write_199, $210.1, $211.1, true)
  .loc 1 176 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $210.1
  # [discarded value]: $211.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $212.1:rax 
  # $213.1: @FILE = call(write_287, $212.1, ", ")
  .loc 1 176 16
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $212.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $213.1:rax 
  # $214.1: @IR_Value = call(get_index_value_170, instruction.1)
  .loc 1 176 224
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_index_value_170
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $213.1:[rbp-32] $214.1:rax 
  # $215.1: @FILE = call(write_199, $213.1, $214.1, true)
  .loc 1 176 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $213.1
  # [discarded value]: $214.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $215.1:rax 
  # $216.1: @FILE = call(write_289, $215.1, ')')
  .loc 1 176 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $215.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $216.1:rax 
  # $217.1: @FILE = call(end_line_290, $216.1)
  .loc 1 176 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $216.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $217.1:rax 
  # return($217.1)
  .loc 1 176 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $217.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__47:
  # IR_Load_Function_Address_Instruction.3: @Object_Type = load_variable(IR_Load_Function_Address_Instruction)
  lea rax, IR_Load_Function_Address_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Function_Address_Instruction.3:rax 
  # $218.1: Boolean = call(is_293, instruction.1, IR_Load_Function_Address_Instruction.3)
  .loc 1 178 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Function_Address_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $218.1:rax 
  # jump($218.1, block.49, block.50)
  test al, al
  jz .LABEL__dump_198__50
.LABEL__dump_198__49:
  # instruction.1: @IR_Load_Function_Address_Instruction = instruction.1
  .loc 1 179 24
  mov rax, [rbp-8]
  # [discarded value]: $218.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $220.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 180 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $220.1:rbx 
  # $221.1: @FILE = call(write_199, file.1, $220.1, false)
  .loc 1 180 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $220.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $221.1:rax 
  # $222.1: @FILE = call(write_287, $221.1, ": ")
  .loc 1 180 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $221.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $222.1:rax 
  # $223.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 180 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $222.1:rax $223.1:r15 
  # $224.1: @IR_Type = load_struct_member($223.1, type)
  .loc 1 180 78
  mov r14, [r15+8]
  # [discarded value]: $223.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $222.1:rax $224.1:r14 
  # $225.1: @String = load_struct_member($224.1, name)
  .loc 1 180 78
  mov r15, [r14+8]
  # [discarded value]: $224.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $222.1:rax $225.1:r15 
  # $226.1: @FILE = call(write_287, $222.1, $225.1)
  .loc 1 180 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $222.1
  # [discarded value]: $225.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $226.1:rax 
  # $227.1: @FILE = call(write_287, $226.1, " = ")
  .loc 1 180 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $226.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $227.1:rax 
  # $228.1: @FILE = call(write_287, $227.1, "load_function_address")
  .loc 1 180 16
  mov rdi, rax
  lea rsi, .LABEL__string_246[rip] # "load_function_address"
  call write_287
  # [discarded value]: $227.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $228.1:rax 
  # $229.1: @FILE = call(write_289, $228.1, '(')
  .loc 1 180 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $228.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $229.1:rax 
  # $230.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 180 175
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $229.1:rax $230.1:r15 
  # $231.1: @String = load_struct_member($230.1, name)
  .loc 1 180 175
  mov r14, [r15+24]
  # [discarded value]: $230.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $229.1:rax $231.1:r14 
  # $232.1: @FILE = call(write_287, $229.1, $231.1)
  .loc 1 180 16
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $229.1
  # [discarded value]: $231.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $232.1:rax 
  # $233.1: @FILE = call(write_289, $232.1, '_')
  .loc 1 180 16
  mov rdi, rax
  mov sil, 95
  call write_289
  # [discarded value]: $232.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $233.1:rax 
  # $234.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 180 219
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $233.1:rax $234.1:r15 
  # $235.1: Int = load_struct_member($234.1, id)
  .loc 1 180 219
  mov rbx, [r15+8]
  # [discarded value]: $234.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $233.1:rax $235.1:rbx 
  # $236.1: @FILE = call(write_286, $233.1, $235.1)
  .loc 1 180 16
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $233.1
  # [discarded value]: $235.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $236.1:rax 
  # $237.1: @FILE = call(write_289, $236.1, ')')
  .loc 1 180 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $236.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $237.1:rax 
  # $238.1: @FILE = call(end_line_290, $237.1)
  .loc 1 180 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $237.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $238.1:rax 
  # return($238.1)
  .loc 1 180 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $238.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__50:
  # IR_Load_Struct_Member_Instruction.3: @Object_Type = load_variable(IR_Load_Struct_Member_Instruction)
  lea rax, IR_Load_Struct_Member_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Struct_Member_Instruction.3:rax 
  # $239.1: Boolean = call(is_293, instruction.1, IR_Load_Struct_Member_Instruction.3)
  .loc 1 182 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Struct_Member_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $239.1:rax 
  # jump($239.1, block.52, block.53)
  test al, al
  jz .LABEL__dump_198__53
.LABEL__dump_198__52:
  # instruction.1: @IR_Load_Struct_Member_Instruction = instruction.1
  .loc 1 183 24
  mov rax, [rbp-8]
  # [discarded value]: $239.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $241.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 184 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $241.1:rbx 
  # $242.1: @FILE = call(write_199, file.1, $241.1, false)
  .loc 1 184 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $241.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $242.1:rax 
  # $243.1: @FILE = call(write_287, $242.1, ": ")
  .loc 1 184 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $242.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $243.1:rax 
  # $244.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 184 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $243.1:rax $244.1:r15 
  # $245.1: @IR_Type = load_struct_member($244.1, type)
  .loc 1 184 78
  mov r14, [r15+8]
  # [discarded value]: $244.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $243.1:rax $245.1:r14 
  # $246.1: @String = load_struct_member($245.1, name)
  .loc 1 184 78
  mov r15, [r14+8]
  # [discarded value]: $245.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $243.1:rax $246.1:r15 
  # $247.1: @FILE = call(write_287, $243.1, $246.1)
  .loc 1 184 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $243.1
  # [discarded value]: $246.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $247.1:rax 
  # $248.1: @FILE = call(write_287, $247.1, " = ")
  .loc 1 184 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $247.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $248.1:rax 
  # $249.1: @FILE = call(write_287, $248.1, "load_struct_member")
  .loc 1 184 16
  mov rdi, rax
  lea rsi, .LABEL__string_247[rip] # "load_struct_member"
  call write_287
  # [discarded value]: $248.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $249.1:rax 
  # $250.1: @FILE = call(write_289, $249.1, '(')
  .loc 1 184 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $249.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $250.1:rax 
  # $251.1: @IR_Value = call(get_struct_pointer_value_173, instruction.1)
  .loc 1 184 172
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_struct_pointer_value_173
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $250.1:[rbp-32] $251.1:rax 
  # $252.1: @FILE = call(write_199, $250.1, $251.1, true)
  .loc 1 184 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $250.1
  # [discarded value]: $251.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $252.1:rax 
  # $253.1: @FILE = call(write_287, $252.1, ", ")
  .loc 1 184 16
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $252.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $253.1:rax 
  # $254.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 1 184 236
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $253.1:rax $254.1:r15 
  # $255.1: @String = load_struct_member($254.1, name)
  .loc 1 184 236
  mov rbx, [r15+8]
  # [discarded value]: $254.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $253.1:rax $255.1:rbx 
  # $256.1: @FILE = call(write_287, $253.1, $255.1)
  .loc 1 184 16
  mov rdi, rax
  mov rsi, rbx
  call write_287
  # [discarded value]: $253.1
  # [discarded value]: $255.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $256.1:rax 
  # $257.1: @FILE = call(write_289, $256.1, ')')
  .loc 1 184 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $256.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $257.1:rax 
  # $258.1: @FILE = call(end_line_290, $257.1)
  .loc 1 184 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $257.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $258.1:rax 
  # return($258.1)
  .loc 1 184 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $258.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__53:
  # IR_Load_Variable_Instruction.4: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Variable_Instruction.4:rax 
  # $259.1: Boolean = call(is_293, instruction.1, IR_Load_Variable_Instruction.4)
  .loc 1 186 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Load_Variable_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $259.1:rax 
  # jump($259.1, block.55, block.56)
  test al, al
  jz .LABEL__dump_198__56
.LABEL__dump_198__55:
  # $260.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 187 27
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $259.1
  # [live values]: instruction.1:rax:[rbp-8] file.1:[rbp-16] $260.1:rbx 
  # $261.1: @FILE = call(write_199, file.1, $260.1, false)
  .loc 1 187 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  call write_199
  # [discarded value]: $260.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $261.1:rax 
  # $262.1: @FILE = call(write_287, $261.1, ": ")
  .loc 1 187 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $261.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $262.1:rax 
  # $263.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 187 78
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: instruction.1:rbx:[rbp-8] file.1:[rbp-16] $262.1:rax $263.1:r15 
  # $264.1: @IR_Type = load_struct_member($263.1, type)
  .loc 1 187 78
  mov r14, [r15+8]
  # [discarded value]: $263.1
  # [live values]: instruction.1:rbx:[rbp-8] file.1:[rbp-16] $262.1:rax $264.1:r14 
  # $265.1: @String = load_struct_member($264.1, name)
  .loc 1 187 78
  mov r15, [r14+8]
  # [discarded value]: $264.1
  # [live values]: instruction.1:rbx:[rbp-8] file.1:[rbp-16] $262.1:rax $265.1:r15 
  # $266.1: @FILE = call(write_287, $262.1, $265.1)
  .loc 1 187 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $262.1
  # [discarded value]: $265.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $266.1:rax 
  # $267.1: @FILE = call(write_287, $266.1, " = ")
  .loc 1 187 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $266.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $267.1:rax 
  # $268.1: @FILE = call(write_287, $267.1, "load_variable")
  .loc 1 187 16
  mov rdi, rax
  lea rsi, .LABEL__string_248[rip] # "load_variable"
  call write_287
  # [discarded value]: $267.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $268.1:rax 
  # $269.1: @FILE = call(write_289, $268.1, '(')
  .loc 1 187 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $268.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $269.1:rax 
  # $270.1: @IR_Load_Variable_Instruction = instruction.1
  .loc 1 187 168
  mov rbx, [rbp-8]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $269.1:rax $270.1:rbx 
  # $271.1: @IR_Variable = load_struct_member($270.1, variable)
  .loc 1 187 167
  mov r15, [rbx+57]
  # [discarded value]: $270.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $269.1:rax $271.1:r15 
  # $272.1: @String = load_struct_member($271.1, name)
  .loc 1 187 167
  mov rbx, [r15+8]
  # [discarded value]: $271.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $269.1:rax $272.1:rbx 
  # $273.1: @FILE = call(write_287, $269.1, $272.1)
  .loc 1 187 16
  mov rdi, rax
  mov rsi, rbx
  call write_287
  # [discarded value]: $269.1
  # [discarded value]: $272.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $273.1:rax 
  # $274.1: @FILE = call(write_289, $273.1, ')')
  .loc 1 187 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $273.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $274.1:rax 
  # $275.1: @FILE = call(end_line_290, $274.1)
  .loc 1 187 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $274.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $275.1:rax 
  # return($275.1)
  .loc 1 187 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $275.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__56:
  # IR_Modulo_Instruction.3: @Object_Type = load_variable(IR_Modulo_Instruction)
  lea rax, IR_Modulo_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Modulo_Instruction.3:rax 
  # $276.1: Boolean = call(is_293, instruction.1, IR_Modulo_Instruction.3)
  .loc 1 189 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Modulo_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $276.1:rax 
  # jump($276.1, block.58, block.59)
  test al, al
  jz .LABEL__dump_198__59
.LABEL__dump_198__58:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 190 24
  mov rax, [rbp-8]
  # [discarded value]: $276.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $278.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 191 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $278.1:rbx 
  # $279.1: @FILE = call(write_199, file.1, $278.1, false)
  .loc 1 191 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $278.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $279.1:rax 
  # $280.1: @FILE = call(write_287, $279.1, ": ")
  .loc 1 191 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $279.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $280.1:rax 
  # $281.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 191 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $280.1:rax $281.1:r15 
  # $282.1: @IR_Type = load_struct_member($281.1, type)
  .loc 1 191 78
  mov r14, [r15+8]
  # [discarded value]: $281.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $280.1:rax $282.1:r14 
  # $283.1: @String = load_struct_member($282.1, name)
  .loc 1 191 78
  mov r15, [r14+8]
  # [discarded value]: $282.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $280.1:rax $283.1:r15 
  # $284.1: @FILE = call(write_287, $280.1, $283.1)
  .loc 1 191 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $280.1
  # [discarded value]: $283.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $284.1:rax 
  # $285.1: @FILE = call(write_287, $284.1, " = ")
  .loc 1 191 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $284.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $285.1:rax 
  # $286.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 191 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $285.1:[rbp-32] $286.1:rax 
  # $287.1: @FILE = call(write_199, $285.1, $286.1, true)
  .loc 1 191 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $285.1
  # [discarded value]: $286.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $287.1:rax 
  # $288.1: @FILE = call(write_287, $287.1, " // ")
  .loc 1 191 16
  mov rdi, rax
  lea rsi, .LABEL__string_249[rip] # " // "
  call write_287
  # [discarded value]: $287.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $288.1:rax 
  # $289.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 191 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $288.1:[rbp-32] $289.1:rax 
  # $290.1: @FILE = call(write_199, $288.1, $289.1, true)
  .loc 1 191 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $288.1
  # [discarded value]: $289.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $290.1:rax 
  # $291.1: @FILE = call(end_line_290, $290.1)
  .loc 1 191 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $290.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $291.1:rax 
  # return($291.1)
  .loc 1 191 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $291.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__59:
  # IR_Multiply_Instruction.3: @Object_Type = load_variable(IR_Multiply_Instruction)
  lea rax, IR_Multiply_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Multiply_Instruction.3:rax 
  # $292.1: Boolean = call(is_293, instruction.1, IR_Multiply_Instruction.3)
  .loc 1 193 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Multiply_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $292.1:rax 
  # jump($292.1, block.61, block.62)
  test al, al
  jz .LABEL__dump_198__62
.LABEL__dump_198__61:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 194 24
  mov rax, [rbp-8]
  # [discarded value]: $292.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $294.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 195 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $294.1:rbx 
  # $295.1: @FILE = call(write_199, file.1, $294.1, false)
  .loc 1 195 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $294.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $295.1:rax 
  # $296.1: @FILE = call(write_287, $295.1, ": ")
  .loc 1 195 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $295.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $296.1:rax 
  # $297.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 195 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $296.1:rax $297.1:r15 
  # $298.1: @IR_Type = load_struct_member($297.1, type)
  .loc 1 195 78
  mov r14, [r15+8]
  # [discarded value]: $297.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $296.1:rax $298.1:r14 
  # $299.1: @String = load_struct_member($298.1, name)
  .loc 1 195 78
  mov r15, [r14+8]
  # [discarded value]: $298.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $296.1:rax $299.1:r15 
  # $300.1: @FILE = call(write_287, $296.1, $299.1)
  .loc 1 195 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $296.1
  # [discarded value]: $299.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $300.1:rax 
  # $301.1: @FILE = call(write_287, $300.1, " = ")
  .loc 1 195 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $300.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $301.1:rax 
  # $302.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 195 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $301.1:[rbp-32] $302.1:rax 
  # $303.1: @FILE = call(write_199, $301.1, $302.1, true)
  .loc 1 195 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $301.1
  # [discarded value]: $302.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $303.1:rax 
  # $304.1: @FILE = call(write_287, $303.1, " * ")
  .loc 1 195 16
  mov rdi, rax
  lea rsi, .LABEL__string_250[rip] # " * "
  call write_287
  # [discarded value]: $303.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $304.1:rax 
  # $305.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 195 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $304.1:[rbp-32] $305.1:rax 
  # $306.1: @FILE = call(write_199, $304.1, $305.1, true)
  .loc 1 195 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $304.1
  # [discarded value]: $305.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $306.1:rax 
  # $307.1: @FILE = call(end_line_290, $306.1)
  .loc 1 195 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $306.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $307.1:rax 
  # return($307.1)
  .loc 1 195 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $307.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__62:
  # IR_New_Instruction.3: @Object_Type = load_variable(IR_New_Instruction)
  lea rax, IR_New_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_New_Instruction.3:rax 
  # $308.1: Boolean = call(is_293, instruction.1, IR_New_Instruction.3)
  .loc 1 197 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_New_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $308.1:rax 
  # jump($308.1, block.64, block.65)
  test al, al
  jz .LABEL__dump_198__65
.LABEL__dump_198__64:
  # instruction.1: @IR_New_Instruction = instruction.1
  .loc 1 198 24
  mov rax, [rbp-8]
  # [discarded value]: $308.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $310.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 199 20
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $310.1:rbx 
  # $311.1: @FILE = call(write_199, file.1, $310.1, false)
  .loc 1 199 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $310.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $311.1:rax 
  # $312.1: @FILE = call(write_287, $311.1, ": ")
  .loc 1 199 9
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $311.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $312.1:rax 
  # $313.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 199 71
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $312.1:rax $313.1:r15 
  # $314.1: @IR_Type = load_struct_member($313.1, type)
  .loc 1 199 71
  mov r14, [r15+8]
  # [discarded value]: $313.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $312.1:rax $314.1:r14 
  # $315.1: @String = load_struct_member($314.1, name)
  .loc 1 199 71
  mov r15, [r14+8]
  # [discarded value]: $314.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $312.1:rax $315.1:r15 
  # $316.1: @FILE = call(write_287, $312.1, $315.1)
  .loc 1 199 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $312.1
  # [discarded value]: $315.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $316.1:rax 
  # $317.1: @FILE = call(write_287, $316.1, " = ")
  .loc 1 199 9
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $316.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $317.1:rax 
  # $318.1: @FILE = call(write_287, $317.1, "new")
  .loc 1 199 9
  mov rdi, rax
  lea rsi, .LABEL__string_251[rip] # "new"
  call write_287
  # [discarded value]: $317.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $318.1:rax 
  # $319.1: @FILE = call(write_289, $318.1, '(')
  .loc 1 199 9
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $318.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $319.1:rax 
  # $320.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 1 199 150
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $319.1:rax $320.1:r15 
  # $321.1: @String = load_struct_member($320.1, name)
  .loc 1 199 150
  mov r14, [r15+8]
  # [discarded value]: $320.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $319.1:rax $321.1:r14 
  # $322.1: @FILE = call(write_287, $319.1, $321.1)
  .loc 1 199 9
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $319.1
  # [discarded value]: $321.1
  # [discarded value]: $322.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # $323.1: @IR_Value = call(get_size_value_176, instruction.1)
  .loc 1 200 13
  mov rdi, [rbp-24]
  call get_size_value_176
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $323.1:rax 
  # $324.1: Boolean = $323.1 != null
  .loc 1 200 13
  cmp rax, 0
  setne bl
  # [discarded value]: $323.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $324.1:rbx 
  # jump($324.1, block.66, block.67)
  test bl, bl
  jz .LABEL__dump_198__67
.LABEL__dump_198__66:
  # $325.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 201 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $324.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $325.1:rax 
  # $326.1: @IR_Value = call(get_size_value_176, instruction.1)
  .loc 1 201 36
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_size_value_176
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $325.1:[rbp-32] $326.1:rax 
  # $327.1: @FILE = call(write_199, $325.1, $326.1, true)
  .loc 1 201 13
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $325.1
  # [discarded value]: $326.1
  # [discarded value]: $327.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.67)
.LABEL__dump_198__67:
  # $328.1: @FILE = call(write_289, file.1, ')')
  .loc 1 203 16
  mov rdi, [rbp-16]
  mov sil, 41
  call write_289
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $328.1:rax 
  # $329.1: @FILE = call(end_line_290, $328.1)
  .loc 1 203 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $328.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $329.1:rax 
  # return($329.1)
  .loc 1 203 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $329.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__65:
  # IR_Not_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Not_Equals_Comparison_Instruction)
  lea rax, IR_Not_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Not_Equals_Comparison_Instruction.3:rax 
  # $330.1: Boolean = call(is_293, instruction.1, IR_Not_Equals_Comparison_Instruction.3)
  .loc 1 205 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Not_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $330.1:rax 
  # jump($330.1, block.69, block.70)
  test al, al
  jz .LABEL__dump_198__70
.LABEL__dump_198__69:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 206 24
  mov rax, [rbp-8]
  # [discarded value]: $330.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $332.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 207 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $332.1:rbx 
  # $333.1: @FILE = call(write_199, file.1, $332.1, false)
  .loc 1 207 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $332.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $333.1:rax 
  # $334.1: @FILE = call(write_287, $333.1, ": ")
  .loc 1 207 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $333.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $334.1:rax 
  # $335.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 207 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $334.1:rax $335.1:r15 
  # $336.1: @IR_Type = load_struct_member($335.1, type)
  .loc 1 207 78
  mov r14, [r15+8]
  # [discarded value]: $335.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $334.1:rax $336.1:r14 
  # $337.1: @String = load_struct_member($336.1, name)
  .loc 1 207 78
  mov r15, [r14+8]
  # [discarded value]: $336.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $334.1:rax $337.1:r15 
  # $338.1: @FILE = call(write_287, $334.1, $337.1)
  .loc 1 207 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $334.1
  # [discarded value]: $337.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $338.1:rax 
  # $339.1: @FILE = call(write_287, $338.1, " = ")
  .loc 1 207 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $338.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $339.1:rax 
  # $340.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 207 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $339.1:[rbp-32] $340.1:rax 
  # $341.1: @FILE = call(write_199, $339.1, $340.1, true)
  .loc 1 207 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $339.1
  # [discarded value]: $340.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $341.1:rax 
  # $342.1: @FILE = call(write_287, $341.1, " != ")
  .loc 1 207 16
  mov rdi, rax
  lea rsi, .LABEL__string_252[rip] # " != "
  call write_287
  # [discarded value]: $341.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $342.1:rax 
  # $343.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 207 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $342.1:[rbp-32] $343.1:rax 
  # $344.1: @FILE = call(write_199, $342.1, $343.1, true)
  .loc 1 207 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $342.1
  # [discarded value]: $343.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $344.1:rax 
  # $345.1: @FILE = call(end_line_290, $344.1)
  .loc 1 207 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $344.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $345.1:rax 
  # return($345.1)
  .loc 1 207 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $345.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__70:
  # IR_Phi_Instruction.8: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Phi_Instruction.8:rax 
  # $346.1: Boolean = call(is_293, instruction.1, IR_Phi_Instruction.8)
  .loc 1 209 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Phi_Instruction.8
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $346.1:rax 
  # jump($346.1, block.72, block.73)
  test al, al
  jz .LABEL__dump_198__73
.LABEL__dump_198__72:
  # instruction.1: @IR_Phi_Instruction = instruction.1
  .loc 1 210 24
  mov rax, [rbp-8]
  # [discarded value]: $346.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $348.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 211 20
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $348.1:rbx 
  # $349.1: @FILE = call(write_199, file.1, $348.1, false)
  .loc 1 211 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $348.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $349.1:rax 
  # $350.1: @FILE = call(write_287, $349.1, ": ")
  .loc 1 211 9
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $349.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $350.1:rax 
  # $351.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 211 71
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $350.1:rax $351.1:r15 
  # $352.1: @IR_Type = load_struct_member($351.1, type)
  .loc 1 211 71
  mov r14, [r15+8]
  # [discarded value]: $351.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $350.1:rax $352.1:r14 
  # $353.1: @String = load_struct_member($352.1, name)
  .loc 1 211 71
  mov r15, [r14+8]
  # [discarded value]: $352.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $350.1:rax $353.1:r15 
  # $354.1: @FILE = call(write_287, $350.1, $353.1)
  .loc 1 211 9
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $350.1
  # [discarded value]: $353.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $354.1:rax 
  # $355.1: @FILE = call(write_287, $354.1, " = ")
  .loc 1 211 9
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $354.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $355.1:rax 
  # $356.1: @FILE = call(write_287, $355.1, "phi")
  .loc 1 211 9
  mov rdi, rax
  lea rsi, .LABEL__string_253[rip] # "phi"
  call write_287
  # [discarded value]: $355.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $356.1:rax 
  # $357.1: @FILE = call(write_289, $356.1, '(')
  .loc 1 211 9
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $356.1
  # [discarded value]: $357.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # $358.1: @List = load_struct_member(instruction.1, values)
  .loc 1 212 19
  mov rax, [rbp-24]
  mov rbx, [rax+57]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $358.1:rbx 
  # values.1: @List_Iterator = call(create_iterator_279, $358.1)
  .loc 1 212 19
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $358.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:rax 
  # $360.1: Boolean = call(has_next_282, values.1)
  .loc 1 213 13
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_282
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $360.1:rax 
  # jump($360.1, block.76, block.75)
  test al, al
  jz .LABEL__dump_198__75
.LABEL__dump_198__76:
  # value.1: @IR_Value = call(next_283, values.1)
  .loc 1 215 26
  mov rdi, [rbp-24]
  call next_283
  # [discarded value]: $360.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] value.1:rax 
  # $363.1: @FILE = call(write_199, file.1, value.1, true)
  .loc 1 216 17
  mov rdi, [rbp-16]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: value.1
  # [discarded value]: $363.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # $364.1: Boolean = call(has_next_282, values.1)
  .loc 1 217 21
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $364.1:rax 
  # jump($364.1, block.78, block.75)
  test al, al
  jz .LABEL__dump_198__75
.LABEL__dump_198__78:
  # $365.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 218 21
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $364.1
  # [discarded value]: $365.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # jump(block.76)
  jmp .LABEL__dump_198__76
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
.LABEL__dump_198__75:
  # $366.1: @FILE = call(write_289, file.1, ')')
  .loc 1 224 16
  mov rdi, [rbp-16]
  mov sil, 41
  call write_289
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $366.1:rax 
  # $367.1: @FILE = call(end_line_290, $366.1)
  .loc 1 224 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $366.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $367.1:rax 
  # return($367.1)
  .loc 1 224 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $367.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # [discarded value]: values.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__73:
  # IR_Return_Instruction.4: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Return_Instruction.4:rax 
  # $368.1: Boolean = call(is_293, instruction.1, IR_Return_Instruction.4)
  .loc 1 226 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Return_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $368.1:rax 
  # jump($368.1, block.83, block.84)
  test al, al
  jz .LABEL__dump_198__84
.LABEL__dump_198__83:
  # instruction.1: @IR_Return_Instruction = instruction.1
  .loc 1 227 24
  mov rax, [rbp-8]
  # [discarded value]: $368.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $370.1: @IR_Value = call(get_return_value_178, instruction.1)
  .loc 1 228 13
  mov rdi, rax
  mov [rbp-24], rax
  call get_return_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $370.1:rax 
  # $371.1: Boolean = $370.1 == null
  .loc 1 228 13
  cmp rax, 0
  sete bl
  # [discarded value]: $370.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $371.1:rbx 
  # jump($371.1, block.85, block.86)
  test bl, bl
  jz .LABEL__dump_198__86
.LABEL__dump_198__85:
  # $372.1: @FILE = call(write_287, file.1, "return")
  .loc 1 229 20
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_254[rip] # "return"
  call write_287
  # [discarded value]: $371.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $372.1:rax 
  # $373.1: @FILE = call(write_289, $372.1, '(')
  .loc 1 229 20
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $372.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $373.1:rax 
  # $374.1: @FILE = call(write_289, $373.1, ')')
  .loc 1 229 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $373.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $374.1:rax 
  # $375.1: @FILE = call(end_line_290, $374.1)
  .loc 1 229 20
  mov rdi, rax
  call end_line_290
  # [discarded value]: $374.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $375.1:rax 
  # return($375.1)
  .loc 1 229 13
  jmp .LABEL__dump_198__end
  # [discarded value]: $375.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
.LABEL__dump_198__86:
  # $376.1: @FILE = call(write_287, file.1, "return")
  .loc 1 231 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_254[rip] # "return"
  call write_287
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $376.1:rax 
  # $377.1: @FILE = call(write_289, $376.1, '(')
  .loc 1 231 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $376.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $377.1:rax 
  # $378.1: @IR_Value = call(get_return_value_178, instruction.1)
  .loc 1 231 54
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_return_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $377.1:[rbp-32] $378.1:rax 
  # $379.1: @FILE = call(write_199, $377.1, $378.1, true)
  .loc 1 231 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $377.1
  # [discarded value]: $378.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $379.1:rax 
  # $380.1: @FILE = call(write_289, $379.1, ')')
  .loc 1 231 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $379.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $380.1:rax 
  # $381.1: @FILE = call(end_line_290, $380.1)
  .loc 1 231 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $380.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $381.1:rax 
  # return($381.1)
  .loc 1 231 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $381.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__84:
  # IR_Set_Instruction.5: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Set_Instruction.5:rax 
  # $382.1: Boolean = call(is_293, instruction.1, IR_Set_Instruction.5)
  .loc 1 233 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Set_Instruction.5
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $382.1:rax 
  # jump($382.1, block.89, block.90)
  test al, al
  jz .LABEL__dump_198__90
.LABEL__dump_198__89:
  # instruction.1: @IR_Set_Instruction = instruction.1
  .loc 1 234 24
  mov rax, [rbp-8]
  # [discarded value]: $382.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $384.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 235 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $384.1:rbx 
  # $385.1: @FILE = call(write_199, file.1, $384.1, false)
  .loc 1 235 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $384.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $385.1:rax 
  # $386.1: @FILE = call(write_287, $385.1, ": ")
  .loc 1 235 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $385.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $386.1:rax 
  # $387.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 235 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $386.1:rax $387.1:r15 
  # $388.1: @IR_Type = load_struct_member($387.1, type)
  .loc 1 235 78
  mov r14, [r15+8]
  # [discarded value]: $387.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $386.1:rax $388.1:r14 
  # $389.1: @String = load_struct_member($388.1, name)
  .loc 1 235 78
  mov r15, [r14+8]
  # [discarded value]: $388.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $386.1:rax $389.1:r15 
  # $390.1: @FILE = call(write_287, $386.1, $389.1)
  .loc 1 235 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $386.1
  # [discarded value]: $389.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $390.1:rax 
  # $391.1: @FILE = call(write_287, $390.1, " = ")
  .loc 1 235 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $390.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $391.1:rax 
  # $392.1: @IR_Value = call(get_value_180, instruction.1)
  .loc 1 235 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_180
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $391.1:[rbp-32] $392.1:rax 
  # $393.1: @FILE = call(write_199, $391.1, $392.1, true)
  .loc 1 235 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $391.1
  # [discarded value]: $392.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $393.1:rax 
  # $394.1: @FILE = call(end_line_290, $393.1)
  .loc 1 235 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $393.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $394.1:rax 
  # return($394.1)
  .loc 1 235 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $394.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__90:
  # IR_Store_Array_Item_Instruction.3: @Object_Type = load_variable(IR_Store_Array_Item_Instruction)
  lea rax, IR_Store_Array_Item_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Store_Array_Item_Instruction.3:rax 
  # $395.1: Boolean = call(is_293, instruction.1, IR_Store_Array_Item_Instruction.3)
  .loc 1 237 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Store_Array_Item_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $395.1:rax 
  # jump($395.1, block.92, block.93)
  test al, al
  jz .LABEL__dump_198__93
.LABEL__dump_198__92:
  # instruction.1: @IR_Store_Array_Item_Instruction = instruction.1
  .loc 1 238 24
  mov rax, [rbp-8]
  # [discarded value]: $395.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $397.1: @FILE = call(write_287, file.1, "store_array_item")
  .loc 1 239 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_255[rip] # "store_array_item"
  mov [rbp-24], rax
  call write_287
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $397.1:rax 
  # $398.1: @FILE = call(write_289, $397.1, '(')
  .loc 1 239 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $397.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $398.1:rax 
  # $399.1: @IR_Value = call(get_array_value_182, instruction.1)
  .loc 1 239 64
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_array_value_182
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $398.1:[rbp-32] $399.1:rax 
  # $400.1: @FILE = call(write_199, $398.1, $399.1, true)
  .loc 1 239 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $398.1
  # [discarded value]: $399.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $400.1:rax 
  # $401.1: @FILE = call(write_287, $400.1, ", ")
  .loc 1 239 16
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $400.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $401.1:rax 
  # $402.1: @IR_Value = call(get_index_value_183, instruction.1)
  .loc 1 239 119
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_index_value_183
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $401.1:[rbp-32] $402.1:rax 
  # $403.1: @FILE = call(write_199, $401.1, $402.1, true)
  .loc 1 239 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $401.1
  # [discarded value]: $402.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $403.1:rax 
  # $404.1: @FILE = call(write_287, $403.1, ", ")
  .loc 1 239 16
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $403.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $404.1:rax 
  # $405.1: @IR_Value = call(get_value_184, instruction.1)
  .loc 1 239 174
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_184
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $404.1:[rbp-32] $405.1:rax 
  # $406.1: @FILE = call(write_199, $404.1, $405.1, true)
  .loc 1 239 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $404.1
  # [discarded value]: $405.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $406.1:rax 
  # $407.1: @FILE = call(write_289, $406.1, ')')
  .loc 1 239 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $406.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $407.1:rax 
  # $408.1: @FILE = call(end_line_290, $407.1)
  .loc 1 239 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $407.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $408.1:rax 
  # return($408.1)
  .loc 1 239 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $408.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__93:
  # IR_Store_Struct_Member_Instruction.3: @Object_Type = load_variable(IR_Store_Struct_Member_Instruction)
  lea rax, IR_Store_Struct_Member_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Store_Struct_Member_Instruction.3:rax 
  # $409.1: Boolean = call(is_293, instruction.1, IR_Store_Struct_Member_Instruction.3)
  .loc 1 241 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Store_Struct_Member_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $409.1:rax 
  # jump($409.1, block.95, block.96)
  test al, al
  jz .LABEL__dump_198__96
.LABEL__dump_198__95:
  # instruction.1: @IR_Store_Struct_Member_Instruction = instruction.1
  .loc 1 242 24
  mov rax, [rbp-8]
  # [discarded value]: $409.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $411.1: @FILE = call(write_287, file.1, "store_struct_member")
  .loc 1 243 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_256[rip] # "store_struct_member"
  mov [rbp-24], rax
  call write_287
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $411.1:rax 
  # $412.1: @FILE = call(write_289, $411.1, '(')
  .loc 1 243 16
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $411.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $412.1:rax 
  # $413.1: @IR_Value = call(get_struct_pointer_value_186, instruction.1)
  .loc 1 243 67
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_struct_pointer_value_186
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $412.1:[rbp-32] $413.1:rax 
  # $414.1: @FILE = call(write_199, $412.1, $413.1, true)
  .loc 1 243 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $412.1
  # [discarded value]: $413.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $414.1:rax 
  # $415.1: @FILE = call(write_287, $414.1, ", ")
  .loc 1 243 16
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $414.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $415.1:rax 
  # $416.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 1 243 131
  mov rbx, [rbp-24]
  mov r15, [rbx+57]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $415.1:rax $416.1:r15 
  # $417.1: @String = load_struct_member($416.1, name)
  .loc 1 243 131
  mov r14, [r15+8]
  # [discarded value]: $416.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $415.1:rax $417.1:r14 
  # $418.1: @FILE = call(write_287, $415.1, $417.1)
  .loc 1 243 16
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $415.1
  # [discarded value]: $417.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $418.1:rax 
  # $419.1: @FILE = call(write_287, $418.1, ", ")
  .loc 1 243 16
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $418.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $419.1:rax 
  # $420.1: @IR_Value = call(get_value_187, instruction.1)
  .loc 1 243 186
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_187
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $419.1:[rbp-32] $420.1:rax 
  # $421.1: @FILE = call(write_199, $419.1, $420.1, true)
  .loc 1 243 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $419.1
  # [discarded value]: $420.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $421.1:rax 
  # $422.1: @FILE = call(write_289, $421.1, ')')
  .loc 1 243 16
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $421.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $422.1:rax 
  # $423.1: @FILE = call(end_line_290, $422.1)
  .loc 1 243 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $422.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $423.1:rax 
  # return($423.1)
  .loc 1 243 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $423.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__96:
  # IR_Substract_Instruction.3: @Object_Type = load_variable(IR_Substract_Instruction)
  lea rax, IR_Substract_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Substract_Instruction.3:rax 
  # $424.1: Boolean = call(is_293, instruction.1, IR_Substract_Instruction.3)
  .loc 1 245 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Substract_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $424.1:rax 
  # jump($424.1, block.98, block.99)
  test al, al
  jz .LABEL__dump_198__99
.LABEL__dump_198__98:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 246 24
  mov rax, [rbp-8]
  # [discarded value]: $424.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $426.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 247 27
  mov rbx, [rax+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $426.1:rbx 
  # $427.1: @FILE = call(write_199, file.1, $426.1, false)
  .loc 1 247 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_199
  # [discarded value]: $426.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $427.1:rax 
  # $428.1: @FILE = call(write_287, $427.1, ": ")
  .loc 1 247 16
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $427.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $428.1:rax 
  # $429.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 247 78
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $428.1:rax $429.1:r15 
  # $430.1: @IR_Type = load_struct_member($429.1, type)
  .loc 1 247 78
  mov r14, [r15+8]
  # [discarded value]: $429.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $428.1:rax $430.1:r14 
  # $431.1: @String = load_struct_member($430.1, name)
  .loc 1 247 78
  mov r15, [r14+8]
  # [discarded value]: $430.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rbx:[rbp-24] $428.1:rax $431.1:r15 
  # $432.1: @FILE = call(write_287, $428.1, $431.1)
  .loc 1 247 16
  mov rdi, rax
  mov rsi, r15
  call write_287
  # [discarded value]: $428.1
  # [discarded value]: $431.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $432.1:rax 
  # $433.1: @FILE = call(write_287, $432.1, " = ")
  .loc 1 247 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $432.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $433.1:rax 
  # $434.1: @IR_Value = call(get_left_value_189, instruction.1)
  .loc 1 247 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_189
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $433.1:[rbp-32] $434.1:rax 
  # $435.1: @FILE = call(write_199, $433.1, $434.1, true)
  .loc 1 247 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $433.1
  # [discarded value]: $434.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $435.1:rax 
  # $436.1: @FILE = call(write_287, $435.1, " - ")
  .loc 1 247 16
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # " - "
  call write_287
  # [discarded value]: $435.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $436.1:rax 
  # $437.1: @IR_Value = call(get_right_value_190, instruction.1)
  .loc 1 247 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_190
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $436.1:[rbp-32] $437.1:rax 
  # $438.1: @FILE = call(write_199, $436.1, $437.1, true)
  .loc 1 247 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_199
  # [discarded value]: $436.1
  # [discarded value]: $437.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $438.1:rax 
  # $439.1: @FILE = call(end_line_290, $438.1)
  .loc 1 247 16
  mov rdi, rax
  call end_line_290
  # [discarded value]: $438.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $439.1:rax 
  # return($439.1)
  .loc 1 247 9
  jmp .LABEL__dump_198__end
  # [discarded value]: $439.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_198__99:
  # $440.1: @String = call(clone_295, "Unsupported type: ")
  .loc 1 249 11
  lea rdi, .LABEL__string_150[rip] # "Unsupported type: "
  call clone_295
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $440.1:rax 
  # $441.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 1 249 46
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: instruction.1:rbx:[rbp-8] file.1:[rbp-16] $440.1:rax $441.1:r15 
  # $442.1: @String = load_struct_member($441.1, name)
  .loc 1 249 46
  mov r14, r15
  add r14, 8
  # [discarded value]: $441.1
  # [live values]: instruction.1:rbx:[rbp-8] file.1:[rbp-16] $440.1:rax $442.1:r14 
  # $443.1: @String = call(append_304, $440.1, $442.1)
  .loc 1 249 11
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $440.1
  # [discarded value]: $442.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $443.1:rax 
  # call(abort_292, $443.1)
  .loc 1 249 5
  mov rdi, rax
  call abort_292
  # [discarded value]: $443.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_198__end:
  mov rsp, rbp
  pop rbp
  ret

dump_198__stack_frame_size: .word 48

  .loc 1 252 1
  .text
write_199:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_199__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_199__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: file.1:rdi value.1:rsi 
  # $1.1: Boolean = load_variable(check_users)
  # [live values]: file.1:rdi value.1:rsi $1.1:rdx 
  # jump($1.1, block.2, block.3)
  test dl, dl
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_199__3
.LABEL__write_199__2:
  # $2.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 253 24
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $2.1:rbx 
  # $3.1: Int = load_struct_member($2.1, size)
  .loc 1 253 24
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:r15 
  # $1.2: Boolean = $3.1 == 0
  .loc 1 253 24
  cmp r15, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:rbx:[rbp-1] 
  # jump(block.3)
  mov [rbp-1], bl
.LABEL__write_199__3:
  # $1.3: Boolean = phi($1.1, $1.2)
  .loc 1 253 9
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # jump($1.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__write_199__5
.LABEL__write_199__4:
  # $5.1: @FILE = call(flush_291, file.1)
  .loc 1 254 9
  mov rdi, [rbp-17]
  call flush_291
  # [discarded value]: $1.3
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # IR_Variable_Value.13: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Variable_Value.13:rax 
  # $6.1: Boolean = call(is_293, value.1, IR_Variable_Value.13)
  .loc 1 255 13
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.13
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $6.1:rax 
  # jump($6.1, block.6, block.5)
  test al, al
  jz .LABEL__write_199__5
.LABEL__write_199__6:
  # value.1: @IR_Variable_Value = value.1
  .loc 1 256 22
  mov rax, [rbp-9]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:rax 
  # value_version.1: Int = load_struct_member(value.1, version)
  .loc 1 257 30
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:rax value_version.1:rbx 
  # stderr.7: @FILE = load_variable(stderr)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:rax value_version.1:rbx stderr.7:stderr[rip] 
  # $9.1: @FILE = call(end_line_290, stderr.7)
  .loc 1 258 13
  mov rdi, stderr[rip]
  mov [rbp-25], rax
  mov [rbp-33], rbx
  call end_line_290
  # [discarded value]: stderr.7
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:[rbp-25] value_version.1:[rbp-33] $9.1:rax 
  # $10.1: @IR_Variable = load_struct_member(value.1, variable)
  .loc 1 258 37
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $9.1:rax $10.1:r15 
  # $11.1: @String = load_struct_member($10.1, name)
  .loc 1 258 37
  mov rbx, [r15+8]
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $9.1:rax $11.1:rbx 
  # $12.1: @FILE = call(write_287, $9.1, $11.1)
  .loc 1 258 13
  mov rdi, rax
  mov rsi, rbx
  call write_287
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $12.1:rax 
  # $13.1: @FILE = call(write_287, $12.1, ".")
  .loc 1 258 13
  mov rdi, rax
  lea rsi, .LABEL__string_258[rip] # "."
  call write_287
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $13.1:rax 
  # $14.1: @FILE = call(write_286, $13.1, value_version.1)
  .loc 1 258 13
  mov rdi, rax
  mov rsi, [rbp-33]
  call write_286
  # [discarded value]: value_version.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $14.1:rax 
  # $15.1: @FILE = call(end_line_290, $14.1)
  .loc 1 258 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # jump(block.5)
.LABEL__write_199__5:
  # IR_Constant_Value.33: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Constant_Value.33:rax 
  # $16.1: Boolean = call(is_293, value.1, IR_Constant_Value.33)
  .loc 1 262 9
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Constant_Value.33
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $16.1:rax 
  # jump($16.1, block.8, block.9)
  test al, al
  jz .LABEL__write_199__9
.LABEL__write_199__8:
  # $17.1: @IR_Constant_Value = value.1
  .loc 1 263 28
  mov rax, [rbp-9]
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $17.1:rax 
  # $18.1: @Literal_Token = load_struct_member($17.1, literal)
  .loc 1 263 27
  mov rbx, [rax+24]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $18.1:rbx 
  # $19.1: @String = load_struct_member($18.1, lexeme)
  .loc 1 263 27
  mov rax, [rbx+8]
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $19.1:rax 
  # $20.1: @FILE = call(write_287, file.1, $19.1)
  .loc 1 263 16
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_287
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $20.1:rax 
  # return($20.1)
  .loc 1 263 9
  jmp .LABEL__write_199__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
.LABEL__write_199__9:
  # IR_Variable_Value.14: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Variable_Value.14:rax 
  # $21.1: Boolean = call(is_293, value.1, IR_Variable_Value.14)
  .loc 1 265 9
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Variable_Value.14
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $21.1:rax 
  # jump($21.1, block.11, block.12)
  test al, al
  jz .LABEL__write_199__12
.LABEL__write_199__11:
  # $22.1: @IR_Variable_Value = value.1
  .loc 1 266 28
  mov rax, [rbp-9]
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $22.1:rax 
  # $23.1: @IR_Variable = load_struct_member($22.1, variable)
  .loc 1 266 27
  mov rbx, [rax+24]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $23.1:rbx 
  # $24.1: @String = load_struct_member($23.1, name)
  .loc 1 266 27
  mov rax, [rbx+8]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $24.1:rax 
  # $25.1: @FILE = call(write_287, file.1, $24.1)
  .loc 1 266 16
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_287
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $25.1:rax 
  # $26.1: @FILE = call(write_289, $25.1, '.')
  .loc 1 266 16
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $26.1:rax 
  # $27.1: @IR_Variable_Value = value.1
  .loc 1 266 90
  mov rbx, [rbp-9]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $26.1:rax $27.1:rbx 
  # $28.1: Int = load_struct_member($27.1, version)
  .loc 1 266 89
  mov r15, [rbx+32]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $26.1:rax $28.1:r15 
  # $29.1: @FILE = call(write_286, $26.1, $28.1)
  .loc 1 266 16
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $26.1
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $29.1:rax 
  # return($29.1)
  .loc 1 266 9
  jmp .LABEL__write_199__end
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
.LABEL__write_199__12:
  # IR_Undefined_Value.4: @Object_Type = load_variable(IR_Undefined_Value)
  lea rax, IR_Undefined_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Undefined_Value.4:rax 
  # $30.1: Boolean = call(is_293, value.1, IR_Undefined_Value.4)
  .loc 1 268 9
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_293
  # [discarded value]: IR_Undefined_Value.4
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $30.1:rax 
  # jump($30.1, block.14, block.15)
  test al, al
  jz .LABEL__write_199__15
.LABEL__write_199__14:
  # $31.1: @FILE = call(write_287, file.1, "undefined")
  .loc 1 269 16
  mov rdi, [rbp-17]
  lea rsi, .LABEL__string_259[rip] # "undefined"
  call write_287
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $31.1:rax 
  # return($31.1)
  .loc 1 269 9
  jmp .LABEL__write_199__end
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
.LABEL__write_199__15:
  # $32.1: @String = call(clone_295, "Unsupported type: ")
  .loc 1 271 11
  lea rdi, .LABEL__string_150[rip] # "Unsupported type: "
  call clone_295
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $32.1:rax 
  # $33.1: @Object_Type = load_struct_member(value.1, object_type)
  .loc 1 271 46
  mov rbx, [rbp-9]
  mov r15, [rbx+0]
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $32.1:rax $33.1:r15 
  # $34.1: @String = load_struct_member($33.1, name)
  .loc 1 271 46
  mov r14, r15
  add r14, 8
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $32.1:rax $34.1:r14 
  # $35.1: @String = call(append_304, $32.1, $34.1)
  .loc 1 271 11
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $32.1
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $35.1:rax 
  # call(abort_292, $35.1)
  .loc 1 271 5
  mov rdi, rax
  call abort_292
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [discarded value]: $1.2
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: file.1
  # [discarded value]: value.1
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__write_199__end:
  mov rsp, rbp
  pop rbp
  ret

write_199__stack_frame_size: .word 48

  .loc 6 49 1
  .text
parse_200:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_200__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_200__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # $1.1: @List = new(List)
  .loc 7 4 22
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  # $2.1: @List = new(List)
  .loc 7 5 20
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  # $3.1: @List = new(List)
  .loc 7 6 31
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # store_struct_member($3.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  # $4.1: @List = new(List)
  .loc 7 7 24
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  # $5.1: @List = new(List)
  .loc 7 8 25
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # store_struct_member($5.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  # $6.1: @Compilation_Unit = new(Compilation_Unit)
  .loc 6 5 43
  mov [rbp-48], rax
  mov rdi, 40
  call malloc
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, sources, $1.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, types, $2.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-8] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, global_variables, $3.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-8] $4.1:[rbp-40] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, functions, $4.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-8] $5.1:[rbp-48] $6.1:rax 
  # store_struct_member($6.1, statements, $5.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $5.1
  # [live values]: file_path.1:[rbp-8] $6.1:rax 
  # $7.1: @Comment_Matcher = new(Comment_Matcher)
  .loc 6 7 34
  mov [rbp-16], rax
  mov rdi, 9
  call malloc
  lea rbx, Comment_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:rax 
  # store_struct_member($7.1, is_required, false)
  mov BYTE PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:rax 
  # $8.1: @Space_Matcher = new(Space_Matcher)
  .loc 6 8 32
  mov [rbp-24], rax
  mov rdi, 9
  call malloc
  lea rbx, Space_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, is_required, false)
  mov BYTE PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:rax 
  # $9.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 9 36
  mov [rbp-32], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # store_struct_member($9.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # store_struct_member($9.1, lexeme, "&")
  lea rbx, .LABEL__string_260[rip] # "&"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # $10.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 10 29
  mov [rbp-40], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, lexeme, "as")
  lea rbx, .LABEL__string_261[rip] # "as"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  # $11.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 11 35
  mov [rbp-48], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  # store_struct_member($11.1, lexeme, "*")
  lea rbx, .LABEL__string_262[rip] # "*"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  # $12.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 12 29
  mov [rbp-56], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  # store_struct_member($12.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  # store_struct_member($12.1, lexeme, "@")
  lea rbx, .LABEL__string_221[rip] # "@"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  # $13.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 13 32
  mov [rbp-64], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  # store_struct_member($13.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  # store_struct_member($13.1, lexeme, "break")
  lea rbx, .LABEL__string_263[rip] # "break"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  # $14.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 14 38
  mov [rbp-72], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  # store_struct_member($14.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  # store_struct_member($14.1, lexeme, "}")
  lea rbx, .LABEL__string_264[rip] # "}"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  # $15.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 15 40
  mov [rbp-80], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  # store_struct_member($15.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  # store_struct_member($15.1, lexeme, "]")
  lea rbx, .LABEL__string_223[rip] # "]"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  # $16.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 16 38
  mov [rbp-88], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  # store_struct_member($16.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  # store_struct_member($16.1, lexeme, ")")
  lea rbx, .LABEL__string_173[rip] # ")"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  # $17.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 17 32
  mov [rbp-96], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  # store_struct_member($17.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  # store_struct_member($17.1, lexeme, ":")
  lea rbx, .LABEL__string_25[rip] # ":"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  # $18.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 18 33
  mov [rbp-104], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  # store_struct_member($18.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  # store_struct_member($18.1, lexeme, ";")
  lea rbx, .LABEL__string_265[rip] # ";"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  # $19.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 19 32
  mov [rbp-112], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  # store_struct_member($19.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  # store_struct_member($19.1, lexeme, ",")
  lea rbx, .LABEL__string_266[rip] # ","
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  # $20.1: @Comment_Matcher = new(Comment_Matcher)
  .loc 6 20 34
  mov [rbp-120], rax
  mov rdi, 9
  call malloc
  lea rbx, Comment_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:rax 
  # store_struct_member($20.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:rax 
  # $21.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 21 30
  mov [rbp-128], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  # store_struct_member($21.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  # store_struct_member($21.1, lexeme, ".")
  lea rbx, .LABEL__string_258[rip] # "."
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  # $22.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 22 31
  mov [rbp-136], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  # store_struct_member($22.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  # store_struct_member($22.1, lexeme, "else")
  lea rbx, .LABEL__string_267[rip] # "else"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  # $23.1: @End_Of_File_Matcher = new(End_Of_File_Matcher)
  .loc 6 23 38
  mov [rbp-144], rax
  mov rdi, 9
  call malloc
  lea rbx, End_Of_File_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:rax 
  # store_struct_member($23.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:rax 
  # $24.1: @End_Of_Line_Matcher = new(End_Of_Line_Matcher)
  .loc 6 24 38
  mov [rbp-152], rax
  mov rdi, 9
  call malloc
  lea rbx, End_Of_Line_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:rax 
  # store_struct_member($24.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:rax 
  # $25.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 25 33
  mov [rbp-160], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  # store_struct_member($25.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  # store_struct_member($25.1, lexeme, "=")
  lea rbx, .LABEL__string_268[rip] # "="
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  # $26.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 26 43
  mov [rbp-168], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  # store_struct_member($26.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  # store_struct_member($26.1, lexeme, "!")
  lea rbx, .LABEL__string_269[rip] # "!"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  # $27.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 27 35
  mov [rbp-176], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  # store_struct_member($27.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  # store_struct_member($27.1, lexeme, "external")
  lea rbx, .LABEL__string_270[rip] # "external"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  # $28.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 28 39
  mov [rbp-184], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  # store_struct_member($28.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  # store_struct_member($28.1, lexeme, ">")
  lea rbx, .LABEL__string_271[rip] # ">"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  # $29.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 29 33
  mov [rbp-192], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  # store_struct_member($29.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  # store_struct_member($29.1, lexeme, "-")
  lea rbx, .LABEL__string_272[rip] # "-"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  # $30.1: @Identifier_Matcher = new(Identifier_Matcher)
  .loc 6 30 37
  mov [rbp-200], rax
  mov rdi, 9
  call malloc
  lea rbx, Identifier_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:rax 
  # store_struct_member($30.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:rax 
  # $31.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 31 29
  mov [rbp-208], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  # store_struct_member($31.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  # store_struct_member($31.1, lexeme, "if")
  lea rbx, .LABEL__string_273[rip] # "if"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  # $32.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 32 34
  mov [rbp-216], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  # store_struct_member($32.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  # store_struct_member($32.1, lexeme, "include")
  lea rbx, .LABEL__string_274[rip] # "include"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  # $33.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 33 36
  mov [rbp-224], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  # store_struct_member($33.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  # store_struct_member($33.1, lexeme, "<")
  lea rbx, .LABEL__string_275[rip] # "<"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  # $34.1: @Literal_Matcher = new(Literal_Matcher)
  .loc 6 34 34
  mov [rbp-232], rax
  mov rdi, 9
  call malloc
  lea rbx, Literal_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:rax 
  # store_struct_member($34.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:rax 
  # $35.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 35 31
  mov [rbp-240], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  # store_struct_member($35.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  # store_struct_member($35.1, lexeme, "loop")
  lea rbx, .LABEL__string_276[rip] # "loop"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  # $36.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 36 30
  mov [rbp-248], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  # store_struct_member($36.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  # store_struct_member($36.1, lexeme, "new")
  lea rbx, .LABEL__string_251[rip] # "new"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  # $37.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 37 37
  mov [rbp-256], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  # store_struct_member($37.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  # store_struct_member($37.1, lexeme, "{")
  lea rbx, .LABEL__string_277[rip] # "{"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  # $38.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 38 39
  mov [rbp-264], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  # store_struct_member($38.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  # store_struct_member($38.1, lexeme, "[")
  lea rbx, .LABEL__string_222[rip] # "["
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  # $39.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 39 37
  mov [rbp-272], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  # store_struct_member($39.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  # store_struct_member($39.1, lexeme, "(")
  lea rbx, .LABEL__string_224[rip] # "("
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  # $40.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 40 31
  mov [rbp-280], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  # store_struct_member($40.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  # store_struct_member($40.1, lexeme, "+")
  lea rbx, .LABEL__string_278[rip] # "+"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  # $41.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 41 33
  mov [rbp-288], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  # store_struct_member($41.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  # store_struct_member($41.1, lexeme, "return")
  lea rbx, .LABEL__string_254[rip] # "return"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  # $42.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 42 32
  mov [rbp-296], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  # store_struct_member($42.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  # store_struct_member($42.1, lexeme, "/")
  lea rbx, .LABEL__string_279[rip] # "/"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  # $43.1: @String_Literal_Matcher = new(String_Literal_Matcher)
  .loc 6 43 41
  mov [rbp-304], rax
  mov rdi, 9
  call malloc
  lea rbx, String_Literal_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:rax 
  # store_struct_member($43.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:rax 
  # $44.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 44 33
  mov [rbp-312], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  # store_struct_member($44.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  # store_struct_member($44.1, lexeme, "struct")
  lea rbx, .LABEL__string_280[rip] # "struct"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  # $45.1: @Other_Matcher = new(Other_Matcher)
  .loc 6 45 39
  mov [rbp-320], rax
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  # store_struct_member($45.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  # store_struct_member($45.1, lexeme, "|")
  lea rbx, .LABEL__string_281[rip] # "|"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  # $46.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 6 46 32
  mov [rbp-328], rax
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  # store_struct_member($46.1, is_required, true)
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  # store_struct_member($46.1, lexeme, "while")
  lea rbx, .LABEL__string_282[rip] # "while"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  # $47.1: @Parser = new(Parser)
  .loc 6 50 15
  mov [rbp-336], rax
  mov rdi, 344
  call malloc
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, scanner, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, compilation_unit, $6.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-8] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, current_alignment, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, optional_comment, $7.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: $7.1
  # [live values]: file_path.1:[rbp-8] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, optional_space, $8.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: $8.1
  # [live values]: file_path.1:[rbp-8] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_ampersand, $9.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+40], rbx
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-8] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_as, $10.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+48], rbx
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-8] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_asterisk, $11.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+56], rbx
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-8] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_at, $12.1)
  mov rbx, [rbp-64]
  mov QWORD PTR [rax+64], rbx
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-8] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_break, $13.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+72], rbx
  # [discarded value]: $13.1
  # [live values]: file_path.1:[rbp-8] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_close_brace, $14.1)
  mov rbx, [rbp-80]
  mov QWORD PTR [rax+80], rbx
  # [discarded value]: $14.1
  # [live values]: file_path.1:[rbp-8] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_close_bracket, $15.1)
  mov rbx, [rbp-88]
  mov QWORD PTR [rax+88], rbx
  # [discarded value]: $15.1
  # [live values]: file_path.1:[rbp-8] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_close_paren, $16.1)
  mov rbx, [rbp-96]
  mov QWORD PTR [rax+96], rbx
  # [discarded value]: $16.1
  # [live values]: file_path.1:[rbp-8] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_colon, $17.1)
  mov rbx, [rbp-104]
  mov QWORD PTR [rax+104], rbx
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-8] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_column, $18.1)
  mov rbx, [rbp-112]
  mov QWORD PTR [rax+112], rbx
  # [discarded value]: $18.1
  # [live values]: file_path.1:[rbp-8] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_comma, $19.1)
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+120], rbx
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-8] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_comment, $20.1)
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+128], rbx
  # [discarded value]: $20.1
  # [live values]: file_path.1:[rbp-8] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_dot, $21.1)
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+136], rbx
  # [discarded value]: $21.1
  # [live values]: file_path.1:[rbp-8] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_else, $22.1)
  mov rbx, [rbp-144]
  mov QWORD PTR [rax+144], rbx
  # [discarded value]: $22.1
  # [live values]: file_path.1:[rbp-8] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_end_of_file, $23.1)
  mov rbx, [rbp-152]
  mov QWORD PTR [rax+152], rbx
  # [discarded value]: $23.1
  # [live values]: file_path.1:[rbp-8] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_end_of_line, $24.1)
  mov rbx, [rbp-160]
  mov QWORD PTR [rax+160], rbx
  # [discarded value]: $24.1
  # [live values]: file_path.1:[rbp-8] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_equals, $25.1)
  mov rbx, [rbp-168]
  mov QWORD PTR [rax+168], rbx
  # [discarded value]: $25.1
  # [live values]: file_path.1:[rbp-8] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_exclamation_mark, $26.1)
  mov rbx, [rbp-176]
  mov QWORD PTR [rax+176], rbx
  # [discarded value]: $26.1
  # [live values]: file_path.1:[rbp-8] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_external, $27.1)
  mov rbx, [rbp-184]
  mov QWORD PTR [rax+184], rbx
  # [discarded value]: $27.1
  # [live values]: file_path.1:[rbp-8] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_greater_than, $28.1)
  mov rbx, [rbp-192]
  mov QWORD PTR [rax+192], rbx
  # [discarded value]: $28.1
  # [live values]: file_path.1:[rbp-8] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_hyphen, $29.1)
  mov rbx, [rbp-200]
  mov QWORD PTR [rax+200], rbx
  # [discarded value]: $29.1
  # [live values]: file_path.1:[rbp-8] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_identifier, $30.1)
  mov rbx, [rbp-208]
  mov QWORD PTR [rax+208], rbx
  # [discarded value]: $30.1
  # [live values]: file_path.1:[rbp-8] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_if, $31.1)
  mov rbx, [rbp-216]
  mov QWORD PTR [rax+216], rbx
  # [discarded value]: $31.1
  # [live values]: file_path.1:[rbp-8] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_include, $32.1)
  mov rbx, [rbp-224]
  mov QWORD PTR [rax+224], rbx
  # [discarded value]: $32.1
  # [live values]: file_path.1:[rbp-8] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_less_than, $33.1)
  mov rbx, [rbp-232]
  mov QWORD PTR [rax+232], rbx
  # [discarded value]: $33.1
  # [live values]: file_path.1:[rbp-8] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_literal, $34.1)
  mov rbx, [rbp-240]
  mov QWORD PTR [rax+240], rbx
  # [discarded value]: $34.1
  # [live values]: file_path.1:[rbp-8] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_loop, $35.1)
  mov rbx, [rbp-248]
  mov QWORD PTR [rax+248], rbx
  # [discarded value]: $35.1
  # [live values]: file_path.1:[rbp-8] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_new, $36.1)
  mov rbx, [rbp-256]
  mov QWORD PTR [rax+256], rbx
  # [discarded value]: $36.1
  # [live values]: file_path.1:[rbp-8] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_open_brace, $37.1)
  mov rbx, [rbp-264]
  mov QWORD PTR [rax+264], rbx
  # [discarded value]: $37.1
  # [live values]: file_path.1:[rbp-8] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_open_bracket, $38.1)
  mov rbx, [rbp-272]
  mov QWORD PTR [rax+272], rbx
  # [discarded value]: $38.1
  # [live values]: file_path.1:[rbp-8] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_open_paren, $39.1)
  mov rbx, [rbp-280]
  mov QWORD PTR [rax+280], rbx
  # [discarded value]: $39.1
  # [live values]: file_path.1:[rbp-8] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_plus, $40.1)
  mov rbx, [rbp-288]
  mov QWORD PTR [rax+288], rbx
  # [discarded value]: $40.1
  # [live values]: file_path.1:[rbp-8] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_return, $41.1)
  mov rbx, [rbp-296]
  mov QWORD PTR [rax+296], rbx
  # [discarded value]: $41.1
  # [live values]: file_path.1:[rbp-8] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_slash, $42.1)
  mov rbx, [rbp-304]
  mov QWORD PTR [rax+304], rbx
  # [discarded value]: $42.1
  # [live values]: file_path.1:[rbp-8] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_string_literal, $43.1)
  mov rbx, [rbp-312]
  mov QWORD PTR [rax+312], rbx
  # [discarded value]: $43.1
  # [live values]: file_path.1:[rbp-8] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_struct, $44.1)
  mov rbx, [rbp-320]
  mov QWORD PTR [rax+320], rbx
  # [discarded value]: $44.1
  # [live values]: file_path.1:[rbp-8] $45.1:[rbp-328] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_vertical_bar, $45.1)
  mov rbx, [rbp-328]
  mov QWORD PTR [rax+328], rbx
  # [discarded value]: $45.1
  # [live values]: file_path.1:[rbp-8] $46.1:[rbp-336] $47.1:rax 
  # store_struct_member($47.1, required_while, $46.1)
  mov rbx, [rbp-336]
  mov QWORD PTR [rax+336], rbx
  # [discarded value]: $46.1
  # [live values]: file_path.1:[rbp-8] $47.1:rax 
  # parser.1: @Parser = $47.1
  .loc 6 50 5
  # [discarded value]: $47.1
  # [live values]: file_path.1:[rbp-8] parser.1:rax 
  # call(parse_201, parser.1, file_path.1, null)
  .loc 6 51 5
  mov rdi, rax
  mov rsi, [rbp-8]
  xor rdx, rdx
  mov [rbp-16], rax
  call parse_201
  # [discarded value]: file_path.1
  # [live values]: parser.1:[rbp-16] 
  # $48.1: @Compilation_Unit = load_struct_member(parser.1, compilation_unit)
  .loc 6 52 12
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: parser.1
  # [live values]: $48.1:rbx 
  # return($48.1)
  .loc 6 52 5
  mov rax, rbx
  jmp .LABEL__parse_200__end
  # [discarded value]: $48.1
  # [live values]: 
.LABEL__parse_200__end:
  mov rsp, rbp
  pop rbp
  ret

parse_200__stack_frame_size: .word 336

  .loc 6 55 1
  .text
parse_201:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_201__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_201__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # file_path.1: @String = load_variable(file_path)
  # [live values]: self.1:rdi file_path.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi file_path.1:rsi location.1:rdx 
  # source.1: @Source = call(create_source_266, file_path.1)
  .loc 6 56 15
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_source_266
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax 
  # $2.1: Boolean = source.1 == null
  .loc 6 57 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__parse_201__3
.LABEL__parse_201__2:
  # $3.1: @String = call(clone_295, "Failed to open file: ")
  .loc 6 58 20
  lea rdi, .LABEL__string_283[rip] # "Failed to open file: "
  call clone_295
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $3.1:rax 
  # message.1: @String = call(append_304, $3.1, file_path.1)
  .loc 6 58 20
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_304
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] message.1:rax 
  # $5.1: Boolean = location.1 != null
  .loc 6 59 13
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] message.1:rax $5.1:rbx 
  # jump($5.1, block.4, block.5)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__parse_201__5
.LABEL__parse_201__4:
  # call(abort_264, location.1, message.1)
  .loc 6 60 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  call abort_264
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] message.1:[rbp-40] 
.LABEL__parse_201__5:
  # call(abort_292, message.1)
  .loc 6 62 9
  mov rdi, [rbp-40]
  call abort_292
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] message.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] message.1:[rbp-40] 
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
.LABEL__parse_201__3:
  # $6.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 65 5
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $6.1:rbx 
  # $7.1: @List = load_struct_member($6.1, sources)
  .loc 6 65 5
  mov r15, [rbx+0]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $7.1:r15 
  # call(append_268, $7.1, source.1)
  .loc 6 65 5
  mov rdi, r15
  mov rsi, [rbp-32]
  call append_268
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 66 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $8.1:rbx 
  # $9.1: @List = load_struct_member($8.1, sources)
  .loc 6 66 17
  mov r15, [rbx+0]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $9.1:r15 
  # $10.1: Int = load_struct_member($9.1, size)
  .loc 6 66 17
  mov rbx, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $10.1:rbx 
  # store_struct_member(source.1, id, $10.1)
  .loc 6 66 5
  mov r15, [rbp-32]
  mov QWORD PTR [r15+0], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] 
  # other_scanner.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 68 22
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] other_scanner.1:rbx 
  # $12.1: @Scanner = call(create_scanner_246, source.1)
  .loc 6 69 20
  mov rdi, r15
  mov [rbp-40], rbx
  call create_scanner_246
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $12.1:rax 
  # store_struct_member(self.1, scanner, $12.1)
  .loc 6 69 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+0], rax
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] 
  # $13.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 70 27
  mov rax, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $13.1:rax 
  # $14.1: @List = load_struct_member($13.1, statements)
  .loc 6 70 27
  mov r15, [rax+32]
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $14.1:r15 
  # call(parse_statements_202, self.1, $14.1)
  .loc 6 70 5
  mov rdi, rbx
  mov rsi, r15
  call parse_statements_202
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] 
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 71 9
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $15.1:rbx 
  # $16.1: @Token = load_struct_member($15.1, current_token)
  .loc 6 71 9
  mov r15, [rbx+32]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $16.1:r15 
  # End_Of_File_Token.2: @Object_Type = load_variable(End_Of_File_Token)
  lea rbx, End_Of_File_Token[rip]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $16.1:r15 End_Of_File_Token.2:rbx 
  # $17.1: Boolean = call(is_293, $16.1, End_Of_File_Token.2)
  .loc 6 71 9
  mov rdi, r15
  mov rsi, rbx
  call is_293
  # [discarded value]: $16.1
  # [discarded value]: End_Of_File_Token.2
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $17.1:rax 
  # $18.1: Boolean = $17.1 == false
  .loc 6 71 9
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $18.1:rbx 
  # jump($18.1, block.6, block.7)
  test bl, bl
  jz .LABEL__parse_201__7
.LABEL__parse_201__6:
  # $19.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 72 21
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $19.1:rbx 
  # $20.1: @Token = load_struct_member($19.1, current_token)
  .loc 6 72 21
  mov r15, [rbx+32]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] $20.1:r15 
  # call(abort_239, self.1, $20.1)
  .loc 6 72 9
  mov rdi, rax
  mov rsi, r15
  call abort_239
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] 
.LABEL__parse_201__7:
  # store_struct_member(self.1, scanner, other_scanner.1)
  .loc 6 75 5
  mov rax, [rbp-8]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+0], rbx
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:rbx:[rbp-40] 
  # return()
  jmp .LABEL__parse_201__end
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] other_scanner.1:[rbp-40] 
  # [discarded value]: other_scanner.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: file_path.1
  # [discarded value]: location.1
  # [discarded value]: source.1
  # [live values]: 
.LABEL__parse_201__end:
  mov rsp, rbp
  pop rbp
  ret

parse_201__stack_frame_size: .word 48

  .loc 6 80 1
  .text
parse_statements_202:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statements_202__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statements_202__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # statements.1: @List = load_variable(statements)
  # [live values]: self.1:rdi statements.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__parse_statements_202__2:
  # statement.1: @AST_Statement = call(parse_statement_204, self.1)
  .loc 6 82 22
  mov rdi, [rbp-16]
  call parse_statement_204
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax 
  # $2.1: Boolean = statement.1 == null
  .loc 6 83 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax $2.1:rbx 
  # jump($2.1, block.3, block.5)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__parse_statements_202__5
.LABEL__parse_statements_202__3:
  # return()
  jmp .LABEL__parse_statements_202__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
.LABEL__parse_statements_202__5:
  # call(consume_end_of_line_228, self.1)
  .loc 6 86 9
  mov rdi, [rbp-16]
  call consume_end_of_line_228
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # AST_Include_Statement.2: @Object_Type = load_variable(AST_Include_Statement)
  lea rax, AST_Include_Statement[rip]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] AST_Include_Statement.2:rax 
  # $3.1: Boolean = call(is_293, statement.1, AST_Include_Statement.2)
  .loc 6 87 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Include_Statement.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_statements_202__9
.LABEL__parse_statements_202__7:
  # statement.1: @AST_Include_Statement = statement.1
  .loc 6 88 26
  mov rax, [rbp-24]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax 
  # $5.1: @String = load_struct_member(statement.1, file_path)
  .loc 6 90 36
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax $5.1:rbx 
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 6 90 75
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax $5.1:rbx $6.1:r15 
  # $7.1: @Source = load_struct_member($6.1, source)
  .loc 6 90 75
  mov r14, [r15+0]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax $5.1:rbx $7.1:r14 
  # $8.1: @String = load_struct_member($7.1, file_path)
  .loc 6 90 75
  mov r15, [r14+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax $5.1:rbx $8.1:r15 
  # statement_file_path.1: @String = call(make_relative_path_203, $5.1, $8.1)
  .loc 6 90 36
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call make_relative_path_203
  # [discarded value]: $5.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:rax 
  # $10.1: Boolean = statement_file_path.1 == null
  .loc 6 91 17
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:rax $10.1:rbx 
  # jump($10.1, block.10, block.11)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__parse_statements_202__11
.LABEL__parse_statements_202__10:
  # $11.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 6 92 23
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax:[rbp-32] statement_file_path.1:[rbp-40] $11.1:rbx 
  # $12.1: @String = call(clone_295, "Unsupported file path: ")
  .loc 6 92 43
  lea rdi, .LABEL__string_284[rip] # "Unsupported file path: "
  mov [rbp-48], rbx
  call clone_295
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] $11.1:[rbp-48] $12.1:rax 
  # $13.1: @String = load_struct_member(statement.1, file_path)
  .loc 6 92 83
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rbx:[rbp-32] statement_file_path.1:[rbp-40] $11.1:[rbp-48] $12.1:rax $13.1:r15 
  # $14.1: @String = call(append_304, $12.1, $13.1)
  .loc 6 92 43
  mov rdi, rax
  mov rsi, r15
  call append_304
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] $11.1:[rbp-48] $14.1:rax 
  # call(abort_264, $11.1, $14.1)
  .loc 6 92 17
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_264
  # [discarded value]: $11.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] 
.LABEL__parse_statements_202__11:
  # $15.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 95 46
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] $15.1:rbx 
  # $16.1: @List = load_struct_member($15.1, sources)
  .loc 6 95 46
  mov r15, [rbx+0]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] $16.1:r15 
  # compilation_unit_sources_item.1: @List_Item = load_struct_member($16.1, first_item)
  .loc 6 95 46
  mov rbx, [r15+0]
  # [discarded value]: $16.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:rbx 
  # jump(block.12)
  mov [rbp-48], rbx
.LABEL__parse_statements_202__12:
  # compilation_unit_sources_item.2: @List_Item = phi(compilation_unit_sources_item.1, compilation_unit_sources_item.5)
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
  # $18.1: Boolean = compilation_unit_sources_item.2 != null
  .loc 6 96 20
  cmp QWORD PTR [rbp-48], 0
  setne al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] $18.1:rax 
  # jump($18.1, block.13, block.14)
  test al, al
  jz .LABEL__parse_statements_202__14
.LABEL__parse_statements_202__13:
  # $20.1: @Source = load_struct_member(compilation_unit_sources_item.2, data)
  .loc 6 97 22
  mov rax, [rbp-48]
  mov rbx, [rax+16]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:rax:[rbp-48] $20.1:rbx 
  # $21.1: @String = load_struct_member($20.1, file_path)
  .loc 6 97 21
  mov r15, [rbx+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:rax:[rbp-48] $21.1:r15 
  # $22.1: Boolean = call(equals_296, $21.1, statement_file_path.1)
  .loc 6 97 21
  mov rdi, r15
  mov rsi, [rbp-40]
  call equals_296
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] $22.1:rax 
  # jump($22.1, block.14, block.16)
  test al, al
  jz .LABEL__parse_statements_202__16
.LABEL__parse_statements_202__14:
  # $24.1: Boolean = compilation_unit_sources_item.2 == null
  .loc 6 103 17
  cmp QWORD PTR [rbp-48], 0
  sete al
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] $24.1:rax 
  # jump($24.1, block.18, block.2)
  test al, al
  jz .LABEL__parse_statements_202__2
.LABEL__parse_statements_202__18:
  # $25.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 6 104 49
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] $25.1:rbx 
  # call(parse_201, self.1, statement_file_path.1, $25.1)
  .loc 6 104 17
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  mov rdx, rbx
  call parse_201
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
  # jump(block.2)
  jmp .LABEL__parse_statements_202__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
.LABEL__parse_statements_202__16:
  # compilation_unit_sources_item.5: @List_Item = load_struct_member(compilation_unit_sources_item.2, next_item)
  .loc 6 100 49
  mov rax, [rbp-48]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] compilation_unit_sources_item.5:rbx:[rbp-48] 
  # jump(block.12)
  mov [rbp-48], rbx
  jmp .LABEL__parse_statements_202__12
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] compilation_unit_sources_item.5:[rbp-48] 
  # [discarded value]: compilation_unit_sources_item.5
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] compilation_unit_sources_item.2:[rbp-48] 
  # [discarded value]: compilation_unit_sources_item.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] compilation_unit_sources_item.1:[rbp-48] 
  # [discarded value]: compilation_unit_sources_item.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:[rbp-32] statement_file_path.1:[rbp-40] 
  # [discarded value]: statement.1
  # [discarded value]: statement_file_path.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
.LABEL__parse_statements_202__9:
  # call(append_268, statements.1, statement.1)
  .loc 6 107 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call append_268
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # jump(block.2)
  jmp .LABEL__parse_statements_202__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statements.1
  # [live values]: 
.LABEL__parse_statements_202__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statements_202__stack_frame_size: .word 48

  .loc 6 112 1
  .text
make_relative_path_203:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR make_relative_path_203__stack_frame_size[rip]
  sub rsp, rax
.LABEL__make_relative_path_203__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # base_file_path.1: @String = load_variable(base_file_path)
  # [live values]: file_path.1:rdi base_file_path.1:rsi 
  # $1.1: Boolean = call(starts_with_298, file_path.1, "./")
  .loc 6 113 9
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_285[rip] # "./"
  mov [rbp-16], rdi
  call starts_with_298
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__make_relative_path_203__3
.LABEL__make_relative_path_203__2:
  # $2.1: @String = call(clone_295, base_file_path.1)
  .loc 6 114 26
  mov rdi, [rbp-8]
  call clone_295
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $2.1:rax 
  # $3.1: @String = call(append_304, $2.1, file_path.1)
  .loc 6 114 26
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_304
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $3.1:rax 
  # $4.1: Int = call(last_index_of_300, base_file_path.1, '/')
  .loc 6 114 73
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-24], rax
  call last_index_of_300
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $3.1:[rbp-24] $4.1:rax 
  # $5.1: Int = $4.1 + 1
  .loc 6 114 73
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $3.1:[rbp-24] $5.1:rbx 
  # $6.1: Int = load_struct_member(base_file_path.1, length)
  .loc 6 114 112
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $3.1:[rbp-24] $5.1:rbx $6.1:r15 
  # $7.1: Int = $6.1 + 2
  .loc 6 114 112
  mov r14, r15
  add r14, 2
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $3.1:[rbp-24] $5.1:rbx $7.1:r14 
  # relative_path.1: @String = call(remove_305, $3.1, $5.1, $7.1)
  .loc 6 114 26
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov rdx, r14
  call remove_305
  # [discarded value]: $3.1
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:rax 
  # return(relative_path.1)
  .loc 6 115 9
  jmp .LABEL__make_relative_path_203__end
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
.LABEL__make_relative_path_203__3:
  # $9.1: Boolean = call(starts_with_298, file_path.1, "../")
  .loc 6 117 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_286[rip] # "../"
  call starts_with_298
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__make_relative_path_203__6
.LABEL__make_relative_path_203__5:
  # $10.1: @String = call(clone_295, base_file_path.1)
  .loc 6 118 26
  mov rdi, [rbp-8]
  call clone_295
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $10.1:rax 
  # $11.1: @String = call(append_304, $10.1, file_path.1)
  .loc 6 118 26
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_304
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $11.1:rax 
  # $12.1: Int = call(last_index_of_300, base_file_path.1, '/')
  .loc 6 118 73
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-24], rax
  call last_index_of_300
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $11.1:[rbp-24] $12.1:rax 
  # $13.1: Int = $12.1 + 1
  .loc 6 118 73
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $11.1:[rbp-24] $13.1:rbx 
  # $14.1: Int = load_struct_member(base_file_path.1, length)
  .loc 6 118 112
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $11.1:[rbp-24] $13.1:rbx $14.1:r15 
  # relative_path.1: @String = call(remove_305, $11.1, $13.1, $14.1)
  .loc 6 118 26
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov rdx, r15
  call remove_305
  # [discarded value]: $11.1
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:rax 
  # jump(block.7)
  mov [rbp-24], rax
.LABEL__make_relative_path_203__7:
  # index.1: Int = call(index_of_297, relative_path.1, "/../")
  .loc 6 120 22
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_287[rip] # "/../"
  call index_of_297
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:rax 
  # $17.1: Boolean = index.1 <= 0
  .loc 6 121 17
  cmp rax, 0
  setle bl
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:rax $17.1:rbx 
  # jump($17.1, block.8, block.10)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__make_relative_path_203__10
.LABEL__make_relative_path_203__8:
  # return(relative_path.1)
  .loc 6 126 9
  mov rax, [rbp-24]
  jmp .LABEL__make_relative_path_203__end
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] 
.LABEL__make_relative_path_203__10:
  # $18.1: Int = index.1 - 1
  .loc 6 124 67
  mov rax, [rbp-32]
  dec rax
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] $18.1:rax 
  # $19.1: Int = call(last_index_of_301, relative_path.1, '/', $18.1)
  .loc 6 124 34
  mov rdi, [rbp-24]
  mov sil, 47
  mov rdx, rax
  call last_index_of_301
  # [discarded value]: $18.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] $19.1:rax 
  # $20.1: Int = index.1 + 3
  .loc 6 124 79
  mov rbx, [rbp-32]
  add rbx, 3
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] $19.1:rax $20.1:rbx 
  # $21.1: @String = call(remove_305, relative_path.1, $19.1, $20.1)
  .loc 6 124 13
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, rbx
  call remove_305
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] 
  # jump(block.7)
  jmp .LABEL__make_relative_path_203__7
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] 
  # [discarded value]: index.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] 
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
.LABEL__make_relative_path_203__6:
  # return(file_path.1)
  .loc 6 128 5
  mov rax, [rbp-16]
  jmp .LABEL__make_relative_path_203__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [discarded value]: file_path.1
  # [discarded value]: base_file_path.1
  # [live values]: 
.LABEL__make_relative_path_203__end:
  mov rsp, rbp
  pop rbp
  ret

make_relative_path_203__stack_frame_size: .word 32

  .loc 6 138 1
  .text
parse_statement_204:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statement_204__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statement_204__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(block.2)
  mov [rbp-8], rdi
.LABEL__parse_statement_204__2:
  # $1.1: Boolean = call(consume_empty_line_229, self.1)
  .loc 6 139 12
  mov rdi, [rbp-8]
  call consume_empty_line_229
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.4)
  test al, al
  jnz .LABEL__parse_statement_204__2
.LABEL__parse_statement_204__4:
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 142 22
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-8] $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_close_brace)
  .loc 6 142 43
  mov r15, [rax+80]
  # [live values]: self.1:rax:[rbp-8] $2.1:rbx $3.1:r15 
  # $5.1: Boolean = call(matches_236, self.1, $2.1, $3.1)
  .loc 6 142 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.6, block.5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_statement_204__5
.LABEL__parse_statement_204__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 6 142 9
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $5.3:[rbp-9] 
  # jump($5.3, block.7, block.8)
  mov al, [rbp-9]
  test al, al
  jz .LABEL__parse_statement_204__8
.LABEL__parse_statement_204__7:
  # return(null)
  .loc 6 143 9
  xor rax, rax
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__8:
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 146 24
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $8.1:rbx 
  # $9.1: Int = $8.1 * 4
  .loc 6 146 24
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $9.1:r15 
  # call(consume_space_230, self.1, $9.1)
  .loc 6 146 5
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # $10.1: @Matcher = load_struct_member(self.1, required_if)
  .loc 6 148 22
  mov rax, [rbp-8]
  mov rbx, [rax+216]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $10.1:rbx 
  # $11.1: Boolean = call(matches_235, self.1, $10.1)
  .loc 6 148 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $11.1:rax 
  # jump($11.1, block.10, block.11)
  test al, al
  jz .LABEL__parse_statement_204__11
.LABEL__parse_statement_204__10:
  # $12.1: @AST_Statement = call(parse_if_211, self.1)
  .loc 6 149 16
  mov rdi, [rbp-8]
  call parse_if_211
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $12.1:rax 
  # return($12.1)
  .loc 6 149 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__11:
  # $13.1: @Matcher = load_struct_member(self.1, required_return)
  .loc 6 151 22
  mov rax, [rbp-8]
  mov rbx, [rax+296]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $13.1:rbx 
  # $14.1: Boolean = call(matches_235, self.1, $13.1)
  .loc 6 151 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $14.1:rax 
  # jump($14.1, block.13, block.14)
  test al, al
  jz .LABEL__parse_statement_204__14
.LABEL__parse_statement_204__13:
  # $15.1: @Matcher = load_struct_member(self.1, required_return)
  .loc 6 152 31
  mov rax, [rbp-8]
  mov rbx, [rax+296]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $15.1:rbx 
  # token.1: @Token = call(consume_231, self.1, $15.1)
  .loc 6 152 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax 
  # value_expression.1: @AST_Expression = null
  .loc 6 153 9
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax value_expression.1:rbx 
  # $17.1: Boolean = call(matches_end_of_line_234, self.1)
  .loc 6 154 13
  mov rdi, [rbp-8]
  mov [rbp-17], rax
  mov [rbp-25], rbx
  call matches_end_of_line_234
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] $17.1:rax 
  # $18.1: Boolean = $17.1 == false
  .loc 6 154 13
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] $18.1:rbx 
  # jump($18.1, block.15, block.16)
  test bl, bl
  jz .LABEL__parse_statement_204__16
.LABEL__parse_statement_204__15:
  # call(consume_space_230, self.1, 1)
  .loc 6 155 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] 
  # value_expression.2: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 156 32
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:rax:[rbp-25] 
  # jump(block.16)
  mov [rbp-25], rax
.LABEL__parse_statement_204__16:
  # value_expression.3: @AST_Expression = phi(value_expression.1, value_expression.2)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] value_expression.3:[rbp-25] 
  # $20.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 158 52
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] value_expression.3:[rbp-25] $20.1:rbx 
  # $21.1: @AST_Return_Statement = new(AST_Return_Statement)
  .loc 6 158 16
  mov [rbp-33], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Return_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] value_expression.3:[rbp-25] $20.1:[rbp-33] $21.1:rax 
  # store_struct_member($21.1, location, $20.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] value_expression.3:[rbp-25] $21.1:rax 
  # store_struct_member($21.1, value_expression, value_expression.3)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: value_expression.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] $21.1:rax 
  # return($21.1)
  .loc 6 158 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] 
  # [discarded value]: value_expression.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] 
  # [discarded value]: token.1
  # [discarded value]: value_expression.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__14:
  # $22.1: @Matcher = load_struct_member(self.1, required_loop)
  .loc 6 160 22
  mov rax, [rbp-8]
  mov rbx, [rax+248]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $22.1:rbx 
  # $23.1: Boolean = call(matches_235, self.1, $22.1)
  .loc 6 160 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $23.1:rax 
  # jump($23.1, block.18, block.19)
  test al, al
  jz .LABEL__parse_statement_204__19
.LABEL__parse_statement_204__18:
  # $24.1: @AST_Statement = call(parse_loop_212, self.1)
  .loc 6 161 16
  mov rdi, [rbp-8]
  call parse_loop_212
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $24.1:rax 
  # return($24.1)
  .loc 6 161 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__19:
  # $25.1: @Matcher = load_struct_member(self.1, required_while)
  .loc 6 163 22
  mov rax, [rbp-8]
  mov rbx, [rax+336]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $25.1:rbx 
  # $26.1: Boolean = call(matches_235, self.1, $25.1)
  .loc 6 163 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $26.1:rax 
  # jump($26.1, block.21, block.22)
  test al, al
  jz .LABEL__parse_statement_204__22
.LABEL__parse_statement_204__21:
  # $27.1: @AST_Statement = call(parse_while_213, self.1)
  .loc 6 164 16
  mov rdi, [rbp-8]
  call parse_while_213
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $27.1:rax 
  # return($27.1)
  .loc 6 164 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__22:
  # $28.1: @Matcher = load_struct_member(self.1, required_break)
  .loc 6 166 22
  mov rax, [rbp-8]
  mov rbx, [rax+72]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $28.1:rbx 
  # $29.1: Boolean = call(matches_235, self.1, $28.1)
  .loc 6 166 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $29.1:rax 
  # jump($29.1, block.24, block.25)
  test al, al
  jz .LABEL__parse_statement_204__25
.LABEL__parse_statement_204__24:
  # $30.1: @Matcher = load_struct_member(self.1, required_break)
  .loc 6 167 31
  mov rax, [rbp-8]
  mov rbx, [rax+72]
  # [discarded value]: $29.1
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $30.1:rbx 
  # token.1: @Token = call(consume_231, self.1, $30.1)
  .loc 6 167 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax 
  # $32.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 168 51
  mov rbx, [rax+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $32.1:rbx 
  # $33.1: @AST_Break_Statement = new(AST_Break_Statement)
  .loc 6 168 16
  mov [rbp-17], rbx
  mov rdi, 16
  call malloc
  lea rbx, AST_Break_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $32.1:[rbp-17] $33.1:rax 
  # store_struct_member($33.1, location, $32.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $33.1:rax 
  # return($33.1)
  .loc 6 168 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__25:
  # $34.1: @Matcher = load_struct_member(self.1, required_include)
  .loc 6 170 22
  mov rax, [rbp-8]
  mov rbx, [rax+224]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $34.1:rbx 
  # $35.1: Boolean = call(matches_235, self.1, $34.1)
  .loc 6 170 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $35.1:rax 
  # jump($35.1, block.27, block.28)
  test al, al
  jz .LABEL__parse_statement_204__28
.LABEL__parse_statement_204__27:
  # $36.1: @AST_Include_Statement = call(parse_include_205, self.1)
  .loc 6 171 16
  mov rdi, [rbp-8]
  call parse_include_205
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $36.1:rax 
  # return($36.1)
  .loc 6 171 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__28:
  # expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 174 19
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax 
  # $38.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 176 22
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $5.1:[rbp-9] expression.1:rax $38.1:r15 
  # $39.1: @Matcher = load_struct_member(self.1, optional_comment)
  .loc 6 176 43
  mov r14, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] $5.1:[rbp-9] expression.1:rax $38.1:r15 $39.1:r14 
  # $40.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 6 176 66
  mov r13, [rbx+160]
  # [live values]: self.1:rbx:[rbp-8] $5.1:[rbp-9] expression.1:rax $38.1:r15 $39.1:r14 $40.1:r13 
  # $41.1: Boolean = call(matches_237, self.1, $38.1, $39.1, $40.1)
  .loc 6 176 9
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov rcx, r13
  mov [rbp-17], rax
  call matches_237
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $41.1:rax 
  # jump($41.1, block.30, block.31)
  test al, al
  jz .LABEL__parse_statement_204__31
.LABEL__parse_statement_204__30:
  # $42.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 177 56
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax:[rbp-17] $42.1:rbx 
  # $43.1: @AST_Expression_Statement = new(AST_Expression_Statement)
  .loc 6 177 16
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Expression_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $42.1:[rbp-25] $43.1:rax 
  # store_struct_member($43.1, location, $42.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $43.1:rax 
  # store_struct_member($43.1, expression, expression.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rbx:[rbp-17] $43.1:rax 
  # return($43.1)
  .loc 6 177 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_204__31:
  # $44.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 180 22
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $44.1:rbx 
  # $45.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 180 43
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $44.1:rbx $45.1:r15 
  # $46.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 180 64
  mov r14, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $44.1:rbx $45.1:r15 $46.1:r14 
  # $47.1: Boolean = call(matches_237, self.1, $44.1, $45.1, $46.1)
  .loc 6 180 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_237
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $47.1:rax 
  # jump($47.1, block.33, block.34)
  test al, al
  jz .LABEL__parse_statement_204__34
.LABEL__parse_statement_204__33:
  # call(consume_space_230, self.1, 1)
  .loc 6 181 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # $48.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 182 22
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $48.1:rbx 
  # $49.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 182 43
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $48.1:rbx $49.1:r15 
  # $50.1: @Token = call(consume_232, self.1, $48.1, $49.1)
  .loc 6 182 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $48.1
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 183 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # $51.1: @Matcher = load_struct_member(self.1, required_struct)
  .loc 6 184 26
  mov rax, [rbp-8]
  mov rbx, [rax+320]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $51.1:rbx 
  # $52.1: Boolean = call(matches_235, self.1, $51.1)
  .loc 6 184 13
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $52.1:rax 
  # jump($52.1, block.35, block.36)
  test al, al
  jz .LABEL__parse_statement_204__36
.LABEL__parse_statement_204__35:
  # $53.1: @AST_Statement = call(parse_struct_206, self.1, expression.1)
  .loc 6 185 20
  mov rdi, [rbp-8]
  mov rsi, [rbp-17]
  call parse_struct_206
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $53.1:rax 
  # return($53.1)
  .loc 6 185 13
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_204__36:
  # $54.1: @AST_Statement = call(parse_function_207, self.1, expression.1)
  .loc 6 187 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-17]
  call parse_function_207
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $54.1:rax 
  # return($54.1)
  .loc 6 187 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_204__34:
  # $55.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 190 22
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $55.1:rbx 
  # $56.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 190 43
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $55.1:rbx $56.1:r15 
  # $57.1: Boolean = call(matches_236, self.1, $55.1, $56.1)
  .loc 6 190 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $55.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $57.1:rax 
  # jump($57.1, block.39, block.40)
  test al, al
  jz .LABEL__parse_statement_204__40
.LABEL__parse_statement_204__39:
  # AST_Variable_Expression.7: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] AST_Variable_Expression.7:rax 
  # $58.1: Boolean = call(is_293, expression.1, AST_Variable_Expression.7)
  .loc 6 191 13
  mov rdi, [rbp-17]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.7
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $58.1:rax 
  # jump($58.1, block.41, block.42)
  test al, al
  jz .LABEL__parse_statement_204__42
.LABEL__parse_statement_204__41:
  # expression.1: @AST_Variable_Expression = expression.1
  .loc 6 192 27
  mov rax, [rbp-17]
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] expression.1:rax 
  # variable_name.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 6 193 30
  mov rbx, [rax+16]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx 
  # variable_value_type.1: @AST_Type = null
  .loc 6 194 13
  xor rax, rax
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax 
  # variable_value_expression.1: @AST_Expression = null
  .loc 6 195 13
  xor r15, r15
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 
  # variable_is_external.1: Boolean = false
  .loc 6 196 13
  mov r14b, 0
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 
  # $61.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 197 30
  mov r13, [rbp-8]
  mov r12, [r13+32]
  # [live values]: self.1:r13:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 
  # $62.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 197 51
  mov r11, [r13+104]
  # [live values]: self.1:r13:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 $62.1:r11 
  # $63.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 197 72
  mov r10, [r13+168]
  # [live values]: self.1:r13:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 $62.1:r11 $63.1:r10 
  # $64.1: Boolean = call(matches_237, self.1, $61.1, $62.1, $63.1)
  .loc 6 197 17
  mov rdi, r13
  mov rsi, r12
  mov rdx, r11
  mov rcx, r10
  mov [rbp-25], rax
  mov [rbp-33], rbx
  mov [rbp-34], r14b
  mov [rbp-42], r15
  call matches_237
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $64.1:rax 
  # jump($64.1, block.43, block.45)
  test al, al
  jz .LABEL__parse_statement_204__45
.LABEL__parse_statement_204__43:
  # call(consume_space_230, self.1, 1)
  .loc 6 198 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # $78.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 199 30
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $78.1:rbx 
  # $79.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 199 51
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $78.1:rbx $79.1:r15 
  # $80.1: @Token = call(consume_232, self.1, $78.1, $79.1)
  .loc 6 199 17
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $78.1
  # [discarded value]: $79.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # call(consume_space_230, self.1, 1)
  .loc 6 200 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # variable_value_expression.3: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 201 45
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:rax:[rbp-42] 
  # jump(block.44)
  mov [rbp-42], rax
.LABEL__parse_statement_204__44:
  # variable_is_external.3: Boolean = phi(variable_is_external.2, variable_is_external.1)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] 
  # variable_value_expression.4: @AST_Expression = phi(variable_value_expression.3, variable_value_expression.1, variable_value_expression.2)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] 
  # variable_value_type.3: @AST_Type = phi(variable_value_type.1, variable_value_type.2)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] variable_value_type.3:[rbp-25] 
  # $82.1: @Source_Location = load_struct_member(variable_name.1, location)
  .loc 6 219 73
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rax:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] variable_value_type.3:[rbp-25] $82.1:rbx 
  # $83.1: @AST_Variable_Statement = new(AST_Variable_Statement)
  .loc 6 219 35
  mov [rbp-50], rbx
  mov rdi, 41
  call malloc
  lea rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] variable_value_type.3:[rbp-25] $82.1:[rbp-50] $83.1:rax 
  # store_struct_member($83.1, location, $82.1)
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] variable_value_type.3:[rbp-25] $83.1:rax 
  # store_struct_member($83.1, name, variable_name.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] variable_value_type.3:[rbp-25] $83.1:rax 
  # store_struct_member($83.1, type, variable_value_type.3)
  mov r15, [rbp-25]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: variable_value_type.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] $83.1:rax 
  # store_struct_member($83.1, value_expression, variable_value_expression.4)
  mov r15, [rbp-42]
  mov QWORD PTR [rax+32], r15
  # [discarded value]: variable_value_expression.4
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] $83.1:rax 
  # store_struct_member($83.1, is_external, variable_is_external.3)
  mov r15b, [rbp-34]
  mov BYTE PTR [rax+40], r15b
  # [discarded value]: variable_is_external.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] $83.1:rax 
  # variable_statement.1: @AST_Variable_Statement = $83.1
  .loc 6 219 13
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:rax 
  # $84.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 220 17
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:r15:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:rax $84.1:r14 
  # $85.1: Boolean = $84.1 == 0
  .loc 6 220 17
  cmp r14, 0
  sete r13b
  # [discarded value]: $84.1
  # [live values]: self.1:r15:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:rax $85.1:r13 
  # jump($85.1, block.51, block.52)
  test r13b, r13b
  mov [rbp-50], rax
  jz .LABEL__parse_statement_204__52
.LABEL__parse_statement_204__51:
  # $86.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 221 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $85.1
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] $86.1:rbx 
  # $87.1: @List = load_struct_member($86.1, global_variables)
  .loc 6 221 17
  mov r15, [rbx+16]
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] $87.1:r15 
  # call(append_268, $87.1, variable_statement.1)
  .loc 6 221 17
  mov rdi, r15
  mov rsi, [rbp-50]
  call append_268
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # jump(block.52)
.LABEL__parse_statement_204__52:
  # return(variable_statement.1)
  .loc 6 223 13
  mov rax, [rbp-50]
  jmp .LABEL__parse_statement_204__end
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] 
  # [discarded value]: variable_value_expression.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
.LABEL__parse_statement_204__45:
  # call(consume_space_230, self.1, 0)
  .loc 6 203 17
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # $65.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 204 30
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $65.1:rbx 
  # $66.1: @Token = call(consume_231, self.1, $65.1)
  .loc 6 204 17
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # call(consume_space_230, self.1, 1)
  .loc 6 205 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # variable_value_type.2: @AST_Type = call(parse_type_214, self.1)
  .loc 6 206 39
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:rax:[rbp-25] 
  # $68.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 207 34
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:rax:[rbp-25] $68.1:r15 
  # $69.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 207 55
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:rax:[rbp-25] $68.1:r15 $69.1:r14 
  # $70.1: Boolean = call(matches_236, self.1, $68.1, $69.1)
  .loc 6 207 21
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-25], rax
  call matches_236
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $70.1:rax 
  # jump($70.1, block.46, block.44)
  test al, al
  jz .LABEL__parse_statement_204__44
.LABEL__parse_statement_204__46:
  # call(consume_space_230, self.1, 1)
  .loc 6 208 21
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # $71.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 209 34
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $71.1:rbx 
  # $72.1: @Token = call(consume_231, self.1, $71.1)
  .loc 6 209 21
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $71.1
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # call(consume_space_230, self.1, 1)
  .loc 6 210 21
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # $73.1: @Matcher = load_struct_member(self.1, required_external)
  .loc 6 211 38
  mov rax, [rbp-8]
  mov rbx, [rax+184]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $73.1:rbx 
  # $74.1: Boolean = call(matches_235, self.1, $73.1)
  .loc 6 211 25
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $74.1:rax 
  # jump($74.1, block.48, block.50)
  test al, al
  jz .LABEL__parse_statement_204__50
.LABEL__parse_statement_204__48:
  # $76.1: @Matcher = load_struct_member(self.1, required_external)
  .loc 6 212 38
  mov rax, [rbp-8]
  mov rbx, [rax+184]
  # [discarded value]: $74.1
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $76.1:rbx 
  # $77.1: @Token = call(consume_231, self.1, $76.1)
  .loc 6 212 25
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $76.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # variable_is_external.2: Boolean = true
  .loc 6 213 25
  mov al, 1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_is_external.2:rax:[rbp-34] 
  # jump(block.44)
  mov [rbp-34], al
  jmp .LABEL__parse_statement_204__44
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_is_external.2:[rbp-34] 
  # [discarded value]: variable_is_external.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
.LABEL__parse_statement_204__50:
  # variable_value_expression.2: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 215 53
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_value_expression.2:rax:[rbp-42] 
  # jump(block.44)
  mov [rbp-42], rax
  jmp .LABEL__parse_statement_204__44
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_value_expression.2:[rbp-42] 
  # [discarded value]: variable_value_expression.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # [discarded value]: variable_value_type.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # [discarded value]: variable_name.1
  # [discarded value]: variable_value_type.1
  # [discarded value]: variable_value_expression.1
  # [discarded value]: variable_is_external.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_204__42:
  # $88.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 225 15
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax:[rbp-17] $88.1:rbx 
  # call(abort_264, $88.1, "Cannot use expression as variable name")
  .loc 6 225 9
  mov rdi, rbx
  lea rsi, .LABEL__string_288[rip] # "Cannot use expression as variable name"
  call abort_264
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_204__40:
  # $89.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 228 22
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $89.1:rbx 
  # $90.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 228 43
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $89.1:rbx $90.1:r15 
  # $91.1: Boolean = call(matches_236, self.1, $89.1, $90.1)
  .loc 6 228 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $89.1
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $91.1:rax 
  # jump($91.1, block.54, block.55)
  test al, al
  jz .LABEL__parse_statement_204__55
.LABEL__parse_statement_204__54:
  # call(consume_space_230, self.1, 1)
  .loc 6 229 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # $92.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 230 34
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $92.1:rbx 
  # operator.1: @Other_Token = call(consume_231, self.1, $92.1)
  .loc 6 230 21
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:rax 
  # call(consume_space_230, self.1, 1)
  .loc 6 231 9
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-25], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:[rbp-25] 
  # $95.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 232 56
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax:[rbp-17] operator.1:[rbp-25] $95.1:rbx 
  # $96.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 232 150
  mov rdi, [rbp-8]
  mov [rbp-33], rbx
  call parse_expression_215
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:[rbp-25] $95.1:[rbp-33] $96.1:rax 
  # $97.1: @AST_Assignment_Statement = new(AST_Assignment_Statement)
  .loc 6 232 16
  mov [rbp-41], rax
  mov rdi, 40
  call malloc
  lea rbx, AST_Assignment_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:[rbp-25] $95.1:[rbp-33] $96.1:[rbp-41] $97.1:rax 
  # store_struct_member($97.1, location, $95.1)
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:[rbp-25] $96.1:[rbp-41] $97.1:rax 
  # store_struct_member($97.1, storage_expression, expression.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rbx:[rbp-17] operator.1:[rbp-25] $96.1:[rbp-41] $97.1:rax 
  # store_struct_member($97.1, operator, operator.1)
  mov r15, [rbp-25]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: operator.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rbx:[rbp-17] $96.1:[rbp-41] $97.1:rax 
  # store_struct_member($97.1, value_expression, $96.1)
  mov r15, [rbp-41]
  mov QWORD PTR [rax+32], r15
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rbx:[rbp-17] $97.1:rax 
  # return($97.1)
  .loc 6 232 9
  jmp .LABEL__parse_statement_204__end
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_204__55:
  # return(null)
  .loc 6 235 5
  xor rax, rax
  jmp .LABEL__parse_statement_204__end
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_204__5:
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_file)
  .loc 6 142 86
  mov rax, [rbp-8]
  mov rbx, [rax+152]
  # [live values]: self.1:rax:[rbp-8] $5.1:[rbp-9] $6.1:rbx 
  # $5.2: Boolean = call(matches_235, self.1, $6.1)
  .loc 6 142 73
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $5.2:rax:[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__parse_statement_204__6
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $5.2:[rbp-9] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statement_204__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statement_204__stack_frame_size: .word 64

  .loc 6 240 1
  .text
parse_include_205:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_include_205__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_include_205__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_include)
  .loc 6 241 30
  mov rax, [rdi+224]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = call(consume_231, self.1, $1.1)
  .loc 6 241 17
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # location.1: @Source_Location = load_struct_member($2.1, location)
  .loc 6 241 17
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 1)
  .loc 6 242 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # $4.1: @Matcher = load_struct_member(self.1, required_string_literal)
  .loc 6 243 32
  mov rax, [rbp-8]
  mov rbx, [rax+312]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  # $6.1: @String_Token = call(consume_231, self.1, $4.1)
  .loc 6 243 19
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: location.1:[rbp-16] $6.1:rax 
  # file_path.1: @String = load_struct_member($6.1, value)
  .loc 6 243 18
  mov rbx, [rax+32]
  # [discarded value]: $6.1
  # [live values]: location.1:[rbp-16] file_path.1:rbx 
  # $8.1: @AST_Include_Statement = new(AST_Include_Statement)
  .loc 6 244 12
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Include_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] file_path.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: file_path.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, file_path, file_path.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: file_path.1
  # [live values]: $8.1:rax 
  # return($8.1)
  .loc 6 244 5
  jmp .LABEL__parse_include_205__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_include_205__end:
  mov rsp, rbp
  pop rbp
  ret

parse_include_205__stack_frame_size: .word 32

  .loc 6 249 1
  .text
parse_struct_206:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_struct_206__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_struct_206__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  # AST_Variable_Expression.8: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:rdi name_expression.1:rsi AST_Variable_Expression.8:rax 
  # $1.1: Boolean = call(is_293, name_expression.1, AST_Variable_Expression.8)
  .loc 6 250 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.8
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  # $2.1: Boolean = $1.1 == false
  .loc 6 250 9
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  jz .LABEL__parse_struct_206__3
.LABEL__parse_struct_206__2:
  # $3.1: @Source_Location = load_struct_member(name_expression.1, location)
  .loc 6 251 15
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:rax:[rbp-16] $3.1:rbx 
  # call(abort_264, $3.1, "Cannot use expression as struct name")
  .loc 6 251 9
  mov rdi, rbx
  lea rsi, .LABEL__string_289[rip] # "Cannot use expression as struct name"
  call abort_264
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
.LABEL__parse_struct_206__3:
  # $4.1: @AST_Variable_Expression = name_expression.1
  .loc 6 253 21
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $4.1:rax 
  # struct_name.1: @Identifier_Token = load_struct_member($4.1, name)
  .loc 6 253 20
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx 
  # $6.1: @List = new(List)
  .loc 6 254 30
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $6.1:rax 
  # struct_init_arguments.1: @List = $6.1
  .loc 6 254 5
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_struct)
  .loc 6 255 18
  mov rbx, [rbp-8]
  mov r15, [rbx+320]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:rax $7.1:r15 
  # $8.1: @Token = call(consume_231, self.1, $7.1)
  .loc 6 255 5
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call consume_231
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] 
  # base_type.1: @AST_Type = null
  .loc 6 256 5
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:rax 
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 257 22
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:rax $9.1:r15 
  # $10.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 257 43
  mov r14, [rbx+104]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:rax $9.1:r15 $10.1:r14 
  # $11.1: Boolean = call(matches_236, self.1, $9.1, $10.1)
  .loc 6 257 9
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-40], rax
  call matches_236
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] $11.1:rax 
  # jump($11.1, block.4, block.5)
  test al, al
  jz .LABEL__parse_struct_206__5
.LABEL__parse_struct_206__4:
  # call(consume_space_230, self.1, 1)
  .loc 6 258 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] 
  # $12.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 259 22
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] $12.1:rbx 
  # $13.1: @Token = call(consume_231, self.1, $12.1)
  .loc 6 259 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] 
  # call(consume_space_230, self.1, 1)
  .loc 6 260 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] 
  # base_type.2: @AST_Type = call(parse_type_214, self.1)
  .loc 6 261 21
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:rax:[rbp-40] 
  # $15.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 262 26
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:rax:[rbp-40] $15.1:r15 
  # $16.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 262 47
  mov r14, [rbx+280]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:rax:[rbp-40] $15.1:r15 $16.1:r14 
  # $17.1: Boolean = call(matches_236, self.1, $15.1, $16.1)
  .loc 6 262 13
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-40], rax
  call matches_236
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] $17.1:rax 
  # jump($17.1, block.6, block.5)
  test al, al
  jz .LABEL__parse_struct_206__5
.LABEL__parse_struct_206__6:
  # call(consume_space_230, self.1, 0)
  .loc 6 263 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # $18.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 264 26
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] $18.1:rbx 
  # $19.1: @Token = call(consume_231, self.1, $18.1)
  .loc 6 264 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # call(parse_call_arguments_225, self.1, struct_init_arguments.1)
  .loc 6 265 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  call parse_call_arguments_225
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # call(consume_space_230, self.1, 0)
  .loc 6 266 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # $20.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 267 26
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] $20.1:rbx 
  # $21.1: @Token = call(consume_231, self.1, $20.1)
  .loc 6 267 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # jump(block.5)
.LABEL__parse_struct_206__5:
  # base_type.4: @AST_Type = phi(base_type.1, base_type.2)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] 
  # struct_members.1: @List = null
  .loc 6 270 5
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:rax 
  # $22.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 271 22
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:rax $22.1:r15 
  # $23.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 6 271 43
  mov r14, [rbx+264]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:rax $22.1:r15 $23.1:r14 
  # $24.1: Boolean = call(matches_236, self.1, $22.1, $23.1)
  .loc 6 271 9
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-48], rax
  call matches_236
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $24.1:rax 
  # jump($24.1, block.8, block.9)
  test al, al
  jz .LABEL__parse_struct_206__9
.LABEL__parse_struct_206__8:
  # call(consume_space_230, self.1, 1)
  .loc 6 272 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] 
  # $25.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 6 273 22
  mov rax, [rbp-8]
  mov rbx, [rax+264]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $25.1:rbx 
  # $26.1: @Token = call(consume_231, self.1, $25.1)
  .loc 6 273 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] 
  # call(consume_end_of_line_228, self.1)
  .loc 6 274 9
  mov rdi, [rbp-8]
  call consume_end_of_line_228
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] 
  # $27.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 275 34
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $27.1:rbx 
  # $28.1: Int = $27.1 + 1
  .loc 6 275 34
  mov r15, rbx
  add r15, 1
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $28.1:r15 
  # store_struct_member(self.1, current_alignment, $28.1)
  .loc 6 275 9
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] 
  # $29.1: @List = new(List)
  .loc 6 277 26
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $29.1:rax 
  # store_struct_member($29.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $29.1:rax 
  # store_struct_member($29.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $29.1:rax 
  # store_struct_member($29.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] $29.1:rax 
  # struct_members.2: @List = $29.1
  .loc 6 277 9
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:rax:[rbp-48] 
  # jump(block.10)
  mov [rbp-48], rax
.LABEL__parse_struct_206__10:
  # $30.1: Boolean = call(consume_empty_line_229, self.1)
  .loc 6 279 17
  mov rdi, [rbp-8]
  call consume_empty_line_229
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $30.1:rax 
  # $31.1: Boolean = $30.1 == false
  .loc 6 279 17
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $31.1:rbx 
  # jump($31.1, block.12, block.10)
  test bl, bl
  jz .LABEL__parse_struct_206__10
.LABEL__parse_struct_206__12:
  # $32.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 280 34
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $32.1:rbx 
  # $33.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 280 55
  mov r15, [rax+208]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $32.1:rbx $33.1:r15 
  # $34.1: Boolean = call(matches_236, self.1, $32.1, $33.1)
  .loc 6 280 21
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $34.1:rax 
  # jump($34.1, block.14, block.11)
  test al, al
  jz .LABEL__parse_struct_206__11
.LABEL__parse_struct_206__14:
  # $35.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 281 40
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $34.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $35.1:rbx 
  # $36.1: Int = $35.1 * 4
  .loc 6 281 40
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $36.1:r15 
  # call(consume_space_230, self.1, $36.1)
  .loc 6 281 21
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # $37.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 282 56
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $37.1:rbx 
  # struct_member_name.1: @Identifier_Token = call(consume_231, self.1, $37.1)
  .loc 6 282 43
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 283 21
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-56], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] 
  # $40.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 284 34
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] $40.1:rbx 
  # $41.1: @Token = call(consume_231, self.1, $40.1)
  .loc 6 284 21
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $40.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] 
  # call(consume_space_230, self.1, 1)
  .loc 6 285 21
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] 
  # struct_member_value_type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 286 49
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:rax 
  # $43.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 287 38
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:rax $43.1:r15 
  # $44.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 287 59
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:rax $43.1:r15 $44.1:r14 
  # $45.1: Boolean = call(matches_236, self.1, $43.1, $44.1)
  .loc 6 287 25
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-64], rax
  call matches_236
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] $45.1:rax 
  # jump($45.1, block.18, block.19)
  test al, al
  jz .LABEL__parse_struct_206__19
.LABEL__parse_struct_206__18:
  # call(consume_space_230, self.1, 1)
  .loc 6 288 25
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # $46.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 289 38
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] $46.1:rbx 
  # $47.1: @Token = call(consume_231, self.1, $46.1)
  .loc 6 289 25
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # call(consume_space_230, self.1, 1)
  .loc 6 290 25
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # value_expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 291 45
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] value_expression.1:rax 
  # $49.1: @AST_Call_Argument = new(AST_Call_Argument)
  .loc 6 292 54
  mov [rbp-72], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] value_expression.1:[rbp-72] $49.1:rax 
  # store_struct_member($49.1, name, struct_member_name.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+0], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:rbx:[rbp-56] struct_member_value_type.1:[rbp-64] value_expression.1:[rbp-72] $49.1:rax 
  # store_struct_member($49.1, value_expression, value_expression.1)
  mov r15, [rbp-72]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: value_expression.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:rbx:[rbp-56] struct_member_value_type.1:[rbp-64] $49.1:rax 
  # call(append_268, struct_init_arguments.1, $49.1)
  .loc 6 292 25
  mov rdi, [rbp-32]
  mov rsi, rax
  call append_268
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # jump(block.19)
.LABEL__parse_struct_206__19:
  # $50.1: @Source_Location = load_struct_member(struct_member_name.1, location)
  .loc 6 294 76
  mov rax, [rbp-56]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:rax:[rbp-56] struct_member_value_type.1:[rbp-64] $50.1:rbx 
  # $51.1: @AST_Struct_Member = new(AST_Struct_Member)
  .loc 6 294 43
  mov [rbp-72], rbx
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] $50.1:[rbp-72] $51.1:rax 
  # store_struct_member($51.1, location, $50.1)
  mov rbx, [rbp-72]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] $51.1:rax 
  # store_struct_member($51.1, name, struct_member_name.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:rbx:[rbp-56] struct_member_value_type.1:[rbp-64] $51.1:rax 
  # store_struct_member($51.1, type, struct_member_value_type.1)
  mov r15, [rbp-64]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:rbx:[rbp-56] struct_member_value_type.1:r15:[rbp-64] $51.1:rax 
  # call(append_268, struct_members.2, $51.1)
  .loc 6 294 21
  mov rdi, [rbp-48]
  mov rsi, rax
  call append_268
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # jump(block.10)
  jmp .LABEL__parse_struct_206__10
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_member_name.1:[rbp-56] struct_member_value_type.1:[rbp-64] 
  # [discarded value]: struct_member_name.1
  # [discarded value]: struct_member_value_type.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
.LABEL__parse_struct_206__11:
  # $52.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 301 34
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $52.1:rbx 
  # $53.1: Int = $52.1 - 1
  .loc 6 301 34
  mov r15, rbx
  dec r15
  # [discarded value]: $52.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $53.1:r15 
  # store_struct_member(self.1, current_alignment, $53.1)
  .loc 6 301 9
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # $54.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 302 28
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $54.1:rbx 
  # $55.1: Int = $54.1 * 4
  .loc 6 302 28
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $55.1:r15 
  # call(consume_space_230, self.1, $55.1)
  .loc 6 302 9
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # $56.1: @Matcher = load_struct_member(self.1, required_close_brace)
  .loc 6 303 22
  mov rax, [rbp-8]
  mov rbx, [rax+80]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $56.1:rbx 
  # $57.1: @Token = call(consume_231, self.1, $56.1)
  .loc 6 303 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # jump(block.9)
.LABEL__parse_struct_206__9:
  # struct_members.4: @List = phi(struct_members.1, struct_members.2)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_members.4:[rbp-48] 
  # $58.1: @Source_Location = load_struct_member(struct_name.1, location)
  .loc 6 305 61
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rax:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_members.4:[rbp-48] $58.1:rbx 
  # $59.1: @AST_Struct_Statement = new(AST_Struct_Statement)
  .loc 6 305 25
  mov [rbp-56], rbx
  mov rdi, 48
  call malloc
  lea rbx, AST_Struct_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_members.4:[rbp-48] $58.1:[rbp-56] $59.1:rax 
  # store_struct_member($59.1, location, $58.1)
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_members.4:[rbp-48] $59.1:rax 
  # store_struct_member($59.1, name, struct_name.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_members.4:[rbp-48] $59.1:rax 
  # store_struct_member($59.1, base_type, base_type.4)
  mov r15, [rbp-40]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:r15:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_members.4:[rbp-48] $59.1:rax 
  # store_struct_member($59.1, members, struct_members.4)
  mov r14, [rbp-48]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: struct_members.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:r15:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $59.1:rax 
  # store_struct_member($59.1, init_arguments, struct_init_arguments.1)
  mov r14, [rbp-32]
  mov QWORD PTR [rax+40], r14
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:r14:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:r15:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] $59.1:rax 
  # struct_statement.1: @AST_Struct_Statement = $59.1
  .loc 6 305 5
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:r14:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:r15:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_statement.1:rax 
  # $60.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 306 5
  mov r13, [rbp-8]
  mov r12, [r13+8]
  # [live values]: self.1:r13:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:r14:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:r15:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_statement.1:rax $60.1:r12 
  # $61.1: @List = load_struct_member($60.1, types)
  .loc 6 306 5
  mov r11, [r12+8]
  # [discarded value]: $60.1
  # [live values]: self.1:r13:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx:[rbp-24] struct_init_arguments.1:r14:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:r15:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_statement.1:rax $61.1:r11 
  # call(append_268, $61.1, struct_statement.1)
  .loc 6 306 5
  mov rdi, r11
  mov rsi, rax
  mov [rbp-56], rax
  call append_268
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] struct_statement.1:[rbp-56] 
  # return(struct_statement.1)
  .loc 6 307 5
  mov rax, [rbp-56]
  jmp .LABEL__parse_struct_206__end
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] struct_members.2:[rbp-48] 
  # [discarded value]: struct_members.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] base_type.4:[rbp-40] struct_members.1:[rbp-48] 
  # [discarded value]: base_type.4
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] base_type.2:[rbp-40] 
  # [discarded value]: base_type.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] struct_init_arguments.1:[rbp-32] base_type.1:[rbp-40] 
  # [discarded value]: struct_name.1
  # [discarded value]: struct_init_arguments.1
  # [discarded value]: base_type.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: name_expression.1
  # [live values]: 
.LABEL__parse_struct_206__end:
  mov rsp, rbp
  pop rbp
  ret

parse_struct_206__stack_frame_size: .word 80

  .loc 6 312 1
  .text
parse_function_207:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_207__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_207__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  # AST_Variable_Expression.9: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:rdi name_expression.1:rsi AST_Variable_Expression.9:rax 
  # $1.1: Boolean = call(is_293, name_expression.1, AST_Variable_Expression.9)
  .loc 6 313 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.9
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_function_207__3
.LABEL__parse_function_207__2:
  # $2.1: @AST_Variable_Expression = name_expression.1
  .loc 6 314 27
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:rax 
  # function_name.1: @Identifier_Token = load_struct_member($2.1, name)
  .loc 6 314 26
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx 
  # function_type.1: @AST_Function_Type = call(parse_function_type_208, self.1)
  .loc 6 315 26
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call parse_function_type_208
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:rax 
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 317 26
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:rax $5.1:r15 
  # $6.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 6 317 47
  mov r14, [rbx+264]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:rax $5.1:r15 $6.1:r14 
  # $7.1: Boolean = call(matches_236, self.1, $5.1, $6.1)
  .loc 6 317 13
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-32], rax
  call matches_236
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] $7.1:rax 
  # jump($7.1, block.4, block.6)
  test al, al
  jz .LABEL__parse_function_207__6
.LABEL__parse_function_207__4:
  # call(consume_space_230, self.1, 1)
  .loc 6 318 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] 
  # function_body.3: @AST_Block_Statement = call(parse_block_210, self.1)
  .loc 6 319 29
  mov rdi, [rbp-8]
  call parse_block_210
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:rax 
  # jump(block.5)
  mov [rbp-40], rax
.LABEL__parse_function_207__5:
  # function_body.4: @AST_Block_Statement = phi(function_body.2, function_body.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] function_body.4:[rbp-40] 
  # $9.1: @Source_Location = load_struct_member(function_name.1, location)
  .loc 6 323 69
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rax:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] function_body.4:[rbp-40] $9.1:rbx 
  # $10.1: @AST_Function_Statement = new(AST_Function_Statement)
  .loc 6 323 31
  mov [rbp-48], rbx
  mov rdi, 48
  call malloc
  lea rbx, AST_Function_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] function_body.4:[rbp-40] $9.1:[rbp-48] $10.1:rax 
  # store_struct_member($10.1, location, $9.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] function_body.4:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, name, function_name.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] function_body.4:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, type, function_type.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:r15:[rbp-32] function_body.3:[rbp-40] function_body.4:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, body, function_body.4)
  mov r14, [rbp-40]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: function_body.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:r15:[rbp-32] function_body.3:[rbp-40] $10.1:rax 
  # store_struct_member($10.1, ir_function, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:r15:[rbp-32] function_body.3:[rbp-40] $10.1:rax 
  # function_statement.1: @AST_Function_Statement = $10.1
  .loc 6 323 9
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:r15:[rbp-32] function_body.3:[rbp-40] function_statement.1:rax 
  # $11.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 6 324 9
  mov r14, [rbp-8]
  mov r13, [r14+8]
  # [live values]: self.1:r14:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:r15:[rbp-32] function_body.3:[rbp-40] function_statement.1:rax $11.1:r13 
  # $12.1: @List = load_struct_member($11.1, functions)
  .loc 6 324 9
  mov r12, [r13+24]
  # [discarded value]: $11.1
  # [live values]: self.1:r14:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx:[rbp-24] function_type.1:r15:[rbp-32] function_body.3:[rbp-40] function_statement.1:rax $12.1:r12 
  # call(append_268, $12.1, function_statement.1)
  .loc 6 324 9
  mov rdi, r12
  mov rsi, rax
  mov [rbp-48], rax
  call append_268
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] function_statement.1:[rbp-48] 
  # return(function_statement.1)
  .loc 6 325 9
  mov rax, [rbp-48]
  jmp .LABEL__parse_function_207__end
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.3:[rbp-40] 
  # [discarded value]: function_body.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] 
.LABEL__parse_function_207__6:
  # function_body.2: @AST_Block_Statement = null
  .loc 6 321 13
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.2:rax:[rbp-40] 
  # jump(block.5)
  mov [rbp-40], rax
  jmp .LABEL__parse_function_207__5
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] function_body.2:[rbp-40] 
  # [discarded value]: function_body.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_type.1:[rbp-32] 
  # [discarded value]: function_name.1
  # [discarded value]: function_type.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
.LABEL__parse_function_207__3:
  # $13.1: @Source_Location = load_struct_member(name_expression.1, location)
  .loc 6 327 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] name_expression.1:rax:[rbp-16] $13.1:rbx 
  # call(abort_264, $13.1, "Cannot use expression as function name")
  .loc 6 327 5
  mov rdi, rbx
  lea rsi, .LABEL__string_290[rip] # "Cannot use expression as function name"
  call abort_264
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: name_expression.1
  # [live values]: 
.LABEL__parse_function_207__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_207__stack_frame_size: .word 48

  .loc 6 332 1
  .text
parse_function_type_208:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_type_208__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_type_208__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 333 30
  mov rax, [rdi+280]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = call(consume_231, self.1, $1.1)
  .loc 6 333 17
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # location.1: @Source_Location = load_struct_member($2.1, location)
  .loc 6 333 17
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 0)
  .loc 6 334 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # $4.1: @List = new(List)
  .loc 6 335 28
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # store_struct_member($4.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $4.1:rax 
  # function_parameters.1: @List = $4.1
  .loc 6 335 5
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:rax 
  # $5.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 336 22
  mov rbx, [rbp-8]
  mov r15, [rbx+96]
  # [live values]: self.1:rbx:[rbp-8] location.1:[rbp-16] function_parameters.1:rax $5.1:r15 
  # $6.1: Boolean = call(matches_235, self.1, $5.1)
  .loc 6 336 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call matches_235
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 6 336 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__parse_function_type_208__3
.LABEL__parse_function_type_208__2:
  # $8.1: @AST_Function_Parameter = call(parse_function_parameter_209, self.1)
  .loc 6 337 36
  mov rdi, [rbp-8]
  call parse_function_parameter_209
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $8.1:rax 
  # call(append_268, function_parameters.1, $8.1)
  .loc 6 337 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_268
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # jump(block.4)
.LABEL__parse_function_type_208__4:
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 338 29
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $9.1:rbx 
  # $10.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 338 50
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $9.1:rbx $10.1:r15 
  # $11.1: Boolean = call(matches_236, self.1, $9.1, $10.1)
  .loc 6 338 16
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 6 338 16
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $12.1:rbx 
  # jump($12.1, block.5, block.3)
  test bl, bl
  jz .LABEL__parse_function_type_208__3
.LABEL__parse_function_type_208__5:
  # call(consume_space_230, self.1, 0)
  .loc 6 339 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $13.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 6 340 26
  mov rax, [rbp-8]
  mov rbx, [rax+120]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $13.1:rbx 
  # $14.1: @Token = call(consume_231, self.1, $13.1)
  .loc 6 340 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # call(consume_space_230, self.1, 1)
  .loc 6 341 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $15.1: @AST_Function_Parameter = call(parse_function_parameter_209, self.1)
  .loc 6 342 40
  mov rdi, [rbp-8]
  call parse_function_parameter_209
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $15.1:rax 
  # call(append_268, function_parameters.1, $15.1)
  .loc 6 342 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_268
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # jump(block.4)
  jmp .LABEL__parse_function_type_208__4
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
.LABEL__parse_function_type_208__3:
  # $16.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 345 18
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $16.1:rbx 
  # $17.1: @Token = call(consume_231, self.1, $16.1)
  .loc 6 345 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # call(consume_space_230, self.1, 1)
  .loc 6 346 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $18.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 6 347 18
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $18.1:rbx 
  # $19.1: @Matcher = load_struct_member(self.1, required_greater_than)
  .loc 6 347 40
  mov r15, [rax+192]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $18.1:rbx $19.1:r15 
  # $20.1: @Token = call(consume_232, self.1, $18.1, $19.1)
  .loc 6 347 5
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # call(consume_space_230, self.1, 1)
  .loc 6 348 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # function_return_type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 349 29
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] function_return_type.1:rax 
  # $22.1: @AST_Function_Type = new(AST_Function_Type)
  .loc 6 350 12
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Function_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] function_return_type.1:[rbp-32] $22.1:rax 
  # store_struct_member($22.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] function_parameters.1:[rbp-24] function_return_type.1:[rbp-32] $22.1:rax 
  # store_struct_member($22.1, parameters, function_parameters.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] function_parameters.1:r15:[rbp-24] function_return_type.1:[rbp-32] $22.1:rax 
  # store_struct_member($22.1, return_type, function_return_type.1)
  mov r14, [rbp-32]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: function_return_type.1
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] function_parameters.1:r15:[rbp-24] $22.1:rax 
  # return($22.1)
  .loc 6 350 5
  jmp .LABEL__parse_function_type_208__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: location.1
  # [discarded value]: function_parameters.1
  # [live values]: 
.LABEL__parse_function_type_208__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_type_208__stack_frame_size: .word 32

  .loc 6 355 1
  .text
parse_function_parameter_209:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_parameter_209__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_parameter_209__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 356 36
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  # parameter_name.1: @Identifier_Token = call(consume_231, self.1, $1.1)
  .loc 6 356 23
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] parameter_name.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 357 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  # $4.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 6 358 18
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] parameter_name.1:[rbp-16] $4.1:rbx 
  # $5.1: @Token = call(consume_231, self.1, $4.1)
  .loc 6 358 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  # call(consume_space_230, self.1, 1)
  .loc 6 359 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  # parameter_type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 360 23
  mov rdi, [rbp-8]
  call parse_type_214
  # [discarded value]: self.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:rax 
  # $7.1: @Source_Location = load_struct_member(parameter_name.1, location)
  .loc 6 361 50
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: parameter_name.1:rbx:[rbp-16] parameter_type.1:rax $7.1:r15 
  # $8.1: @AST_Function_Parameter = new(AST_Function_Parameter)
  .loc 6 361 12
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:[rbp-24] $7.1:[rbp-32] $8.1:rax 
  # store_struct_member($8.1, location, $7.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $7.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, name, parameter_name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: parameter_name.1
  # [live values]: parameter_type.1:[rbp-24] $8.1:rax 
  # store_struct_member($8.1, type, parameter_type.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: parameter_type.1
  # [live values]: $8.1:rax 
  # return($8.1)
  .loc 6 361 5
  jmp .LABEL__parse_function_parameter_209__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_function_parameter_209__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_parameter_209__stack_frame_size: .word 32

  .loc 6 366 1
  .text
parse_block_210:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_block_210__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_block_210__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 6 367 30
  mov rax, [rdi+264]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = call(consume_231, self.1, $1.1)
  .loc 6 367 17
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # location.1: @Source_Location = load_struct_member($2.1, location)
  .loc 6 367 17
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_end_of_line_228, self.1)
  .loc 6 368 5
  mov rdi, [rbp-8]
  mov [rbp-16], rbx
  call consume_end_of_line_228
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # $4.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 369 30
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  # $5.1: Int = $4.1 + 1
  .loc 6 369 30
  mov r15, rbx
  add r15, 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $5.1:r15 
  # store_struct_member(self.1, current_alignment, $5.1)
  .loc 6 369 5
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] 
  # $6.1: @List = new(List)
  .loc 6 370 19
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # store_struct_member($6.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # statements.1: @List = $6.1
  .loc 6 370 5
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:rax 
  # call(parse_statements_202, self.1, statements.1)
  .loc 6 371 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rax
  call parse_statements_202
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  # $7.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 372 30
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $7.1:rbx 
  # $8.1: Int = $7.1 - 1
  .loc 6 372 30
  mov r15, rbx
  dec r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $8.1:r15 
  # store_struct_member(self.1, current_alignment, $8.1)
  .loc 6 372 5
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  # $9.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 373 24
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $9.1:rbx 
  # $10.1: Int = $9.1 * 4
  .loc 6 373 24
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $10.1:r15 
  # call(consume_space_230, self.1, $10.1)
  .loc 6 373 5
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  # $11.1: @Matcher = load_struct_member(self.1, required_close_brace)
  .loc 6 374 18
  mov rax, [rbp-8]
  mov rbx, [rax+80]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $11.1:rbx 
  # $12.1: @Token = call(consume_231, self.1, $11.1)
  .loc 6 374 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: self.1
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: location.1:[rbp-16] statements.1:[rbp-24] 
  # $13.1: @AST_Block_Statement = new(AST_Block_Statement)
  .loc 6 375 12
  mov rdi, 24
  call malloc
  lea rbx, AST_Block_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] statements.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: statements.1:[rbp-24] $13.1:rax 
  # store_struct_member($13.1, statements, statements.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: statements.1
  # [live values]: $13.1:rax 
  # return($13.1)
  .loc 6 375 5
  jmp .LABEL__parse_block_210__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__parse_block_210__end:
  mov rsp, rbp
  pop rbp
  ret

parse_block_210__stack_frame_size: .word 32

  .loc 6 380 1
  .text
parse_if_211:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_if_211__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_if_211__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_if)
  .loc 6 381 30
  mov rax, [rdi+216]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = call(consume_231, self.1, $1.1)
  .loc 6 381 17
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # location.1: @Source_Location = load_struct_member($2.1, location)
  .loc 6 381 17
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 1)
  .loc 6 382 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 383 18
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  # $5.1: @Token = call(consume_231, self.1, $4.1)
  .loc 6 383 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # call(consume_space_230, self.1, 0)
  .loc 6 384 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # condition_expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 385 29
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 386 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 387 18
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] $7.1:rbx 
  # $8.1: @Token = call(consume_231, self.1, $7.1)
  .loc 6 387 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  # call(consume_space_230, self.1, 1)
  .loc 6 388 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  # true_statement.1: @AST_Block_Statement = call(parse_block_210, self.1)
  .loc 6 389 23
  mov rdi, [rbp-8]
  call parse_block_210
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax 
  # false_statement.1: @AST_Statement = null
  .loc 6 390 5
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx 
  # $10.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 391 22
  mov r15, [rbp-8]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $10.1:r14 
  # $11.1: @Matcher = load_struct_member(self.1, required_else)
  .loc 6 391 43
  mov r13, [r15+144]
  # [live values]: self.1:r15:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $10.1:r14 $11.1:r13 
  # $12.1: Boolean = call(matches_236, self.1, $10.1, $11.1)
  .loc 6 391 9
  mov rdi, r15
  mov rsi, r14
  mov rdx, r13
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call matches_236
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:rax 
  # jump($12.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_if_211__3
.LABEL__parse_if_211__2:
  # call(consume_space_230, self.1, 1)
  .loc 6 392 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # $13.1: @Matcher = load_struct_member(self.1, required_else)
  .loc 6 393 22
  mov rax, [rbp-8]
  mov rbx, [rax+144]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $13.1:rbx 
  # $14.1: @Token = call(consume_231, self.1, $13.1)
  .loc 6 393 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # call(consume_space_230, self.1, 1)
  .loc 6 394 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # $15.1: @Matcher = load_struct_member(self.1, required_if)
  .loc 6 395 26
  mov rax, [rbp-8]
  mov rbx, [rax+216]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $15.1:rbx 
  # $16.1: Boolean = call(matches_235, self.1, $15.1)
  .loc 6 395 13
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $16.1:rax 
  # jump($16.1, block.4, block.6)
  test al, al
  jz .LABEL__parse_if_211__6
.LABEL__parse_if_211__4:
  # false_statement.3: @AST_Statement = call(parse_if_211, self.1)
  .loc 6 396 31
  mov rdi, [rbp-8]
  call parse_if_211
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.3:rax:[rbp-40] 
  # jump(block.3)
  mov [rbp-40], rax
.LABEL__parse_if_211__3:
  # false_statement.4: @AST_Statement = phi(false_statement.1, false_statement.3, false_statement.2)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] false_statement.3:[rbp-40] 
  # $19.1: @AST_If_Statement = new(AST_If_Statement)
  .loc 6 401 12
  mov rdi, 40
  call malloc
  lea rbx, AST_If_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, condition_expression, condition_expression.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:r15:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, true_statement, true_statement.1)
  mov r14, [rbp-32]
  mov QWORD PTR [rax+24], r14
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:r15:[rbp-24] true_statement.1:r14:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # store_struct_member($19.1, false_statement, false_statement.4)
  mov r13, [rbp-40]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: false_statement.4
  # [live values]: self.1:[rbp-8] location.1:rbx:[rbp-16] condition_expression.1:r15:[rbp-24] true_statement.1:r14:[rbp-32] false_statement.1:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # return($19.1)
  .loc 6 401 5
  jmp .LABEL__parse_if_211__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.3:[rbp-40] 
  # [discarded value]: false_statement.3
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
.LABEL__parse_if_211__6:
  # false_statement.2: @AST_Statement = call(parse_block_210, self.1)
  .loc 6 398 31
  mov rdi, [rbp-8]
  call parse_block_210
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.2:rax:[rbp-40] 
  # jump(block.3)
  mov [rbp-40], rax
  jmp .LABEL__parse_if_211__3
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.2:[rbp-40] 
  # [discarded value]: false_statement.2
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: location.1
  # [discarded value]: condition_expression.1
  # [discarded value]: true_statement.1
  # [discarded value]: false_statement.1
  # [live values]: 
.LABEL__parse_if_211__end:
  mov rsp, rbp
  pop rbp
  ret

parse_if_211__stack_frame_size: .word 48

  .loc 6 406 1
  .text
parse_loop_212:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_loop_212__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_loop_212__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_loop)
  .loc 6 407 30
  mov rax, [rdi+248]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = call(consume_231, self.1, $1.1)
  .loc 6 407 17
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # location.1: @Source_Location = load_struct_member($2.1, location)
  .loc 6 407 17
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 1)
  .loc 6 408 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # loop_block.1: @AST_Block_Statement = call(parse_block_210, self.1)
  .loc 6 409 19
  mov rdi, [rbp-8]
  call parse_block_210
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] loop_block.1:rax 
  # $5.1: @AST_Loop_Statement = new(AST_Loop_Statement)
  .loc 6 410 12
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Loop_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] loop_block.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: loop_block.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, block, loop_block.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: loop_block.1
  # [live values]: $5.1:rax 
  # return($5.1)
  .loc 6 410 5
  jmp .LABEL__parse_loop_212__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__parse_loop_212__end:
  mov rsp, rbp
  pop rbp
  ret

parse_loop_212__stack_frame_size: .word 32

  .loc 6 415 1
  .text
parse_while_213:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_while_213__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_while_213__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_while)
  .loc 6 416 30
  mov rax, [rdi+336]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = call(consume_231, self.1, $1.1)
  .loc 6 416 17
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_231
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # location.1: @Source_Location = load_struct_member($2.1, location)
  .loc 6 416 17
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 1)
  .loc 6 417 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 418 18
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  # $5.1: @Token = call(consume_231, self.1, $4.1)
  .loc 6 418 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # call(consume_space_230, self.1, 0)
  .loc 6 419 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # condition_expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 420 29
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 421 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 422 18
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] $7.1:rbx 
  # $8.1: @Token = call(consume_231, self.1, $7.1)
  .loc 6 422 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  # call(consume_space_230, self.1, 1)
  .loc 6 423 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  # loop_block.1: @AST_Block_Statement = call(parse_block_210, self.1)
  .loc 6 424 19
  mov rdi, [rbp-8]
  call parse_block_210
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:rax 
  # $10.1: @AST_While_Statement = new(AST_While_Statement)
  .loc 6 425 12
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_While_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: condition_expression.1:[rbp-24] loop_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, condition_expression, condition_expression.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: condition_expression.1
  # [live values]: loop_block.1:[rbp-32] $10.1:rax 
  # store_struct_member($10.1, block, loop_block.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  # [discarded value]: loop_block.1
  # [live values]: $10.1:rax 
  # return($10.1)
  .loc 6 425 5
  jmp .LABEL__parse_while_213__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__parse_while_213__end:
  mov rsp, rbp
  pop rbp
  ret

parse_while_213__stack_frame_size: .word 32

  .loc 6 433 1
  .text
parse_type_214:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_type_214__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_type_214__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_at)
  .loc 6 434 22
  mov rax, [rdi+64]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = call(matches_235, self.1, $1.1)
  .loc 6 434 9
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_235
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_type_214__3
.LABEL__parse_type_214__2:
  # $3.1: @Matcher = load_struct_member(self.1, required_at)
  .loc 6 435 31
  mov rax, [rbp-8]
  mov rbx, [rax+64]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # token.1: @Token = call(consume_231, self.1, $3.1)
  .loc 6 435 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 436 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 437 17
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:rax 
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 438 48
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] type.1:rax $6.1:r15 
  # $7.1: @AST_Pointer_Type = new(AST_Pointer_Type)
  .loc 6 438 16
  mov [rbp-16], rax
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  lea rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, location, $6.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $7.1:rax 
  # store_struct_member($7.1, pointed_type, type.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # return($7.1)
  .loc 6 438 9
  jmp .LABEL__parse_type_214__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_type_214__3:
  # $8.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 6 440 22
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  # $9.1: Boolean = call(matches_235, self.1, $8.1)
  .loc 6 440 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__parse_type_214__6
.LABEL__parse_type_214__5:
  # $10.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 6 441 31
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  # token.1: @Token = call(consume_231, self.1, $10.1)
  .loc 6 441 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # array_item_type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 442 28
  mov rdi, [rbp-8]
  mov [rbp-16], rax
  call parse_type_214
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rax 
  # $13.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 443 26
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] token.1:[rbp-16] array_item_type.1:rax $13.1:r15 
  # $14.1: @Matcher = load_struct_member(self.1, required_column)
  .loc 6 443 47
  mov r14, [rbx+112]
  # [live values]: self.1:rbx:[rbp-8] token.1:[rbp-16] array_item_type.1:rax $13.1:r15 $14.1:r14 
  # $15.1: Boolean = call(matches_236, self.1, $13.1, $14.1)
  .loc 6 443 13
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-24], rax
  call matches_236
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $15.1:rax 
  # jump($15.1, block.7, block.8)
  test al, al
  jz .LABEL__parse_type_214__8
.LABEL__parse_type_214__7:
  # call(consume_space_230, self.1, 0)
  .loc 6 444 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # $16.1: @Matcher = load_struct_member(self.1, required_column)
  .loc 6 445 26
  mov rax, [rbp-8]
  mov rbx, [rax+112]
  # [live values]: self.1:rax:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $16.1:rbx 
  # $17.1: @Token = call(consume_231, self.1, $16.1)
  .loc 6 445 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # call(consume_space_230, self.1, 1)
  .loc 6 446 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # array_size_expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 447 38
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 448 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-32], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] 
  # $19.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  .loc 6 449 26
  mov rax, [rbp-8]
  mov rbx, [rax+88]
  # [live values]: self.1:rax:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] $19.1:rbx 
  # $20.1: @Token = call(consume_231, self.1, $19.1)
  .loc 6 449 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] 
  # $21.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 450 50
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] $21.1:rbx 
  # $22.1: @AST_Array_Type = new(AST_Array_Type)
  .loc 6 450 20
  mov [rbp-40], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] $21.1:[rbp-40] $22.1:rax 
  # store_struct_member($22.1, location, $21.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] $22.1:rax 
  # store_struct_member($22.1, item_type, array_item_type.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rbx:[rbp-24] array_size_expression.1:[rbp-32] $22.1:rax 
  # store_struct_member($22.1, size_expression, array_size_expression.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: array_size_expression.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rbx:[rbp-24] $22.1:rax 
  # return($22.1)
  .loc 6 450 13
  jmp .LABEL__parse_type_214__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
.LABEL__parse_type_214__8:
  # $23.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 452 46
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] array_item_type.1:[rbp-24] $23.1:rbx 
  # $24.1: @AST_Array_Type = new(AST_Array_Type)
  .loc 6 452 16
  mov [rbp-32], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $23.1:[rbp-32] $24.1:rax 
  # store_struct_member($24.1, location, $23.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $24.1:rax 
  # store_struct_member($24.1, item_type, array_item_type.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rbx:[rbp-24] $24.1:rax 
  # store_struct_member($24.1, size_expression, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rbx:[rbp-24] $24.1:rax 
  # return($24.1)
  .loc 6 452 9
  jmp .LABEL__parse_type_214__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # [discarded value]: token.1
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_type_214__6:
  # $25.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 454 22
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $25.1:rbx 
  # $26.1: Boolean = call(matches_235, self.1, $25.1)
  .loc 6 454 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $26.1:rax 
  # jump($26.1, block.11, block.12)
  test al, al
  jz .LABEL__parse_type_214__12
.LABEL__parse_type_214__11:
  # $27.1: @AST_Function_Type = call(parse_function_type_208, self.1)
  .loc 6 455 16
  mov rdi, [rbp-8]
  call parse_function_type_208
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $27.1:rax 
  # return($27.1)
  .loc 6 455 9
  jmp .LABEL__parse_type_214__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_type_214__12:
  # $28.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 457 27
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $28.1:rbx 
  # token.1: @Identifier_Token = call(consume_231, self.1, $28.1)
  .loc 6 457 14
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # $31.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 458 42
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] token.1:rax $31.1:rbx 
  # $32.1: @AST_Named_Type = new(AST_Named_Type)
  .loc 6 458 12
  mov [rbp-16], rax
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Named_Type[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $31.1:[rbp-24] $32.1:rax 
  # store_struct_member($32.1, location, $31.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $32.1:rax 
  # store_struct_member($32.1, name, token.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $32.1:rax 
  # return($32.1)
  .loc 6 458 5
  jmp .LABEL__parse_type_214__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_type_214__end:
  mov rsp, rbp
  pop rbp
  ret

parse_type_214__stack_frame_size: .word 48

  .loc 6 461 1
  .text
parse_expression_215:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_expression_215__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_expression_215__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @AST_Expression = call(parse_logic_or_expression_216, self.1)
  .loc 6 462 12
  call parse_logic_or_expression_216
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 6 462 5
  jmp .LABEL__parse_expression_215__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__parse_expression_215__end:
  mov rsp, rbp
  pop rbp
  ret

parse_expression_215__stack_frame_size: .word 0

  .loc 6 467 1
  .text
parse_logic_or_expression_216:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_or_expression_216__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_or_expression_216__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_logic_and_expression_217, self.1)
  .loc 6 468 19
  mov [rbp-8], rdi
  call parse_logic_and_expression_217
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_logic_or_expression_216__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 469 25
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 6 469 46
  mov r15, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 
  # $4.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 6 469 74
  mov r14, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  # $5.1: Boolean = call(matches_237, self.1, $2.1, $3.1, $4.1)
  .loc 6 469 12
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_237
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__parse_logic_or_expression_216__4
.LABEL__parse_logic_or_expression_216__3:
  # call(consume_space_230, self.1, 1)
  .loc 6 470 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $6.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 6 471 22
  mov rax, [rbp-8]
  mov rbx, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rbx 
  # $7.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 6 471 50
  mov r15, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rbx $7.1:r15 
  # $8.1: @Token = call(consume_232, self.1, $6.1, $7.1)
  .loc 6 471 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # call(consume_space_230, self.1, 1)
  .loc 6 472 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $9.1: @Source_Location = load_struct_member(expression.5, location)
  .loc 6 473 61
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $9.1:rbx 
  # $10.1: @AST_Expression = call(parse_logic_and_expression_217, self.1)
  .loc 6 473 131
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call parse_logic_and_expression_217
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @AST_Logic_Or_Expression = new(AST_Logic_Or_Expression)
  .loc 6 473 22
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Logic_Or_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, location, $9.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, left_expression, expression.5)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, right_expression, $10.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $11.1:rax 
  # expression.3: @AST_Expression = $11.1
  .loc 6 473 9
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_or_expression_216__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
.LABEL__parse_logic_or_expression_216__4:
  # return(expression.5)
  .loc 6 475 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_or_expression_216__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_logic_or_expression_216__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_or_expression_216__stack_frame_size: .word 32

  .loc 6 480 1
  .text
parse_logic_and_expression_217:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_and_expression_217__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_and_expression_217__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_equality_expression_218, self.1)
  .loc 6 481 19
  mov [rbp-8], rdi
  call parse_equality_expression_218
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_logic_and_expression_217__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 482 25
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 6 482 46
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 
  # $4.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 6 482 71
  mov r14, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  # $5.1: Boolean = call(matches_237, self.1, $2.1, $3.1, $4.1)
  .loc 6 482 12
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_237
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__parse_logic_and_expression_217__4
.LABEL__parse_logic_and_expression_217__3:
  # call(consume_space_230, self.1, 1)
  .loc 6 483 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $6.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 6 484 22
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rbx 
  # $7.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 6 484 47
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rbx $7.1:r15 
  # $8.1: @Token = call(consume_232, self.1, $6.1, $7.1)
  .loc 6 484 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # call(consume_space_230, self.1, 1)
  .loc 6 485 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $9.1: @Source_Location = load_struct_member(expression.5, location)
  .loc 6 486 62
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $9.1:rbx 
  # $10.1: @AST_Expression = call(parse_equality_expression_218, self.1)
  .loc 6 486 132
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call parse_equality_expression_218
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @AST_Logic_And_Expression = new(AST_Logic_And_Expression)
  .loc 6 486 22
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Logic_And_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:[rbp-24] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, location, $9.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, left_expression, expression.5)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $10.1:[rbp-32] $11.1:rax 
  # store_struct_member($11.1, right_expression, $10.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rbx:[rbp-16] $11.1:rax 
  # expression.3: @AST_Expression = $11.1
  .loc 6 486 9
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_and_expression_217__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
.LABEL__parse_logic_and_expression_217__4:
  # return(expression.5)
  .loc 6 488 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_and_expression_217__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_logic_and_expression_217__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_and_expression_217__stack_frame_size: .word 32

  .loc 6 493 1
  .text
parse_equality_expression_218:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_equality_expression_218__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_equality_expression_218__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_comparison_expression_219, self.1)
  .loc 6 494 19
  mov [rbp-8], rdi
  call parse_comparison_expression_219
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 495 22
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 495 43
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  # $4.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 495 65
  mov r13, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 $4.1:r13 
  # $6.1: Boolean = call(matches_237, self.1, $2.1, $3.1, $4.1)
  .loc 6 495 9
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov rcx, r13
  mov [rbp-16], rax
  call matches_237
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # jump($6.1, block.3, block.2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_equality_expression_218__2
.LABEL__parse_equality_expression_218__3:
  # $6.3: Boolean = phi($6.1, $6.2)
  .loc 6 495 9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  # jump($6.3, block.4, block.5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_equality_expression_218__5
.LABEL__parse_equality_expression_218__4:
  # call(consume_space_230, self.1, 1)
  .loc 6 496 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # $11.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 497 26
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $11.1:rbx 
  # $12.1: Boolean = call(matches_235, self.1, $11.1)
  .loc 6 497 13
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $12.1:rax 
  # jump($12.1, block.6, block.8)
  test al, al
  jz .LABEL__parse_equality_expression_218__8
.LABEL__parse_equality_expression_218__6:
  # $19.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 498 26
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $19.1:rbx 
  # $20.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 498 48
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $19.1:rbx $20.1:r15 
  # $21.1: @Token = call(consume_232, self.1, $19.1, $20.1)
  .loc 6 498 13
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 499 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 500 63
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $6.1:[rbp-17] $22.1:rbx 
  # $23.1: @AST_Expression = call(parse_comparison_expression_219, self.1)
  .loc 6 500 133
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_comparison_expression_219
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $22.1:[rbp-25] $23.1:rax 
  # $24.1: @AST_Equals_Expression = new(AST_Equals_Expression)
  .loc 6 500 26
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $22.1:[rbp-25] $23.1:[rbp-33] $24.1:rax 
  # store_struct_member($24.1, location, $22.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $23.1:[rbp-33] $24.1:rax 
  # store_struct_member($24.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $23.1:[rbp-33] $24.1:rax 
  # store_struct_member($24.1, right_expression, $23.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $24.1:rax 
  # expression.5: @AST_Expression = $24.1
  .loc 6 500 13
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__parse_equality_expression_218__5:
  # expression.6: @AST_Expression = phi(expression.5, expression.3, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.6:[rbp-16] expression.5:[rbp-16] 
  # return(expression.6)
  .loc 6 507 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_equality_expression_218__end
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
.LABEL__parse_equality_expression_218__8:
  # $13.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  .loc 6 502 26
  mov rax, [rbp-8]
  mov rbx, [rax+176]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $13.1:rbx 
  # $14.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 502 58
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $13.1:rbx $14.1:r15 
  # $15.1: @Token = call(consume_232, self.1, $13.1, $14.1)
  .loc 6 502 13
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_232
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 503 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 504 67
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $6.1:[rbp-17] $16.1:rbx 
  # $17.1: @AST_Expression = call(parse_comparison_expression_219, self.1)
  .loc 6 504 137
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_comparison_expression_219
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $16.1:[rbp-25] $17.1:rax 
  # $18.1: @AST_Not_Equals_Expression = new(AST_Not_Equals_Expression)
  .loc 6 504 26
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Not_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $16.1:[rbp-25] $17.1:[rbp-33] $18.1:rax 
  # store_struct_member($18.1, location, $16.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $17.1:[rbp-33] $18.1:rax 
  # store_struct_member($18.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $17.1:[rbp-33] $18.1:rax 
  # store_struct_member($18.1, right_expression, $17.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $6.1:[rbp-17] $18.1:rax 
  # expression.3: @AST_Expression = $18.1
  .loc 6 504 13
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
  jmp .LABEL__parse_equality_expression_218__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
.LABEL__parse_equality_expression_218__2:
  # $7.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 495 103
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx 
  # $8.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  .loc 6 495 124
  mov r15, [rax+176]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx $8.1:r15 
  # $9.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 495 156
  mov r14, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx $8.1:r15 $9.1:r14 
  # $6.2: Boolean = call(matches_237, self.1, $7.1, $8.1, $9.1)
  .loc 6 495 90
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_237
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:rax:[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
  jmp .LABEL__parse_equality_expression_218__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:[rbp-17] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__parse_equality_expression_218__end:
  mov rsp, rbp
  pop rbp
  ret

parse_equality_expression_218__stack_frame_size: .word 48

  .loc 6 512 1
  .text
parse_comparison_expression_219:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_comparison_expression_219__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_comparison_expression_219__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_addition_expression_220, self.1)
  .loc 6 513 19
  mov [rbp-8], rdi
  call parse_addition_expression_220
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 514 22
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  # $3.1: @Matcher = load_struct_member(self.1, required_less_than)
  .loc 6 514 43
  mov r14, [rbx+232]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  # $5.1: Boolean = call(matches_236, self.1, $2.1, $3.1)
  .loc 6 514 9
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-16], rax
  call matches_236
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_comparison_expression_219__2
.LABEL__parse_comparison_expression_219__3:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 6 514 9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, block.4, block.5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_comparison_expression_219__5
.LABEL__parse_comparison_expression_219__4:
  # call(consume_space_230, self.1, 1)
  .loc 6 515 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $9.1: @Matcher = load_struct_member(self.1, required_less_than)
  .loc 6 516 26
  mov rax, [rbp-8]
  mov rbx, [rax+232]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  # $10.1: Boolean = call(matches_235, self.1, $9.1)
  .loc 6 516 13
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $10.1:rax 
  # jump($10.1, block.6, block.8)
  test al, al
  jz .LABEL__parse_comparison_expression_219__8
.LABEL__parse_comparison_expression_219__6:
  # $23.1: @Matcher = load_struct_member(self.1, required_less_than)
  .loc 6 517 26
  mov rax, [rbp-8]
  mov rbx, [rax+232]
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $23.1:rbx 
  # $24.1: @Token = call(consume_231, self.1, $23.1)
  .loc 6 517 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $25.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 518 30
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $25.1:rbx 
  # $26.1: Boolean = call(matches_235, self.1, $25.1)
  .loc 6 518 17
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $26.1:rax 
  # jump($26.1, block.12, block.14)
  test al, al
  jz .LABEL__parse_comparison_expression_219__14
.LABEL__parse_comparison_expression_219__12:
  # $30.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 519 30
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $30.1:rbx 
  # $31.1: @Token = call(consume_231, self.1, $30.1)
  .loc 6 519 17
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 520 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $32.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 521 80
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $32.1:rbx 
  # $33.1: @AST_Expression = call(parse_addition_expression_220, self.1)
  .loc 6 521 150
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_addition_expression_220
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $32.1:[rbp-25] $33.1:rax 
  # $34.1: @AST_Less_Than_Or_Equals_Expression = new(AST_Less_Than_Or_Equals_Expression)
  .loc 6 521 30
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Less_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $32.1:[rbp-25] $33.1:[rbp-33] $34.1:rax 
  # store_struct_member($34.1, location, $32.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $33.1:[rbp-33] $34.1:rax 
  # store_struct_member($34.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $33.1:[rbp-33] $34.1:rax 
  # store_struct_member($34.1, right_expression, $33.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $34.1:rax 
  # expression.9: @AST_Expression = $34.1
  .loc 6 521 17
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.9:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__parse_comparison_expression_219__5:
  # expression.10: @AST_Expression = phi(expression.5, expression.3, expression.9, expression.7, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.10:[rbp-16] expression.9:[rbp-16] 
  # return(expression.10)
  .loc 6 538 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_comparison_expression_219__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.9:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_219__14:
  # call(consume_space_230, self.1, 1)
  .loc 6 523 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 524 70
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $27.1:rbx 
  # $28.1: @AST_Expression = call(parse_addition_expression_220, self.1)
  .loc 6 524 140
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_addition_expression_220
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $27.1:[rbp-25] $28.1:rax 
  # $29.1: @AST_Less_Than_Expression = new(AST_Less_Than_Expression)
  .loc 6 524 30
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Less_Than_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $27.1:[rbp-25] $28.1:[rbp-33] $29.1:rax 
  # store_struct_member($29.1, location, $27.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $28.1:[rbp-33] $29.1:rax 
  # store_struct_member($29.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $28.1:[rbp-33] $29.1:rax 
  # store_struct_member($29.1, right_expression, $28.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $29.1:rax 
  # expression.7: @AST_Expression = $29.1
  .loc 6 524 17
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.7:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_219__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_219__8:
  # $11.1: @Matcher = load_struct_member(self.1, required_greater_than)
  .loc 6 527 26
  mov rax, [rbp-8]
  mov rbx, [rax+192]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $11.1:rbx 
  # $12.1: @Token = call(consume_231, self.1, $11.1)
  .loc 6 527 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $13.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 528 30
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $13.1:rbx 
  # $14.1: Boolean = call(matches_235, self.1, $13.1)
  .loc 6 528 17
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $14.1:rax 
  # jump($14.1, block.9, block.11)
  test al, al
  jz .LABEL__parse_comparison_expression_219__11
.LABEL__parse_comparison_expression_219__9:
  # $18.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 529 30
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $18.1:rbx 
  # $19.1: @Token = call(consume_231, self.1, $18.1)
  .loc 6 529 17
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 530 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 531 83
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $20.1:rbx 
  # $21.1: @AST_Expression = call(parse_addition_expression_220, self.1)
  .loc 6 531 153
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_addition_expression_220
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $20.1:[rbp-25] $21.1:rax 
  # $22.1: @AST_Greater_Than_Or_Equals_Expression = new(AST_Greater_Than_Or_Equals_Expression)
  .loc 6 531 30
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Greater_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $20.1:[rbp-25] $21.1:[rbp-33] $22.1:rax 
  # store_struct_member($22.1, location, $20.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $21.1:[rbp-33] $22.1:rax 
  # store_struct_member($22.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $21.1:[rbp-33] $22.1:rax 
  # store_struct_member($22.1, right_expression, $21.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $22.1:rax 
  # expression.5: @AST_Expression = $22.1
  .loc 6 531 17
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_219__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_219__11:
  # call(consume_space_230, self.1, 1)
  .loc 6 533 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $15.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 534 73
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $15.1:rbx 
  # $16.1: @AST_Expression = call(parse_addition_expression_220, self.1)
  .loc 6 534 143
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_addition_expression_220
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $15.1:[rbp-25] $16.1:rax 
  # $17.1: @AST_Greater_Than_Expression = new(AST_Greater_Than_Expression)
  .loc 6 534 30
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Greater_Than_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $15.1:[rbp-25] $16.1:[rbp-33] $17.1:rax 
  # store_struct_member($17.1, location, $15.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $16.1:[rbp-33] $17.1:rax 
  # store_struct_member($17.1, left_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $16.1:[rbp-33] $17.1:rax 
  # store_struct_member($17.1, right_expression, $16.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $5.1:[rbp-17] $17.1:rax 
  # expression.3: @AST_Expression = $17.1
  .loc 6 534 17
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_219__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_219__2:
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 514 84
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  # $7.1: @Matcher = load_struct_member(self.1, required_greater_than)
  .loc 6 514 105
  mov r15, [rax+192]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  # $5.2: Boolean = call(matches_236, self.1, $6.1, $7.1)
  .loc 6 514 71
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
  jmp .LABEL__parse_comparison_expression_219__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__parse_comparison_expression_219__end:
  mov rsp, rbp
  pop rbp
  ret

parse_comparison_expression_219__stack_frame_size: .word 48

  .loc 6 543 1
  .text
parse_addition_expression_220:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_addition_expression_220__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_addition_expression_220__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_multiplication_expression_221, self.1)
  .loc 6 544 19
  mov [rbp-8], rdi
  call parse_multiplication_expression_221
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_addition_expression_220__2:
  # expression.8: @AST_Expression = phi(expression.1, expression.5, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 545 25
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_plus)
  .loc 6 545 46
  mov r15, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $2.1:rbx $3.1:r15 
  # $5.1: Boolean = call(matches_236, self.1, $2.1, $3.1)
  .loc 6 545 12
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:rax 
  # jump($5.1, block.6, block.5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_addition_expression_220__5
.LABEL__parse_addition_expression_220__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 6 545 12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_addition_expression_220__4
.LABEL__parse_addition_expression_220__3:
  # call(consume_space_230, self.1, 1)
  .loc 6 546 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # $9.1: @Matcher = load_struct_member(self.1, required_plus)
  .loc 6 548 26
  mov rax, [rbp-8]
  mov rbx, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  # $10.1: Boolean = call(matches_235, self.1, $9.1)
  .loc 6 548 13
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:rax 
  # jump($10.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_addition_expression_220__9
.LABEL__parse_addition_expression_220__7:
  # $16.1: @Matcher = load_struct_member(self.1, required_plus)
  .loc 6 549 26
  mov rax, [rbp-8]
  mov rbx, [rax+288]
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $16.1:rbx 
  # $17.1: @Token = call(consume_231, self.1, $16.1)
  .loc 6 549 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 550 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # $18.1: @Source_Location = load_struct_member(expression.8, location)
  .loc 6 551 60
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $5.1:[rbp-17] $18.1:rbx 
  # $19.1: @AST_Expression = call(parse_multiplication_expression_221, self.1)
  .loc 6 551 130
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_multiplication_expression_221
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $18.1:[rbp-25] $19.1:rax 
  # $20.1: @AST_Add_Expression = new(AST_Add_Expression)
  .loc 6 551 26
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Add_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $18.1:[rbp-25] $19.1:[rbp-33] $20.1:rax 
  # store_struct_member($20.1, location, $18.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $19.1:[rbp-33] $20.1:rax 
  # store_struct_member($20.1, left_expression, expression.8)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $19.1:[rbp-33] $20.1:rax 
  # store_struct_member($20.1, right_expression, $19.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $20.1:rax 
  # expression.5: @AST_Expression = $20.1
  .loc 6 551 13
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_220__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_220__9:
  # $11.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 6 553 26
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $11.1:rbx 
  # $12.1: @Token = call(consume_231, self.1, $11.1)
  .loc 6 553 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 554 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # $13.1: @Source_Location = load_struct_member(expression.8, location)
  .loc 6 555 66
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $5.1:[rbp-17] $13.1:rbx 
  # $14.1: @AST_Expression = call(parse_multiplication_expression_221, self.1)
  .loc 6 555 136
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_multiplication_expression_221
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $13.1:[rbp-25] $14.1:rax 
  # $15.1: @AST_Substract_Expression = new(AST_Substract_Expression)
  .loc 6 555 26
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Substract_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $13.1:[rbp-25] $14.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, location, $13.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $14.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, left_expression, expression.8)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $14.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, right_expression, $14.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rbx:[rbp-16] $5.1:[rbp-17] $15.1:rax 
  # expression.3: @AST_Expression = $15.1
  .loc 6 555 13
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_220__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_220__4:
  # return(expression.8)
  .loc 6 558 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_addition_expression_220__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_220__5:
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 545 82
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  # $7.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 6 545 103
  mov r15, [rax+200]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  # $5.2: Boolean = call(matches_236, self.1, $6.1, $7.1)
  .loc 6 545 69
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(block.6)
  mov [rbp-17], al
  jmp .LABEL__parse_addition_expression_220__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: expression.8
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_addition_expression_220__end:
  mov rsp, rbp
  pop rbp
  ret

parse_addition_expression_220__stack_frame_size: .word 48

  .loc 6 563 1
  .text
parse_multiplication_expression_221:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_multiplication_expression_221__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_multiplication_expression_221__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_unary_expression_222, self.1)
  .loc 6 564 19
  mov [rbp-8], rdi
  call parse_unary_expression_222
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_multiplication_expression_221__2:
  # expression.10: @AST_Expression = phi(expression.1, expression.3, expression.7, expression.5)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 565 25
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_asterisk)
  .loc 6 565 46
  mov r15, [rax+56]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $2.1:rbx $3.1:r15 
  # $5.1: Boolean = call(matches_236, self.1, $2.1, $3.1)
  .loc 6 565 12
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:rax 
  # jump($5.1, block.6, block.5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_multiplication_expression_221__5
.LABEL__parse_multiplication_expression_221__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 6 565 12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_multiplication_expression_221__4
.LABEL__parse_multiplication_expression_221__3:
  # call(consume_space_230, self.1, 1)
  .loc 6 566 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # $9.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 6 567 26
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  # $10.1: Boolean = call(matches_235, self.1, $9.1)
  .loc 6 567 13
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:rax 
  # jump($10.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_multiplication_expression_221__9
.LABEL__parse_multiplication_expression_221__7:
  # $16.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 6 568 26
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $16.1:rbx 
  # $17.1: @Token = call(consume_231, self.1, $16.1)
  .loc 6 568 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # $18.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 6 569 30
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $18.1:rbx 
  # $19.1: Boolean = call(matches_235, self.1, $18.1)
  .loc 6 569 17
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $19.1:rax 
  # jump($19.1, block.10, block.12)
  test al, al
  jz .LABEL__parse_multiplication_expression_221__12
.LABEL__parse_multiplication_expression_221__10:
  # $23.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 6 570 30
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $23.1:rbx 
  # $24.1: @Token = call(consume_231, self.1, $23.1)
  .loc 6 570 17
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 571 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # $25.1: @Source_Location = load_struct_member(expression.10, location)
  .loc 6 572 67
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $25.1:rbx 
  # $26.1: @AST_Expression = call(parse_unary_expression_222, self.1)
  .loc 6 572 137
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_unary_expression_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $25.1:[rbp-25] $26.1:rax 
  # $27.1: @AST_Modulo_Expression = new(AST_Modulo_Expression)
  .loc 6 572 30
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Modulo_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $25.1:[rbp-25] $26.1:[rbp-33] $27.1:rax 
  # store_struct_member($27.1, location, $25.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $26.1:[rbp-33] $27.1:rax 
  # store_struct_member($27.1, left_expression, expression.10)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $26.1:[rbp-33] $27.1:rax 
  # store_struct_member($27.1, right_expression, $26.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $27.1:rax 
  # expression.7: @AST_Expression = $27.1
  .loc 6 572 17
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] expression.7:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_221__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_221__12:
  # call(consume_space_230, self.1, 1)
  .loc 6 574 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # $20.1: @Source_Location = load_struct_member(expression.10, location)
  .loc 6 575 67
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $20.1:rbx 
  # $21.1: @AST_Expression = call(parse_unary_expression_222, self.1)
  .loc 6 575 137
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_unary_expression_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $20.1:[rbp-25] $21.1:rax 
  # $22.1: @AST_Divide_Expression = new(AST_Divide_Expression)
  .loc 6 575 30
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Divide_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $20.1:[rbp-25] $21.1:[rbp-33] $22.1:rax 
  # store_struct_member($22.1, location, $20.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $21.1:[rbp-33] $22.1:rax 
  # store_struct_member($22.1, left_expression, expression.10)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $21.1:[rbp-33] $22.1:rax 
  # store_struct_member($22.1, right_expression, $21.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $22.1:rax 
  # expression.5: @AST_Expression = $22.1
  .loc 6 575 17
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_221__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_221__9:
  # $11.1: @Matcher = load_struct_member(self.1, required_asterisk)
  .loc 6 578 26
  mov rax, [rbp-8]
  mov rbx, [rax+56]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $11.1:rbx 
  # $12.1: @Token = call(consume_231, self.1, $11.1)
  .loc 6 578 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # call(consume_space_230, self.1, 1)
  .loc 6 579 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # $13.1: @Source_Location = load_struct_member(expression.10, location)
  .loc 6 580 65
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $13.1:rbx 
  # $14.1: @AST_Expression = call(parse_unary_expression_222, self.1)
  .loc 6 580 135
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_unary_expression_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $13.1:[rbp-25] $14.1:rax 
  # $15.1: @AST_Multiply_Expression = new(AST_Multiply_Expression)
  .loc 6 580 26
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Multiply_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $13.1:[rbp-25] $14.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, location, $13.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $14.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, left_expression, expression.10)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $14.1:[rbp-33] $15.1:rax 
  # store_struct_member($15.1, right_expression, $14.1)
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rbx:[rbp-16] $5.1:[rbp-17] $15.1:rax 
  # expression.3: @AST_Expression = $15.1
  .loc 6 580 13
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_221__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_221__4:
  # return(expression.10)
  .loc 6 583 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_multiplication_expression_221__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_221__5:
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 565 86
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  # $7.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 6 565 107
  mov r15, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  # $5.2: Boolean = call(matches_236, self.1, $6.1, $7.1)
  .loc 6 565 73
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(block.6)
  mov [rbp-17], al
  jmp .LABEL__parse_multiplication_expression_221__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: expression.10
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_multiplication_expression_221__end:
  mov rsp, rbp
  pop rbp
  ret

parse_multiplication_expression_221__stack_frame_size: .word 48

  .loc 6 588 1
  .text
parse_unary_expression_222:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_unary_expression_222__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_unary_expression_222__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 6 589 22
  mov rax, [rdi+200]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = call(matches_235, self.1, $1.1)
  .loc 6 589 9
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_235
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_unary_expression_222__3
.LABEL__parse_unary_expression_222__2:
  # $3.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 6 590 34
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: @Token = call(consume_231, self.1, $3.1)
  .loc 6 590 21
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # location.1: @Source_Location = load_struct_member($4.1, location)
  .loc 6 590 21
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 0)
  .loc 6 591 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # $6.1: @AST_Expression = call(parse_cast_expression_223, self.1)
  .loc 6 592 76
  mov rdi, [rbp-8]
  call parse_cast_expression_223
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:rax 
  # $7.1: @AST_Negate_Expression = new(AST_Negate_Expression)
  .loc 6 592 16
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  lea rbx, AST_Negate_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, expression, $6.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # return($7.1)
  .loc 6 592 9
  jmp .LABEL__parse_unary_expression_222__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_unary_expression_222__3:
  # $8.1: @AST_Expression = call(parse_cast_expression_223, self.1)
  .loc 6 594 12
  mov rdi, [rbp-8]
  call parse_cast_expression_223
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 6 594 5
  jmp .LABEL__parse_unary_expression_222__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_unary_expression_222__end:
  mov rsp, rbp
  pop rbp
  ret

parse_unary_expression_222__stack_frame_size: .word 32

  .loc 6 599 1
  .text
parse_cast_expression_223:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_cast_expression_223__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_cast_expression_223__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_access_expression_224, self.1)
  .loc 6 600 19
  mov [rbp-8], rdi
  call parse_access_expression_224
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 601 22
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  # $3.1: @Matcher = load_struct_member(self.1, required_as)
  .loc 6 601 43
  mov r14, [rbx+48]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  # $4.1: Boolean = call(matches_236, self.1, $2.1, $3.1)
  .loc 6 601 9
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-16], rax
  call matches_236
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_cast_expression_223__3
.LABEL__parse_cast_expression_223__2:
  # call(consume_space_230, self.1, 1)
  .loc 6 602 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # $5.1: @Matcher = load_struct_member(self.1, required_as)
  .loc 6 603 22
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:rbx 
  # $6.1: @Token = call(consume_231, self.1, $5.1)
  .loc 6 603 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # call(consume_space_230, self.1, 1)
  .loc 6 604 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 605 17
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] type.1:rax 
  # $8.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 6 606 51
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] type.1:rax $8.1:r15 
  # $9.1: @AST_Cast_Expression = new(AST_Cast_Expression)
  .loc 6 606 16
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 32
  call malloc
  lea rbx, AST_Cast_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] type.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  # store_struct_member($9.1, location, $8.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] type.1:[rbp-24] $9.1:rax 
  # store_struct_member($9.1, value_expression, expression.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] type.1:[rbp-24] $9.1:rax 
  # store_struct_member($9.1, type, type.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 6 606 9
  jmp .LABEL__parse_cast_expression_223__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__parse_cast_expression_223__3:
  # return(expression.1)
  .loc 6 608 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_cast_expression_223__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_cast_expression_223__end:
  mov rsp, rbp
  pop rbp
  ret

parse_cast_expression_223__stack_frame_size: .word 32

  .loc 6 613 1
  .text
parse_access_expression_224:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_access_expression_224__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_access_expression_224__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_primary_expression_227, self.1)
  .loc 6 614 19
  mov [rbp-8], rdi
  call parse_primary_expression_227
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_access_expression_224__2:
  # expression.2: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] 
  # old_expression.1: @AST_Expression = expression.2
  .loc 6 616 9
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 617 26
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:rax $2.1:r15 
  # $3.1: @Matcher = load_struct_member(self.1, required_dot)
  .loc 6 617 47
  mov r14, [rbx+136]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:rax $2.1:r15 $3.1:r14 
  # $4.1: Boolean = call(matches_236, self.1, $2.1, $3.1)
  .loc 6 617 13
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-24], rax
  call matches_236
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.4, block.5)
  test al, al
  jz .LABEL__parse_access_expression_224__5
.LABEL__parse_access_expression_224__4:
  # call(consume_space_230, self.1, 0)
  .loc 6 618 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # $5.1: @Matcher = load_struct_member(self.1, required_dot)
  .loc 6 619 26
  mov rax, [rbp-8]
  mov rbx, [rax+136]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $5.1:rbx 
  # $6.1: @Token = call(consume_231, self.1, $5.1)
  .loc 6 619 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # call(consume_space_230, self.1, 0)
  .loc 6 620 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # $7.1: @Source_Location = load_struct_member(expression.2, location)
  .loc 6 621 70
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:rax:[rbp-16] old_expression.1:[rbp-24] $7.1:rbx 
  # $8.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 621 150
  mov r15, [rbp-8]
  mov r14, [r15+208]
  # [live values]: self.1:r15:[rbp-8] expression.1:[rbp-16] expression.2:rax:[rbp-16] old_expression.1:[rbp-24] $7.1:rbx $8.1:r14 
  # $10.1: @Identifier_Token = call(consume_231, self.1, $8.1)
  .loc 6 621 137
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rbx
  call consume_231
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $7.1:[rbp-32] $10.1:rax 
  # $11.1: @AST_Member_Access_Expression = new(AST_Member_Access_Expression)
  .loc 6 621 26
  mov [rbp-40], rax
  mov rdi, 32
  call malloc
  lea rbx, AST_Member_Access_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $7.1:[rbp-32] $10.1:[rbp-40] $11.1:rax 
  # store_struct_member($11.1, location, $7.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $10.1:[rbp-40] $11.1:rax 
  # store_struct_member($11.1, object_expression, expression.2)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:rbx:[rbp-16] old_expression.1:[rbp-24] $10.1:[rbp-40] $11.1:rax 
  # store_struct_member($11.1, member_name, $10.1)
  mov r15, [rbp-40]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:rbx:[rbp-16] old_expression.1:[rbp-24] $11.1:rax 
  # expression.4: @AST_Expression = $11.1
  .loc 6 621 13
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:rax:[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__parse_access_expression_224__5:
  # expression.11: @AST_Expression = phi(expression.2, expression.4)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # $12.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 623 26
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $12.1:rbx 
  # $13.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 623 47
  mov r15, [rax+280]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $12.1:rbx $13.1:r15 
  # $14.1: Boolean = call(matches_236, self.1, $12.1, $13.1)
  .loc 6 623 13
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $14.1:rax 
  # jump($14.1, block.6, block.7)
  test al, al
  jz .LABEL__parse_access_expression_224__7
.LABEL__parse_access_expression_224__6:
  # call(consume_space_230, self.1, 0)
  .loc 6 624 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # $15.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 625 26
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:rbx 
  # $16.1: @Token = call(consume_231, self.1, $15.1)
  .loc 6 625 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # call(consume_space_230, self.1, 0)
  .loc 6 626 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # $17.1: @List = new(List)
  .loc 6 627 31
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $17.1:rax 
  # store_struct_member($17.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $17.1:rax 
  # store_struct_member($17.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $17.1:rax 
  # store_struct_member($17.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $17.1:rax 
  # call_arguments.1: @List = $17.1
  .loc 6 627 13
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:rax 
  # $18.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 628 30
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:rax $18.1:r15 
  # $19.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 628 51
  mov r14, [rbx+96]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:rax $18.1:r15 $19.1:r14 
  # $20.1: Boolean = call(matches_236, self.1, $18.1, $19.1)
  .loc 6 628 17
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-32], rax
  call matches_236
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $20.1:rax 
  # $21.1: Boolean = $20.1 == false
  .loc 6 628 17
  cmp al, 0
  sete bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $21.1:rbx 
  # jump($21.1, block.8, block.9)
  test bl, bl
  jz .LABEL__parse_access_expression_224__9
.LABEL__parse_access_expression_224__8:
  # call(parse_call_arguments_225, self.1, call_arguments.1)
  .loc 6 629 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  call parse_call_arguments_225
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # jump(block.9)
.LABEL__parse_access_expression_224__9:
  # call(consume_space_230, self.1, 0)
  .loc 6 631 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # $22.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 632 26
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $22.1:rbx 
  # $23.1: @Token = call(consume_231, self.1, $22.1)
  .loc 6 632 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # $24.1: @Source_Location = load_struct_member(expression.11, location)
  .loc 6 633 61
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:rax:[rbp-16] call_arguments.1:[rbp-32] $24.1:rbx 
  # $25.1: @AST_Call_Expression = new(AST_Call_Expression)
  .loc 6 633 26
  mov [rbp-40], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Call_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $24.1:[rbp-40] $25.1:rax 
  # store_struct_member($25.1, location, $24.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $25.1:rax 
  # store_struct_member($25.1, callee, expression.11)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:rbx:[rbp-16] call_arguments.1:[rbp-32] $25.1:rax 
  # store_struct_member($25.1, arguments, call_arguments.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:rbx:[rbp-16] call_arguments.1:r15:[rbp-32] $25.1:rax 
  # expression.6: @AST_Expression = $25.1
  .loc 6 633 13
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:r15:[rbp-32] expression.6:rax:[rbp-16] 
  # jump(block.7)
  mov [rbp-16], rax
.LABEL__parse_access_expression_224__7:
  # expression.12: @AST_Expression = phi(expression.11, expression.6)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # $26.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 635 26
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] $26.1:rbx expression.6:[rbp-16] 
  # $27.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 6 635 47
  mov r15, [rax+272]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] $26.1:rbx $27.1:r15 expression.6:[rbp-16] 
  # $28.1: Boolean = call(matches_236, self.1, $26.1, $27.1)
  .loc 6 635 13
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] $28.1:rax expression.6:[rbp-16] 
  # jump($28.1, block.10, block.11)
  test al, al
  jz .LABEL__parse_access_expression_224__11
.LABEL__parse_access_expression_224__10:
  # call(consume_space_230, self.1, 0)
  .loc 6 636 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # $29.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 6 637 26
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] $29.1:rbx 
  # $30.1: @Token = call(consume_231, self.1, $29.1)
  .loc 6 637 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # call(consume_space_230, self.1, 0)
  .loc 6 638 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # index_expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 639 33
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 640 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-40], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] 
  # $32.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  .loc 6 641 26
  mov rax, [rbp-8]
  mov rbx, [rax+88]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] $32.1:rbx 
  # $33.1: @Token = call(consume_231, self.1, $32.1)
  .loc 6 641 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] 
  # $34.1: @Source_Location = load_struct_member(expression.12, location)
  .loc 6 642 69
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:rax:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] $34.1:rbx 
  # $35.1: @AST_Array_Access_Expression = new(AST_Array_Access_Expression)
  .loc 6 642 26
  mov [rbp-48], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Access_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] $34.1:[rbp-48] $35.1:rax 
  # store_struct_member($35.1, location, $34.1)
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] $35.1:rax 
  # store_struct_member($35.1, array_expression, expression.12)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:rbx:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] $35.1:rax 
  # store_struct_member($35.1, index_expression, index_expression.1)
  mov r15, [rbp-40]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: index_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:rbx:[rbp-16] expression.6:[rbp-16] $35.1:rax 
  # expression.8: @AST_Expression = $35.1
  .loc 6 642 13
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:rax:[rbp-16] 
  # jump(block.11)
  mov [rbp-16], rax
.LABEL__parse_access_expression_224__11:
  # expression.9: @AST_Expression = phi(expression.12, expression.8)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # $36.1: Boolean = expression.9 == old_expression.1
  .loc 6 644 13
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-24]
  sete bl
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:rax:[rbp-16] $36.1:rbx 
  # jump($36.1, block.3, block.2)
  test bl, bl
  jz .LABEL__parse_access_expression_224__2
.LABEL__parse_access_expression_224__3:
  # return(expression.9)
  .loc 6 648 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_access_expression_224__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [discarded value]: expression.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.6:[rbp-16] 
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [discarded value]: expression.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] 
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # [discarded value]: expression.2
  # [discarded value]: old_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_access_expression_224__end:
  mov rsp, rbp
  pop rbp
  ret

parse_access_expression_224__stack_frame_size: .word 48

  .loc 6 654 1
  .text
parse_call_arguments_225:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_arguments_225__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_arguments_225__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  # $1.1: Boolean = call(matches_end_of_line_234, self.1)
  .loc 6 655 9
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call matches_end_of_line_234
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.4)
  test al, al
  jz .LABEL__parse_call_arguments_225__4
.LABEL__parse_call_arguments_225__2:
  # call(consume_end_of_line_228, self.1)
  .loc 6 656 9
  mov rdi, [rbp-16]
  call consume_end_of_line_228
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # $9.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 657 34
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $9.1:rbx 
  # $10.1: Int = $9.1 + 1
  .loc 6 657 34
  mov r15, rbx
  add r15, 1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $10.1:r15 
  # store_struct_member(self.1, current_alignment, $10.1)
  .loc 6 657 9
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.8)
.LABEL__parse_call_arguments_225__8:
  # $11.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 658 29
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $11.1:rbx 
  # $12.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 658 50
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $11.1:rbx $12.1:r15 
  # $13.1: Boolean = call(matches_236, self.1, $11.1, $12.1)
  .loc 6 658 16
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $13.1:rax 
  # $14.1: Boolean = $13.1 == false
  .loc 6 658 16
  cmp al, 0
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $14.1:rbx 
  # jump($14.1, block.9, block.10)
  test bl, bl
  jz .LABEL__parse_call_arguments_225__10
.LABEL__parse_call_arguments_225__9:
  # $15.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 659 32
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $15.1:rbx 
  # $16.1: Int = $15.1 * 4
  .loc 6 659 32
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $16.1:r15 
  # call(consume_space_230, self.1, $16.1)
  .loc 6 659 13
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # $17.1: @AST_Call_Argument = call(parse_call_argument_226, self.1)
  .loc 6 660 35
  mov rdi, [rbp-16]
  call parse_call_argument_226
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $17.1:rax 
  # call(append_268, call_arguments.1, $17.1)
  .loc 6 660 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_268
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # call(consume_end_of_line_228, self.1)
  .loc 6 661 13
  mov rdi, [rbp-16]
  call consume_end_of_line_228
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.8)
  jmp .LABEL__parse_call_arguments_225__8
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
.LABEL__parse_call_arguments_225__10:
  # $18.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 663 34
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $18.1:rbx 
  # $19.1: Int = $18.1 - 1
  .loc 6 663 34
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $19.1:r15 
  # store_struct_member(self.1, current_alignment, $19.1)
  .loc 6 663 9
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] 
  # $20.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 664 28
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $20.1:rbx 
  # $21.1: Int = $20.1 * 4
  .loc 6 664 28
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $21.1:r15 
  # call(consume_space_230, self.1, $21.1)
  .loc 6 664 9
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.3)
.LABEL__parse_call_arguments_225__3:
  # return()
  jmp .LABEL__parse_call_arguments_225__end
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
.LABEL__parse_call_arguments_225__4:
  # $2.1: @AST_Call_Argument = call(parse_call_argument_226, self.1)
  .loc 6 666 31
  mov rdi, [rbp-16]
  call parse_call_argument_226
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $2.1:rax 
  # call(append_268, call_arguments.1, $2.1)
  .loc 6 666 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_268
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.5)
.LABEL__parse_call_arguments_225__5:
  # $3.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 667 29
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $3.1:rbx 
  # $4.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 6 667 50
  mov r15, [rax+120]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $3.1:rbx $4.1:r15 
  # $5.1: Boolean = call(matches_236, self.1, $3.1, $4.1)
  .loc 6 667 16
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.6, block.3)
  test al, al
  jz .LABEL__parse_call_arguments_225__3
.LABEL__parse_call_arguments_225__6:
  # call(consume_space_230, self.1, 0)
  .loc 6 668 13
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # $6.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 6 669 26
  mov rax, [rbp-16]
  mov rbx, [rax+120]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $6.1:rbx 
  # $7.1: @Token = call(consume_231, self.1, $6.1)
  .loc 6 669 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # call(consume_space_230, self.1, 1)
  .loc 6 670 13
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # $8.1: @AST_Call_Argument = call(parse_call_argument_226, self.1)
  .loc 6 671 35
  mov rdi, [rbp-16]
  call parse_call_argument_226
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $8.1:rax 
  # call(append_268, call_arguments.1, $8.1)
  .loc 6 671 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_268
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__parse_call_arguments_225__5
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: call_arguments.1
  # [live values]: 
.LABEL__parse_call_arguments_225__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_arguments_225__stack_frame_size: .word 16

  .loc 6 678 1
  .text
parse_call_argument_226:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_argument_226__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_argument_226__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 679 22
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 679 48
  mov rbx, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 679 69
  mov r15, [rdi+168]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches_237, self.1, $1.1, $2.1, $3.1)
  .loc 6 679 9
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_237
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_call_argument_226__3
.LABEL__parse_call_argument_226__2:
  # $5.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 680 30
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  # name.1: @Identifier_Token = call(consume_231, self.1, $5.1)
  .loc 6 680 17
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] name.1:rax 
  # call(consume_space_230, self.1, 1)
  .loc 6 681 9
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  # $8.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 6 682 22
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] name.1:[rbp-16] $8.1:rbx 
  # $9.1: @Token = call(consume_231, self.1, $8.1)
  .loc 6 682 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  # call(consume_space_230, self.1, 1)
  .loc 6 683 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  # value.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 684 18
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] value.1:rax 
  # $11.1: @AST_Call_Argument = new(AST_Call_Argument)
  .loc 6 685 16
  mov [rbp-24], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] value.1:[rbp-24] $11.1:rax 
  # store_struct_member($11.1, name, name.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: name.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-24] $11.1:rax 
  # store_struct_member($11.1, value_expression, value.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $11.1:rax 
  # return($11.1)
  .loc 6 685 9
  jmp .LABEL__parse_call_argument_226__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_call_argument_226__3:
  # value.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 687 14
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] value.1:rax 
  # $13.1: @AST_Call_Argument = new(AST_Call_Argument)
  .loc 6 688 12
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $13.1:rax 
  # store_struct_member($13.1, name, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $13.1:rax 
  # store_struct_member($13.1, value_expression, value.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $13.1:rax 
  # return($13.1)
  .loc 6 688 5
  jmp .LABEL__parse_call_argument_226__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_argument_226__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_argument_226__stack_frame_size: .word 32

  .loc 6 702 1
  .text
parse_primary_expression_227:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_primary_expression_227__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_primary_expression_227__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 703 22
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = call(matches_235, self.1, $1.1)
  .loc 6 703 9
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_235
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_primary_expression_227__3
.LABEL__parse_primary_expression_227__2:
  # $3.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 6 704 31
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # token.1: @Identifier_Token = call(consume_231, self.1, $3.1)
  .loc 6 704 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 705 55
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] token.1:rax $6.1:rbx 
  # $7.1: @AST_Variable_Expression = new(AST_Variable_Expression)
  .loc 6 705 16
  mov [rbp-16], rax
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Variable_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, location, $6.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $7.1:rax 
  # store_struct_member($7.1, name, token.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # return($7.1)
  .loc 6 705 9
  jmp .LABEL__parse_primary_expression_227__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_227__3:
  # $8.1: @Matcher = load_struct_member(self.1, required_literal)
  .loc 6 707 22
  mov rax, [rbp-8]
  mov rbx, [rax+240]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  # $9.1: Boolean = call(matches_235, self.1, $8.1)
  .loc 6 707 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__parse_primary_expression_227__6
.LABEL__parse_primary_expression_227__5:
  # $10.1: @Matcher = load_struct_member(self.1, required_literal)
  .loc 6 708 31
  mov rax, [rbp-8]
  mov rbx, [rax+240]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  # token.1: @Literal_Token = call(consume_231, self.1, $10.1)
  .loc 6 708 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # $13.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 709 54
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] token.1:rax $13.1:rbx 
  # $14.1: @AST_Literal_Expression = new(AST_Literal_Expression)
  .loc 6 709 16
  mov [rbp-16], rax
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  lea rbx, AST_Literal_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $13.1:[rbp-24] $14.1:rax 
  # store_struct_member($14.1, location, $13.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $14.1:rax 
  # store_struct_member($14.1, literal, token.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $14.1:rax 
  # return($14.1)
  .loc 6 709 9
  jmp .LABEL__parse_primary_expression_227__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_227__6:
  # $15.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 711 22
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $15.1:rbx 
  # $16.1: Boolean = call(matches_235, self.1, $15.1)
  .loc 6 711 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $16.1:rax 
  # jump($16.1, block.8, block.9)
  test al, al
  jz .LABEL__parse_primary_expression_227__9
.LABEL__parse_primary_expression_227__8:
  # $17.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 712 34
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [discarded value]: $16.1
  # [live values]: self.1:rax:[rbp-8] $17.1:rbx 
  # $18.1: @Token = call(consume_231, self.1, $17.1)
  .loc 6 712 21
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $18.1:rax 
  # location.1: @Source_Location = load_struct_member($18.1, location)
  .loc 6 712 21
  mov rbx, [rax+16]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  # call(consume_space_230, self.1, 0)
  .loc 6 713 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rbx
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  # expression.1: @AST_Expression = call(parse_expression_215, self.1)
  .loc 6 714 23
  mov rdi, [rbp-8]
  call parse_expression_215
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] expression.1:rax 
  # call(consume_space_230, self.1, 0)
  .loc 6 715 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] expression.1:[rbp-24] 
  # $21.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 716 22
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] expression.1:[rbp-24] $21.1:rbx 
  # $22.1: @Token = call(consume_231, self.1, $21.1)
  .loc 6 716 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] expression.1:[rbp-24] 
  # $23.1: @AST_Atomic_Expression = new(AST_Atomic_Expression)
  .loc 6 717 16
  mov rdi, 24
  call malloc
  lea rbx, AST_Atomic_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] expression.1:[rbp-24] $23.1:rax 
  # store_struct_member($23.1, location, location.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-24] $23.1:rax 
  # store_struct_member($23.1, expression, expression.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $23.1:rax 
  # return($23.1)
  .loc 6 717 9
  jmp .LABEL__parse_primary_expression_227__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_227__9:
  # $24.1: @Matcher = load_struct_member(self.1, required_new)
  .loc 6 719 22
  mov rax, [rbp-8]
  mov rbx, [rax+256]
  # [live values]: self.1:rax:[rbp-8] $24.1:rbx 
  # $25.1: Boolean = call(matches_235, self.1, $24.1)
  .loc 6 719 9
  mov rdi, rax
  mov rsi, rbx
  call matches_235
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $25.1:rax 
  # jump($25.1, block.11, block.12)
  test al, al
  jz .LABEL__parse_primary_expression_227__12
.LABEL__parse_primary_expression_227__11:
  # $26.1: @Matcher = load_struct_member(self.1, required_new)
  .loc 6 720 31
  mov rax, [rbp-8]
  mov rbx, [rax+256]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-8] $26.1:rbx 
  # token.1: @Token = call(consume_231, self.1, $26.1)
  .loc 6 720 18
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space_230, self.1, 1)
  .loc 6 721 9
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_230
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # type.1: @AST_Type = call(parse_type_214, self.1)
  .loc 6 722 17
  mov rdi, [rbp-8]
  call parse_type_214
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:rax 
  # $29.1: @List = new(List)
  .loc 6 723 27
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] $29.1:rax 
  # store_struct_member($29.1, first_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] $29.1:rax 
  # store_struct_member($29.1, last_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] $29.1:rax 
  # store_struct_member($29.1, size, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] $29.1:rax 
  # call_arguments.1: @List = $29.1
  .loc 6 723 9
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:rax 
  # $30.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 724 26
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:rax $30.1:r15 
  # $31.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 724 47
  mov r14, [rbx+280]
  # [live values]: self.1:rbx:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:rax $30.1:r15 $31.1:r14 
  # $32.1: Boolean = call(matches_236, self.1, $30.1, $31.1)
  .loc 6 724 13
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-32], rax
  call matches_236
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $32.1:rax 
  # jump($32.1, block.13, block.14)
  test al, al
  jz .LABEL__parse_primary_expression_227__14
.LABEL__parse_primary_expression_227__13:
  # call(consume_space_230, self.1, 0)
  .loc 6 725 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # $33.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 6 726 26
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $33.1:rbx 
  # $34.1: @Token = call(consume_231, self.1, $33.1)
  .loc 6 726 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # $35.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 727 30
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $35.1:rbx 
  # $36.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 727 51
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $35.1:rbx $36.1:r15 
  # $37.1: Boolean = call(matches_236, self.1, $35.1, $36.1)
  .loc 6 727 17
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $37.1:rax 
  # $38.1: Boolean = $37.1 == false
  .loc 6 727 17
  cmp al, 0
  sete bl
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $38.1:rbx 
  # jump($38.1, block.15, block.16)
  test bl, bl
  jz .LABEL__parse_primary_expression_227__16
.LABEL__parse_primary_expression_227__15:
  # call(parse_call_arguments_225, self.1, call_arguments.1)
  .loc 6 728 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  call parse_call_arguments_225
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # jump(block.16)
.LABEL__parse_primary_expression_227__16:
  # call(consume_space_230, self.1, 0)
  .loc 6 730 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # $39.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 6 731 26
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $39.1:rbx 
  # $40.1: @Token = call(consume_231, self.1, $39.1)
  .loc 6 731 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # jump(block.14)
.LABEL__parse_primary_expression_227__14:
  # $41.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 733 50
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $41.1:rbx 
  # $42.1: @AST_New_Expression = new(AST_New_Expression)
  .loc 6 733 16
  mov [rbp-40], rbx
  mov rdi, 32
  call malloc
  lea rbx, AST_New_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $41.1:[rbp-40] $42.1:rax 
  # store_struct_member($42.1, location, $41.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] $42.1:rax 
  # store_struct_member($42.1, type, type.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:rbx:[rbp-24] call_arguments.1:[rbp-32] $42.1:rax 
  # store_struct_member($42.1, init_arguments, call_arguments.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:rbx:[rbp-24] call_arguments.1:r15:[rbp-32] $42.1:rax 
  # return($42.1)
  .loc 6 733 9
  jmp .LABEL__parse_primary_expression_227__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [discarded value]: token.1
  # [discarded value]: type.1
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_227__12:
  # return(null)
  .loc 6 735 5
  xor rax, rax
  jmp .LABEL__parse_primary_expression_227__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_primary_expression_227__end:
  mov rsp, rbp
  pop rbp
  ret

parse_primary_expression_227__stack_frame_size: .word 48

  .loc 6 738 1
  .text
consume_end_of_line_228:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_end_of_line_228__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_end_of_line_228__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 739 22
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 6 739 43
  mov rbx, [rdi+128]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = call(matches_236, self.1, $1.1, $2.1)
  .loc 6 739 9
  mov rsi, rax
  mov rdx, rbx
  mov [rbp-8], rdi
  call matches_236
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__consume_end_of_line_228__4
.LABEL__consume_end_of_line_228__2:
  # call(consume_space_230, self.1, 1)
  .loc 6 740 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_230
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 6 741 22
  mov rax, [rbp-8]
  mov rbx, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  # $5.1: @Token = call(consume_231, self.1, $4.1)
  .loc 6 741 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # jump(block.3)
.LABEL__consume_end_of_line_228__3:
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 6 745 18
  mov rax, [rbp-8]
  mov rbx, [rax+160]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  # $7.1: @Token = call(consume_231, self.1, $6.1)
  .loc 6 745 5
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__consume_end_of_line_228__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__consume_end_of_line_228__4:
  # call(consume_space_230, self.1, 0)
  .loc 6 743 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__consume_end_of_line_228__3
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_end_of_line_228__end:
  mov rsp, rbp
  pop rbp
  ret

consume_end_of_line_228__stack_frame_size: .word 16

  .loc 6 748 1
  .text
consume_empty_line_229:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_empty_line_229__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_empty_line_229__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 749 22
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  .loc 6 749 43
  mov rbx, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 6 749 66
  mov r15, [rdi+160]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches_237, self.1, $1.1, $2.1, $3.1)
  .loc 6 749 9
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_237
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__consume_empty_line_229__3
.LABEL__consume_empty_line_229__2:
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 750 26
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  # $6.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 6 750 47
  mov r15, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx $6.1:r15 
  # $7.1: Boolean = call(matches_236, self.1, $5.1, $6.1)
  .loc 6 750 13
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_236
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # jump($7.1, block.4, block.6)
  test al, al
  jz .LABEL__consume_empty_line_229__6
.LABEL__consume_empty_line_229__4:
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  .loc 6 751 32
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  # $9.1: Int = $8.1 * 4
  .loc 6 751 32
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] $9.1:r15 
  # call(consume_space_230, self.1, $9.1)
  .loc 6 751 13
  mov rdi, rax
  mov rsi, r15
  call consume_space_230
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  # $10.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 6 752 26
  mov rax, [rbp-8]
  mov rbx, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  # $11.1: @Token = call(consume_231, self.1, $10.1)
  .loc 6 752 13
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  # jump(block.5)
.LABEL__consume_empty_line_229__5:
  # $12.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 6 756 22
  mov rax, [rbp-8]
  mov rbx, [rax+160]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  # $13.1: @Token = call(consume_231, self.1, $12.1)
  .loc 6 756 9
  mov rdi, rax
  mov rsi, rbx
  call consume_231
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # return(true)
  .loc 6 757 9
  mov al, 1
  jmp .LABEL__consume_empty_line_229__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__consume_empty_line_229__6:
  # call(consume_space_230, self.1, 0)
  .loc 6 754 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_230
  # [live values]: self.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__consume_empty_line_229__5
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__consume_empty_line_229__3:
  # return(false)
  .loc 6 759 5
  mov al, 0
  jmp .LABEL__consume_empty_line_229__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_empty_line_229__end:
  mov rsp, rbp
  pop rbp
  ret

consume_empty_line_229__stack_frame_size: .word 16

  .loc 6 762 1
  .text
consume_space_230:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_space_230__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_space_230__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expected_space_count.1: Int = load_variable(expected_space_count)
  # [live values]: self.1:rdi expected_space_count.1:rsi 
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 764 14
  mov rax, [rdi+0]
  # [live values]: self.1:rdi expected_space_count.1:rsi $1.1:rax 
  # token.1: @Token = load_struct_member($1.1, current_token)
  .loc 6 764 14
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx 
  # Space_Token.2: @Object_Type = load_variable(Space_Token)
  lea rax, Space_Token[rip]
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx Space_Token.2:rax 
  # $3.1: Boolean = call(is_293, token.1, Space_Token.2)
  .loc 6 765 9
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rbx
  call is_293
  # [discarded value]: Space_Token.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__consume_space_230__4
.LABEL__consume_space_230__2:
  # $4.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 766 9
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $4.1:rbx 
  # $5.1: @Token = call(next_token_248, $4.1)
  .loc 6 766 9
  mov rdi, rbx
  call next_token_248
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # space.1: @Space_Token = token.1
  .loc 6 767 18
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space.1:rax 
  # space_count.3: Int = load_struct_member(space.1, count)
  .loc 6 768 23
  mov rbx, [rax+32]
  # [discarded value]: space.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:rbx 
  # jump(block.3)
  mov [rbp-32], rbx
.LABEL__consume_space_230__3:
  # space_count.4: Int = phi(space_count.2, space_count.3)
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # $8.1: Boolean = space_count.4 != expected_space_count.1
  .loc 6 772 9
  mov rax, [rbp-32]
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:rax:[rbp-32] $8.1:rbx 
  # jump($8.1, block.5, block.6)
  test bl, bl
  jz .LABEL__consume_space_230__6
.LABEL__consume_space_230__5:
  # stderr.8: @FILE = load_variable(stderr)
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] stderr.8:stderr[rip] 
  # $9.1: @Source_Location = load_struct_member(token.1, location)
  .loc 6 773 22
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:rax:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] stderr.8:stderr[rip] $9.1:rbx 
  # $10.1: @FILE = call(write_267, stderr.8, $9.1)
  .loc 6 773 9
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_267
  # [discarded value]: stderr.8
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $10.1:rax 
  # $11.1: @FILE = call(write_287, $10.1, ": Consumed ")
  .loc 6 773 9
  mov rdi, rax
  lea rsi, .LABEL__string_291[rip] # ": Consumed "
  call write_287
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $11.1:rax 
  # $12.1: @FILE = call(write_286, $11.1, space_count.4)
  .loc 6 773 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_286
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write_287, $12.1, " spaces where ")
  .loc 6 773 9
  mov rdi, rax
  lea rsi, .LABEL__string_292[rip] # " spaces where "
  call write_287
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(write_286, $13.1, expected_space_count.1)
  .loc 6 773 9
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_286
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $14.1:rax 
  # $15.1: @FILE = call(write_287, $14.1, " are expected")
  .loc 6 773 9
  mov rdi, rax
  lea rsi, .LABEL__string_293[rip] # " are expected"
  call write_287
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(end_line_290, $15.1)
  .loc 6 773 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # jump(block.6)
.LABEL__consume_space_230__6:
  # return()
  jmp .LABEL__consume_space_230__end
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # [discarded value]: space_count.4
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] 
  # [discarded value]: space_count.3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
.LABEL__consume_space_230__4:
  # space_count.2: Int = 0
  .loc 6 770 9
  xor rax, rax
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.2:rax:[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__consume_space_230__3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.2:[rbp-32] 
  # [discarded value]: space_count.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expected_space_count.1
  # [discarded value]: token.1
  # [live values]: 
.LABEL__consume_space_230__end:
  mov rsp, rbp
  pop rbp
  ret

consume_space_230__stack_frame_size: .word 32

  .loc 6 777 1
  .text
consume_231:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_231__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_231__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # $1.1: @Token = call(consume_232, self.1, first_matcher.1, null)
  .loc 6 778 12
  xor rdx, rdx
  call consume_232
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 6 778 5
  jmp .LABEL__consume_231__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_231__end:
  mov rsp, rbp
  pop rbp
  ret

consume_231__stack_frame_size: .word 0

  .loc 6 781 1
  .text
consume_232:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_232__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_232__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # $1.1: @Token = call(consume_233, self.1, first_matcher.1, second_matcher.1, null)
  .loc 6 782 12
  xor rcx, rcx
  call consume_233
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 6 782 5
  jmp .LABEL__consume_232__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_232__end:
  mov rsp, rbp
  pop rbp
  ret

consume_232__stack_frame_size: .word 0

  .loc 6 785 1
  .text
consume_233:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_233__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_233__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 786 14
  mov rax, [rdi+0]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  # token.1: @Token = load_struct_member($1.1, current_token)
  .loc 6 786 14
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  # first_token.1: @Token = token.1
  .loc 6 787 5
  mov [rbp-8], rbx
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:[rbp-8] first_token.1:rbx 
  # $3.1: Boolean = call(accepts_238, first_matcher.1, token.1)
  .loc 6 788 9
  mov [rbp-16], rdi
  mov rdi, rsi
  mov [rbp-24], rsi
  mov rsi, [rbp-8]
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_238
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__consume_233__4
.LABEL__consume_233__2:
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 789 17
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $5.1:rbx 
  # token.3: @Token = call(next_token_248, $5.1)
  .loc 6 789 17
  mov rdi, rbx
  call next_token_248
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:rax:[rbp-8] 
  # jump(block.3)
  mov [rbp-8], rax
.LABEL__consume_233__3:
  # token.10: @Token = phi(token.3, token.1)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] 
  # $7.1: Boolean = second_matcher.1 != null
  .loc 6 795 9
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] $7.1:rax 
  # jump($7.1, block.7, block.8)
  test al, al
  jz .LABEL__consume_233__8
.LABEL__consume_233__7:
  # $8.1: Boolean = call(accepts_238, second_matcher.1, token.10)
  .loc 6 796 13
  mov rdi, [rbp-40]
  mov rsi, [rbp-8]
  call accepts_238
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] $8.1:rax 
  # jump($8.1, block.9, block.11)
  test al, al
  jz .LABEL__consume_233__11
.LABEL__consume_233__9:
  # $10.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 797 21
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] $10.1:rbx 
  # token.6: @Token = call(next_token_248, $10.1)
  .loc 6 797 21
  mov rdi, rbx
  call next_token_248
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.6:rax:[rbp-8] 
  # jump(block.8)
  mov [rbp-8], rax
.LABEL__consume_233__8:
  # token.11: @Token = phi(token.6, token.10)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # $12.1: Boolean = third_matcher.1 != null
  .loc 6 804 9
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] $12.1:rax token.6:[rbp-8] 
  # jump($12.1, block.14, block.15)
  test al, al
  jz .LABEL__consume_233__15
.LABEL__consume_233__14:
  # $13.1: Boolean = call(accepts_238, third_matcher.1, token.11)
  .loc 6 805 13
  mov rdi, [rbp-32]
  mov rsi, [rbp-8]
  call accepts_238
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] $13.1:rax 
  # jump($13.1, block.16, block.18)
  test al, al
  jz .LABEL__consume_233__18
.LABEL__consume_233__16:
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 806 21
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] $15.1:rbx 
  # token.9: @Token = call(next_token_248, $15.1)
  .loc 6 806 21
  mov rdi, rbx
  call next_token_248
  # [discarded value]: $15.1
  # [discarded value]: token.9
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # jump(block.15)
.LABEL__consume_233__15:
  # return(first_token.1)
  .loc 6 813 5
  mov rax, [rbp-48]
  jmp .LABEL__consume_233__end
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
.LABEL__consume_233__18:
  # $14.1: Boolean = load_struct_member(third_matcher.1, is_required)
  .loc 6 808 17
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] $14.1:rbx 
  # jump($14.1, block.19, block.15)
  test bl, bl
  jz .LABEL__consume_233__15
.LABEL__consume_233__19:
  # call(abort_239, self.1, token.11)
  .loc 6 809 17
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_239
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.11:[rbp-8] token.6:[rbp-8] 
  # [discarded value]: token.11
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] token.6:[rbp-8] 
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] 
.LABEL__consume_233__11:
  # $9.1: Boolean = load_struct_member(second_matcher.1, is_required)
  .loc 6 799 17
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] $9.1:rbx 
  # jump($9.1, block.12, block.8)
  test bl, bl
  jz .LABEL__consume_233__8
.LABEL__consume_233__12:
  # call(abort_239, self.1, token.10)
  .loc 6 800 17
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_239
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] token.10:[rbp-8] 
  # [discarded value]: token.10
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] token.3:[rbp-8] 
  # [discarded value]: token.3
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
.LABEL__consume_233__4:
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  .loc 6 791 13
  mov rax, [rbp-24]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:rax:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:rbx 
  # jump($4.1, block.5, block.3)
  test bl, bl
  jz .LABEL__consume_233__3
.LABEL__consume_233__5:
  # call(abort_239, self.1, token.1)
  .loc 6 792 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_239
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: third_matcher.1
  # [discarded value]: token.1
  # [discarded value]: first_token.1
  # [live values]: 
.LABEL__consume_233__end:
  mov rsp, rbp
  pop rbp
  ret

consume_233__stack_frame_size: .word 48

  .loc 6 816 1
  .text
matches_end_of_line_234:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_end_of_line_234__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_end_of_line_234__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 6 817 25
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  .loc 6 817 46
  mov rbx, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 6 817 69
  mov r15, [rdi+160]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches_237, self.1, $1.1, $2.1, $3.1)
  .loc 6 817 12
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_237
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 6 817 5
  jmp .LABEL__matches_end_of_line_234__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__matches_end_of_line_234__end:
  mov rsp, rbp
  pop rbp
  ret

matches_end_of_line_234__stack_frame_size: .word 0

  .loc 6 820 1
  .text
matches_235:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_235__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_235__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # $1.1: Boolean = call(matches_236, self.1, first_matcher.1, null)
  .loc 6 821 12
  xor rdx, rdx
  call matches_236
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 6 821 5
  jmp .LABEL__matches_235__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_235__end:
  mov rsp, rbp
  pop rbp
  ret

matches_235__stack_frame_size: .word 0

  .loc 6 824 1
  .text
matches_236:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_236__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_236__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # $1.1: Boolean = call(matches_237, self.1, first_matcher.1, second_matcher.1, null)
  .loc 6 825 12
  xor rcx, rcx
  call matches_237
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 6 825 5
  jmp .LABEL__matches_236__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_236__end:
  mov rsp, rbp
  pop rbp
  ret

matches_236__stack_frame_size: .word 0

  .loc 6 828 1
  .text
matches_237:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_237__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_237__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 829 14
  mov rax, [rdi+0]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  # token.1: @Token = load_struct_member($1.1, current_token)
  .loc 6 829 14
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  # peek_offset.1: Int = 0
  .loc 6 830 5
  xor rax, rax
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx peek_offset.1:rax 
  # $3.1: Boolean = call(accepts_238, first_matcher.1, token.1)
  .loc 6 831 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_238
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__matches_237__4
.LABEL__matches_237__2:
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 832 17
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $5.1:rbx 
  # token.2: @Token = call(peek_token_247, $5.1, peek_offset.1)
  .loc 6 832 17
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_247
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:rax:[rbp-48] 
  # peek_offset.3: Int = peek_offset.1 + 1
  .loc 6 833 23
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:rax:[rbp-48] peek_offset.3:rbx:[rbp-24] 
  # jump(block.3)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_237__3:
  # peek_offset.8: Int = phi(peek_offset.3, peek_offset.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] 
  # token.7: @Token = phi(token.2, token.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # $8.1: Boolean = second_matcher.1 != null
  .loc 6 837 9
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:rax 
  # jump($8.1, block.8, block.9)
  test al, al
  jz .LABEL__matches_237__9
.LABEL__matches_237__8:
  # $9.1: Boolean = call(accepts_238, second_matcher.1, token.7)
  .loc 6 838 13
  mov rdi, [rbp-40]
  mov rsi, [rbp-48]
  call accepts_238
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:rax 
  # jump($9.1, block.10, block.12)
  test al, al
  jz .LABEL__matches_237__12
.LABEL__matches_237__10:
  # $11.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 839 21
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $11.1:rbx 
  # token.4: @Token = call(peek_token_247, $11.1, peek_offset.8)
  .loc 6 839 21
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_247
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:rax:[rbp-48] 
  # peek_offset.5: Int = peek_offset.8 + 1
  .loc 6 840 27
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:rax:[rbp-48] peek_offset.5:rbx:[rbp-24] 
  # jump(block.9)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_237__9:
  # peek_offset.9: Int = phi(peek_offset.5, peek_offset.8)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # token.8: @Token = phi(token.4, token.7)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # $14.1: Boolean = third_matcher.1 != null
  .loc 6 845 9
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:rax token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump($14.1, block.16, block.17)
  test al, al
  jz .LABEL__matches_237__17
.LABEL__matches_237__16:
  # $15.1: Boolean = call(accepts_238, third_matcher.1, token.8)
  .loc 6 846 13
  mov rdi, [rbp-32]
  mov rsi, [rbp-48]
  call accepts_238
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:rax 
  # jump($15.1, block.18, block.20)
  test al, al
  jz .LABEL__matches_237__20
.LABEL__matches_237__18:
  # $17.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 6 847 21
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] $17.1:rbx 
  # token.6: @Token = call(peek_token_247, $17.1, peek_offset.9)
  .loc 6 847 21
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_247
  # [discarded value]: $17.1
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # peek_offset.7: Int = peek_offset.9 + 1
  .loc 6 848 27
  mov rax, [rbp-24]
  add rax, 1
  # [discarded value]: peek_offset.7
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump(block.17)
.LABEL__matches_237__17:
  # return(true)
  .loc 6 853 5
  mov al, 1
  jmp .LABEL__matches_237__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
.LABEL__matches_237__20:
  # $16.1: Boolean = load_struct_member(third_matcher.1, is_required)
  .loc 6 849 20
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] $16.1:rbx 
  # jump($16.1, block.21, block.17)
  test bl, bl
  jz .LABEL__matches_237__17
.LABEL__matches_237__21:
  # return(false)
  .loc 6 850 13
  mov al, 0
  jmp .LABEL__matches_237__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: peek_offset.9
  # [discarded value]: token.8
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: token.4
  # [discarded value]: peek_offset.5
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
.LABEL__matches_237__12:
  # $10.1: Boolean = load_struct_member(second_matcher.1, is_required)
  .loc 6 841 20
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $10.1:rbx 
  # jump($10.1, block.13, block.9)
  test bl, bl
  jz .LABEL__matches_237__9
.LABEL__matches_237__13:
  # return(false)
  .loc 6 842 13
  mov al, 0
  jmp .LABEL__matches_237__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [discarded value]: peek_offset.8
  # [discarded value]: token.7
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [discarded value]: token.2
  # [discarded value]: peek_offset.3
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
.LABEL__matches_237__4:
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  .loc 6 834 16
  mov rax, [rbp-16]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:rax:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:rbx 
  # jump($4.1, block.5, block.3)
  test bl, bl
  jz .LABEL__matches_237__3
.LABEL__matches_237__5:
  # return(false)
  .loc 6 835 9
  mov al, 0
  jmp .LABEL__matches_237__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: third_matcher.1
  # [discarded value]: token.1
  # [discarded value]: peek_offset.1
  # [live values]: 
.LABEL__matches_237__end:
  mov rsp, rbp
  pop rbp
  ret

matches_237__stack_frame_size: .word 48

  .loc 6 889 1
  .text
accepts_238:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_238__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_238__1:
  # self.1: @Matcher = load_variable(self)
  # [live values]: self.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: self.1:rdi token.1:rsi 
  # Other_Matcher.2: @Object_Type = load_variable(Other_Matcher)
  lea rax, Other_Matcher[rip]
  # [live values]: self.1:rdi token.1:rsi Other_Matcher.2:rax 
  # $1.1: Boolean = call(is_293, self.1, Other_Matcher.2)
  .loc 6 890 9
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call is_293
  # [discarded value]: Other_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__accepts_238__3
.LABEL__accepts_238__2:
  # self.1: @Other_Matcher = self.1
  .loc 6 891 17
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax 
  # Other_Token.2: @Object_Type = load_variable(Other_Token)
  lea rbx, Other_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax Other_Token.2:rbx 
  # $3.1: Boolean = call(is_293, token.1, Other_Token.2)
  .loc 6 892 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: Other_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.4, block.5)
  test al, al
  jz .LABEL__accepts_238__5
.LABEL__accepts_238__4:
  # $4.1: @String = load_struct_member(token.1, lexeme)
  .loc 6 893 20
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] self.1:[rbp-24] $4.1:rbx 
  # $5.1: @String = load_struct_member(self.1, lexeme)
  .loc 6 893 40
  mov r15, [rbp-24]
  mov r14, [r15+9]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] self.1:r15:[rbp-24] $4.1:rbx $5.1:r14 
  # $6.1: Boolean = call(equals_296, $4.1, $5.1)
  .loc 6 893 20
  mov rdi, rbx
  mov rsi, r14
  call equals_296
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $6.1:rax 
  # return($6.1)
  .loc 6 893 13
  jmp .LABEL__accepts_238__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
.LABEL__accepts_238__5:
  # return(false)
  .loc 6 895 9
  mov al, 0
  jmp .LABEL__accepts_238__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__3:
  # Space_Matcher.2: @Object_Type = load_variable(Space_Matcher)
  lea rax, Space_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Space_Matcher.2:rax 
  # $7.1: Boolean = call(is_293, self.1, Space_Matcher.2)
  .loc 6 897 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Space_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__accepts_238__9
.LABEL__accepts_238__8:
  # Space_Token.3: @Object_Type = load_variable(Space_Token)
  lea rax, Space_Token[rip]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Space_Token.3:rax 
  # $8.1: Boolean = call(is_293, token.1, Space_Token.3)
  .loc 6 898 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Space_Token.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 6 898 9
  jmp .LABEL__accepts_238__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__9:
  # Identifier_Matcher.2: @Object_Type = load_variable(Identifier_Matcher)
  lea rax, Identifier_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Identifier_Matcher.2:rax 
  # $9.1: Boolean = call(is_293, self.1, Identifier_Matcher.2)
  .loc 6 900 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Identifier_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.11, block.12)
  test al, al
  jz .LABEL__accepts_238__12
.LABEL__accepts_238__11:
  # Identifier_Token.2: @Object_Type = load_variable(Identifier_Token)
  lea rax, Identifier_Token[rip]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Identifier_Token.2:rax 
  # $10.1: Boolean = call(is_293, token.1, Identifier_Token.2)
  .loc 6 901 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Identifier_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $10.1:rax 
  # return($10.1)
  .loc 6 901 9
  jmp .LABEL__accepts_238__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__12:
  # Keyword_Matcher.2: @Object_Type = load_variable(Keyword_Matcher)
  lea rax, Keyword_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Keyword_Matcher.2:rax 
  # $11.1: Boolean = call(is_293, self.1, Keyword_Matcher.2)
  .loc 6 903 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Keyword_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $11.1:rax 
  # jump($11.1, block.14, block.15)
  test al, al
  jz .LABEL__accepts_238__15
.LABEL__accepts_238__14:
  # self.1: @Keyword_Matcher = self.1
  .loc 6 904 17
  mov rax, [rbp-16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax 
  # Keyword_Token.2: @Object_Type = load_variable(Keyword_Token)
  lea rbx, Keyword_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax Keyword_Token.2:rbx 
  # $13.1: Boolean = call(is_293, token.1, Keyword_Token.2)
  .loc 6 905 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call is_293
  # [discarded value]: Keyword_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $13.1:rax 
  # jump($13.1, block.16, block.17)
  test al, al
  jz .LABEL__accepts_238__17
.LABEL__accepts_238__16:
  # $14.1: @String = load_struct_member(token.1, lexeme)
  .loc 6 906 20
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] self.1:[rbp-24] $14.1:rbx 
  # $15.1: @String = load_struct_member(self.1, lexeme)
  .loc 6 906 40
  mov r15, [rbp-24]
  mov r14, [r15+9]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] self.1:r15:[rbp-24] $14.1:rbx $15.1:r14 
  # $16.1: Boolean = call(equals_296, $14.1, $15.1)
  .loc 6 906 20
  mov rdi, rbx
  mov rsi, r14
  call equals_296
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $16.1:rax 
  # return($16.1)
  .loc 6 906 13
  jmp .LABEL__accepts_238__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
.LABEL__accepts_238__17:
  # return(false)
  .loc 6 908 9
  mov al, 0
  jmp .LABEL__accepts_238__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__15:
  # String_Literal_Matcher.2: @Object_Type = load_variable(String_Literal_Matcher)
  lea rax, String_Literal_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] String_Literal_Matcher.2:rax 
  # $17.1: Boolean = call(is_293, self.1, String_Literal_Matcher.2)
  .loc 6 910 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: String_Literal_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $17.1:rax 
  # jump($17.1, block.20, block.21)
  test al, al
  jz .LABEL__accepts_238__21
.LABEL__accepts_238__20:
  # String_Token.6: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] String_Token.6:rax 
  # $18.1: Boolean = call(is_293, token.1, String_Token.6)
  .loc 6 911 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: String_Token.6
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $18.1:rax 
  # return($18.1)
  .loc 6 911 9
  jmp .LABEL__accepts_238__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__21:
  # Literal_Matcher.2: @Object_Type = load_variable(Literal_Matcher)
  lea rax, Literal_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Literal_Matcher.2:rax 
  # $19.1: Boolean = call(is_293, self.1, Literal_Matcher.2)
  .loc 6 913 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Literal_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $19.1:rax 
  # jump($19.1, block.23, block.24)
  test al, al
  jz .LABEL__accepts_238__24
.LABEL__accepts_238__23:
  # Integer_Token.7: @Object_Type = load_variable(Integer_Token)
  lea rax, Integer_Token[rip]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Integer_Token.7:rax 
  # $21.1: Boolean = call(is_293, token.1, Integer_Token.7)
  .loc 6 914 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Integer_Token.7
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.34, block.33)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_238__33
.LABEL__accepts_238__34:
  # $23.1: Boolean = phi($21.1, $21.2)
  .loc 6 914 16
  mov al, [rbp-17]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:rax 
  # jump($23.1, block.32, block.31)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_238__31
.LABEL__accepts_238__32:
  # $25.1: Boolean = phi($23.1, $23.2)
  .loc 6 914 16
  mov al, [rbp-18]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:rax $23.1:[rbp-18] 
  # jump($25.1, block.30, block.29)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_238__29
.LABEL__accepts_238__30:
  # $27.1: Boolean = phi($25.1, $25.2)
  .loc 6 914 16
  mov al, [rbp-19]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:rax $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump($27.1, block.28, block.27)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_238__27
.LABEL__accepts_238__28:
  # $29.1: Boolean = phi($27.1, $27.2)
  .loc 6 914 16
  mov al, [rbp-20]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.1:rax $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump($29.1, block.26, block.25)
  test al, al
  mov [rbp-21], al
  jz .LABEL__accepts_238__25
.LABEL__accepts_238__26:
  # $29.3: Boolean = phi($29.1, $29.2)
  .loc 6 914 16
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.3:[rbp-21] $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # return($29.3)
  .loc 6 914 9
  mov al, [rbp-21]
  jmp .LABEL__accepts_238__end
  # [discarded value]: $29.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
.LABEL__accepts_238__25:
  # Undefined_Token.4: @Object_Type = load_variable(Undefined_Token)
  lea rax, Undefined_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Undefined_Token.4:rax $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # $29.2: Boolean = call(is_293, token.1, Undefined_Token.4)
  .loc 6 914 149
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Undefined_Token.4
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.2:rax:[rbp-21] $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump(block.26)
  mov [rbp-21], al
  jmp .LABEL__accepts_238__26
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.2:[rbp-21] $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $29.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $29.1:[rbp-21] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
.LABEL__accepts_238__27:
  # Null_Token.5: @Object_Type = load_variable(Null_Token)
  lea rax, Null_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Null_Token.5:rax $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # $27.2: Boolean = call(is_293, token.1, Null_Token.5)
  .loc 6 914 125
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Null_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.2:rax:[rbp-20] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump(block.28)
  mov [rbp-20], al
  jmp .LABEL__accepts_238__28
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.2:[rbp-20] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:[rbp-19] $23.1:[rbp-18] 
.LABEL__accepts_238__29:
  # Boolean_Token.5: @Object_Type = load_variable(Boolean_Token)
  lea rax, Boolean_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Boolean_Token.5:rax $25.1:[rbp-19] $23.1:[rbp-18] 
  # $25.2: Boolean = call(is_293, token.1, Boolean_Token.5)
  .loc 6 914 98
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Boolean_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.2:rax:[rbp-19] $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump(block.30)
  mov [rbp-19], al
  jmp .LABEL__accepts_238__30
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.2:[rbp-19] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:[rbp-18] 
.LABEL__accepts_238__31:
  # Character_Token.5: @Object_Type = load_variable(Character_Token)
  lea rax, Character_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Character_Token.5:rax $23.1:[rbp-18] 
  # $23.2: Boolean = call(is_293, token.1, Character_Token.5)
  .loc 6 914 69
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Character_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.2:rax:[rbp-18] $23.1:[rbp-18] 
  # jump(block.32)
  mov [rbp-18], al
  jmp .LABEL__accepts_238__32
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.2:[rbp-18] $23.1:[rbp-18] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:[rbp-18] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] 
.LABEL__accepts_238__33:
  # String_Token.7: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] String_Token.7:rax 
  # $21.2: Boolean = call(is_293, token.1, String_Token.7)
  .loc 6 914 43
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: String_Token.7
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $21.2:rax:[rbp-17] 
  # jump(block.34)
  mov [rbp-17], al
  jmp .LABEL__accepts_238__34
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $21.2:[rbp-17] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__24:
  # End_Of_Line_Matcher.2: @Object_Type = load_variable(End_Of_Line_Matcher)
  lea rax, End_Of_Line_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_Line_Matcher.2:rax 
  # $31.1: Boolean = call(is_293, self.1, End_Of_Line_Matcher.2)
  .loc 6 916 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: End_Of_Line_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.36, block.37)
  test al, al
  jz .LABEL__accepts_238__37
.LABEL__accepts_238__36:
  # End_Of_Line_Token.2: @Object_Type = load_variable(End_Of_Line_Token)
  lea rax, End_Of_Line_Token[rip]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_Line_Token.2:rax 
  # $32.1: Boolean = call(is_293, token.1, End_Of_Line_Token.2)
  .loc 6 917 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: End_Of_Line_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $32.1:rax 
  # return($32.1)
  .loc 6 917 9
  jmp .LABEL__accepts_238__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__37:
  # Comment_Matcher.2: @Object_Type = load_variable(Comment_Matcher)
  lea rax, Comment_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Comment_Matcher.2:rax 
  # $33.1: Boolean = call(is_293, self.1, Comment_Matcher.2)
  .loc 6 919 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Comment_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $33.1:rax 
  # jump($33.1, block.39, block.40)
  test al, al
  jz .LABEL__accepts_238__40
.LABEL__accepts_238__39:
  # Comment_Token.2: @Object_Type = load_variable(Comment_Token)
  lea rax, Comment_Token[rip]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Comment_Token.2:rax 
  # $34.1: Boolean = call(is_293, token.1, Comment_Token.2)
  .loc 6 920 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: Comment_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $34.1:rax 
  # return($34.1)
  .loc 6 920 9
  jmp .LABEL__accepts_238__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__40:
  # End_Of_File_Matcher.2: @Object_Type = load_variable(End_Of_File_Matcher)
  lea rax, End_Of_File_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_File_Matcher.2:rax 
  # $35.1: Boolean = call(is_293, self.1, End_Of_File_Matcher.2)
  .loc 6 922 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: End_Of_File_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $35.1:rax 
  # jump($35.1, block.42, block.43)
  test al, al
  jz .LABEL__accepts_238__43
.LABEL__accepts_238__42:
  # End_Of_File_Token.3: @Object_Type = load_variable(End_Of_File_Token)
  lea rax, End_Of_File_Token[rip]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_File_Token.3:rax 
  # $36.1: Boolean = call(is_293, token.1, End_Of_File_Token.3)
  .loc 6 923 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_293
  # [discarded value]: End_Of_File_Token.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $36.1:rax 
  # return($36.1)
  .loc 6 923 9
  jmp .LABEL__accepts_238__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_238__43:
  # stderr.9: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] stderr.9:stderr[rip] 
  # $37.1: @FILE = call(write_287, stderr.9, "Unsupported token matcher")
  .loc 6 925 5
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_294[rip] # "Unsupported token matcher"
  call write_287
  # [discarded value]: stderr.9
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $37.1:rax 
  # $38.1: @FILE = call(end_line_290, $37.1)
  .loc 6 925 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # call(abort)
  .loc 6 926 5
  call abort
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token.1
  # [live values]: 
.LABEL__accepts_238__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_238__stack_frame_size: .word 32

  .loc 1 276 1
  .text
abort_239:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_239__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_239__1:
  # self.1: @Parser = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # unexpected_token.1: @Token = load_variable(unexpected_token)
  # [live values]: unexpected_token.1:rsi 
  # stderr.10: @FILE = load_variable(stderr)
  # [live values]: unexpected_token.1:rsi stderr.10:stderr[rip] 
  # $1.1: @Source_Location = load_struct_member(unexpected_token.1, location)
  .loc 1 277 18
  mov rax, [rsi+16]
  # [live values]: unexpected_token.1:rsi stderr.10:stderr[rip] $1.1:rax 
  # $2.1: @FILE = call(write_267, stderr.10, $1.1)
  .loc 1 277 5
  mov rdi, stderr[rip]
  mov [rbp-8], rsi
  mov rsi, rax
  call write_267
  # [discarded value]: stderr.10
  # [discarded value]: $1.1
  # [live values]: unexpected_token.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, ": Unexpected ")
  .loc 1 277 5
  mov rdi, rax
  lea rsi, .LABEL__string_295[rip] # ": Unexpected "
  call write_287
  # [discarded value]: $2.1
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax 
  # $4.1: @Object_Type = load_struct_member(unexpected_token.1, object_type)
  .loc 1 277 74
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  # $5.1: @String = load_struct_member($4.1, name)
  .loc 1 277 74
  mov r14, r15
  add r14, 8
  # [discarded value]: $4.1
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $5.1:r14 
  # $6.1: @FILE = call(write_287, $3.1, $5.1)
  .loc 1 277 5
  mov rdi, rax
  mov rsi, r14
  call write_287
  # [discarded value]: $3.1
  # [discarded value]: $5.1
  # [live values]: unexpected_token.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(write_287, $6.1, ": ")
  .loc 1 277 5
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $6.1
  # [live values]: unexpected_token.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(write_265, $7.1, unexpected_token.1)
  .loc 1 277 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_265
  # [discarded value]: unexpected_token.1
  # [discarded value]: $7.1
  # [live values]: $8.1:rax 
  # $9.1: @FILE = call(end_line_290, $8.1)
  .loc 1 277 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: 
  # call(abort)
  .loc 1 278 5
  call abort
  # [live values]: 
.LABEL__abort_239__end:
  mov rsp, rbp
  pop rbp
  ret

abort_239__stack_frame_size: .word 16

  .loc 1 283 1
  .text
write_240:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_240__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_240__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: file.1:rdi compilation_unit.1:rsi 
  # $1.1: @List = load_struct_member(compilation_unit.1, statements)
  .loc 1 284 19
  mov rax, [rsi+32]
  # [discarded value]: compilation_unit.1
  # [live values]: file.1:rdi $1.1:rax 
  # statements.1: @List_Iterator = call(create_iterator_279, $1.1)
  .loc 1 284 19
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_279
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statements.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__write_240__2:
  # $3.1: Boolean = call(has_next_282, statements.1)
  .loc 1 285 12
  mov rdi, [rbp-16]
  call has_next_282
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__write_240__4
.LABEL__write_240__3:
  # statement.1: @AST_Statement = call(next_283, statements.1)
  .loc 1 286 22
  mov rdi, [rbp-16]
  call next_283
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] statement.1:rax 
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 287 32
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] statement.1:rax $6.1:rbx 
  # $7.1: @FILE = call(write_source_line_242, file.1, $6.1, 0)
  .loc 1 287 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  mov [rbp-24], rax
  call write_source_line_242
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] statement.1:[rbp-24] $7.1:rax 
  # $8.1: @FILE = call(write_241, $7.1, statement.1, 0)
  .loc 1 287 9
  mov rdi, rax
  mov rsi, [rbp-24]
  xor rdx, rdx
  call write_241
  # [discarded value]: statement.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $8.1:rax 
  # $9.1: @FILE = call(end_line_290, $8.1)
  .loc 1 287 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # jump(block.2)
  jmp .LABEL__write_240__2
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
.LABEL__write_240__4:
  # return(file.1)
  .loc 1 289 5
  mov rax, [rbp-8]
  jmp .LABEL__write_240__end
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: statements.1
  # [live values]: 
.LABEL__write_240__end:
  mov rsp, rbp
  pop rbp
  ret

write_240__stack_frame_size: .word 32

  .loc 1 292 1
  .text
write_241:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_241__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_241__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: file.1:rdi statement.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx 
  # AST_Assignment_Statement.3: @Object_Type = load_variable(AST_Assignment_Statement)
  lea rax, AST_Assignment_Statement[rip]
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx AST_Assignment_Statement.3:rax 
  # $1.1: Boolean = call(is_293, statement.1, AST_Assignment_Statement.3)
  .loc 1 293 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_293
  # [discarded value]: AST_Assignment_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_241__3
.LABEL__write_241__2:
  # statement.1: @AST_Assignment_Statement = statement.1
  .loc 1 294 22
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $3.1: @AST_Expression = load_struct_member(statement.1, storage_expression)
  .loc 1 295 27
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $3.1:rbx 
  # $4.1: @FILE = call(write_245, file.1, $3.1)
  .loc 1 295 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_245
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $4.1:rax 
  # $5.1: @FILE = call(write_289, $4.1, ' ')
  .loc 1 295 16
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $5.1:rax 
  # $6.1: @Other_Token = load_struct_member(statement.1, operator)
  .loc 1 295 74
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $5.1:rax $6.1:r15 
  # $7.1: @FILE = call(write_265, $5.1, $6.1)
  .loc 1 295 16
  mov rdi, rax
  mov rsi, r15
  call write_265
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $7.1:rax 
  # $8.1: @FILE = call(write_289, $7.1, ' ')
  .loc 1 295 16
  mov rdi, rax
  mov sil, 32
  call write_289
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $8.1:rax 
  # $9.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 295 111
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $8.1:rax $9.1:r15 
  # $10.1: @FILE = call(write_245, $8.1, $9.1)
  .loc 1 295 16
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $10.1:rax 
  # return($10.1)
  .loc 1 295 9
  jmp .LABEL__write_241__end
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__3:
  # AST_Block_Statement.3: @Object_Type = load_variable(AST_Block_Statement)
  lea rax, AST_Block_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Block_Statement.3:rax 
  # $11.1: Boolean = call(is_293, statement.1, AST_Block_Statement.3)
  .loc 1 298 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Block_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.5, block.6)
  test al, al
  jz .LABEL__write_241__6
.LABEL__write_241__5:
  # $12.1: @FILE = call(write_289, file.1, '{')
  .loc 1 299 9
  mov rdi, [rbp-8]
  mov sil, 123
  call write_289
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $12.1:rax 
  # $13.1: @FILE = call(end_line_290, $12.1)
  .loc 1 299 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # $14.1: @AST_Block_Statement = statement.1
  .loc 1 300 30
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $14.1:rax 
  # $15.1: @List = load_struct_member($14.1, statements)
  .loc 1 300 29
  mov rbx, [rax+16]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $15.1:rbx 
  # block_statements.1: @List_Iterator = call(create_iterator_279, $15.1)
  .loc 1 300 29
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:rax 
  # jump(block.7)
  mov [rbp-32], rax
.LABEL__write_241__7:
  # $17.1: Boolean = call(has_next_282, block_statements.1)
  .loc 1 301 16
  mov rdi, [rbp-32]
  call has_next_282
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $17.1:rax 
  # jump($17.1, block.8, block.9)
  test al, al
  jz .LABEL__write_241__9
.LABEL__write_241__8:
  # block_statement.1: @AST_Statement = call(next_283, block_statements.1)
  .loc 1 302 32
  mov rdi, [rbp-32]
  call next_283
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax 
  # $20.1: @Source_Location = load_struct_member(block_statement.1, location)
  .loc 1 303 36
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax $20.1:rbx 
  # $21.1: Int = alignment.1 + 1
  .loc 1 303 62
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax $20.1:rbx $21.1:r15 
  # $22.1: @FILE = call(write_source_line_242, file.1, $20.1, $21.1)
  .loc 1 303 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-40], rax
  call write_source_line_242
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:[rbp-40] $22.1:rax 
  # $23.1: Int = alignment.1 + 1
  .loc 1 303 100
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:[rbp-40] $22.1:rax $23.1:rbx 
  # $24.1: @FILE = call(write_241, $22.1, block_statement.1, $23.1)
  .loc 1 303 13
  mov rdi, rax
  mov rsi, [rbp-40]
  mov rdx, rbx
  call write_241
  # [discarded value]: block_statement.1
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $24.1:rax 
  # $25.1: @FILE = call(end_line_290, $24.1)
  .loc 1 303 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # jump(block.7)
  jmp .LABEL__write_241__7
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
.LABEL__write_241__9:
  # $26.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 305 39
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $26.1:rbx 
  # $27.1: @FILE = call(write_source_line_242, file.1, $26.1, alignment.1)
  .loc 1 305 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_242
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $27.1:rax 
  # $28.1: @FILE = call(write_289, $27.1, '}')
  .loc 1 305 16
  mov rdi, rax
  mov sil, 125
  call write_289
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $28.1:rax 
  # return($28.1)
  .loc 1 305 9
  jmp .LABEL__write_241__end
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # [discarded value]: block_statements.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__6:
  # AST_Break_Statement.3: @Object_Type = load_variable(AST_Break_Statement)
  lea rax, AST_Break_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Break_Statement.3:rax 
  # $29.1: Boolean = call(is_293, statement.1, AST_Break_Statement.3)
  .loc 1 308 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Break_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $29.1:rax 
  # jump($29.1, block.11, block.12)
  test al, al
  jz .LABEL__write_241__12
.LABEL__write_241__11:
  # $30.1: @FILE = call(write_287, file.1, "break")
  .loc 1 309 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_263[rip] # "break"
  call write_287
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $30.1:rax 
  # return($30.1)
  .loc 1 309 9
  jmp .LABEL__write_241__end
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__12:
  # AST_Expression_Statement.3: @Object_Type = load_variable(AST_Expression_Statement)
  lea rax, AST_Expression_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Expression_Statement.3:rax 
  # $31.1: Boolean = call(is_293, statement.1, AST_Expression_Statement.3)
  .loc 1 312 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Expression_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $31.1:rax 
  # jump($31.1, block.14, block.15)
  test al, al
  jz .LABEL__write_241__15
.LABEL__write_241__14:
  # $32.1: @AST_Expression_Statement = statement.1
  .loc 1 313 28
  mov rax, [rbp-16]
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $32.1:rax 
  # $33.1: @AST_Expression = load_struct_member($32.1, expression)
  .loc 1 313 27
  mov rbx, [rax+16]
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $33.1:rbx 
  # $34.1: @FILE = call(write_245, file.1, $33.1)
  .loc 1 313 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_245
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $34.1:rax 
  # return($34.1)
  .loc 1 313 9
  jmp .LABEL__write_241__end
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__15:
  # AST_Function_Statement.2: @Object_Type = load_variable(AST_Function_Statement)
  lea rax, AST_Function_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Function_Statement.2:rax 
  # $35.1: Boolean = call(is_293, statement.1, AST_Function_Statement.2)
  .loc 1 316 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Function_Statement.2
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $35.1:rax 
  # jump($35.1, block.17, block.18)
  test al, al
  jz .LABEL__write_241__18
.LABEL__write_241__17:
  # statement.1: @AST_Function_Statement = statement.1
  .loc 1 317 22
  mov rax, [rbp-16]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $37.1: @Identifier_Token = load_struct_member(statement.1, name)
  .loc 1 318 20
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $37.1:rbx 
  # $38.1: @FILE = call(write_265, file.1, $37.1)
  .loc 1 318 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_265
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $38.1:rax 
  # $39.1: @FILE = call(write_287, $38.1, " :: (")
  .loc 1 318 9
  mov rdi, rax
  lea rsi, .LABEL__string_172[rip] # " :: ("
  call write_287
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $40.1: @AST_Function_Type = load_struct_member(statement.1, type)
  .loc 1 319 32
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $40.1:rbx 
  # $41.1: @List = load_struct_member($40.1, parameters)
  .loc 1 319 32
  mov r15, [rbx+16]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $41.1:r15 
  # function_parameters.1: @List_Iterator = call(create_iterator_279, $41.1)
  .loc 1 319 32
  mov rdi, r15
  call create_iterator_279
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:rax 
  # $43.1: Boolean = call(has_next_282, function_parameters.1)
  .loc 1 320 13
  mov rdi, rax
  mov [rbp-40], rax
  call has_next_282
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $43.1:rax 
  # jump($43.1, block.21, block.20)
  test al, al
  jz .LABEL__write_241__20
.LABEL__write_241__21:
  # $45.1: @AST_Function_Parameter = call(next_283, function_parameters.1)
  .loc 1 322 28
  mov rdi, [rbp-40]
  call next_283
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $45.1:rax 
  # $46.1: @FILE = call(write_243, file.1, $45.1)
  .loc 1 322 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_243
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # $47.1: Boolean = call(has_next_282, function_parameters.1)
  .loc 1 323 21
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $47.1:rax 
  # jump($47.1, block.23, block.20)
  test al, al
  jz .LABEL__write_241__20
.LABEL__write_241__23:
  # $48.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 324 21
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # jump(block.21)
  jmp .LABEL__write_241__21
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
.LABEL__write_241__20:
  # $49.1: @FILE = call(write_287, file.1, ") -> ")
  .loc 1 330 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_225[rip] # ") -> "
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $49.1:rax 
  # $50.1: @AST_Function_Type = load_struct_member(statement.1, type)
  .loc 1 330 35
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] function_parameters.1:[rbp-40] $49.1:rax $50.1:r15 
  # $51.1: @AST_Type = load_struct_member($50.1, return_type)
  .loc 1 330 35
  mov r14, [r15+24]
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] function_parameters.1:[rbp-40] $49.1:rax $51.1:r14 
  # $52.1: @FILE = call(write_244, $49.1, $51.1)
  .loc 1 330 9
  mov rdi, rax
  mov rsi, r14
  call write_244
  # [discarded value]: $49.1
  # [discarded value]: $51.1
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # $53.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  .loc 1 331 13
  mov rax, [rbp-32]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] function_parameters.1:[rbp-40] $53.1:rbx 
  # $54.1: Boolean = $53.1 == null
  .loc 1 331 13
  cmp rbx, 0
  sete r15b
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] function_parameters.1:[rbp-40] $54.1:r15 
  # jump($54.1, block.27, block.28)
  test r15b, r15b
  jz .LABEL__write_241__28
.LABEL__write_241__27:
  # return(file.1)
  .loc 1 332 13
  mov rax, [rbp-8]
  jmp .LABEL__write_241__end
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
.LABEL__write_241__28:
  # $55.1: @FILE = call(write_287, file.1, " ")
  .loc 1 334 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_296[rip] # " "
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $55.1:rax 
  # $56.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  .loc 1 334 38
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] function_parameters.1:[rbp-40] $55.1:rax $56.1:r15 
  # $57.1: @FILE = call(write_241, $55.1, $56.1, alignment.1)
  .loc 1 334 16
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_241
  # [discarded value]: $55.1
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $57.1:rax 
  # return($57.1)
  .loc 1 334 9
  jmp .LABEL__write_241__end
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [discarded value]: statement.1
  # [discarded value]: function_parameters.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__18:
  # AST_If_Statement.3: @Object_Type = load_variable(AST_If_Statement)
  lea rax, AST_If_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_If_Statement.3:rax 
  # $58.1: Boolean = call(is_293, statement.1, AST_If_Statement.3)
  .loc 1 337 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_If_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $58.1:rax 
  # jump($58.1, block.31, block.32)
  test al, al
  jz .LABEL__write_241__32
.LABEL__write_241__31:
  # statement.1: @AST_If_Statement = statement.1
  .loc 1 338 22
  mov rax, [rbp-16]
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $60.1: @FILE = call(write_287, file.1, "if (")
  .loc 1 339 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_297[rip] # "if ("
  mov [rbp-32], rax
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $60.1:rax 
  # $61.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 1 339 34
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $60.1:rax $61.1:r15 
  # $62.1: @FILE = call(write_245, $60.1, $61.1)
  .loc 1 339 9
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $62.1:rax 
  # $63.1: @FILE = call(write_287, $62.1, ") ")
  .loc 1 339 9
  mov rdi, rax
  lea rsi, .LABEL__string_298[rip] # ") "
  call write_287
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $63.1:rax 
  # $64.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  .loc 1 339 84
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $63.1:rax $64.1:r15 
  # $65.1: @FILE = call(write_241, $63.1, $64.1, alignment.1)
  .loc 1 339 9
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_241
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $66.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 1 340 13
  mov rax, [rbp-32]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $66.1:rbx 
  # $67.1: Boolean = $66.1 != null
  .loc 1 340 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $67.1:r15 
  # jump($67.1, block.33, block.34)
  test r15b, r15b
  jz .LABEL__write_241__34
.LABEL__write_241__33:
  # $68.1: @FILE = call(write_287, file.1, " else ")
  .loc 1 341 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_299[rip] # " else "
  call write_287
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $68.1:rax 
  # $69.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 1 341 40
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $68.1:rax $69.1:r15 
  # $70.1: @FILE = call(write_241, $68.1, $69.1, alignment.1)
  .loc 1 341 13
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_241
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.34)
.LABEL__write_241__34:
  # return(file.1)
  .loc 1 343 9
  mov rax, [rbp-8]
  jmp .LABEL__write_241__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__32:
  # AST_Loop_Statement.3: @Object_Type = load_variable(AST_Loop_Statement)
  lea rax, AST_Loop_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Loop_Statement.3:rax 
  # $71.1: Boolean = call(is_293, statement.1, AST_Loop_Statement.3)
  .loc 1 346 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Loop_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $71.1:rax 
  # jump($71.1, block.36, block.37)
  test al, al
  jz .LABEL__write_241__37
.LABEL__write_241__36:
  # statement.1: @AST_Loop_Statement = statement.1
  .loc 1 347 22
  mov rax, [rbp-16]
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $73.1: @FILE = call(write_287, file.1, "loop ")
  .loc 1 348 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_300[rip] # "loop "
  mov [rbp-32], rax
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $73.1:rax 
  # $74.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 1 348 42
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $73.1:rax $74.1:r15 
  # $75.1: @FILE = call(write_241, $73.1, $74.1, alignment.1)
  .loc 1 348 16
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_241
  # [discarded value]: $73.1
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $75.1:rax 
  # return($75.1)
  .loc 1 348 9
  jmp .LABEL__write_241__end
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__37:
  # AST_Return_Statement.3: @Object_Type = load_variable(AST_Return_Statement)
  lea rax, AST_Return_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Return_Statement.3:rax 
  # $76.1: Boolean = call(is_293, statement.1, AST_Return_Statement.3)
  .loc 1 351 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Return_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $76.1:rax 
  # jump($76.1, block.39, block.40)
  test al, al
  jz .LABEL__write_241__40
.LABEL__write_241__39:
  # statement.1: @AST_Return_Statement = statement.1
  .loc 1 352 22
  mov rax, [rbp-16]
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $78.1: @FILE = call(write_287, file.1, "return")
  .loc 1 353 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_254[rip] # "return"
  mov [rbp-32], rax
  call write_287
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $79.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 354 13
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $79.1:rbx 
  # $80.1: Boolean = $79.1 != null
  .loc 1 354 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $80.1:r15 
  # jump($80.1, block.41, block.42)
  test r15b, r15b
  jz .LABEL__write_241__42
.LABEL__write_241__41:
  # $81.1: @FILE = call(write_287, file.1, " ")
  .loc 1 355 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_296[rip] # " "
  call write_287
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $81.1:rax 
  # $82.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 355 35
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $81.1:rax $82.1:r15 
  # $83.1: @FILE = call(write_245, $81.1, $82.1)
  .loc 1 355 13
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $81.1
  # [discarded value]: $82.1
  # [discarded value]: $83.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.42)
.LABEL__write_241__42:
  # return(file.1)
  .loc 1 357 9
  mov rax, [rbp-8]
  jmp .LABEL__write_241__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__40:
  # AST_Struct_Statement.4: @Object_Type = load_variable(AST_Struct_Statement)
  lea rax, AST_Struct_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Struct_Statement.4:rax 
  # $84.1: Boolean = call(is_293, statement.1, AST_Struct_Statement.4)
  .loc 1 360 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Struct_Statement.4
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $84.1:rax 
  # jump($84.1, block.44, block.45)
  test al, al
  jz .LABEL__write_241__45
.LABEL__write_241__44:
  # statement.1: @AST_Struct_Statement = statement.1
  .loc 1 361 22
  mov rax, [rbp-16]
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $86.1: @Identifier_Token = load_struct_member(statement.1, name)
  .loc 1 362 20
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $86.1:rbx 
  # $87.1: @FILE = call(write_265, file.1, $86.1)
  .loc 1 362 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_265
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $87.1:rax 
  # $88.1: @FILE = call(write_287, $87.1, " :: struct")
  .loc 1 362 9
  mov rdi, rax
  lea rsi, .LABEL__string_301[rip] # " :: struct"
  call write_287
  # [discarded value]: $87.1
  # [discarded value]: $88.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $89.1: @AST_Type = load_struct_member(statement.1, base_type)
  .loc 1 363 13
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $89.1:rbx 
  # $90.1: Boolean = $89.1 != null
  .loc 1 363 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $90.1:r15 
  # jump($90.1, block.46, block.47)
  test r15b, r15b
  jz .LABEL__write_241__47
.LABEL__write_241__46:
  # $91.1: @FILE = call(write_287, file.1, " : ")
  .loc 1 364 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_302[rip] # " : "
  call write_287
  # [discarded value]: $90.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $91.1:rax 
  # $92.1: @AST_Type = load_struct_member(statement.1, base_type)
  .loc 1 364 37
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $91.1:rax $92.1:r15 
  # $93.1: @FILE = call(write_244, $91.1, $92.1)
  .loc 1 364 13
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $91.1
  # [discarded value]: $92.1
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.47)
.LABEL__write_241__47:
  # $94.1: @List = load_struct_member(statement.1, members)
  .loc 1 366 13
  mov rax, [rbp-32]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $94.1:rbx 
  # $95.1: Boolean = $94.1 == null
  .loc 1 366 13
  cmp rbx, 0
  sete r15b
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $95.1:r15 
  # jump($95.1, block.48, block.49)
  test r15b, r15b
  jz .LABEL__write_241__49
.LABEL__write_241__48:
  # return(file.1)
  .loc 1 367 13
  mov rax, [rbp-8]
  jmp .LABEL__write_241__end
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
.LABEL__write_241__49:
  # $96.1: @FILE = call(write_287, file.1, " {")
  .loc 1 369 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_230[rip] # " {"
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $96.1:rax 
  # $97.1: @FILE = call(end_line_290, $96.1)
  .loc 1 369 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $96.1
  # [discarded value]: $97.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $98.1: @List = load_struct_member(statement.1, members)
  .loc 1 370 20
  mov rax, [rbp-32]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $98.1:rbx 
  # members.1: @List_Iterator = call(create_iterator_279, $98.1)
  .loc 1 370 20
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:rax 
  # jump(block.51)
  mov [rbp-40], rax
.LABEL__write_241__51:
  # $100.1: Boolean = call(has_next_282, members.1)
  .loc 1 371 16
  mov rdi, [rbp-40]
  call has_next_282
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $100.1:rax 
  # jump($100.1, block.52, block.53)
  test al, al
  jz .LABEL__write_241__53
.LABEL__write_241__52:
  # member.1: @AST_Struct_Member = call(next_283, members.1)
  .loc 1 372 23
  mov rdi, [rbp-40]
  call next_283
  # [discarded value]: $100.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rax 
  # $103.1: @Source_Location = load_struct_member(member.1, location)
  .loc 1 373 36
  mov rbx, [rax+0]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rax $103.1:rbx 
  # $104.1: Int = alignment.1 + 1
  .loc 1 373 53
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rax $103.1:rbx $104.1:r15 
  # $105.1: @FILE = call(write_source_line_242, file.1, $103.1, $104.1)
  .loc 1 373 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-48], rax
  call write_source_line_242
  # [discarded value]: $103.1
  # [discarded value]: $104.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $105.1:rax 
  # $106.1: @Identifier_Token = load_struct_member(member.1, name)
  .loc 1 373 74
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rbx:[rbp-48] $105.1:rax $106.1:r15 
  # $107.1: @FILE = call(write_265, $105.1, $106.1)
  .loc 1 373 13
  mov rdi, rax
  mov rsi, r15
  call write_265
  # [discarded value]: $105.1
  # [discarded value]: $106.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $107.1:rax 
  # $108.1: @FILE = call(write_287, $107.1, ": ")
  .loc 1 373 13
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $108.1:rax 
  # $109.1: @AST_Type = load_struct_member(member.1, type)
  .loc 1 373 105
  mov rbx, [rbp-48]
  mov r15, [rbx+16]
  # [discarded value]: member.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $108.1:rax $109.1:r15 
  # $110.1: @FILE = call(write_244, $108.1, $109.1)
  .loc 1 373 13
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $108.1
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $110.1:rax 
  # $111.1: @FILE = call(end_line_290, $110.1)
  .loc 1 373 13
  mov rdi, rax
  call end_line_290
  # [discarded value]: $110.1
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # jump(block.51)
  jmp .LABEL__write_241__51
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
.LABEL__write_241__53:
  # $112.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 375 39
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] members.1:[rbp-40] $112.1:rbx 
  # $113.1: @FILE = call(write_source_line_242, file.1, $112.1, alignment.1)
  .loc 1 375 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_242
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $113.1:rax 
  # $114.1: @FILE = call(write_289, $113.1, '}')
  .loc 1 375 16
  mov rdi, rax
  mov sil, 125
  call write_289
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $114.1:rax 
  # return($114.1)
  .loc 1 375 9
  jmp .LABEL__write_241__end
  # [discarded value]: $114.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # [discarded value]: members.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__45:
  # AST_Variable_Statement.3: @Object_Type = load_variable(AST_Variable_Statement)
  lea rax, AST_Variable_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Variable_Statement.3:rax 
  # $115.1: Boolean = call(is_293, statement.1, AST_Variable_Statement.3)
  .loc 1 378 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $115.1:rax 
  # jump($115.1, block.55, block.56)
  test al, al
  jz .LABEL__write_241__56
.LABEL__write_241__55:
  # statement.1: @AST_Variable_Statement = statement.1
  .loc 1 379 22
  mov rax, [rbp-16]
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $117.1: @AST_Variable_Statement = statement.1
  .loc 1 380 21
  mov [rbp-32], rax
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $117.1:rax 
  # $118.1: @Identifier_Token = load_struct_member($117.1, name)
  .loc 1 380 20
  mov rbx, [rax+16]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $118.1:rbx 
  # $119.1: @FILE = call(write_265, file.1, $118.1)
  .loc 1 380 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_265
  # [discarded value]: $118.1
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $120.1: @AST_Type = load_struct_member(statement.1, type)
  .loc 1 381 13
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $120.1:rbx 
  # $121.1: Boolean = $120.1 != null
  .loc 1 381 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $121.1:r15 
  # jump($121.1, block.57, block.59)
  test r15b, r15b
  jz .LABEL__write_241__59
.LABEL__write_241__57:
  # $125.1: @FILE = call(write_287, file.1, ": ")
  .loc 1 382 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $125.1:rax 
  # $126.1: @AST_Type = load_struct_member(statement.1, type)
  .loc 1 382 36
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $125.1:rax $126.1:r15 
  # $127.1: @FILE = call(write_244, $125.1, $126.1)
  .loc 1 382 13
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $125.1
  # [discarded value]: $126.1
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $128.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 383 17
  mov rax, [rbp-32]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $128.1:rbx 
  # $129.1: Boolean = $128.1 != null
  .loc 1 383 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $129.1:r15 
  # jump($129.1, block.60, block.61)
  test r15b, r15b
  jz .LABEL__write_241__61
.LABEL__write_241__60:
  # $130.1: @FILE = call(write_287, file.1, " = ")
  .loc 1 384 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_233[rip] # " = "
  call write_287
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $130.1:rax 
  # $131.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 384 41
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $130.1:rax $131.1:r15 
  # $132.1: @FILE = call(write_245, $130.1, $131.1)
  .loc 1 384 17
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $130.1
  # [discarded value]: $131.1
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.61)
.LABEL__write_241__61:
  # $133.1: Boolean = load_struct_member(statement.1, is_external)
  .loc 1 386 17
  mov rax, [rbp-32]
  mov bl, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax:[rbp-32] $133.1:rbx 
  # jump($133.1, block.62, block.58)
  test bl, bl
  jz .LABEL__write_241__58
.LABEL__write_241__62:
  # $134.1: @FILE = call(write_287, file.1, " = external")
  .loc 1 387 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_303[rip] # " = external"
  call write_287
  # [discarded value]: $133.1
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.58)
.LABEL__write_241__58:
  # return(file.1)
  .loc 1 392 9
  mov rax, [rbp-8]
  jmp .LABEL__write_241__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
.LABEL__write_241__59:
  # $122.1: @FILE = call(write_287, file.1, " := ")
  .loc 1 390 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_304[rip] # " := "
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $122.1:rax 
  # $123.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 390 38
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $122.1:rax $123.1:r15 
  # $124.1: @FILE = call(write_245, $122.1, $123.1)
  .loc 1 390 13
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $122.1
  # [discarded value]: $123.1
  # [discarded value]: $124.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.58)
  jmp .LABEL__write_241__58
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__56:
  # AST_While_Statement.3: @Object_Type = load_variable(AST_While_Statement)
  lea rax, AST_While_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_While_Statement.3:rax 
  # $135.1: Boolean = call(is_293, statement.1, AST_While_Statement.3)
  .loc 1 395 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_While_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $135.1:rax 
  # jump($135.1, block.65, block.66)
  test al, al
  jz .LABEL__write_241__66
.LABEL__write_241__65:
  # statement.1: @AST_While_Statement = statement.1
  .loc 1 396 22
  mov rax, [rbp-16]
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $137.1: @FILE = call(write_287, file.1, "while (")
  .loc 1 397 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_305[rip] # "while ("
  mov [rbp-32], rax
  call write_287
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $137.1:rax 
  # $138.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 1 397 44
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rbx:[rbp-32] $137.1:rax $138.1:r15 
  # $139.1: @FILE = call(write_245, $137.1, $138.1)
  .loc 1 397 16
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $137.1
  # [discarded value]: $138.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $139.1:rax 
  # $140.1: @FILE = call(write_287, $139.1, ") ")
  .loc 1 397 16
  mov rdi, rax
  lea rsi, .LABEL__string_298[rip] # ") "
  call write_287
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $140.1:rax 
  # $141.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 1 397 94
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $140.1:rax $141.1:r15 
  # $142.1: @FILE = call(write_241, $140.1, $141.1, alignment.1)
  .loc 1 397 16
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_241
  # [discarded value]: $140.1
  # [discarded value]: $141.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $142.1:rax 
  # return($142.1)
  .loc 1 397 9
  jmp .LABEL__write_241__end
  # [discarded value]: $142.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_241__66:
  # $143.1: @FILE = call(flush_291, file.1)
  .loc 1 400 5
  mov rdi, [rbp-8]
  call flush_291
  # [discarded value]: $143.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # $144.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 401 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $144.1:rbx 
  # $145.1: @String = call(clone_295, "Unsupported AST_Statement type: ")
  .loc 1 401 31
  lea rdi, .LABEL__string_306[rip] # "Unsupported AST_Statement type: "
  mov [rbp-32], rbx
  call clone_295
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $144.1:[rbp-32] $145.1:rax 
  # $146.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 1 401 81
  mov rbx, [rbp-16]
  mov r15, [rbx+0]
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $144.1:[rbp-32] $145.1:rax $146.1:r15 
  # $147.1: @String = load_struct_member($146.1, name)
  .loc 1 401 81
  mov r14, r15
  add r14, 8
  # [discarded value]: $146.1
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $144.1:[rbp-32] $145.1:rax $147.1:r14 
  # $148.1: @String = call(append_304, $145.1, $147.1)
  .loc 1 401 31
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $145.1
  # [discarded value]: $147.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $144.1:[rbp-32] $148.1:rax 
  # call(abort_264, $144.1, $148.1)
  .loc 1 401 5
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_264
  # [discarded value]: $144.1
  # [discarded value]: $148.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [discarded value]: file.1
  # [discarded value]: statement.1
  # [discarded value]: alignment.1
  # [live values]: 
.LABEL__write_241__end:
  mov rsp, rbp
  pop rbp
  ret

write_241__stack_frame_size: .word 48

  .loc 1 404 1
  .text
write_source_line_242:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_source_line_242__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_source_line_242__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: file.1:rdi location.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx 
  # $1.1: @Source = load_struct_member(location.1, source)
  .loc 1 405 16
  mov rax, [rsi+0]
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, file_path)
  .loc 1 405 16
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $2.1:rbx 
  # $3.1: @FILE = call(write_287, file.1, $2.1)
  .loc 1 405 5
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call write_287
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write_289, $3.1, ':')
  .loc 1 405 5
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] 
  # line.1: Int = load_struct_member(location.1, line)
  .loc 1 406 13
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: location.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx 
  # $6.1: Boolean = line.1 < 1000
  .loc 1 407 9
  cmp rbx, 1000
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx $6.1:rax 
  # jump($6.1, block.2, block.3)
  test al, al
  mov [rbp-32], rbx
  jz .LABEL__write_source_line_242__3
.LABEL__write_source_line_242__2:
  # $7.1: @FILE = call(write_289, file.1, '0')
  .loc 1 408 9
  mov rdi, [rbp-24]
  mov sil, 48
  call write_289
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # jump(block.3)
.LABEL__write_source_line_242__3:
  # $8.1: Boolean = line.1 < 100
  .loc 1 410 9
  cmp QWORD PTR [rbp-32], 100
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.4, block.5)
  test al, al
  jz .LABEL__write_source_line_242__5
.LABEL__write_source_line_242__4:
  # $9.1: @FILE = call(write_289, file.1, '0')
  .loc 1 411 9
  mov rdi, [rbp-24]
  mov sil, 48
  call write_289
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # jump(block.5)
.LABEL__write_source_line_242__5:
  # $10.1: Boolean = line.1 < 10
  .loc 1 413 9
  cmp QWORD PTR [rbp-32], 10
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] $10.1:rax 
  # jump($10.1, block.6, block.7)
  test al, al
  jz .LABEL__write_source_line_242__7
.LABEL__write_source_line_242__6:
  # $11.1: @FILE = call(write_289, file.1, '0')
  .loc 1 414 9
  mov rdi, [rbp-24]
  mov sil, 48
  call write_289
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # jump(block.7)
.LABEL__write_source_line_242__7:
  # $12.1: @FILE = call(write_286, file.1, line.1)
  .loc 1 416 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call write_286
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write_287, $12.1, ": ")
  .loc 1 416 5
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # space_count.1: Int = alignment.1 * 2
  .loc 1 418 20
  mov rax, [rbp-16]
  imul rax, 2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:rax 
  # jump(block.8)
  mov [rbp-40], rax
.LABEL__write_source_line_242__8:
  # space_count.2: Int = phi(space_count.1, space_count.4)
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # $15.1: Boolean = space_count.2 > 0
  .loc 1 419 12
  cmp QWORD PTR [rbp-40], 0
  setg al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] $15.1:rax 
  # jump($15.1, block.9, block.10)
  test al, al
  jz .LABEL__write_source_line_242__10
.LABEL__write_source_line_242__9:
  # $16.1: @FILE = call(write_289, file.1, ' ')
  .loc 1 420 9
  mov rdi, [rbp-24]
  mov sil, 32
  call write_289
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # space_count.4: Int = space_count.2 - 1
  .loc 1 421 23
  mov rax, [rbp-40]
  dec rax
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] space_count.4:rax:[rbp-40] 
  # jump(block.8)
  mov [rbp-40], rax
  jmp .LABEL__write_source_line_242__8
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] space_count.4:[rbp-40] 
  # [discarded value]: space_count.4
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
.LABEL__write_source_line_242__10:
  # return(file.1)
  .loc 1 424 5
  mov rax, [rbp-24]
  jmp .LABEL__write_source_line_242__end
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # [discarded value]: space_count.2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] 
  # [discarded value]: space_count.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [discarded value]: file.1
  # [discarded value]: alignment.1
  # [discarded value]: line.1
  # [live values]: 
.LABEL__write_source_line_242__end:
  mov rsp, rbp
  pop rbp
  ret

write_source_line_242__stack_frame_size: .word 48

  .loc 1 427 1
  .text
write_243:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_243__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_243__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # parameter.1: @AST_Function_Parameter = load_variable(parameter)
  # [live values]: file.1:rdi parameter.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(parameter.1, name)
  .loc 1 428 23
  mov rax, [rsi+8]
  # [live values]: file.1:rdi parameter.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write_265, file.1, $1.1)
  .loc 1 428 12
  mov [rbp-8], rsi
  mov rsi, rax
  call write_265
  # [discarded value]: file.1
  # [discarded value]: $1.1
  # [live values]: parameter.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, ": ")
  .loc 1 428 12
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $2.1
  # [live values]: parameter.1:[rbp-8] $3.1:rax 
  # $4.1: @AST_Type = load_struct_member(parameter.1, type)
  .loc 1 428 57
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [discarded value]: parameter.1
  # [live values]: $3.1:rax $4.1:r15 
  # $5.1: @FILE = call(write_244, $3.1, $4.1)
  .loc 1 428 12
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  # return($5.1)
  .loc 1 428 5
  jmp .LABEL__write_243__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__write_243__end:
  mov rsp, rbp
  pop rbp
  ret

write_243__stack_frame_size: .word 16

  .loc 1 431 1
  .text
write_244:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_244__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_244__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  # AST_Array_Type.3: @Object_Type = load_variable(AST_Array_Type)
  lea rax, AST_Array_Type[rip]
  # [live values]: file.1:rdi type.1:rsi AST_Array_Type.3:rax 
  # $1.1: Boolean = call(is_293, type.1, AST_Array_Type.3)
  .loc 1 432 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Array_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_244__3
.LABEL__write_244__2:
  # type.1: @AST_Array_Type = type.1
  .loc 1 433 17
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rax 
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 1 434 13
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rax $3.1:rbx 
  # $4.1: Boolean = $3.1 != null
  .loc 1 434 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rax $4.1:r15 
  # jump($4.1, block.4, block.5)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__write_244__5
.LABEL__write_244__4:
  # $5.1: @FILE = call(write_289, file.1, '[')
  .loc 1 435 20
  mov rdi, [rbp-8]
  mov sil, 91
  call write_289
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $5.1:rax 
  # $6.1: @AST_Type = load_struct_member(type.1, item_type)
  .loc 1 435 42
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rbx:[rbp-24] $5.1:rax $6.1:r15 
  # $7.1: @FILE = call(write_244, $5.1, $6.1)
  .loc 1 435 20
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $7.1:rax 
  # $8.1: @FILE = call(write_287, $7.1, "; ")
  .loc 1 435 20
  mov rdi, rax
  lea rsi, .LABEL__string_307[rip] # "; "
  call write_287
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $8.1:rax 
  # $9.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 1 435 76
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rbx:[rbp-24] $8.1:rax $9.1:r15 
  # $10.1: @FILE = call(write_245, $8.1, $9.1)
  .loc 1 435 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_289, $10.1, ']')
  .loc 1 435 20
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $11.1:rax 
  # return($11.1)
  .loc 1 435 13
  jmp .LABEL__write_244__end
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] 
.LABEL__write_244__5:
  # $12.1: @FILE = call(write_289, file.1, '[')
  .loc 1 437 16
  mov rdi, [rbp-8]
  mov sil, 91
  call write_289
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $12.1:rax 
  # $13.1: @AST_Type = load_struct_member(type.1, item_type)
  .loc 1 437 38
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rbx:[rbp-24] $12.1:rax $13.1:r15 
  # $14.1: @FILE = call(write_244, $12.1, $13.1)
  .loc 1 437 16
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(write_289, $14.1, ']')
  .loc 1 437 16
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $15.1:rax 
  # return($15.1)
  .loc 1 437 9
  jmp .LABEL__write_244__end
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
.LABEL__write_244__3:
  # AST_Named_Type.3: @Object_Type = load_variable(AST_Named_Type)
  lea rax, AST_Named_Type[rip]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] AST_Named_Type.3:rax 
  # $16.1: Boolean = call(is_293, type.1, AST_Named_Type.3)
  .loc 1 440 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Named_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $16.1:rax 
  # jump($16.1, block.8, block.9)
  test al, al
  jz .LABEL__write_244__9
.LABEL__write_244__8:
  # $17.1: @AST_Named_Type = type.1
  .loc 1 441 28
  mov rax, [rbp-16]
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $17.1:rax 
  # $18.1: @Identifier_Token = load_struct_member($17.1, name)
  .loc 1 441 27
  mov rbx, [rax+16]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $18.1:rbx 
  # $19.1: @FILE = call(write_265, file.1, $18.1)
  .loc 1 441 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_265
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $19.1:rax 
  # return($19.1)
  .loc 1 441 9
  jmp .LABEL__write_244__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
.LABEL__write_244__9:
  # AST_Pointer_Type.3: @Object_Type = load_variable(AST_Pointer_Type)
  lea rax, AST_Pointer_Type[rip]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] AST_Pointer_Type.3:rax 
  # $20.1: Boolean = call(is_293, type.1, AST_Pointer_Type.3)
  .loc 1 444 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Pointer_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $20.1:rax 
  # jump($20.1, block.11, block.12)
  test al, al
  jz .LABEL__write_244__12
.LABEL__write_244__11:
  # $21.1: @FILE = call(write_289, file.1, '@')
  .loc 1 445 16
  mov rdi, [rbp-8]
  mov sil, 64
  call write_289
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $21.1:rax 
  # $22.1: @AST_Pointer_Type = type.1
  .loc 1 445 39
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $21.1:rax $22.1:rbx 
  # $23.1: @AST_Type = load_struct_member($22.1, pointed_type)
  .loc 1 445 38
  mov r15, [rbx+16]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $21.1:rax $23.1:r15 
  # $24.1: @FILE = call(write_244, $21.1, $23.1)
  .loc 1 445 16
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $21.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $24.1:rax 
  # return($24.1)
  .loc 1 445 9
  jmp .LABEL__write_244__end
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
.LABEL__write_244__12:
  # $25.1: @FILE = call(flush_291, file.1)
  .loc 1 448 5
  mov rdi, [rbp-8]
  call flush_291
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # $26.1: @Source_Location = load_struct_member(type.1, location)
  .loc 1 449 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] type.1:rax:[rbp-16] $26.1:rbx 
  # $27.1: @String = call(clone_295, "Unsupported AST_Type type: ")
  .loc 1 449 26
  lea rdi, .LABEL__string_308[rip] # "Unsupported AST_Type type: "
  mov [rbp-24], rbx
  call clone_295
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:[rbp-24] $27.1:rax 
  # $28.1: @Object_Type = load_struct_member(type.1, object_type)
  .loc 1 449 71
  mov rbx, [rbp-16]
  mov r15, [rbx+0]
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $26.1:[rbp-24] $27.1:rax $28.1:r15 
  # $29.1: @String = load_struct_member($28.1, name)
  .loc 1 449 71
  mov r14, r15
  add r14, 8
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $26.1:[rbp-24] $27.1:rax $29.1:r14 
  # $30.1: @String = call(append_304, $27.1, $29.1)
  .loc 1 449 26
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $27.1
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:[rbp-24] $30.1:rax 
  # call(abort_264, $26.1, $30.1)
  .loc 1 449 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_264
  # [discarded value]: $26.1
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__write_244__end:
  mov rsp, rbp
  pop rbp
  ret

write_244__stack_frame_size: .word 32

  .loc 1 452 1
  .text
write_245:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_245__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_245__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: file.1:rdi expression.1:rsi 
  # AST_Array_Access_Expression.4: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rax, AST_Array_Access_Expression[rip]
  # [live values]: file.1:rdi expression.1:rsi AST_Array_Access_Expression.4:rax 
  # $1.1: Boolean = call(is_293, expression.1, AST_Array_Access_Expression.4)
  .loc 1 453 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Array_Access_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_245__3
.LABEL__write_245__2:
  # $2.1: @AST_Array_Access_Expression = expression.1
  .loc 1 454 28
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @AST_Expression = load_struct_member($2.1, array_expression)
  .loc 1 454 27
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $3.1:rbx 
  # $4.1: @FILE = call(write_245, file.1, $3.1)
  .loc 1 454 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_245
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # $5.1: @FILE = call(write_289, $4.1, '[')
  .loc 1 454 16
  mov rdi, rax
  mov sil, 91
  call write_289
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @AST_Array_Access_Expression = expression.1
  .loc 1 454 108
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $5.1:rax $6.1:rbx 
  # $7.1: @AST_Expression = load_struct_member($6.1, index_expression)
  .loc 1 454 107
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $5.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_245, $5.1, $7.1)
  .loc 1 454 16
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # $9.1: @FILE = call(write_289, $8.1, ']')
  .loc 1 454 16
  mov rdi, rax
  mov sil, 93
  call write_289
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 1 454 9
  jmp .LABEL__write_245__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__3:
  # AST_Binary_Expression.2: @Object_Type = load_variable(AST_Binary_Expression)
  lea rax, AST_Binary_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Binary_Expression.2:rax 
  # $10.1: Boolean = call(is_293, expression.1, AST_Binary_Expression.2)
  .loc 1 457 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Binary_Expression.2
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $10.1:rax 
  # jump($10.1, block.5, block.6)
  test al, al
  jz .LABEL__write_245__6
.LABEL__write_245__5:
  # $11.1: @FILE = call(write_289, file.1, '(')
  .loc 1 458 9
  mov rdi, [rbp-8]
  mov sil, 40
  call write_289
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $11.1:rax 
  # $12.1: @AST_Binary_Expression = expression.1
  .loc 1 458 32
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $11.1:rax $12.1:rbx 
  # $13.1: @AST_Expression = load_struct_member($12.1, left_expression)
  .loc 1 458 31
  mov r15, [rbx+16]
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $11.1:rax $13.1:r15 
  # $14.1: @FILE = call(write_245, $11.1, $13.1)
  .loc 1 458 9
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $11.1
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # AST_Add_Expression.3: @Object_Type = load_variable(AST_Add_Expression)
  lea rax, AST_Add_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Add_Expression.3:rax 
  # $15.1: Boolean = call(is_293, expression.1, AST_Add_Expression.3)
  .loc 1 459 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Add_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $15.1:rax 
  # jump($15.1, block.7, block.8)
  test al, al
  jz .LABEL__write_245__8
.LABEL__write_245__7:
  # $16.1: @FILE = call(write_287, file.1, " + ")
  .loc 1 460 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_234[rip] # " + "
  call write_287
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $16.1:rax 
  # $17.1: @AST_Binary_Expression = expression.1
  .loc 1 460 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $16.1:rax $17.1:rbx 
  # $18.1: @AST_Expression = load_struct_member($17.1, right_expression)
  .loc 1 460 44
  mov r15, [rbx+24]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $16.1:rax $18.1:r15 
  # $19.1: @FILE = call(write_245, $16.1, $18.1)
  .loc 1 460 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $16.1
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $19.1:rax 
  # $20.1: @FILE = call(write_289, $19.1, ')')
  .loc 1 460 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $20.1:rax 
  # return($20.1)
  .loc 1 460 13
  jmp .LABEL__write_245__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__8:
  # AST_Divide_Expression.3: @Object_Type = load_variable(AST_Divide_Expression)
  lea rax, AST_Divide_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Divide_Expression.3:rax 
  # $21.1: Boolean = call(is_293, expression.1, AST_Divide_Expression.3)
  .loc 1 462 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Divide_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $21.1:rax 
  # jump($21.1, block.10, block.11)
  test al, al
  jz .LABEL__write_245__11
.LABEL__write_245__10:
  # $22.1: @FILE = call(write_287, file.1, " / ")
  .loc 1 463 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_239[rip] # " / "
  call write_287
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $22.1:rax 
  # $23.1: @AST_Binary_Expression = expression.1
  .loc 1 463 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $22.1:rax $23.1:rbx 
  # $24.1: @AST_Expression = load_struct_member($23.1, right_expression)
  .loc 1 463 44
  mov r15, [rbx+24]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $22.1:rax $24.1:r15 
  # $25.1: @FILE = call(write_245, $22.1, $24.1)
  .loc 1 463 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $25.1:rax 
  # $26.1: @FILE = call(write_289, $25.1, ')')
  .loc 1 463 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $26.1:rax 
  # return($26.1)
  .loc 1 463 13
  jmp .LABEL__write_245__end
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__11:
  # AST_Equals_Expression.3: @Object_Type = load_variable(AST_Equals_Expression)
  lea rax, AST_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Equals_Expression.3:rax 
  # $27.1: Boolean = call(is_293, expression.1, AST_Equals_Expression.3)
  .loc 1 465 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # jump($27.1, block.13, block.14)
  test al, al
  jz .LABEL__write_245__14
.LABEL__write_245__13:
  # $28.1: @FILE = call(write_287, file.1, " == ")
  .loc 1 466 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_240[rip] # " == "
  call write_287
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  # $29.1: @AST_Binary_Expression = expression.1
  .loc 1 466 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $28.1:rax $29.1:rbx 
  # $30.1: @AST_Expression = load_struct_member($29.1, right_expression)
  .loc 1 466 45
  mov r15, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $28.1:rax $30.1:r15 
  # $31.1: @FILE = call(write_245, $28.1, $30.1)
  .loc 1 466 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $28.1
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $31.1:rax 
  # $32.1: @FILE = call(write_289, $31.1, ')')
  .loc 1 466 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $32.1:rax 
  # return($32.1)
  .loc 1 466 13
  jmp .LABEL__write_245__end
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__14:
  # AST_Greater_Than_Expression.3: @Object_Type = load_variable(AST_Greater_Than_Expression)
  lea rax, AST_Greater_Than_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Greater_Than_Expression.3:rax 
  # $33.1: Boolean = call(is_293, expression.1, AST_Greater_Than_Expression.3)
  .loc 1 468 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Greater_Than_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $33.1:rax 
  # jump($33.1, block.16, block.17)
  test al, al
  jz .LABEL__write_245__17
.LABEL__write_245__16:
  # $34.1: @FILE = call(write_287, file.1, " > ")
  .loc 1 469 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_241[rip] # " > "
  call write_287
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $34.1:rax 
  # $35.1: @AST_Binary_Expression = expression.1
  .loc 1 469 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $34.1:rax $35.1:rbx 
  # $36.1: @AST_Expression = load_struct_member($35.1, right_expression)
  .loc 1 469 44
  mov r15, [rbx+24]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $34.1:rax $36.1:r15 
  # $37.1: @FILE = call(write_245, $34.1, $36.1)
  .loc 1 469 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $34.1
  # [discarded value]: $36.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $37.1:rax 
  # $38.1: @FILE = call(write_289, $37.1, ')')
  .loc 1 469 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $38.1:rax 
  # return($38.1)
  .loc 1 469 13
  jmp .LABEL__write_245__end
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__17:
  # AST_Greater_Than_Or_Equals_Expression.3: @Object_Type = load_variable(AST_Greater_Than_Or_Equals_Expression)
  lea rax, AST_Greater_Than_Or_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Greater_Than_Or_Equals_Expression.3:rax 
  # $39.1: Boolean = call(is_293, expression.1, AST_Greater_Than_Or_Equals_Expression.3)
  .loc 1 471 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Greater_Than_Or_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $39.1:rax 
  # jump($39.1, block.19, block.20)
  test al, al
  jz .LABEL__write_245__20
.LABEL__write_245__19:
  # $40.1: @FILE = call(write_287, file.1, " >= ")
  .loc 1 472 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_242[rip] # " >= "
  call write_287
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $40.1:rax 
  # $41.1: @AST_Binary_Expression = expression.1
  .loc 1 472 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $40.1:rax $41.1:rbx 
  # $42.1: @AST_Expression = load_struct_member($41.1, right_expression)
  .loc 1 472 45
  mov r15, [rbx+24]
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $40.1:rax $42.1:r15 
  # $43.1: @FILE = call(write_245, $40.1, $42.1)
  .loc 1 472 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $40.1
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $43.1:rax 
  # $44.1: @FILE = call(write_289, $43.1, ')')
  .loc 1 472 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $44.1:rax 
  # return($44.1)
  .loc 1 472 13
  jmp .LABEL__write_245__end
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__20:
  # AST_Less_Than_Expression.3: @Object_Type = load_variable(AST_Less_Than_Expression)
  lea rax, AST_Less_Than_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Less_Than_Expression.3:rax 
  # $45.1: Boolean = call(is_293, expression.1, AST_Less_Than_Expression.3)
  .loc 1 474 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Less_Than_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $45.1:rax 
  # jump($45.1, block.22, block.23)
  test al, al
  jz .LABEL__write_245__23
.LABEL__write_245__22:
  # $46.1: @FILE = call(write_287, file.1, " < ")
  .loc 1 475 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_243[rip] # " < "
  call write_287
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $46.1:rax 
  # $47.1: @AST_Binary_Expression = expression.1
  .loc 1 475 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $46.1:rax $47.1:rbx 
  # $48.1: @AST_Expression = load_struct_member($47.1, right_expression)
  .loc 1 475 44
  mov r15, [rbx+24]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $46.1:rax $48.1:r15 
  # $49.1: @FILE = call(write_245, $46.1, $48.1)
  .loc 1 475 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $46.1
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $49.1:rax 
  # $50.1: @FILE = call(write_289, $49.1, ')')
  .loc 1 475 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $50.1:rax 
  # return($50.1)
  .loc 1 475 13
  jmp .LABEL__write_245__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__23:
  # AST_Less_Than_Or_Equals_Expression.3: @Object_Type = load_variable(AST_Less_Than_Or_Equals_Expression)
  lea rax, AST_Less_Than_Or_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Less_Than_Or_Equals_Expression.3:rax 
  # $51.1: Boolean = call(is_293, expression.1, AST_Less_Than_Or_Equals_Expression.3)
  .loc 1 477 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Less_Than_Or_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $51.1:rax 
  # jump($51.1, block.25, block.26)
  test al, al
  jz .LABEL__write_245__26
.LABEL__write_245__25:
  # $52.1: @FILE = call(write_287, file.1, " <= ")
  .loc 1 478 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_244[rip] # " <= "
  call write_287
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $52.1:rax 
  # $53.1: @AST_Binary_Expression = expression.1
  .loc 1 478 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $52.1:rax $53.1:rbx 
  # $54.1: @AST_Expression = load_struct_member($53.1, right_expression)
  .loc 1 478 45
  mov r15, [rbx+24]
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $52.1:rax $54.1:r15 
  # $55.1: @FILE = call(write_245, $52.1, $54.1)
  .loc 1 478 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $52.1
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $55.1:rax 
  # $56.1: @FILE = call(write_289, $55.1, ')')
  .loc 1 478 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $56.1:rax 
  # return($56.1)
  .loc 1 478 13
  jmp .LABEL__write_245__end
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__26:
  # AST_Logic_And_Expression.3: @Object_Type = load_variable(AST_Logic_And_Expression)
  lea rax, AST_Logic_And_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Logic_And_Expression.3:rax 
  # $57.1: Boolean = call(is_293, expression.1, AST_Logic_And_Expression.3)
  .loc 1 480 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Logic_And_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $57.1:rax 
  # jump($57.1, block.28, block.29)
  test al, al
  jz .LABEL__write_245__29
.LABEL__write_245__28:
  # $58.1: @FILE = call(write_287, file.1, " && ")
  .loc 1 481 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_309[rip] # " && "
  call write_287
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $58.1:rax 
  # $59.1: @AST_Binary_Expression = expression.1
  .loc 1 481 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $58.1:rax $59.1:rbx 
  # $60.1: @AST_Expression = load_struct_member($59.1, right_expression)
  .loc 1 481 45
  mov r15, [rbx+24]
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $58.1:rax $60.1:r15 
  # $61.1: @FILE = call(write_245, $58.1, $60.1)
  .loc 1 481 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $58.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $61.1:rax 
  # $62.1: @FILE = call(write_289, $61.1, ')')
  .loc 1 481 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $62.1:rax 
  # return($62.1)
  .loc 1 481 13
  jmp .LABEL__write_245__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__29:
  # AST_Logic_Or_Expression.3: @Object_Type = load_variable(AST_Logic_Or_Expression)
  lea rax, AST_Logic_Or_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Logic_Or_Expression.3:rax 
  # $63.1: Boolean = call(is_293, expression.1, AST_Logic_Or_Expression.3)
  .loc 1 483 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Logic_Or_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $63.1:rax 
  # jump($63.1, block.31, block.32)
  test al, al
  jz .LABEL__write_245__32
.LABEL__write_245__31:
  # $64.1: @FILE = call(write_287, file.1, " || ")
  .loc 1 484 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_310[rip] # " || "
  call write_287
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $64.1:rax 
  # $65.1: @AST_Binary_Expression = expression.1
  .loc 1 484 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $64.1:rax $65.1:rbx 
  # $66.1: @AST_Expression = load_struct_member($65.1, right_expression)
  .loc 1 484 45
  mov r15, [rbx+24]
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $64.1:rax $66.1:r15 
  # $67.1: @FILE = call(write_245, $64.1, $66.1)
  .loc 1 484 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $64.1
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $67.1:rax 
  # $68.1: @FILE = call(write_289, $67.1, ')')
  .loc 1 484 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $68.1:rax 
  # return($68.1)
  .loc 1 484 13
  jmp .LABEL__write_245__end
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__32:
  # AST_Modulo_Expression.3: @Object_Type = load_variable(AST_Modulo_Expression)
  lea rax, AST_Modulo_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Modulo_Expression.3:rax 
  # $69.1: Boolean = call(is_293, expression.1, AST_Modulo_Expression.3)
  .loc 1 486 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Modulo_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $69.1:rax 
  # jump($69.1, block.34, block.35)
  test al, al
  jz .LABEL__write_245__35
.LABEL__write_245__34:
  # $70.1: @FILE = call(write_287, file.1, " // ")
  .loc 1 487 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_249[rip] # " // "
  call write_287
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $70.1:rax 
  # $71.1: @AST_Binary_Expression = expression.1
  .loc 1 487 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $70.1:rax $71.1:rbx 
  # $72.1: @AST_Expression = load_struct_member($71.1, right_expression)
  .loc 1 487 45
  mov r15, [rbx+24]
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $70.1:rax $72.1:r15 
  # $73.1: @FILE = call(write_245, $70.1, $72.1)
  .loc 1 487 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $70.1
  # [discarded value]: $72.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $73.1:rax 
  # $74.1: @FILE = call(write_289, $73.1, ')')
  .loc 1 487 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $74.1:rax 
  # return($74.1)
  .loc 1 487 13
  jmp .LABEL__write_245__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__35:
  # AST_Multiply_Expression.3: @Object_Type = load_variable(AST_Multiply_Expression)
  lea rax, AST_Multiply_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Multiply_Expression.3:rax 
  # $75.1: Boolean = call(is_293, expression.1, AST_Multiply_Expression.3)
  .loc 1 489 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Multiply_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $75.1:rax 
  # jump($75.1, block.37, block.38)
  test al, al
  jz .LABEL__write_245__38
.LABEL__write_245__37:
  # $76.1: @FILE = call(write_287, file.1, " * ")
  .loc 1 490 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_250[rip] # " * "
  call write_287
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $76.1:rax 
  # $77.1: @AST_Binary_Expression = expression.1
  .loc 1 490 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $76.1:rax $77.1:rbx 
  # $78.1: @AST_Expression = load_struct_member($77.1, right_expression)
  .loc 1 490 44
  mov r15, [rbx+24]
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $76.1:rax $78.1:r15 
  # $79.1: @FILE = call(write_245, $76.1, $78.1)
  .loc 1 490 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $76.1
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $79.1:rax 
  # $80.1: @FILE = call(write_289, $79.1, ')')
  .loc 1 490 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $80.1:rax 
  # return($80.1)
  .loc 1 490 13
  jmp .LABEL__write_245__end
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__38:
  # AST_Not_Equals_Expression.3: @Object_Type = load_variable(AST_Not_Equals_Expression)
  lea rax, AST_Not_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Not_Equals_Expression.3:rax 
  # $81.1: Boolean = call(is_293, expression.1, AST_Not_Equals_Expression.3)
  .loc 1 492 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Not_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $81.1:rax 
  # jump($81.1, block.40, block.41)
  test al, al
  jz .LABEL__write_245__41
.LABEL__write_245__40:
  # $82.1: @FILE = call(write_287, file.1, " != ")
  .loc 1 493 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_252[rip] # " != "
  call write_287
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $82.1:rax 
  # $83.1: @AST_Binary_Expression = expression.1
  .loc 1 493 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $82.1:rax $83.1:rbx 
  # $84.1: @AST_Expression = load_struct_member($83.1, right_expression)
  .loc 1 493 45
  mov r15, [rbx+24]
  # [discarded value]: $83.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $82.1:rax $84.1:r15 
  # $85.1: @FILE = call(write_245, $82.1, $84.1)
  .loc 1 493 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $82.1
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $85.1:rax 
  # $86.1: @FILE = call(write_289, $85.1, ')')
  .loc 1 493 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $85.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $86.1:rax 
  # return($86.1)
  .loc 1 493 13
  jmp .LABEL__write_245__end
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__41:
  # AST_Substract_Expression.3: @Object_Type = load_variable(AST_Substract_Expression)
  lea rax, AST_Substract_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Substract_Expression.3:rax 
  # $87.1: Boolean = call(is_293, expression.1, AST_Substract_Expression.3)
  .loc 1 495 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Substract_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $87.1:rax 
  # jump($87.1, block.43, block.6)
  test al, al
  jz .LABEL__write_245__6
.LABEL__write_245__43:
  # $88.1: @FILE = call(write_287, file.1, " - ")
  .loc 1 496 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_257[rip] # " - "
  call write_287
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $88.1:rax 
  # $89.1: @AST_Binary_Expression = expression.1
  .loc 1 496 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $88.1:rax $89.1:rbx 
  # $90.1: @AST_Expression = load_struct_member($89.1, right_expression)
  .loc 1 496 44
  mov r15, [rbx+24]
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $88.1:rax $90.1:r15 
  # $91.1: @FILE = call(write_245, $88.1, $90.1)
  .loc 1 496 20
  mov rdi, rax
  mov rsi, r15
  call write_245
  # [discarded value]: $88.1
  # [discarded value]: $90.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $91.1:rax 
  # $92.1: @FILE = call(write_289, $91.1, ')')
  .loc 1 496 20
  mov rdi, rax
  mov sil, 41
  call write_289
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $92.1:rax 
  # return($92.1)
  .loc 1 496 13
  jmp .LABEL__write_245__end
  # [discarded value]: $92.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__6:
  # AST_Call_Expression.4: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Call_Expression.4:rax 
  # $93.1: Boolean = call(is_293, expression.1, AST_Call_Expression.4)
  .loc 1 500 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Call_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $93.1:rax 
  # jump($93.1, block.46, block.47)
  test al, al
  jz .LABEL__write_245__47
.LABEL__write_245__46:
  # $94.1: @AST_Call_Expression = expression.1
  .loc 1 501 21
  mov rax, [rbp-16]
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $94.1:rax 
  # $95.1: @AST_Expression = load_struct_member($94.1, callee)
  .loc 1 501 20
  mov rbx, [rax+16]
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $95.1:rbx 
  # $96.1: @FILE = call(write_245, file.1, $95.1)
  .loc 1 501 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_245
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $96.1:rax 
  # $97.1: @FILE = call(write_289, $96.1, '(')
  .loc 1 501 9
  mov rdi, rax
  mov sil, 40
  call write_289
  # [discarded value]: $96.1
  # [discarded value]: $97.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # $98.1: @AST_Call_Expression = expression.1
  .loc 1 502 28
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $98.1:rax 
  # $99.1: @List = load_struct_member($98.1, arguments)
  .loc 1 502 27
  mov rbx, [rax+24]
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $99.1:rbx 
  # call_arguments.1: @List_Iterator = call(create_iterator_279, $99.1)
  .loc 1 502 27
  mov rdi, rbx
  call create_iterator_279
  # [discarded value]: $99.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:rax 
  # $101.1: Boolean = call(has_next_282, call_arguments.1)
  .loc 1 503 13
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_282
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $101.1:rax 
  # jump($101.1, block.50, block.49)
  test al, al
  jz .LABEL__write_245__49
.LABEL__write_245__50:
  # $103.1: @AST_Expression = call(next_283, call_arguments.1)
  .loc 1 505 28
  mov rdi, [rbp-24]
  call next_283
  # [discarded value]: $101.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $103.1:rax 
  # $104.1: @FILE = call(write_245, file.1, $103.1)
  .loc 1 505 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_245
  # [discarded value]: $103.1
  # [discarded value]: $104.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # $105.1: Boolean = call(has_next_282, call_arguments.1)
  .loc 1 506 21
  mov rdi, [rbp-24]
  call has_next_282
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $105.1:rax 
  # jump($105.1, block.52, block.49)
  test al, al
  jz .LABEL__write_245__49
.LABEL__write_245__52:
  # $106.1: @FILE = call(write_287, file.1, ", ")
  .loc 1 507 21
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_37[rip] # ", "
  call write_287
  # [discarded value]: $105.1
  # [discarded value]: $106.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # jump(block.50)
  jmp .LABEL__write_245__50
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
.LABEL__write_245__49:
  # $107.1: @FILE = call(write_289, file.1, ')')
  .loc 1 513 16
  mov rdi, [rbp-8]
  mov sil, 41
  call write_289
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $107.1:rax 
  # return($107.1)
  .loc 1 513 9
  jmp .LABEL__write_245__end
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # [discarded value]: call_arguments.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__47:
  # AST_Cast_Expression.3: @Object_Type = load_variable(AST_Cast_Expression)
  lea rax, AST_Cast_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Cast_Expression.3:rax 
  # $108.1: Boolean = call(is_293, expression.1, AST_Cast_Expression.3)
  .loc 1 516 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Cast_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $108.1:rax 
  # jump($108.1, block.57, block.58)
  test al, al
  jz .LABEL__write_245__58
.LABEL__write_245__57:
  # $109.1: @AST_Cast_Expression = expression.1
  .loc 1 517 28
  mov rax, [rbp-16]
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $109.1:rax 
  # $110.1: @AST_Expression = load_struct_member($109.1, value_expression)
  .loc 1 517 27
  mov rbx, [rax+16]
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $110.1:rbx 
  # $111.1: @FILE = call(write_245, file.1, $110.1)
  .loc 1 517 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_245
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $111.1:rax 
  # $112.1: @FILE = call(write_287, $111.1, " as ")
  .loc 1 517 16
  mov rdi, rax
  lea rsi, .LABEL__string_311[rip] # " as "
  call write_287
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $112.1:rax 
  # $113.1: @AST_Cast_Expression = expression.1
  .loc 1 517 103
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $112.1:rax $113.1:rbx 
  # $114.1: @AST_Type = load_struct_member($113.1, type)
  .loc 1 517 102
  mov r15, [rbx+24]
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $112.1:rax $114.1:r15 
  # $115.1: @FILE = call(write_244, $112.1, $114.1)
  .loc 1 517 16
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $112.1
  # [discarded value]: $114.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $115.1:rax 
  # return($115.1)
  .loc 1 517 9
  jmp .LABEL__write_245__end
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__58:
  # AST_Literal_Expression.4: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Literal_Expression.4:rax 
  # $116.1: Boolean = call(is_293, expression.1, AST_Literal_Expression.4)
  .loc 1 520 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Literal_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $116.1:rax 
  # jump($116.1, block.60, block.61)
  test al, al
  jz .LABEL__write_245__61
.LABEL__write_245__60:
  # $117.1: @AST_Literal_Expression = expression.1
  .loc 1 521 28
  mov rax, [rbp-16]
  # [discarded value]: $116.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $117.1:rax 
  # $118.1: @Literal_Token = load_struct_member($117.1, literal)
  .loc 1 521 27
  mov rbx, [rax+16]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $118.1:rbx 
  # $119.1: @FILE = call(write_265, file.1, $118.1)
  .loc 1 521 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_265
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $119.1:rax 
  # return($119.1)
  .loc 1 521 9
  jmp .LABEL__write_245__end
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__61:
  # AST_New_Expression.3: @Object_Type = load_variable(AST_New_Expression)
  lea rax, AST_New_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_New_Expression.3:rax 
  # $120.1: Boolean = call(is_293, expression.1, AST_New_Expression.3)
  .loc 1 524 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_New_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $120.1:rax 
  # jump($120.1, block.63, block.64)
  test al, al
  jz .LABEL__write_245__64
.LABEL__write_245__63:
  # $121.1: @FILE = call(write_287, file.1, "new ")
  .loc 1 525 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_312[rip] # "new "
  call write_287
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $121.1:rax 
  # $122.1: @AST_New_Expression = expression.1
  .loc 1 525 42
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $121.1:rax $122.1:rbx 
  # $123.1: @AST_Type = load_struct_member($122.1, type)
  .loc 1 525 41
  mov r15, [rbx+16]
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $121.1:rax $123.1:r15 
  # $124.1: @FILE = call(write_244, $121.1, $123.1)
  .loc 1 525 16
  mov rdi, rax
  mov rsi, r15
  call write_244
  # [discarded value]: $121.1
  # [discarded value]: $123.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $124.1:rax 
  # return($124.1)
  .loc 1 525 9
  jmp .LABEL__write_245__end
  # [discarded value]: $124.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__64:
  # AST_Member_Access_Expression.8: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Member_Access_Expression.8:rax 
  # $125.1: Boolean = call(is_293, expression.1, AST_Member_Access_Expression.8)
  .loc 1 528 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Member_Access_Expression.8
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $125.1:rax 
  # jump($125.1, block.66, block.67)
  test al, al
  jz .LABEL__write_245__67
.LABEL__write_245__66:
  # $126.1: @AST_Member_Access_Expression = expression.1
  .loc 1 529 28
  mov rax, [rbp-16]
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $126.1:rax 
  # $127.1: @AST_Expression = load_struct_member($126.1, object_expression)
  .loc 1 529 27
  mov rbx, [rax+16]
  # [discarded value]: $126.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $127.1:rbx 
  # $128.1: @FILE = call(write_245, file.1, $127.1)
  .loc 1 529 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_245
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $128.1:rax 
  # $129.1: @FILE = call(write_289, $128.1, '.')
  .loc 1 529 16
  mov rdi, rax
  mov sil, 46
  call write_289
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $129.1:rax 
  # $130.1: @AST_Member_Access_Expression = expression.1
  .loc 1 529 110
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $129.1:rax $130.1:rbx 
  # $131.1: @Identifier_Token = load_struct_member($130.1, member_name)
  .loc 1 529 109
  mov r15, [rbx+24]
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $129.1:rax $131.1:r15 
  # $132.1: @FILE = call(write_265, $129.1, $131.1)
  .loc 1 529 16
  mov rdi, rax
  mov rsi, r15
  call write_265
  # [discarded value]: $129.1
  # [discarded value]: $131.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $132.1:rax 
  # return($132.1)
  .loc 1 529 9
  jmp .LABEL__write_245__end
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__67:
  # AST_Variable_Expression.10: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.10:rax 
  # $133.1: Boolean = call(is_293, expression.1, AST_Variable_Expression.10)
  .loc 1 532 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: AST_Variable_Expression.10
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $133.1:rax 
  # jump($133.1, block.69, block.70)
  test al, al
  jz .LABEL__write_245__70
.LABEL__write_245__69:
  # $134.1: @AST_Variable_Expression = expression.1
  .loc 1 533 28
  mov rax, [rbp-16]
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $134.1:rax 
  # $135.1: @Identifier_Token = load_struct_member($134.1, name)
  .loc 1 533 27
  mov rbx, [rax+16]
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $135.1:rbx 
  # $136.1: @FILE = call(write_265, file.1, $135.1)
  .loc 1 533 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_265
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $136.1:rax 
  # return($136.1)
  .loc 1 533 9
  jmp .LABEL__write_245__end
  # [discarded value]: $136.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_245__70:
  # $137.1: @FILE = call(flush_291, file.1)
  .loc 1 536 5
  mov rdi, [rbp-8]
  call flush_291
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # $138.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 537 11
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] expression.1:rax:[rbp-16] $138.1:rbx 
  # $139.1: @String = call(clone_295, "Unsupported AST_Expression type: ")
  .loc 1 537 32
  lea rdi, .LABEL__string_313[rip] # "Unsupported AST_Expression type: "
  mov [rbp-24], rbx
  call clone_295
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:[rbp-24] $139.1:rax 
  # $140.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 1 537 83
  mov rbx, [rbp-16]
  mov r15, [rbx+0]
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $138.1:[rbp-24] $139.1:rax $140.1:r15 
  # $141.1: @String = load_struct_member($140.1, name)
  .loc 1 537 83
  mov r14, r15
  add r14, 8
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $138.1:[rbp-24] $139.1:rax $141.1:r14 
  # $142.1: @String = call(append_304, $139.1, $141.1)
  .loc 1 537 32
  mov rdi, rax
  mov rsi, r14
  call append_304
  # [discarded value]: $139.1
  # [discarded value]: $141.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:[rbp-24] $142.1:rax 
  # call(abort_264, $138.1, $142.1)
  .loc 1 537 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_264
  # [discarded value]: $138.1
  # [discarded value]: $142.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__write_245__end:
  mov rsp, rbp
  pop rbp
  ret

write_245__stack_frame_size: .word 32

  .loc 8 11 1
  .text
create_scanner_246:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_scanner_246__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_scanner_246__1:
  # source.1: @Source = load_variable(source)
  # [live values]: source.1:rdi 
  # $1.1: @Scanner = new(Scanner)
  .loc 8 12 16
  mov [rbp-8], rdi
  mov rdi, 40
  call malloc
  # [live values]: source.1:[rbp-8] $1.1:rax 
  # store_struct_member($1.1, source, source.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: source.1
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, current_char_index, 0)
  mov QWORD PTR [rax+8], 0
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, current_line, 1)
  mov QWORD PTR [rax+16], 1
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, current_column, 1)
  mov QWORD PTR [rax+24], 1
  # [live values]: $1.1:rax 
  # scanner.1: @Scanner = $1.1
  .loc 8 12 5
  # [discarded value]: $1.1
  # [live values]: scanner.1:rax 
  # $2.1: @Token = call(scan_token_251, scanner.1)
  .loc 8 13 29
  mov rdi, rax
  mov [rbp-8], rax
  call scan_token_251
  # [live values]: scanner.1:[rbp-8] $2.1:rax 
  # store_struct_member(scanner.1, current_token, $2.1)
  .loc 8 13 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $2.1
  # [live values]: scanner.1:rbx:[rbp-8] 
  # return(scanner.1)
  .loc 8 14 5
  mov rax, rbx
  jmp .LABEL__create_scanner_246__end
  # [discarded value]: scanner.1
  # [live values]: 
.LABEL__create_scanner_246__end:
  mov rsp, rbp
  pop rbp
  ret

create_scanner_246__stack_frame_size: .word 16

  .loc 8 17 1
  .text
peek_token_247:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_token_247__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_token_247__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # offset.1: Int = load_variable(offset)
  # [live values]: self.1:rdi offset.1:rsi 
  # $1.1: Boolean = offset.1 < 0
  .loc 8 18 9
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi offset.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__peek_token_247__3
.LABEL__peek_token_247__2:
  # call(abort_292, "Invalid state")
  .loc 8 19 9
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call abort_292
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] 
.LABEL__peek_token_247__3:
  # token.1: @Token = load_struct_member(self.1, current_token)
  .loc 8 21 14
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] offset.1:[rbp-8] token.1:rbx 
  # jump(block.4)
  mov [rbp-24], rbx
.LABEL__peek_token_247__4:
  # offset.5: Int = phi(offset.1, offset.4)
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] 
  # token.2: @Token = phi(token.1, token.5)
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # $3.1: @Token = load_struct_member(token.2, next_token)
  .loc 8 23 13
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:rax:[rbp-24] $3.1:rbx 
  # $4.1: Boolean = $3.1 == null
  .loc 8 23 13
  cmp rbx, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:rax:[rbp-24] $4.1:r15 
  # jump($4.1, block.6, block.7)
  test r15b, r15b
  jz .LABEL__peek_token_247__7
.LABEL__peek_token_247__6:
  # $5.1: @Token = call(scan_token_251, self.1)
  .loc 8 24 32
  mov rdi, [rbp-16]
  call scan_token_251
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] $5.1:rax 
  # store_struct_member(token.2, next_token, $5.1)
  .loc 8 24 13
  mov rbx, [rbp-24]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:rbx:[rbp-24] 
  # jump(block.7)
.LABEL__peek_token_247__7:
  # token.5: @Token = load_struct_member(token.2, next_token)
  .loc 8 26 17
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:rbx:[rbp-24] 
  # $7.1: Boolean = offset.5 == 0
  .loc 8 27 13
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:rbx:[rbp-24] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  mov [rbp-24], rbx
  jz .LABEL__peek_token_247__9
.LABEL__peek_token_247__8:
  # return(token.5)
  .loc 8 28 13
  mov rax, [rbp-24]
  jmp .LABEL__peek_token_247__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] 
.LABEL__peek_token_247__9:
  # offset.4: Int = offset.5 - 1
  .loc 8 30 18
  mov rax, [rbp-8]
  dec rax
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] offset.4:rax:[rbp-8] 
  # jump(block.4)
  mov [rbp-8], rax
  jmp .LABEL__peek_token_247__4
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] offset.4:[rbp-8] 
  # [discarded value]: offset.4
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] 
  # [discarded value]: token.5
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # [discarded value]: offset.5
  # [discarded value]: token.2
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: offset.1
  # [live values]: 
.LABEL__peek_token_247__end:
  mov rsp, rbp
  pop rbp
  ret

peek_token_247__stack_frame_size: .word 32

  .loc 8 34 1
  .text
next_token_248:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_token_248__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_token_248__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Token = load_struct_member(self.1, current_token)
  .loc 8 35 9
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = load_struct_member($1.1, next_token)
  .loc 8 35 9
  mov rbx, [rax+24]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # $3.1: Boolean = $2.1 == null
  .loc 8 35 9
  cmp rbx, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__next_token_248__3
.LABEL__next_token_248__2:
  # $4.1: @Token = load_struct_member(self.1, current_token)
  .loc 8 36 9
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  # $5.1: @Token = call(scan_token_251, self.1)
  .loc 8 36 41
  mov rdi, rax
  mov [rbp-16], rbx
  call scan_token_251
  # [live values]: self.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # store_struct_member($4.1, next_token, $5.1)
  .loc 8 36 9
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # jump(block.3)
.LABEL__next_token_248__3:
  # $6.1: @Token = load_struct_member(self.1, current_token)
  .loc 8 38 26
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  # $7.1: @Token = load_struct_member($6.1, next_token)
  .loc 8 38 26
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] $7.1:r15 
  # store_struct_member(self.1, current_token, $7.1)
  .loc 8 38 5
  mov QWORD PTR [rax+32], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] 
  # $8.1: @Token = load_struct_member(self.1, current_token)
  .loc 8 39 12
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  # return($8.1)
  .loc 8 39 5
  mov rax, rbx
  jmp .LABEL__next_token_248__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_token_248__end:
  mov rsp, rbp
  pop rbp
  ret

next_token_248__stack_frame_size: .word 16

  .loc 8 42 1
  .text
peek_char_249:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_char_249__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_char_249__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  .loc 8 43 32
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Source = load_struct_member(self.1, source)
  .loc 8 43 12
  mov rbx, [rdi+0]
  # [discarded value]: self.1
  # [live values]: $1.1:rax $2.1:rbx 
  # $3.1: @Int8 = load_struct_member($2.1, content)
  .loc 8 43 12
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: $1.1:rax $3.1:r15 
  # $4.1: Int8 = load_array_item($3.1, $1.1)
  .loc 8 43 12
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rbx 
  # return($4.1)
  .loc 8 43 5
  mov al, bl
  jmp .LABEL__peek_char_249__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__peek_char_249__end:
  mov rsp, rbp
  pop rbp
  ret

peek_char_249__stack_frame_size: .word 0

  .loc 8 46 1
  .text
next_char_250:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_char_250__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_char_250__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  .loc 8 47 38
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Source = load_struct_member(self.1, source)
  .loc 8 47 18
  mov rbx, [rdi+0]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Int8 = load_struct_member($2.1, content)
  .loc 8 47 18
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $1.1:rax $3.1:r15 
  # next_char.1: Int8 = load_array_item($3.1, $1.1)
  .loc 8 47 18
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi next_char.1:rbx 
  # $5.1: Boolean = next_char.1 != '\0'
  .loc 8 48 9
  cmp bl, 0
  setne al
  # [live values]: self.1:rdi next_char.1:rbx $5.1:rax 
  # jump($5.1, block.2, block.3)
  test al, al
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__next_char_250__3
.LABEL__next_char_250__2:
  # $6.1: Int = load_struct_member(self.1, current_char_index)
  .loc 8 49 35
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $6.1:rbx 
  # $7.1: Int = $6.1 + 1
  .loc 8 49 35
  mov r15, rbx
  add r15, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $7.1:r15 
  # store_struct_member(self.1, current_char_index, $7.1)
  .loc 8 49 9
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] 
  # $8.1: Boolean = next_char.1 == '\n'
  .loc 8 50 13
  cmp BYTE PTR [rbp-1], 10
  sete bl
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $8.1:rbx 
  # jump($8.1, block.4, block.6)
  test bl, bl
  jz .LABEL__next_char_250__6
.LABEL__next_char_250__4:
  # $11.1: Int = load_struct_member(self.1, current_line)
  .loc 8 51 33
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $11.1:rbx 
  # $12.1: Int = $11.1 + 1
  .loc 8 51 33
  mov r15, rbx
  add r15, 1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $12.1:r15 
  # store_struct_member(self.1, current_line, $12.1)
  .loc 8 51 13
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] 
  # store_struct_member(self.1, current_column, 1)
  .loc 8 52 13
  mov QWORD PTR [rax+24], 1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] 
  # jump(block.3)
.LABEL__next_char_250__3:
  # return(next_char.1)
  .loc 8 57 5
  mov al, [rbp-1]
  jmp .LABEL__next_char_250__end
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
.LABEL__next_char_250__6:
  # $9.1: Int = load_struct_member(self.1, current_column)
  .loc 8 54 35
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $9.1:rbx 
  # $10.1: Int = $9.1 + 1
  .loc 8 54 35
  mov r15, rbx
  add r15, 1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] $10.1:r15 
  # store_struct_member(self.1, current_column, $10.1)
  .loc 8 54 13
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-9] next_char.1:[rbp-1] 
  # jump(block.3)
  jmp .LABEL__next_char_250__3
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: next_char.1
  # [live values]: 
.LABEL__next_char_250__end:
  mov rsp, rbp
  pop rbp
  ret

next_char_250__stack_frame_size: .word 16

  .loc 8 60 1
  .text
scan_token_251:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_token_251__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_token_251__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $2.1: @Int8 = call(malloc, 16)
  .loc 13 4 19
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # $3.1: @String = new(String)
  .loc 8 61 21
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:[rbp-16] $3.1:rax 
  # store_struct_member($3.1, data, $2.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, data_size, 16)
  mov QWORD PTR [rax+8], 16
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # token_lexeme.1: @String = $3.1
  .loc 8 61 5
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:rax 
  # $4.1: @Source = load_struct_member(self.1, source)
  .loc 8 62 52
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 
  # $5.1: Int = load_struct_member(self.1, current_line)
  .loc 8 62 72
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 
  # $6.1: Int = load_struct_member(self.1, current_column)
  .loc 8 62 100
  mov r13, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 $6.1:r13 
  # $7.1: @Source_Location = new(Source_Location)
  .loc 8 62 23
  mov [rbp-16], rax
  mov [rbp-24], r13
  mov [rbp-32], r14
  mov [rbp-40], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $4.1:[rbp-40] $5.1:[rbp-32] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, source, $4.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $5.1:[rbp-32] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, line, $5.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  # store_struct_member($7.1, column, $6.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] $7.1:rax 
  # token_location.1: @Source_Location = $7.1
  .loc 8 62 5
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  # next_char.1: Int8 = call(peek_char_249, self.1)
  .loc 8 64 18
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call peek_char_249
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:rax 
  # $9.1: Boolean = call(is_identifier_start_253, next_char.1)
  .loc 8 65 9
  mov dil, al
  mov [rbp-25], al
  call is_identifier_start_253
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:rax 
  # jump($9.1, block.2, block.3)
  test al, al
  jz .LABEL__scan_token_251__3
.LABEL__scan_token_251__2:
  # $10.1: @Token = call(scan_identifier_token_260, self.1, token_lexeme.1, token_location.1)
  .loc 8 66 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_identifier_token_260
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $10.1:rax 
  # return($10.1)
  .loc 8 66 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__3:
  # $11.1: Boolean = call(is_digit_252, next_char.1)
  .loc 8 68 9
  mov dil, [rbp-25]
  call is_digit_252
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $11.1:rax 
  # jump($11.1, block.5, block.6)
  test al, al
  jz .LABEL__scan_token_251__6
.LABEL__scan_token_251__5:
  # $12.1: @Token = call(scan_integer_token_261, self.1, token_lexeme.1, token_location.1)
  .loc 8 69 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_integer_token_261
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $12.1:rax 
  # return($12.1)
  .loc 8 69 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__6:
  # $13.1: Boolean = next_char.1 == '\''
  .loc 8 71 9
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $13.1:rax 
  # jump($13.1, block.8, block.9)
  test al, al
  jz .LABEL__scan_token_251__9
.LABEL__scan_token_251__8:
  # $14.1: @Token = call(scan_character_token_257, self.1, token_lexeme.1, token_location.1)
  .loc 8 72 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_character_token_257
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $14.1:rax 
  # return($14.1)
  .loc 8 72 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__9:
  # $15.1: Boolean = next_char.1 == '"'
  .loc 8 74 9
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $15.1:rax 
  # jump($15.1, block.11, block.12)
  test al, al
  jz .LABEL__scan_token_251__12
.LABEL__scan_token_251__11:
  # $16.1: @Token = call(scan_string_token_263, self.1, token_lexeme.1, token_location.1)
  .loc 8 75 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_string_token_263
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $16.1:rax 
  # return($16.1)
  .loc 8 75 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__12:
  # $17.1: Boolean = next_char.1 == '\\'
  .loc 8 77 9
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $17.1:rax 
  # jump($17.1, block.14, block.15)
  test al, al
  jz .LABEL__scan_token_251__15
.LABEL__scan_token_251__14:
  # $18.1: @Token = call(scan_comment_token_259, self.1, token_lexeme.1, token_location.1)
  .loc 8 78 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_comment_token_259
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $18.1:rax 
  # return($18.1)
  .loc 8 78 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__15:
  # $19.1: Boolean = call(is_space_256, next_char.1)
  .loc 8 80 9
  mov dil, [rbp-25]
  call is_space_256
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $19.1:rax 
  # jump($19.1, block.17, block.18)
  test al, al
  jz .LABEL__scan_token_251__18
.LABEL__scan_token_251__17:
  # $20.1: @Token = call(scan_space_token_262, self.1, token_lexeme.1, token_location.1)
  .loc 8 81 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_space_token_262
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $20.1:rax 
  # return($20.1)
  .loc 8 81 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__18:
  # $21.1: Boolean = next_char.1 == '\n'
  .loc 8 83 9
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $21.1:rax 
  # jump($21.1, block.20, block.21)
  test al, al
  jz .LABEL__scan_token_251__21
.LABEL__scan_token_251__20:
  # $22.1: Int8 = call(next_char_250, self.1)
  .loc 8 84 9
  mov rdi, [rbp-8]
  call next_char_250
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # $23.1: @End_Of_Line_Token = new(End_Of_Line_Token)
  .loc 8 85 16
  mov rdi, 32
  call malloc
  lea rbx, End_Of_Line_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $23.1:rax 
  # store_struct_member($23.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $23.1:rax 
  # store_struct_member($23.1, location, token_location.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $23.1:rax 
  # store_struct_member($23.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $23.1:rax 
  # return($23.1)
  .loc 8 85 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__21:
  # $24.1: Boolean = next_char.1 == '\0'
  .loc 8 87 9
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $24.1:rax 
  # jump($24.1, block.23, block.24)
  test al, al
  jz .LABEL__scan_token_251__24
.LABEL__scan_token_251__23:
  # $25.1: Int8 = call(next_char_250, self.1)
  .loc 8 88 9
  mov rdi, [rbp-8]
  call next_char_250
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # $26.1: @End_Of_File_Token = new(End_Of_File_Token)
  .loc 8 89 16
  mov rdi, 32
  call malloc
  lea rbx, End_Of_File_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $26.1:rax 
  # store_struct_member($26.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $26.1:rax 
  # store_struct_member($26.1, location, token_location.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $26.1:rax 
  # store_struct_member($26.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $26.1:rax 
  # return($26.1)
  .loc 8 89 9
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_251__24:
  # $27.1: Int8 = call(next_char_250, self.1)
  .loc 8 91 25
  mov rdi, [rbp-8]
  call next_char_250
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $27.1:rax 
  # $28.1: @String = call(append_302, token_lexeme.1, $27.1)
  .loc 8 91 5
  mov rdi, [rbp-16]
  mov sil, al
  call append_302
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # $29.1: @Other_Token = new(Other_Token)
  .loc 8 92 12
  mov rdi, 32
  call malloc
  lea rbx, Other_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $29.1:rax 
  # store_struct_member($29.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $29.1:rax 
  # store_struct_member($29.1, location, token_location.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $29.1:rax 
  # store_struct_member($29.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $29.1:rax 
  # return($29.1)
  .loc 8 92 5
  jmp .LABEL__scan_token_251__end
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [discarded value]: next_char.1
  # [live values]: 
.LABEL__scan_token_251__end:
  mov rsp, rbp
  pop rbp
  ret

scan_token_251__stack_frame_size: .word 48

  .loc 8 95 1
  .text
is_digit_252:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_digit_252__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_digit_252__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Int = cast(char.1)
  .loc 8 96 12
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  # $2.1: Int = cast('0')
  .loc 8 96 27
  mov bl, 48
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  # $4.1: Boolean = $1.1 >= $2.1
  .loc 8 96 12
  cmp rax, rbx
  setge r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_digit_252__3
.LABEL__is_digit_252__2:
  # $5.1: Int = cast(char.1)
  .loc 8 96 41
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  # $6.1: Int = cast('9')
  .loc 8 96 56
  mov bl, 57
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  # $4.2: Boolean = $5.1 <= $6.1
  .loc 8 96 41
  cmp rax, rbx
  setle r15b
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(block.3)
  mov [rbp-2], r15b
.LABEL__is_digit_252__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 8 96 12
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $4.3:[rbp-2] 
  # return($4.3)
  .loc 8 96 5
  mov al, [rbp-2]
  jmp .LABEL__is_digit_252__end
  # [discarded value]: $4.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: char.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__is_digit_252__end:
  mov rsp, rbp
  pop rbp
  ret

is_digit_252__stack_frame_size: .word 16

  .loc 8 99 1
  .text
is_identifier_start_253:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_start_253__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_start_253__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $2.1: Boolean = call(is_letter_255, char.1)
  .loc 8 100 12
  mov [rbp-1], dil
  call is_letter_255
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # jump($2.1, block.3, block.2)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_start_253__2
.LABEL__is_identifier_start_253__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 8 100 12
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.3:[rbp-2] 
  # return($2.3)
  .loc 8 100 5
  mov al, [rbp-2]
  jmp .LABEL__is_identifier_start_253__end
  # [discarded value]: $2.3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
.LABEL__is_identifier_start_253__2:
  # $2.2: Boolean = char.1 == '_'
  .loc 8 100 32
  cmp BYTE PTR [rbp-1], 95
  sete al
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:rax:[rbp-2] 
  # jump(block.3)
  mov [rbp-2], al
  jmp .LABEL__is_identifier_start_253__3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:[rbp-2] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [discarded value]: char.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__is_identifier_start_253__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_start_253__stack_frame_size: .word 16

  .loc 8 103 1
  .text
is_identifier_body_254:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_body_254__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_body_254__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Boolean = call(is_identifier_start_253, char.1)
  .loc 8 104 9
  mov [rbp-1], dil
  call is_identifier_start_253
  # [live values]: char.1:[rbp-1] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__is_identifier_body_254__3
.LABEL__is_identifier_body_254__2:
  # return(true)
  .loc 8 105 9
  mov al, 1
  jmp .LABEL__is_identifier_body_254__end
  # [discarded value]: $1.1
  # [live values]: char.1:[rbp-1] 
.LABEL__is_identifier_body_254__3:
  # $2.1: Boolean = call(is_digit_252, char.1)
  .loc 8 107 12
  mov dil, [rbp-1]
  call is_digit_252
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # return($2.1)
  .loc 8 107 5
  jmp .LABEL__is_identifier_body_254__end
  # [discarded value]: $2.1
  # [live values]: char.1:[rbp-1] 
  # [live values]: char.1:[rbp-1] 
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_body_254__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_body_254__stack_frame_size: .word 16

  .loc 8 110 1
  .text
is_letter_255:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_letter_255__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_letter_255__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Int = cast(char.1)
  .loc 8 111 13
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  # $2.1: Int = cast('a')
  .loc 8 111 28
  mov bl, 97
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  # $4.1: Boolean = $1.1 >= $2.1
  .loc 8 111 13
  cmp rax, rbx
  setge r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, block.4, block.5)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_letter_255__5
.LABEL__is_letter_255__4:
  # $5.1: Int = cast(char.1)
  .loc 8 111 42
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  # $6.1: Int = cast('z')
  .loc 8 111 57
  mov bl, 122
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  # $4.2: Boolean = $5.1 <= $6.1
  .loc 8 111 42
  cmp rax, rbx
  setle r15b
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(block.5)
  mov [rbp-2], r15b
.LABEL__is_letter_255__5:
  # $8.1: Boolean = phi($4.1, $4.2)
  .loc 8 111 13
  mov al, [rbp-2]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:rax 
  # jump($8.1, block.3, block.2)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_letter_255__2
.LABEL__is_letter_255__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 8 111 12
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $8.3:[rbp-3] $4.2:[rbp-2] $8.1:[rbp-3] 
  # return($8.3)
  .loc 8 111 5
  mov al, [rbp-3]
  jmp .LABEL__is_letter_255__end
  # [discarded value]: $8.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
.LABEL__is_letter_255__2:
  # $9.1: Int = cast(char.1)
  .loc 8 111 73
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $4.2:[rbp-2] $8.1:[rbp-3] 
  # $10.1: Int = cast('A')
  .loc 8 111 88
  mov bl, 65
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $10.1:rbx $4.2:[rbp-2] $8.1:[rbp-3] 
  # $12.1: Boolean = $9.1 >= $10.1
  .loc 8 111 73
  cmp rax, rbx
  setge r15b
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  # jump($12.1, block.6, block.7)
  test r15b, r15b
  mov [rbp-4], r15b
  jz .LABEL__is_letter_255__7
.LABEL__is_letter_255__6:
  # $13.1: Int = cast(char.1)
  .loc 8 111 102
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax 
  # $14.1: Int = cast('Z')
  .loc 8 111 117
  mov bl, 90
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax $14.1:rbx 
  # $12.2: Boolean = $13.1 <= $14.1
  .loc 8 111 102
  cmp rax, rbx
  setle r15b
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:r15:[rbp-4] 
  # jump(block.7)
  mov [rbp-4], r15b
.LABEL__is_letter_255__7:
  # $8.2: Boolean = phi($12.1, $12.2)
  .loc 8 111 73
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:rax:[rbp-3] 
  # jump(block.3)
  mov [rbp-3], al
  jmp .LABEL__is_letter_255__3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [discarded value]: $12.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $12.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: char.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__is_letter_255__end:
  mov rsp, rbp
  pop rbp
  ret

is_letter_255__stack_frame_size: .word 16

  .loc 8 114 1
  .text
is_space_256:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_space_256__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_space_256__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Boolean = char.1 == ' '
  .loc 8 115 12
  cmp dil, 32
  sete al
  # [discarded value]: char.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 8 115 5
  jmp .LABEL__is_space_256__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__is_space_256__end:
  mov rsp, rbp
  pop rbp
  ret

is_space_256__stack_frame_size: .word 0

  .loc 8 118 1
  .text
scan_character_token_257:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_character_token_257__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_character_token_257__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # $1.1: Int8 = call(peek_char_249, self.1)
  .loc 8 119 9
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_249
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != '\''
  .loc 8 119 9
  cmp al, 39
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  jz .LABEL__scan_character_token_257__3
.LABEL__scan_character_token_257__2:
  # call(abort_292, "Invalid state")
  .loc 8 120 9
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call abort_292
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_character_token_257__3:
  # $3.1: Int8 = call(next_char_250, self.1)
  .loc 8 124 25
  mov rdi, [rbp-24]
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append_302, token_lexeme.1, $3.1)
  .loc 8 124 5
  mov rdi, [rbp-16]
  mov sil, al
  call append_302
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # char.1: Int8 = call(next_char_250, self.1)
  .loc 8 125 13
  mov rdi, [rbp-24]
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:rax 
  # $6.1: @String = call(append_302, token_lexeme.1, char.1)
  .loc 8 126 5
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_302
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # $7.1: Boolean = char.1 == '\''
  .loc 8 127 9
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $7.1:rax 
  # jump($7.1, block.4, block.5)
  test al, al
  jz .LABEL__scan_character_token_257__5
.LABEL__scan_character_token_257__4:
  # $8.1: @Error_Token = new(Error_Token)
  .loc 8 128 16
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $8.1:rax 
  # store_struct_member($8.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $8.1:rax 
  # store_struct_member($8.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] $8.1:rax 
  # store_struct_member($8.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] $8.1:rax 
  # return($8.1)
  .loc 8 128 9
  jmp .LABEL__scan_character_token_257__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
.LABEL__scan_character_token_257__5:
  # $9.1: Boolean = char.1 == '\\'
  .loc 8 130 9
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $9.1:rax 
  # jump($9.1, block.7, block.9)
  test al, al
  jz .LABEL__scan_character_token_257__9
.LABEL__scan_character_token_257__7:
  # char.8: Int8 = call(next_char_250, self.1)
  .loc 8 131 16
  mov rdi, [rbp-24]
  call next_char_250
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:rax:[rbp-25] 
  # $21.1: @String = call(append_302, token_lexeme.1, char.8)
  .loc 8 132 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_302
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # $22.1: Boolean = call(is_escape_258, char.8)
  .loc 8 133 13
  mov dil, [rbp-25]
  call is_escape_258
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $22.1:rax 
  # $23.1: Boolean = $22.1 == false
  .loc 8 133 13
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $23.1:rbx 
  # jump($23.1, block.20, block.21)
  test bl, bl
  jz .LABEL__scan_character_token_257__21
.LABEL__scan_character_token_257__20:
  # $24.1: @Error_Token = new(Error_Token)
  .loc 8 134 20
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $24.1:rax 
  # store_struct_member($24.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $24.1:rax 
  # store_struct_member($24.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $24.1:rax 
  # store_struct_member($24.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $24.1:rax 
  # return($24.1)
  .loc 8 134 13
  jmp .LABEL__scan_character_token_257__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__21:
  # $25.1: Boolean = char.8 == 'n'
  .loc 8 136 13
  cmp BYTE PTR [rbp-25], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $25.1:rax 
  # jump($25.1, block.23, block.25)
  test al, al
  jz .LABEL__scan_character_token_257__25
.LABEL__scan_character_token_257__23:
  # value.8: Int8 = '\n'
  .loc 8 137 13
  mov al, 10
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:rax 
  # jump(block.24)
  mov [rbp-26], al
.LABEL__scan_character_token_257__24:
  # value.10: Int8 = phi(value.8, value.7, value.6, value.5, value.4, value.3)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
  # char.18: Int8 = call(next_char_250, self.1)
  .loc 8 151 16
  mov rdi, [rbp-24]
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] char.18:rax:[rbp-25] 
  # $32.1: @String = call(append_302, token_lexeme.1, char.18)
  .loc 8 152 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_302
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] char.18:[rbp-25] 
  # $33.1: Boolean = char.18 != '\''
  .loc 8 153 13
  cmp BYTE PTR [rbp-25], 39
  setne al
  # [discarded value]: char.18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $33.1:rax 
  # jump($33.1, block.41, block.8)
  test al, al
  jz .LABEL__scan_character_token_257__8
.LABEL__scan_character_token_257__41:
  # $34.1: @Error_Token = new(Error_Token)
  .loc 8 154 20
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $34.1:rax 
  # store_struct_member($34.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $34.1:rax 
  # store_struct_member($34.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $34.1:rax 
  # store_struct_member($34.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $34.1:rax 
  # return($34.1)
  .loc 8 154 13
  jmp .LABEL__scan_character_token_257__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
.LABEL__scan_character_token_257__8:
  # value.9: Int8 = phi(value.2, value.10)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.9:[rbp-26] value.8:[rbp-26] value.10:[rbp-26] 
  # $35.1: @Character_Token = new(Character_Token)
  .loc 8 167 12
  mov rdi, 33
  call malloc
  lea rbx, Character_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.9:[rbp-26] $35.1:rax value.8:[rbp-26] value.10:[rbp-26] 
  # store_struct_member($35.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.9:[rbp-26] $35.1:rax value.8:[rbp-26] value.10:[rbp-26] 
  # store_struct_member($35.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.9:[rbp-26] $35.1:rax value.8:[rbp-26] value.10:[rbp-26] 
  # store_struct_member($35.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.9:[rbp-26] $35.1:rax value.8:[rbp-26] value.10:[rbp-26] 
  # store_struct_member($35.1, value, value.9)
  mov r14b, [rbp-26]
  mov BYTE PTR [rax+32], r14b
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $35.1:rax value.8:[rbp-26] value.10:[rbp-26] 
  # return($35.1)
  .loc 8 167 5
  jmp .LABEL__scan_character_token_257__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__25:
  # $26.1: Boolean = char.8 == '\"'
  .loc 8 138 20
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $26.1:rax 
  # jump($26.1, block.26, block.28)
  test al, al
  jz .LABEL__scan_character_token_257__28
.LABEL__scan_character_token_257__26:
  # value.7: Int8 = char.8
  .loc 8 139 13
  mov al, [rbp-25]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.7:rax:[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_257__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.7:[rbp-26] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__28:
  # $27.1: Boolean = char.8 == '\''
  .loc 8 140 20
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $27.1:rax 
  # jump($27.1, block.29, block.31)
  test al, al
  jz .LABEL__scan_character_token_257__31
.LABEL__scan_character_token_257__29:
  # value.6: Int8 = char.8
  .loc 8 141 13
  mov al, [rbp-25]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.6:rax:[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_257__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.6:[rbp-26] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__31:
  # $28.1: Boolean = char.8 == '\\'
  .loc 8 142 20
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $28.1:rax 
  # jump($28.1, block.32, block.34)
  test al, al
  jz .LABEL__scan_character_token_257__34
.LABEL__scan_character_token_257__32:
  # value.5: Int8 = char.8
  .loc 8 143 13
  mov al, [rbp-25]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.5:rax:[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_257__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.5:[rbp-26] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__34:
  # $29.1: Boolean = char.8 == 't'
  .loc 8 144 20
  cmp BYTE PTR [rbp-25], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $29.1:rax 
  # jump($29.1, block.35, block.37)
  test al, al
  jz .LABEL__scan_character_token_257__37
.LABEL__scan_character_token_257__35:
  # value.4: Int8 = '\t'
  .loc 8 145 13
  mov al, 9
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.4:rax:[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_257__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.4:[rbp-26] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__37:
  # $30.1: Boolean = char.8 == '0'
  .loc 8 146 20
  cmp BYTE PTR [rbp-25], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $30.1:rax 
  # jump($30.1, block.38, block.40)
  test al, al
  jz .LABEL__scan_character_token_257__40
.LABEL__scan_character_token_257__38:
  # value.3: Int8 = '\0'
  .loc 8 147 13
  mov al, 0
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.3:rax:[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_257__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.3:[rbp-26] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_257__40:
  # call(abort_292, "Invalid state")
  .loc 8 149 13
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call abort_292
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
.LABEL__scan_character_token_257__9:
  # $11.1: Boolean = char.1 == '\0'
  .loc 8 157 13
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:rax 
  # jump($11.1, block.13, block.12)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_character_token_257__12
.LABEL__scan_character_token_257__13:
  # $13.1: Boolean = phi($11.1, $11.2)
  .loc 8 157 13
  mov al, [rbp-27]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:rax 
  # jump($13.1, block.11, block.10)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_character_token_257__10
.LABEL__scan_character_token_257__11:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 8 157 13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.3:[rbp-28] $13.1:[rbp-28] 
  # jump($13.3, block.14, block.15)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__scan_character_token_257__15
.LABEL__scan_character_token_257__14:
  # $15.1: @Error_Token = new(Error_Token)
  .loc 8 158 20
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # store_struct_member($15.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # store_struct_member($15.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # store_struct_member($15.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # return($15.1)
  .loc 8 158 13
  jmp .LABEL__scan_character_token_257__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_character_token_257__15:
  # value.2: Int8 = char.1
  .loc 8 160 9
  mov al, [rbp-25]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:rax:[rbp-26] 
  # char.7: Int8 = call(next_char_250, self.1)
  .loc 8 161 16
  mov rdi, [rbp-24]
  mov [rbp-26], al
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] char.7:rax:[rbp-25] 
  # $17.1: @String = call(append_302, token_lexeme.1, char.7)
  .loc 8 162 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_302
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] char.7:[rbp-25] 
  # $18.1: Boolean = char.7 != '\''
  .loc 8 163 13
  cmp BYTE PTR [rbp-25], 39
  setne al
  # [discarded value]: char.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $18.1:rax 
  # jump($18.1, block.17, block.8)
  test al, al
  jz .LABEL__scan_character_token_257__8
.LABEL__scan_character_token_257__17:
  # $19.1: @Error_Token = new(Error_Token)
  .loc 8 164 20
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $19.1:rax 
  # store_struct_member($19.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $19.1:rax 
  # store_struct_member($19.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $19.1:rax 
  # store_struct_member($19.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $19.1:rax 
  # return($19.1)
  .loc 8 164 13
  jmp .LABEL__scan_character_token_257__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_character_token_257__10:
  # $13.2: Boolean = char.1 == '\t'
  .loc 8 157 45
  cmp BYTE PTR [rbp-25], 9
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.2:rax:[rbp-28] $13.1:[rbp-28] 
  # jump(block.11)
  mov [rbp-28], al
  jmp .LABEL__scan_character_token_257__11
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.2:[rbp-28] $13.1:[rbp-28] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] 
.LABEL__scan_character_token_257__12:
  # $11.2: Boolean = char.1 == '\n'
  .loc 8 157 29
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $11.2:rax:[rbp-27] 
  # jump(block.13)
  mov [rbp-27], al
  jmp .LABEL__scan_character_token_257__13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_character_token_257__end:
  mov rsp, rbp
  pop rbp
  ret

scan_character_token_257__stack_frame_size: .word 32

  .loc 8 170 1
  .text
is_escape_258:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_escape_258__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_escape_258__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $2.1: Boolean = char.1 == 'n'
  .loc 8 171 12
  cmp dil, 110
  sete al
  # [live values]: char.1:rdi $2.1:rax 
  # jump($2.1, block.11, block.10)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], dil
  jz .LABEL__is_escape_258__10
.LABEL__is_escape_258__11:
  # $4.1: Boolean = phi($2.1, $2.2)
  .loc 8 171 12
  mov al, [rbp-1]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, block.9, block.8)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_escape_258__8
.LABEL__is_escape_258__9:
  # $6.1: Boolean = phi($4.1, $4.2)
  .loc 8 171 12
  mov al, [rbp-3]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:rax $4.1:[rbp-3] 
  # jump($6.1, block.7, block.6)
  test al, al
  mov [rbp-4], al
  jz .LABEL__is_escape_258__6
.LABEL__is_escape_258__7:
  # $8.1: Boolean = phi($6.1, $6.2)
  .loc 8 171 12
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($8.1, block.5, block.4)
  test al, al
  mov [rbp-5], al
  jz .LABEL__is_escape_258__4
.LABEL__is_escape_258__5:
  # $10.1: Boolean = phi($8.1, $8.2)
  .loc 8 171 12
  mov al, [rbp-5]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($10.1, block.3, block.2)
  test al, al
  mov [rbp-6], al
  jz .LABEL__is_escape_258__2
.LABEL__is_escape_258__3:
  # $10.3: Boolean = phi($10.1, $10.2)
  .loc 8 171 12
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.3:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # return($10.3)
  .loc 8 171 5
  mov al, [rbp-6]
  jmp .LABEL__is_escape_258__end
  # [discarded value]: $10.3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_258__2:
  # $10.2: Boolean = char.1 == '0'
  .loc 8 171 90
  cmp BYTE PTR [rbp-2], 48
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:rax:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(block.3)
  mov [rbp-6], al
  jmp .LABEL__is_escape_258__3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_258__4:
  # $8.2: Boolean = char.1 == '\\'
  .loc 8 171 74
  cmp BYTE PTR [rbp-2], 92
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:rax:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(block.5)
  mov [rbp-5], al
  jmp .LABEL__is_escape_258__5
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_258__6:
  # $6.2: Boolean = char.1 == '\''
  .loc 8 171 58
  cmp BYTE PTR [rbp-2], 39
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:rax:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(block.7)
  mov [rbp-4], al
  jmp .LABEL__is_escape_258__7
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
.LABEL__is_escape_258__8:
  # $4.2: Boolean = char.1 == '\"'
  .loc 8 171 42
  cmp BYTE PTR [rbp-2], 34
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:rax:[rbp-3] $4.1:[rbp-3] 
  # jump(block.9)
  mov [rbp-3], al
  jmp .LABEL__is_escape_258__9
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:[rbp-3] $4.1:[rbp-3] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [discarded value]: $4.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
.LABEL__is_escape_258__10:
  # $2.2: Boolean = char.1 == 't'
  .loc 8 171 27
  cmp BYTE PTR [rbp-2], 116
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(block.11)
  mov [rbp-1], al
  jmp .LABEL__is_escape_258__11
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [discarded value]: char.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__is_escape_258__end:
  mov rsp, rbp
  pop rbp
  ret

is_escape_258__stack_frame_size: .word 16

  .loc 8 174 1
  .text
scan_comment_token_259:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_comment_token_259__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_comment_token_259__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(block.2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_comment_token_259__2:
  # $1.1: Int8 = call(peek_char_249, self.1)
  .loc 8 175 12
  mov rdi, [rbp-24]
  call peek_char_249
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != '\n'
  .loc 8 175 12
  cmp al, 10
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.3, block.4)
  test bl, bl
  jz .LABEL__scan_comment_token_259__4
.LABEL__scan_comment_token_259__3:
  # $3.1: Int8 = call(next_char_250, self.1)
  .loc 8 176 29
  mov rdi, [rbp-24]
  call next_char_250
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append_302, token_lexeme.1, $3.1)
  .loc 8 176 9
  mov rdi, [rbp-16]
  mov sil, al
  call append_302
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_comment_token_259__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_comment_token_259__4:
  # $5.1: @Comment_Token = new(Comment_Token)
  .loc 8 178 12
  mov rdi, 32
  call malloc
  lea rbx, Comment_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $5.1:rax 
  # return($5.1)
  .loc 8 178 5
  jmp .LABEL__scan_comment_token_259__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_comment_token_259__end:
  mov rsp, rbp
  pop rbp
  ret

scan_comment_token_259__stack_frame_size: .word 32

  .loc 8 181 1
  .text
scan_identifier_token_260:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_identifier_token_260__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_identifier_token_260__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(block.2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_identifier_token_260__2:
  # $1.1: Int8 = call(peek_char_249, self.1)
  .loc 8 182 12
  mov rdi, [rbp-24]
  call peek_char_249
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = call(is_identifier_body_254, $1.1)
  .loc 8 182 12
  mov dil, al
  call is_identifier_body_254
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__scan_identifier_token_260__4
.LABEL__scan_identifier_token_260__3:
  # $3.1: Int8 = call(next_char_250, self.1)
  .loc 8 183 29
  mov rdi, [rbp-24]
  call next_char_250
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append_302, token_lexeme.1, $3.1)
  .loc 8 183 9
  mov rdi, [rbp-16]
  mov sil, al
  call append_302
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_identifier_token_260__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__4:
  # $5.1: Boolean = call(equals_296, token_lexeme.1, "as")
  .loc 8 185 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_261[rip] # "as"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__scan_identifier_token_260__6
.LABEL__scan_identifier_token_260__5:
  # $6.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 186 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $6.1:rax 
  # return($6.1)
  .loc 8 186 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__6:
  # $7.1: Boolean = call(equals_296, token_lexeme.1, "break")
  .loc 8 188 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_263[rip] # "break"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__scan_identifier_token_260__9
.LABEL__scan_identifier_token_260__8:
  # $8.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 189 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $8.1:rax 
  # store_struct_member($8.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $8.1:rax 
  # store_struct_member($8.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $8.1:rax 
  # store_struct_member($8.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 8 189 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__9:
  # $9.1: Boolean = call(equals_296, token_lexeme.1, "else")
  .loc 8 191 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_267[rip] # "else"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.11, block.12)
  test al, al
  jz .LABEL__scan_identifier_token_260__12
.LABEL__scan_identifier_token_260__11:
  # $10.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 192 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $10.1:rax 
  # return($10.1)
  .loc 8 192 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__12:
  # $11.1: Boolean = call(equals_296, token_lexeme.1, "external")
  .loc 8 194 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_270[rip] # "external"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $11.1:rax 
  # jump($11.1, block.14, block.15)
  test al, al
  jz .LABEL__scan_identifier_token_260__15
.LABEL__scan_identifier_token_260__14:
  # $12.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 195 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $12.1:rax 
  # store_struct_member($12.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $12.1:rax 
  # store_struct_member($12.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $12.1:rax 
  # store_struct_member($12.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $12.1:rax 
  # return($12.1)
  .loc 8 195 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__15:
  # $13.1: Boolean = call(equals_296, token_lexeme.1, "false")
  .loc 8 197 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_314[rip] # "false"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $13.1:rax 
  # jump($13.1, block.17, block.18)
  test al, al
  jz .LABEL__scan_identifier_token_260__18
.LABEL__scan_identifier_token_260__17:
  # $14.1: @Boolean_Token = new(Boolean_Token)
  .loc 8 198 16
  mov rdi, 33
  call malloc
  lea rbx, Boolean_Token[rip]
  mov [rax], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $14.1:rax 
  # store_struct_member($14.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $14.1:rax 
  # store_struct_member($14.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $14.1:rax 
  # store_struct_member($14.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $14.1:rax 
  # store_struct_member($14.1, value, false)
  mov BYTE PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $14.1:rax 
  # return($14.1)
  .loc 8 198 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__18:
  # $15.1: Boolean = call(equals_296, token_lexeme.1, "if")
  .loc 8 200 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_273[rip] # "if"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $15.1:rax 
  # jump($15.1, block.20, block.21)
  test al, al
  jz .LABEL__scan_identifier_token_260__21
.LABEL__scan_identifier_token_260__20:
  # $16.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 201 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $16.1:rax 
  # store_struct_member($16.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $16.1:rax 
  # store_struct_member($16.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $16.1:rax 
  # store_struct_member($16.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $16.1:rax 
  # return($16.1)
  .loc 8 201 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__21:
  # $17.1: Boolean = call(equals_296, token_lexeme.1, "include")
  .loc 8 203 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_274[rip] # "include"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $17.1:rax 
  # jump($17.1, block.23, block.24)
  test al, al
  jz .LABEL__scan_identifier_token_260__24
.LABEL__scan_identifier_token_260__23:
  # $18.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 204 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $18.1:rax 
  # store_struct_member($18.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $18.1:rax 
  # store_struct_member($18.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $18.1:rax 
  # store_struct_member($18.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $18.1:rax 
  # return($18.1)
  .loc 8 204 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__24:
  # $19.1: Boolean = call(equals_296, token_lexeme.1, "loop")
  .loc 8 206 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_276[rip] # "loop"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $19.1:rax 
  # jump($19.1, block.26, block.27)
  test al, al
  jz .LABEL__scan_identifier_token_260__27
.LABEL__scan_identifier_token_260__26:
  # $20.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 207 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $20.1:rax 
  # store_struct_member($20.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $20.1:rax 
  # store_struct_member($20.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $20.1:rax 
  # store_struct_member($20.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $20.1:rax 
  # return($20.1)
  .loc 8 207 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__27:
  # $21.1: Boolean = call(equals_296, token_lexeme.1, "new")
  .loc 8 209 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_251[rip] # "new"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.29, block.30)
  test al, al
  jz .LABEL__scan_identifier_token_260__30
.LABEL__scan_identifier_token_260__29:
  # $22.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 210 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $22.1:rax 
  # store_struct_member($22.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $22.1:rax 
  # store_struct_member($22.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $22.1:rax 
  # store_struct_member($22.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $22.1:rax 
  # return($22.1)
  .loc 8 210 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__30:
  # $23.1: Boolean = call(equals_296, token_lexeme.1, "null")
  .loc 8 212 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_315[rip] # "null"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $23.1:rax 
  # jump($23.1, block.32, block.33)
  test al, al
  jz .LABEL__scan_identifier_token_260__33
.LABEL__scan_identifier_token_260__32:
  # $24.1: @Null_Token = new(Null_Token)
  .loc 8 213 16
  mov rdi, 32
  call malloc
  lea rbx, Null_Token[rip]
  mov [rax], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $24.1:rax 
  # store_struct_member($24.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $24.1:rax 
  # store_struct_member($24.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $24.1:rax 
  # store_struct_member($24.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $24.1:rax 
  # return($24.1)
  .loc 8 213 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__33:
  # $25.1: Boolean = call(equals_296, token_lexeme.1, "return")
  .loc 8 215 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_254[rip] # "return"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $25.1:rax 
  # jump($25.1, block.35, block.36)
  test al, al
  jz .LABEL__scan_identifier_token_260__36
.LABEL__scan_identifier_token_260__35:
  # $26.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 216 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $26.1:rax 
  # store_struct_member($26.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $26.1:rax 
  # store_struct_member($26.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $26.1:rax 
  # store_struct_member($26.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $26.1:rax 
  # return($26.1)
  .loc 8 216 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__36:
  # $27.1: Boolean = call(equals_296, token_lexeme.1, "struct")
  .loc 8 218 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_280[rip] # "struct"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $27.1:rax 
  # jump($27.1, block.38, block.39)
  test al, al
  jz .LABEL__scan_identifier_token_260__39
.LABEL__scan_identifier_token_260__38:
  # $28.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 219 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $28.1:rax 
  # store_struct_member($28.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $28.1:rax 
  # store_struct_member($28.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $28.1:rax 
  # store_struct_member($28.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $28.1:rax 
  # return($28.1)
  .loc 8 219 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__39:
  # $29.1: Boolean = call(equals_296, token_lexeme.1, "true")
  .loc 8 221 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_316[rip] # "true"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $29.1:rax 
  # jump($29.1, block.41, block.42)
  test al, al
  jz .LABEL__scan_identifier_token_260__42
.LABEL__scan_identifier_token_260__41:
  # $30.1: @Boolean_Token = new(Boolean_Token)
  .loc 8 222 16
  mov rdi, 33
  call malloc
  lea rbx, Boolean_Token[rip]
  mov [rax], rbx
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $30.1:rax 
  # store_struct_member($30.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $30.1:rax 
  # store_struct_member($30.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $30.1:rax 
  # store_struct_member($30.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $30.1:rax 
  # store_struct_member($30.1, value, true)
  mov BYTE PTR [rax+32], 1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $30.1:rax 
  # return($30.1)
  .loc 8 222 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__42:
  # $31.1: Boolean = call(equals_296, token_lexeme.1, "undefined")
  .loc 8 224 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_259[rip] # "undefined"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.44, block.45)
  test al, al
  jz .LABEL__scan_identifier_token_260__45
.LABEL__scan_identifier_token_260__44:
  # $32.1: @Undefined_Token = new(Undefined_Token)
  .loc 8 225 16
  mov rdi, 32
  call malloc
  lea rbx, Undefined_Token[rip]
  mov [rax], rbx
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $32.1:rax 
  # store_struct_member($32.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $32.1:rax 
  # store_struct_member($32.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $32.1:rax 
  # store_struct_member($32.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $32.1:rax 
  # return($32.1)
  .loc 8 225 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__45:
  # $33.1: Boolean = call(equals_296, token_lexeme.1, "while")
  .loc 8 227 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_282[rip] # "while"
  call equals_296
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $33.1:rax 
  # jump($33.1, block.47, block.48)
  test al, al
  jz .LABEL__scan_identifier_token_260__48
.LABEL__scan_identifier_token_260__47:
  # $34.1: @Keyword_Token = new(Keyword_Token)
  .loc 8 228 16
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $34.1:rax 
  # store_struct_member($34.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $34.1:rax 
  # store_struct_member($34.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $34.1:rax 
  # store_struct_member($34.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $34.1:rax 
  # return($34.1)
  .loc 8 228 9
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_260__48:
  # $35.1: @Identifier_Token = new(Identifier_Token)
  .loc 8 230 12
  mov rdi, 32
  call malloc
  lea rbx, Identifier_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $35.1:rax 
  # store_struct_member($35.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] $35.1:rax 
  # store_struct_member($35.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $35.1:rax 
  # store_struct_member($35.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $35.1:rax 
  # return($35.1)
  .loc 8 230 5
  jmp .LABEL__scan_identifier_token_260__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_identifier_token_260__end:
  mov rsp, rbp
  pop rbp
  ret

scan_identifier_token_260__stack_frame_size: .word 32

  .loc 8 233 1
  .text
scan_integer_token_261:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_integer_token_261__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_integer_token_261__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # value.1: Int = 0
  .loc 8 234 5
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx value.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_integer_token_261__2:
  # value.5: Int = phi(value.1, value.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # $1.1: Int8 = call(peek_char_249, self.1)
  .loc 8 235 12
  mov rdi, [rbp-32]
  call peek_char_249
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $1.1:rax 
  # $2.1: Boolean = call(is_digit_252, $1.1)
  .loc 8 235 12
  mov dil, al
  call is_digit_252
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__scan_integer_token_261__4
.LABEL__scan_integer_token_261__3:
  # char.1: Int8 = call(next_char_250, self.1)
  .loc 8 236 17
  mov rdi, [rbp-32]
  call next_char_250
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax 
  # $4.1: Int = value.5 * 10
  .loc 8 237 17
  mov rbx, [rbp-8]
  imul rbx, 10
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx 
  # $5.1: Int = cast(char.1)
  .loc 8 237 31
  mov r15b, al
  movsx r15, r15b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx $5.1:r15 
  # $6.1: Int = cast('0')
  .loc 8 237 45
  mov r14b, 48
  movsx r14, r14b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx $5.1:r15 $6.1:r14 
  # $7.1: Int = $5.1 - $6.1
  .loc 8 237 31
  mov r13, r15
  sub r13, r14
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx $7.1:r13 
  # value.3: Int = $4.1 + $7.1
  .loc 8 237 17
  mov r15, rbx
  add r15, r13
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax value.3:r15:[rbp-8] 
  # $9.1: @String = call(append_302, token_lexeme.1, char.1)
  .loc 8 238 9
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], r15
  call append_302
  # [discarded value]: char.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] value.3:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_integer_token_261__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] value.3:[rbp-8] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
.LABEL__scan_integer_token_261__4:
  # $10.1: @Integer_Token = new(Integer_Token)
  .loc 8 240 12
  mov rdi, 40
  call malloc
  lea rbx, Integer_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, location, token_location.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $10.1:rax 
  # store_struct_member($10.1, value, value.5)
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] value.1:[rbp-8] value.5:r14:[rbp-8] $10.1:rax 
  # return($10.1)
  .loc 8 240 5
  jmp .LABEL__scan_integer_token_261__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [discarded value]: value.1
  # [live values]: 
.LABEL__scan_integer_token_261__end:
  mov rsp, rbp
  pop rbp
  ret

scan_integer_token_261__stack_frame_size: .word 32

  .loc 8 243 1
  .text
scan_space_token_262:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_space_token_262__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_space_token_262__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # count.1: Int = 0
  .loc 8 244 5
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx count.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_space_token_262__2:
  # count.5: Int = phi(count.1, count.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # $1.1: Int8 = call(peek_char_249, self.1)
  .loc 8 245 12
  mov rdi, [rbp-32]
  call peek_char_249
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 == ' '
  .loc 8 245 12
  cmp al, 32
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:rbx 
  # jump($2.1, block.3, block.4)
  test bl, bl
  jz .LABEL__scan_space_token_262__4
.LABEL__scan_space_token_262__3:
  # char.1: Int8 = call(next_char_250, self.1)
  .loc 8 246 17
  mov rdi, [rbp-32]
  call next_char_250
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] char.1:rax 
  # count.3: Int = count.5 + 1
  .loc 8 247 17
  mov rbx, [rbp-8]
  add rbx, 1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] char.1:rax count.3:rbx:[rbp-8] 
  # $5.1: @String = call(append_302, token_lexeme.1, char.1)
  .loc 8 248 9
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], rbx
  call append_302
  # [discarded value]: char.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] count.3:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_space_token_262__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] count.3:[rbp-8] 
  # [discarded value]: count.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
.LABEL__scan_space_token_262__4:
  # $6.1: @Space_Token = new(Space_Token)
  .loc 8 250 12
  mov rdi, 40
  call malloc
  lea rbx, Space_Token[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, location, token_location.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, count, count.5)
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] token_location.1:r15:[rbp-16] count.1:[rbp-8] count.5:r14:[rbp-8] $6.1:rax 
  # return($6.1)
  .loc 8 250 5
  jmp .LABEL__scan_space_token_262__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # [discarded value]: count.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [discarded value]: count.1
  # [live values]: 
.LABEL__scan_space_token_262__end:
  mov rsp, rbp
  pop rbp
  ret

scan_space_token_262__stack_frame_size: .word 32

  .loc 8 253 1
  .text
scan_string_token_263:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_string_token_263__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_string_token_263__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # $1.1: Int8 = call(peek_char_249, self.1)
  .loc 8 254 9
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_249
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != '"'
  .loc 8 254 9
  cmp al, 34
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  jz .LABEL__scan_string_token_263__3
.LABEL__scan_string_token_263__2:
  # call(abort_292, "Invalid state")
  .loc 8 255 9
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call abort_292
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_string_token_263__3:
  # $4.1: @Int8 = call(malloc, 16)
  .loc 13 4 19
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $4.1:rax 
  # $5.1: @String = new(String)
  .loc 8 258 14
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $4.1:[rbp-32] $5.1:rax 
  # store_struct_member($5.1, data, $4.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, data_size, 16)
  mov QWORD PTR [rax+8], 16
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # value.1: @String = $5.1
  .loc 8 258 5
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:rax 
  # $6.1: Int8 = call(next_char_250, self.1)
  .loc 8 260 25
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] $6.1:rax 
  # $7.1: @String = call(append_302, token_lexeme.1, $6.1)
  .loc 8 260 5
  mov rdi, [rbp-16]
  mov sil, al
  call append_302
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # jump(block.4)
.LABEL__scan_string_token_263__4:
  # char.1: Int8 = call(peek_char_249, self.1)
  .loc 8 262 17
  mov rdi, [rbp-24]
  call peek_char_249
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:rax 
  # $10.1: Boolean = char.1 == '\0'
  .loc 8 263 13
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:rax $10.1:rbx 
  # jump($10.1, block.7, block.6)
  test bl, bl
  mov [rbp-33], al
  mov [rbp-34], bl
  jz .LABEL__scan_string_token_263__6
.LABEL__scan_string_token_263__7:
  # $10.3: Boolean = phi($10.1, $10.2)
  .loc 8 263 13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, block.8, block.9)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__scan_string_token_263__9
.LABEL__scan_string_token_263__8:
  # $12.1: @Error_Token = new(Error_Token)
  .loc 8 264 20
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $12.1:rax 
  # store_struct_member($12.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $12.1:rax 
  # store_struct_member($12.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $12.1:rax 
  # store_struct_member($12.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $12.1:rax 
  # return($12.1)
  .loc 8 264 13
  jmp .LABEL__scan_string_token_263__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] 
.LABEL__scan_string_token_263__9:
  # char.3: Int8 = call(next_char_250, self.1)
  .loc 8 266 16
  mov rdi, [rbp-24]
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:rax:[rbp-33] 
  # $14.1: @String = call(append_302, token_lexeme.1, char.3)
  .loc 8 267 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-33], al
  call append_302
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
  # $15.1: Boolean = char.3 == '"'
  .loc 8 268 13
  cmp BYTE PTR [rbp-33], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $15.1:rax 
  # jump($15.1, block.11, block.12)
  test al, al
  jz .LABEL__scan_string_token_263__12
.LABEL__scan_string_token_263__11:
  # $16.1: @String_Token = new(String_Token)
  .loc 8 269 20
  mov rdi, 40
  call malloc
  lea rbx, String_Token[rip]
  mov [rax], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $16.1:rax 
  # store_struct_member($16.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $16.1:rax 
  # store_struct_member($16.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $16.1:rax 
  # store_struct_member($16.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $16.1:rax 
  # store_struct_member($16.1, value, value.1)
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:r14:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $16.1:rax 
  # return($16.1)
  .loc 8 269 13
  jmp .LABEL__scan_string_token_263__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
.LABEL__scan_string_token_263__12:
  # $17.1: Boolean = char.3 == '\\'
  .loc 8 271 13
  cmp BYTE PTR [rbp-33], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] $17.1:rax 
  # jump($17.1, block.14, block.16)
  test al, al
  jz .LABEL__scan_string_token_263__16
.LABEL__scan_string_token_263__14:
  # char.6: Int8 = call(peek_char_249, self.1)
  .loc 8 272 20
  mov rdi, [rbp-24]
  call peek_char_249
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:rax:[rbp-33] 
  # $21.1: Boolean = char.6 == '\0'
  .loc 8 273 17
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:rax:[rbp-33] $21.1:rbx 
  # jump($21.1, block.18, block.17)
  test bl, bl
  mov [rbp-33], al
  mov [rbp-35], bl
  jz .LABEL__scan_string_token_263__17
.LABEL__scan_string_token_263__18:
  # $21.3: Boolean = phi($21.1, $21.2)
  .loc 8 273 17
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $21.3:[rbp-35] 
  # jump($21.3, block.19, block.20)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__scan_string_token_263__20
.LABEL__scan_string_token_263__19:
  # $23.1: @Error_Token = new(Error_Token)
  .loc 8 274 24
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $21.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $23.1:rax 
  # store_struct_member($23.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $23.1:rax 
  # store_struct_member($23.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $23.1:rax 
  # store_struct_member($23.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $23.1:rax 
  # return($23.1)
  .loc 8 274 17
  jmp .LABEL__scan_string_token_263__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] 
.LABEL__scan_string_token_263__20:
  # char.8: Int8 = call(next_char_250, self.1)
  .loc 8 276 20
  mov rdi, [rbp-24]
  call next_char_250
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:rax:[rbp-33] 
  # $25.1: @String = call(append_302, token_lexeme.1, char.8)
  .loc 8 277 13
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-33], al
  call append_302
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # $26.1: Boolean = call(is_escape_258, char.8)
  .loc 8 278 17
  mov dil, [rbp-33]
  call is_escape_258
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $26.1:rax 
  # $27.1: Boolean = $26.1 == false
  .loc 8 278 17
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $27.1:rbx 
  # jump($27.1, block.22, block.23)
  test bl, bl
  jz .LABEL__scan_string_token_263__23
.LABEL__scan_string_token_263__22:
  # $28.1: @Error_Token = new(Error_Token)
  .loc 8 279 24
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $28.1:rax 
  # store_struct_member($28.1, lexeme, token_lexeme.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $28.1:rax 
  # store_struct_member($28.1, location, token_location.1)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $28.1:rax 
  # store_struct_member($28.1, next_token, null)
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $28.1:rax 
  # return($28.1)
  .loc 8 279 17
  jmp .LABEL__scan_string_token_263__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__23:
  # $29.1: Boolean = char.8 == 'n'
  .loc 8 281 17
  cmp BYTE PTR [rbp-33], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $29.1:rax 
  # jump($29.1, block.25, block.27)
  test al, al
  jz .LABEL__scan_string_token_263__27
.LABEL__scan_string_token_263__25:
  # $40.1: @String = call(append_302, value.1, '\n')
  .loc 8 282 17
  mov rdi, [rbp-32]
  mov sil, 10
  call append_302
  # [discarded value]: $29.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__27:
  # $30.1: Boolean = char.8 == '\"'
  .loc 8 283 24
  cmp BYTE PTR [rbp-33], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $30.1:rax 
  # jump($30.1, block.28, block.30)
  test al, al
  jz .LABEL__scan_string_token_263__30
.LABEL__scan_string_token_263__28:
  # $39.1: @String = call(append_302, value.1, char.8)
  .loc 8 284 17
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_302
  # [discarded value]: $30.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__30:
  # $31.1: Boolean = char.8 == '\''
  .loc 8 285 24
  cmp BYTE PTR [rbp-33], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $31.1:rax 
  # jump($31.1, block.31, block.33)
  test al, al
  jz .LABEL__scan_string_token_263__33
.LABEL__scan_string_token_263__31:
  # $38.1: @String = call(append_302, value.1, char.8)
  .loc 8 286 17
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_302
  # [discarded value]: $31.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__33:
  # $32.1: Boolean = char.8 == '\\'
  .loc 8 287 24
  cmp BYTE PTR [rbp-33], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $32.1:rax 
  # jump($32.1, block.34, block.36)
  test al, al
  jz .LABEL__scan_string_token_263__36
.LABEL__scan_string_token_263__34:
  # $37.1: @String = call(append_302, value.1, char.8)
  .loc 8 288 17
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_302
  # [discarded value]: $32.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__36:
  # $33.1: Boolean = char.8 == 't'
  .loc 8 289 24
  cmp BYTE PTR [rbp-33], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $33.1:rax 
  # jump($33.1, block.37, block.39)
  test al, al
  jz .LABEL__scan_string_token_263__39
.LABEL__scan_string_token_263__37:
  # $36.1: @String = call(append_302, value.1, '\t')
  .loc 8 290 17
  mov rdi, [rbp-32]
  mov sil, 9
  call append_302
  # [discarded value]: $33.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__39:
  # $34.1: Boolean = char.8 == '0'
  .loc 8 291 24
  cmp BYTE PTR [rbp-33], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] $34.1:rax 
  # jump($34.1, block.40, block.42)
  test al, al
  jz .LABEL__scan_string_token_263__42
.LABEL__scan_string_token_263__40:
  # $35.1: @String = call(append_302, value.1, '\0')
  .loc 8 292 17
  mov rdi, [rbp-32]
  mov sil, 0
  call append_302
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_263__42:
  # call(abort_292, "Invalid state")
  .loc 8 294 17
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call abort_292
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] char.8:[rbp-33] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] 
.LABEL__scan_string_token_263__17:
  # $21.2: Boolean = char.6 == '\n'
  .loc 8 273 33
  cmp BYTE PTR [rbp-33], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $21.2:rax:[rbp-35] 
  # jump(block.18)
  mov [rbp-35], al
  jmp .LABEL__scan_string_token_263__18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] $21.2:[rbp-35] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $21.1:[rbp-35] 
  # [discarded value]: char.6
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
.LABEL__scan_string_token_263__16:
  # $18.1: @String = call(append_302, value.1, char.3)
  .loc 8 297 13
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_302
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_263__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] char.3:[rbp-33] 
  # [discarded value]: char.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] 
.LABEL__scan_string_token_263__6:
  # $10.2: Boolean = char.1 == '\n'
  .loc 8 263 29
  cmp BYTE PTR [rbp-33], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $10.2:rax:[rbp-34] 
  # jump(block.7)
  mov [rbp-34], al
  jmp .LABEL__scan_string_token_263__7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $10.1:[rbp-34] 
  # [discarded value]: char.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_string_token_263__end:
  mov rsp, rbp
  pop rbp
  ret

scan_string_token_263__stack_frame_size: .word 48

  .loc 1 542 1
  .text
abort_264:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_264__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_264__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: location.1:rdi message.1:rsi 
  # stderr.11: @FILE = load_variable(stderr)
  # [live values]: location.1:rdi message.1:rsi stderr.11:stderr[rip] 
  # $1.1: @FILE = call(end_line_290, stderr.11)
  .loc 1 543 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_290
  # [discarded value]: stderr.11
  # [live values]: location.1:[rbp-8] message.1:[rbp-16] $1.1:rax 
  # $2.1: @FILE = call(write_267, $1.1, location.1)
  .loc 1 543 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_267
  # [discarded value]: location.1
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, ": ")
  .loc 1 543 5
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # ": "
  call write_287
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write_287, $3.1, message.1)
  .loc 1 543 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_287
  # [discarded value]: message.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # $5.1: @FILE = call(end_line_290, $4.1)
  .loc 1 543 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: 
  # call(abort)
  .loc 1 544 5
  call abort
  # [live values]: 
.LABEL__abort_264__end:
  mov rsp, rbp
  pop rbp
  ret

abort_264__stack_frame_size: .word 16

  .loc 1 549 1
  .text
write_265:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_265__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_265__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: file.1:rdi token.1:rsi 
  # Other_Token.3: @Object_Type = load_variable(Other_Token)
  lea rax, Other_Token[rip]
  # [live values]: file.1:rdi token.1:rsi Other_Token.3:rax 
  # $2.1: Boolean = call(is_293, token.1, Other_Token.3)
  .loc 1 550 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_293
  # [discarded value]: Other_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.3, block.2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_265__2
.LABEL__write_265__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 1 550 9
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, block.4, block.6)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__write_265__6
.LABEL__write_265__4:
  # $12.1: Int8 = cast(27)
  .loc 1 551 20
  mov rax, 27
  # [discarded value]: $2.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $12.1:rax 
  # $13.1: @FILE = call(write_289, file.1, $12.1)
  .loc 1 551 9
  mov rdi, [rbp-8]
  mov sil, al
  call write_289
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $13.1:rax 
  # $14.1: @FILE = call(write_287, $13.1, "[2;37m")
  .loc 1 551 9
  mov rdi, rax
  lea rsi, .LABEL__string_317[rip] # "[2;37m"
  call write_287
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # jump(block.5)
.LABEL__write_265__5:
  # $15.1: @String = load_struct_member(token.1, lexeme)
  .loc 1 557 16
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] token.1:rax:[rbp-16] $2.1:[rbp-17] $15.1:rbx 
  # $16.1: @FILE = call(write_287, file.1, $15.1)
  .loc 1 557 5
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_287
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # $17.1: Int8 = cast(27)
  .loc 1 558 16
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $17.1:rax 
  # $18.1: @FILE = call(write_289, file.1, $17.1)
  .loc 1 558 5
  mov rdi, [rbp-8]
  mov sil, al
  call write_289
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $18.1:rax 
  # $19.1: @FILE = call(write_287, $18.1, "[0m")
  .loc 1 558 5
  mov rdi, rax
  lea rsi, .LABEL__string_318[rip] # "[0m"
  call write_287
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # return(file.1)
  .loc 1 559 5
  mov rax, [rbp-8]
  jmp .LABEL__write_265__end
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_265__6:
  # Literal_Token.2: @Object_Type = load_variable(Literal_Token)
  lea rax, Literal_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Literal_Token.2:rax 
  # $4.1: Boolean = call(is_293, token.1, Literal_Token.2)
  .loc 1 552 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Literal_Token.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  # jump($4.1, block.7, block.9)
  test al, al
  jz .LABEL__write_265__9
.LABEL__write_265__7:
  # $9.1: Int8 = cast(27)
  .loc 1 553 20
  mov rax, 27
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $9.1:rax 
  # $10.1: @FILE = call(write_289, file.1, $9.1)
  .loc 1 553 9
  mov rdi, [rbp-8]
  mov sil, al
  call write_289
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $10.1:rax 
  # $11.1: @FILE = call(write_287, $10.1, "[1;33m")
  .loc 1 553 9
  mov rdi, rax
  lea rsi, .LABEL__string_319[rip] # "[1;33m"
  call write_287
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # jump(block.5)
  jmp .LABEL__write_265__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_265__9:
  # Comment_Token.3: @Object_Type = load_variable(Comment_Token)
  lea rax, Comment_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Comment_Token.3:rax 
  # $5.1: Boolean = call(is_293, token.1, Comment_Token.3)
  .loc 1 554 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Comment_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $5.1:rax 
  # jump($5.1, block.10, block.5)
  test al, al
  jz .LABEL__write_265__5
.LABEL__write_265__10:
  # $6.1: Int8 = cast(27)
  .loc 1 555 20
  mov rax, 27
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $6.1:rax 
  # $7.1: @FILE = call(write_289, file.1, $6.1)
  .loc 1 555 9
  mov rdi, [rbp-8]
  mov sil, al
  call write_289
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  # $8.1: @FILE = call(write_287, $7.1, "[2;33m")
  .loc 1 555 9
  mov rdi, rax
  lea rsi, .LABEL__string_320[rip] # "[2;33m"
  call write_287
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # jump(block.5)
  jmp .LABEL__write_265__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_265__2:
  # Keyword_Token.3: @Object_Type = load_variable(Keyword_Token)
  lea rax, Keyword_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Keyword_Token.3:rax 
  # $2.2: Boolean = call(is_293, token.1, Keyword_Token.3)
  .loc 1 550 34
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_293
  # [discarded value]: Keyword_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:rax:[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
  jmp .LABEL__write_265__3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: file.1
  # [discarded value]: token.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_265__end:
  mov rsp, rbp
  pop rbp
  ret

write_265__stack_frame_size: .word 32

  .loc 10 15 1
  .text
create_source_266:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_source_266__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_source_266__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # $1.1: @Int8 = load_struct_member(file_path.1, data)
  .loc 10 16 19
  mov rax, [rdi+0]
  # [live values]: file_path.1:rdi $1.1:rax 
  # $2.1: @Int8 = load_struct_member("r", data)
  .loc 10 16 35
  lea rbx, .LABEL__string_321[rip] # "r"
  mov r15, [rbx+0]
  # [live values]: file_path.1:rdi $1.1:rax $2.1:r15 
  # file.1: @FILE = call(fopen, $1.1, $2.1)
  .loc 10 16 13
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-8] file.1:rax 
  # $4.1: Boolean = file.1 == null
  .loc 10 17 9
  cmp rax, 0
  sete bl
  # [live values]: file_path.1:[rbp-8] file.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-16], rax
  jz .LABEL__create_source_266__3
.LABEL__create_source_266__2:
  # return(null)
  .loc 10 18 9
  xor rax, rax
  jmp .LABEL__create_source_266__end
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] 
.LABEL__create_source_266__3:
  # content_size.1: Int = 1024
  .loc 10 21 5
  mov rax, 1024
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:rax 
  # content.1: @Int8 = call(malloc, content_size.1)
  .loc 10 22 16
  mov rdi, rax
  mov [rbp-24], rax
  call malloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:rax 
  # content_length.1: Int = 0
  .loc 10 23 5
  xor rbx, rbx
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:rax content_length.1:rbx 
  # jump(block.5)
  mov [rbp-32], rax
  mov [rbp-40], rbx
.LABEL__create_source_266__5:
  # content_size.5: Int = phi(content_size.1, content_size.6)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] 
  # content_length.6: Int = phi(content_length.1, content_length.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] 
  # content.6: @Int8 = phi(content.1, content.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] 
  # char.1: Int32 = call(fgetc, file.1)
  .loc 10 25 17
  mov rdi, [rbp-16]
  call fgetc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:rax 
  # $8.1: Int32 = call(feof, file.1)
  .loc 10 26 13
  mov rdi, [rbp-16]
  mov [rbp-44], eax
  call feof
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $8.1:rax 
  # $9.1: Int = cast($8.1)
  .loc 10 26 13
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $8.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $9.1:rbx 
  # $10.1: Boolean = $9.1 != 0
  .loc 10 26 13
  cmp rbx, 0
  setne al
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $10.1:rax 
  # jump($10.1, block.6, block.8)
  test al, al
  jz .LABEL__create_source_266__8
.LABEL__create_source_266__6:
  # store_array_item(content.6, content_length.6, '\0')
  .loc 10 36 5
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  add rax, rbx
  mov BYTE PTR [rax], 0
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] 
  # $19.1: @Source = new(Source)
  .loc 10 38 12
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $19.1:rax 
  # store_struct_member($19.1, file_path, file_path.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: file_path.1:rbx:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $19.1:rax 
  # store_struct_member($19.1, content, content.6)
  mov r15, [rbp-32]
  mov QWORD PTR [rax+16], r15
  # [live values]: file_path.1:rbx:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:r15:[rbp-32] char.1:[rbp-44] $19.1:rax 
  # return($19.1)
  .loc 10 38 5
  jmp .LABEL__create_source_266__end
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] 
.LABEL__create_source_266__8:
  # $11.1: Int = content_length.6 + 1
  .loc 10 29 13
  mov rax, [rbp-40]
  add rax, 1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $11.1:rax 
  # $12.1: Int = content_size.5 - 1
  .loc 10 29 34
  mov rbx, [rbp-24]
  dec rbx
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $11.1:rax $12.1:rbx 
  # $13.1: Boolean = $11.1 > $12.1
  .loc 10 29 13
  cmp rax, rbx
  setg r15b
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] $13.1:r15 
  # jump($13.1, block.10, block.11)
  test r15b, r15b
  jz .LABEL__create_source_266__11
.LABEL__create_source_266__10:
  # content_size.4: Int = content_size.5 + 1024
  .loc 10 30 28
  mov rax, [rbp-24]
  add rax, 1024
  # [discarded value]: $13.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:rax:[rbp-24] 
  # content.3: @Int8 = call(realloc, content.6, content_size.4)
  .loc 10 31 23
  mov rdi, [rbp-32]
  mov rsi, rax
  mov [rbp-24], rax
  call realloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:rax:[rbp-32] 
  # jump(block.11)
  mov [rbp-32], rax
.LABEL__create_source_266__11:
  # content_size.6: Int = phi(content_size.4, content_size.5)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] content_size.6:[rbp-24] 
  # content.4: @Int8 = phi(content.6, content.3)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] content_size.6:[rbp-24] content.4:[rbp-32] 
  # $17.1: Int8 = cast(char.1)
  .loc 10 33 35
  mov eax, [rbp-44]
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] content_size.6:[rbp-24] content.4:[rbp-32] $17.1:rax 
  # store_array_item(content.4, content_length.6, $17.1)
  .loc 10 33 9
  mov rbx, [rbp-32]
  mov r15, [rbp-40]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] content_size.6:[rbp-24] content.4:[rbp-32] 
  # content_length.4: Int = content_length.6 + 1
  .loc 10 34 26
  mov rax, [rbp-40]
  add rax, 1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] content_size.6:[rbp-24] content.4:[rbp-32] content_length.4:rax:[rbp-40] 
  # jump(block.5)
  mov [rbp-40], rax
  jmp .LABEL__create_source_266__5
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] content_size.6:[rbp-24] content.4:[rbp-32] content_length.4:[rbp-40] 
  # [discarded value]: content_size.6
  # [discarded value]: content.4
  # [discarded value]: content_length.4
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] content_size.4:[rbp-24] content.3:[rbp-32] 
  # [discarded value]: content_size.4
  # [discarded value]: content.3
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] content_size.5:[rbp-24] content_length.6:[rbp-40] content.6:[rbp-32] char.1:[rbp-44] 
  # [discarded value]: content_size.5
  # [discarded value]: content_length.6
  # [discarded value]: content.6
  # [discarded value]: char.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] content_size.1:[rbp-24] content.1:[rbp-32] content_length.1:[rbp-40] 
  # [discarded value]: content_size.1
  # [discarded value]: content.1
  # [discarded value]: content_length.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: file_path.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__create_source_266__end:
  mov rsp, rbp
  pop rbp
  ret

create_source_266__stack_frame_size: .word 48

  .loc 1 564 1
  .text
write_267:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_267__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_267__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi location.1:rsi 
  # $1.1: Boolean = location.1 == null
  .loc 1 565 9
  cmp rsi, 0
  sete al
  # [live values]: self.1:rdi location.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__write_267__3
.LABEL__write_267__2:
  # $2.1: @FILE = call(write_287, self.1, "null")
  .loc 1 566 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_315[rip] # "null"
  call write_287
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $2.1:rax 
  # return($2.1)
  .loc 1 566 9
  jmp .LABEL__write_267__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] 
.LABEL__write_267__3:
  # $3.1: @Source = load_struct_member(location.1, source)
  .loc 1 568 23
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [live values]: self.1:[rbp-16] location.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: @String = load_struct_member($3.1, file_path)
  .loc 1 568 23
  mov r15, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] location.1:rax:[rbp-8] $4.1:r15 
  # $5.1: @FILE = call(write_287, self.1, $4.1)
  .loc 1 568 12
  mov rdi, [rbp-16]
  mov rsi, r15
  call write_287
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write_289, $5.1, ':')
  .loc 1 568 12
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $6.1:rax 
  # $7.1: Int = load_struct_member(location.1, line)
  .loc 1 568 67
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] location.1:rbx:[rbp-8] $6.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_286, $6.1, $7.1)
  .loc 1 568 12
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write_289, $8.1, ':')
  .loc 1 568 12
  mov rdi, rax
  mov sil, 58
  call write_289
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $9.1:rax 
  # $10.1: Int = load_struct_member(location.1, column)
  .loc 1 568 99
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] location.1:rbx:[rbp-8] $9.1:rax $10.1:r15 
  # $11.1: @FILE = call(write_286, $9.1, $10.1)
  .loc 1 568 12
  mov rdi, rax
  mov rsi, r15
  call write_286
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $11.1:rax 
  # return($11.1)
  .loc 1 568 5
  jmp .LABEL__write_267__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: location.1
  # [live values]: 
.LABEL__write_267__end:
  mov rsp, rbp
  pop rbp
  ret

write_267__stack_frame_size: .word 16

  .loc 11 9 1
  .text
append_268:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_268__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_268__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 11 10 52
  mov rax, [rdi+8]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  # $2.1: @List_Item = new(List_Item)
  .loc 11 10 13
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_item, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, next_item, null)
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, data, data.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, is_removed, false)
  mov BYTE PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] $2.1:rax 
  # item.1: @List_Item = $2.1
  .loc 11 10 5
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 11 11 9
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  # $4.1: Boolean = $3.1 == null
  .loc 11 11 9
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, block.2, block.4)
  test r14b, r14b
  mov [rbp-32], rax
  jz .LABEL__append_268__4
.LABEL__append_268__2:
  # store_struct_member(self.1, first_item, item.1)
  .loc 11 12 9
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] 
  # jump(block.3)
.LABEL__append_268__3:
  # store_struct_member(self.1, last_item, item.1)
  .loc 11 16 5
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] 
  # $6.1: Int = load_struct_member(self.1, size)
  .loc 11 17 17
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $6.1:r15 
  # $7.1: Int = $6.1 + 1
  .loc 11 17 17
  mov r14, r15
  add r14, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $7.1:r14 
  # store_struct_member(self.1, size, $7.1)
  .loc 11 17 5
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] 
  # return()
  jmp .LABEL__append_268__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
.LABEL__append_268__4:
  # $5.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 11 14 9
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $5.1:rbx 
  # store_struct_member($5.1, next_item, item.1)
  .loc 11 14 9
  mov r15, [rbp-32]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] 
  # jump(block.3)
  jmp .LABEL__append_268__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__append_268__end:
  mov rsp, rbp
  pop rbp
  ret

append_268__stack_frame_size: .word 32

  .loc 11 20 1
  .text
prepend_269:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_269__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_269__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 21 52
  mov rax, [rdi+0]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  # $2.1: @List_Item = new(List_Item)
  .loc 11 21 13
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, prev_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_item, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] $2.1:rax 
  # store_struct_member($2.1, data, data.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] $2.1:rax 
  # store_struct_member($2.1, is_removed, false)
  mov BYTE PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] $2.1:rax 
  # item.1: @List_Item = $2.1
  .loc 11 21 5
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 22 9
  mov rbx, [rbp-24]
  mov r15, [rbx+0]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  # $4.1: Boolean = $3.1 == null
  .loc 11 22 9
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, block.2, block.4)
  test r14b, r14b
  mov [rbp-32], rax
  jz .LABEL__prepend_269__4
.LABEL__prepend_269__2:
  # store_struct_member(self.1, last_item, item.1)
  .loc 11 23 9
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] 
  # jump(block.3)
.LABEL__prepend_269__3:
  # store_struct_member(self.1, first_item, item.1)
  .loc 11 27 5
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+0], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] 
  # $6.1: Int = load_struct_member(self.1, size)
  .loc 11 28 17
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $6.1:r15 
  # $7.1: Int = $6.1 + 1
  .loc 11 28 17
  mov r14, r15
  add r14, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $7.1:r14 
  # store_struct_member(self.1, size, $7.1)
  .loc 11 28 5
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] 
  # return()
  jmp .LABEL__prepend_269__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
.LABEL__prepend_269__4:
  # $5.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 25 9
  mov rax, [rbp-24]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $5.1:rbx 
  # store_struct_member($5.1, prev_item, item.1)
  .loc 11 25 9
  mov r15, [rbp-32]
  mov QWORD PTR [rbx+0], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] 
  # jump(block.3)
  jmp .LABEL__prepend_269__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__prepend_269__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_269__stack_frame_size: .word 32

  .loc 11 31 1
  .text
remove_270:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_270__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_270__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 32 13
  mov rax, [rdi+0]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_270__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 11 33 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__remove_270__4
.LABEL__remove_270__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 11 34 13
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 == data.1
  .loc 11 34 13
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $4.1:r15 
  # jump($4.1, block.5, block.6)
  test r15b, r15b
  jz .LABEL__remove_270__6
.LABEL__remove_270__5:
  # store_struct_member(item.2, is_removed, true)
  .loc 11 35 13
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.4)
.LABEL__remove_270__4:
  # return(self.1)
  .loc 11 40 5
  mov rax, [rbp-24]
  jmp .LABEL__remove_270__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__remove_270__6:
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 38 16
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_270__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__remove_270__end:
  mov rsp, rbp
  pop rbp
  ret

remove_270__stack_frame_size: .word 32

  .loc 11 43 1
  .text
remove_all_271:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_all_271__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_all_271__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 44 13
  mov rax, [rdi+0]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_all_271__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 11 45 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__remove_all_271__4
.LABEL__remove_all_271__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 11 46 13
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 == data.1
  .loc 11 46 13
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $4.1:r15 
  # jump($4.1, block.5, block.6)
  test r15b, r15b
  jz .LABEL__remove_all_271__6
.LABEL__remove_all_271__5:
  # store_struct_member(item.2, is_removed, true)
  .loc 11 47 13
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.6)
.LABEL__remove_all_271__6:
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 49 16
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_all_271__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__remove_all_271__4:
  # return(self.1)
  .loc 11 51 5
  mov rax, [rbp-24]
  jmp .LABEL__remove_all_271__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__remove_all_271__end:
  mov rsp, rbp
  pop rbp
  ret

remove_all_271__stack_frame_size: .word 32

  .loc 11 54 1
  .text
prune_272:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prune_272__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prune_272__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 55 13
  mov rax, [rdi+0]
  # [live values]: self.1:rdi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__prune_272__2:
  # item.2: @List_Item = phi(item.1, item.13)
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 11 56 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__prune_272__4
.LABEL__prune_272__3:
  # $3.1: Boolean = load_struct_member(item.2, is_removed)
  .loc 11 57 13
  mov rax, [rbp-8]
  mov bl, [rax+24]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $3.1:rbx 
  # jump($3.1, block.5, block.6)
  test bl, bl
  jz .LABEL__prune_272__6
.LABEL__prune_272__5:
  # $4.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 11 58 17
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $4.1:rbx 
  # $5.1: Boolean = $4.1 != null
  .loc 11 58 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $5.1:r15 
  # jump($5.1, block.7, block.8)
  test r15b, r15b
  jz .LABEL__prune_272__8
.LABEL__prune_272__7:
  # $6.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 11 59 17
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $6.1:rbx 
  # $7.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 59 44
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $6.1:rbx $7.1:r15 
  # store_struct_member($6.1, next_item, $7.1)
  .loc 11 59 17
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.8)
.LABEL__prune_272__8:
  # $8.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 61 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $8.1:rbx 
  # $9.1: Boolean = $8.1 != null
  .loc 11 61 17
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $9.1:r15 
  # jump($9.1, block.9, block.10)
  test r15b, r15b
  jz .LABEL__prune_272__10
.LABEL__prune_272__9:
  # $10.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 62 17
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $10.1:rbx 
  # $11.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 11 62 44
  mov r15, [rax+0]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $10.1:rbx $11.1:r15 
  # store_struct_member($10.1, prev_item, $11.1)
  .loc 11 62 17
  mov QWORD PTR [rbx+0], r15
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.10)
.LABEL__prune_272__10:
  # $12.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 64 17
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $12.1:rbx 
  # $13.1: Boolean = $12.1 == item.2
  .loc 11 64 17
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $13.1:r15 
  # jump($13.1, block.11, block.12)
  test r15b, r15b
  jz .LABEL__prune_272__12
.LABEL__prune_272__11:
  # $14.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 65 35
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $14.1:rbx 
  # store_struct_member(self.1, first_item, $14.1)
  .loc 11 65 17
  mov r15, [rbp-16]
  mov QWORD PTR [r15+0], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.12)
.LABEL__prune_272__12:
  # $15.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 11 67 17
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $15.1:rbx 
  # $16.1: Boolean = $15.1 == item.2
  .loc 11 67 17
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $16.1:r15 
  # jump($16.1, block.13, block.14)
  test r15b, r15b
  jz .LABEL__prune_272__14
.LABEL__prune_272__13:
  # $17.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 11 68 34
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $17.1:rbx 
  # store_struct_member(self.1, last_item, $17.1)
  .loc 11 68 17
  mov r15, [rbp-16]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.14)
.LABEL__prune_272__14:
  # $18.1: Int = load_struct_member(self.1, size)
  .loc 11 70 25
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $18.1:rbx 
  # $19.1: Int = $18.1 - 1
  .loc 11 70 25
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $19.1:r15 
  # store_struct_member(self.1, size, $19.1)
  .loc 11 70 13
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.6)
.LABEL__prune_272__6:
  # item.13: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 72 16
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.13:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__prune_272__2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.13:[rbp-8] 
  # [discarded value]: item.13
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__prune_272__4:
  # return(self.1)
  .loc 11 74 5
  mov rax, [rbp-16]
  jmp .LABEL__prune_272__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__prune_272__end:
  mov rsp, rbp
  pop rbp
  ret

prune_272__stack_frame_size: .word 16

  .loc 11 77 1
  .text
replace_273:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_273__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_273__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # new_data.1: @Any = load_variable(new_data)
  # [live values]: self.1:rdi data.1:rsi new_data.1:rdx 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 78 13
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: data.1:rsi new_data.1:rdx item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_273__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 11 79 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__replace_273__4
.LABEL__replace_273__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 11 80 13
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 == data.1
  .loc 11 80 13
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $4.1:r15 
  # jump($4.1, block.5, block.6)
  test r15b, r15b
  jz .LABEL__replace_273__6
.LABEL__replace_273__5:
  # store_struct_member(item.2, data, new_data.1)
  .loc 11 81 13
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] new_data.1:rbx:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] 
  # jump(block.6)
.LABEL__replace_273__6:
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 83 16
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_273__2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__replace_273__4:
  # return()
  jmp .LABEL__replace_273__end
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: data.1
  # [discarded value]: new_data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__replace_273__end:
  mov rsp, rbp
  pop rbp
  ret

replace_273__stack_frame_size: .word 32

  .loc 11 87 1
  .text
contains_274:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR contains_274__stack_frame_size[rip]
  sub rsp, rax
.LABEL__contains_274__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 88 13
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: data.1:rsi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__contains_274__2:
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 11 89 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__contains_274__4
.LABEL__contains_274__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 11 90 13
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $3.1:rbx 
  # $4.1: Boolean = $3.1 == data.1
  .loc 11 90 13
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $4.1:r15 
  # jump($4.1, block.5, block.6)
  test r15b, r15b
  jz .LABEL__contains_274__6
.LABEL__contains_274__5:
  # return(true)
  .loc 11 91 13
  mov al, 1
  jmp .LABEL__contains_274__end
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__contains_274__6:
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 93 16
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.5:rbx:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rbx
  jmp .LABEL__contains_274__2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.5:[rbp-8] 
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__contains_274__4:
  # return(false)
  .loc 11 95 5
  mov al, 0
  jmp .LABEL__contains_274__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__contains_274__end:
  mov rsp, rbp
  pop rbp
  ret

contains_274__stack_frame_size: .word 16

  .loc 11 98 1
  .text
index_of_275:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_275__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_275__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # index.1: Int = 0
  .loc 11 99 5
  xor rax, rax
  # [live values]: self.1:rdi data.1:rsi index.1:rax 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 100 13
  mov rbx, [rdi+0]
  # [discarded value]: self.1
  # [live values]: data.1:rsi index.1:rax item.1:rbx 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
.LABEL__index_of_275__2:
  # index.5: Int = phi(index.1, index.4)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] 
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # $2.1: Boolean = item.2 != null
  .loc 11 101 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__index_of_275__4
.LABEL__index_of_275__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 11 102 13
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $3.1:rbx 
  # $4.1: Boolean = $3.1 == data.1
  .loc 11 102 13
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $4.1:r15 
  # jump($4.1, block.5, block.6)
  test r15b, r15b
  jz .LABEL__index_of_275__6
.LABEL__index_of_275__5:
  # return(index.5)
  .loc 11 103 13
  mov rax, [rbp-8]
  jmp .LABEL__index_of_275__end
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
.LABEL__index_of_275__6:
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  .loc 11 105 16
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] item.5:rbx:[rbp-16] 
  # index.4: Int = index.5 + 1
  .loc 11 106 17
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] item.5:rbx:[rbp-16] index.4:rax:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  jmp .LABEL__index_of_275__2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] item.5:[rbp-16] index.4:[rbp-8] 
  # [discarded value]: item.5
  # [discarded value]: index.4
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
.LABEL__index_of_275__4:
  # $7.1: Int =  - 1
  .loc 11 108 12
  mov rax, 1
  neg rax
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $7.1:rax 
  # return($7.1)
  .loc 11 108 5
  jmp .LABEL__index_of_275__end
  # [discarded value]: $7.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # [discarded value]: index.5
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [discarded value]: data.1
  # [discarded value]: index.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__index_of_275__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_275__stack_frame_size: .word 32

  .loc 11 111 1
  .text
get_276:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_276__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_276__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  # $1.1: Int = load_struct_member(self.1, size)
  .loc 11 112 18
  mov rax, [rdi+16]
  # [live values]: self.1:rdi index.1:rsi $1.1:rax 
  # $3.1: Boolean = index.1 >= $1.1
  .loc 11 112 9
  cmp rsi, rax
  setge bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi index.1:rsi $3.1:rbx 
  # jump($3.1, block.3, block.2)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__get_276__2
.LABEL__get_276__3:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 11 112 9
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # jump($3.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__get_276__5
.LABEL__get_276__4:
  # return(null)
  .loc 11 113 9
  xor rax, rax
  jmp .LABEL__get_276__end
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_276__5:
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 115 13
  mov rax, [rbp-17]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:rbx 
  # jump(block.7)
  mov [rbp-25], rbx
.LABEL__get_276__7:
  # item.5: @List_Item = phi(item.1, item.3)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] 
  # index.3: Int = phi(index.5, index.1)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # $6.1: Boolean = index.3 > 0
  .loc 11 116 12
  cmp QWORD PTR [rbp-9], 0
  setg al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:rax 
  # jump($6.1, block.8, block.9)
  test al, al
  jz .LABEL__get_276__9
.LABEL__get_276__8:
  # item.3: @List_Item = load_struct_member(item.5, next_item)
  .loc 11 117 16
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] item.3:rbx:[rbp-25] 
  # index.5: Int = index.3 - 1
  .loc 11 118 17
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] item.3:rbx:[rbp-25] index.5:rax:[rbp-9] 
  # jump(block.7)
  mov [rbp-9], rax
  mov [rbp-25], rbx
  jmp .LABEL__get_276__7
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] item.3:[rbp-25] index.5:[rbp-9] 
  # [discarded value]: item.3
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
.LABEL__get_276__9:
  # $9.1: @Any = load_struct_member(item.5, data)
  .loc 11 120 12
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:rax:[rbp-25] index.3:[rbp-9] $9.1:rbx 
  # return($9.1)
  .loc 11 120 5
  mov rax, rbx
  jmp .LABEL__get_276__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [discarded value]: item.5
  # [discarded value]: index.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] 
  # [discarded value]: item.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_276__2:
  # $3.2: Boolean = index.1 < 0
  .loc 11 112 31
  cmp QWORD PTR [rbp-9], 0
  setl al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:rax:[rbp-1] 
  # jump(block.3)
  mov [rbp-1], al
  jmp .LABEL__get_276__3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:[rbp-1] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: index.1
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_276__end:
  mov rsp, rbp
  pop rbp
  ret

get_276__stack_frame_size: .word 32

  .loc 11 123 1
  .text
first_277:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR first_277__stack_frame_size[rip]
  sub rsp, rax
.LABEL__first_277__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 124 9
  mov rax, [rdi+0]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 11 124 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__first_277__3
.LABEL__first_277__2:
  # return(null)
  .loc 11 125 9
  xor rax, rax
  jmp .LABEL__first_277__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__first_277__3:
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 11 127 12
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: @Any = load_struct_member($3.1, data)
  .loc 11 127 12
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] $4.1:r15 
  # return($4.1)
  .loc 11 127 5
  mov rax, r15
  jmp .LABEL__first_277__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__first_277__end:
  mov rsp, rbp
  pop rbp
  ret

first_277__stack_frame_size: .word 16

  .loc 11 130 1
  .text
last_278:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_278__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_278__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 11 131 9
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 11 131 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__last_278__3
.LABEL__last_278__2:
  # return(null)
  .loc 11 132 9
  xor rax, rax
  jmp .LABEL__last_278__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__last_278__3:
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 11 134 12
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: @Any = load_struct_member($3.1, data)
  .loc 11 134 12
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] $4.1:r15 
  # return($4.1)
  .loc 11 134 5
  mov rax, r15
  jmp .LABEL__last_278__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_278__end:
  mov rsp, rbp
  pop rbp
  ret

last_278__stack_frame_size: .word 16

  .loc 11 149 1
  .text
create_iterator_279:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_iterator_279__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_iterator_279__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # $1.1: @List_Item = load_struct_member(list.1, first_item)
  .loc 11 150 63
  mov rax, [rdi+0]
  # [discarded value]: list.1
  # [live values]: $1.1:rax 
  # $2.1: @List_Iterator = new(List_Iterator)
  .loc 11 150 12
  mov [rbp-8], rax
  mov rdi, 16
  call malloc
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, current_item, null)
  mov QWORD PTR [rax+0], 0
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  # store_struct_member($2.1, next_item, $1.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 11 150 5
  jmp .LABEL__create_iterator_279__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_iterator_279__end:
  mov rsp, rbp
  pop rbp
  ret

create_iterator_279__stack_frame_size: .word 16

  .loc 11 153 1
  .text
current_280:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR current_280__stack_frame_size[rip]
  sub rsp, rax
.LABEL__current_280__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 11 154 9
  mov rax, [rdi+0]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 11 154 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__current_280__3
.LABEL__current_280__2:
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 11 155 16
  mov rax, [rbp-8]
  mov rbx, [rax+0]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # $4.1: @Any = load_struct_member($3.1, data)
  .loc 11 155 16
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] $4.1:r15 
  # return($4.1)
  .loc 11 155 9
  mov rax, r15
  jmp .LABEL__current_280__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
.LABEL__current_280__3:
  # return(null)
  .loc 11 157 5
  xor rax, rax
  jmp .LABEL__current_280__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__current_280__end:
  mov rsp, rbp
  pop rbp
  ret

current_280__stack_frame_size: .word 16

  .loc 11 160 1
  .text
remove_current_281:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_current_281__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_current_281__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 11 161 5
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, is_removed, true)
  .loc 11 161 5
  mov BYTE PTR [rax+24], 1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__remove_current_281__end
  # [live values]: 
.LABEL__remove_current_281__end:
  mov rsp, rbp
  pop rbp
  ret

remove_current_281__stack_frame_size: .word 0

  .loc 11 164 1
  .text
has_next_282:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_next_282__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_next_282__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 11 165 12
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 11 165 12
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  # return($2.1)
  .loc 11 165 5
  mov al, bl
  jmp .LABEL__has_next_282__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_next_282__end:
  mov rsp, rbp
  pop rbp
  ret

has_next_282__stack_frame_size: .word 0

  .loc 11 168 1
  .text
next_283:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_283__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_283__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 11 169 9
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 11 169 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__next_283__3
.LABEL__next_283__2:
  # return(null)
  .loc 11 170 9
  xor rax, rax
  jmp .LABEL__next_283__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__next_283__3:
  # $3.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 11 172 25
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  # store_struct_member(self.1, current_item, $3.1)
  .loc 11 172 5
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] 
  # $4.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 11 173 22
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  # $5.1: @List_Item = load_struct_member($4.1, next_item)
  .loc 11 173 22
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] $5.1:r15 
  # store_struct_member(self.1, next_item, $5.1)
  .loc 11 173 5
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] 
  # $6.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 11 174 12
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  # $7.1: @Any = load_struct_member($6.1, data)
  .loc 11 174 12
  mov r15, [rbx+16]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] $7.1:r15 
  # return($7.1)
  .loc 11 174 5
  mov rax, r15
  jmp .LABEL__next_283__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_283__end:
  mov rsp, rbp
  pop rbp
  ret

next_283__stack_frame_size: .word 16

  .loc 11 177 1
  .text
change_284:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR change_284__stack_frame_size[rip]
  sub rsp, rax
.LABEL__change_284__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 11 178 9
  mov rax, [rdi+0]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 11 178 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi data.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__change_284__3
.LABEL__change_284__2:
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 11 179 9
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-16] data.1:[rbp-8] $3.1:rbx 
  # store_struct_member($3.1, data, data.1)
  .loc 11 179 9
  mov r15, [rbp-8]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-16] data.1:r15:[rbp-8] 
  # jump(block.3)
.LABEL__change_284__3:
  # return()
  jmp .LABEL__change_284__end
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__change_284__end:
  mov rsp, rbp
  pop rbp
  ret

change_284__stack_frame_size: .word 16

  .loc 1 573 1
  .text
write_line_285:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_line_285__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_line_285__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  # $1.1: @FILE = call(end_line_290, file.1)
  .loc 1 574 12
  mov [rbp-8], rsi
  call end_line_290
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(write_287, $1.1, string.1)
  .loc 1 574 12
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_287
  # [discarded value]: string.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 574 5
  jmp .LABEL__write_line_285__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_line_285__end:
  mov rsp, rbp
  pop rbp
  ret

write_line_285__stack_frame_size: .word 16

  .loc 1 577 1
  .text
write_286:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_286__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_286__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  # $1.1: Boolean = number.1 < 0
  .loc 1 578 9
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__write_286__3
.LABEL__write_286__2:
  # $2.1: @FILE = call(write_289, self.1, '-')
  .loc 1 579 16
  mov rdi, [rbp-16]
  mov sil, 45
  call write_289
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $2.1:rax 
  # $3.1: Int =  - number.1
  .loc 1 579 38
  mov rbx, [rbp-8]
  neg rbx
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $2.1:rax $3.1:rbx 
  # $4.1: @FILE = call(write_286, $2.1, $3.1)
  .loc 1 579 16
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $4.1:rax 
  # return($4.1)
  .loc 1 579 9
  jmp .LABEL__write_286__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
.LABEL__write_286__3:
  # $5.1: Boolean = number.1 >= 10
  .loc 1 581 9
  cmp QWORD PTR [rbp-8], 10
  setge al
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__write_286__6
.LABEL__write_286__5:
  # $6.1: Int = number.1 / 10
  .loc 1 582 20
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(write_286, self.1, $6.1)
  .loc 1 582 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call write_286
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # jump(block.6)
.LABEL__write_286__6:
  # $8.1: Int = number.1 // 10
  .loc 1 584 12
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $8.1:rdx 
  # $9.1: Int = cast('0')
  .loc 1 584 27
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $8.1:rdx $9.1:rax 
  # $10.1: Int = $8.1 + $9.1
  .loc 1 584 12
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $10.1:rbx 
  # $11.1: Int32 = cast($10.1)
  .loc 1 584 11
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $11.1:rax 
  # $12.1: Int32 = call(fputc, $11.1, self.1)
  .loc 1 584 5
  mov edi, eax
  mov rsi, [rbp-16]
  call fputc
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # return(self.1)
  .loc 1 585 5
  mov rax, [rbp-16]
  jmp .LABEL__write_286__end
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: number.1
  # [live values]: 
.LABEL__write_286__end:
  mov rsp, rbp
  pop rbp
  ret

write_286__stack_frame_size: .word 16

  .loc 1 588 1
  .text
write_287:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_287__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_287__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: self.1:rdi string.1:rsi 
  # $1.1: @Int8 = load_struct_member(string.1, data)
  .loc 1 589 23
  mov rax, [rsi+0]
  # [discarded value]: string.1
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @FILE = call(write_288, self.1, $1.1)
  .loc 1 589 12
  mov rsi, rax
  call write_288
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 589 5
  jmp .LABEL__write_287__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_287__end:
  mov rsp, rbp
  pop rbp
  ret

write_287__stack_frame_size: .word 0

  .loc 1 592 1
  .text
write_288:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_288__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_288__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # chars.1: @Int8 = load_variable(chars)
  # [live values]: self.1:rdi chars.1:rsi 
  # $1.1: Int32 = call(fputs, chars.1, self.1)
  .loc 1 593 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov rsi, [rbp-8]
  call fputs
  # [discarded value]: chars.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # $2.1: Int = cast($1.1)
  .loc 1 593 9
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rbx 
  # $3.1: Boolean = $2.1 < 0
  .loc 1 593 9
  cmp rbx, 0
  setl al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__write_288__3
.LABEL__write_288__2:
  # stderr.12: @FILE = load_variable(stderr)
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] stderr.12:stderr[rip] 
  # $4.1: @FILE = call(end_line_290, stderr.12)
  .loc 1 594 9
  mov rdi, stderr[rip]
  call end_line_290
  # [discarded value]: stderr.12
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # $5.1: @FILE = call(end_line_290, $4.1)
  .loc 1 594 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, "Failed to write text")
  .loc 1 594 9
  mov rdi, rax
  lea rsi, .LABEL__string_322[rip] # "Failed to write text"
  call write_287
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(end_line_290, $6.1)
  .loc 1 594 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # call(abort)
  .loc 1 595 9
  call abort
  # [live values]: self.1:[rbp-8] 
.LABEL__write_288__3:
  # return(self.1)
  .loc 1 597 5
  mov rax, [rbp-8]
  jmp .LABEL__write_288__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_288__end:
  mov rsp, rbp
  pop rbp
  ret

write_288__stack_frame_size: .word 16

  .loc 1 600 1
  .text
write_289:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_289__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_289__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # c.1: Int32 = cast(char.1)
  .loc 1 601 10
  mov al, sil
  movsx eax, al
  # [discarded value]: char.1
  # [live values]: self.1:rdi c.1:rax 
  # $2.1: Int32 = call(fputc, c.1, self.1)
  .loc 1 602 9
  mov [rbp-8], rdi
  mov edi, eax
  mov rsi, [rbp-8]
  mov [rbp-12], eax
  call fputc
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $2.1:rax 
  # $3.1: Boolean = $2.1 != c.1
  .loc 1 602 9
  cmp eax, DWORD PTR [rbp-12]
  setne bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  jz .LABEL__write_289__3
.LABEL__write_289__2:
  # stderr.13: @FILE = load_variable(stderr)
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] stderr.13:stderr[rip] 
  # $4.1: @FILE = call(end_line_290, stderr.13)
  .loc 1 603 9
  mov rdi, stderr[rip]
  call end_line_290
  # [discarded value]: stderr.13
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $4.1:rax 
  # $5.1: @FILE = call(end_line_290, $4.1)
  .loc 1 603 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $5.1:rax 
  # $6.1: @FILE = call(write_287, $5.1, "Failed to write character: ")
  .loc 1 603 9
  mov rdi, rax
  lea rsi, .LABEL__string_323[rip] # "Failed to write character: "
  call write_287
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $6.1:rax 
  # $7.1: Int = cast(c.1)
  .loc 1 603 81
  mov ebx, [rbp-12]
  movsx rbx, ebx
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $6.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write_286, $6.1, $7.1)
  .loc 1 603 9
  mov rdi, rax
  mov rsi, rbx
  call write_286
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $8.1:rax 
  # $9.1: @FILE = call(end_line_290, $8.1)
  .loc 1 603 9
  mov rdi, rax
  call end_line_290
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # call(abort)
  .loc 1 604 9
  call abort
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
.LABEL__write_289__3:
  # return(self.1)
  .loc 1 606 5
  mov rax, [rbp-8]
  jmp .LABEL__write_289__end
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [discarded value]: self.1
  # [discarded value]: c.1
  # [live values]: 
.LABEL__write_289__end:
  mov rsp, rbp
  pop rbp
  ret

write_289__stack_frame_size: .word 16

  .loc 1 609 1
  .text
end_line_290:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR end_line_290__stack_frame_size[rip]
  sub rsp, rax
.LABEL__end_line_290__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @FILE = call(write_289, self.1, '\n')
  .loc 1 610 12
  mov sil, 10
  call write_289
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 610 5
  jmp .LABEL__end_line_290__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__end_line_290__end:
  mov rsp, rbp
  pop rbp
  ret

end_line_290__stack_frame_size: .word 0

  .loc 1 613 1
  .text
flush_291:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR flush_291__stack_frame_size[rip]
  sub rsp, rax
.LABEL__flush_291__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # $1.1: Int32 = call(fflush, file.1)
  .loc 1 614 5
  mov [rbp-8], rdi
  call fflush
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] 
  # return(file.1)
  .loc 1 615 5
  mov rax, [rbp-8]
  jmp .LABEL__flush_291__end
  # [discarded value]: file.1
  # [live values]: 
.LABEL__flush_291__end:
  mov rsp, rbp
  pop rbp
  ret

flush_291__stack_frame_size: .word 16

  .loc 1 618 1
  .text
abort_292:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_292__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_292__1:
  # message.1: @String = load_variable(message)
  # [live values]: message.1:rdi 
  # stderr.14: @FILE = load_variable(stderr)
  # [live values]: message.1:rdi stderr.14:stderr[rip] 
  # $1.1: @FILE = call(end_line_290, stderr.14)
  .loc 1 619 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_290
  # [discarded value]: stderr.14
  # [live values]: message.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(end_line_290, $1.1)
  .loc 1 619 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write_287, $2.1, message.1)
  .loc 1 619 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_287
  # [discarded value]: message.1
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # $4.1: @FILE = call(end_line_290, $3.1)
  .loc 1 619 5
  mov rdi, rax
  call end_line_290
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: 
  # call(abort)
  .loc 1 620 5
  call abort
  # [live values]: 
.LABEL__abort_292__end:
  mov rsp, rbp
  pop rbp
  ret

abort_292__stack_frame_size: .word 16

  .loc 12 13 1
  .text
is_293:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_293__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_293__1:
  # self.1: @Object = load_variable(self)
  # [live values]: self.1:rdi 
  # object_type.1: @Object_Type = load_variable(object_type)
  # [live values]: self.1:rdi object_type.1:rsi 
  # self_type.1: @Object_Type = load_struct_member(self.1, object_type)
  .loc 12 14 18
  mov rax, [rdi+0]
  # [discarded value]: self.1
  # [live values]: object_type.1:rsi self_type.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__is_293__2:
  # self_type.2: @Object_Type = phi(self_type.1, self_type.4)
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # $2.1: Boolean = self_type.2 == object_type.1
  .loc 12 16 13
  mov rax, [rbp-8]
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:rax:[rbp-8] $2.1:rbx 
  # jump($2.1, block.4, block.5)
  test bl, bl
  jz .LABEL__is_293__5
.LABEL__is_293__4:
  # return(true)
  .loc 12 17 13
  mov al, 1
  jmp .LABEL__is_293__end
  # [discarded value]: $2.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
.LABEL__is_293__5:
  # self_type.4: @Object_Type = load_struct_member(self_type.2, base_type)
  .loc 12 19 21
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:rbx:[rbp-8] 
  # $4.1: Boolean = self_type.4 == null
  .loc 12 20 13
  cmp rbx, 0
  sete al
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, block.7, block.2)
  test al, al
  mov [rbp-8], rbx
  jz .LABEL__is_293__2
.LABEL__is_293__7:
  # return(false)
  .loc 12 21 13
  mov al, 0
  jmp .LABEL__is_293__end
  # [discarded value]: $4.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:[rbp-8] 
  # [discarded value]: self_type.4
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [discarded value]: self_type.2
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [discarded value]: object_type.1
  # [discarded value]: self_type.1
  # [live values]: 
.LABEL__is_293__end:
  mov rsp, rbp
  pop rbp
  ret

is_293__stack_frame_size: .word 16

  .loc 13 9 1
  .text
create_string_294:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_string_294__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_string_294__1:
  # data.1: @Int8 = load_variable(data)
  # [live values]: data.1:rdi 
  # data_length.1: Int = 0
  .loc 13 10 5
  xor rax, rax
  # [live values]: data.1:rdi data_length.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__create_string_294__2:
  # data_length.2: Int = phi(data_length.1, data_length.4)
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  # char.1: Int8 = load_array_item(data.1, data_length.2)
  .loc 13 12 17
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  add rax, rbx
  mov al, [rax]
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] char.1:rax 
  # $2.1: Boolean = char.1 == '\0'
  .loc 13 13 13
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:rbx 
  # jump($2.1, block.3, block.5)
  test bl, bl
  jz .LABEL__create_string_294__5
.LABEL__create_string_294__3:
  # $4.1: Int = data_length.2 + 1
  .loc 13 19 48
  mov rax, [rbp-8]
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $4.1:rax 
  # $5.1: @String = new(String)
  .loc 13 19 12
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, data, data.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+0], rbx
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, data_size, $4.1)
  mov r15, [rbp-24]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $4.1
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, length, data_length.2)
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:r15:[rbp-8] $5.1:rax 
  # return($5.1)
  .loc 13 19 5
  jmp .LABEL__create_string_294__end
  # [discarded value]: $5.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
.LABEL__create_string_294__5:
  # data_length.4: Int = data_length.2 + 1
  .loc 13 16 23
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] data_length.4:rax:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__create_string_294__2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] data_length.4:[rbp-8] 
  # [discarded value]: data_length.4
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  # [discarded value]: data_length.2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [discarded value]: data.1
  # [discarded value]: data_length.1
  # [live values]: 
.LABEL__create_string_294__end:
  mov rsp, rbp
  pop rbp
  ret

create_string_294__stack_frame_size: .word 32

  .loc 13 22 1
  .text
clone_295:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR clone_295__stack_frame_size[rip]
  sub rsp, rax
.LABEL__clone_295__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, data_size)
  .loc 13 23 39
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  # $3.1: @Int8 = call(malloc, $1.1)
  .loc 13 23 32
  mov [rbp-8], rdi
  mov rdi, rax
  call malloc
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: Int = load_struct_member(self.1, data_size)
  .loc 13 23 77
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  # $5.1: @String = new(String)
  .loc 13 23 14
  mov [rbp-16], rax
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, data, $3.1)
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+0], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, data_size, $4.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # store_struct_member($5.1, length, 0)
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # clone.1: @String = $5.1
  .loc 13 23 5
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] clone.1:rax 
  # $6.1: @String = call(append_304, clone.1, self.1)
  .loc 13 24 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_304
  # [discarded value]: self.1
  # [discarded value]: $6.1
  # [live values]: clone.1:[rbp-16] 
  # return(clone.1)
  .loc 13 25 5
  mov rax, [rbp-16]
  jmp .LABEL__clone_295__end
  # [discarded value]: clone.1
  # [live values]: 
.LABEL__clone_295__end:
  mov rsp, rbp
  pop rbp
  ret

clone_295__stack_frame_size: .word 32

  .loc 13 28 1
  .text
equals_296:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_296__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_296__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 29 9
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 13 29 24
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = $1.1 == $2.1
  .loc 13 29 9
  cmp rax, rbx
  sete r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__equals_296__3
.LABEL__equals_296__2:
  # index.1: Int = 0
  .loc 13 30 9
  xor rax, rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__equals_296__4:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # $4.1: Int = load_struct_member(self.1, length)
  .loc 13 31 24
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $4.1:rbx 
  # $5.1: Boolean = index.2 < $4.1
  .loc 13 31 16
  cmp QWORD PTR [rbp-24], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $5.1:r15 
  # jump($5.1, block.5, block.6)
  test r15b, r15b
  jz .LABEL__equals_296__6
.LABEL__equals_296__5:
  # $6.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 32 17
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rbx 
  # $7.1: Int8 = load_array_item($6.1, index.2)
  .loc 13 32 17
  mov r15, rbx
  mov r14, [rbp-24]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:r15 
  # $8.1: @Int8 = load_struct_member(other.1, data)
  .loc 13 32 37
  mov rbx, [rbp-8]
  mov r14, [rbx+0]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:r15 $8.1:r14 
  # $9.1: Int8 = load_array_item($8.1, index.2)
  .loc 13 32 37
  mov r13, r14
  mov r12, [rbp-24]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:r15 $9.1:r13 
  # $10.1: Boolean = $7.1 != $9.1
  .loc 13 32 17
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $10.1:r14 
  # jump($10.1, block.7, block.8)
  test r14b, r14b
  jz .LABEL__equals_296__8
.LABEL__equals_296__7:
  # return(false)
  .loc 13 33 17
  mov al, 0
  jmp .LABEL__equals_296__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__equals_296__8:
  # index.5: Int = index.2 + 1
  .loc 13 35 21
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:rax:[rbp-24] 
  # jump(block.4)
  mov [rbp-24], rax
  jmp .LABEL__equals_296__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:[rbp-24] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__equals_296__6:
  # return(true)
  .loc 13 37 9
  mov al, 1
  jmp .LABEL__equals_296__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
.LABEL__equals_296__3:
  # return(false)
  .loc 13 39 5
  mov al, 0
  jmp .LABEL__equals_296__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__equals_296__end:
  mov rsp, rbp
  pop rbp
  ret

equals_296__stack_frame_size: .word 32

  .loc 13 42 1
  .text
index_of_297:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_297__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_297__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # self_index.1: Int = 0
  .loc 13 43 5
  xor rax, rax
  # [live values]: self.1:rdi other.1:rsi self_index.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__index_of_297__2:
  # self_index.2: Int = phi(self_index.1, self_index.6)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 44 26
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 13 44 40
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx $2.1:r14 
  # $3.1: Int = $1.1 - $2.1
  .loc 13 44 26
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $3.1:r13 
  # $4.1: Boolean = self_index.2 <= $3.1
  .loc 13 44 12
  cmp QWORD PTR [rbp-8], r13
  setle bl
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:rbx 
  # jump($4.1, block.3, block.4)
  test bl, bl
  jz .LABEL__index_of_297__4
.LABEL__index_of_297__3:
  # other_index.1: Int = 0
  .loc 13 45 9
  xor rax, rax
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__index_of_297__5:
  # other_index.2: Int = phi(other_index.1, other_index.5)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] 
  # $5.1: Int = load_struct_member(other.1, length)
  .loc 13 46 30
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $5.1:rbx 
  # $7.1: Boolean = other_index.2 < $5.1
  .loc 13 46 16
  cmp QWORD PTR [rbp-32], rbx
  setl r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:r15 
  # jump($7.1, block.8, block.9)
  test r15b, r15b
  mov [rbp-33], r15b
  jz .LABEL__index_of_297__9
.LABEL__index_of_297__8:
  # $8.1: Int = self_index.2 + other_index.2
  .loc 13 46 56
  mov rax, [rbp-8]
  add rax, QWORD PTR [rbp-32]
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $8.1:rax 
  # $9.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 46 46
  mov rbx, [rbp-24]
  mov r15, [rbx+0]
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $8.1:rax $9.1:r15 
  # $10.1: Int8 = load_array_item($9.1, $8.1)
  .loc 13 46 46
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov r14b, [r14]
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $10.1:r14 
  # $11.1: @Int8 = load_struct_member(other.1, data)
  .loc 13 46 85
  mov rax, [rbp-16]
  mov r15, [rax+0]
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $10.1:r14 $11.1:r15 
  # $12.1: Int8 = load_array_item($11.1, other_index.2)
  .loc 13 46 85
  mov r13, r15
  mov r12, [rbp-32]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $11.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $10.1:r14 $12.1:r13 
  # $7.2: Boolean = $10.1 == $12.1
  .loc 13 46 46
  cmp r14b, r13b
  sete r15b
  # [discarded value]: $10.1
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:r15:[rbp-33] 
  # jump(block.9)
  mov [rbp-33], r15b
.LABEL__index_of_297__9:
  # $7.3: Boolean = phi($7.1, $7.2)
  .loc 13 46 16
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] $7.3:[rbp-33] 
  # jump($7.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__index_of_297__7
.LABEL__index_of_297__6:
  # other_index.5: Int = other_index.2 + 1
  .loc 13 47 27
  mov rax, [rbp-32]
  add rax, 1
  # [discarded value]: $7.3
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] other_index.5:rax:[rbp-32] $7.2:[rbp-33] 
  # jump(block.5)
  mov [rbp-32], rax
  jmp .LABEL__index_of_297__5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] other_index.5:[rbp-32] $7.2:[rbp-33] 
  # [discarded value]: other_index.5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] 
.LABEL__index_of_297__7:
  # $15.1: Int = load_struct_member(other.1, length)
  .loc 13 49 28
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $15.1:rbx $7.2:[rbp-33] 
  # $16.1: Boolean = other_index.2 == $15.1
  .loc 13 49 13
  cmp QWORD PTR [rbp-32], rbx
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $16.1:r15 $7.2:[rbp-33] 
  # jump($16.1, block.10, block.11)
  test r15b, r15b
  jz .LABEL__index_of_297__11
.LABEL__index_of_297__10:
  # return(self_index.2)
  .loc 13 50 13
  mov rax, [rbp-8]
  jmp .LABEL__index_of_297__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] 
.LABEL__index_of_297__11:
  # self_index.6: Int = self_index.2 + 1
  .loc 13 52 22
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] self_index.6:rax:[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__index_of_297__2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] self_index.6:[rbp-8] 
  # [discarded value]: self_index.6
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] $7.2:[rbp-33] 
  # [discarded value]: $7.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] other_index.2:[rbp-32] $7.1:[rbp-33] 
  # [discarded value]: other_index.2
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] other_index.1:[rbp-32] 
  # [discarded value]: other_index.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
.LABEL__index_of_297__4:
  # $18.1: Int =  - 1
  .loc 13 54 12
  mov rax, 1
  neg rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $18.1:rax 
  # return($18.1)
  .loc 13 54 5
  jmp .LABEL__index_of_297__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  # [discarded value]: self_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [discarded value]: self_index.1
  # [live values]: 
.LABEL__index_of_297__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_297__stack_frame_size: .word 48

  .loc 13 57 1
  .text
starts_with_298:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR starts_with_298__stack_frame_size[rip]
  sub rsp, rax
.LABEL__starts_with_298__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 58 9
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 13 58 23
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = $1.1 < $2.1
  .loc 13 58 9
  cmp rax, rbx
  setl r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__starts_with_298__3
.LABEL__starts_with_298__2:
  # return(false)
  .loc 13 59 9
  mov al, 0
  jmp .LABEL__starts_with_298__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
.LABEL__starts_with_298__3:
  # index.1: Int = 0
  .loc 13 61 5
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__starts_with_298__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # $4.1: Int = load_struct_member(other.1, length)
  .loc 13 62 20
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $4.1:rbx 
  # $5.1: Boolean = index.2 < $4.1
  .loc 13 62 12
  cmp QWORD PTR [rbp-24], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $5.1:r15 
  # jump($5.1, block.6, block.7)
  test r15b, r15b
  jz .LABEL__starts_with_298__7
.LABEL__starts_with_298__6:
  # $6.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 63 13
  mov rax, [rbp-16]
  mov rbx, [rax+0]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rbx 
  # $7.1: Int8 = load_array_item($6.1, index.2)
  .loc 13 63 13
  mov r15, rbx
  mov r14, [rbp-24]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:r15 
  # $8.1: @Int8 = load_struct_member(other.1, data)
  .loc 13 63 33
  mov rbx, [rbp-8]
  mov r14, [rbx+0]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:r15 $8.1:r14 
  # $9.1: Int8 = load_array_item($8.1, index.2)
  .loc 13 63 33
  mov r13, r14
  mov r12, [rbp-24]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:r15 $9.1:r13 
  # $10.1: Boolean = $7.1 != $9.1
  .loc 13 63 13
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $10.1:r14 
  # jump($10.1, block.8, block.9)
  test r14b, r14b
  jz .LABEL__starts_with_298__9
.LABEL__starts_with_298__8:
  # return(false)
  .loc 13 64 13
  mov al, 0
  jmp .LABEL__starts_with_298__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__starts_with_298__9:
  # index.5: Int = index.2 + 1
  .loc 13 66 17
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:rax:[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rax
  jmp .LABEL__starts_with_298__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:[rbp-24] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__starts_with_298__7:
  # return(true)
  .loc 13 68 5
  mov al, 1
  jmp .LABEL__starts_with_298__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__starts_with_298__end:
  mov rsp, rbp
  pop rbp
  ret

starts_with_298__stack_frame_size: .word 32

  .loc 13 71 1
  .text
ends_with_299:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR ends_with_299__stack_frame_size[rip]
  sub rsp, rax
.LABEL__ends_with_299__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 72 9
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 13 72 23
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = $1.1 < $2.1
  .loc 13 72 9
  cmp rax, rbx
  setl r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__ends_with_299__3
.LABEL__ends_with_299__2:
  # return(false)
  .loc 13 73 9
  mov al, 0
  jmp .LABEL__ends_with_299__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
.LABEL__ends_with_299__3:
  # index.1: Int = 0
  .loc 13 75 5
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__ends_with_299__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # $4.1: Int = load_struct_member(other.1, length)
  .loc 13 76 20
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $4.1:rbx 
  # $5.1: Boolean = index.2 < $4.1
  .loc 13 76 12
  cmp QWORD PTR [rbp-24], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $5.1:r15 
  # jump($5.1, block.6, block.7)
  test r15b, r15b
  jz .LABEL__ends_with_299__7
.LABEL__ends_with_299__6:
  # $6.1: Int = load_struct_member(self.1, length)
  .loc 13 77 23
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rbx 
  # $7.1: Int = load_struct_member(other.1, length)
  .loc 13 77 37
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rbx $7.1:r14 
  # $8.1: Int = $6.1 - $7.1
  .loc 13 77 23
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $8.1:r13 
  # $9.1: Int = $8.1 + index.2
  .loc 13 77 23
  mov rbx, r13
  add rbx, QWORD PTR [rbp-24]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $9.1:rbx 
  # $10.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 77 13
  mov r14, [rax+0]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $9.1:rbx $10.1:r14 
  # $11.1: Int8 = load_array_item($10.1, $9.1)
  .loc 13 77 13
  mov r13, r14
  mov r12, rbx
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $11.1:r13 
  # $12.1: @Int8 = load_struct_member(other.1, data)
  .loc 13 77 62
  mov rbx, [r15+0]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $11.1:r13 $12.1:rbx 
  # $13.1: Int8 = load_array_item($12.1, index.2)
  .loc 13 77 62
  mov r14, rbx
  mov r12, [rbp-24]
  add r14, r12
  mov r14b, [r14]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $11.1:r13 $13.1:r14 
  # $14.1: Boolean = $11.1 != $13.1
  .loc 13 77 13
  cmp r13b, r14b
  setne bl
  # [discarded value]: $11.1
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $14.1:rbx 
  # jump($14.1, block.8, block.9)
  test bl, bl
  jz .LABEL__ends_with_299__9
.LABEL__ends_with_299__8:
  # return(false)
  .loc 13 78 13
  mov al, 0
  jmp .LABEL__ends_with_299__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__ends_with_299__9:
  # index.5: Int = index.2 + 1
  .loc 13 80 17
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:rax:[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rax
  jmp .LABEL__ends_with_299__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:[rbp-24] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__ends_with_299__7:
  # return(true)
  .loc 13 82 5
  mov al, 1
  jmp .LABEL__ends_with_299__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__ends_with_299__end:
  mov rsp, rbp
  pop rbp
  ret

ends_with_299__stack_frame_size: .word 32

  .loc 13 85 1
  .text
last_index_of_300:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_300__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_300__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 86 37
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  # $2.1: Int = $1.1 - 1
  .loc 13 86 37
  mov rbx, rax
  dec rbx
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  # $3.1: Int = call(last_index_of_301, self.1, char.1, $2.1)
  .loc 13 86 12
  mov rdx, rbx
  call last_index_of_301
  # [discarded value]: self.1
  # [discarded value]: char.1
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 13 86 5
  jmp .LABEL__last_index_of_300__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__last_index_of_300__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_300__stack_frame_size: .word 0

  .loc 13 89 1
  .text
last_index_of_301:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_301__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_301__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # index.1: Int = load_variable(from_index)
  # [live values]: self.1:rdi char.1:rsi index.1:rdx 
  # jump(block.2)
  mov [rbp-8], rdx
  mov [rbp-9], sil
  mov [rbp-17], rdi
.LABEL__last_index_of_301__2:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] 
  # $2.1: Boolean = index.2 >= 0
  .loc 13 91 12
  cmp QWORD PTR [rbp-8], 0
  setge al
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.5, block.6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__last_index_of_301__6
.LABEL__last_index_of_301__5:
  # $3.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 91 26
  mov rax, [rbp-17]
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $3.1:rbx 
  # $4.1: Int8 = load_array_item($3.1, index.2)
  .loc 13 91 26
  mov r15, rbx
  mov r14, [rbp-8]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $4.1:r15 
  # $2.2: Boolean = $4.1 != char.1
  .loc 13 91 26
  cmp r15b, BYTE PTR [rbp-9]
  setne bl
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:rbx:[rbp-18] 
  # jump(block.6)
  mov [rbp-18], bl
.LABEL__last_index_of_301__6:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 13 91 12
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump($2.3, block.3, block.4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__last_index_of_301__4
.LABEL__last_index_of_301__3:
  # index.5: Int = index.2 - 1
  .loc 13 92 17
  mov rax, [rbp-8]
  dec rax
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:rax:[rbp-8] $2.2:[rbp-18] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_301__2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:[rbp-8] $2.2:[rbp-18] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
.LABEL__last_index_of_301__4:
  # return(index.2)
  .loc 13 94 5
  mov rax, [rbp-8]
  jmp .LABEL__last_index_of_301__end
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [discarded value]: index.2
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: char.1
  # [discarded value]: index.1
  # [live values]: 
.LABEL__last_index_of_301__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_301__stack_frame_size: .word 32

  .loc 13 97 1
  .text
append_302:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_302__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_302__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 98 9
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  # $2.1: Int = $1.1 + 1
  .loc 13 98 9
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  # $3.1: Int = load_struct_member(self.1, data_size)
  .loc 13 98 28
  mov rax, [rdi+8]
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx $3.1:rax 
  # $4.1: Boolean = $2.1 >= $3.1
  .loc 13 98 9
  cmp rbx, rax
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi char.1:rsi $4.1:r15 
  # jump($4.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-1], sil
  mov [rbp-9], rdi
  jz .LABEL__append_302__3
.LABEL__append_302__2:
  # $5.1: Int = load_struct_member(self.1, data_size)
  .loc 13 99 26
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $5.1:rbx 
  # $6.1: Int = $5.1 + 16
  .loc 13 99 26
  mov r15, rbx
  add r15, 16
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $6.1:r15 
  # store_struct_member(self.1, data_size, $6.1)
  .loc 13 99 9
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] 
  # $7.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 100 29
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $7.1:rbx 
  # $8.1: Int = load_struct_member(self.1, data_size)
  .loc 13 100 40
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $7.1:rbx $8.1:r15 
  # $10.1: @Int8 = call(realloc, $7.1, $8.1)
  .loc 13 100 21
  mov rdi, rbx
  mov rsi, r15
  call realloc
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $10.1:rax 
  # store_struct_member(self.1, data, $10.1)
  .loc 13 100 9
  mov rbx, [rbp-9]
  mov QWORD PTR [rbx+0], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-9] char.1:[rbp-1] 
  # jump(block.3)
.LABEL__append_302__3:
  # $11.1: Int = load_struct_member(self.1, length)
  .loc 13 102 15
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $11.1:rbx 
  # $12.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 102 5
  mov r15, [rax+0]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $11.1:rbx $12.1:r15 
  # store_array_item($12.1, $11.1, char.1)
  .loc 13 102 5
  mov r14, r15
  mov r13, rbx
  add r14, r13
  mov r13b, [rbp-1]
  mov BYTE PTR [r14], r13b
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] 
  # $13.1: Int = load_struct_member(self.1, length)
  .loc 13 103 19
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $13.1:rbx 
  # $14.1: Int = $13.1 + 1
  .loc 13 103 19
  mov r15, rbx
  add r15, 1
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $14.1:r15 
  # store_struct_member(self.1, length, $14.1)
  .loc 13 103 5
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] 
  # $15.1: Int = load_struct_member(self.1, length)
  .loc 13 104 15
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $15.1:rbx 
  # $16.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 104 5
  mov r15, [rax+0]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $15.1:rbx $16.1:r15 
  # store_array_item($16.1, $15.1, '\0')
  .loc 13 104 5
  mov r14, r15
  mov r12, rbx
  add r14, r12
  mov BYTE PTR [r14], 0
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] 
  # return(self.1)
  .loc 13 105 5
  jmp .LABEL__append_302__end
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__append_302__end:
  mov rsp, rbp
  pop rbp
  ret

append_302__stack_frame_size: .word 16

  .loc 13 108 1
  .text
append_303:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_303__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_303__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  # $1.1: Boolean = number.1 < 0
  .loc 13 109 9
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__append_303__3
.LABEL__append_303__2:
  # $2.1: @String = call(append_302, self.1, '-')
  .loc 13 110 16
  mov rdi, [rbp-16]
  mov sil, 45
  call append_302
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $2.1:rax 
  # $3.1: Int =  - number.1
  .loc 13 110 40
  mov rbx, [rbp-8]
  neg rbx
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $2.1:rax $3.1:rbx 
  # $4.1: @String = call(append_303, $2.1, $3.1)
  .loc 13 110 16
  mov rdi, rax
  mov rsi, rbx
  call append_303
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $4.1:rax 
  # return($4.1)
  .loc 13 110 9
  jmp .LABEL__append_303__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
.LABEL__append_303__3:
  # $5.1: Boolean = number.1 >= 10
  .loc 13 112 9
  cmp QWORD PTR [rbp-8], 10
  setge al
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__append_303__6
.LABEL__append_303__5:
  # $6.1: Int = number.1 / 10
  .loc 13 113 21
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $6.1:rax 
  # $7.1: @String = call(append_303, self.1, $6.1)
  .loc 13 113 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_303
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # jump(block.6)
.LABEL__append_303__6:
  # $8.1: Int = number.1 // 10
  .loc 13 115 25
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $8.1:rdx 
  # $9.1: Int = cast('0')
  .loc 13 115 40
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $8.1:rdx $9.1:rax 
  # $10.1: Int = $8.1 + $9.1
  .loc 13 115 25
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $10.1:rbx 
  # $11.1: Int8 = cast($10.1)
  .loc 13 115 24
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $11.1:rax 
  # $12.1: @String = call(append_302, self.1, $11.1)
  .loc 13 115 12
  mov rdi, [rbp-16]
  mov sil, al
  call append_302
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $12.1:rax 
  # return($12.1)
  .loc 13 115 5
  jmp .LABEL__append_303__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: number.1
  # [live values]: 
.LABEL__append_303__end:
  mov rsp, rbp
  pop rbp
  ret

append_303__stack_frame_size: .word 16

  .loc 13 118 1
  .text
append_304:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_304__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_304__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 13 119 9
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 13 119 23
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Int = $1.1 + $2.1
  .loc 13 119 9
  mov r15, rax
  add r15, rbx
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # $4.1: Int = load_struct_member(self.1, data_size)
  .loc 13 119 39
  mov rax, [rdi+8]
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 $4.1:rax 
  # $5.1: Boolean = $3.1 >= $4.1
  .loc 13 119 9
  cmp r15, rax
  setge bl
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:rdi other.1:rsi $5.1:rbx 
  # jump($5.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__append_304__3
.LABEL__append_304__2:
  # $6.1: Int = load_struct_member(self.1, length)
  .loc 13 120 26
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $6.1:rbx 
  # $7.1: Int = load_struct_member(other.1, length)
  .loc 13 120 40
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $6.1:rbx $7.1:r14 
  # $8.1: Int = $6.1 + $7.1
  .loc 13 120 26
  mov r13, rbx
  add r13, r14
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $8.1:r13 
  # $9.1: Int = $8.1 + 1
  .loc 13 120 26
  mov rbx, r13
  add rbx, 1
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $9.1:rbx 
  # store_struct_member(self.1, data_size, $9.1)
  .loc 13 120 9
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] 
  # $10.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 121 29
  mov rbx, [rax+0]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $10.1:rbx 
  # $11.1: Int = load_struct_member(self.1, data_size)
  .loc 13 121 40
  mov r14, [rax+8]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $10.1:rbx $11.1:r14 
  # $13.1: @Int8 = call(realloc, $10.1, $11.1)
  .loc 13 121 21
  mov rdi, rbx
  mov rsi, r14
  call realloc
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $13.1:rax 
  # store_struct_member(self.1, data, $13.1)
  .loc 13 121 9
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx+0], rax
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-16] other.1:[rbp-8] 
  # jump(block.3)
.LABEL__append_304__3:
  # index.1: Int = 0
  .loc 13 123 5
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax 
  # other_data.1: @Int8 = load_struct_member(other.1, data)
  .loc 13 124 19
  mov rbx, [rbp-8]
  mov r15, [rbx+0]
  # [live values]: self.1:[rbp-16] other.1:rbx:[rbp-8] index.1:rax other_data.1:r15 
  # self_data.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 125 18
  mov r14, [rbp-16]
  mov r13, [r14+0]
  # [live values]: self.1:r14:[rbp-16] other.1:rbx:[rbp-8] index.1:rax other_data.1:r15 self_data.1:r13 
  # self_length.1: Int = load_struct_member(self.1, length)
  .loc 13 126 20
  mov r12, [r14+16]
  # [live values]: self.1:r14:[rbp-16] other.1:rbx:[rbp-8] index.1:rax other_data.1:r15 self_data.1:r13 self_length.1:r12 
  # jump(block.4)
  mov [rbp-24], rax
  mov [rbp-32], r12
  mov [rbp-40], r13
  mov [rbp-48], r15
.LABEL__append_304__4:
  # self_length.2: Int = phi(self_length.1, self_length.4)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] 
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] 
  # char.1: Int8 = load_array_item(other_data.1, index.2)
  .loc 13 128 17
  mov rax, [rbp-48]
  mov rbx, [rbp-24]
  add rax, rbx
  mov al, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] char.1:rax 
  # store_array_item(self_data.1, self_length.2, char.1)
  .loc 13 129 9
  mov rbx, [rbp-40]
  mov r15, [rbp-32]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] char.1:rax 
  # $18.1: Boolean = char.1 == '\0'
  .loc 13 130 13
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] $18.1:rbx 
  # jump($18.1, block.5, block.7)
  test bl, bl
  jz .LABEL__append_304__7
.LABEL__append_304__5:
  # store_struct_member(self.1, length, self_length.2)
  .loc 13 136 5
  mov rax, [rbp-16]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:rbx:[rbp-32] index.2:[rbp-24] 
  # return(self.1)
  .loc 13 137 5
  jmp .LABEL__append_304__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] 
.LABEL__append_304__7:
  # self_length.4: Int = self_length.2 + 1
  .loc 13 133 23
  mov rax, [rbp-32]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] self_length.4:rax:[rbp-32] 
  # index.4: Int = index.2 + 1
  .loc 13 134 17
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] self_length.4:rax:[rbp-32] index.4:rbx:[rbp-24] 
  # jump(block.4)
  mov [rbp-32], rax
  mov [rbp-24], rbx
  jmp .LABEL__append_304__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] self_length.4:[rbp-32] index.4:[rbp-24] 
  # [discarded value]: self_length.4
  # [discarded value]: index.4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] self_length.2:[rbp-32] index.2:[rbp-24] 
  # [discarded value]: self_length.2
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-48] self_data.1:[rbp-40] self_length.1:[rbp-32] 
  # [discarded value]: index.1
  # [discarded value]: other_data.1
  # [discarded value]: self_data.1
  # [discarded value]: self_length.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__append_304__end:
  mov rsp, rbp
  pop rbp
  ret

append_304__stack_frame_size: .word 48

  .loc 13 140 1
  .text
remove_305:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_305__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_305__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # begin_index.1: Int = load_variable(begin_index)
  # [live values]: self.1:rdi begin_index.1:rsi 
  # end_index.1: Int = load_variable(end_index)
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx 
  # $2.1: Boolean = begin_index.1 < 0
  .loc 13 141 9
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx $2.1:rax 
  # jump($2.1, block.5, block.4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__remove_305__4
.LABEL__remove_305__5:
  # $4.1: Boolean = phi($2.1, $2.2)
  .loc 13 141 9
  mov al, [rbp-1]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, block.3, block.2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__remove_305__2
.LABEL__remove_305__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 13 141 9
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # jump($4.3, block.6, block.7)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_305__7
.LABEL__remove_305__6:
  # call(abort_292, "Invalid state")
  .loc 13 142 9
  lea rdi, .LABEL__string_43[rip] # "Invalid state"
  call abort_292
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
.LABEL__remove_305__7:
  # index.1: Int = 0
  .loc 13 144 5
  xor rax, rax
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:rax 
  # jump(block.8)
  mov [rbp-34], rax
.LABEL__remove_305__8:
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # $7.1: Int = index.2 + end_index.1
  .loc 13 145 12
  mov rax, [rbp-34]
  add rax, QWORD PTR [rbp-9]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax 
  # $8.1: Int = load_struct_member(self.1, length)
  .loc 13 145 33
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax $8.1:r15 
  # $9.1: Boolean = $7.1 <= $8.1
  .loc 13 145 12
  cmp rax, r15
  setle r14b
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:r14 
  # jump($9.1, block.9, block.10)
  test r14b, r14b
  jz .LABEL__remove_305__10
.LABEL__remove_305__9:
  # $10.1: Int = begin_index.1 + index.2
  .loc 13 146 19
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $10.1:rax 
  # $11.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 146 9
  mov rbx, [rbp-25]
  mov r15, [rbx+0]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $10.1:rax $11.1:r15 
  # $12.1: Int = end_index.1 + index.2
  .loc 13 146 52
  mov r14, [rbp-9]
  add r14, QWORD PTR [rbp-34]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $10.1:rax $11.1:r15 $12.1:r14 
  # $13.1: @Int8 = load_struct_member(self.1, data)
  .loc 13 146 42
  mov r13, [rbx+0]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $10.1:rax $11.1:r15 $12.1:r14 $13.1:r13 
  # $14.1: Int8 = load_array_item($13.1, $12.1)
  .loc 13 146 42
  mov r12, r13
  mov r11, r14
  add r12, r11
  mov r12b, [r12]
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $10.1:rax $11.1:r15 $14.1:r12 
  # store_array_item($11.1, $10.1, $14.1)
  .loc 13 146 9
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov BYTE PTR [r14], r12b
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [discarded value]: $14.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # index.4: Int = index.2 + 1
  .loc 13 147 17
  mov rax, [rbp-34]
  add rax, 1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] index.4:rax:[rbp-34] 
  # jump(block.8)
  mov [rbp-34], rax
  jmp .LABEL__remove_305__8
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] index.4:[rbp-34] 
  # [discarded value]: index.4
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
.LABEL__remove_305__10:
  # $16.1: Int = begin_index.1 + index.2
  .loc 13 149 19
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $16.1:rax 
  # $17.1: Int = $16.1 - 1
  .loc 13 149 19
  mov rbx, rax
  dec rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $17.1:rbx 
  # store_struct_member(self.1, length, $17.1)
  .loc 13 149 5
  mov rax, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # return(self.1)
  .loc 13 150 5
  jmp .LABEL__remove_305__end
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
.LABEL__remove_305__2:
  # $5.1: Int = load_struct_member(self.1, length)
  .loc 13 141 68
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $5.1:rbx $4.1:[rbp-26] 
  # $4.2: Boolean = end_index.1 >= $5.1
  .loc 13 141 55
  cmp QWORD PTR [rbp-9], rbx
  setge r15b
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:r15:[rbp-26] $4.1:[rbp-26] 
  # jump(block.3)
  mov [rbp-26], r15b
  jmp .LABEL__remove_305__3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_305__4:
  # $2.2: Boolean = begin_index.1 > end_index.1
  .loc 13 141 28
  mov rax, [rbp-17]
  cmp rax, QWORD PTR [rbp-9]
  setg bl
  # [live values]: self.1:[rbp-25] begin_index.1:rax:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:rbx:[rbp-1] 
  # jump(block.5)
  mov [rbp-1], bl
  jmp .LABEL__remove_305__5
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: begin_index.1
  # [discarded value]: end_index.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__remove_305__end:
  mov rsp, rbp
  pop rbp
  ret

remove_305__stack_frame_size: .word 48

  .section .rodata

  .align 8
.LABEL__string_0:
  .quad .LABEL__string_0__data
  .quad 7
  .quad 6
.LABEL__string_0__data: .string "Usage:"

  .align 8
.LABEL__string_1:
  .quad .LABEL__string_1__data
  .quad 28
  .quad 27
.LABEL__string_1__data: .string " <INPUT FILE> <OUTPUT FILE>"

  .align 8
.LABEL__string_2:
  .quad .LABEL__string_2__data
  .quad 6
  .quad 5
.LABEL__string_2__data: .string ".code"

  .align 8
.LABEL__string_3:
  .quad .LABEL__string_3__data
  .quad 2
  .quad 1
.LABEL__string_3__data: .string "'"

  .align 8
.LABEL__string_4:
  .quad .LABEL__string_4__data
  .quad 28
  .quad 27
.LABEL__string_4__data: .string "' doesn't end with '.code'."

  .align 8
.LABEL__string_5:
  .quad .LABEL__string_5__data
  .quad 3
  .quad 2
.LABEL__string_5__data: .string ".s"

  .align 8
.LABEL__string_6:
  .quad .LABEL__string_6__data
  .quad 25
  .quad 24
.LABEL__string_6__data: .string "' doesn't end with '.s'."

  .align 8
.LABEL__string_7:
  .quad .LABEL__string_7__data
  .quad 4
  .quad 3
.LABEL__string_7__data: .string ".ir"

  .align 8
.LABEL__string_8:
  .quad .LABEL__string_8__data
  .quad 26
  .quad 25
.LABEL__string_8__data: .string "' doesn't end with '.ir'."

  .align 8
.LABEL__string_9:
  .quad .LABEL__string_9__data
  .quad 2
  .quad 1
.LABEL__string_9__data: .string "w"

  .align 8
.LABEL__string_10:
  .quad .LABEL__string_10__data
  .quad 9
  .quad 8
.LABEL__string_10__data: .string "  .file "

  .align 8
.LABEL__string_11:
  .quad .LABEL__string_11__data
  .quad 3
  .quad 2
.LABEL__string_11__data: .string " \""

  .align 8
.LABEL__string_12:
  .quad .LABEL__string_12__data
  .quad 2
  .quad 1
.LABEL__string_12__data: .string "\""

  .align 8
.LABEL__string_13:
  .quad .LABEL__string_13__data
  .quad 25
  .quad 24
.LABEL__string_13__data: .string "  .intel_syntax noprefix"

  .align 8
.LABEL__string_14:
  .quad .LABEL__string_14__data
  .quad 8
  .quad 7
.LABEL__string_14__data: .string "  .loc "

  .align 8
.LABEL__string_15:
  .quad .LABEL__string_15__data
  .quad 8
  .quad 7
.LABEL__string_15__data: .string "  .text"

  .align 8
.LABEL__string_16:
  .quad .LABEL__string_16__data
  .quad 5
  .quad 4
.LABEL__string_16__data: .string "main"

  .align 8
.LABEL__string_17:
  .quad .LABEL__string_17__data
  .quad 14
  .quad 13
.LABEL__string_17__data: .string "  .globl main"

  .align 8
.LABEL__string_18:
  .quad .LABEL__string_18__data
  .quad 6
  .quad 5
.LABEL__string_18__data: .string "main:"

  .align 8
.LABEL__string_19:
  .quad .LABEL__string_19__data
  .quad 11
  .quad 10
.LABEL__string_19__data: .string "  push rbp"

  .align 8
.LABEL__string_20:
  .quad .LABEL__string_20__data
  .quad 15
  .quad 14
.LABEL__string_20__data: .string "  mov rbp, rsp"

  .align 8
.LABEL__string_21:
  .quad .LABEL__string_21__data
  .quad 23
  .quad 22
.LABEL__string_21__data: .string "  movsx rax, WORD PTR "

  .align 8
.LABEL__string_22:
  .quad .LABEL__string_22__data
  .quad 19
  .quad 18
.LABEL__string_22__data: .string "__stack_frame_size"

  .align 8
.LABEL__string_23:
  .quad .LABEL__string_23__data
  .quad 6
  .quad 5
.LABEL__string_23__data: .string "[rip]"

  .align 8
.LABEL__string_24:
  .quad .LABEL__string_24__data
  .quad 15
  .quad 14
.LABEL__string_24__data: .string "  sub rsp, rax"

  .align 8
.LABEL__string_25:
  .quad .LABEL__string_25__data
  .quad 2
  .quad 1
.LABEL__string_25__data: .string ":"

  .align 8
.LABEL__string_26:
  .quad .LABEL__string_26__data
  .quad 15
  .quad 14
.LABEL__string_26__data: .string "  mov rsp, rbp"

  .align 8
.LABEL__string_27:
  .quad .LABEL__string_27__data
  .quad 10
  .quad 9
.LABEL__string_27__data: .string "  pop rbp"

  .align 8
.LABEL__string_28:
  .quad .LABEL__string_28__data
  .quad 6
  .quad 5
.LABEL__string_28__data: .string "  ret"

  .align 8
.LABEL__string_29:
  .quad .LABEL__string_29__data
  .quad 9
  .quad 8
.LABEL__string_29__data: .string ": .word "

  .align 8
.LABEL__string_30:
  .quad .LABEL__string_30__data
  .quad 9
  .quad 8
.LABEL__string_30__data: .string ".LABEL__"

  .align 8
.LABEL__string_31:
  .quad .LABEL__string_31__data
  .quad 3
  .quad 2
.LABEL__string_31__data: .string "__"

  .align 8
.LABEL__string_32:
  .quad .LABEL__string_32__data
  .quad 4
  .quad 3
.LABEL__string_32__data: .string "end"

  .align 8
.LABEL__string_33:
  .quad .LABEL__string_33__data
  .quad 32
  .quad 31
.LABEL__string_33__data: .string "  # [unreachable instruction]: "

  .align 8
.LABEL__string_34:
  .quad .LABEL__string_34__data
  .quad 5
  .quad 4
.LABEL__string_34__data: .string "  # "

  .align 8
.LABEL__string_35:
  .quad .LABEL__string_35__data
  .quad 26
  .quad 25
.LABEL__string_35__data: .string "Unsupported instruction: "

  .align 8
.LABEL__string_36:
  .quad .LABEL__string_36__data
  .quad 7
  .quad 6
.LABEL__string_36__data: .string "  add "

  .align 8
.LABEL__string_37:
  .quad .LABEL__string_37__data
  .quad 3
  .quad 2
.LABEL__string_37__data: .string ", "

  .align 8
.LABEL__string_38:
  .quad .LABEL__string_38__data
  .quad 8
  .quad 7
.LABEL__string_38__data: .string "  call "

  .align 8
.LABEL__string_39:
  .quad .LABEL__string_39__data
  .quad 9
  .quad 8
.LABEL__string_39__data: .string "  movsx "

  .align 8
.LABEL__string_40:
  .quad .LABEL__string_40__data
  .quad 13
  .quad 12
.LABEL__string_40__data: .string "Cannot cast "

  .align 8
.LABEL__string_41:
  .quad .LABEL__string_41__data
  .quad 5
  .quad 4
.LABEL__string_41__data: .string " to "

  .align 8
.LABEL__string_42:
  .quad .LABEL__string_42__data
  .quad 23
  .quad 22
.LABEL__string_42__data: .string "Unsupported value type"

  .align 8
.LABEL__string_43:
  .quad .LABEL__string_43__data
  .quad 14
  .quad 13
.LABEL__string_43__data: .string "Invalid state"

  .align 8
.LABEL__string_44:
  .quad .LABEL__string_44__data
  .quad 8
  .quad 7
.LABEL__string_44__data: .string "  test "

  .align 8
.LABEL__string_45:
  .quad .LABEL__string_45__data
  .quad 7
  .quad 6
.LABEL__string_45__data: .string "  jnz "

  .align 8
.LABEL__string_46:
  .quad .LABEL__string_46__data
  .quad 6
  .quad 5
.LABEL__string_46__data: .string "  jz "

  .align 8
.LABEL__string_47:
  .quad .LABEL__string_47__data
  .quad 7
  .quad 6
.LABEL__string_47__data: .string "  cmp "

  .align 8
.LABEL__string_48:
  .quad .LABEL__string_48__data
  .quad 8
  .quad 7
.LABEL__string_48__data: .string "  sete "

  .align 8
.LABEL__string_49:
  .quad .LABEL__string_49__data
  .quad 8
  .quad 7
.LABEL__string_49__data: .string "  setg "

  .align 8
.LABEL__string_50:
  .quad .LABEL__string_50__data
  .quad 9
  .quad 8
.LABEL__string_50__data: .string "  setge "

  .align 8
.LABEL__string_51:
  .quad .LABEL__string_51__data
  .quad 8
  .quad 7
.LABEL__string_51__data: .string "  setl "

  .align 8
.LABEL__string_52:
  .quad .LABEL__string_52__data
  .quad 9
  .quad 8
.LABEL__string_52__data: .string "  setle "

  .align 8
.LABEL__string_53:
  .quad .LABEL__string_53__data
  .quad 9
  .quad 8
.LABEL__string_53__data: .string "  setne "

  .align 8
.LABEL__string_54:
  .quad .LABEL__string_54__data
  .quad 42
  .quad 41
.LABEL__string_54__data: .string "Unsupported comparison instruction type: "

  .align 8
.LABEL__string_55:
  .quad .LABEL__string_55__data
  .quad 7
  .quad 6
.LABEL__string_55__data: .string "  jmp "

  .align 8
.LABEL__string_56:
  .quad .LABEL__string_56__data
  .quad 7
  .quad 6
.LABEL__string_56__data: .string "  cqto"

  .align 8
.LABEL__string_57:
  .quad .LABEL__string_57__data
  .quad 8
  .quad 7
.LABEL__string_57__data: .string "  idiv "

  .align 8
.LABEL__string_58:
  .quad .LABEL__string_58__data
  .quad 7
  .quad 6
.LABEL__string_58__data: .string "  mov "

  .align 8
.LABEL__string_59:
  .quad .LABEL__string_59__data
  .quad 4
  .quad 3
.LABEL__string_59__data: .string ", ["

  .align 8
.LABEL__string_60:
  .quad .LABEL__string_60__data
  .quad 8
  .quad 7
.LABEL__string_60__data: .string "  imul "

  .align 8
.LABEL__string_61:
  .quad .LABEL__string_61__data
  .quad 7
  .quad 6
.LABEL__string_61__data: .string "  lea "

  .align 8
.LABEL__string_62:
  .quad .LABEL__string_62__data
  .quad 12
  .quad 11
.LABEL__string_62__data: .string "Object_Type"

  .align 8
.LABEL__string_63:
  .quad .LABEL__string_63__data
  .quad 34
  .quad 33
.LABEL__string_63__data: .string "Unsupported non-external variable"

  .align 8
.LABEL__string_64:
  .quad .LABEL__string_64__data
  .quad 28
  .quad 27
.LABEL__string_64__data: .string "Unsupported variable type: "

  .align 8
.LABEL__string_65:
  .quad .LABEL__string_65__data
  .quad 25
  .quad 24
.LABEL__string_65__data: .string "TODO: compute array size"

  .align 8
.LABEL__string_66:
  .quad .LABEL__string_66__data
  .quad 7
  .quad 6
.LABEL__string_66__data: .string "malloc"

  .align 8
.LABEL__string_67:
  .quad .LABEL__string_67__data
  .quad 12
  .quad 11
.LABEL__string_67__data: .string "Looks like "

  .align 8
.LABEL__string_68:
  .quad .LABEL__string_68__data
  .quad 29
  .quad 28
.LABEL__string_68__data: .string " is not properly initialized"

  .align 8
.LABEL__string_69:
  .quad .LABEL__string_69__data
  .quad 11
  .quad 10
.LABEL__string_69__data: .string "QWORD PTR "

  .align 8
.LABEL__string_70:
  .quad .LABEL__string_70__data
  .quad 11
  .quad 10
.LABEL__string_70__data: .string "DWORD PTR "

  .align 8
.LABEL__string_71:
  .quad .LABEL__string_71__data
  .quad 10
  .quad 9
.LABEL__string_71__data: .string "WORD PTR "

  .align 8
.LABEL__string_72:
  .quad .LABEL__string_72__data
  .quad 10
  .quad 9
.LABEL__string_72__data: .string "BYTE PTR "

  .align 8
.LABEL__string_73:
  .quad .LABEL__string_73__data
  .quad 8
  .quad 7
.LABEL__string_73__data: .string "  mov ["

  .align 8
.LABEL__string_74:
  .quad .LABEL__string_74__data
  .quad 4
  .quad 3
.LABEL__string_74__data: .string "], "

  .align 8
.LABEL__string_75:
  .quad .LABEL__string_75__data
  .quad 7
  .quad 6
.LABEL__string_75__data: .string "  neg "

  .align 8
.LABEL__string_76:
  .quad .LABEL__string_76__data
  .quad 7
  .quad 6
.LABEL__string_76__data: .string "  dec "

  .align 8
.LABEL__string_77:
  .quad .LABEL__string_77__data
  .quad 7
  .quad 6
.LABEL__string_77__data: .string "  sub "

  .align 8
.LABEL__string_78:
  .quad .LABEL__string_78__data
  .quad 7
  .quad 6
.LABEL__string_78__data: .string "  xor "

  .align 8
.LABEL__string_79:
  .quad .LABEL__string_79__data
  .quad 4
  .quad 3
.LABEL__string_79__data: .string " # "

  .align 8
.LABEL__string_80:
  .quad .LABEL__string_80__data
  .quad 27
  .quad 26
.LABEL__string_80__data: .string "Unsupported literal type: "

  .align 8
.LABEL__string_81:
  .quad .LABEL__string_81__data
  .quad 25
  .quad 24
.LABEL__string_81__data: .string "Unsupported value type: "

  .align 8
.LABEL__string_82:
  .quad .LABEL__string_82__data
  .quad 31
  .quad 30
.LABEL__string_82__data: .string "Unsupported constant literal: "

  .align 8
.LABEL__string_83:
  .quad .LABEL__string_83__data
  .quad 24
  .quad 23
.LABEL__string_83__data: .string "Unsupported type size: "

  .align 8
.LABEL__string_84:
  .quad .LABEL__string_84__data
  .quad 20
  .quad 19
.LABEL__string_84__data: .string "Unsupported value: "

  .align 8
.LABEL__string_85:
  .quad .LABEL__string_85__data
  .quad 13
  .quad 12
.LABEL__string_85__data: .string "[Generator] "

  .align 8
.LABEL__string_86:
  .quad .LABEL__string_86__data
  .quad 4
  .quad 3
.LABEL__string_86__data: .string "rax"

  .align 8
.LABEL__string_87:
  .quad .LABEL__string_87__data
  .quad 4
  .quad 3
.LABEL__string_87__data: .string "eax"

  .align 8
.LABEL__string_88:
  .quad .LABEL__string_88__data
  .quad 3
  .quad 2
.LABEL__string_88__data: .string "ax"

  .align 8
.LABEL__string_89:
  .quad .LABEL__string_89__data
  .quad 3
  .quad 2
.LABEL__string_89__data: .string "al"

  .align 8
.LABEL__string_90:
  .quad .LABEL__string_90__data
  .quad 4
  .quad 3
.LABEL__string_90__data: .string "rcx"

  .align 8
.LABEL__string_91:
  .quad .LABEL__string_91__data
  .quad 4
  .quad 3
.LABEL__string_91__data: .string "ecx"

  .align 8
.LABEL__string_92:
  .quad .LABEL__string_92__data
  .quad 3
  .quad 2
.LABEL__string_92__data: .string "cx"

  .align 8
.LABEL__string_93:
  .quad .LABEL__string_93__data
  .quad 3
  .quad 2
.LABEL__string_93__data: .string "cl"

  .align 8
.LABEL__string_94:
  .quad .LABEL__string_94__data
  .quad 4
  .quad 3
.LABEL__string_94__data: .string "rdx"

  .align 8
.LABEL__string_95:
  .quad .LABEL__string_95__data
  .quad 4
  .quad 3
.LABEL__string_95__data: .string "edx"

  .align 8
.LABEL__string_96:
  .quad .LABEL__string_96__data
  .quad 3
  .quad 2
.LABEL__string_96__data: .string "dx"

  .align 8
.LABEL__string_97:
  .quad .LABEL__string_97__data
  .quad 3
  .quad 2
.LABEL__string_97__data: .string "dl"

  .align 8
.LABEL__string_98:
  .quad .LABEL__string_98__data
  .quad 4
  .quad 3
.LABEL__string_98__data: .string "rbx"

  .align 8
.LABEL__string_99:
  .quad .LABEL__string_99__data
  .quad 4
  .quad 3
.LABEL__string_99__data: .string "ebx"

  .align 8
.LABEL__string_100:
  .quad .LABEL__string_100__data
  .quad 3
  .quad 2
.LABEL__string_100__data: .string "bx"

  .align 8
.LABEL__string_101:
  .quad .LABEL__string_101__data
  .quad 3
  .quad 2
.LABEL__string_101__data: .string "bl"

  .align 8
.LABEL__string_102:
  .quad .LABEL__string_102__data
  .quad 4
  .quad 3
.LABEL__string_102__data: .string "rsi"

  .align 8
.LABEL__string_103:
  .quad .LABEL__string_103__data
  .quad 4
  .quad 3
.LABEL__string_103__data: .string "esi"

  .align 8
.LABEL__string_104:
  .quad .LABEL__string_104__data
  .quad 3
  .quad 2
.LABEL__string_104__data: .string "si"

  .align 8
.LABEL__string_105:
  .quad .LABEL__string_105__data
  .quad 4
  .quad 3
.LABEL__string_105__data: .string "sil"

  .align 8
.LABEL__string_106:
  .quad .LABEL__string_106__data
  .quad 4
  .quad 3
.LABEL__string_106__data: .string "rdi"

  .align 8
.LABEL__string_107:
  .quad .LABEL__string_107__data
  .quad 4
  .quad 3
.LABEL__string_107__data: .string "edi"

  .align 8
.LABEL__string_108:
  .quad .LABEL__string_108__data
  .quad 3
  .quad 2
.LABEL__string_108__data: .string "di"

  .align 8
.LABEL__string_109:
  .quad .LABEL__string_109__data
  .quad 4
  .quad 3
.LABEL__string_109__data: .string "dil"

  .align 8
.LABEL__string_110:
  .quad .LABEL__string_110__data
  .quad 3
  .quad 2
.LABEL__string_110__data: .string "r8"

  .align 8
.LABEL__string_111:
  .quad .LABEL__string_111__data
  .quad 4
  .quad 3
.LABEL__string_111__data: .string "r8d"

  .align 8
.LABEL__string_112:
  .quad .LABEL__string_112__data
  .quad 4
  .quad 3
.LABEL__string_112__data: .string "r8w"

  .align 8
.LABEL__string_113:
  .quad .LABEL__string_113__data
  .quad 4
  .quad 3
.LABEL__string_113__data: .string "r8b"

  .align 8
.LABEL__string_114:
  .quad .LABEL__string_114__data
  .quad 3
  .quad 2
.LABEL__string_114__data: .string "r9"

  .align 8
.LABEL__string_115:
  .quad .LABEL__string_115__data
  .quad 4
  .quad 3
.LABEL__string_115__data: .string "r9d"

  .align 8
.LABEL__string_116:
  .quad .LABEL__string_116__data
  .quad 4
  .quad 3
.LABEL__string_116__data: .string "r9w"

  .align 8
.LABEL__string_117:
  .quad .LABEL__string_117__data
  .quad 4
  .quad 3
.LABEL__string_117__data: .string "r9b"

  .align 8
.LABEL__string_118:
  .quad .LABEL__string_118__data
  .quad 4
  .quad 3
.LABEL__string_118__data: .string "r10"

  .align 8
.LABEL__string_119:
  .quad .LABEL__string_119__data
  .quad 5
  .quad 4
.LABEL__string_119__data: .string "r10d"

  .align 8
.LABEL__string_120:
  .quad .LABEL__string_120__data
  .quad 5
  .quad 4
.LABEL__string_120__data: .string "r10w"

  .align 8
.LABEL__string_121:
  .quad .LABEL__string_121__data
  .quad 5
  .quad 4
.LABEL__string_121__data: .string "r10b"

  .align 8
.LABEL__string_122:
  .quad .LABEL__string_122__data
  .quad 4
  .quad 3
.LABEL__string_122__data: .string "r11"

  .align 8
.LABEL__string_123:
  .quad .LABEL__string_123__data
  .quad 5
  .quad 4
.LABEL__string_123__data: .string "r11d"

  .align 8
.LABEL__string_124:
  .quad .LABEL__string_124__data
  .quad 5
  .quad 4
.LABEL__string_124__data: .string "r11w"

  .align 8
.LABEL__string_125:
  .quad .LABEL__string_125__data
  .quad 5
  .quad 4
.LABEL__string_125__data: .string "r11b"

  .align 8
.LABEL__string_126:
  .quad .LABEL__string_126__data
  .quad 4
  .quad 3
.LABEL__string_126__data: .string "r12"

  .align 8
.LABEL__string_127:
  .quad .LABEL__string_127__data
  .quad 5
  .quad 4
.LABEL__string_127__data: .string "r12d"

  .align 8
.LABEL__string_128:
  .quad .LABEL__string_128__data
  .quad 5
  .quad 4
.LABEL__string_128__data: .string "r12w"

  .align 8
.LABEL__string_129:
  .quad .LABEL__string_129__data
  .quad 5
  .quad 4
.LABEL__string_129__data: .string "r12b"

  .align 8
.LABEL__string_130:
  .quad .LABEL__string_130__data
  .quad 4
  .quad 3
.LABEL__string_130__data: .string "r13"

  .align 8
.LABEL__string_131:
  .quad .LABEL__string_131__data
  .quad 5
  .quad 4
.LABEL__string_131__data: .string "r13d"

  .align 8
.LABEL__string_132:
  .quad .LABEL__string_132__data
  .quad 5
  .quad 4
.LABEL__string_132__data: .string "r13w"

  .align 8
.LABEL__string_133:
  .quad .LABEL__string_133__data
  .quad 5
  .quad 4
.LABEL__string_133__data: .string "r13b"

  .align 8
.LABEL__string_134:
  .quad .LABEL__string_134__data
  .quad 4
  .quad 3
.LABEL__string_134__data: .string "r14"

  .align 8
.LABEL__string_135:
  .quad .LABEL__string_135__data
  .quad 5
  .quad 4
.LABEL__string_135__data: .string "r14d"

  .align 8
.LABEL__string_136:
  .quad .LABEL__string_136__data
  .quad 5
  .quad 4
.LABEL__string_136__data: .string "r14w"

  .align 8
.LABEL__string_137:
  .quad .LABEL__string_137__data
  .quad 5
  .quad 4
.LABEL__string_137__data: .string "r14b"

  .align 8
.LABEL__string_138:
  .quad .LABEL__string_138__data
  .quad 4
  .quad 3
.LABEL__string_138__data: .string "r15"

  .align 8
.LABEL__string_139:
  .quad .LABEL__string_139__data
  .quad 5
  .quad 4
.LABEL__string_139__data: .string "r15d"

  .align 8
.LABEL__string_140:
  .quad .LABEL__string_140__data
  .quad 5
  .quad 4
.LABEL__string_140__data: .string "r15w"

  .align 8
.LABEL__string_141:
  .quad .LABEL__string_141__data
  .quad 5
  .quad 4
.LABEL__string_141__data: .string "r15b"

  .align 8
.LABEL__string_142:
  .quad .LABEL__string_142__data
  .quad 24
  .quad 23
.LABEL__string_142__data: .string "All registered are used"

  .align 8
.LABEL__string_143:
  .quad .LABEL__string_143__data
  .quad 10
  .quad 9
.LABEL__string_143__data: .string "Register "

  .align 8
.LABEL__string_144:
  .quad .LABEL__string_144__data
  .quad 30
  .quad 29
.LABEL__string_144__data: .string " already mapped to variable: "

  .align 8
.LABEL__string_145:
  .quad .LABEL__string_145__data
  .quad 29
  .quad 28
.LABEL__string_145__data: .string "TODO: spill global variable "

  .align 8
.LABEL__string_146:
  .quad .LABEL__string_146__data
  .quad 24
  .quad 23
.LABEL__string_146__data: .string "  # [discarded value]: "

  .align 8
.LABEL__string_147:
  .quad .LABEL__string_147__data
  .quad 20
  .quad 19
.LABEL__string_147__data: .string "  # [live values]: "

  .align 8
.LABEL__string_148:
  .quad .LABEL__string_148__data
  .quad 23
  .quad 22
.LABEL__string_148__data: .string "  # [used registers]: "

  .align 8
.LABEL__string_149:
  .quad .LABEL__string_149__data
  .quad 6
  .quad 5
.LABEL__string_149__data: .string "[rbp-"

  .align 8
.LABEL__string_150:
  .quad .LABEL__string_150__data
  .quad 19
  .quad 18
.LABEL__string_150__data: .string "Unsupported type: "

  .align 8
.LABEL__string_151:
  .quad .LABEL__string_151__data
  .quad 19
  .quad 18
.LABEL__string_151__data: .string "  .section .rodata"

  .align 8
.LABEL__string_152:
  .quad .LABEL__string_152__data
  .quad 11
  .quad 10
.LABEL__string_152__data: .string "  .align 8"

  .align 8
.LABEL__string_153:
  .quad .LABEL__string_153__data
  .quad 9
  .quad 8
.LABEL__string_153__data: .string "  .quad "

  .align 8
.LABEL__string_154:
  .quad .LABEL__string_154__data
  .quad 7
  .quad 6
.LABEL__string_154__data: .string "__data"

  .align 8
.LABEL__string_155:
  .quad .LABEL__string_155__data
  .quad 17
  .quad 16
.LABEL__string_155__data: .string "__data: .string "

  .align 8
.LABEL__string_156:
  .quad .LABEL__string_156__data
  .quad 16
  .quad 15
.LABEL__string_156__data: .string ".LABEL__string_"

  .align 8
.LABEL__string_157:
  .quad .LABEL__string_157__data
  .quad 17
  .quad 16
.LABEL__string_157__data: .string "  .quad .LABEL__"

  .align 8
.LABEL__string_158:
  .quad .LABEL__string_158__data
  .quad 18
  .quad 17
.LABEL__string_158__data: .string "__type_name__data"

  .align 8
.LABEL__string_159:
  .quad .LABEL__string_159__data
  .quad 29
  .quad 28
.LABEL__string_159__data: .string "__type_name__data: .string \""

  .align 8
.LABEL__string_160:
  .quad .LABEL__string_160__data
  .quad 10
  .quad 9
.LABEL__string_160__data: .string "  .quad 0"

  .align 8
.LABEL__string_161:
  .quad .LABEL__string_161__data
  .quad 4
  .quad 3
.LABEL__string_161__data: .string "Any"

  .align 8
.LABEL__string_162:
  .quad .LABEL__string_162__data
  .quad 8
  .quad 7
.LABEL__string_162__data: .string "Boolean"

  .align 8
.LABEL__string_163:
  .quad .LABEL__string_163__data
  .quad 4
  .quad 3
.LABEL__string_163__data: .string "Int"

  .align 8
.LABEL__string_164:
  .quad .LABEL__string_164__data
  .quad 5
  .quad 4
.LABEL__string_164__data: .string "Int8"

  .align 8
.LABEL__string_165:
  .quad .LABEL__string_165__data
  .quad 6
  .quad 5
.LABEL__string_165__data: .string "Int16"

  .align 8
.LABEL__string_166:
  .quad .LABEL__string_166__data
  .quad 6
  .quad 5
.LABEL__string_166__data: .string "Int32"

  .align 8
.LABEL__string_167:
  .quad .LABEL__string_167__data
  .quad 6
  .quad 5
.LABEL__string_167__data: .string "Int64"

  .align 8
.LABEL__string_168:
  .quad .LABEL__string_168__data
  .quad 8
  .quad 7
.LABEL__string_168__data: .string "Nothing"

  .align 8
.LABEL__string_169:
  .quad .LABEL__string_169__data
  .quad 5
  .quad 4
.LABEL__string_169__data: .string "Null"

  .align 8
.LABEL__string_170:
  .quad .LABEL__string_170__data
  .quad 10
  .quad 9
.LABEL__string_170__data: .string "Undefined"

  .align 8
.LABEL__string_171:
  .quad .LABEL__string_171__data
  .quad 21
  .quad 20
.LABEL__string_171__data: .string "Undefined function: "

  .align 8
.LABEL__string_172:
  .quad .LABEL__string_172__data
  .quad 6
  .quad 5
.LABEL__string_172__data: .string " :: ("

  .align 8
.LABEL__string_173:
  .quad .LABEL__string_173__data
  .quad 2
  .quad 1
.LABEL__string_173__data: .string ")"

  .align 8
.LABEL__string_174:
  .quad .LABEL__string_174__data
  .quad 2
  .quad 1
.LABEL__string_174__data: .string "$"

  .align 8
.LABEL__string_175:
  .quad .LABEL__string_175__data
  .quad 29
  .quad 28
.LABEL__string_175__data: .string "Duplicate type declaration: "

  .align 8
.LABEL__string_176:
  .quad .LABEL__string_176__data
  .quad 19
  .quad 18
.LABEL__string_176__data: .string "Not a struct type."

  .align 8
.LABEL__string_177:
  .quad .LABEL__string_177__data
  .quad 15
  .quad 14
.LABEL__string_177__data: .string "Unknown type: "

  .align 8
.LABEL__string_178:
  .quad .LABEL__string_178__data
  .quad 52
  .quad 51
.LABEL__string_178__data: .string "Initialized global variables are not supported yet."

  .align 8
.LABEL__string_179:
  .quad .LABEL__string_179__data
  .quad 37
  .quad 36
.LABEL__string_179__data: .string "Type inference is not supported yet."

  .align 8
.LABEL__string_180:
  .quad .LABEL__string_180__data
  .quad 25
  .quad 24
.LABEL__string_180__data: .string "Missing return statement"

  .align 8
.LABEL__string_181:
  .quad .LABEL__string_181__data
  .quad 42
  .quad 41
.LABEL__string_181__data: .string "Found non-empty unreachable block: block."

  .align 8
.LABEL__string_182:
  .quad .LABEL__string_182__data
  .quad 25
  .quad 24
.LABEL__string_182__data: .string " requires a basic block."

  .align 8
.LABEL__string_183:
  .quad .LABEL__string_183__data
  .quad 21
  .quad 20
.LABEL__string_183__data: .string "Not an array pointer"

  .align 8
.LABEL__string_184:
  .quad .LABEL__string_184__data
  .quad 8
  .quad 7
.LABEL__string_184__data: .string "Not a '"

  .align 8
.LABEL__string_185:
  .quad .LABEL__string_185__data
  .quad 8
  .quad 7
.LABEL__string_185__data: .string "' value"

  .align 8
.LABEL__string_186:
  .quad .LABEL__string_186__data
  .quad 18
  .quad 17
.LABEL__string_186__data: .string " doesn't have a '"

  .align 8
.LABEL__string_187:
  .quad .LABEL__string_187__data
  .quad 9
  .quad 8
.LABEL__string_187__data: .string "' member"

  .align 8
.LABEL__string_188:
  .quad .LABEL__string_188__data
  .quad 22
  .quad 21
.LABEL__string_188__data: .string "Undeclared variable: "

  .align 8
.LABEL__string_189:
  .quad .LABEL__string_189__data
  .quad 25
  .quad 24
.LABEL__string_189__data: .string "Break outside of a loop?"

  .align 8
.LABEL__string_190:
  .quad .LABEL__string_190__data
  .quad 18
  .quad 17
.LABEL__string_190__data: .string "Cannot assign a '"

  .align 8
.LABEL__string_191:
  .quad .LABEL__string_191__data
  .quad 15
  .quad 14
.LABEL__string_191__data: .string "' value to a '"

  .align 8
.LABEL__string_192:
  .quad .LABEL__string_192__data
  .quad 11
  .quad 10
.LABEL__string_192__data: .string "' variable"

  .align 8
.LABEL__string_193:
  .quad .LABEL__string_193__data
  .quad 29
  .quad 28
.LABEL__string_193__data: .string ": Redundant type declaration"

  .align 8
.LABEL__string_194:
  .quad .LABEL__string_194__data
  .quad 24
  .quad 23
.LABEL__string_194__data: .string "Invalid variable type: "

  .align 8
.LABEL__string_195:
  .quad .LABEL__string_195__data
  .quad 34
  .quad 33
.LABEL__string_195__data: .string "Cannot infer type from null value"

  .align 8
.LABEL__string_196:
  .quad .LABEL__string_196__data
  .quad 9
  .quad 8
.LABEL__string_196__data: .string "Not an \""

  .align 8
.LABEL__string_197:
  .quad .LABEL__string_197__data
  .quad 13
  .quad 12
.LABEL__string_197__data: .string "\" expression"

  .align 8
.LABEL__string_198:
  .quad .LABEL__string_198__data
  .quad 35
  .quad 34
.LABEL__string_198__data: .string "TODO: Evaluate constant expression"

  .align 8
.LABEL__string_199:
  .quad .LABEL__string_199__data
  .quad 31
  .quad 30
.LABEL__string_199__data: .string "Not an IR_Pointer_Type value: "

  .align 8
.LABEL__string_200:
  .quad .LABEL__string_200__data
  .quad 16
  .quad 15
.LABEL__string_200__data: .string "Values of type "

  .align 8
.LABEL__string_201:
  .quad .LABEL__string_201__data
  .quad 18
  .quad 17
.LABEL__string_201__data: .string " are not callable"

  .align 8
.LABEL__string_202:
  .quad .LABEL__string_202__data
  .quad 38
  .quad 37
.LABEL__string_202__data: .string "Found at least two matching functions"

  .align 8
.LABEL__string_203:
  .quad .LABEL__string_203__data
  .quad 3
  .quad 2
.LABEL__string_203__data: .string ": "

  .align 8
.LABEL__string_204:
  .quad .LABEL__string_204__data
  .quad 5
  .quad 4
.LABEL__string_204__data: .string " :: "

  .align 8
.LABEL__string_205:
  .quad .LABEL__string_205__data
  .quad 29
  .quad 28
.LABEL__string_205__data: .string "Found no matching function: "

  .align 8
.LABEL__string_206:
  .quad .LABEL__string_206__data
  .quad 9
  .quad 8
.LABEL__string_206__data: .string ") -> Any"

  .align 8
.LABEL__string_207:
  .quad .LABEL__string_207__data
  .quad 22
  .quad 21
.LABEL__string_207__data: .string "Unsupported arguments"

  .align 8
.LABEL__string_208:
  .quad .LABEL__string_208__data
  .quad 54
  .quad 53
.LABEL__string_208__data: .string "Positional arguments cannot be added after named ones"

  .align 8
.LABEL__string_209:
  .quad .LABEL__string_209__data
  .quad 31
  .quad 30
.LABEL__string_209__data: .string "Operands are not the same type"

  .align 8
.LABEL__string_210:
  .quad .LABEL__string_210__data
  .quad 7
  .quad 6
.LABEL__string_210__data: .string "String"

  .align 8
.LABEL__string_211:
  .quad .LABEL__string_211__data
  .quad 37
  .quad 36
.LABEL__string_211__data: .string "Not a IR_Struct_Type pointer value: "

  .align 8
.LABEL__string_212:
  .quad .LABEL__string_212__data
  .quad 22
  .quad 21
.LABEL__string_212__data: .string " has no such member: "

  .align 8
.LABEL__string_213:
  .quad .LABEL__string_213__data
  .quad 1
  .quad 0
.LABEL__string_213__data: .string ""

  .align 8
.LABEL__string_214:
  .quad .LABEL__string_214__data
  .quad 34
  .quad 33
.LABEL__string_214__data: .string "Struct init argument without name"

  .align 8
.LABEL__string_215:
  .quad .LABEL__string_215__data
  .quad 20
  .quad 19
.LABEL__string_215__data: .string " is not initialized"

  .align 8
.LABEL__string_216:
  .quad .LABEL__string_216__data
  .quad 28
  .quad 27
.LABEL__string_216__data: .string "Undeclared variable value: "

  .align 8
.LABEL__string_217:
  .quad .LABEL__string_217__data
  .quad 32
  .quad 31
.LABEL__string_217__data: .string "Variable type without address: "

  .align 8
.LABEL__string_218:
  .quad .LABEL__string_218__data
  .quad 19
  .quad 18
.LABEL__string_218__data: .string "Unknown function: "

  .align 8
.LABEL__string_219:
  .quad .LABEL__string_219__data
  .quad 19
  .quad 18
.LABEL__string_219__data: .string "Unknown variable: "

  .align 8
.LABEL__string_220:
  .quad .LABEL__string_220__data
  .quad 20
  .quad 19
.LABEL__string_220__data: .string ": Unexpected type: "

  .align 8
.LABEL__string_221:
  .quad .LABEL__string_221__data
  .quad 2
  .quad 1
.LABEL__string_221__data: .string "@"

  .align 8
.LABEL__string_222:
  .quad .LABEL__string_222__data
  .quad 2
  .quad 1
.LABEL__string_222__data: .string "["

  .align 8
.LABEL__string_223:
  .quad .LABEL__string_223__data
  .quad 2
  .quad 1
.LABEL__string_223__data: .string "]"

  .align 8
.LABEL__string_224:
  .quad .LABEL__string_224__data
  .quad 2
  .quad 1
.LABEL__string_224__data: .string "("

  .align 8
.LABEL__string_225:
  .quad .LABEL__string_225__data
  .quad 6
  .quad 5
.LABEL__string_225__data: .string ") -> "

  .align 8
.LABEL__string_226:
  .quad .LABEL__string_226__data
  .quad 7
  .quad 6
.LABEL__string_226__data: .string "Object"

  .align 8
.LABEL__string_227:
  .quad .LABEL__string_227__data
  .quad 55
  .quad 54
.LABEL__string_227__data: .string "Tried to remove instruction belonging to another block"

  .align 8
.LABEL__string_228:
  .quad .LABEL__string_228__data
  .quad 6
  .quad 5
.LABEL__string_228__data: .string "abort"

  .align 8
.LABEL__string_229:
  .quad .LABEL__string_229__data
  .quad 5
  .quad 4
.LABEL__string_229__data: .string "exit"

  .align 8
.LABEL__string_230:
  .quad .LABEL__string_230__data
  .quad 3
  .quad 2
.LABEL__string_230__data: .string " {"

  .align 8
.LABEL__string_231:
  .quad .LABEL__string_231__data
  .quad 7
  .quad 6
.LABEL__string_231__data: .string "block."

  .align 8
.LABEL__string_232:
  .quad .LABEL__string_232__data
  .quad 4
  .quad 3
.LABEL__string_232__data: .string "   "

  .align 8
.LABEL__string_233:
  .quad .LABEL__string_233__data
  .quad 4
  .quad 3
.LABEL__string_233__data: .string " = "

  .align 8
.LABEL__string_234:
  .quad .LABEL__string_234__data
  .quad 4
  .quad 3
.LABEL__string_234__data: .string " + "

  .align 8
.LABEL__string_235:
  .quad .LABEL__string_235__data
  .quad 5
  .quad 4
.LABEL__string_235__data: .string "call"

  .align 8
.LABEL__string_236:
  .quad .LABEL__string_236__data
  .quad 5
  .quad 4
.LABEL__string_236__data: .string "cast"

  .align 8
.LABEL__string_237:
  .quad .LABEL__string_237__data
  .quad 5
  .quad 4
.LABEL__string_237__data: .string "jump"

  .align 8
.LABEL__string_238:
  .quad .LABEL__string_238__data
  .quad 9
  .quad 8
.LABEL__string_238__data: .string ", block."

  .align 8
.LABEL__string_239:
  .quad .LABEL__string_239__data
  .quad 4
  .quad 3
.LABEL__string_239__data: .string " / "

  .align 8
.LABEL__string_240:
  .quad .LABEL__string_240__data
  .quad 5
  .quad 4
.LABEL__string_240__data: .string " == "

  .align 8
.LABEL__string_241:
  .quad .LABEL__string_241__data
  .quad 4
  .quad 3
.LABEL__string_241__data: .string " > "

  .align 8
.LABEL__string_242:
  .quad .LABEL__string_242__data
  .quad 5
  .quad 4
.LABEL__string_242__data: .string " >= "

  .align 8
.LABEL__string_243:
  .quad .LABEL__string_243__data
  .quad 4
  .quad 3
.LABEL__string_243__data: .string " < "

  .align 8
.LABEL__string_244:
  .quad .LABEL__string_244__data
  .quad 5
  .quad 4
.LABEL__string_244__data: .string " <= "

  .align 8
.LABEL__string_245:
  .quad .LABEL__string_245__data
  .quad 16
  .quad 15
.LABEL__string_245__data: .string "load_array_item"

  .align 8
.LABEL__string_246:
  .quad .LABEL__string_246__data
  .quad 22
  .quad 21
.LABEL__string_246__data: .string "load_function_address"

  .align 8
.LABEL__string_247:
  .quad .LABEL__string_247__data
  .quad 19
  .quad 18
.LABEL__string_247__data: .string "load_struct_member"

  .align 8
.LABEL__string_248:
  .quad .LABEL__string_248__data
  .quad 14
  .quad 13
.LABEL__string_248__data: .string "load_variable"

  .align 8
.LABEL__string_249:
  .quad .LABEL__string_249__data
  .quad 5
  .quad 4
.LABEL__string_249__data: .string " // "

  .align 8
.LABEL__string_250:
  .quad .LABEL__string_250__data
  .quad 4
  .quad 3
.LABEL__string_250__data: .string " * "

  .align 8
.LABEL__string_251:
  .quad .LABEL__string_251__data
  .quad 4
  .quad 3
.LABEL__string_251__data: .string "new"

  .align 8
.LABEL__string_252:
  .quad .LABEL__string_252__data
  .quad 5
  .quad 4
.LABEL__string_252__data: .string " != "

  .align 8
.LABEL__string_253:
  .quad .LABEL__string_253__data
  .quad 4
  .quad 3
.LABEL__string_253__data: .string "phi"

  .align 8
.LABEL__string_254:
  .quad .LABEL__string_254__data
  .quad 7
  .quad 6
.LABEL__string_254__data: .string "return"

  .align 8
.LABEL__string_255:
  .quad .LABEL__string_255__data
  .quad 17
  .quad 16
.LABEL__string_255__data: .string "store_array_item"

  .align 8
.LABEL__string_256:
  .quad .LABEL__string_256__data
  .quad 20
  .quad 19
.LABEL__string_256__data: .string "store_struct_member"

  .align 8
.LABEL__string_257:
  .quad .LABEL__string_257__data
  .quad 4
  .quad 3
.LABEL__string_257__data: .string " - "

  .align 8
.LABEL__string_258:
  .quad .LABEL__string_258__data
  .quad 2
  .quad 1
.LABEL__string_258__data: .string "."

  .align 8
.LABEL__string_259:
  .quad .LABEL__string_259__data
  .quad 10
  .quad 9
.LABEL__string_259__data: .string "undefined"

  .align 8
.LABEL__string_260:
  .quad .LABEL__string_260__data
  .quad 2
  .quad 1
.LABEL__string_260__data: .string "&"

  .align 8
.LABEL__string_261:
  .quad .LABEL__string_261__data
  .quad 3
  .quad 2
.LABEL__string_261__data: .string "as"

  .align 8
.LABEL__string_262:
  .quad .LABEL__string_262__data
  .quad 2
  .quad 1
.LABEL__string_262__data: .string "*"

  .align 8
.LABEL__string_263:
  .quad .LABEL__string_263__data
  .quad 6
  .quad 5
.LABEL__string_263__data: .string "break"

  .align 8
.LABEL__string_264:
  .quad .LABEL__string_264__data
  .quad 2
  .quad 1
.LABEL__string_264__data: .string "}"

  .align 8
.LABEL__string_265:
  .quad .LABEL__string_265__data
  .quad 2
  .quad 1
.LABEL__string_265__data: .string ";"

  .align 8
.LABEL__string_266:
  .quad .LABEL__string_266__data
  .quad 2
  .quad 1
.LABEL__string_266__data: .string ","

  .align 8
.LABEL__string_267:
  .quad .LABEL__string_267__data
  .quad 5
  .quad 4
.LABEL__string_267__data: .string "else"

  .align 8
.LABEL__string_268:
  .quad .LABEL__string_268__data
  .quad 2
  .quad 1
.LABEL__string_268__data: .string "="

  .align 8
.LABEL__string_269:
  .quad .LABEL__string_269__data
  .quad 2
  .quad 1
.LABEL__string_269__data: .string "!"

  .align 8
.LABEL__string_270:
  .quad .LABEL__string_270__data
  .quad 9
  .quad 8
.LABEL__string_270__data: .string "external"

  .align 8
.LABEL__string_271:
  .quad .LABEL__string_271__data
  .quad 2
  .quad 1
.LABEL__string_271__data: .string ">"

  .align 8
.LABEL__string_272:
  .quad .LABEL__string_272__data
  .quad 2
  .quad 1
.LABEL__string_272__data: .string "-"

  .align 8
.LABEL__string_273:
  .quad .LABEL__string_273__data
  .quad 3
  .quad 2
.LABEL__string_273__data: .string "if"

  .align 8
.LABEL__string_274:
  .quad .LABEL__string_274__data
  .quad 8
  .quad 7
.LABEL__string_274__data: .string "include"

  .align 8
.LABEL__string_275:
  .quad .LABEL__string_275__data
  .quad 2
  .quad 1
.LABEL__string_275__data: .string "<"

  .align 8
.LABEL__string_276:
  .quad .LABEL__string_276__data
  .quad 5
  .quad 4
.LABEL__string_276__data: .string "loop"

  .align 8
.LABEL__string_277:
  .quad .LABEL__string_277__data
  .quad 2
  .quad 1
.LABEL__string_277__data: .string "{"

  .align 8
.LABEL__string_278:
  .quad .LABEL__string_278__data
  .quad 2
  .quad 1
.LABEL__string_278__data: .string "+"

  .align 8
.LABEL__string_279:
  .quad .LABEL__string_279__data
  .quad 2
  .quad 1
.LABEL__string_279__data: .string "/"

  .align 8
.LABEL__string_280:
  .quad .LABEL__string_280__data
  .quad 7
  .quad 6
.LABEL__string_280__data: .string "struct"

  .align 8
.LABEL__string_281:
  .quad .LABEL__string_281__data
  .quad 2
  .quad 1
.LABEL__string_281__data: .string "|"

  .align 8
.LABEL__string_282:
  .quad .LABEL__string_282__data
  .quad 6
  .quad 5
.LABEL__string_282__data: .string "while"

  .align 8
.LABEL__string_283:
  .quad .LABEL__string_283__data
  .quad 22
  .quad 21
.LABEL__string_283__data: .string "Failed to open file: "

  .align 8
.LABEL__string_284:
  .quad .LABEL__string_284__data
  .quad 24
  .quad 23
.LABEL__string_284__data: .string "Unsupported file path: "

  .align 8
.LABEL__string_285:
  .quad .LABEL__string_285__data
  .quad 3
  .quad 2
.LABEL__string_285__data: .string "./"

  .align 8
.LABEL__string_286:
  .quad .LABEL__string_286__data
  .quad 4
  .quad 3
.LABEL__string_286__data: .string "../"

  .align 8
.LABEL__string_287:
  .quad .LABEL__string_287__data
  .quad 5
  .quad 4
.LABEL__string_287__data: .string "/../"

  .align 8
.LABEL__string_288:
  .quad .LABEL__string_288__data
  .quad 39
  .quad 38
.LABEL__string_288__data: .string "Cannot use expression as variable name"

  .align 8
.LABEL__string_289:
  .quad .LABEL__string_289__data
  .quad 37
  .quad 36
.LABEL__string_289__data: .string "Cannot use expression as struct name"

  .align 8
.LABEL__string_290:
  .quad .LABEL__string_290__data
  .quad 39
  .quad 38
.LABEL__string_290__data: .string "Cannot use expression as function name"

  .align 8
.LABEL__string_291:
  .quad .LABEL__string_291__data
  .quad 12
  .quad 11
.LABEL__string_291__data: .string ": Consumed "

  .align 8
.LABEL__string_292:
  .quad .LABEL__string_292__data
  .quad 15
  .quad 14
.LABEL__string_292__data: .string " spaces where "

  .align 8
.LABEL__string_293:
  .quad .LABEL__string_293__data
  .quad 14
  .quad 13
.LABEL__string_293__data: .string " are expected"

  .align 8
.LABEL__string_294:
  .quad .LABEL__string_294__data
  .quad 26
  .quad 25
.LABEL__string_294__data: .string "Unsupported token matcher"

  .align 8
.LABEL__string_295:
  .quad .LABEL__string_295__data
  .quad 14
  .quad 13
.LABEL__string_295__data: .string ": Unexpected "

  .align 8
.LABEL__string_296:
  .quad .LABEL__string_296__data
  .quad 2
  .quad 1
.LABEL__string_296__data: .string " "

  .align 8
.LABEL__string_297:
  .quad .LABEL__string_297__data
  .quad 5
  .quad 4
.LABEL__string_297__data: .string "if ("

  .align 8
.LABEL__string_298:
  .quad .LABEL__string_298__data
  .quad 3
  .quad 2
.LABEL__string_298__data: .string ") "

  .align 8
.LABEL__string_299:
  .quad .LABEL__string_299__data
  .quad 7
  .quad 6
.LABEL__string_299__data: .string " else "

  .align 8
.LABEL__string_300:
  .quad .LABEL__string_300__data
  .quad 6
  .quad 5
.LABEL__string_300__data: .string "loop "

  .align 8
.LABEL__string_301:
  .quad .LABEL__string_301__data
  .quad 11
  .quad 10
.LABEL__string_301__data: .string " :: struct"

  .align 8
.LABEL__string_302:
  .quad .LABEL__string_302__data
  .quad 4
  .quad 3
.LABEL__string_302__data: .string " : "

  .align 8
.LABEL__string_303:
  .quad .LABEL__string_303__data
  .quad 12
  .quad 11
.LABEL__string_303__data: .string " = external"

  .align 8
.LABEL__string_304:
  .quad .LABEL__string_304__data
  .quad 5
  .quad 4
.LABEL__string_304__data: .string " := "

  .align 8
.LABEL__string_305:
  .quad .LABEL__string_305__data
  .quad 8
  .quad 7
.LABEL__string_305__data: .string "while ("

  .align 8
.LABEL__string_306:
  .quad .LABEL__string_306__data
  .quad 33
  .quad 32
.LABEL__string_306__data: .string "Unsupported AST_Statement type: "

  .align 8
.LABEL__string_307:
  .quad .LABEL__string_307__data
  .quad 3
  .quad 2
.LABEL__string_307__data: .string "; "

  .align 8
.LABEL__string_308:
  .quad .LABEL__string_308__data
  .quad 28
  .quad 27
.LABEL__string_308__data: .string "Unsupported AST_Type type: "

  .align 8
.LABEL__string_309:
  .quad .LABEL__string_309__data
  .quad 5
  .quad 4
.LABEL__string_309__data: .string " && "

  .align 8
.LABEL__string_310:
  .quad .LABEL__string_310__data
  .quad 5
  .quad 4
.LABEL__string_310__data: .string " || "

  .align 8
.LABEL__string_311:
  .quad .LABEL__string_311__data
  .quad 5
  .quad 4
.LABEL__string_311__data: .string " as "

  .align 8
.LABEL__string_312:
  .quad .LABEL__string_312__data
  .quad 5
  .quad 4
.LABEL__string_312__data: .string "new "

  .align 8
.LABEL__string_313:
  .quad .LABEL__string_313__data
  .quad 34
  .quad 33
.LABEL__string_313__data: .string "Unsupported AST_Expression type: "

  .align 8
.LABEL__string_314:
  .quad .LABEL__string_314__data
  .quad 6
  .quad 5
.LABEL__string_314__data: .string "false"

  .align 8
.LABEL__string_315:
  .quad .LABEL__string_315__data
  .quad 5
  .quad 4
.LABEL__string_315__data: .string "null"

  .align 8
.LABEL__string_316:
  .quad .LABEL__string_316__data
  .quad 5
  .quad 4
.LABEL__string_316__data: .string "true"

  .align 8
.LABEL__string_317:
  .quad .LABEL__string_317__data
  .quad 7
  .quad 6
.LABEL__string_317__data: .string "[2;37m"

  .align 8
.LABEL__string_318:
  .quad .LABEL__string_318__data
  .quad 4
  .quad 3
.LABEL__string_318__data: .string "[0m"

  .align 8
.LABEL__string_319:
  .quad .LABEL__string_319__data
  .quad 7
  .quad 6
.LABEL__string_319__data: .string "[1;33m"

  .align 8
.LABEL__string_320:
  .quad .LABEL__string_320__data
  .quad 7
  .quad 6
.LABEL__string_320__data: .string "[2;33m"

  .align 8
.LABEL__string_321:
  .quad .LABEL__string_321__data
  .quad 2
  .quad 1
.LABEL__string_321__data: .string "r"

  .align 8
.LABEL__string_322:
  .quad .LABEL__string_322__data
  .quad 21
  .quad 20
.LABEL__string_322__data: .string "Failed to write text"

  .align 8
.LABEL__string_323:
  .quad .LABEL__string_323__data
  .quad 28
  .quad 27
.LABEL__string_323__data: .string "Failed to write character: "

  .section .rodata

  .align 8
MC_Register:
  .quad 0
  .quad .LABEL__MC_Register__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__MC_Register__type_name__data: .string "MC_Register"

  .align 8
Object:
  .quad 0
  .quad .LABEL__Object__type_name__data
  .quad 7
  .quad 6
  .quad 0
.LABEL__Object__type_name__data: .string "Object"

  .align 8
IR_Instruction:
  .quad 0
  .quad .LABEL__IR_Instruction__type_name__data
  .quad 15
  .quad 14
  .quad Object
.LABEL__IR_Instruction__type_name__data: .string "IR_Instruction"

  .align 8
IR_Variable_Value:
  .quad 0
  .quad .LABEL__IR_Variable_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Variable_Value__type_name__data: .string "IR_Variable_Value"

  .align 8
IR_Value:
  .quad 0
  .quad .LABEL__IR_Value__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__IR_Value__type_name__data: .string "IR_Value"

  .align 8
IR_Type:
  .quad 0
  .quad .LABEL__IR_Type__type_name__data
  .quad 8
  .quad 7
  .quad Object
.LABEL__IR_Type__type_name__data: .string "IR_Type"

  .align 8
IR_Variable:
  .quad 0
  .quad .LABEL__IR_Variable__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__IR_Variable__type_name__data: .string "IR_Variable"

  .align 8
IR_Block:
  .quad 0
  .quad .LABEL__IR_Block__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__IR_Block__type_name__data: .string "IR_Block"

  .align 8
IR_Function:
  .quad 0
  .quad .LABEL__IR_Function__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__IR_Function__type_name__data: .string "IR_Function"

  .align 8
IR_Function_Type:
  .quad 0
  .quad .LABEL__IR_Function_Type__type_name__data
  .quad 17
  .quad 16
  .quad IR_Type
.LABEL__IR_Function_Type__type_name__data: .string "IR_Function_Type"

  .align 8
MC_Address:
  .quad 0
  .quad .LABEL__MC_Address__type_name__data
  .quad 11
  .quad 10
  .quad Object
.LABEL__MC_Address__type_name__data: .string "MC_Address"

  .align 8
MC_Register_RAX:
  .quad 0
  .quad .LABEL__MC_Register_RAX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RAX__type_name__data: .string "MC_Register_RAX"

  .align 8
MC_Register_RCX:
  .quad 0
  .quad .LABEL__MC_Register_RCX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RCX__type_name__data: .string "MC_Register_RCX"

  .align 8
MC_Register_RDX:
  .quad 0
  .quad .LABEL__MC_Register_RDX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RDX__type_name__data: .string "MC_Register_RDX"

  .align 8
MC_Register_RBX:
  .quad 0
  .quad .LABEL__MC_Register_RBX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RBX__type_name__data: .string "MC_Register_RBX"

  .align 8
MC_Register_RSI:
  .quad 0
  .quad .LABEL__MC_Register_RSI__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RSI__type_name__data: .string "MC_Register_RSI"

  .align 8
MC_Register_RDI:
  .quad 0
  .quad .LABEL__MC_Register_RDI__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RDI__type_name__data: .string "MC_Register_RDI"

  .align 8
MC_Register_R8:
  .quad 0
  .quad .LABEL__MC_Register_R8__type_name__data
  .quad 15
  .quad 14
  .quad MC_Register
.LABEL__MC_Register_R8__type_name__data: .string "MC_Register_R8"

  .align 8
MC_Register_R9:
  .quad 0
  .quad .LABEL__MC_Register_R9__type_name__data
  .quad 15
  .quad 14
  .quad MC_Register
.LABEL__MC_Register_R9__type_name__data: .string "MC_Register_R9"

  .align 8
MC_Register_R10:
  .quad 0
  .quad .LABEL__MC_Register_R10__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R10__type_name__data: .string "MC_Register_R10"

  .align 8
MC_Register_R11:
  .quad 0
  .quad .LABEL__MC_Register_R11__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R11__type_name__data: .string "MC_Register_R11"

  .align 8
MC_Register_R12:
  .quad 0
  .quad .LABEL__MC_Register_R12__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R12__type_name__data: .string "MC_Register_R12"

  .align 8
MC_Register_R13:
  .quad 0
  .quad .LABEL__MC_Register_R13__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R13__type_name__data: .string "MC_Register_R13"

  .align 8
MC_Register_R14:
  .quad 0
  .quad .LABEL__MC_Register_R14__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R14__type_name__data: .string "MC_Register_R14"

  .align 8
MC_Register_R15:
  .quad 0
  .quad .LABEL__MC_Register_R15__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R15__type_name__data: .string "MC_Register_R15"

  .align 8
MC_Global_Variable_Address:
  .quad 0
  .quad .LABEL__MC_Global_Variable_Address__type_name__data
  .quad 27
  .quad 26
  .quad MC_Address
.LABEL__MC_Global_Variable_Address__type_name__data: .string "MC_Global_Variable_Address"

  .align 8
MC_Local_Variable_Address:
  .quad 0
  .quad .LABEL__MC_Local_Variable_Address__type_name__data
  .quad 26
  .quad 25
  .quad MC_Address
.LABEL__MC_Local_Variable_Address__type_name__data: .string "MC_Local_Variable_Address"

  .align 8
String_Token:
  .quad 0
  .quad .LABEL__String_Token__type_name__data
  .quad 13
  .quad 12
  .quad Literal_Token
.LABEL__String_Token__type_name__data: .string "String_Token"

  .align 8
Literal_Token:
  .quad 0
  .quad .LABEL__Literal_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Literal_Token__type_name__data: .string "Literal_Token"

  .align 8
Token:
  .quad 0
  .quad .LABEL__Token__type_name__data
  .quad 6
  .quad 5
  .quad Object
.LABEL__Token__type_name__data: .string "Token"

  .align 8
IR_Struct_Type:
  .quad 0
  .quad .LABEL__IR_Struct_Type__type_name__data
  .quad 15
  .quad 14
  .quad IR_Type
.LABEL__IR_Struct_Type__type_name__data: .string "IR_Struct_Type"

  .align 8
AST_Struct_Statement:
  .quad 0
  .quad .LABEL__AST_Struct_Statement__type_name__data
  .quad 21
  .quad 20
  .quad AST_Statement
.LABEL__AST_Struct_Statement__type_name__data: .string "AST_Struct_Statement"

  .align 8
AST_Statement:
  .quad 0
  .quad .LABEL__AST_Statement__type_name__data
  .quad 14
  .quad 13
  .quad Object
.LABEL__AST_Statement__type_name__data: .string "AST_Statement"

  .align 8
Identifier_Token:
  .quad 0
  .quad .LABEL__Identifier_Token__type_name__data
  .quad 17
  .quad 16
  .quad Token
.LABEL__Identifier_Token__type_name__data: .string "Identifier_Token"

  .align 8
AST_Type:
  .quad 0
  .quad .LABEL__AST_Type__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__AST_Type__type_name__data: .string "AST_Type"

  .align 8
AST_Expression:
  .quad 0
  .quad .LABEL__AST_Expression__type_name__data
  .quad 15
  .quad 14
  .quad Object
.LABEL__AST_Expression__type_name__data: .string "AST_Expression"

  .align 8
IR_Any_Type:
  .quad 0
  .quad .LABEL__IR_Any_Type__type_name__data
  .quad 12
  .quad 11
  .quad IR_Type
.LABEL__IR_Any_Type__type_name__data: .string "IR_Any_Type"

  .align 8
IR_Boolean_Type:
  .quad 0
  .quad .LABEL__IR_Boolean_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Boolean_Type__type_name__data: .string "IR_Boolean_Type"

  .align 8
IR_Int_Type:
  .quad 0
  .quad .LABEL__IR_Int_Type__type_name__data
  .quad 12
  .quad 11
  .quad IR_Type
.LABEL__IR_Int_Type__type_name__data: .string "IR_Int_Type"

  .align 8
IR_Int8_Type:
  .quad 0
  .quad .LABEL__IR_Int8_Type__type_name__data
  .quad 13
  .quad 12
  .quad IR_Type
.LABEL__IR_Int8_Type__type_name__data: .string "IR_Int8_Type"

  .align 8
IR_Int16_Type:
  .quad 0
  .quad .LABEL__IR_Int16_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int16_Type__type_name__data: .string "IR_Int16_Type"

  .align 8
IR_Int32_Type:
  .quad 0
  .quad .LABEL__IR_Int32_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int32_Type__type_name__data: .string "IR_Int32_Type"

  .align 8
IR_Int64_Type:
  .quad 0
  .quad .LABEL__IR_Int64_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int64_Type__type_name__data: .string "IR_Int64_Type"

  .align 8
IR_Nothing_Type:
  .quad 0
  .quad .LABEL__IR_Nothing_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Nothing_Type__type_name__data: .string "IR_Nothing_Type"

  .align 8
IR_Null_Type:
  .quad 0
  .quad .LABEL__IR_Null_Type__type_name__data
  .quad 13
  .quad 12
  .quad IR_Type
.LABEL__IR_Null_Type__type_name__data: .string "IR_Null_Type"

  .align 8
IR_Undefined_Type:
  .quad 0
  .quad .LABEL__IR_Undefined_Type__type_name__data
  .quad 18
  .quad 17
  .quad IR_Type
.LABEL__IR_Undefined_Type__type_name__data: .string "IR_Undefined_Type"

  .align 8
IR_Pointer_Type:
  .quad 0
  .quad .LABEL__IR_Pointer_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Pointer_Type__type_name__data: .string "IR_Pointer_Type"

  .align 8
IR_Array_Type:
  .quad 0
  .quad .LABEL__IR_Array_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Pointer_Type
.LABEL__IR_Array_Type__type_name__data: .string "IR_Array_Type"

  .align 8
IR_Undefined_Value:
  .quad 0
  .quad .LABEL__IR_Undefined_Value__type_name__data
  .quad 19
  .quad 18
  .quad IR_Value
.LABEL__IR_Undefined_Value__type_name__data: .string "IR_Undefined_Value"

  .align 8
IR_Constant_Value:
  .quad 0
  .quad .LABEL__IR_Constant_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Constant_Value__type_name__data: .string "IR_Constant_Value"

  .align 8
IR_Global_Variable:
  .quad 0
  .quad .LABEL__IR_Global_Variable__type_name__data
  .quad 19
  .quad 18
  .quad IR_Variable
.LABEL__IR_Global_Variable__type_name__data: .string "IR_Global_Variable"

  .align 8
IR_Function_Parameter:
  .quad 0
  .quad .LABEL__IR_Function_Parameter__type_name__data
  .quad 22
  .quad 21
  .quad IR_Variable
.LABEL__IR_Function_Parameter__type_name__data: .string "IR_Function_Parameter"

  .align 8
IR_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Call_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Call_Instruction__type_name__data: .string "IR_Call_Instruction"

  .align 8
IR_Direct_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Direct_Call_Instruction__type_name__data
  .quad 27
  .quad 26
  .quad IR_Call_Instruction
.LABEL__IR_Direct_Call_Instruction__type_name__data: .string "IR_Direct_Call_Instruction"

  .align 8
IR_Dynamic_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Dynamic_Call_Instruction__type_name__data
  .quad 28
  .quad 27
  .quad IR_Call_Instruction
.LABEL__IR_Dynamic_Call_Instruction__type_name__data: .string "IR_Dynamic_Call_Instruction"

  .align 8
IR_Cast_Instruction:
  .quad 0
  .quad .LABEL__IR_Cast_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Cast_Instruction__type_name__data: .string "IR_Cast_Instruction"

  .align 8
IR_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Jump_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Jump_Instruction__type_name__data: .string "IR_Jump_Instruction"

  .align 8
IR_Conditional_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Conditional_Jump_Instruction__type_name__data
  .quad 32
  .quad 31
  .quad IR_Jump_Instruction
.LABEL__IR_Conditional_Jump_Instruction__type_name__data: .string "IR_Conditional_Jump_Instruction"

  .align 8
IR_Direct_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Direct_Jump_Instruction__type_name__data
  .quad 27
  .quad 26
  .quad IR_Jump_Instruction
.LABEL__IR_Direct_Jump_Instruction__type_name__data: .string "IR_Direct_Jump_Instruction"

  .align 8
IR_Load_Array_Item_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Array_Item_Instruction__type_name__data
  .quad 31
  .quad 30
  .quad IR_Instruction
.LABEL__IR_Load_Array_Item_Instruction__type_name__data: .string "IR_Load_Array_Item_Instruction"

  .align 8
IR_Load_Function_Address_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Function_Address_Instruction__type_name__data
  .quad 37
  .quad 36
  .quad IR_Instruction
.LABEL__IR_Load_Function_Address_Instruction__type_name__data: .string "IR_Load_Function_Address_Instruction"

  .align 8
IR_Load_Struct_Member_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Struct_Member_Instruction__type_name__data
  .quad 34
  .quad 33
  .quad IR_Instruction
.LABEL__IR_Load_Struct_Member_Instruction__type_name__data: .string "IR_Load_Struct_Member_Instruction"

  .align 8
IR_Load_Variable_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Instruction__type_name__data
  .quad 29
  .quad 28
  .quad IR_Instruction
.LABEL__IR_Load_Variable_Instruction__type_name__data: .string "IR_Load_Variable_Instruction"

  .align 8
IR_New_Instruction:
  .quad 0
  .quad .LABEL__IR_New_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_New_Instruction__type_name__data: .string "IR_New_Instruction"

  .align 8
IR_Return_Instruction:
  .quad 0
  .quad .LABEL__IR_Return_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Instruction
.LABEL__IR_Return_Instruction__type_name__data: .string "IR_Return_Instruction"

  .align 8
IR_Set_Instruction:
  .quad 0
  .quad .LABEL__IR_Set_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_Set_Instruction__type_name__data: .string "IR_Set_Instruction"

  .align 8
IR_Store_Array_Item_Instruction:
  .quad 0
  .quad .LABEL__IR_Store_Array_Item_Instruction__type_name__data
  .quad 32
  .quad 31
  .quad IR_Instruction
.LABEL__IR_Store_Array_Item_Instruction__type_name__data: .string "IR_Store_Array_Item_Instruction"

  .align 8
IR_Store_Struct_Member_Instruction:
  .quad 0
  .quad .LABEL__IR_Store_Struct_Member_Instruction__type_name__data
  .quad 35
  .quad 34
  .quad IR_Instruction
.LABEL__IR_Store_Struct_Member_Instruction__type_name__data: .string "IR_Store_Struct_Member_Instruction"

  .align 8
IR_Binary_Instruction:
  .quad 0
  .quad .LABEL__IR_Binary_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Instruction
.LABEL__IR_Binary_Instruction__type_name__data: .string "IR_Binary_Instruction"

  .align 8
IR_Add_Instruction:
  .quad 0
  .quad .LABEL__IR_Add_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Binary_Instruction
.LABEL__IR_Add_Instruction__type_name__data: .string "IR_Add_Instruction"

  .align 8
IR_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Comparison_Instruction__type_name__data
  .quad 26
  .quad 25
  .quad IR_Binary_Instruction
.LABEL__IR_Comparison_Instruction__type_name__data: .string "IR_Comparison_Instruction"

  .align 8
IR_Divide_Instruction:
  .quad 0
  .quad .LABEL__IR_Divide_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Binary_Instruction
.LABEL__IR_Divide_Instruction__type_name__data: .string "IR_Divide_Instruction"

  .align 8
IR_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Equals_Comparison_Instruction__type_name__data
  .quad 33
  .quad 32
  .quad IR_Comparison_Instruction
.LABEL__IR_Equals_Comparison_Instruction__type_name__data: .string "IR_Equals_Comparison_Instruction"

  .align 8
IR_Greater_Than_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Greater_Than_Comparison_Instruction__type_name__data
  .quad 39
  .quad 38
  .quad IR_Comparison_Instruction
.LABEL__IR_Greater_Than_Comparison_Instruction__type_name__data: .string "IR_Greater_Than_Comparison_Instruction"

  .align 8
IR_Greater_Than_Or_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Greater_Than_Or_Equals_Comparison_Instruction__type_name__data
  .quad 49
  .quad 48
  .quad IR_Comparison_Instruction
.LABEL__IR_Greater_Than_Or_Equals_Comparison_Instruction__type_name__data: .string "IR_Greater_Than_Or_Equals_Comparison_Instruction"

  .align 8
IR_Less_Than_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Less_Than_Comparison_Instruction__type_name__data
  .quad 36
  .quad 35
  .quad IR_Comparison_Instruction
.LABEL__IR_Less_Than_Comparison_Instruction__type_name__data: .string "IR_Less_Than_Comparison_Instruction"

  .align 8
IR_Less_Than_Or_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Less_Than_Or_Equals_Comparison_Instruction__type_name__data
  .quad 46
  .quad 45
  .quad IR_Comparison_Instruction
.LABEL__IR_Less_Than_Or_Equals_Comparison_Instruction__type_name__data: .string "IR_Less_Than_Or_Equals_Comparison_Instruction"

  .align 8
IR_Modulo_Instruction:
  .quad 0
  .quad .LABEL__IR_Modulo_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Binary_Instruction
.LABEL__IR_Modulo_Instruction__type_name__data: .string "IR_Modulo_Instruction"

  .align 8
IR_Multiply_Instruction:
  .quad 0
  .quad .LABEL__IR_Multiply_Instruction__type_name__data
  .quad 24
  .quad 23
  .quad IR_Binary_Instruction
.LABEL__IR_Multiply_Instruction__type_name__data: .string "IR_Multiply_Instruction"

  .align 8
IR_Not_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Not_Equals_Comparison_Instruction__type_name__data
  .quad 37
  .quad 36
  .quad IR_Comparison_Instruction
.LABEL__IR_Not_Equals_Comparison_Instruction__type_name__data: .string "IR_Not_Equals_Comparison_Instruction"

  .align 8
IR_Substract_Instruction:
  .quad 0
  .quad .LABEL__IR_Substract_Instruction__type_name__data
  .quad 25
  .quad 24
  .quad IR_Binary_Instruction
.LABEL__IR_Substract_Instruction__type_name__data: .string "IR_Substract_Instruction"

  .align 8
IR_Phi_Instruction:
  .quad 0
  .quad .LABEL__IR_Phi_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_Phi_Instruction__type_name__data: .string "IR_Phi_Instruction"

  .align 8
Matcher:
  .quad 0
  .quad .LABEL__Matcher__type_name__data
  .quad 8
  .quad 7
  .quad Object
.LABEL__Matcher__type_name__data: .string "Matcher"

  .align 8
Comment_Matcher:
  .quad 0
  .quad .LABEL__Comment_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Comment_Matcher__type_name__data: .string "Comment_Matcher"

  .align 8
End_Of_File_Matcher:
  .quad 0
  .quad .LABEL__End_Of_File_Matcher__type_name__data
  .quad 20
  .quad 19
  .quad Matcher
.LABEL__End_Of_File_Matcher__type_name__data: .string "End_Of_File_Matcher"

  .align 8
End_Of_Line_Matcher:
  .quad 0
  .quad .LABEL__End_Of_Line_Matcher__type_name__data
  .quad 20
  .quad 19
  .quad Matcher
.LABEL__End_Of_Line_Matcher__type_name__data: .string "End_Of_Line_Matcher"

  .align 8
Identifier_Matcher:
  .quad 0
  .quad .LABEL__Identifier_Matcher__type_name__data
  .quad 19
  .quad 18
  .quad Matcher
.LABEL__Identifier_Matcher__type_name__data: .string "Identifier_Matcher"

  .align 8
Keyword_Matcher:
  .quad 0
  .quad .LABEL__Keyword_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Keyword_Matcher__type_name__data: .string "Keyword_Matcher"

  .align 8
Literal_Matcher:
  .quad 0
  .quad .LABEL__Literal_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Literal_Matcher__type_name__data: .string "Literal_Matcher"

  .align 8
String_Literal_Matcher:
  .quad 0
  .quad .LABEL__String_Literal_Matcher__type_name__data
  .quad 23
  .quad 22
  .quad Matcher
.LABEL__String_Literal_Matcher__type_name__data: .string "String_Literal_Matcher"

  .align 8
Other_Matcher:
  .quad 0
  .quad .LABEL__Other_Matcher__type_name__data
  .quad 14
  .quad 13
  .quad Matcher
.LABEL__Other_Matcher__type_name__data: .string "Other_Matcher"

  .align 8
Space_Matcher:
  .quad 0
  .quad .LABEL__Space_Matcher__type_name__data
  .quad 14
  .quad 13
  .quad Matcher
.LABEL__Space_Matcher__type_name__data: .string "Space_Matcher"

  .align 8
AST_Include_Statement:
  .quad 0
  .quad .LABEL__AST_Include_Statement__type_name__data
  .quad 22
  .quad 21
  .quad AST_Statement
.LABEL__AST_Include_Statement__type_name__data: .string "AST_Include_Statement"

  .align 8
AST_Function_Statement:
  .quad 0
  .quad .LABEL__AST_Function_Statement__type_name__data
  .quad 23
  .quad 22
  .quad AST_Statement
.LABEL__AST_Function_Statement__type_name__data: .string "AST_Function_Statement"

  .align 8
AST_Function_Type:
  .quad 0
  .quad .LABEL__AST_Function_Type__type_name__data
  .quad 18
  .quad 17
  .quad AST_Type
.LABEL__AST_Function_Type__type_name__data: .string "AST_Function_Type"

  .align 8
AST_Block_Statement:
  .quad 0
  .quad .LABEL__AST_Block_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_Block_Statement__type_name__data: .string "AST_Block_Statement"

  .align 8
AST_Expression_Statement:
  .quad 0
  .quad .LABEL__AST_Expression_Statement__type_name__data
  .quad 25
  .quad 24
  .quad AST_Statement
.LABEL__AST_Expression_Statement__type_name__data: .string "AST_Expression_Statement"

  .align 8
AST_If_Statement:
  .quad 0
  .quad .LABEL__AST_If_Statement__type_name__data
  .quad 17
  .quad 16
  .quad AST_Statement
.LABEL__AST_If_Statement__type_name__data: .string "AST_If_Statement"

  .align 8
AST_Loop_Statement:
  .quad 0
  .quad .LABEL__AST_Loop_Statement__type_name__data
  .quad 19
  .quad 18
  .quad AST_Statement
.LABEL__AST_Loop_Statement__type_name__data: .string "AST_Loop_Statement"

  .align 8
AST_While_Statement:
  .quad 0
  .quad .LABEL__AST_While_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_While_Statement__type_name__data: .string "AST_While_Statement"

  .align 8
AST_Break_Statement:
  .quad 0
  .quad .LABEL__AST_Break_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_Break_Statement__type_name__data: .string "AST_Break_Statement"

  .align 8
AST_Return_Statement:
  .quad 0
  .quad .LABEL__AST_Return_Statement__type_name__data
  .quad 21
  .quad 20
  .quad AST_Statement
.LABEL__AST_Return_Statement__type_name__data: .string "AST_Return_Statement"

  .align 8
AST_Variable_Statement:
  .quad 0
  .quad .LABEL__AST_Variable_Statement__type_name__data
  .quad 23
  .quad 22
  .quad AST_Statement
.LABEL__AST_Variable_Statement__type_name__data: .string "AST_Variable_Statement"

  .align 8
AST_Assignment_Statement:
  .quad 0
  .quad .LABEL__AST_Assignment_Statement__type_name__data
  .quad 25
  .quad 24
  .quad AST_Statement
.LABEL__AST_Assignment_Statement__type_name__data: .string "AST_Assignment_Statement"

  .align 8
Other_Token:
  .quad 0
  .quad .LABEL__Other_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Other_Token__type_name__data: .string "Other_Token"

  .align 8
AST_Named_Type:
  .quad 0
  .quad .LABEL__AST_Named_Type__type_name__data
  .quad 15
  .quad 14
  .quad AST_Type
.LABEL__AST_Named_Type__type_name__data: .string "AST_Named_Type"

  .align 8
AST_Pointer_Type:
  .quad 0
  .quad .LABEL__AST_Pointer_Type__type_name__data
  .quad 17
  .quad 16
  .quad AST_Type
.LABEL__AST_Pointer_Type__type_name__data: .string "AST_Pointer_Type"

  .align 8
AST_Array_Type:
  .quad 0
  .quad .LABEL__AST_Array_Type__type_name__data
  .quad 15
  .quad 14
  .quad AST_Type
.LABEL__AST_Array_Type__type_name__data: .string "AST_Array_Type"

  .align 8
AST_Atomic_Expression:
  .quad 0
  .quad .LABEL__AST_Atomic_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Atomic_Expression__type_name__data: .string "AST_Atomic_Expression"

  .align 8
AST_Literal_Expression:
  .quad 0
  .quad .LABEL__AST_Literal_Expression__type_name__data
  .quad 23
  .quad 22
  .quad AST_Expression
.LABEL__AST_Literal_Expression__type_name__data: .string "AST_Literal_Expression"

  .align 8
AST_Variable_Expression:
  .quad 0
  .quad .LABEL__AST_Variable_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Expression
.LABEL__AST_Variable_Expression__type_name__data: .string "AST_Variable_Expression"

  .align 8
AST_Binary_Expression:
  .quad 0
  .quad .LABEL__AST_Binary_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Binary_Expression__type_name__data: .string "AST_Binary_Expression"

  .align 8
AST_Add_Expression:
  .quad 0
  .quad .LABEL__AST_Add_Expression__type_name__data
  .quad 19
  .quad 18
  .quad AST_Binary_Expression
.LABEL__AST_Add_Expression__type_name__data: .string "AST_Add_Expression"

  .align 8
AST_Divide_Expression:
  .quad 0
  .quad .LABEL__AST_Divide_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Divide_Expression__type_name__data: .string "AST_Divide_Expression"

  .align 8
AST_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Equals_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Equals_Expression__type_name__data: .string "AST_Equals_Expression"

  .align 8
AST_Greater_Than_Expression:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Expression__type_name__data
  .quad 28
  .quad 27
  .quad AST_Binary_Expression
.LABEL__AST_Greater_Than_Expression__type_name__data: .string "AST_Greater_Than_Expression"

  .align 8
AST_Greater_Than_Or_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__type_name__data
  .quad 38
  .quad 37
  .quad AST_Binary_Expression
.LABEL__AST_Greater_Than_Or_Equals_Expression__type_name__data: .string "AST_Greater_Than_Or_Equals_Expression"

  .align 8
AST_Less_Than_Expression:
  .quad 0
  .quad .LABEL__AST_Less_Than_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Less_Than_Expression__type_name__data: .string "AST_Less_Than_Expression"

  .align 8
AST_Less_Than_Or_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__type_name__data
  .quad 35
  .quad 34
  .quad AST_Binary_Expression
.LABEL__AST_Less_Than_Or_Equals_Expression__type_name__data: .string "AST_Less_Than_Or_Equals_Expression"

  .align 8
AST_Logic_And_Expression:
  .quad 0
  .quad .LABEL__AST_Logic_And_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Logic_And_Expression__type_name__data: .string "AST_Logic_And_Expression"

  .align 8
AST_Logic_Or_Expression:
  .quad 0
  .quad .LABEL__AST_Logic_Or_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Binary_Expression
.LABEL__AST_Logic_Or_Expression__type_name__data: .string "AST_Logic_Or_Expression"

  .align 8
AST_Modulo_Expression:
  .quad 0
  .quad .LABEL__AST_Modulo_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Modulo_Expression__type_name__data: .string "AST_Modulo_Expression"

  .align 8
AST_Multiply_Expression:
  .quad 0
  .quad .LABEL__AST_Multiply_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Binary_Expression
.LABEL__AST_Multiply_Expression__type_name__data: .string "AST_Multiply_Expression"

  .align 8
AST_Not_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Not_Equals_Expression__type_name__data
  .quad 26
  .quad 25
  .quad AST_Binary_Expression
.LABEL__AST_Not_Equals_Expression__type_name__data: .string "AST_Not_Equals_Expression"

  .align 8
AST_Substract_Expression:
  .quad 0
  .quad .LABEL__AST_Substract_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Substract_Expression__type_name__data: .string "AST_Substract_Expression"

  .align 8
AST_Unary_Expression:
  .quad 0
  .quad .LABEL__AST_Unary_Expression__type_name__data
  .quad 21
  .quad 20
  .quad AST_Expression
.LABEL__AST_Unary_Expression__type_name__data: .string "AST_Unary_Expression"

  .align 8
AST_Negate_Expression:
  .quad 0
  .quad .LABEL__AST_Negate_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Unary_Expression
.LABEL__AST_Negate_Expression__type_name__data: .string "AST_Negate_Expression"

  .align 8
AST_Cast_Expression:
  .quad 0
  .quad .LABEL__AST_Cast_Expression__type_name__data
  .quad 20
  .quad 19
  .quad AST_Expression
.LABEL__AST_Cast_Expression__type_name__data: .string "AST_Cast_Expression"

  .align 8
AST_New_Expression:
  .quad 0
  .quad .LABEL__AST_New_Expression__type_name__data
  .quad 19
  .quad 18
  .quad AST_Expression
.LABEL__AST_New_Expression__type_name__data: .string "AST_New_Expression"

  .align 8
AST_Call_Expression:
  .quad 0
  .quad .LABEL__AST_Call_Expression__type_name__data
  .quad 20
  .quad 19
  .quad AST_Expression
.LABEL__AST_Call_Expression__type_name__data: .string "AST_Call_Expression"

  .align 8
AST_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Access_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Access_Expression__type_name__data: .string "AST_Access_Expression"

  .align 8
AST_Member_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Member_Access_Expression__type_name__data
  .quad 29
  .quad 28
  .quad AST_Access_Expression
.LABEL__AST_Member_Access_Expression__type_name__data: .string "AST_Member_Access_Expression"

  .align 8
AST_Array_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Array_Access_Expression__type_name__data
  .quad 28
  .quad 27
  .quad AST_Access_Expression
.LABEL__AST_Array_Access_Expression__type_name__data: .string "AST_Array_Access_Expression"

  .align 8
Character_Token:
  .quad 0
  .quad .LABEL__Character_Token__type_name__data
  .quad 16
  .quad 15
  .quad Literal_Token
.LABEL__Character_Token__type_name__data: .string "Character_Token"

  .align 8
Boolean_Token:
  .quad 0
  .quad .LABEL__Boolean_Token__type_name__data
  .quad 14
  .quad 13
  .quad Literal_Token
.LABEL__Boolean_Token__type_name__data: .string "Boolean_Token"

  .align 8
Comment_Token:
  .quad 0
  .quad .LABEL__Comment_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Comment_Token__type_name__data: .string "Comment_Token"

  .align 8
End_Of_File_Token:
  .quad 0
  .quad .LABEL__End_Of_File_Token__type_name__data
  .quad 18
  .quad 17
  .quad Token
.LABEL__End_Of_File_Token__type_name__data: .string "End_Of_File_Token"

  .align 8
End_Of_Line_Token:
  .quad 0
  .quad .LABEL__End_Of_Line_Token__type_name__data
  .quad 18
  .quad 17
  .quad Token
.LABEL__End_Of_Line_Token__type_name__data: .string "End_Of_Line_Token"

  .align 8
Error_Token:
  .quad 0
  .quad .LABEL__Error_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Error_Token__type_name__data: .string "Error_Token"

  .align 8
Integer_Token:
  .quad 0
  .quad .LABEL__Integer_Token__type_name__data
  .quad 14
  .quad 13
  .quad Literal_Token
.LABEL__Integer_Token__type_name__data: .string "Integer_Token"

  .align 8
Keyword_Token:
  .quad 0
  .quad .LABEL__Keyword_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Keyword_Token__type_name__data: .string "Keyword_Token"

  .align 8
Null_Token:
  .quad 0
  .quad .LABEL__Null_Token__type_name__data
  .quad 11
  .quad 10
  .quad Literal_Token
.LABEL__Null_Token__type_name__data: .string "Null_Token"

  .align 8
Space_Token:
  .quad 0
  .quad .LABEL__Space_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Space_Token__type_name__data: .string "Space_Token"

  .align 8
Undefined_Token:
  .quad 0
  .quad .LABEL__Undefined_Token__type_name__data
  .quad 16
  .quad 15
  .quad Literal_Token
.LABEL__Undefined_Token__type_name__data: .string "Undefined_Token"
