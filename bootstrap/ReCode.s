  .file 1 "bootstrap/ReCode.code"

  .intel_syntax noprefix

  .loc 1 3 1
  .text
  .globl main
main:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR main_1__stack_frame_size[rip]
  sub rsp, rax
.LABEL__main_1__1:
  # argc.1: Int = load_variable(argc)
  # [live values]: argc.1:rdi 
  # argv.1: @@Int8 = load_variable(argv)
  # [live values]: argc.1:rdi argv.1:rsi 
  # $1.1: Boolean = argc.1 < 3
  .loc 1 4 9
  cmp rdi, 3
  setl al
  # [live values]: argc.1:rdi argv.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__main_1__3
.LABEL__main_1__2:
  # stdout.2: @FILE = load_variable(stdout)
  # [discarded value]: $1.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] stdout.2:stdout[rip] 
  # $2.1: @FILE = call(write.339, stdout.2, "Usage:")
  .loc 1 5 9
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_0[rip] # "Usage:"
  call write_339
  # [discarded value]: stdout.2
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(end_line.342, $2.1)
  .loc 1 5 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # stdout.3: @FILE = load_variable(stdout)
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] stdout.3:stdout[rip] 
  # $4.1: @FILE = call(write.341, stdout.3, '\t')
  .loc 1 6 9
  mov rdi, stdout[rip]
  mov sil, 9
  call write_341
  # [discarded value]: stdout.3
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $4.1:rax 
  # $5.1: @Int8 = load_array_item(argv.1, 0)
  .loc 1 6 34
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $4.1:rax $5.1:rbx 
  # $6.1: @FILE = call(write.340, $4.1, $5.1)
  .loc 1 6 9
  mov rdi, rax
  mov rsi, rbx
  call write_340
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(write.339, $6.1, " <INPUT FILE> <OUTPUT FILE>")
  .loc 1 6 9
  mov rdi, rax
  lea rsi, .LABEL__string_1[rip] # " <INPUT FILE> <OUTPUT FILE>"
  call write_339
  # [discarded value]: $6.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(end_line.342, $7.1)
  .loc 1 6 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # call(exit.353, 1)
  .loc 1 7 9
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
.LABEL__main_1__3:
  # $9.1: @String = new(String)
  .loc 1 10 25
  mov rdi, 24
  call malloc
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $9.1:rax 
  # $10.1: @Int8 = load_array_item(argv.1, 1)
  .loc 1 10 41
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] $9.1:rax $10.1:rbx 
  # source_file_path.1: @String = call(init.328, $9.1, $10.1)
  .loc 1 10 25
  mov rdi, rax
  mov rsi, rbx
  call init_328
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:rax 
  # $12.1: Boolean = call(ends_with.334, source_file_path.1, ".code")
  .loc 1 11 9
  mov rdi, rax
  lea rsi, .LABEL__string_2[rip] # ".code"
  mov [rbp-24], rax
  call ends_with_334
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $12.1:rax 
  # $13.1: Boolean = $12.1 == false
  .loc 1 11 9
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $13.1:rbx 
  # jump($13.1, block.4, block.5)
  test bl, bl
  jz .LABEL__main_1__5
.LABEL__main_1__4:
  # stdout.4: @FILE = load_variable(stdout)
  # [discarded value]: $13.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] stdout.4:stdout[rip] 
  # $14.1: @FILE = call(write.339, stdout.4, "'")
  .loc 1 12 9
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_339
  # [discarded value]: stdout.4
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(write.339, $14.1, source_file_path.1)
  .loc 1 12 9
  mov rdi, rax
  mov rsi, [rbp-24]
  call write_339
  # [discarded value]: $14.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $15.1:rax 
  # $16.1: @FILE = call(write.339, $15.1, "' doesn't end with '.code'.")
  .loc 1 12 9
  mov rdi, rax
  lea rsi, .LABEL__string_4[rip] # "' doesn't end with '.code'."
  call write_339
  # [discarded value]: $15.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 12 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
  # call(exit.353, 1)
  .loc 1 13 9
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
.LABEL__main_1__5:
  # $18.1: @String = new(String)
  .loc 1 16 25
  mov rdi, 24
  call malloc
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $18.1:rax 
  # $19.1: @Int8 = load_array_item(argv.1, 2)
  .loc 1 16 41
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] $18.1:rax $19.1:rbx 
  # output_file_path.1: @String = call(init.328, $18.1, $19.1)
  .loc 1 16 25
  mov rdi, rax
  mov rsi, rbx
  call init_328
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:rax 
  # $21.1: Boolean = call(ends_with.334, output_file_path.1, ".s")
  .loc 1 17 9
  mov rdi, rax
  lea rsi, .LABEL__string_5[rip] # ".s"
  mov [rbp-32], rax
  call ends_with_334
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $21.1:rax 
  # $22.1: Boolean = $21.1 == false
  .loc 1 17 9
  cmp al, 0
  sete bl
  # [discarded value]: $21.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $22.1:rbx 
  # jump($22.1, block.6, block.7)
  test bl, bl
  jz .LABEL__main_1__7
.LABEL__main_1__6:
  # stdout.5: @FILE = load_variable(stdout)
  # [discarded value]: $22.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] stdout.5:stdout[rip] 
  # $23.1: @FILE = call(write.339, stdout.5, "'")
  .loc 1 18 9
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_339
  # [discarded value]: stdout.5
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $23.1:rax 
  # $24.1: @FILE = call(write.339, $23.1, output_file_path.1)
  .loc 1 18 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_339
  # [discarded value]: $23.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $24.1:rax 
  # $25.1: @FILE = call(write.339, $24.1, "' doesn't end with '.s'.")
  .loc 1 18 9
  mov rdi, rax
  lea rsi, .LABEL__string_6[rip] # "' doesn't end with '.s'."
  call write_339
  # [discarded value]: $24.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] $25.1:rax 
  # $26.1: @FILE = call(end_line.342, $25.1)
  .loc 1 18 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
  # call(exit.353, 1)
  .loc 1 19 9
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
.LABEL__main_1__7:
  # dump_file_path.1: @String = null
  .loc 1 22 5
  xor rax, rax
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:rax 
  # $27.1: Boolean = argc.1 >= 4
  .loc 1 23 9
  cmp QWORD PTR [rbp-16], 4
  setge bl
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:rax $27.1:rbx 
  # jump($27.1, block.8, block.9)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__main_1__9
.LABEL__main_1__8:
  # $28.1: @String = new(String)
  .loc 1 24 26
  mov rdi, 24
  call malloc
  # [discarded value]: $27.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] $28.1:rax 
  # $29.1: @Int8 = load_array_item(argv.1, 3)
  .loc 1 24 42
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] $28.1:rax $29.1:rbx 
  # dump_file_path.2: @String = call(init.328, $28.1, $29.1)
  .loc 1 24 26
  mov rdi, rax
  mov rsi, rbx
  call init_328
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:rax[rbp-40] 
  # $31.1: Boolean = call(ends_with.334, dump_file_path.2, ".ir")
  .loc 1 25 13
  mov rdi, rax
  lea rsi, .LABEL__string_7[rip] # ".ir"
  mov [rbp-40], rax
  call ends_with_334
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $31.1:rax 
  # $32.1: Boolean = $31.1 == false
  .loc 1 25 13
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $32.1:rbx 
  # jump($32.1, block.10, block.9)
  test bl, bl
  jz .LABEL__main_1__9
.LABEL__main_1__10:
  # stdout.6: @FILE = load_variable(stdout)
  # [discarded value]: $32.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] stdout.6:stdout[rip] 
  # $33.1: @FILE = call(write.339, stdout.6, "'")
  .loc 1 26 13
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_339
  # [discarded value]: stdout.6
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $33.1:rax 
  # $34.1: @FILE = call(write.339, $33.1, dump_file_path.2)
  .loc 1 26 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_339
  # [discarded value]: $33.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $34.1:rax 
  # $35.1: @FILE = call(write.339, $34.1, "' doesn't end with '.ir'.")
  .loc 1 26 13
  mov rdi, rax
  lea rsi, .LABEL__string_8[rip] # "' doesn't end with '.ir'."
  call write_339
  # [discarded value]: $34.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] $35.1:rax 
  # $36.1: @FILE = call(end_line.342, $35.1)
  .loc 1 26 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
  # call(exit.353, 1)
  .loc 1 27 13
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
.LABEL__main_1__9:
  # dump_file_path.4: @String = phi(dump_file_path.1, dump_file_path.2)
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] 
  # compilation_unit.1: @Compilation_Unit = call(parse.190, source_file_path.1)
  .loc 1 31 25
  mov rdi, [rbp-24]
  call parse_190
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] compilation_unit.1:rax 
  # build.1: @IR_Build = call(build.57, compilation_unit.1)
  .loc 1 34 14
  mov rdi, rax
  call build_57
  # [discarded value]: compilation_unit.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:rax 
  # $39.1: Boolean = dump_file_path.4 != null
  .loc 1 35 9
  cmp QWORD PTR [rbp-40], 0
  setne bl
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:rax $39.1:rbx 
  # jump($39.1, block.12, block.13)
  test bl, bl
  mov [rbp-48], rax
  jz .LABEL__main_1__13
.LABEL__main_1__12:
  # $40.1: @Int8 = load_struct_member(dump_file_path.4, data)
  .loc 1 36 28
  mov rax, [rbp-40]
  mov rax, [rax]
  # [discarded value]: $39.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] $40.1:rax 
  # $41.1: @Int8 = load_struct_member("w", data)
  .loc 1 36 49
  lea rbx, .LABEL__string_9[rip] # "w"
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] $40.1:rax $41.1:rbx 
  # dump_file.1: @FILE = call(fopen.349, $40.1, $41.1)
  .loc 1 36 22
  mov rdi, rax
  mov rsi, rbx
  call fopen
  # [discarded value]: $40.1
  # [discarded value]: $41.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] dump_file.1:rax 
  # call(dump.184, build.1, dump_file.1)
  .loc 1 37 9
  mov rdi, [rbp-48]
  mov rsi, rax
  mov [rbp-56], rax
  call dump_184
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] dump_file.1:[rbp-56] 
  # $43.1: Int32 = call(fclose.345, dump_file.1)
  .loc 1 38 9
  mov rdi, [rbp-56]
  call fclose
  # [discarded value]: dump_file.1
  # [discarded value]: $43.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # jump(block.13)
.LABEL__main_1__13:
  # call(generate.2, build.1, output_file_path.1)
  .loc 1 41 5
  mov rdi, [rbp-48]
  mov rsi, [rbp-32]
  call generate_2
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # return()
  jmp .LABEL__main_1__end
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] dump_file_path.4:[rbp-40] build.1:[rbp-48] 
  # [discarded value]: dump_file_path.4
  # [discarded value]: build.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] dump_file_path.2:[rbp-40] 
  # [discarded value]: dump_file_path.2
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] dump_file_path.1:[rbp-40] 
  # [discarded value]: dump_file_path.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] output_file_path.1:[rbp-32] 
  # [discarded value]: output_file_path.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] source_file_path.1:[rbp-24] 
  # [discarded value]: source_file_path.1
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # [live values]: argc.1:[rbp-16] argv.1:[rbp-8] 
  # [discarded value]: argc.1
  # [discarded value]: argv.1
  # [live values]: 
.LABEL__main_1__end:
  mov rsp, rbp
  pop rbp
  ret

main_1__stack_frame_size: .word 64

  .loc 1 48 1
  .text
generate_2:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_2__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_2__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: build.1:rdi output_file_path.1:rsi 
  # generator.1: @MC_Generator = call(create_mc_generator.32, output_file_path.1)
  .loc 1 49 18
  mov [rbp-8], rdi
  mov rdi, rsi
  call create_mc_generator_32
  # [discarded value]: output_file_path.1
  # [live values]: build.1:[rbp-8] generator.1:rax 
  # $2.1: @List = load_struct_member(build.1, sources)
  .loc 1 51 27
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:rax $2.1:rbx 
  # build_sources_item.1: @List_Item = load_struct_member($2.1, first_item)
  .loc 1 51 27
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: build.1:[rbp-8] generator.1:rax build_sources_item.1:r15 
  # jump(block.2)
  mov [rbp-16], rax
  mov [rbp-24], r15
.LABEL__generate_2__2:
  # build_sources_item.2: @List_Item = phi(build_sources_item.1, build_sources_item.4)
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # $4.1: Boolean = build_sources_item.2 != null
  .loc 1 52 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_2__4
.LABEL__generate_2__3:
  # build_source.1: @Source = load_struct_member(build_sources_item.2, data)
  .loc 1 53 25
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:rax 
  # $7.1: @FILE = load_struct_member(generator.1, output_file)
  .loc 1 54 9
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.339, $7.1, "  .file ")
  .loc 1 54 9
  mov rdi, rbx
  lea rsi, .LABEL__string_10[rip] # "  .file "
  mov [rbp-32], rax
  call write_339
  # [discarded value]: $7.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $8.1:rax 
  # $9.1: Int = load_struct_member(build_source.1, id)
  .loc 1 54 55
  mov rbx, [rbp-32]
  mov rbx, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $8.1:rax $9.1:rbx 
  # $10.1: @FILE = call(write.338, $8.1, $9.1)
  .loc 1 54 9
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $10.1:rax 
  # $11.1: @FILE = call(write.339, $10.1, " \"")
  .loc 1 54 9
  mov rdi, rax
  lea rsi, .LABEL__string_11[rip] # " \""
  call write_339
  # [discarded value]: $10.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_source.1:[rbp-32] $11.1:rax 
  # $12.1: @String = load_struct_member(build_source.1, file_path)
  .loc 1 54 91
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: build_source.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $11.1:rax $12.1:rbx 
  # $13.1: @FILE = call(write.339, $11.1, $12.1)
  .loc 1 54 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, "\"")
  .loc 1 54 9
  mov rdi, rax
  lea rsi, .LABEL__string_12[rip] # "\""
  call write_339
  # [discarded value]: $13.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(end_line.342, $14.1)
  .loc 1 54 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # build_sources_item.4: @List_Item = load_struct_member(build_sources_item.2, next_item)
  .loc 1 55 30
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_sources_item.4:rax[rbp-24] 
  # jump(block.2)
  mov [rbp-24], rax
  jmp .LABEL__generate_2__2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] build_sources_item.4:[rbp-24] 
  # [discarded value]: build_sources_item.4
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
.LABEL__generate_2__4:
  # $17.1: @FILE = load_struct_member(generator.1, output_file)
  .loc 1 58 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $17.1:rax 
  # $18.1: @FILE = call(write_line.337, $17.1, "  .intel_syntax noprefix")
  .loc 1 58 5
  mov rdi, rax
  lea rsi, .LABEL__string_13[rip] # "  .intel_syntax noprefix"
  call write_line_337
  # [discarded value]: $17.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $18.1:rax 
  # $19.1: @FILE = call(end_line.342, $18.1)
  .loc 1 58 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # $20.1: @List = load_struct_member(build.1, named_functions)
  .loc 1 60 18
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $20.1:rax 
  # functions.1: @List_Iterator = call(create_iterator.319, $20.1)
  .loc 1 60 18
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $20.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__generate_2__5:
  # $22.1: Boolean = call(has_next.322, functions.1)
  .loc 1 61 12
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] $22.1:rax 
  # jump($22.1, block.6, block.7)
  test al, al
  jz .LABEL__generate_2__7
.LABEL__generate_2__6:
  # function.1: @IR_Function = call(next.323, functions.1)
  .loc 1 62 21
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $22.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:rax 
  # $25.1: Boolean = load_struct_member(function.1, is_external)
  .loc 1 63 13
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:rax $25.1:rbx 
  # $26.1: Boolean = $25.1 == false
  .loc 1 63 13
  cmp bl, 0
  sete r15b
  # [discarded value]: $25.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:rax $26.1:r15 
  # jump($26.1, block.8, block.5)
  test r15b, r15b
  mov [rbp-40], rax
  jz .LABEL__generate_2__5
.LABEL__generate_2__8:
  # call(generate_function.3, generator.1, function.1)
  .loc 1 64 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  call generate_function_3
  # [discarded value]: $26.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:[rbp-40] 
  # jump(block.5)
  jmp .LABEL__generate_2__5
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:[rbp-40] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] function.1:[rbp-40] 
  # [discarded value]: function.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
.LABEL__generate_2__7:
  # call(generate_strings.53, generator.1)
  .loc 1 68 5
  mov rdi, [rbp-16]
  call generate_strings_53
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # $27.1: @List = load_struct_member(build.1, named_types)
  .loc 1 70 37
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] $27.1:rax 
  # call(generate_object_types.55, generator.1, $27.1)
  .loc 1 70 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_object_types_55
  # [discarded value]: $27.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # $28.1: @FILE = load_struct_member(generator.1, output_file)
  .loc 1 72 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] $28.1:rax 
  # $29.1: Int32 = call(fclose.345, $28.1)
  .loc 1 72 5
  mov rdi, rax
  call fclose
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # return()
  jmp .LABEL__generate_2__end
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] functions.1:[rbp-32] 
  # [discarded value]: functions.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [discarded value]: build_sources_item.2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [discarded value]: build.1
  # [discarded value]: generator.1
  # [discarded value]: build_sources_item.1
  # [live values]: 
.LABEL__generate_2__end:
  mov rsp, rbp
  pop rbp
  ret

generate_2__stack_frame_size: .word 48

  .loc 1 75 1
  .text
generate_function_3:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_function_3__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_function_3__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 76 5
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi function.1:rsi $1.1:rax 
  # $2.1: @FILE = call(end_line.342, $1.1)
  .loc 1 76 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_342
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 77 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write.339, $3.1, "  .loc ")
  .loc 1 77 5
  mov rdi, rax
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_339
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax 
  # $5.1: @Source_Location = load_struct_member(function.1, location)
  .loc 1 77 45
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax $5.1:rbx 
  # $6.1: @Source = load_struct_member($5.1, source)
  .loc 1 77 45
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax $6.1:r15 
  # $7.1: Int = load_struct_member($6.1, id)
  .loc 1 77 45
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.338, $4.1, $7.1)
  .loc 1 77 5
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $8.1:rax 
  # $9.1: @FILE = call(write.341, $8.1, ' ')
  .loc 1 77 5
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax 
  # $10.1: @Source_Location = load_struct_member(function.1, location)
  .loc 1 77 91
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax $10.1:rbx 
  # $11.1: Int = load_struct_member($10.1, line)
  .loc 1 77 91
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax $11.1:r15 
  # $12.1: @FILE = call(write.338, $9.1, $11.1)
  .loc 1 77 5
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $12.1:rax 
  # $13.1: @FILE = call(write.341, $12.1, ' ')
  .loc 1 77 5
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(function.1, location)
  .loc 1 77 132
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax $14.1:rbx 
  # $15.1: Int = load_struct_member($14.1, column)
  .loc 1 77 132
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax $15.1:r15 
  # $16.1: @FILE = call(write.338, $13.1, $15.1)
  .loc 1 77 5
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 77 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 78 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $18.1:rax 
  # $19.1: @FILE = call(write.339, $18.1, "  .text")
  .loc 1 78 5
  mov rdi, rax
  lea rsi, .LABEL__string_15[rip] # "  .text"
  call write_339
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $19.1:rax 
  # $20.1: @FILE = call(end_line.342, $19.1)
  .loc 1 78 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $21.1: @String = load_struct_member(function.1, name)
  .loc 1 79 9
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $21.1:rax 
  # $22.1: Boolean = call(equals.335, $21.1, "main")
  .loc 1 79 9
  mov rdi, rax
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_335
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:rax 
  # jump($22.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_function_3__4
.LABEL__generate_function_3__2:
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 80 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $31.1:rax 
  # $32.1: @FILE = call(write.339, $31.1, "  .globl main")
  .loc 1 80 9
  mov rdi, rax
  lea rsi, .LABEL__string_17[rip] # "  .globl main"
  call write_339
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $32.1:rax 
  # $33.1: @FILE = call(end_line.342, $32.1)
  .loc 1 80 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 81 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $34.1:rax 
  # $35.1: @String = load_struct_member(function.1, name)
  .loc 1 81 32
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $34.1:rax $35.1:rbx 
  # $36.1: @FILE = call(write.339, $34.1, $35.1)
  .loc 1 81 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $36.1:rax 
  # $37.1: @FILE = call(write.341, $36.1, ':')
  .loc 1 81 9
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $37.1:rax 
  # $38.1: @FILE = call(end_line.342, $37.1)
  .loc 1 81 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # jump(block.3)
.LABEL__generate_function_3__3:
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 85 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $39.1:rax 
  # $40.1: @FILE = call(write.339, $39.1, "  push rbp")
  .loc 1 85 5
  mov rdi, rax
  lea rsi, .LABEL__string_18[rip] # "  push rbp"
  call write_339
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $40.1:rax 
  # $41.1: @FILE = call(end_line.342, $40.1)
  .loc 1 85 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $40.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $42.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 86 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $42.1:rax 
  # $43.1: @FILE = call(write.339, $42.1, "  mov rbp, rsp")
  .loc 1 86 5
  mov rdi, rax
  lea rsi, .LABEL__string_19[rip] # "  mov rbp, rsp"
  call write_339
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $43.1:rax 
  # $44.1: @FILE = call(end_line.342, $43.1)
  .loc 1 86 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 87 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $45.1:rax 
  # $46.1: @FILE = call(write.339, $45.1, "  movsx rax, WORD PTR ")
  .loc 1 87 5
  mov rdi, rax
  lea rsi, .LABEL__string_20[rip] # "  movsx rax, WORD PTR "
  call write_339
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $46.1:rax 
  # $47.1: @String = load_struct_member(function.1, name)
  .loc 1 87 60
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $46.1:rax $47.1:rbx 
  # $48.1: @FILE = call(write.339, $46.1, $47.1)
  .loc 1 87 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $48.1:rax 
  # $49.1: @FILE = call(write.341, $48.1, '_')
  .loc 1 87 5
  mov rdi, rax
  mov sil, 95
  call write_341
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $49.1:rax 
  # $50.1: Int = load_struct_member(function.1, id)
  .loc 1 87 92
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $49.1:rax $50.1:rbx 
  # $51.1: @FILE = call(write.338, $49.1, $50.1)
  .loc 1 87 5
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $51.1:rax 
  # $52.1: @FILE = call(write.339, $51.1, "__stack_frame_size")
  .loc 1 87 5
  mov rdi, rax
  lea rsi, .LABEL__string_21[rip] # "__stack_frame_size"
  call write_339
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $52.1:rax 
  # $53.1: @FILE = call(write.339, $52.1, "[rip]")
  .loc 1 87 5
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "[rip]"
  call write_339
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $53.1:rax 
  # $54.1: @FILE = call(end_line.342, $53.1)
  .loc 1 87 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 88 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $55.1:rax 
  # $56.1: @FILE = call(write.339, $55.1, "  sub rsp, rax")
  .loc 1 88 5
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "  sub rsp, rax"
  call write_339
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $56.1:rax 
  # $57.1: @FILE = call(end_line.342, $56.1)
  .loc 1 88 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # $58.1: @List = load_struct_member(function.1, blocks)
  .loc 1 90 15
  mov rax, [rbp-16]
  add rax, 49
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $58.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator.319, $58.1)
  .loc 1 90 15
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__generate_function_3__5:
  # $60.1: Boolean = call(has_next.322, blocks.1)
  .loc 1 91 12
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $60.1:rax 
  # jump($60.1, block.6, block.7)
  test al, al
  jz .LABEL__generate_function_3__7
.LABEL__generate_function_3__6:
  # block.1: @IR_Block = call(next.323, blocks.1)
  .loc 1 92 18
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 93 30
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:rbx 
  # jump(block.8)
  mov [rbp-32], rbx
.LABEL__generate_function_3__8:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # $64.1: Boolean = block_instruction.2 != null
  .loc 1 94 16
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $64.1:rax 
  # jump($64.1, block.9, block.5)
  test al, al
  jz .LABEL__generate_function_3__5
.LABEL__generate_function_3__9:
  # $65.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 95 17
  mov rax, [rbp-32]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $65.1:rax 
  # $66.1: Boolean = $65.1 != null
  .loc 1 95 17
  cmp rax, 0
  setne bl
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $66.1:rbx 
  # jump($66.1, block.11, block.12)
  test bl, bl
  jz .LABEL__generate_function_3__12
.LABEL__generate_function_3__11:
  # call(create_mc_value.35, self.1, block_instruction.2)
  .loc 1 96 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  call create_mc_value_35
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # jump(block.12)
.LABEL__generate_function_3__12:
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 98 33
  mov rax, [rbp-32]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.6:rax[rbp-32] 
  # jump(block.8)
  mov [rbp-32], rax
  jmp .LABEL__generate_function_3__8
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.6:[rbp-32] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
.LABEL__generate_function_3__7:
  # $68.1: @List = load_struct_member(function.1, blocks)
  .loc 1 102 25
  mov rax, [rbp-16]
  add rax, 49
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $68.1:rax 
  # $70.1: @IR_Block = call(first.317, $68.1)
  .loc 1 102 25
  mov rdi, rax
  call first_317
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $70.1:rax 
  # call(generate_block.6, self.1, $70.1)
  .loc 1 102 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_6
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # call(output_unreached_ir_instructions.5, self.1)
  .loc 1 104 5
  mov rdi, [rbp-8]
  call output_unreached_ir_instructions_5
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $71.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 106 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $71.1:rax 
  # $72.1: @FILE = call(write_function_end_label.4, $71.1, function.1)
  .loc 1 106 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_function_end_label_4
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $72.1:rax 
  # $73.1: @FILE = call(write.339, $72.1, ":")
  .loc 1 106 5
  mov rdi, rax
  lea rsi, .LABEL__string_24[rip] # ":"
  call write_339
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $73.1:rax 
  # $74.1: @FILE = call(end_line.342, $73.1)
  .loc 1 106 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $73.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $75.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 107 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $75.1:rax 
  # $76.1: @FILE = call(write.339, $75.1, "  mov rsp, rbp")
  .loc 1 107 5
  mov rdi, rax
  lea rsi, .LABEL__string_25[rip] # "  mov rsp, rbp"
  call write_339
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $76.1:rax 
  # $77.1: @FILE = call(end_line.342, $76.1)
  .loc 1 107 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $76.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $78.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 108 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $78.1:rax 
  # $79.1: @FILE = call(write.339, $78.1, "  pop rbp")
  .loc 1 108 5
  mov rdi, rax
  lea rsi, .LABEL__string_26[rip] # "  pop rbp"
  call write_339
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $79.1:rax 
  # $80.1: @FILE = call(end_line.342, $79.1)
  .loc 1 108 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $79.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # $81.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 109 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $81.1:rax 
  # $82.1: @FILE = call(write.339, $81.1, "  ret")
  .loc 1 109 5
  mov rdi, rax
  lea rsi, .LABEL__string_27[rip] # "  ret"
  call write_339
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $82.1:rax 
  # $83.1: @FILE = call(end_line.342, $82.1)
  .loc 1 109 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] $83.1:rax 
  # $84.1: @FILE = call(end_line.342, $83.1)
  .loc 1 109 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $83.1
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # stack_frame_size.1: Int = load_struct_member(self.1, stack_frame_size)
  .loc 1 111 25
  mov rax, [rbp-8]
  add rax, 153
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:rax 
  # $86.1: Int = stack_frame_size.1 // 16
  .loc 1 112 9
  mov [rbp-32], rax
  mov rax, [rbp-32]
  cqto
  mov rbx, 16
  idiv rbx
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] $86.1:rdx 
  # $87.1: Boolean = $86.1 != 0
  .loc 1 112 9
  cmp rdx, 0
  setne al
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] $87.1:rax 
  # jump($87.1, block.13, block.14)
  test al, al
  jz .LABEL__generate_function_3__14
.LABEL__generate_function_3__13:
  # $88.1: Int = stack_frame_size.1 + 16
  .loc 1 113 28
  mov rax, [rbp-32]
  add rax, 16
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] $88.1:rax 
  # $89.1: Int = stack_frame_size.1 // 16
  .loc 1 113 52
  mov [rbp-40], rax
  mov rax, [rbp-32]
  cqto
  mov rbx, 16
  idiv rbx
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] $88.1:[rbp-40] $89.1:rdx 
  # stack_frame_size.3: Int = $88.1 - $89.1
  .loc 1 113 28
  mov rax, [rbp-40]
  sub rax, rdx
  # [discarded value]: $88.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:rax[rbp-32] 
  # jump(block.14)
  mov [rbp-32], rax
.LABEL__generate_function_3__14:
  # stack_frame_size.4: Int = phi(stack_frame_size.1, stack_frame_size.3)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] 
  # $91.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 115 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $91.1:rax 
  # $92.1: @String = load_struct_member(function.1, name)
  .loc 1 115 28
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $91.1:rax $92.1:rbx 
  # $93.1: @FILE = call(write.339, $91.1, $92.1)
  .loc 1 115 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $91.1
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $93.1:rax 
  # $94.1: @FILE = call(write.341, $93.1, '_')
  .loc 1 115 5
  mov rdi, rax
  mov sil, 95
  call write_341
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $94.1:rax 
  # $95.1: Int = load_struct_member(function.1, id)
  .loc 1 115 60
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $94.1:rax $95.1:rbx 
  # $96.1: @FILE = call(write.338, $94.1, $95.1)
  .loc 1 115 5
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $94.1
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $96.1:rax 
  # $97.1: @FILE = call(write.339, $96.1, "__stack_frame_size")
  .loc 1 115 5
  mov rdi, rax
  lea rsi, .LABEL__string_21[rip] # "__stack_frame_size"
  call write_339
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $97.1:rax 
  # $98.1: @FILE = call(write.339, $97.1, ": .word ")
  .loc 1 115 5
  mov rdi, rax
  lea rsi, .LABEL__string_28[rip] # ": .word "
  call write_339
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] stack_frame_size.4:[rbp-32] $98.1:rax 
  # $99.1: @FILE = call(write.338, $98.1, stack_frame_size.4)
  .loc 1 115 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_338
  # [discarded value]: stack_frame_size.4
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] $99.1:rax 
  # $100.1: @FILE = call(end_line.342, $99.1)
  .loc 1 115 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $99.1
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # call(reset.33, self.1)
  .loc 1 117 5
  mov rdi, [rbp-8]
  call reset_33
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # return()
  jmp .LABEL__generate_function_3__end
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] stack_frame_size.3:[rbp-32] 
  # [discarded value]: stack_frame_size.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] stack_frame_size.1:[rbp-32] 
  # [discarded value]: stack_frame_size.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] blocks.1:[rbp-24] 
  # [discarded value]: blocks.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
.LABEL__generate_function_3__4:
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 83 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $23.1:rax 
  # $24.1: @String = load_struct_member(function.1, name)
  .loc 1 83 32
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $23.1:rax $24.1:rbx 
  # $25.1: @FILE = call(write.339, $23.1, $24.1)
  .loc 1 83 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $25.1:rax 
  # $26.1: @FILE = call(write.341, $25.1, '_')
  .loc 1 83 9
  mov rdi, rax
  mov sil, 95
  call write_341
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $26.1:rax 
  # $27.1: Int = load_struct_member(function.1, id)
  .loc 1 83 64
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $26.1:rax $27.1:rbx 
  # $28.1: @FILE = call(write.338, $26.1, $27.1)
  .loc 1 83 9
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $28.1:rax 
  # $29.1: @FILE = call(write.341, $28.1, ':')
  .loc 1 83 9
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $29.1:rax 
  # $30.1: @FILE = call(end_line.342, $29.1)
  .loc 1 83 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # jump(block.3)
  jmp .LABEL__generate_function_3__3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__generate_function_3__end:
  mov rsp, rbp
  pop rbp
  ret

generate_function_3__stack_frame_size: .word 48

  .loc 1 120 1
  .text
write_function_end_label_4:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_end_label_4__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_end_label_4__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  # $1.1: @FILE = call(write.339, file.1, ".LABEL__")
  .loc 1 121 12
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_29[rip] # ".LABEL__"
  call write_339
  # [discarded value]: file.1
  # [live values]: function.1:[rbp-8] $1.1:rax 
  # $2.1: @String = load_struct_member(function.1, name)
  .loc 1 121 41
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] $1.1:rax $2.1:rbx 
  # $3.1: @FILE = call(write.339, $1.1, $2.1)
  .loc 1 121 12
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] $3.1:rax 
  # $4.1: @FILE = call(write.341, $3.1, '_')
  .loc 1 121 12
  mov rdi, rax
  mov sil, 95
  call write_341
  # [discarded value]: $3.1
  # [live values]: function.1:[rbp-8] $4.1:rax 
  # $5.1: Int = load_struct_member(function.1, id)
  .loc 1 121 73
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: function.1
  # [live values]: $4.1:rax $5.1:rbx 
  # $6.1: @FILE = call(write.338, $4.1, $5.1)
  .loc 1 121 12
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  # $7.1: @FILE = call(write.339, $6.1, "__")
  .loc 1 121 12
  mov rdi, rax
  lea rsi, .LABEL__string_30[rip] # "__"
  call write_339
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  # $8.1: @FILE = call(write.339, $7.1, "end")
  .loc 1 121 12
  mov rdi, rax
  lea rsi, .LABEL__string_31[rip] # "end"
  call write_339
  # [discarded value]: $7.1
  # [live values]: $8.1:rax 
  # return($8.1)
  .loc 1 121 5
  jmp .LABEL__write_function_end_label_4__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__write_function_end_label_4__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_end_label_4__stack_frame_size: .word 16

  .loc 1 124 1
  .text
output_unreached_ir_instructions_5:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_unreached_ir_instructions_5__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_unreached_ir_instructions_5__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 1 125 9
  mov rax, rdi
  add rax, 16
  mov al, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == false
  .loc 1 125 9
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__output_unreached_ir_instructions_5__3
.LABEL__output_unreached_ir_instructions_5__2:
  # return()
  .loc 1 126 9
  jmp .LABEL__output_unreached_ir_instructions_5__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__output_unreached_ir_instructions_5__3:
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 128 17
  mov rax, [rbp-8]
  add rax, 137
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:rax 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__output_unreached_ir_instructions_5__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # $4.1: Boolean = mc_value.2 != null
  .loc 1 129 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $4.1:rax 
  # jump($4.1, block.6, block.7)
  test al, al
  jz .LABEL__output_unreached_ir_instructions_5__7
.LABEL__output_unreached_ir_instructions_5__6:
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 130 32
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $5.1:rax 
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  .loc 1 130 32
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $6.1:rbx 
  # ir_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  .loc 1 130 32
  mov rax, rbx
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:rax 
  # jump(block.8)
  mov [rbp-24], rax
.LABEL__output_unreached_ir_instructions_5__8:
  # ir_instruction_item.2: @List_Item = phi(ir_instruction_item.1, ir_instruction_item.5)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
  # $8.1: Boolean = ir_instruction_item.2 != null
  .loc 1 131 16
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] $8.1:rax 
  # jump($8.1, block.9, block.10)
  test al, al
  jz .LABEL__output_unreached_ir_instructions_5__10
.LABEL__output_unreached_ir_instructions_5__9:
  # ir_instruction.1: @IR_Instruction = load_struct_member(ir_instruction_item.2, data)
  .loc 1 132 31
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:rax 
  # $11.1: Boolean = load_struct_member(ir_instruction.1, is_generated)
  .loc 1 133 17
  mov rbx, rax
  add rbx, 56
  mov bl, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:rax $11.1:rbx 
  # $12.1: Boolean = $11.1 == false
  .loc 1 133 17
  cmp bl, 0
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:rax $12.1:r15 
  # jump($12.1, block.11, block.12)
  test r15b, r15b
  mov [rbp-32], rax
  jz .LABEL__output_unreached_ir_instructions_5__12
.LABEL__output_unreached_ir_instructions_5__11:
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 134 37
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(dump.187, ir_instruction.1, $13.1, "  # [unreachable instruction]: ")
  .loc 1 134 17
  mov rdi, [rbp-32]
  mov rsi, rax
  lea rdx, .LABEL__string_32[rip] # "  # [unreachable instruction]: "
  call dump_187
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # jump(block.12)
.LABEL__output_unreached_ir_instructions_5__12:
  # ir_instruction_item.5: @List_Item = load_struct_member(ir_instruction_item.2, next_item)
  .loc 1 136 35
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] ir_instruction_item.5:rax[rbp-24] 
  # jump(block.8)
  mov [rbp-24], rax
  jmp .LABEL__output_unreached_ir_instructions_5__8
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] ir_instruction_item.5:[rbp-24] 
  # [discarded value]: ir_instruction_item.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] ir_instruction.1:[rbp-32] 
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
.LABEL__output_unreached_ir_instructions_5__10:
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 138 20
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] mc_value.5:rax[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
  jmp .LABEL__output_unreached_ir_instructions_5__5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] mc_value.5:[rbp-16] 
  # [discarded value]: mc_value.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] ir_instruction_item.2:[rbp-24] 
  # [discarded value]: ir_instruction_item.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] ir_instruction_item.1:[rbp-24] 
  # [discarded value]: ir_instruction_item.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
.LABEL__output_unreached_ir_instructions_5__7:
  # return()
  jmp .LABEL__output_unreached_ir_instructions_5__end
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_unreached_ir_instructions_5__end:
  mov rsp, rbp
  pop rbp
  ret

output_unreached_ir_instructions_5__stack_frame_size: .word 32

  .loc 1 142 1
  .text
generate_block_6:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_block_6__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_block_6__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # store_struct_member(block.1, is_being_generated, true)
  .loc 1 143 5
  mov rax, rsi
  add rax, 48
  mov BYTE PTR [rax], 1
  # [live values]: self.1:rdi block.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 144 5
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi block.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write_block_label.7, $1.1, block.1)
  .loc 1 144 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call write_block_label_7
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write.341, $2.1, ':')
  .loc 1 144 5
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(end_line.342, $3.1)
  .loc 1 144 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 145 26
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:rax 
  # jump(block.2)
  mov [rbp-24], rax
.LABEL__generate_block_6__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.9)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # $6.1: Boolean = block_instruction.2 != null
  .loc 1 146 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:rax 
  # jump($6.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_block_6__4
.LABEL__generate_block_6__3:
  # $7.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 1 147 13
  mov rax, [rbp-8]
  add rax, 16
  mov al, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_block_6__6
.LABEL__generate_block_6__5:
  # $8.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 148 36
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $8.1:rax 
  # $9.1: @FILE = call(dump.187, block_instruction.2, $8.1, "  # ")
  .loc 1 148 13
  mov rdi, [rbp-24]
  mov rsi, rax
  lea rdx, .LABEL__string_33[rip] # "  # "
  call dump_187
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # jump(block.6)
.LABEL__generate_block_6__6:
  # call(generate_instruction.8, self.1, block_instruction.2)
  .loc 1 150 9
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call generate_instruction_8
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # IR_Load_Variable_Instruction.2: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] IR_Load_Variable_Instruction.2:rax 
  # $10.1: Boolean = call(is.325, block_instruction.2, IR_Load_Variable_Instruction.2)
  .loc 1 151 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Variable_Instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $10.1:rax 
  # $12.1: Boolean = $10.1 == false
  .loc 1 151 13
  cmp al, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:rbx 
  # jump($12.1, block.9, block.10)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__generate_block_6__10
.LABEL__generate_block_6__9:
  # $13.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 151 76
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $13.1:rax 
  # $12.2: Boolean = $13.1 != null
  .loc 1 151 76
  cmp rax, 0
  setne bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:rbx[rbp-25] 
  # jump(block.10)
  mov [rbp-25], bl
.LABEL__generate_block_6__10:
  # $15.1: Boolean = phi($12.1, $12.2)
  .loc 1 151 13
  mov al, [rbp-25]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] $15.1:rax 
  # jump($15.1, block.7, block.8)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_block_6__8
.LABEL__generate_block_6__7:
  # $16.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 151 118
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $16.1:rax $12.2:[rbp-25] $15.1:[rbp-26] 
  # $17.1: @IR_Variable = load_struct_member($16.1, variable)
  .loc 1 151 118
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $17.1:rbx $12.2:[rbp-25] $15.1:[rbp-26] 
  # IR_Global_Variable.2: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $17.1:rbx IR_Global_Variable.2:rax $12.2:[rbp-25] $15.1:[rbp-26] 
  # $15.2: Boolean = call(is.325, $17.1, IR_Global_Variable.2)
  .loc 1 151 118
  mov rdi, rbx
  mov rsi, rax
  call is_325
  # [discarded value]: $17.1
  # [discarded value]: IR_Global_Variable.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:rax[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # jump(block.8)
  mov [rbp-26], al
.LABEL__generate_block_6__8:
  # $15.3: Boolean = phi($15.1, $15.2)
  .loc 1 151 13
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $15.3:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # jump($15.3, block.11, block.12)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__generate_block_6__12
.LABEL__generate_block_6__11:
  # $19.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 152 55
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $15.3
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] $19.1:rax 
  # $20.1: @MC_Value = call(get_value.38, self.1, $19.1)
  .loc 1 152 40
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_38
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] $20.1:rax 
  # call(spill_global_variable.40, self.1, $20.1)
  .loc 1 152 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call spill_global_variable_40
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # jump(block.12)
.LABEL__generate_block_6__12:
  # $21.1: Int = call(discard_used_values.43, self.1)
  .loc 1 154 9
  mov rdi, [rbp-8]
  call discard_used_values_43
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # call(output_live_values.44, self.1)
  .loc 1 155 9
  mov rdi, [rbp-8]
  call output_live_values_44
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # call(output_used_registers.45, self.1)
  .loc 1 156 9
  mov rdi, [rbp-8]
  call output_used_registers_45
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # block_instruction.9: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 157 29
  mov rax, [rbp-24]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] block_instruction.9:rax[rbp-24] 
  # jump(block.2)
  mov [rbp-24], rax
  jmp .LABEL__generate_block_6__2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] block_instruction.9:[rbp-24] 
  # [discarded value]: block_instruction.9
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $15.2:[rbp-26] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [discarded value]: $15.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] $15.1:[rbp-26] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] $12.2:[rbp-25] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $12.1:[rbp-25] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
.LABEL__generate_block_6__4:
  # store_struct_member(block.1, is_generated, true)
  .loc 1 159 5
  mov rax, [rbp-16]
  add rax, 49
  mov BYTE PTR [rax], 1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # $23.1: Int = call(discard_used_values.43, self.1)
  .loc 1 160 9
  mov rdi, [rbp-8]
  call discard_used_values_43
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $23.1:rax 
  # $24.1: Boolean = $23.1 > 0
  .loc 1 160 9
  cmp rax, 0
  setg bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $24.1:rbx 
  # jump($24.1, block.13, block.14)
  test bl, bl
  jz .LABEL__generate_block_6__14
.LABEL__generate_block_6__13:
  # call(output_live_values.44, self.1)
  .loc 1 161 9
  mov rdi, [rbp-8]
  call output_live_values_44
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # call(output_used_registers.45, self.1)
  .loc 1 162 9
  mov rdi, [rbp-8]
  call output_used_registers_45
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # jump(block.14)
.LABEL__generate_block_6__14:
  # return()
  jmp .LABEL__generate_block_6__end
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: 
.LABEL__generate_block_6__end:
  mov rsp, rbp
  pop rbp
  ret

generate_block_6__stack_frame_size: .word 32

  .loc 1 166 1
  .text
write_block_label_7:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_block_label_7__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_block_label_7__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: file.1:rdi block.1:rsi 
  # $1.1: @FILE = call(write.339, file.1, ".LABEL__")
  .loc 1 167 12
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_29[rip] # ".LABEL__"
  call write_339
  # [discarded value]: file.1
  # [live values]: block.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Function = load_struct_member(block.1, function)
  .loc 1 167 41
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: block.1:[rbp-8] $1.1:rax $2.1:rbx 
  # $3.1: @String = load_struct_member($2.1, name)
  .loc 1 167 41
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: block.1:[rbp-8] $1.1:rax $3.1:r15 
  # $4.1: @FILE = call(write.339, $1.1, $3.1)
  .loc 1 167 12
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: block.1:[rbp-8] $4.1:rax 
  # $5.1: @FILE = call(write.341, $4.1, '_')
  .loc 1 167 12
  mov rdi, rax
  mov sil, 95
  call write_341
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] $5.1:rax 
  # $6.1: @IR_Function = load_struct_member(block.1, function)
  .loc 1 167 79
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: block.1:[rbp-8] $5.1:rax $6.1:rbx 
  # $7.1: Int = load_struct_member($6.1, id)
  .loc 1 167 79
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] $5.1:rax $7.1:r15 
  # $8.1: @FILE = call(write.338, $5.1, $7.1)
  .loc 1 167 12
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write.339, $8.1, "__")
  .loc 1 167 12
  mov rdi, rax
  lea rsi, .LABEL__string_30[rip] # "__"
  call write_339
  # [discarded value]: $8.1
  # [live values]: block.1:[rbp-8] $9.1:rax 
  # $10.1: Int = load_struct_member(block.1, id)
  .loc 1 167 116
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: block.1
  # [live values]: $9.1:rax $10.1:rbx 
  # $11.1: @FILE = call(write.338, $9.1, $10.1)
  .loc 1 167 12
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # return($11.1)
  .loc 1 167 5
  jmp .LABEL__write_block_label_7__end
  # [discarded value]: $11.1
  # [live values]: 
.LABEL__write_block_label_7__end:
  mov rsp, rbp
  pop rbp
  ret

write_block_label_7__stack_frame_size: .word 16

  .loc 1 170 1
  .text
generate_instruction_8:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_instruction_8__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_instruction_8__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, is_generated, true)
  .loc 1 171 5
  mov rax, rsi
  add rax, 56
  mov BYTE PTR [rax], 1
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 1 172 9
  mov rax, rsi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 172 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__generate_instruction_8__3
.LABEL__generate_instruction_8__2:
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 173 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $3.1:rax 
  # $4.1: @FILE = call(write.339, $3.1, "  .loc ")
  .loc 1 173 9
  mov rdi, rax
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_339
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # $5.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 1 173 49
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax $5.1:rbx 
  # $6.1: @Source = load_struct_member($5.1, source)
  .loc 1 173 49
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax $6.1:r15 
  # $7.1: Int = load_struct_member($6.1, id)
  .loc 1 173 49
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.338, $4.1, $7.1)
  .loc 1 173 9
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write.341, $8.1, ' ')
  .loc 1 173 9
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 1 173 98
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax $10.1:rbx 
  # $11.1: Int = load_struct_member($10.1, line)
  .loc 1 173 98
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax $11.1:r15 
  # $12.1: @FILE = call(write.338, $9.1, $11.1)
  .loc 1 173 9
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rax 
  # $13.1: @FILE = call(write.341, $12.1, ' ')
  .loc 1 173 9
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member(instruction.1, location)
  .loc 1 173 142
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax $14.1:rbx 
  # $15.1: Int = load_struct_member($14.1, column)
  .loc 1 173 142
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax $15.1:r15 
  # $16.1: @FILE = call(write.338, $13.1, $15.1)
  .loc 1 173 9
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 173 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_instruction_8__3:
  # IR_Add_Instruction.2: @Object_Type = load_variable(IR_Add_Instruction)
  lea rax, IR_Add_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Add_Instruction.2:rax 
  # $18.1: Boolean = call(is.325, instruction.1, IR_Add_Instruction.2)
  .loc 1 175 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Add_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $18.1:rax 
  # jump($18.1, block.4, block.6)
  test al, al
  jz .LABEL__generate_instruction_8__6
.LABEL__generate_instruction_8__4:
  # $59.1: @IR_Add_Instruction = instruction.1
  .loc 1 176 39
  mov rax, [rbp-8]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $59.1:rax 
  # call(generate_add_instruction.9, self.1, $59.1)
  .loc 1 176 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_add_instruction_9
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
.LABEL__generate_instruction_8__5:
  # return()
  jmp .LABEL__generate_instruction_8__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__6:
  # IR_Call_Instruction.2: @Object_Type = load_variable(IR_Call_Instruction)
  lea rax, IR_Call_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Call_Instruction.2:rax 
  # $19.1: Boolean = call(is.325, instruction.1, IR_Call_Instruction.2)
  .loc 1 177 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Call_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $19.1:rax 
  # jump($19.1, block.7, block.9)
  test al, al
  jz .LABEL__generate_instruction_8__9
.LABEL__generate_instruction_8__7:
  # $58.1: @IR_Call_Instruction = instruction.1
  .loc 1 178 40
  mov rax, [rbp-8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $58.1:rax 
  # call(generate_call_instruction.10, self.1, $58.1)
  .loc 1 178 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_call_instruction_10
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__9:
  # IR_Cast_Instruction.2: @Object_Type = load_variable(IR_Cast_Instruction)
  lea rax, IR_Cast_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Cast_Instruction.2:rax 
  # $20.1: Boolean = call(is.325, instruction.1, IR_Cast_Instruction.2)
  .loc 1 179 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Cast_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $20.1:rax 
  # jump($20.1, block.10, block.12)
  test al, al
  jz .LABEL__generate_instruction_8__12
.LABEL__generate_instruction_8__10:
  # $57.1: @IR_Cast_Instruction = instruction.1
  .loc 1 180 40
  mov rax, [rbp-8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $57.1:rax 
  # call(generate_cast_instruction.11, self.1, $57.1)
  .loc 1 180 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_cast_instruction_11
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__12:
  # IR_Conditional_Jump_Instruction.2: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea rax, IR_Conditional_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Conditional_Jump_Instruction.2:rax 
  # $21.1: Boolean = call(is.325, instruction.1, IR_Conditional_Jump_Instruction.2)
  .loc 1 181 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Conditional_Jump_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_instruction_8__15
.LABEL__generate_instruction_8__13:
  # $56.1: @IR_Conditional_Jump_Instruction = instruction.1
  .loc 1 182 52
  mov rax, [rbp-8]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $56.1:rax 
  # call(generate_conditional_jump_instruction.12, self.1, $56.1)
  .loc 1 182 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_conditional_jump_instruction_12
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__15:
  # IR_Comparison_Instruction.2: @Object_Type = load_variable(IR_Comparison_Instruction)
  lea rax, IR_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Comparison_Instruction.2:rax 
  # $22.1: Boolean = call(is.325, instruction.1, IR_Comparison_Instruction.2)
  .loc 1 183 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Comparison_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:rax 
  # jump($22.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_instruction_8__18
.LABEL__generate_instruction_8__16:
  # $55.1: @IR_Comparison_Instruction = instruction.1
  .loc 1 184 46
  mov rax, [rbp-8]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $55.1:rax 
  # call(generate_comparison_instruction.13, self.1, $55.1)
  .loc 1 184 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_comparison_instruction_13
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__18:
  # IR_Direct_Jump_Instruction.2: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rax, IR_Direct_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Direct_Jump_Instruction.2:rax 
  # $23.1: Boolean = call(is.325, instruction.1, IR_Direct_Jump_Instruction.2)
  .loc 1 185 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Direct_Jump_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $23.1:rax 
  # jump($23.1, block.19, block.21)
  test al, al
  jz .LABEL__generate_instruction_8__21
.LABEL__generate_instruction_8__19:
  # $54.1: @IR_Direct_Jump_Instruction = instruction.1
  .loc 1 186 47
  mov rax, [rbp-8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $54.1:rax 
  # call(generate_direct_jump_instruction.14, self.1, $54.1)
  .loc 1 186 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_direct_jump_instruction_14
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__21:
  # IR_Divide_Instruction.2: @Object_Type = load_variable(IR_Divide_Instruction)
  lea rax, IR_Divide_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Divide_Instruction.2:rax 
  # $24.1: Boolean = call(is.325, instruction.1, IR_Divide_Instruction.2)
  .loc 1 187 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Divide_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $24.1:rax 
  # jump($24.1, block.22, block.24)
  test al, al
  jz .LABEL__generate_instruction_8__24
.LABEL__generate_instruction_8__22:
  # $53.1: @IR_Divide_Instruction = instruction.1
  .loc 1 188 42
  mov rax, [rbp-8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $53.1:rax 
  # call(generate_divide_instruction.15, self.1, $53.1)
  .loc 1 188 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_divide_instruction_15
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__24:
  # IR_Load_Array_Item_Instruction.2: @Object_Type = load_variable(IR_Load_Array_Item_Instruction)
  lea rax, IR_Load_Array_Item_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Array_Item_Instruction.2:rax 
  # $25.1: Boolean = call(is.325, instruction.1, IR_Load_Array_Item_Instruction.2)
  .loc 1 189 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Array_Item_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $25.1:rax 
  # jump($25.1, block.25, block.27)
  test al, al
  jz .LABEL__generate_instruction_8__27
.LABEL__generate_instruction_8__25:
  # $52.1: @IR_Load_Array_Item_Instruction = instruction.1
  .loc 1 190 51
  mov rax, [rbp-8]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $52.1:rax 
  # call(generate_load_array_item_instruction.16, self.1, $52.1)
  .loc 1 190 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_array_item_instruction_16
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__27:
  # IR_Load_Struct_Member_Instruction.2: @Object_Type = load_variable(IR_Load_Struct_Member_Instruction)
  lea rax, IR_Load_Struct_Member_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Struct_Member_Instruction.2:rax 
  # $26.1: Boolean = call(is.325, instruction.1, IR_Load_Struct_Member_Instruction.2)
  .loc 1 191 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Struct_Member_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $26.1:rax 
  # jump($26.1, block.28, block.30)
  test al, al
  jz .LABEL__generate_instruction_8__30
.LABEL__generate_instruction_8__28:
  # $51.1: @IR_Load_Struct_Member_Instruction = instruction.1
  .loc 1 192 54
  mov rax, [rbp-8]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $51.1:rax 
  # call(generate_load_struct_member_instruction.18, self.1, $51.1)
  .loc 1 192 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_struct_member_instruction_18
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__30:
  # IR_Load_Variable_Instruction.3: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Load_Variable_Instruction.3:rax 
  # $27.1: Boolean = call(is.325, instruction.1, IR_Load_Variable_Instruction.3)
  .loc 1 193 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Variable_Instruction.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $27.1:rax 
  # jump($27.1, block.31, block.33)
  test al, al
  jz .LABEL__generate_instruction_8__33
.LABEL__generate_instruction_8__31:
  # $50.1: @IR_Load_Variable_Instruction = instruction.1
  .loc 1 194 49
  mov rax, [rbp-8]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $50.1:rax 
  # call(generate_load_variable_instruction.17, self.1, $50.1)
  .loc 1 194 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_load_variable_instruction_17
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__33:
  # IR_Modulo_Instruction.2: @Object_Type = load_variable(IR_Modulo_Instruction)
  lea rax, IR_Modulo_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Modulo_Instruction.2:rax 
  # $28.1: Boolean = call(is.325, instruction.1, IR_Modulo_Instruction.2)
  .loc 1 195 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Modulo_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $28.1:rax 
  # jump($28.1, block.34, block.36)
  test al, al
  jz .LABEL__generate_instruction_8__36
.LABEL__generate_instruction_8__34:
  # $49.1: @IR_Modulo_Instruction = instruction.1
  .loc 1 196 42
  mov rax, [rbp-8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $49.1:rax 
  # call(generate_modulo_instruction.19, self.1, $49.1)
  .loc 1 196 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_modulo_instruction_19
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__36:
  # IR_Multiply_Instruction.2: @Object_Type = load_variable(IR_Multiply_Instruction)
  lea rax, IR_Multiply_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Multiply_Instruction.2:rax 
  # $29.1: Boolean = call(is.325, instruction.1, IR_Multiply_Instruction.2)
  .loc 1 197 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Multiply_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $29.1:rax 
  # jump($29.1, block.37, block.39)
  test al, al
  jz .LABEL__generate_instruction_8__39
.LABEL__generate_instruction_8__37:
  # $48.1: @IR_Multiply_Instruction = instruction.1
  .loc 1 198 44
  mov rax, [rbp-8]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $48.1:rax 
  # call(generate_multiply_instruction.20, self.1, $48.1)
  .loc 1 198 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_multiply_instruction_20
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__39:
  # IR_New_Instruction.2: @Object_Type = load_variable(IR_New_Instruction)
  lea rax, IR_New_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_New_Instruction.2:rax 
  # $30.1: Boolean = call(is.325, instruction.1, IR_New_Instruction.2)
  .loc 1 199 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_New_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $30.1:rax 
  # jump($30.1, block.40, block.42)
  test al, al
  jz .LABEL__generate_instruction_8__42
.LABEL__generate_instruction_8__40:
  # $47.1: @IR_New_Instruction = instruction.1
  .loc 1 200 39
  mov rax, [rbp-8]
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $47.1:rax 
  # call(generate_new_instruction.21, self.1, $47.1)
  .loc 1 200 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_new_instruction_21
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__42:
  # IR_Phi_Instruction.2: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Phi_Instruction.2:rax 
  # $31.1: Boolean = call(is.325, instruction.1, IR_Phi_Instruction.2)
  .loc 1 201 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Phi_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.43, block.45)
  test al, al
  jz .LABEL__generate_instruction_8__45
.LABEL__generate_instruction_8__43:
  # $46.1: @IR_Phi_Instruction = instruction.1
  .loc 1 202 39
  mov rax, [rbp-8]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $46.1:rax 
  # call(generate_phi_instruction.22, self.1, $46.1)
  .loc 1 202 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_phi_instruction_22
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__45:
  # IR_Return_Instruction.2: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Return_Instruction.2:rax 
  # $32.1: Boolean = call(is.325, instruction.1, IR_Return_Instruction.2)
  .loc 1 203 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Return_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $32.1:rax 
  # jump($32.1, block.46, block.48)
  test al, al
  jz .LABEL__generate_instruction_8__48
.LABEL__generate_instruction_8__46:
  # $45.1: @IR_Return_Instruction = instruction.1
  .loc 1 204 42
  mov rax, [rbp-8]
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $45.1:rax 
  # call(generate_return_instruction.23, self.1, $45.1)
  .loc 1 204 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_return_instruction_23
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__48:
  # IR_Set_Instruction.2: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Set_Instruction.2:rax 
  # $33.1: Boolean = call(is.325, instruction.1, IR_Set_Instruction.2)
  .loc 1 205 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Set_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $33.1:rax 
  # jump($33.1, block.49, block.51)
  test al, al
  jz .LABEL__generate_instruction_8__51
.LABEL__generate_instruction_8__49:
  # $44.1: @IR_Set_Instruction = instruction.1
  .loc 1 206 39
  mov rax, [rbp-8]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $44.1:rax 
  # call(generate_set_instruction.24, self.1, $44.1)
  .loc 1 206 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_set_instruction_24
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__51:
  # IR_Store_Array_Item_Instruction.2: @Object_Type = load_variable(IR_Store_Array_Item_Instruction)
  lea rax, IR_Store_Array_Item_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Store_Array_Item_Instruction.2:rax 
  # $34.1: Boolean = call(is.325, instruction.1, IR_Store_Array_Item_Instruction.2)
  .loc 1 207 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Store_Array_Item_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $34.1:rax 
  # jump($34.1, block.52, block.54)
  test al, al
  jz .LABEL__generate_instruction_8__54
.LABEL__generate_instruction_8__52:
  # $43.1: @IR_Store_Array_Item_Instruction = instruction.1
  .loc 1 208 52
  mov rax, [rbp-8]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $43.1:rax 
  # call(generate_store_array_item_instruction.25, self.1, $43.1)
  .loc 1 208 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_store_array_item_instruction_25
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__54:
  # IR_Store_Struct_Member_Instruction.2: @Object_Type = load_variable(IR_Store_Struct_Member_Instruction)
  lea rax, IR_Store_Struct_Member_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Store_Struct_Member_Instruction.2:rax 
  # $35.1: Boolean = call(is.325, instruction.1, IR_Store_Struct_Member_Instruction.2)
  .loc 1 209 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Store_Struct_Member_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $35.1:rax 
  # jump($35.1, block.55, block.57)
  test al, al
  jz .LABEL__generate_instruction_8__57
.LABEL__generate_instruction_8__55:
  # $42.1: @IR_Store_Struct_Member_Instruction = instruction.1
  .loc 1 210 55
  mov rax, [rbp-8]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $42.1:rax 
  # call(generate_store_struct_member_instruction.26, self.1, $42.1)
  .loc 1 210 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_store_struct_member_instruction_26
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__57:
  # IR_Substract_Instruction.2: @Object_Type = load_variable(IR_Substract_Instruction)
  lea rax, IR_Substract_Instruction[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] IR_Substract_Instruction.2:rax 
  # $36.1: Boolean = call(is.325, instruction.1, IR_Substract_Instruction.2)
  .loc 1 211 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Substract_Instruction.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $36.1:rax 
  # jump($36.1, block.58, block.60)
  test al, al
  jz .LABEL__generate_instruction_8__60
.LABEL__generate_instruction_8__58:
  # $41.1: @IR_Substract_Instruction = instruction.1
  .loc 1 212 45
  mov rax, [rbp-8]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $41.1:rax 
  # call(generate_substract_instruction.27, self.1, $41.1)
  .loc 1 212 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_substract_instruction_27
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__generate_instruction_8__5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_instruction_8__60:
  # $37.1: @String = call(clone.329, "Unsupported instruction: ")
  .loc 1 214 20
  lea rdi, .LABEL__string_34[rip] # "Unsupported instruction: "
  call clone_329
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $37.1:rax 
  # $38.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 1 214 62
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $37.1:rax $38.1:rbx 
  # $39.1: @String = load_struct_member($38.1, name)
  .loc 1 214 62
  mov r15, rbx
  add r15, 8
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $37.1:rax $39.1:r15 
  # $40.1: @String = call(append.332, $37.1, $39.1)
  .loc 1 214 20
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $37.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $40.1:rax 
  # call(abort.31, self.1, $40.1)
  .loc 1 214 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_31
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_instruction_8__end:
  mov rsp, rbp
  pop rbp
  ret

generate_instruction_8__stack_frame_size: .word 16

  .loc 1 218 1
  .text
generate_add_instruction_9:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_add_instruction_9__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_add_instruction_9__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Add_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 219 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 220 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_178
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, $2.1)
  .loc 1 220 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 221 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  # $4.1: @MC_Value = call(map_variable_value.37, self.1, $3.1, result_register.1)
  .loc 1 221 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  call map_variable_value_37
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 222 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, "  add ")
  .loc 1 222 5
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 222 44
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.339, $6.1, $7.1)
  .loc 1 222 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write.339, $8.1, ", ")
  .loc 1 222 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 222 100
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_operand.30, $9.1, self.1, $10.1)
  .loc 1 222 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_30
  # [discarded value]: self.1
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # $12.1: @FILE = call(end_line.342, $11.1)
  .loc 1 222 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_add_instruction_9__end
  # [live values]: 
.LABEL__generate_add_instruction_9__end:
  mov rsp, rbp
  pop rbp
  ret

generate_add_instruction_9__stack_frame_size: .word 32

  .loc 1 225 1
  .text
generate_call_instruction_10:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_call_instruction_10__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_call_instruction_10__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 226 9
  mov rax, rsi
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member($1.1, size)
  .loc 1 226 9
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # $3.1: Boolean = $2.1 > 0
  .loc 1 226 9
  cmp rbx, 0
  setg al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__generate_call_instruction_10__3
.LABEL__generate_call_instruction_10__2:
  # $4.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 227 34
  mov rax, [rbp-16]
  add rax, 65
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # $5.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 227 53
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax $5.1:rbx 
  # $7.1: @IR_Value = call(first.317, $5.1)
  .loc 1 227 53
  mov rdi, rbx
  mov [rbp-24], rax
  call first_317
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:[rbp-24] $7.1:rax 
  # call(generate_load_value.28, self.1, $4.1, $7.1)
  .loc 1 227 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $8.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 228 13
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: Int = load_struct_member($8.1, size)
  .loc 1 228 13
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rbx 
  # $10.1: Boolean = $9.1 > 1
  .loc 1 228 13
  cmp rbx, 1
  setg al
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $10.1:rax 
  # jump($10.1, block.4, block.3)
  test al, al
  jz .LABEL__generate_call_instruction_10__3
.LABEL__generate_call_instruction_10__4:
  # $11.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 229 38
  mov rax, [rbp-16]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:rax 
  # $12.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 229 57
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:rax $12.1:rbx 
  # $14.1: @IR_Value = call(get.316, $12.1, 1)
  .loc 1 229 57
  mov rdi, rbx
  mov rsi, 1
  mov [rbp-24], rax
  call get_316
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:[rbp-24] $14.1:rax 
  # call(generate_load_value.28, self.1, $11.1, $14.1)
  .loc 1 229 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $11.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $15.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 230 17
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $15.1:rax 
  # $16.1: Int = load_struct_member($15.1, size)
  .loc 1 230 17
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $16.1:rbx 
  # $17.1: Boolean = $16.1 > 2
  .loc 1 230 17
  cmp rbx, 2
  setg al
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $17.1:rax 
  # jump($17.1, block.6, block.3)
  test al, al
  jz .LABEL__generate_call_instruction_10__3
.LABEL__generate_call_instruction_10__6:
  # $18.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 231 42
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $18.1:rax 
  # $19.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 231 61
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $18.1:rax $19.1:rbx 
  # $21.1: @IR_Value = call(get.316, $19.1, 2)
  .loc 1 231 61
  mov rdi, rbx
  mov rsi, 2
  mov [rbp-24], rax
  call get_316
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $18.1:[rbp-24] $21.1:rax 
  # call(generate_load_value.28, self.1, $18.1, $21.1)
  .loc 1 231 17
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $18.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $22.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 232 21
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:rax 
  # $23.1: Int = load_struct_member($22.1, size)
  .loc 1 232 21
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $23.1:rbx 
  # $24.1: Boolean = $23.1 > 3
  .loc 1 232 21
  cmp rbx, 3
  setg al
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $24.1:rax 
  # jump($24.1, block.8, block.3)
  test al, al
  jz .LABEL__generate_call_instruction_10__3
.LABEL__generate_call_instruction_10__8:
  # $25.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 233 46
  mov rax, [rbp-16]
  add rax, 33
  mov rax, [rax]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $25.1:rax 
  # $26.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 233 65
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $25.1:rax $26.1:rbx 
  # $28.1: @IR_Value = call(get.316, $26.1, 3)
  .loc 1 233 65
  mov rdi, rbx
  mov rsi, 3
  mov [rbp-24], rax
  call get_316
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $25.1:[rbp-24] $28.1:rax 
  # call(generate_load_value.28, self.1, $25.1, $28.1)
  .loc 1 233 21
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $25.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $29.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 234 25
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $29.1:rax 
  # $30.1: Int = load_struct_member($29.1, size)
  .loc 1 234 25
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $30.1:rbx 
  # $31.1: Boolean = $30.1 > 4
  .loc 1 234 25
  cmp rbx, 4
  setg al
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.10, block.3)
  test al, al
  jz .LABEL__generate_call_instruction_10__3
.LABEL__generate_call_instruction_10__10:
  # $32.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 235 50
  mov rax, [rbp-16]
  add rax, 73
  mov rax, [rax]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $32.1:rax 
  # $33.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 235 68
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $32.1:rax $33.1:rbx 
  # $35.1: @IR_Value = call(get.316, $33.1, 4)
  .loc 1 235 68
  mov rdi, rbx
  mov rsi, 4
  mov [rbp-24], rax
  call get_316
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $32.1:[rbp-24] $35.1:rax 
  # call(generate_load_value.28, self.1, $32.1, $35.1)
  .loc 1 235 25
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $32.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $36.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 236 29
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $36.1:rax 
  # $37.1: Int = load_struct_member($36.1, size)
  .loc 1 236 29
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $37.1:rbx 
  # $38.1: Boolean = $37.1 > 5
  .loc 1 236 29
  cmp rbx, 5
  setg al
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $38.1:rax 
  # jump($38.1, block.12, block.3)
  test al, al
  jz .LABEL__generate_call_instruction_10__3
.LABEL__generate_call_instruction_10__12:
  # $39.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 237 54
  mov rax, [rbp-16]
  add rax, 81
  mov rax, [rax]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $39.1:rax 
  # $40.1: @List = load_struct_member(instruction.1, arguments)
  .loc 1 237 72
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $39.1:rax $40.1:rbx 
  # $42.1: @IR_Value = call(get.316, $40.1, 5)
  .loc 1 237 72
  mov rdi, rbx
  mov rsi, 5
  mov [rbp-24], rax
  call get_316
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $39.1:[rbp-24] $42.1:rax 
  # call(generate_load_value.28, self.1, $39.1, $42.1)
  .loc 1 237 29
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $39.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_call_instruction_10__3:
  # call(release_all_registers.41, self.1)
  .loc 1 244 5
  mov rdi, [rbp-16]
  call release_all_registers_41
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $43.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 245 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $43.1:rax 
  # $44.1: @FILE = call(write.339, $43.1, "  call ")
  .loc 1 245 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # "  call "
  call write_339
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $44.1:rax 
  # $45.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 245 45
  mov rbx, [rbp-8]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $44.1:rax $45.1:rbx 
  # $46.1: @String = load_struct_member($45.1, name)
  .loc 1 245 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $44.1:rax $46.1:r15 
  # $47.1: @FILE = call(write.339, $44.1, $46.1)
  .loc 1 245 5
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $44.1
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $48.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 246 9
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $48.1:rax 
  # $49.1: Boolean = load_struct_member($48.1, is_external)
  .loc 1 246 9
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $49.1:rbx 
  # $50.1: Boolean = $49.1 == false
  .loc 1 246 9
  cmp bl, 0
  sete al
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $50.1:rax 
  # jump($50.1, block.14, block.15)
  test al, al
  jz .LABEL__generate_call_instruction_10__15
.LABEL__generate_call_instruction_10__14:
  # $51.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 247 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $51.1:rax 
  # $52.1: @FILE = call(write.341, $51.1, '_')
  .loc 1 247 9
  mov rdi, rax
  mov sil, 95
  call write_341
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $52.1:rax 
  # $53.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 247 43
  mov rbx, [rbp-8]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $52.1:rax $53.1:rbx 
  # $54.1: Int = load_struct_member($53.1, id)
  .loc 1 247 43
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $52.1:rax $54.1:r15 
  # $55.1: @FILE = call(write.338, $52.1, $54.1)
  .loc 1 247 9
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $52.1
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.15)
.LABEL__generate_call_instruction_10__15:
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 249 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $56.1:rax 
  # $57.1: @FILE = call(end_line.342, $56.1)
  .loc 1 249 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $58.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 250 9
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $58.1:rax 
  # $59.1: Boolean = $58.1 != null
  .loc 1 250 9
  cmp rax, 0
  setne bl
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $59.1:rbx 
  # jump($59.1, block.16, block.17)
  test bl, bl
  jz .LABEL__generate_call_instruction_10__17
.LABEL__generate_call_instruction_10__16:
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 251 33
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $60.1:rax 
  # $61.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 251 59
  mov rbx, [rbp-16]
  add rbx, 25
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $60.1:rax $61.1:rbx 
  # $62.1: @MC_Value = call(map_variable_value.37, self.1, $60.1, $61.1)
  .loc 1 251 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.17)
.LABEL__generate_call_instruction_10__17:
  # return()
  jmp .LABEL__generate_call_instruction_10__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_call_instruction_10__end:
  mov rsp, rbp
  pop rbp
  ret

generate_call_instruction_10__stack_frame_size: .word 32

  .loc 1 255 1
  .text
generate_cast_instruction_11:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_cast_instruction_11__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_cast_instruction_11__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Cast_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # ir_value.1: @IR_Value = call(get_value.156, instruction.1)
  .loc 1 256 17
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_156
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 257 24
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call find_unused_register_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, ir_value.1)
  .loc 1 258 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 259 29
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $3.1:rax 
  # $4.1: @MC_Value = call(map_variable_value.37, self.1, $3.1, result_register.1)
  .loc 1 259 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-32]
  call map_variable_value_37
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 260 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $5.1:rax 
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  .loc 1 260 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:rbx 
  # IR_Int_Type.2: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:rbx IR_Int_Type.2:rax 
  # $7.1: Boolean = call(is.325, $6.1, IR_Int_Type.2)
  .loc 1 260 9
  mov rdi, rbx
  mov rsi, rax
  call is_325
  # [discarded value]: $6.1
  # [discarded value]: IR_Int_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:rax 
  # jump($7.1, block.2, block.3)
  test al, al
  jz .LABEL__generate_cast_instruction_11__3
.LABEL__generate_cast_instruction_11__2:
  # $8.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 261 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $8.1:rax 
  # IR_Int32_Type.2: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $8.1:rax IR_Int32_Type.2:rbx 
  # $9.1: Boolean = call(is.325, $8.1, IR_Int32_Type.2)
  .loc 1 261 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $8.1
  # [discarded value]: IR_Int32_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $9.1:rax 
  # jump($9.1, block.4, block.5)
  test al, al
  jz .LABEL__generate_cast_instruction_11__5
.LABEL__generate_cast_instruction_11__4:
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 262 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $10.1:rax 
  # $11.1: @FILE = call(write.339, $10.1, "  movsx ")
  .loc 1 262 13
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # "  movsx "
  call write_339
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $11.1:rax 
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 262 54
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $11.1:rax $12.1:rbx 
  # $13.1: @FILE = call(write.339, $11.1, $12.1)
  .loc 1 262 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, ", ")
  .loc 1 262 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $14.1:rax 
  # $15.1: @String = load_struct_member(result_register.1, name_d)
  .loc 1 262 96
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $14.1:rax $15.1:rbx 
  # $16.1: @FILE = call(write.339, $14.1, $15.1)
  .loc 1 262 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 262 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # return()
  .loc 1 263 13
  jmp .LABEL__generate_cast_instruction_11__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_11__5:
  # $18.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 265 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $18.1:rax 
  # IR_Int8_Type.2: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $18.1:rax IR_Int8_Type.2:rbx 
  # $19.1: Boolean = call(is.325, $18.1, IR_Int8_Type.2)
  .loc 1 265 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $18.1
  # [discarded value]: IR_Int8_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $19.1:rax 
  # jump($19.1, block.7, block.3)
  test al, al
  jz .LABEL__generate_cast_instruction_11__3
.LABEL__generate_cast_instruction_11__7:
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 266 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $20.1:rax 
  # $21.1: @FILE = call(write.339, $20.1, "  movsx ")
  .loc 1 266 13
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # "  movsx "
  call write_339
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $21.1:rax 
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 266 54
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $21.1:rax $22.1:rbx 
  # $23.1: @FILE = call(write.339, $21.1, $22.1)
  .loc 1 266 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $23.1:rax 
  # $24.1: @FILE = call(write.339, $23.1, ", ")
  .loc 1 266 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $24.1:rax 
  # $25.1: @String = load_struct_member(result_register.1, name_b)
  .loc 1 266 96
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $24.1:rax $25.1:rbx 
  # $26.1: @FILE = call(write.339, $24.1, $25.1)
  .loc 1 266 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $26.1:rax 
  # $27.1: @FILE = call(end_line.342, $26.1)
  .loc 1 266 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # return()
  .loc 1 267 13
  jmp .LABEL__generate_cast_instruction_11__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_11__3:
  # $28.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 270 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $28.1:rax 
  # $29.1: @IR_Type = load_struct_member($28.1, type)
  .loc 1 270 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $29.1:rbx 
  # IR_Int32_Type.3: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $29.1:rbx IR_Int32_Type.3:rax 
  # $30.1: Boolean = call(is.325, $29.1, IR_Int32_Type.3)
  .loc 1 270 9
  mov rdi, rbx
  mov rsi, rax
  call is_325
  # [discarded value]: $29.1
  # [discarded value]: IR_Int32_Type.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $30.1:rax 
  # jump($30.1, block.10, block.11)
  test al, al
  jz .LABEL__generate_cast_instruction_11__11
.LABEL__generate_cast_instruction_11__10:
  # $31.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 271 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $31.1:rax 
  # IR_Int_Type.3: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $31.1:rax IR_Int_Type.3:rbx 
  # $32.1: Boolean = call(is.325, $31.1, IR_Int_Type.3)
  .loc 1 271 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $31.1
  # [discarded value]: IR_Int_Type.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $32.1:rax 
  # jump($32.1, block.12, block.13)
  test al, al
  jz .LABEL__generate_cast_instruction_11__13
.LABEL__generate_cast_instruction_11__12:
  # return()
  .loc 1 272 13
  jmp .LABEL__generate_cast_instruction_11__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_11__13:
  # $33.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 274 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $33.1:rax 
  # IR_Int8_Type.3: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $33.1:rax IR_Int8_Type.3:rbx 
  # $34.1: Boolean = call(is.325, $33.1, IR_Int8_Type.3)
  .loc 1 274 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $33.1
  # [discarded value]: IR_Int8_Type.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $34.1:rax 
  # jump($34.1, block.15, block.11)
  test al, al
  jz .LABEL__generate_cast_instruction_11__11
.LABEL__generate_cast_instruction_11__15:
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 275 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $35.1:rax 
  # $36.1: @FILE = call(write.339, $35.1, "  movsx ")
  .loc 1 275 13
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # "  movsx "
  call write_339
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $36.1:rax 
  # $37.1: @String = load_struct_member(result_register.1, name_d)
  .loc 1 275 54
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $36.1:rax $37.1:rbx 
  # $38.1: @FILE = call(write.339, $36.1, $37.1)
  .loc 1 275 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $38.1:rax 
  # $39.1: @FILE = call(write.339, $38.1, ", ")
  .loc 1 275 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $39.1:rax 
  # $40.1: @String = load_struct_member(result_register.1, name_b)
  .loc 1 275 96
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $39.1:rax $40.1:rbx 
  # $41.1: @FILE = call(write.339, $39.1, $40.1)
  .loc 1 275 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $41.1:rax 
  # $42.1: @FILE = call(end_line.342, $41.1)
  .loc 1 275 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # return()
  .loc 1 276 13
  jmp .LABEL__generate_cast_instruction_11__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_11__11:
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 279 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $43.1:rax 
  # $44.1: @IR_Type = load_struct_member($43.1, type)
  .loc 1 279 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $44.1:rbx 
  # IR_Int8_Type.4: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $44.1:rbx IR_Int8_Type.4:rax 
  # $45.1: Boolean = call(is.325, $44.1, IR_Int8_Type.4)
  .loc 1 279 9
  mov rdi, rbx
  mov rsi, rax
  call is_325
  # [discarded value]: $44.1
  # [discarded value]: IR_Int8_Type.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $45.1:rax 
  # jump($45.1, block.18, block.19)
  test al, al
  jz .LABEL__generate_cast_instruction_11__19
.LABEL__generate_cast_instruction_11__18:
  # $46.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 280 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $46.1:rax 
  # IR_Int_Type.4: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $46.1:rax IR_Int_Type.4:rbx 
  # $47.1: Boolean = call(is.325, $46.1, IR_Int_Type.4)
  .loc 1 280 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $46.1
  # [discarded value]: IR_Int_Type.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $47.1:rax 
  # jump($47.1, block.20, block.21)
  test al, al
  jz .LABEL__generate_cast_instruction_11__21
.LABEL__generate_cast_instruction_11__20:
  # return()
  .loc 1 281 13
  jmp .LABEL__generate_cast_instruction_11__end
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_11__21:
  # $48.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 283 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $48.1:rax 
  # IR_Int32_Type.4: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $48.1:rax IR_Int32_Type.4:rbx 
  # $49.1: Boolean = call(is.325, $48.1, IR_Int32_Type.4)
  .loc 1 283 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $48.1
  # [discarded value]: IR_Int32_Type.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $49.1:rax 
  # jump($49.1, block.23, block.19)
  test al, al
  jz .LABEL__generate_cast_instruction_11__19
.LABEL__generate_cast_instruction_11__23:
  # return()
  .loc 1 284 13
  jmp .LABEL__generate_cast_instruction_11__end
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
.LABEL__generate_cast_instruction_11__19:
  # $50.1: @String = call(clone.329, "Cannot cast ")
  .loc 1 287 16
  lea rdi, .LABEL__string_39[rip] # "Cannot cast "
  call clone_329
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $50.1:rax 
  # $51.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 287 45
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $50.1:rax $51.1:rbx 
  # $52.1: @Object_Type = load_struct_member($51.1, object_type)
  .loc 1 287 45
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $50.1:rax $52.1:r15 
  # $53.1: @String = load_struct_member($52.1, name)
  .loc 1 287 45
  mov rbx, r15
  add rbx, 8
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $50.1:rax $53.1:rbx 
  # $54.1: @String = call(append.332, $50.1, $53.1)
  .loc 1 287 16
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $50.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $54.1:rax 
  # $55.1: @String = call(append.332, $54.1, " to ")
  .loc 1 287 16
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # " to "
  call append_332
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax 
  # $56.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 287 99
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $56.1:rbx 
  # $57.1: @IR_Type = load_struct_member($56.1, type)
  .loc 1 287 99
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $57.1:r15 
  # $58.1: @Object_Type = load_struct_member($57.1, object_type)
  .loc 1 287 99
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $58.1:rbx 
  # $59.1: @String = load_struct_member($58.1, name)
  .loc 1 287 99
  mov r15, rbx
  add r15, 8
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $55.1:rax $59.1:r15 
  # $60.1: @String = call(append.332, $55.1, $59.1)
  .loc 1 287 16
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $55.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $60.1:rax 
  # call(abort.31, self.1, $60.1)
  .loc 1 287 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_31
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: ir_value.1
  # [discarded value]: result_register.1
  # [live values]: 
.LABEL__generate_cast_instruction_11__end:
  mov rsp, rbp
  pop rbp
  ret

generate_cast_instruction_11__stack_frame_size: .word 32

  .loc 1 290 1
  .text
generate_conditional_jump_instruction_12:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_conditional_jump_instruction_12__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_conditional_jump_instruction_12__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Conditional_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # condition_value.1: @IR_Value = call(get_condition_value.157, instruction.1)
  .loc 1 291 24
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_condition_value_157
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax 
  # $2.1: @IR_Type = load_struct_member(condition_value.1, type)
  .loc 1 292 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx 
  # IR_Boolean_Type.2: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx IR_Boolean_Type.2:r15 
  # $3.1: Boolean = call(is.325, $2.1, IR_Boolean_Type.2)
  .loc 1 292 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call is_325
  # [discarded value]: $2.1
  # [discarded value]: IR_Boolean_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $3.1:rax 
  # $4.1: Boolean = $3.1 == false
  .loc 1 292 9
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  jz .LABEL__generate_conditional_jump_instruction_12__3
.LABEL__generate_conditional_jump_instruction_12__2:
  # call(abort.31, self.1, "Unsupported value type")
  .loc 1 293 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_41[rip] # "Unsupported value type"
  call abort_31
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
.LABEL__generate_conditional_jump_instruction_12__3:
  # IR_Variable_Value.2: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] IR_Variable_Value.2:rax 
  # $5.1: Boolean = call(is.325, condition_value.1, IR_Variable_Value.2)
  .loc 1 296 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.4, block.6)
  test al, al
  jz .LABEL__generate_conditional_jump_instruction_12__6
.LABEL__generate_conditional_jump_instruction_12__4:
  # condition_value.1: @IR_Variable_Value = condition_value.1
  .loc 1 297 28
  mov rax, [rbp-24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value.38, self.1, condition_value.1)
  .loc 1 298 21
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:rax 
  # $9.1: Boolean = mc_value.1 == null
  .loc 1 299 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:rax $9.1:rbx 
  # jump($9.1, block.7, block.8)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_conditional_jump_instruction_12__8
.LABEL__generate_conditional_jump_instruction_12__7:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 300 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_conditional_jump_instruction_12__8:
  # condition_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 302 30
  mov rax, [rbp-40]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:rax 
  # $11.1: Boolean = condition_register.3 == null
  .loc 1 303 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:rax $11.1:rbx 
  # jump($11.1, block.9, block.5)
  test bl, bl
  mov [rbp-48], rax
  jz .LABEL__generate_conditional_jump_instruction_12__5
.LABEL__generate_conditional_jump_instruction_12__9:
  # condition_register.4: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 304 34
  mov rdi, [rbp-8]
  call find_unused_register_34
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:rax[rbp-48] 
  # call(generate_load_value.28, self.1, condition_register.4, condition_value.1)
  .loc 1 305 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-32]
  mov [rbp-48], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump(block.5)
.LABEL__generate_conditional_jump_instruction_12__5:
  # condition_register.5: @MC_Register = phi(condition_register.2, condition_register.4, condition_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 311 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $13.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $14.1: @FILE = call(write.339, $13.1, "  test ")
  .loc 1 311 5
  mov rdi, rax
  lea rsi, .LABEL__string_43[rip] # "  test "
  call write_339
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $14.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $15.1: @String = load_struct_member(condition_register.5, name_b)
  .loc 1 311 45
  mov rbx, [rbp-48]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $14.1:rax $15.1:rbx condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $16.1: @FILE = call(write.339, $14.1, $15.1)
  .loc 1 311 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $16.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $17.1: @FILE = call(write.339, $16.1, ", ")
  .loc 1 311 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.5:[rbp-48] $17.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $18.1: @String = load_struct_member(condition_register.5, name_b)
  .loc 1 311 90
  mov rbx, [rbp-48]
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: condition_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $17.1:rax $18.1:rbx condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $19.1: @FILE = call(write.339, $17.1, $18.1)
  .loc 1 311 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $19.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $20.1: @FILE = call(end_line.342, $19.1)
  .loc 1 311 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # call(release_all_registers.41, self.1)
  .loc 1 312 5
  mov rdi, [rbp-8]
  call release_all_registers_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $21.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 1 313 9
  mov rax, [rbp-16]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $21.1:rax condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $22.1: Boolean = load_struct_member($21.1, is_being_generated)
  .loc 1 313 9
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] $22.1:rbx condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump($22.1, block.11, block.13)
  test bl, bl
  jz .LABEL__generate_conditional_jump_instruction_12__13
.LABEL__generate_conditional_jump_instruction_12__11:
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 314 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $33.1:rax 
  # $34.1: @FILE = call(write.339, $33.1, "  jnz ")
  .loc 1 314 9
  mov rdi, rax
  lea rsi, .LABEL__string_44[rip] # "  jnz "
  call write_339
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $34.1:rax 
  # $35.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 1 314 60
  mov rbx, [rbp-16]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $34.1:rax $35.1:rbx 
  # $36.1: @FILE = call(write_block_label.7, $34.1, $35.1)
  .loc 1 314 9
  mov rdi, rax
  mov rsi, rbx
  call write_block_label_7
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $36.1:rax 
  # $37.1: @FILE = call(end_line.342, $36.1)
  .loc 1 314 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $38.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 315 13
  mov rax, [rbp-16]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $38.1:rax 
  # $39.1: Boolean = load_struct_member($38.1, is_being_generated)
  .loc 1 315 13
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $39.1:rbx 
  # jump($39.1, block.16, block.17)
  test bl, bl
  jz .LABEL__generate_conditional_jump_instruction_12__17
.LABEL__generate_conditional_jump_instruction_12__16:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 316 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
.LABEL__generate_conditional_jump_instruction_12__17:
  # $40.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 318 29
  mov rax, [rbp-16]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $40.1:rax 
  # call(generate_block.6, self.1, $40.1)
  .loc 1 318 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_6
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump(block.12)
.LABEL__generate_conditional_jump_instruction_12__12:
  # return()
  jmp .LABEL__generate_conditional_jump_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
.LABEL__generate_conditional_jump_instruction_12__13:
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 320 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $23.1:rax 
  # $24.1: @FILE = call(write.339, $23.1, "  jz ")
  .loc 1 320 9
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # "  jz "
  call write_339
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $24.1:rax 
  # $25.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 320 59
  mov rbx, [rbp-16]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $24.1:rax $25.1:rbx 
  # $26.1: @FILE = call(write_block_label.7, $24.1, $25.1)
  .loc 1 320 9
  mov rdi, rax
  mov rsi, rbx
  call write_block_label_7
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $26.1:rax 
  # $27.1: @FILE = call(end_line.342, $26.1)
  .loc 1 320 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $28.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 1 321 29
  mov rax, [rbp-16]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $28.1:rax 
  # call(generate_block.6, self.1, $28.1)
  .loc 1 321 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_6
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # $29.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 322 13
  mov rax, [rbp-16]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $29.1:rax 
  # $30.1: Boolean = load_struct_member($29.1, is_being_generated)
  .loc 1 322 13
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $30.1:rbx 
  # $31.1: Boolean = $30.1 == false
  .loc 1 322 13
  cmp bl, 0
  sete al
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $31.1:rax 
  # jump($31.1, block.14, block.12)
  test al, al
  jz .LABEL__generate_conditional_jump_instruction_12__12
.LABEL__generate_conditional_jump_instruction_12__14:
  # $32.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 323 33
  mov rax, [rbp-16]
  add rax, 65
  mov rax, [rax]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] $32.1:rax 
  # call(generate_block.6, self.1, $32.1)
  .loc 1 323 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_6
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # jump(block.12)
  jmp .LABEL__generate_conditional_jump_instruction_12__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] condition_register.4:[rbp-48] 
  # [discarded value]: condition_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] condition_register.3:[rbp-48] 
  # [discarded value]: condition_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: condition_value.1
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
.LABEL__generate_conditional_jump_instruction_12__6:
  # condition_register.2: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 308 30
  mov rdi, [rbp-8]
  call find_unused_register_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_register.2:rax[rbp-48] 
  # call(generate_load_value.28, self.1, condition_register.2, condition_value.1)
  .loc 1 309 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-48], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_register.2:[rbp-48] 
  # jump(block.5)
  jmp .LABEL__generate_conditional_jump_instruction_12__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] condition_register.2:[rbp-48] 
  # [discarded value]: condition_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: condition_value.1
  # [live values]: 
.LABEL__generate_conditional_jump_instruction_12__end:
  mov rsp, rbp
  pop rbp
  ret

generate_conditional_jump_instruction_12__stack_frame_size: .word 48

  .loc 1 328 1
  .text
generate_comparison_instruction_13:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_comparison_instruction_13__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_comparison_instruction_13__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Comparison_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # left_value.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 329 19
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_left_value_178
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:rax 
  # right_value.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 330 20
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_179
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax 
  # IR_Variable_Value.3: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax IR_Variable_Value.3:rbx 
  # $4.1: Boolean = call(is.325, left_value.1, IR_Variable_Value.3)
  .loc 1 331 9
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-32], rax
  call is_325
  # [discarded value]: IR_Variable_Value.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_comparison_instruction_13__3
.LABEL__generate_comparison_instruction_13__2:
  # IR_Variable_Value.4: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] IR_Variable_Value.4:rax 
  # $4.2: Boolean = call(is.325, right_value.1, IR_Variable_Value.4)
  .loc 1 331 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:rax[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__generate_comparison_instruction_13__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 1 331 9
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # jump($4.3, block.4, block.5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_comparison_instruction_13__5
.LABEL__generate_comparison_instruction_13__4:
  # $6.1: @IR_Variable_Value = left_value.1
  .loc 1 332 41
  mov rax, [rbp-24]
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $6.1:rax 
  # mc_left_value.1: @MC_Value = call(get_value.38, self.1, $6.1)
  .loc 1 332 26
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_38
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] mc_left_value.1:rax 
  # $8.1: @MC_Register = load_struct_member(mc_left_value.1, register)
  .loc 1 333 13
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: mc_left_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $8.1:rbx 
  # $9.1: Boolean = $8.1 == null
  .loc 1 333 13
  cmp rbx, 0
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $9.1:rax 
  # jump($9.1, block.6, block.5)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__5
.LABEL__generate_comparison_instruction_13__6:
  # $10.1: @IR_Variable_Value = right_value.1
  .loc 1 334 46
  mov rax, [rbp-32]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $10.1:rax 
  # mc_right_value.1: @MC_Value = call(get_value.38, self.1, $10.1)
  .loc 1 334 31
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_38
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] mc_right_value.1:rax 
  # $12.1: @MC_Register = load_struct_member(mc_right_value.1, register)
  .loc 1 335 17
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: mc_right_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $12.1:rbx 
  # $13.1: Boolean = $12.1 == null
  .loc 1 335 17
  cmp rbx, 0
  sete al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $13.1:rax 
  # jump($13.1, block.8, block.5)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__5
.LABEL__generate_comparison_instruction_13__8:
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 336 29
  mov rdi, [rbp-8]
  call find_unused_register_34
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rax 
  # call(generate_load_value.28, self.1, register.1, left_value.1)
  .loc 1 337 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-41], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $15.1: @IR_Variable_Value = left_value.1
  .loc 1 338 41
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $15.1:rax 
  # $16.1: @MC_Value = call(map_variable_value.37, self.1, $15.1, register.1)
  .loc 1 338 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: register.1
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # jump(block.5)
.LABEL__generate_comparison_instruction_13__5:
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 342 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $17.1:rax 
  # $18.1: @FILE = call(write.339, $17.1, "  cmp ")
  .loc 1 342 5
  mov rdi, rax
  lea rsi, .LABEL__string_46[rip] # "  cmp "
  call write_339
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $18.1:rax 
  # $19.1: @FILE = call(write_operand.30, $18.1, self.1, left_value.1)
  .loc 1 342 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-24]
  call write_operand_30
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $19.1:rax 
  # $20.1: @FILE = call(write.339, $19.1, ", ")
  .loc 1 342 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $20.1:rax 
  # $21.1: @FILE = call(write_operand.30, $20.1, self.1, right_value.1)
  .loc 1 342 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-32]
  call write_operand_30
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $21.1:rax 
  # $22.1: @FILE = call(end_line.342, $21.1)
  .loc 1 342 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 343 17
  mov rdi, [rbp-8]
  call find_unused_register_34
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rax 
  # IR_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Equals_Comparison_Instruction)
  lea rbx, IR_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:rax IR_Equals_Comparison_Instruction.2:rbx 
  # $24.1: Boolean = call(is.325, instruction.1, IR_Equals_Comparison_Instruction.2)
  .loc 1 344 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call is_325
  # [discarded value]: IR_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $24.1:rax 
  # jump($24.1, block.10, block.12)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__12
.LABEL__generate_comparison_instruction_13__10:
  # $69.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 345 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $69.1:rax 
  # $70.1: @FILE = call(write.339, $69.1, "  sete ")
  .loc 1 345 9
  mov rdi, rax
  lea rsi, .LABEL__string_47[rip] # "  sete "
  call write_339
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $70.1:rax 
  # $71.1: @String = load_struct_member(register.1, name_b)
  .loc 1 345 49
  mov rbx, [rbp-41]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $70.1:rax $71.1:rbx 
  # $72.1: @FILE = call(write.339, $70.1, $71.1)
  .loc 1 345 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $72.1:rax 
  # $73.1: @FILE = call(end_line.342, $72.1)
  .loc 1 345 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 346 33
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $74.1:rax 
  # $75.1: @MC_Value = call(map_variable_value.37, self.1, $74.1, register.1)
  .loc 1 346 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: $74.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
.LABEL__generate_comparison_instruction_13__11:
  # return()
  jmp .LABEL__generate_comparison_instruction_13__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_13__12:
  # IR_Greater_Than_Comparison_Instruction.2: @Object_Type = load_variable(IR_Greater_Than_Comparison_Instruction)
  lea rax, IR_Greater_Than_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Greater_Than_Comparison_Instruction.2:rax 
  # $25.1: Boolean = call(is.325, instruction.1, IR_Greater_Than_Comparison_Instruction.2)
  .loc 1 347 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Greater_Than_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $25.1:rax 
  # jump($25.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__15
.LABEL__generate_comparison_instruction_13__13:
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 348 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $62.1:rax 
  # $63.1: @FILE = call(write.339, $62.1, "  setg ")
  .loc 1 348 9
  mov rdi, rax
  lea rsi, .LABEL__string_48[rip] # "  setg "
  call write_339
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $63.1:rax 
  # $64.1: @String = load_struct_member(register.1, name_b)
  .loc 1 348 49
  mov rbx, [rbp-41]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $63.1:rax $64.1:rbx 
  # $65.1: @FILE = call(write.339, $63.1, $64.1)
  .loc 1 348 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $65.1:rax 
  # $66.1: @FILE = call(end_line.342, $65.1)
  .loc 1 348 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $67.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 349 33
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $67.1:rax 
  # $68.1: @MC_Value = call(map_variable_value.37, self.1, $67.1, register.1)
  .loc 1 349 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_13__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_13__15:
  # IR_Greater_Than_Or_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Greater_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Greater_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Greater_Than_Or_Equals_Comparison_Instruction.2:rax 
  # $26.1: Boolean = call(is.325, instruction.1, IR_Greater_Than_Or_Equals_Comparison_Instruction.2)
  .loc 1 350 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Greater_Than_Or_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $26.1:rax 
  # jump($26.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__18
.LABEL__generate_comparison_instruction_13__16:
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 351 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $55.1:rax 
  # $56.1: @FILE = call(write.339, $55.1, "  setge ")
  .loc 1 351 9
  mov rdi, rax
  lea rsi, .LABEL__string_49[rip] # "  setge "
  call write_339
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $56.1:rax 
  # $57.1: @String = load_struct_member(register.1, name_b)
  .loc 1 351 50
  mov rbx, [rbp-41]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $56.1:rax $57.1:rbx 
  # $58.1: @FILE = call(write.339, $56.1, $57.1)
  .loc 1 351 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $58.1:rax 
  # $59.1: @FILE = call(end_line.342, $58.1)
  .loc 1 351 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 352 33
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $60.1:rax 
  # $61.1: @MC_Value = call(map_variable_value.37, self.1, $60.1, register.1)
  .loc 1 352 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_13__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_13__18:
  # IR_Less_Than_Comparison_Instruction.2: @Object_Type = load_variable(IR_Less_Than_Comparison_Instruction)
  lea rax, IR_Less_Than_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Less_Than_Comparison_Instruction.2:rax 
  # $27.1: Boolean = call(is.325, instruction.1, IR_Less_Than_Comparison_Instruction.2)
  .loc 1 353 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Less_Than_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $27.1:rax 
  # jump($27.1, block.19, block.21)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__21
.LABEL__generate_comparison_instruction_13__19:
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 354 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $48.1:rax 
  # $49.1: @FILE = call(write.339, $48.1, "  setl ")
  .loc 1 354 9
  mov rdi, rax
  lea rsi, .LABEL__string_50[rip] # "  setl "
  call write_339
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $49.1:rax 
  # $50.1: @String = load_struct_member(register.1, name_b)
  .loc 1 354 49
  mov rbx, [rbp-41]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $49.1:rax $50.1:rbx 
  # $51.1: @FILE = call(write.339, $49.1, $50.1)
  .loc 1 354 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $51.1:rax 
  # $52.1: @FILE = call(end_line.342, $51.1)
  .loc 1 354 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $51.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $53.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 355 33
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $53.1:rax 
  # $54.1: @MC_Value = call(map_variable_value.37, self.1, $53.1, register.1)
  .loc 1 355 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_13__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_13__21:
  # IR_Less_Than_Or_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Less_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Less_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Less_Than_Or_Equals_Comparison_Instruction.2:rax 
  # $28.1: Boolean = call(is.325, instruction.1, IR_Less_Than_Or_Equals_Comparison_Instruction.2)
  .loc 1 356 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Less_Than_Or_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $28.1:rax 
  # jump($28.1, block.22, block.24)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__24
.LABEL__generate_comparison_instruction_13__22:
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 357 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $41.1:rax 
  # $42.1: @FILE = call(write.339, $41.1, "  setle ")
  .loc 1 357 9
  mov rdi, rax
  lea rsi, .LABEL__string_51[rip] # "  setle "
  call write_339
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $42.1:rax 
  # $43.1: @String = load_struct_member(register.1, name_b)
  .loc 1 357 50
  mov rbx, [rbp-41]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $42.1:rax $43.1:rbx 
  # $44.1: @FILE = call(write.339, $42.1, $43.1)
  .loc 1 357 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $44.1:rax 
  # $45.1: @FILE = call(end_line.342, $44.1)
  .loc 1 357 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 358 33
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $46.1:rax 
  # $47.1: @MC_Value = call(map_variable_value.37, self.1, $46.1, register.1)
  .loc 1 358 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_13__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_13__24:
  # IR_Not_Equals_Comparison_Instruction.2: @Object_Type = load_variable(IR_Not_Equals_Comparison_Instruction)
  lea rax, IR_Not_Equals_Comparison_Instruction[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] IR_Not_Equals_Comparison_Instruction.2:rax 
  # $29.1: Boolean = call(is.325, instruction.1, IR_Not_Equals_Comparison_Instruction.2)
  .loc 1 359 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Not_Equals_Comparison_Instruction.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $29.1:rax 
  # jump($29.1, block.25, block.27)
  test al, al
  jz .LABEL__generate_comparison_instruction_13__27
.LABEL__generate_comparison_instruction_13__25:
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 360 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $34.1:rax 
  # $35.1: @FILE = call(write.339, $34.1, "  setne ")
  .loc 1 360 9
  mov rdi, rax
  lea rsi, .LABEL__string_52[rip] # "  setne "
  call write_339
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $35.1:rax 
  # $36.1: @String = load_struct_member(register.1, name_b)
  .loc 1 360 50
  mov rbx, [rbp-41]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $35.1:rax $36.1:rbx 
  # $37.1: @FILE = call(write.339, $35.1, $36.1)
  .loc 1 360 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $37.1:rax 
  # $38.1: @FILE = call(end_line.342, $37.1)
  .loc 1 360 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # $39.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 361 33
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $39.1:rax 
  # $40.1: @MC_Value = call(map_variable_value.37, self.1, $39.1, register.1)
  .loc 1 361 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-41]
  call map_variable_value_37
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # jump(block.11)
  jmp .LABEL__generate_comparison_instruction_13__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
.LABEL__generate_comparison_instruction_13__27:
  # $30.1: @String = call(clone.329, "Unsupported comparison instruction type: ")
  .loc 1 363 20
  lea rdi, .LABEL__string_53[rip] # "Unsupported comparison instruction type: "
  call clone_329
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $30.1:rax 
  # $31.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 1 363 78
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $30.1:rax $31.1:rbx 
  # $32.1: @String = load_struct_member($31.1, name)
  .loc 1 363 78
  mov r15, rbx
  add r15, 8
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $30.1:rax $32.1:r15 
  # $33.1: @String = call(append.332, $30.1, $32.1)
  .loc 1 363 20
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $30.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] $33.1:rax 
  # call(abort.31, self.1, $33.1)
  .loc 1 363 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_31
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] register.1:[rbp-41] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__generate_comparison_instruction_13__end:
  mov rsp, rbp
  pop rbp
  ret

generate_comparison_instruction_13__stack_frame_size: .word 48

  .loc 1 367 1
  .text
generate_direct_jump_instruction_14:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_direct_jump_instruction_14__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_direct_jump_instruction_14__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Direct_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # call(release_all_registers.41, self.1)
  .loc 1 368 5
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_41
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $1.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 1 369 9
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = load_struct_member($1.1, is_being_generated)
  .loc 1 369 9
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.2, block.4)
  test bl, bl
  jz .LABEL__generate_direct_jump_instruction_14__4
.LABEL__generate_direct_jump_instruction_14__2:
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 370 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # $5.1: @FILE = call(write.339, $4.1, "  jmp ")
  .loc 1 370 9
  mov rdi, rax
  lea rsi, .LABEL__string_54[rip] # "  jmp "
  call write_339
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # $6.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 1 370 60
  mov rbx, [rbp-8]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax $6.1:rbx 
  # $7.1: @FILE = call(write_block_label.7, $5.1, $6.1)
  .loc 1 370 9
  mov rdi, rax
  mov rsi, rbx
  call write_block_label_7
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(end_line.342, $7.1)
  .loc 1 370 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_direct_jump_instruction_14__3:
  # return()
  jmp .LABEL__generate_direct_jump_instruction_14__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_direct_jump_instruction_14__4:
  # $3.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 1 372 29
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $3.1:rax 
  # call(generate_block.6, self.1, $3.1)
  .loc 1 372 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call generate_block_6
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__generate_direct_jump_instruction_14__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_direct_jump_instruction_14__end:
  mov rsp, rbp
  pop rbp
  ret

generate_direct_jump_instruction_14__stack_frame_size: .word 16

  .loc 1 376 1
  .text
generate_divide_instruction_15:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_divide_instruction_15__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_divide_instruction_15__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Divide_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 377 27
  mov rax, rdi
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # call(release_register.42, self.1, $1.1)
  .loc 1 377 5
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_42
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 378 30
  mov rax, [rbp-16]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  # $3.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 378 49
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_178
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # call(generate_load_value.28, self.1, $2.1, $3.1)
  .loc 1 378 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 379 5
  mov rax, [rbp-16]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, is_reserved, true)
  .loc 1 379 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 380 27
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # call(release_register.42, self.1, $5.1)
  .loc 1 380 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 381 5
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, is_reserved, true)
  .loc 1 381 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 382 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(write.339, $7.1, "  cqto")
  .loc 1 382 5
  mov rdi, rax
  lea rsi, .LABEL__string_55[rip] # "  cqto"
  call write_339
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(end_line.342, $8.1)
  .loc 1 382 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # right_value.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 383 20
  mov rdi, [rbp-8]
  call get_right_value_179
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  # IR_Constant_Value.2: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax IR_Constant_Value.2:rbx 
  # $11.1: Boolean = call(is.325, right_value.1, IR_Constant_Value.2)
  .loc 1 384 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: IR_Constant_Value.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_divide_instruction_15__4
.LABEL__generate_divide_instruction_15__2:
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 385 21
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # store_struct_member(register.1, is_reserved, true)
  .loc 1 386 9
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # call(generate_load_value.28, self.1, register.1, right_value.1)
  .loc 1 387 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 388 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $17.1:rax 
  # $18.1: @FILE = call(write.339, $17.1, "  idiv ")
  .loc 1 388 9
  mov rdi, rax
  lea rsi, .LABEL__string_56[rip] # "  idiv "
  call write_339
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $18.1:rax 
  # $19.1: @String = load_struct_member(register.1, name_q)
  .loc 1 388 49
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $18.1:rax $19.1:rbx 
  # $20.1: @FILE = call(write.339, $18.1, $19.1)
  .loc 1 388 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $20.1:rax 
  # $21.1: @FILE = call(end_line.342, $20.1)
  .loc 1 388 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # store_struct_member(register.1, is_reserved, false)
  .loc 1 389 9
  mov rax, [rbp-32]
  add rax, 40
  mov BYTE PTR [rax], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_divide_instruction_15__3:
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 393 5
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $22.1:rax 
  # store_struct_member($22.1, is_reserved, false)
  .loc 1 393 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 0
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 394 5
  mov rax, [rbp-16]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $23.1:rax 
  # store_struct_member($23.1, is_reserved, false)
  .loc 1 394 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 0
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 395 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $24.1:rax 
  # $25.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 395 55
  mov rbx, [rbp-16]
  add rbx, 25
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $24.1:rax $25.1:rbx 
  # $26.1: @MC_Value = call(map_variable_value.37, self.1, $24.1, $25.1)
  .loc 1 395 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # return()
  jmp .LABEL__generate_divide_instruction_15__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
.LABEL__generate_divide_instruction_15__4:
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 391 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $12.1:rax 
  # $13.1: @FILE = call(write.339, $12.1, "  idiv ")
  .loc 1 391 9
  mov rdi, rax
  lea rsi, .LABEL__string_56[rip] # "  idiv "
  call write_339
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_operand.30, $13.1, self.1, right_value.1)
  .loc 1 391 9
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_30
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(end_line.342, $14.1)
  .loc 1 391 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_divide_instruction_15__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__generate_divide_instruction_15__end:
  mov rsp, rbp
  pop rbp
  ret

generate_divide_instruction_15__stack_frame_size: .word 32

  .loc 1 398 1
  .text
generate_load_array_item_instruction_16:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_array_item_instruction_16__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_array_item_instruction_16__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 399 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_array_value.159, instruction.1)
  .loc 1 400 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_159
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, $2.1)
  .loc 1 400 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 401 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  # $4.1: @MC_Value = call(map_variable_value.37, self.1, $3.1, result_register.1)
  .loc 1 401 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  call map_variable_value_37
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 402 50
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  .loc 1 402 50
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rbx 
  # result_value_type_size.1: Int = call(get_type_size.51, self.1, $6.1)
  .loc 1 402 31
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_type_size_51
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:rax 
  # index_value.1: @IR_Value = call(get_index_value.160, instruction.1)
  .loc 1 404 20
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_index_value_160
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax 
  # IR_Constant_Value.3: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax IR_Constant_Value.3:rbx 
  # $9.1: Boolean = call(is.325, index_value.1, IR_Constant_Value.3)
  .loc 1 405 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-40], rax
  call is_325
  # [discarded value]: IR_Constant_Value.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:rax 
  # jump($9.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_16__4
.LABEL__generate_load_array_item_instruction_16__2:
  # index_value.1: @IR_Constant_Value = index_value.1
  .loc 1 406 24
  mov rax, [rbp-40]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax 
  # $29.1: @Literal_Token = load_struct_member(index_value.1, literal)
  .loc 1 407 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax $29.1:rbx 
  # Integer_Token.2: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:rax $29.1:rbx Integer_Token.2:r15 
  # $30.1: Boolean = call(is.325, $29.1, Integer_Token.2)
  .loc 1 407 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-48], rax
  call is_325
  # [discarded value]: $29.1
  # [discarded value]: Integer_Token.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $30.1:rax 
  # $31.1: Boolean = $30.1 == false
  .loc 1 407 13
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $31.1:rbx 
  # jump($31.1, block.7, block.8)
  test bl, bl
  jz .LABEL__generate_load_array_item_instruction_16__8
.LABEL__generate_load_array_item_instruction_16__7:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 408 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] 
.LABEL__generate_load_array_item_instruction_16__8:
  # $33.1: @Integer_Token = load_struct_member(index_value.1, literal)
  .loc 1 410 25
  mov rax, [rbp-48]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $33.1:rax 
  # index_value.1: Int = load_struct_member($33.1, value)
  .loc 1 410 25
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rbx 
  # $35.1: Boolean = index_value.1 != 0
  .loc 1 411 13
  cmp rbx, 0
  setne al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rbx $35.1:rax 
  # jump($35.1, block.9, block.3)
  test al, al
  mov [rbp-56], rbx
  jz .LABEL__generate_load_array_item_instruction_16__3
.LABEL__generate_load_array_item_instruction_16__9:
  # $36.1: Boolean = index_value.1 < 0
  .loc 1 412 17
  cmp QWORD PTR [rbp-56], 0
  setl al
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $36.1:rax 
  # jump($36.1, block.11, block.12)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_16__12
.LABEL__generate_load_array_item_instruction_16__11:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 413 17
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_16__12:
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 415 13
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $37.1:rax 
  # $38.1: @FILE = call(write.339, $37.1, "  add ")
  .loc 1 415 13
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $38.1:rax 
  # $39.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 415 52
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $38.1:rax $39.1:rbx 
  # $40.1: @FILE = call(write.339, $38.1, $39.1)
  .loc 1 415 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $40.1:rax 
  # $41.1: @FILE = call(write.339, $40.1, ", ")
  .loc 1 415 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $41.1:rax 
  # $42.1: Int = index_value.1 * result_value_type_size.1
  .loc 1 415 94
  mov rbx, [rbp-56]
  imul rbx, QWORD PTR [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $41.1:rax $42.1:rbx 
  # $43.1: @FILE = call(write.338, $41.1, $42.1)
  .loc 1 415 13
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $43.1:rax 
  # $44.1: @FILE = call(end_line.342, $43.1)
  .loc 1 415 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.3)
.LABEL__generate_load_array_item_instruction_16__3:
  # $45.1: Boolean = result_value_type_size.1 == 8
  .loc 1 426 9
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] $45.1:rax index_value.1:[rbp-56] 
  # jump($45.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_16__15
.LABEL__generate_load_array_item_instruction_16__13:
  # $75.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 427 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $75.1:rax 
  # $76.1: @FILE = call(write.339, $75.1, "  mov ")
  .loc 1 427 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $76.1:rax 
  # $77.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 427 48
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $76.1:rax $77.1:rbx 
  # $78.1: @FILE = call(write.339, $76.1, $77.1)
  .loc 1 427 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $76.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $78.1:rax 
  # $79.1: @FILE = call(write.339, $78.1, ", [")
  .loc 1 427 9
  mov rdi, rax
  lea rsi, .LABEL__string_58[rip] # ", ["
  call write_339
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $79.1:rax 
  # $80.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 427 91
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $79.1:rax $80.1:rbx 
  # $81.1: @FILE = call(write.339, $79.1, $80.1)
  .loc 1 427 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $79.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $81.1:rax 
  # $82.1: @FILE = call(write.341, $81.1, ']')
  .loc 1 427 9
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $82.1:rax 
  # $83.1: @FILE = call(end_line.342, $82.1)
  .loc 1 427 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $82.1
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
.LABEL__generate_load_array_item_instruction_16__14:
  # return()
  jmp .LABEL__generate_load_array_item_instruction_16__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_16__15:
  # $46.1: Boolean = result_value_type_size.1 == 4
  .loc 1 428 16
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $46.1:rax 
  # jump($46.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_16__18
.LABEL__generate_load_array_item_instruction_16__16:
  # $66.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 429 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $66.1:rax 
  # $67.1: @FILE = call(write.339, $66.1, "  mov ")
  .loc 1 429 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $67.1:rax 
  # $68.1: @String = load_struct_member(result_register.1, name_d)
  .loc 1 429 48
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $67.1:rax $68.1:rbx 
  # $69.1: @FILE = call(write.339, $67.1, $68.1)
  .loc 1 429 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $69.1:rax 
  # $70.1: @FILE = call(write.339, $69.1, ", [")
  .loc 1 429 9
  mov rdi, rax
  lea rsi, .LABEL__string_58[rip] # ", ["
  call write_339
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $70.1:rax 
  # $71.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 429 91
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $70.1:rax $71.1:rbx 
  # $72.1: @FILE = call(write.339, $70.1, $71.1)
  .loc 1 429 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $72.1:rax 
  # $73.1: @FILE = call(write.341, $72.1, ']')
  .loc 1 429 9
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $73.1:rax 
  # $74.1: @FILE = call(end_line.342, $73.1)
  .loc 1 429 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $73.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
  jmp .LABEL__generate_load_array_item_instruction_16__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_16__18:
  # $47.1: Boolean = result_value_type_size.1 == 2
  .loc 1 430 16
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $47.1:rax 
  # jump($47.1, block.19, block.21)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_16__21
.LABEL__generate_load_array_item_instruction_16__19:
  # $57.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 431 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $57.1:rax 
  # $58.1: @FILE = call(write.339, $57.1, "  mov ")
  .loc 1 431 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $58.1:rax 
  # $59.1: @String = load_struct_member(result_register.1, name_w)
  .loc 1 431 48
  mov rbx, [rbp-24]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $58.1:rax $59.1:rbx 
  # $60.1: @FILE = call(write.339, $58.1, $59.1)
  .loc 1 431 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $60.1:rax 
  # $61.1: @FILE = call(write.339, $60.1, ", [")
  .loc 1 431 9
  mov rdi, rax
  lea rsi, .LABEL__string_58[rip] # ", ["
  call write_339
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $61.1:rax 
  # $62.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 431 91
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $61.1:rax $62.1:rbx 
  # $63.1: @FILE = call(write.339, $61.1, $62.1)
  .loc 1 431 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $63.1:rax 
  # $64.1: @FILE = call(write.341, $63.1, ']')
  .loc 1 431 9
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $64.1:rax 
  # $65.1: @FILE = call(end_line.342, $64.1)
  .loc 1 431 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $64.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
  jmp .LABEL__generate_load_array_item_instruction_16__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_load_array_item_instruction_16__21:
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 433 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $48.1:rax 
  # $49.1: @FILE = call(write.339, $48.1, "  mov ")
  .loc 1 433 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $49.1:rax 
  # $50.1: @String = load_struct_member(result_register.1, name_b)
  .loc 1 433 48
  mov rbx, [rbp-24]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $49.1:rax $50.1:rbx 
  # $51.1: @FILE = call(write.339, $49.1, $50.1)
  .loc 1 433 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $51.1:rax 
  # $52.1: @FILE = call(write.339, $51.1, ", [")
  .loc 1 433 9
  mov rdi, rax
  lea rsi, .LABEL__string_58[rip] # ", ["
  call write_339
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $52.1:rax 
  # $53.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 433 91
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $52.1:rax $53.1:rbx 
  # $54.1: @FILE = call(write.339, $52.1, $53.1)
  .loc 1 433 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $52.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $54.1:rax 
  # $55.1: @FILE = call(write.341, $54.1, ']')
  .loc 1 433 9
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $55.1:rax 
  # $56.1: @FILE = call(end_line.342, $55.1)
  .loc 1 433 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $55.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # jump(block.14)
  jmp .LABEL__generate_load_array_item_instruction_16__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
.LABEL__generate_load_array_item_instruction_16__4:
  # index_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 418 27
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:rax 
  # $11.1: @IR_Value = call(get_index_value.160, instruction.1)
  .loc 1 419 50
  mov rdi, [rbp-8]
  mov [rbp-48], rax
  call get_index_value_160
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $11.1:rax 
  # call(generate_load_value.28, self.1, index_register.1, $11.1)
  .loc 1 419 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-48]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # $12.1: Boolean = result_value_type_size.1 > 1
  .loc 1 420 13
  cmp QWORD PTR [rbp-32], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $12.1:rax 
  # jump($12.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_load_array_item_instruction_16__6
.LABEL__generate_load_array_item_instruction_16__5:
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 421 13
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, "  imul ")
  .loc 1 421 13
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # "  imul "
  call write_339
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $14.1:rax 
  # $15.1: @String = load_struct_member(index_register.1, name_q)
  .loc 1 421 53
  mov rbx, [rbp-48]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $14.1:rax $15.1:rbx 
  # $16.1: @FILE = call(write.339, $14.1, $15.1)
  .loc 1 421 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $16.1:rax 
  # $17.1: @FILE = call(write.339, $16.1, ", ")
  .loc 1 421 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $17.1:rax 
  # $18.1: @FILE = call(write.338, $17.1, result_value_type_size.1)
  .loc 1 421 13
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_338
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $18.1:rax 
  # $19.1: @FILE = call(end_line.342, $18.1)
  .loc 1 421 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # jump(block.6)
.LABEL__generate_load_array_item_instruction_16__6:
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 423 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $20.1:rax 
  # $21.1: @FILE = call(write.339, $20.1, "  add ")
  .loc 1 423 9
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $21.1:rax 
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 423 48
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $21.1:rax $22.1:rbx 
  # $23.1: @FILE = call(write.339, $21.1, $22.1)
  .loc 1 423 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $23.1:rax 
  # $24.1: @FILE = call(write.339, $23.1, ", ")
  .loc 1 423 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $24.1:rax 
  # $25.1: @String = load_struct_member(index_register.1, name_q)
  .loc 1 423 90
  mov rbx, [rbp-48]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $24.1:rax $25.1:rbx 
  # $26.1: @FILE = call(write.339, $24.1, $25.1)
  .loc 1 423 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] $26.1:rax 
  # $27.1: @FILE = call(end_line.342, $26.1)
  .loc 1 423 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # jump(block.3)
  jmp .LABEL__generate_load_array_item_instruction_16__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] index_register.1:[rbp-48] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_register.1
  # [discarded value]: result_value_type_size.1
  # [discarded value]: index_value.1
  # [live values]: 
.LABEL__generate_load_array_item_instruction_16__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_array_item_instruction_16__stack_frame_size: .word 64

  .loc 1 437 1
  .text
generate_load_variable_instruction_17:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_instruction_17__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_instruction_17__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Variable = load_struct_member(instruction.1, variable)
  .loc 1 438 9
  mov rax, rsi
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # IR_Function_Parameter.2: @Object_Type = load_variable(IR_Function_Parameter)
  lea rbx, IR_Function_Parameter[rip]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax IR_Function_Parameter.2:rbx 
  # $2.1: Boolean = call(is.325, $1.1, IR_Function_Parameter.2)
  .loc 1 438 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_325
  # [discarded value]: $1.1
  # [discarded value]: IR_Function_Parameter.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__4
.LABEL__generate_load_variable_instruction_17__2:
  # parameter.1: @IR_Function_Parameter = load_struct_member(instruction.1, variable)
  .loc 1 439 22
  mov rax, [rbp-16]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter.1:rax 
  # $47.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  .loc 1 440 28
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter.1:rax $47.1:rbx 
  # $48.1: @IR_Function = load_struct_member($47.1, function)
  .loc 1 440 28
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter.1:rax $48.1:r15 
  # $49.1: @List = load_struct_member($48.1, parameters)
  .loc 1 440 28
  mov rbx, r15
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter.1:rax $49.1:rbx 
  # parameter_index.1: Int = call(index_of.315, $49.1, parameter.1)
  .loc 1 440 28
  mov rdi, rbx
  mov rsi, rax
  call index_of_315
  # [discarded value]: parameter.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:rax 
  # $51.1: Boolean = parameter_index.1 < 0
  .loc 1 441 13
  cmp rax, 0
  setl bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:rax $51.1:rbx 
  # jump($51.1, block.25, block.26)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__generate_load_variable_instruction_17__26
.LABEL__generate_load_variable_instruction_17__25:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 442 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__26:
  # $52.1: Boolean = parameter_index.1 == 0
  .loc 1 444 13
  cmp QWORD PTR [rbp-24], 0
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $52.1:rax 
  # jump($52.1, block.27, block.29)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__29
.LABEL__generate_load_variable_instruction_17__27:
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 445 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $74.1:rax 
  # $75.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 445 63
  mov rbx, [rbp-8]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $74.1:rax $75.1:rbx 
  # $76.1: @MC_Value = call(map_variable_value.37, self.1, $74.1, $75.1)
  .loc 1 445 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $74.1
  # [discarded value]: $75.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_load_variable_instruction_17__3:
  # return()
  jmp .LABEL__generate_load_variable_instruction_17__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__29:
  # $53.1: Boolean = parameter_index.1 == 1
  .loc 1 446 20
  cmp QWORD PTR [rbp-24], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $53.1:rax 
  # jump($53.1, block.30, block.32)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__32
.LABEL__generate_load_variable_instruction_17__30:
  # $71.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 447 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $71.1:rax 
  # $72.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 447 63
  mov rbx, [rbp-8]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $71.1:rax $72.1:rbx 
  # $73.1: @MC_Value = call(map_variable_value.37, self.1, $71.1, $72.1)
  .loc 1 447 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $71.1
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_17__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__32:
  # $54.1: Boolean = parameter_index.1 == 2
  .loc 1 448 20
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $54.1:rax 
  # jump($54.1, block.33, block.35)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__35
.LABEL__generate_load_variable_instruction_17__33:
  # $68.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 449 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $68.1:rax 
  # $69.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 449 63
  mov rbx, [rbp-8]
  add rbx, 41
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $68.1:rax $69.1:rbx 
  # $70.1: @MC_Value = call(map_variable_value.37, self.1, $68.1, $69.1)
  .loc 1 449 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_17__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__35:
  # $55.1: Boolean = parameter_index.1 == 3
  .loc 1 450 20
  cmp QWORD PTR [rbp-24], 3
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $55.1:rax 
  # jump($55.1, block.36, block.38)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__38
.LABEL__generate_load_variable_instruction_17__36:
  # $65.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 451 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $65.1:rax 
  # $66.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 451 63
  mov rbx, [rbp-8]
  add rbx, 33
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $65.1:rax $66.1:rbx 
  # $67.1: @MC_Value = call(map_variable_value.37, self.1, $65.1, $66.1)
  .loc 1 451 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_17__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__38:
  # $56.1: Boolean = parameter_index.1 == 4
  .loc 1 452 20
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $56.1:rax 
  # jump($56.1, block.39, block.41)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__41
.LABEL__generate_load_variable_instruction_17__39:
  # $62.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 453 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $62.1:rax 
  # $63.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 453 63
  mov rbx, [rbp-8]
  add rbx, 73
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $62.1:rax $63.1:rbx 
  # $64.1: @MC_Value = call(map_variable_value.37, self.1, $62.1, $63.1)
  .loc 1 453 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_17__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__41:
  # $57.1: Boolean = parameter_index.1 == 5
  .loc 1 454 20
  cmp QWORD PTR [rbp-24], 5
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $57.1:rax 
  # jump($57.1, block.42, block.44)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__44
.LABEL__generate_load_variable_instruction_17__42:
  # $59.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 455 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $59.1:rax 
  # $60.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 455 63
  mov rbx, [rbp-8]
  add rbx, 81
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $59.1:rax $60.1:rbx 
  # $61.1: @MC_Value = call(map_variable_value.37, self.1, $59.1, $60.1)
  .loc 1 455 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_load_variable_instruction_17__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
.LABEL__generate_load_variable_instruction_17__44:
  # $58.1: @String = call(clone.329, "Invalid state")
  .loc 1 457 24
  lea rdi, .LABEL__string_42[rip] # "Invalid state"
  call clone_329
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] $58.1:rax 
  # call(abort.31, self.1, $58.1)
  .loc 1 457 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_31
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] parameter_index.1:[rbp-24] 
  # [discarded value]: parameter_index.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
.LABEL__generate_load_variable_instruction_17__4:
  # $3.1: @IR_Variable = load_struct_member(instruction.1, variable)
  .loc 1 459 16
  mov rax, [rbp-16]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax 
  # IR_Global_Variable.3: @Object_Type = load_variable(IR_Global_Variable)
  lea rbx, IR_Global_Variable[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax IR_Global_Variable.3:rbx 
  # $4.1: Boolean = call(is.325, $3.1, IR_Global_Variable.3)
  .loc 1 459 16
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $3.1
  # [discarded value]: IR_Global_Variable.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.7)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__7
.LABEL__generate_load_variable_instruction_17__5:
  # ir_variable_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 460 30
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value.38, self.1, ir_variable_value.1)
  .loc 1 461 21
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rax
  call get_value_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:rax 
  # $12.1: Boolean = mc_value.1 == null
  .loc 1 462 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:rax $12.1:rbx 
  # jump($12.1, block.8, block.9)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__generate_load_variable_instruction_17__9
.LABEL__generate_load_variable_instruction_17__8:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 463 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] 
.LABEL__generate_load_variable_instruction_17__9:
  # address.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 465 20
  mov rax, [rbp-32]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:rax 
  # $14.1: Boolean = address.1 != null
  .loc 1 466 13
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:rax $14.1:rbx 
  # jump($14.1, block.10, block.11)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_load_variable_instruction_17__11
.LABEL__generate_load_variable_instruction_17__10:
  # MC_Global_Variable_Address.2: @Object_Type = load_variable(MC_Global_Variable_Address)
  lea rax, MC_Global_Variable_Address[rip]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] MC_Global_Variable_Address.2:rax 
  # $15.1: Boolean = call(is.325, address.1, MC_Global_Variable_Address.2)
  .loc 1 467 17
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_325
  # [discarded value]: MC_Global_Variable_Address.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $15.1:rax 
  # $16.1: Boolean = $15.1 == false
  .loc 1 467 17
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $16.1:rbx 
  # jump($16.1, block.12, block.13)
  test bl, bl
  jz .LABEL__generate_load_variable_instruction_17__13
.LABEL__generate_load_variable_instruction_17__12:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 468 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
.LABEL__generate_load_variable_instruction_17__13:
  # address.1: @MC_Global_Variable_Address = address.1
  .loc 1 470 24
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] address.1:rax 
  # $18.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  .loc 1 471 17
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $18.1:rbx 
  # $19.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  .loc 1 471 40
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $18.1:rbx $19.1:rax 
  # $20.1: Boolean = $18.1 != $19.1
  .loc 1 471 17
  cmp rbx, rax
  setne r15b
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] $20.1:r15 
  # jump($20.1, block.14, block.15)
  test r15b, r15b
  jz .LABEL__generate_load_variable_instruction_17__15
.LABEL__generate_load_variable_instruction_17__14:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 472 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
.LABEL__generate_load_variable_instruction_17__15:
  # return()
  .loc 1 474 13
  jmp .LABEL__generate_load_variable_instruction_17__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
.LABEL__generate_load_variable_instruction_17__11:
  # ir_variable.1: @IR_Global_Variable = load_struct_member(instruction.1, variable)
  .loc 1 476 24
  mov rax, [rbp-16]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax 
  # $23.1: Boolean = load_struct_member(ir_variable.1, is_external)
  .loc 1 477 13
  mov rbx, rax
  add rbx, 32
  mov bl, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:rax $23.1:rbx 
  # jump($23.1, block.17, block.18)
  test bl, bl
  mov [rbp-48], rax
  jz .LABEL__generate_load_variable_instruction_17__18
.LABEL__generate_load_variable_instruction_17__17:
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 479 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $24.1:rax 
  # $25.1: @MC_Global_Variable_Address = call(create_mc_global_variable_address.49, ir_variable.1)
  .loc 1 479 63
  mov rdi, [rbp-48]
  mov [rbp-56], rax
  call create_mc_global_variable_address_49
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $24.1:[rbp-56] $25.1:rax 
  # call(map_variable_value.36, self.1, $24.1, $25.1)
  .loc 1 479 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call map_variable_value_36
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # return()
  .loc 1 480 13
  jmp .LABEL__generate_load_variable_instruction_17__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
.LABEL__generate_load_variable_instruction_17__18:
  # $26.1: @IR_Type = load_struct_member(ir_variable.1, type)
  .loc 1 482 13
  mov rax, [rbp-48]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $26.1:rax 
  # IR_Pointer_Type.2: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $26.1:rax IR_Pointer_Type.2:rbx 
  # $27.1: Boolean = call(is.325, $26.1, IR_Pointer_Type.2)
  .loc 1 482 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $26.1
  # [discarded value]: IR_Pointer_Type.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $27.1:rax 
  # jump($27.1, block.20, block.21)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__21
.LABEL__generate_load_variable_instruction_17__20:
  # $29.1: @IR_Pointer_Type = load_struct_member(ir_variable.1, type)
  .loc 1 483 30
  mov rax, [rbp-48]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $29.1:rax 
  # pointed_type.1: @IR_Type = load_struct_member($29.1, pointed_type)
  .loc 1 483 30
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] pointed_type.1:rbx 
  # $31.1: @String = load_struct_member(pointed_type.1, name)
  .loc 1 484 17
  mov rax, rbx
  add rax, 8
  mov rax, [rax]
  # [discarded value]: pointed_type.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $31.1:rax 
  # $32.1: Boolean = call(equals.335, $31.1, "Object_Type")
  .loc 1 484 17
  mov rdi, rax
  lea rsi, .LABEL__string_60[rip] # "Object_Type"
  call equals_335
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] $32.1:rax 
  # jump($32.1, block.22, block.21)
  test al, al
  jz .LABEL__generate_load_variable_instruction_17__21
.LABEL__generate_load_variable_instruction_17__22:
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 485 36
  mov rdi, [rbp-8]
  call find_unused_register_34
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:rax 
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 486 17
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:rax $34.1:rbx 
  # $35.1: @FILE = call(write.339, $34.1, "  lea ")
  .loc 1 486 17
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-56], rax
  call write_339
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $35.1:rax 
  # $36.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 486 56
  mov rbx, [rbp-56]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $35.1:rax $36.1:rbx 
  # $37.1: @FILE = call(write.339, $35.1, $36.1)
  .loc 1 486 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $37.1:rax 
  # $38.1: @FILE = call(write.339, $37.1, ", ")
  .loc 1 486 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $38.1:rax 
  # $39.1: @String = load_struct_member(ir_variable.1, name)
  .loc 1 486 98
  mov rbx, [rbp-48]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $38.1:rax $39.1:rbx 
  # $40.1: @FILE = call(write.339, $38.1, $39.1)
  .loc 1 486 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $40.1:rax 
  # $41.1: @FILE = call(write.339, $40.1, "[rip]")
  .loc 1 486 17
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "[rip]"
  call write_339
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $41.1:rax 
  # $42.1: @FILE = call(end_line.342, $41.1)
  .loc 1 486 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] 
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 487 41
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] result_register.1:[rbp-56] $43.1:rax 
  # $44.1: @MC_Value = call(map_variable_value.37, self.1, $43.1, result_register.1)
  .loc 1 487 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-56]
  call map_variable_value_37
  # [discarded value]: result_register.1
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # return()
  .loc 1 488 17
  jmp .LABEL__generate_load_variable_instruction_17__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
.LABEL__generate_load_variable_instruction_17__21:
  # call(abort.31, self.1, "Unsupported non-external variable")
  .loc 1 491 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_62[rip] # "Unsupported non-external variable"
  call abort_31
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] ir_variable.1:[rbp-48] 
  # [discarded value]: ir_variable.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] address.1:[rbp-40] 
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_variable_value.1:[rbp-24] mc_value.1:[rbp-32] 
  # [discarded value]: ir_variable_value.1
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
.LABEL__generate_load_variable_instruction_17__7:
  # $5.1: @String = call(clone.329, "Unsupported variable type: ")
  .loc 1 493 20
  lea rdi, .LABEL__string_63[rip] # "Unsupported variable type: "
  call clone_329
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Variable = load_struct_member(instruction.1, variable)
  .loc 1 493 64
  mov rbx, [rbp-16]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $5.1:rax $6.1:rbx 
  # $7.1: @Object_Type = load_struct_member($6.1, object_type)
  .loc 1 493 64
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $5.1:rax $7.1:r15 
  # $8.1: @String = load_struct_member($7.1, name)
  .loc 1 493 64
  mov rbx, r15
  add rbx, 8
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $5.1:rax $8.1:rbx 
  # $9.1: @String = call(append.332, $5.1, $8.1)
  .loc 1 493 20
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $5.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $9.1:rax 
  # call(abort.31, self.1, $9.1)
  .loc 1 493 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_31
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_load_variable_instruction_17__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_instruction_17__stack_frame_size: .word 64

  .loc 1 497 1
  .text
generate_load_struct_member_instruction_18:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_struct_member_instruction_18__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_struct_member_instruction_18__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 498 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_struct_pointer_value.162, instruction.1)
  .loc 1 499 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_struct_pointer_value_162
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, $2.1)
  .loc 1 499 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 500 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  # $4.1: @MC_Value = call(map_variable_value.37, self.1, $3.1, result_register.1)
  .loc 1 500 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  call map_variable_value_37
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 1 501 50
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  # struct_type_member_offset.1: Int = call(get_offset.29, self.1, $5.1)
  .loc 1 501 34
  mov rdi, [rbp-16]
  mov rsi, rax
  call get_offset_29
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:rax 
  # $7.1: Boolean = struct_type_member_offset.1 > 0
  .loc 1 502 9
  cmp rax, 0
  setg bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:rax $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__generate_load_struct_member_instruction_18__3
.LABEL__generate_load_struct_member_instruction_18__2:
  # $8.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 503 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $8.1:rax 
  # $9.1: @FILE = call(write.339, $8.1, "  add ")
  .loc 1 503 9
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $9.1:rax 
  # $10.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 503 48
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $9.1:rax $10.1:rbx 
  # $11.1: @FILE = call(write.339, $9.1, $10.1)
  .loc 1 503 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $11.1:rax 
  # $12.1: @FILE = call(write.339, $11.1, ", ")
  .loc 1 503 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write.338, $12.1, struct_type_member_offset.1)
  .loc 1 503 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_338
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(end_line.342, $13.1)
  .loc 1 503 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # jump(block.3)
.LABEL__generate_load_struct_member_instruction_18__3:
  # $15.1: Boolean = load_struct_member(instruction.1, load_address)
  .loc 1 505 9
  mov rax, [rbp-8]
  add rax, 65
  mov al, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $15.1:rax 
  # jump($15.1, block.4, block.5)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_18__5
.LABEL__generate_load_struct_member_instruction_18__4:
  # return()
  .loc 1 506 9
  jmp .LABEL__generate_load_struct_member_instruction_18__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
.LABEL__generate_load_struct_member_instruction_18__5:
  # $16.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 508 50
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $16.1:rax 
  # $17.1: @IR_Type = load_struct_member($16.1, type)
  .loc 1 508 50
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $17.1:rbx 
  # result_value_type_size.1: Int = call(get_type_size.51, self.1, $17.1)
  .loc 1 508 31
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_type_size_51
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:rax 
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 509 5
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:rax $19.1:rbx 
  # $20.1: @FILE = call(write.339, $19.1, "  mov ")
  .loc 1 509 5
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  mov "
  mov [rbp-40], rax
  call write_339
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # $21.1: Boolean = result_value_type_size.1 == 8
  .loc 1 510 9
  cmp QWORD PTR [rbp-40], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $21.1:rax 
  # jump($21.1, block.7, block.9)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_18__9
.LABEL__generate_load_struct_member_instruction_18__7:
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 511 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $34.1:rax 
  # $35.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 511 32
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $34.1:rax $35.1:rbx 
  # $36.1: @FILE = call(write.339, $34.1, $35.1)
  .loc 1 511 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # jump(block.8)
.LABEL__generate_load_struct_member_instruction_18__8:
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 521 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $37.1:rax 
  # $38.1: @FILE = call(write.339, $37.1, ", ")
  .loc 1 521 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $38.1:rax 
  # $39.1: @FILE = call(write.341, $38.1, '[')
  .loc 1 521 5
  mov rdi, rax
  mov sil, 91
  call write_341
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $39.1:rax 
  # $40.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 521 51
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $39.1:rax $40.1:rbx 
  # $41.1: @FILE = call(write.339, $39.1, $40.1)
  .loc 1 521 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $41.1:rax 
  # $42.1: @FILE = call(write.341, $41.1, ']')
  .loc 1 521 5
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $42.1:rax 
  # $43.1: @FILE = call(end_line.342, $42.1)
  .loc 1 521 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # return()
  jmp .LABEL__generate_load_struct_member_instruction_18__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
.LABEL__generate_load_struct_member_instruction_18__9:
  # $22.1: Boolean = result_value_type_size.1 == 4
  .loc 1 512 16
  cmp QWORD PTR [rbp-40], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $22.1:rax 
  # jump($22.1, block.10, block.12)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_18__12
.LABEL__generate_load_struct_member_instruction_18__10:
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 513 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $31.1:rax 
  # $32.1: @String = load_struct_member(result_register.1, name_d)
  .loc 1 513 32
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $31.1:rax $32.1:rbx 
  # $33.1: @FILE = call(write.339, $31.1, $32.1)
  .loc 1 513 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # jump(block.8)
  jmp .LABEL__generate_load_struct_member_instruction_18__8
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
.LABEL__generate_load_struct_member_instruction_18__12:
  # $23.1: Boolean = result_value_type_size.1 == 2
  .loc 1 514 16
  cmp QWORD PTR [rbp-40], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $23.1:rax 
  # jump($23.1, block.13, block.15)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_18__15
.LABEL__generate_load_struct_member_instruction_18__13:
  # $28.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 515 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $28.1:rax 
  # $29.1: @String = load_struct_member(result_register.1, name_w)
  .loc 1 515 32
  mov rbx, [rbp-24]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $28.1:rax $29.1:rbx 
  # $30.1: @FILE = call(write.339, $28.1, $29.1)
  .loc 1 515 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # jump(block.8)
  jmp .LABEL__generate_load_struct_member_instruction_18__8
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
.LABEL__generate_load_struct_member_instruction_18__15:
  # $24.1: Boolean = result_value_type_size.1 == 1
  .loc 1 516 16
  cmp QWORD PTR [rbp-40], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $24.1:rax 
  # jump($24.1, block.16, block.18)
  test al, al
  jz .LABEL__generate_load_struct_member_instruction_18__18
.LABEL__generate_load_struct_member_instruction_18__16:
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 517 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $25.1:rax 
  # $26.1: @String = load_struct_member(result_register.1, name_b)
  .loc 1 517 32
  mov rbx, [rbp-24]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] $25.1:rax $26.1:rbx 
  # $27.1: @FILE = call(write.339, $25.1, $26.1)
  .loc 1 517 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # jump(block.8)
  jmp .LABEL__generate_load_struct_member_instruction_18__8
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
.LABEL__generate_load_struct_member_instruction_18__18:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 519 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] result_value_type_size.1:[rbp-40] 
  # [discarded value]: result_value_type_size.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_register.1
  # [discarded value]: struct_type_member_offset.1
  # [live values]: 
.LABEL__generate_load_struct_member_instruction_18__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_struct_member_instruction_18__stack_frame_size: .word 48

  .loc 1 524 1
  .text
generate_modulo_instruction_19:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_modulo_instruction_19__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_modulo_instruction_19__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Modulo_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 525 27
  mov rax, rdi
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # call(release_register.42, self.1, $1.1)
  .loc 1 525 5
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_42
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 526 30
  mov rax, [rbp-16]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  # $3.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 526 49
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_178
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  # call(generate_load_value.28, self.1, $2.1, $3.1)
  .loc 1 526 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 527 5
  mov rax, [rbp-16]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, is_reserved, true)
  .loc 1 527 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 528 27
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # call(release_register.42, self.1, $5.1)
  .loc 1 528 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 529 5
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  # store_struct_member($6.1, is_reserved, true)
  .loc 1 529 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 530 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(write.339, $7.1, "  cqto")
  .loc 1 530 5
  mov rdi, rax
  lea rsi, .LABEL__string_55[rip] # "  cqto"
  call write_339
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(end_line.342, $8.1)
  .loc 1 530 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # right_value.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 531 20
  mov rdi, [rbp-8]
  call get_right_value_179
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  # IR_Constant_Value.4: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax IR_Constant_Value.4:rbx 
  # $11.1: Boolean = call(is.325, right_value.1, IR_Constant_Value.4)
  .loc 1 532 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: IR_Constant_Value.4
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_modulo_instruction_19__4
.LABEL__generate_modulo_instruction_19__2:
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 533 21
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # store_struct_member(register.1, is_reserved, true)
  .loc 1 534 9
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:rax 
  # call(generate_load_value.28, self.1, register.1, right_value.1)
  .loc 1 535 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 536 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $17.1:rax 
  # $18.1: @FILE = call(write.339, $17.1, "  idiv ")
  .loc 1 536 9
  mov rdi, rax
  lea rsi, .LABEL__string_56[rip] # "  idiv "
  call write_339
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $18.1:rax 
  # $19.1: @String = load_struct_member(register.1, name_q)
  .loc 1 536 49
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $18.1:rax $19.1:rbx 
  # $20.1: @FILE = call(write.339, $18.1, $19.1)
  .loc 1 536 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] $20.1:rax 
  # $21.1: @FILE = call(end_line.342, $20.1)
  .loc 1 536 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] register.1:[rbp-32] 
  # store_struct_member(register.1, is_reserved, false)
  .loc 1 537 9
  mov rax, [rbp-32]
  add rax, 40
  mov BYTE PTR [rax], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_modulo_instruction_19__3:
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 541 5
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $22.1:rax 
  # store_struct_member($22.1, is_reserved, false)
  .loc 1 541 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 0
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 542 5
  mov rax, [rbp-16]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $23.1:rax 
  # store_struct_member($23.1, is_reserved, false)
  .loc 1 542 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 0
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 543 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $24.1:rax 
  # $25.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 543 55
  mov rbx, [rbp-16]
  add rbx, 41
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $24.1:rax $25.1:rbx 
  # $26.1: @MC_Value = call(map_variable_value.37, self.1, $24.1, $25.1)
  .loc 1 543 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # return()
  jmp .LABEL__generate_modulo_instruction_19__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
.LABEL__generate_modulo_instruction_19__4:
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 539 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $12.1:rax 
  # $13.1: @FILE = call(write.339, $12.1, "  idiv ")
  .loc 1 539 9
  mov rdi, rax
  lea rsi, .LABEL__string_56[rip] # "  idiv "
  call write_339
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write_operand.30, $13.1, self.1, right_value.1)
  .loc 1 539 9
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_30
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(end_line.342, $14.1)
  .loc 1 539 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # jump(block.3)
  jmp .LABEL__generate_modulo_instruction_19__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__generate_modulo_instruction_19__end:
  mov rsp, rbp
  pop rbp
  ret

generate_modulo_instruction_19__stack_frame_size: .word 32

  .loc 1 546 1
  .text
generate_multiply_instruction_20:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_multiply_instruction_20__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_multiply_instruction_20__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Multiply_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 547 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 548 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_178
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, $2.1)
  .loc 1 548 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 549 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  # $4.1: @MC_Value = call(map_variable_value.37, self.1, $3.1, result_register.1)
  .loc 1 549 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  call map_variable_value_37
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 550 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, "  imul ")
  .loc 1 550 5
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # "  imul "
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 550 45
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.339, $6.1, $7.1)
  .loc 1 550 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write.339, $8.1, ", ")
  .loc 1 550 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 550 101
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_operand.30, $9.1, self.1, $10.1)
  .loc 1 550 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_30
  # [discarded value]: self.1
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # $12.1: @FILE = call(end_line.342, $11.1)
  .loc 1 550 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_multiply_instruction_20__end
  # [live values]: 
.LABEL__generate_multiply_instruction_20__end:
  mov rsp, rbp
  pop rbp
  ret

generate_multiply_instruction_20__stack_frame_size: .word 32

  .loc 1 553 1
  .text
generate_new_instruction_21:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_new_instruction_21__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_new_instruction_21__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_New_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # call(release_all_registers.41, self.1)
  .loc 1 554 5
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_41
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 555 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(write.339, $1.1, "  mov ")
  .loc 1 555 5
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 555 44
  mov rbx, [rbp-16]
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax $3.1:rbx 
  # $4.1: @String = load_struct_member($3.1, name_q)
  .loc 1 555 44
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax $4.1:r15 
  # $5.1: @FILE = call(write.339, $2.1, $4.1)
  .loc 1 555 5
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $2.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, ", ")
  .loc 1 555 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  # $7.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 1 555 107
  mov rbx, [rbp-8]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: Int = call(get_type_size.51, self.1, $7.1)
  .loc 1 555 88
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call get_type_size_51
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:[rbp-24] $8.1:rax 
  # $9.1: @FILE = call(write.338, $6.1, $8.1)
  .loc 1 555 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call write_338
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @FILE = call(end_line.342, $9.1)
  .loc 1 555 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $11.1: @IR_Value = call(get_size_value.165, instruction.1)
  .loc 1 556 9
  mov rdi, [rbp-8]
  call get_size_value_165
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:rax 
  # $12.1: Boolean = $11.1 != null
  .loc 1 556 9
  cmp rax, 0
  setne bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rbx 
  # jump($12.1, block.2, block.3)
  test bl, bl
  jz .LABEL__generate_new_instruction_21__3
.LABEL__generate_new_instruction_21__2:
  # call(abort.31, self.1, "TODO: compute array size")
  .loc 1 557 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_64[rip] # "TODO: compute array size"
  call abort_31
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__generate_new_instruction_21__3:
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 559 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, "  call ")
  .loc 1 559 5
  mov rdi, rax
  lea rsi, .LABEL__string_37[rip] # "  call "
  call write_339
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $14.1:rax 
  # $15.1: @FILE = call(write.339, $14.1, "malloc")
  .loc 1 559 5
  mov rdi, rax
  lea rsi, .LABEL__string_65[rip] # "malloc"
  call write_339
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $15.1:rax 
  # $16.1: @FILE = call(end_line.342, $15.1)
  .loc 1 559 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $17.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 560 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $17.1:rax 
  # $18.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 560 55
  mov rbx, [rbp-16]
  add rbx, 25
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $17.1:rax $18.1:rbx 
  # $19.1: @MC_Value = call(map_variable_value.37, self.1, $17.1, $18.1)
  .loc 1 560 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call map_variable_value_37
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # $20.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 1 562 9
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $20.1:rax 
  # IR_Struct_Type.2: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $20.1:rax IR_Struct_Type.2:rbx 
  # $22.1: Boolean = call(is.325, $20.1, IR_Struct_Type.2)
  .loc 1 562 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $20.1
  # [discarded value]: IR_Struct_Type.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:rax 
  # jump($22.1, block.4, block.5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_new_instruction_21__5
.LABEL__generate_new_instruction_21__4:
  # $24.1: @IR_Struct_Type = load_struct_member(instruction.1, type)
  .loc 1 562 49
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $24.1:rax 
  # $22.2: Boolean = call(is_object_type.139, $24.1)
  .loc 1 562 49
  mov rdi, rax
  call is_object_type_139
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:rax[rbp-17] 
  # jump(block.5)
  mov [rbp-17], al
.LABEL__generate_new_instruction_21__5:
  # $22.3: Boolean = phi($22.1, $22.2)
  .loc 1 562 9
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] $22.3:[rbp-17] 
  # jump($22.3, block.6, block.7)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__generate_new_instruction_21__7
.LABEL__generate_new_instruction_21__6:
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 563 21
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [discarded value]: $22.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:rax 
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 564 9
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:rax $27.1:rbx 
  # $28.1: @FILE = call(write.339, $27.1, "  lea ")
  .loc 1 564 9
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-25], rax
  call write_339
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $28.1:rax 
  # $29.1: @String = load_struct_member(register.1, name_q)
  .loc 1 564 48
  mov rbx, [rbp-25]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $28.1:rax $29.1:rbx 
  # $30.1: @FILE = call(write.339, $28.1, $29.1)
  .loc 1 564 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $30.1:rax 
  # $31.1: @FILE = call(write.339, $30.1, ", ")
  .loc 1 564 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $31.1:rax 
  # $32.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 1 564 94
  mov rbx, [rbp-8]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $31.1:rax $32.1:rbx 
  # $33.1: @FILE = call(write_type_label.56, $31.1, $32.1)
  .loc 1 564 9
  mov rdi, rax
  mov rsi, rbx
  call write_type_label_56
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $33.1:rax 
  # $34.1: @FILE = call(write.339, $33.1, "[rip]")
  .loc 1 564 9
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "[rip]"
  call write_339
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $34.1:rax 
  # $35.1: @FILE = call(end_line.342, $34.1)
  .loc 1 564 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $34.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] 
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 565 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $36.1:rax 
  # $37.1: @FILE = call(write.339, $36.1, "  mov ")
  .loc 1 565 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $37.1:rax 
  # $38.1: @FILE = call(write.341, $37.1, '[')
  .loc 1 565 9
  mov rdi, rax
  mov sil, 91
  call write_341
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $38.1:rax 
  # $39.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 565 59
  mov rbx, [rbp-16]
  add rbx, 25
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $38.1:rax $39.1:rbx 
  # $40.1: @String = load_struct_member($39.1, name_q)
  .loc 1 565 59
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $38.1:rax $40.1:r15 
  # $41.1: @FILE = call(write.339, $38.1, $40.1)
  .loc 1 565 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $38.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $41.1:rax 
  # $42.1: @FILE = call(write.341, $41.1, ']')
  .loc 1 565 9
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $42.1:rax 
  # $43.1: @FILE = call(write.339, $42.1, ", ")
  .loc 1 565 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] register.1:[rbp-25] $43.1:rax 
  # $44.1: @String = load_struct_member(register.1, name_q)
  .loc 1 565 114
  mov rbx, [rbp-25]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] $43.1:rax $44.1:rbx 
  # $45.1: @FILE = call(write.339, $43.1, $44.1)
  .loc 1 565 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] $45.1:rax 
  # $46.1: @FILE = call(end_line.342, $45.1)
  .loc 1 565 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # jump(block.7)
.LABEL__generate_new_instruction_21__7:
  # return()
  jmp .LABEL__generate_new_instruction_21__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] $22.2:[rbp-17] 
  # [discarded value]: $22.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $22.1:[rbp-17] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__generate_new_instruction_21__end:
  mov rsp, rbp
  pop rbp
  ret

generate_new_instruction_21__stack_frame_size: .word 32

  .loc 1 569 1
  .text
generate_phi_instruction_22:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_phi_instruction_22__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_phi_instruction_22__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Phi_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 570 24
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # result_variable.1: @IR_Variable = load_struct_member($1.1, variable)
  .loc 1 570 24
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx 
  # $3.1: @List = load_struct_member(instruction.1, values)
  .loc 1 571 31
  mov rax, rsi
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx $3.1:rax 
  # instruction_value_item.1: @List_Item = load_struct_member($3.1, first_item)
  .loc 1 571 31
  mov r15, rax
  mov r15, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx instruction_value_item.1:r15 
  # jump(block.2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
.LABEL__generate_phi_instruction_22__2:
  # instruction_value_item.2: @List_Item = phi(instruction_value_item.1, instruction_value_item.5)
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
  # $5.1: Boolean = instruction_value_item.2 != null
  .loc 1 572 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_phi_instruction_22__4
.LABEL__generate_phi_instruction_22__3:
  # instruction_value.1: @IR_Variable_Value = load_struct_member(instruction_value_item.2, data)
  .loc 1 573 30
  mov rax, [rbp-32]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:rax 
  # $8.1: @IR_Variable = load_struct_member(instruction_value.1, variable)
  .loc 1 574 32
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:rax $8.1:rbx 
  # $9.1: Boolean = result_variable.1 != $8.1
  .loc 1 574 13
  cmp QWORD PTR [rbp-8], rbx
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:rax $9.1:r15 
  # jump($9.1, block.5, block.6)
  test r15b, r15b
  mov [rbp-40], rax
  jz .LABEL__generate_phi_instruction_22__6
.LABEL__generate_phi_instruction_22__5:
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 575 32
  mov rdi, [rbp-24]
  call find_unused_register_34
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] result_register.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, instruction_value.1)
  .loc 1 576 13
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-40]
  mov [rbp-48], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] result_register.1:[rbp-48] 
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 577 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] result_register.1:[rbp-48] $11.1:rax 
  # $12.1: @MC_Value = call(map_variable_value.37, self.1, $11.1, result_register.1)
  .loc 1 577 13
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-48]
  call map_variable_value_37
  # [discarded value]: result_register.1
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
  # return()
  .loc 1 578 13
  jmp .LABEL__generate_phi_instruction_22__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
.LABEL__generate_phi_instruction_22__6:
  # instruction_value_item.5: @List_Item = load_struct_member(instruction_value_item.2, next_item)
  .loc 1 580 34
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] instruction_value_item.5:rax[rbp-32] 
  # jump(block.2)
  mov [rbp-32], rax
  jmp .LABEL__generate_phi_instruction_22__2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] instruction_value_item.5:[rbp-32] 
  # [discarded value]: instruction_value_item.5
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] instruction_value.1:[rbp-40] 
  # [discarded value]: instruction_value.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
.LABEL__generate_phi_instruction_22__4:
  # return()
  jmp .LABEL__generate_phi_instruction_22__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] instruction_value_item.2:[rbp-32] 
  # [discarded value]: instruction_value_item.2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_value_item.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_variable.1
  # [discarded value]: instruction_value_item.1
  # [live values]: 
.LABEL__generate_phi_instruction_22__end:
  mov rsp, rbp
  pop rbp
  ret

generate_phi_instruction_22__stack_frame_size: .word 48

  .loc 1 584 1
  .text
generate_return_instruction_23:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_return_instruction_23__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_return_instruction_23__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Return_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # return_value.1: @IR_Value = call(get_return_value.167, instruction.1)
  .loc 1 585 21
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_return_value_167
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax 
  # $2.1: Boolean = return_value.1 != null
  .loc 1 586 9
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__generate_return_instruction_23__3
.LABEL__generate_return_instruction_23__2:
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 587 34
  mov rax, [rbp-8]
  add rax, 25
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $3.1:rax 
  # call(generate_load_value.28, self.1, $3.1, return_value.1)
  .loc 1 587 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  call generate_load_value_28
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__generate_return_instruction_23__3:
  # call(release_all_registers.41, self.1)
  .loc 1 589 5
  mov rdi, [rbp-8]
  call release_all_registers_41
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 590 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $4.1:rax 
  # $5.1: @FILE = call(write.339, $4.1, "  jmp ")
  .loc 1 590 5
  mov rdi, rax
  lea rsi, .LABEL__string_54[rip] # "  jmp "
  call write_339
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $5.1:rax 
  # $6.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  .loc 1 590 63
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $5.1:rax $6.1:rbx 
  # $7.1: @IR_Function = load_struct_member($6.1, function)
  .loc 1 590 63
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $5.1:rax $7.1:r15 
  # $8.1: @FILE = call(write_function_end_label.4, $5.1, $7.1)
  .loc 1 590 5
  mov rdi, rax
  mov rsi, r15
  call write_function_end_label_4
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $8.1:rax 
  # $9.1: @FILE = call(end_line.342, $8.1)
  .loc 1 590 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # return()
  jmp .LABEL__generate_return_instruction_23__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: return_value.1
  # [live values]: 
.LABEL__generate_return_instruction_23__end:
  mov rsp, rbp
  pop rbp
  ret

generate_return_instruction_23__stack_frame_size: .word 32

  .loc 1 593 1
  .text
generate_set_instruction_24:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_set_instruction_24__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_set_instruction_24__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Set_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 594 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # result_value.1: @IR_Value = call(get_value.169, instruction.1)
  .loc 1 595 21
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_value_169
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:rax 
  # IR_Undefined_Value.2: @Object_Type = load_variable(IR_Undefined_Value)
  lea rbx, IR_Undefined_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:rax IR_Undefined_Value.2:rbx 
  # $3.1: Boolean = call(is.325, result_value.1, IR_Undefined_Value.2)
  .loc 1 596 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-32], rax
  call is_325
  # [discarded value]: IR_Undefined_Value.2
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__generate_set_instruction_24__3
.LABEL__generate_set_instruction_24__2:
  # $4.1: @String = call(clone.329, "Looks like ")
  .loc 1 597 20
  lea rdi, .LABEL__string_66[rip] # "Looks like "
  call clone_329
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $4.1:rax 
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 597 48
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $4.1:rax $5.1:rbx 
  # $6.1: @IR_Variable = load_struct_member($5.1, variable)
  .loc 1 597 48
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $4.1:rax $6.1:r15 
  # $7.1: @String = load_struct_member($6.1, name)
  .loc 1 597 48
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $4.1:rax $7.1:rbx 
  # $8.1: @String = call(append.332, $4.1, $7.1)
  .loc 1 597 20
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $8.1:rax 
  # $9.1: @String = call(append.332, $8.1, " is not properly initialized")
  .loc 1 597 20
  mov rdi, rax
  lea rsi, .LABEL__string_67[rip] # " is not properly initialized"
  call append_332
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $9.1:rax 
  # call(abort.31, self.1, $9.1)
  .loc 1 597 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_31
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] 
.LABEL__generate_set_instruction_24__3:
  # call(generate_load_value.28, self.1, result_register.1, result_value.1)
  .loc 1 599 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call generate_load_value_28
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] 
  # $10.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 600 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] $10.1:rax 
  # $11.1: @MC_Value = call(map_variable_value.37, self.1, $10.1, result_register.1)
  .loc 1 600 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  call map_variable_value_37
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] 
  # return()
  jmp .LABEL__generate_set_instruction_24__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: result_register.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__generate_set_instruction_24__end:
  mov rsp, rbp
  pop rbp
  ret

generate_set_instruction_24__stack_frame_size: .word 32

  .loc 1 603 1
  .text
generate_store_array_item_instruction_25:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_array_item_instruction_25__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_array_item_instruction_25__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # address_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 604 25
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  # store_struct_member(address_register.1, is_reserved, true)
  .loc 1 605 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  # $2.1: @IR_Value = call(get_array_value.171, instruction.1)
  .loc 1 606 48
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_171
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, address_register.1, $2.1)
  .loc 1 606 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] 
  # ir_value.1: @IR_Value = call(get_value.173, instruction.1)
  .loc 1 608 17
  mov rdi, [rbp-8]
  call get_value_173
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax 
  # $4.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 609 46
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax $4.1:rbx 
  # ir_value_type_size.1: Int = call(get_type_size.51, self.1, $4.1)
  .loc 1 609 27
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call get_type_size_51
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:rax 
  # index_value.1: @IR_Value = call(get_index_value.172, instruction.1)
  .loc 1 611 20
  mov rdi, [rbp-8]
  mov [rbp-40], rax
  call get_index_value_172
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax 
  # IR_Constant_Value.5: @Object_Type = load_variable(IR_Constant_Value)
  lea rbx, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax IR_Constant_Value.5:rbx 
  # $7.1: Boolean = call(is.325, index_value.1, IR_Constant_Value.5)
  .loc 1 612 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_325
  # [discarded value]: IR_Constant_Value.5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:rax 
  # jump($7.1, block.2, block.4)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__4
.LABEL__generate_store_array_item_instruction_25__2:
  # index_value.1: @IR_Constant_Value = index_value.1
  .loc 1 613 24
  mov rax, [rbp-48]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax 
  # $27.1: @Literal_Token = load_struct_member(index_value.1, literal)
  .loc 1 614 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax $27.1:rbx 
  # Integer_Token.3: @Object_Type = load_variable(Integer_Token)
  lea r15, Integer_Token[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:rax $27.1:rbx Integer_Token.3:r15 
  # $28.1: Boolean = call(is.325, $27.1, Integer_Token.3)
  .loc 1 614 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-56], rax
  call is_325
  # [discarded value]: $27.1
  # [discarded value]: Integer_Token.3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $28.1:rax 
  # $29.1: Boolean = $28.1 == false
  .loc 1 614 13
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $29.1:rbx 
  # jump($29.1, block.7, block.8)
  test bl, bl
  jz .LABEL__generate_store_array_item_instruction_25__8
.LABEL__generate_store_array_item_instruction_25__7:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 615 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
.LABEL__generate_store_array_item_instruction_25__8:
  # $31.1: @Integer_Token = load_struct_member(index_value.1, literal)
  .loc 1 617 25
  mov rax, [rbp-56]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $31.1:rax 
  # index_value.1: Int = load_struct_member($31.1, value)
  .loc 1 617 25
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:rbx 
  # $33.1: Boolean = index_value.1 != 0
  .loc 1 618 13
  cmp rbx, 0
  setne al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:rbx $33.1:rax 
  # jump($33.1, block.9, block.3)
  test al, al
  mov [rbp-64], rbx
  jz .LABEL__generate_store_array_item_instruction_25__3
.LABEL__generate_store_array_item_instruction_25__9:
  # $34.1: Boolean = index_value.1 < 0
  .loc 1 619 17
  cmp QWORD PTR [rbp-64], 0
  setl al
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $34.1:rax 
  # jump($34.1, block.11, block.12)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__12
.LABEL__generate_store_array_item_instruction_25__11:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 620 17
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
.LABEL__generate_store_array_item_instruction_25__12:
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 622 13
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $35.1:rax 
  # $36.1: @FILE = call(write.339, $35.1, "  add ")
  .loc 1 622 13
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $36.1:rax 
  # $37.1: @String = load_struct_member(address_register.1, name_q)
  .loc 1 622 52
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $36.1:rax $37.1:rbx 
  # $38.1: @FILE = call(write.339, $36.1, $37.1)
  .loc 1 622 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $38.1:rax 
  # $39.1: @FILE = call(write.339, $38.1, ", ")
  .loc 1 622 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $39.1:rax 
  # $40.1: Int = index_value.1 * ir_value_type_size.1
  .loc 1 622 95
  mov rbx, [rbp-64]
  imul rbx, QWORD PTR [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $39.1:rax $40.1:rbx 
  # $41.1: @FILE = call(write.338, $39.1, $40.1)
  .loc 1 622 13
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] $41.1:rax 
  # $42.1: @FILE = call(end_line.342, $41.1)
  .loc 1 622 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # jump(block.3)
.LABEL__generate_store_array_item_instruction_25__3:
  # IR_Variable_Value.5: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] IR_Variable_Value.5:rax index_value.1:[rbp-64] 
  # $43.1: Boolean = call(is.325, ir_value.1, IR_Variable_Value.5)
  .loc 1 635 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.5
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] $43.1:rax index_value.1:[rbp-64] 
  # jump($43.1, block.13, block.14)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__14
.LABEL__generate_store_array_item_instruction_25__13:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 1 636 21
  mov rax, [rbp-32]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value.38, self.1, ir_value.1)
  .loc 1 637 21
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-72], rax
  call get_value_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] mc_value.1:rax 
  # $46.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 638 13
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $46.1:rbx 
  # $47.1: Boolean = $46.1 == null
  .loc 1 638 13
  cmp rbx, 0
  sete al
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $47.1:rax 
  # jump($47.1, block.15, block.14)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__14
.LABEL__generate_store_array_item_instruction_25__15:
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 639 25
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] register.1:rax 
  # call(generate_load_value.28, self.1, register.1, ir_value.1)
  .loc 1 640 13
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-72]
  mov [rbp-80], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] register.1:[rbp-80] 
  # $49.1: @MC_Value = call(map_variable_value.37, self.1, ir_value.1, register.1)
  .loc 1 641 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-72]
  mov rdx, [rbp-80]
  call map_variable_value_37
  # [discarded value]: register.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.14)
.LABEL__generate_store_array_item_instruction_25__14:
  # $50.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 645 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $50.1:rax 
  # $51.1: @FILE = call(write.339, $50.1, "  mov ")
  .loc 1 645 5
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $50.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # $52.1: Boolean = ir_value_type_size.1 == 8
  .loc 1 646 9
  cmp QWORD PTR [rbp-40], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $52.1:rax 
  # jump($52.1, block.17, block.19)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__19
.LABEL__generate_store_array_item_instruction_25__17:
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 647 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $62.1:rax 
  # $63.1: @FILE = call(write.339, $62.1, "QWORD PTR ")
  .loc 1 647 9
  mov rdi, rax
  lea rsi, .LABEL__string_68[rip] # "QWORD PTR "
  call write_339
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
.LABEL__generate_store_array_item_instruction_25__18:
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 657 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $64.1:rax 
  # $65.1: @FILE = call(write.341, $64.1, '[')
  .loc 1 657 5
  mov rdi, rax
  mov sil, 91
  call write_341
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $65.1:rax 
  # $66.1: @String = load_struct_member(address_register.1, name_q)
  .loc 1 657 39
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $65.1:rax $66.1:rbx 
  # $67.1: @FILE = call(write.339, $65.1, $66.1)
  .loc 1 657 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $67.1:rax 
  # $68.1: @FILE = call(write.341, $67.1, ']')
  .loc 1 657 5
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $68.1:rax 
  # $69.1: @FILE = call(write.339, $68.1, ", ")
  .loc 1 657 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $69.1:rax 
  # $70.1: @FILE = call(write_operand.30, $69.1, self.1, ir_value.1)
  .loc 1 657 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-32]
  call write_operand_30
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $70.1:rax 
  # $71.1: @FILE = call(end_line.342, $70.1)
  .loc 1 657 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # store_struct_member(address_register.1, is_reserved, false)
  .loc 1 658 5
  mov rax, [rbp-24]
  add rax, 40
  mov BYTE PTR [rax], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # return()
  jmp .LABEL__generate_store_array_item_instruction_25__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_25__19:
  # $53.1: Boolean = ir_value_type_size.1 == 4
  .loc 1 648 16
  cmp QWORD PTR [rbp-40], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $53.1:rax 
  # jump($53.1, block.20, block.22)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__22
.LABEL__generate_store_array_item_instruction_25__20:
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 649 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $60.1:rax 
  # $61.1: @FILE = call(write.339, $60.1, "DWORD PTR ")
  .loc 1 649 9
  mov rdi, rax
  lea rsi, .LABEL__string_69[rip] # "DWORD PTR "
  call write_339
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
  jmp .LABEL__generate_store_array_item_instruction_25__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_25__22:
  # $54.1: Boolean = ir_value_type_size.1 == 2
  .loc 1 650 16
  cmp QWORD PTR [rbp-40], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $54.1:rax 
  # jump($54.1, block.23, block.25)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__25
.LABEL__generate_store_array_item_instruction_25__23:
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 651 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $58.1:rax 
  # $59.1: @FILE = call(write.339, $58.1, "WORD PTR ")
  .loc 1 651 9
  mov rdi, rax
  lea rsi, .LABEL__string_70[rip] # "WORD PTR "
  call write_339
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
  jmp .LABEL__generate_store_array_item_instruction_25__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_25__25:
  # $55.1: Boolean = ir_value_type_size.1 == 1
  .loc 1 652 16
  cmp QWORD PTR [rbp-40], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $55.1:rax 
  # jump($55.1, block.26, block.28)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__28
.LABEL__generate_store_array_item_instruction_25__26:
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 653 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] $56.1:rax 
  # $57.1: @FILE = call(write.339, $56.1, "BYTE PTR ")
  .loc 1 653 9
  mov rdi, rax
  lea rsi, .LABEL__string_71[rip] # "BYTE PTR "
  call write_339
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # jump(block.18)
  jmp .LABEL__generate_store_array_item_instruction_25__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
.LABEL__generate_store_array_item_instruction_25__28:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 655 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] ir_value.1:[rbp-72] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] index_value.1:[rbp-64] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_value.1:[rbp-56] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
.LABEL__generate_store_array_item_instruction_25__4:
  # index_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 625 27
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rax 
  # store_struct_member(index_register.1, is_reserved, true)
  .loc 1 626 9
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:rax 
  # $9.1: @IR_Value = call(get_index_value.172, instruction.1)
  .loc 1 627 50
  mov rdi, [rbp-8]
  mov [rbp-56], rax
  call get_index_value_172
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $9.1:rax 
  # call(generate_load_value.28, self.1, index_register.1, $9.1)
  .loc 1 627 9
  mov rdi, [rbp-16]
  mov rsi, [rbp-56]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # $10.1: Boolean = ir_value_type_size.1 > 1
  .loc 1 628 13
  cmp QWORD PTR [rbp-40], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $10.1:rax 
  # jump($10.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_store_array_item_instruction_25__6
.LABEL__generate_store_array_item_instruction_25__5:
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 629 13
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $11.1:rax 
  # $12.1: @FILE = call(write.339, $11.1, "  imul ")
  .loc 1 629 13
  mov rdi, rax
  lea rsi, .LABEL__string_59[rip] # "  imul "
  call write_339
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $12.1:rax 
  # $13.1: @String = load_struct_member(index_register.1, name_q)
  .loc 1 629 53
  mov rbx, [rbp-56]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $12.1:rax $13.1:rbx 
  # $14.1: @FILE = call(write.339, $12.1, $13.1)
  .loc 1 629 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $14.1:rax 
  # $15.1: @FILE = call(write.339, $14.1, ", ")
  .loc 1 629 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $15.1:rax 
  # $16.1: @FILE = call(write.338, $15.1, ir_value_type_size.1)
  .loc 1 629 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_338
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 629 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # jump(block.6)
.LABEL__generate_store_array_item_instruction_25__6:
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 631 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $18.1:rax 
  # $19.1: @FILE = call(write.339, $18.1, "  add ")
  .loc 1 631 9
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $19.1:rax 
  # $20.1: @String = load_struct_member(address_register.1, name_q)
  .loc 1 631 48
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $19.1:rax $20.1:rbx 
  # $21.1: @FILE = call(write.339, $19.1, $20.1)
  .loc 1 631 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $21.1:rax 
  # $22.1: @FILE = call(write.339, $21.1, ", ")
  .loc 1 631 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $22.1:rax 
  # $23.1: @String = load_struct_member(index_register.1, name_q)
  .loc 1 631 91
  mov rbx, [rbp-56]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $22.1:rax $23.1:rbx 
  # $24.1: @FILE = call(write.339, $22.1, $23.1)
  .loc 1 631 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] $24.1:rax 
  # $25.1: @FILE = call(end_line.342, $24.1)
  .loc 1 631 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # store_struct_member(index_register.1, is_reserved, false)
  .loc 1 632 9
  mov rax, [rbp-56]
  add rax, 40
  mov BYTE PTR [rax], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # jump(block.3)
  jmp .LABEL__generate_store_array_item_instruction_25__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] index_register.1:[rbp-56] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: address_register.1
  # [discarded value]: ir_value.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: index_value.1
  # [live values]: 
.LABEL__generate_store_array_item_instruction_25__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_array_item_instruction_25__stack_frame_size: .word 80

  .loc 1 661 1
  .text
generate_store_struct_member_instruction_26:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_member_instruction_26__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_member_instruction_26__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # address_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 662 25
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  # store_struct_member(address_register.1, is_reserved, true)
  .loc 1 663 5
  mov rbx, rax
  add rbx, 40
  mov BYTE PTR [rbx], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  # $2.1: @IR_Value = call(get_struct_pointer_value.175, instruction.1)
  .loc 1 664 48
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_struct_pointer_value_175
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, address_register.1, $2.1)
  .loc 1 664 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] 
  # $3.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 1 665 50
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $3.1:rax 
  # struct_type_member_offset.1: Int = call(get_offset.29, self.1, $3.1)
  .loc 1 665 34
  mov rdi, [rbp-16]
  mov rsi, rax
  call get_offset_29
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:rax 
  # $5.1: Boolean = struct_type_member_offset.1 > 0
  .loc 1 666 9
  cmp rax, 0
  setg bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:rax $5.1:rbx 
  # jump($5.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__generate_store_struct_member_instruction_26__3
.LABEL__generate_store_struct_member_instruction_26__2:
  # $6.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 667 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $6.1:rax 
  # $7.1: @FILE = call(write.339, $6.1, "  add ")
  .loc 1 667 9
  mov rdi, rax
  lea rsi, .LABEL__string_35[rip] # "  add "
  call write_339
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $7.1:rax 
  # $8.1: @String = load_struct_member(address_register.1, name_q)
  .loc 1 667 48
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $7.1:rax $8.1:rbx 
  # $9.1: @FILE = call(write.339, $7.1, $8.1)
  .loc 1 667 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $9.1:rax 
  # $10.1: @FILE = call(write.339, $9.1, ", ")
  .loc 1 667 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $10.1:rax 
  # $11.1: @FILE = call(write.338, $10.1, struct_type_member_offset.1)
  .loc 1 667 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_338
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] $11.1:rax 
  # $12.1: @FILE = call(end_line.342, $11.1)
  .loc 1 667 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # jump(block.3)
.LABEL__generate_store_struct_member_instruction_26__3:
  # ir_value.1: @IR_Value = call(get_value.176, instruction.1)
  .loc 1 669 17
  mov rdi, [rbp-8]
  call get_value_176
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:rax 
  # IR_Variable_Value.6: @Object_Type = load_variable(IR_Variable_Value)
  lea rbx, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:rax IR_Variable_Value.6:rbx 
  # $14.1: Boolean = call(is.325, ir_value.1, IR_Variable_Value.6)
  .loc 1 670 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-40], rax
  call is_325
  # [discarded value]: IR_Variable_Value.6
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] $14.1:rax 
  # jump($14.1, block.4, block.5)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_26__5
.LABEL__generate_store_struct_member_instruction_26__4:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 1 671 21
  mov rax, [rbp-40]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value.38, self.1, ir_value.1)
  .loc 1 672 21
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-48], rax
  call get_value_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] mc_value.1:rax 
  # $17.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 673 13
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] $17.1:rbx 
  # $18.1: Boolean = $17.1 == null
  .loc 1 673 13
  cmp rbx, 0
  sete al
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] $18.1:rax 
  # jump($18.1, block.6, block.5)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_26__5
.LABEL__generate_store_struct_member_instruction_26__6:
  # register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 674 25
  mov rdi, [rbp-16]
  call find_unused_register_34
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] register.1:rax 
  # call(generate_load_value.28, self.1, register.1, ir_value.1)
  .loc 1 675 13
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-48]
  mov [rbp-56], rax
  call generate_load_value_28
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] register.1:[rbp-56] 
  # $20.1: @MC_Value = call(map_variable_value.37, self.1, ir_value.1, register.1)
  .loc 1 676 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-48]
  mov rdx, [rbp-56]
  call map_variable_value_37
  # [discarded value]: register.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] 
  # jump(block.5)
.LABEL__generate_store_struct_member_instruction_26__5:
  # $21.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 679 46
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] $21.1:rax 
  # ir_value_type_size.1: Int = call(get_type_size.51, self.1, $21.1)
  .loc 1 679 27
  mov rdi, [rbp-16]
  mov rsi, rax
  call get_type_size_51
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:rax 
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 680 5
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:rax $23.1:rbx 
  # $24.1: @FILE = call(write.339, $23.1, "  mov ")
  .loc 1 680 5
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  mov "
  mov [rbp-56], rax
  call write_339
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # $25.1: Boolean = ir_value_type_size.1 == 8
  .loc 1 681 9
  cmp QWORD PTR [rbp-56], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $25.1:rax 
  # jump($25.1, block.8, block.10)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_26__10
.LABEL__generate_store_struct_member_instruction_26__8:
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 682 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $35.1:rax 
  # $36.1: @FILE = call(write.339, $35.1, "QWORD PTR ")
  .loc 1 682 9
  mov rdi, rax
  lea rsi, .LABEL__string_68[rip] # "QWORD PTR "
  call write_339
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # jump(block.9)
.LABEL__generate_store_struct_member_instruction_26__9:
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 692 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $37.1:rax 
  # $38.1: @FILE = call(write.341, $37.1, '[')
  .loc 1 692 5
  mov rdi, rax
  mov sil, 91
  call write_341
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $38.1:rax 
  # $39.1: @String = load_struct_member(address_register.1, name_q)
  .loc 1 692 39
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $38.1:rax $39.1:rbx 
  # $40.1: @FILE = call(write.339, $38.1, $39.1)
  .loc 1 692 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $40.1:rax 
  # $41.1: @FILE = call(write.341, $40.1, ']')
  .loc 1 692 5
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $41.1:rax 
  # $42.1: @FILE = call(write.339, $41.1, ", ")
  .loc 1 692 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $42.1:rax 
  # $43.1: @FILE = call(write_operand.30, $42.1, self.1, ir_value.1)
  .loc 1 692 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-40]
  call write_operand_30
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $43.1:rax 
  # $44.1: @FILE = call(end_line.342, $43.1)
  .loc 1 692 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # store_struct_member(address_register.1, is_reserved, false)
  .loc 1 693 5
  mov rax, [rbp-24]
  add rax, 40
  mov BYTE PTR [rax], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # return()
  jmp .LABEL__generate_store_struct_member_instruction_26__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
.LABEL__generate_store_struct_member_instruction_26__10:
  # $26.1: Boolean = ir_value_type_size.1 == 4
  .loc 1 683 16
  cmp QWORD PTR [rbp-56], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $26.1:rax 
  # jump($26.1, block.11, block.13)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_26__13
.LABEL__generate_store_struct_member_instruction_26__11:
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 684 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $33.1:rax 
  # $34.1: @FILE = call(write.339, $33.1, "DWORD PTR ")
  .loc 1 684 9
  mov rdi, rax
  lea rsi, .LABEL__string_69[rip] # "DWORD PTR "
  call write_339
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # jump(block.9)
  jmp .LABEL__generate_store_struct_member_instruction_26__9
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
.LABEL__generate_store_struct_member_instruction_26__13:
  # $27.1: Boolean = ir_value_type_size.1 == 2
  .loc 1 685 16
  cmp QWORD PTR [rbp-56], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $27.1:rax 
  # jump($27.1, block.14, block.16)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_26__16
.LABEL__generate_store_struct_member_instruction_26__14:
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 686 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $31.1:rax 
  # $32.1: @FILE = call(write.339, $31.1, "WORD PTR ")
  .loc 1 686 9
  mov rdi, rax
  lea rsi, .LABEL__string_70[rip] # "WORD PTR "
  call write_339
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # jump(block.9)
  jmp .LABEL__generate_store_struct_member_instruction_26__9
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
.LABEL__generate_store_struct_member_instruction_26__16:
  # $28.1: Boolean = ir_value_type_size.1 == 1
  .loc 1 687 16
  cmp QWORD PTR [rbp-56], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $28.1:rax 
  # jump($28.1, block.17, block.19)
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_26__19
.LABEL__generate_store_struct_member_instruction_26__17:
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 688 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] $29.1:rax 
  # $30.1: @FILE = call(write.339, $29.1, "BYTE PTR ")
  .loc 1 688 9
  mov rdi, rax
  lea rsi, .LABEL__string_71[rip] # "BYTE PTR "
  call write_339
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # jump(block.9)
  jmp .LABEL__generate_store_struct_member_instruction_26__9
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
.LABEL__generate_store_struct_member_instruction_26__19:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 690 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] ir_value_type_size.1:[rbp-56] 
  # [discarded value]: ir_value_type_size.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] ir_value.1:[rbp-48] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] ir_value.1:[rbp-40] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] struct_type_member_offset.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [discarded value]: address_register.1
  # [discarded value]: struct_type_member_offset.1
  # [live values]: 
.LABEL__generate_store_struct_member_instruction_26__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_member_instruction_26__stack_frame_size: .word 64

  .loc 1 696 1
  .text
generate_substract_instruction_27:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_substract_instruction_27__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_substract_instruction_27__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Substract_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # result_register.1: @MC_Register = call(find_unused_register.34, self.1)
  .loc 1 697 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_34
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  # $2.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 698 47
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_178
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  # call(generate_load_value.28, self.1, result_register.1, $2.1)
  .loc 1 698 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_28
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 699 29
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $3.1:rax 
  # $4.1: @MC_Value = call(map_variable_value.37, self.1, $3.1, result_register.1)
  .loc 1 699 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  call map_variable_value_37
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 700 5
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, "  sub ")
  .loc 1 700 5
  mov rdi, rax
  lea rsi, .LABEL__string_72[rip] # "  sub "
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  .loc 1 700 44
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.339, $6.1, $7.1)
  .loc 1 700 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write.339, $8.1, ", ")
  .loc 1 700 5
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 700 100
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write_operand.30, $9.1, self.1, $10.1)
  .loc 1 700 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_30
  # [discarded value]: self.1
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: $11.1:rax 
  # $12.1: @FILE = call(end_line.342, $11.1)
  .loc 1 700 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_substract_instruction_27__end
  # [live values]: 
.LABEL__generate_substract_instruction_27__end:
  mov rsp, rbp
  pop rbp
  ret

generate_substract_instruction_27__stack_frame_size: .word 32

  .loc 1 703 1
  .text
generate_load_value_28:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_value_28__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_value_28__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx 
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 704 9
  mov rax, rsi
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 704 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__generate_load_value_28__3
.LABEL__generate_load_value_28__2:
  # IR_Variable_Value.7: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] IR_Variable_Value.7:rax 
  # $3.1: Boolean = call(is.325, ir_value.1, IR_Variable_Value.7)
  .loc 1 705 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.7
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.4, block.5)
  test al, al
  jz .LABEL__generate_load_value_28__5
.LABEL__generate_load_value_28__4:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 1 706 25
  mov rax, [rbp-8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax 
  # $5.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 707 29
  mov rbx, [rbp-16]
  add rbx, 41
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $5.1:rbx 
  # $6.1: @IR_Variable_Value = load_struct_member($5.1, ir_variable_value)
  .loc 1 707 29
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $6.1:r15 
  # $7.1: Boolean = ir_value.1 == $6.1
  .loc 1 707 17
  cmp rax, r15
  sete bl
  # [discarded value]: ir_value.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $7.1:rbx 
  # jump($7.1, block.6, block.5)
  test bl, bl
  jz .LABEL__generate_load_value_28__5
.LABEL__generate_load_value_28__6:
  # return()
  .loc 1 708 17
  jmp .LABEL__generate_load_value_28__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
.LABEL__generate_load_value_28__5:
  # call(release_register.42, self.1, register.1)
  .loc 1 711 9
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call release_register_42
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # jump(block.3)
.LABEL__generate_load_value_28__3:
  # IR_Constant_Value.6: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] IR_Constant_Value.6:rax 
  # $8.1: Boolean = call(is.325, ir_value.1, IR_Constant_Value.6)
  .loc 1 713 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $8.1:rax 
  # jump($8.1, block.9, block.11)
  test al, al
  jz .LABEL__generate_load_value_28__11
.LABEL__generate_load_value_28__9:
  # ir_value.1: @IR_Constant_Value = ir_value.1
  .loc 1 714 21
  mov rax, [rbp-8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax 
  # $124.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 715 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $124.1:rbx 
  # Boolean_Token.2: @Object_Type = load_variable(Boolean_Token)
  lea r15, Boolean_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax $124.1:rbx Boolean_Token.2:r15 
  # $125.1: Boolean = call(is.325, $124.1, Boolean_Token.2)
  .loc 1 715 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $124.1
  # [discarded value]: Boolean_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $125.1:rax 
  # jump($125.1, block.50, block.52)
  test al, al
  jz .LABEL__generate_load_value_28__52
.LABEL__generate_load_value_28__50:
  # literal.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  .loc 1 716 24
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $125.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:rax 
  # $195.1: Boolean = load_struct_member(literal.1, value)
  .loc 1 717 17
  mov rbx, rax
  add rbx, 32
  mov bl, [rbx]
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $195.1:rbx 
  # jump($195.1, block.68, block.70)
  test bl, bl
  jz .LABEL__generate_load_value_28__70
.LABEL__generate_load_value_28__68:
  # $203.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 718 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $195.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $203.1:rax 
  # $204.1: @FILE = call(write.339, $203.1, "  mov ")
  .loc 1 718 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $203.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $204.1:rax 
  # $205.1: @String = load_struct_member(register.1, name_b)
  .loc 1 718 56
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $204.1:rax $205.1:rbx 
  # $206.1: @FILE = call(write.339, $204.1, $205.1)
  .loc 1 718 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $204.1
  # [discarded value]: $205.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $206.1:rax 
  # $207.1: @FILE = call(write.339, $206.1, ", ")
  .loc 1 718 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $206.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $207.1:rax 
  # $208.1: @FILE = call(write.338, $207.1, 1)
  .loc 1 718 17
  mov rdi, rax
  mov rsi, 1
  call write_338
  # [discarded value]: $207.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $208.1:rax 
  # $209.1: @FILE = call(end_line.342, $208.1)
  .loc 1 718 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $208.1
  # [discarded value]: $209.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
.LABEL__generate_load_value_28__10:
  # return()
  jmp .LABEL__generate_load_value_28__end
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_28__70:
  # $196.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 720 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $196.1:rax 
  # $197.1: @FILE = call(write.339, $196.1, "  mov ")
  .loc 1 720 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $196.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $197.1:rax 
  # $198.1: @String = load_struct_member(register.1, name_b)
  .loc 1 720 56
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $197.1:rax $198.1:rbx 
  # $199.1: @FILE = call(write.339, $197.1, $198.1)
  .loc 1 720 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $197.1
  # [discarded value]: $198.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $199.1:rax 
  # $200.1: @FILE = call(write.339, $199.1, ", ")
  .loc 1 720 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $199.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $200.1:rax 
  # $201.1: @FILE = call(write.338, $200.1, 0)
  .loc 1 720 17
  mov rdi, rax
  xor rsi, rsi
  call write_338
  # [discarded value]: $200.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $201.1:rax 
  # $202.1: @FILE = call(end_line.342, $201.1)
  .loc 1 720 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $201.1
  # [discarded value]: $202.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_28__52:
  # $126.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 722 20
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $126.1:rax 
  # Character_Token.2: @Object_Type = load_variable(Character_Token)
  lea rbx, Character_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $126.1:rax Character_Token.2:rbx 
  # $127.1: Boolean = call(is.325, $126.1, Character_Token.2)
  .loc 1 722 20
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $126.1
  # [discarded value]: Character_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $127.1:rax 
  # jump($127.1, block.53, block.55)
  test al, al
  jz .LABEL__generate_load_value_28__55
.LABEL__generate_load_value_28__53:
  # $182.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 723 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $182.1:rax 
  # $183.1: @FILE = call(write.339, $182.1, "  mov ")
  .loc 1 723 13
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $182.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $183.1:rax 
  # $184.1: @String = load_struct_member(register.1, name_b)
  .loc 1 723 52
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $183.1:rax $184.1:rbx 
  # $185.1: @FILE = call(write.339, $183.1, $184.1)
  .loc 1 723 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $183.1
  # [discarded value]: $184.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $185.1:rax 
  # $186.1: @FILE = call(write.339, $185.1, ", ")
  .loc 1 723 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $185.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $186.1:rax 
  # $188.1: @Character_Token = load_struct_member(ir_value.1, literal)
  .loc 1 723 88
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $186.1:rax $188.1:rbx 
  # $189.1: Int8 = load_struct_member($188.1, value)
  .loc 1 723 88
  mov r15, rbx
  add r15, 32
  mov r15b, [r15]
  # [discarded value]: $188.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $186.1:rax $189.1:r15 
  # $190.1: Int = cast($189.1)
  .loc 1 723 88
  mov bl, r15b
  movsx rbx, bl
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $186.1:rax $190.1:rbx 
  # $191.1: @FILE = call(write.338, $186.1, $190.1)
  .loc 1 723 13
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $186.1
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $191.1:rax 
  # $192.1: @FILE = call(end_line.342, $191.1)
  .loc 1 723 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $191.1
  # [discarded value]: $192.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_28__55:
  # $128.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 724 20
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $128.1:rax 
  # Integer_Token.4: @Object_Type = load_variable(Integer_Token)
  lea rbx, Integer_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $128.1:rax Integer_Token.4:rbx 
  # $129.1: Boolean = call(is.325, $128.1, Integer_Token.4)
  .loc 1 724 20
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $128.1
  # [discarded value]: Integer_Token.4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $129.1:rax 
  # jump($129.1, block.56, block.58)
  test al, al
  jz .LABEL__generate_load_value_28__58
.LABEL__generate_load_value_28__56:
  # literal.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  .loc 1 725 24
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:rax 
  # $164.1: Int = load_struct_member(literal.1, value)
  .loc 1 726 17
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:rax $164.1:rbx 
  # $165.1: Boolean = $164.1 == 0
  .loc 1 726 17
  cmp rbx, 0
  sete r15b
  # [discarded value]: $164.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:rax $165.1:r15 
  # jump($165.1, block.65, block.67)
  test r15b, r15b
  mov [rbp-40], rax
  jz .LABEL__generate_load_value_28__67
.LABEL__generate_load_value_28__65:
  # $174.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 727 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $174.1:rax 
  # $175.1: @FILE = call(write.339, $174.1, "  xor ")
  .loc 1 727 17
  mov rdi, rax
  lea rsi, .LABEL__string_73[rip] # "  xor "
  call write_339
  # [discarded value]: $174.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $175.1:rax 
  # $176.1: @String = load_struct_member(register.1, name_q)
  .loc 1 727 56
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $175.1:rax $176.1:rbx 
  # $177.1: @FILE = call(write.339, $175.1, $176.1)
  .loc 1 727 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $175.1
  # [discarded value]: $176.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $177.1:rax 
  # $178.1: @FILE = call(write.339, $177.1, ", ")
  .loc 1 727 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $177.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $178.1:rax 
  # $179.1: @String = load_struct_member(register.1, name_q)
  .loc 1 727 91
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $178.1:rax $179.1:rbx 
  # $180.1: @FILE = call(write.339, $178.1, $179.1)
  .loc 1 727 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $178.1
  # [discarded value]: $179.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $180.1:rax 
  # $181.1: @FILE = call(end_line.342, $180.1)
  .loc 1 727 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $180.1
  # [discarded value]: $181.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
.LABEL__generate_load_value_28__67:
  # $166.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 729 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $166.1:rax 
  # $167.1: @FILE = call(write.339, $166.1, "  mov ")
  .loc 1 729 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $167.1:rax 
  # $168.1: @String = load_struct_member(register.1, name_q)
  .loc 1 729 56
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $167.1:rax $168.1:rbx 
  # $169.1: @FILE = call(write.339, $167.1, $168.1)
  .loc 1 729 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $167.1
  # [discarded value]: $168.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $169.1:rax 
  # $170.1: @FILE = call(write.339, $169.1, ", ")
  .loc 1 729 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $170.1:rax 
  # $171.1: Int = load_struct_member(literal.1, value)
  .loc 1 729 91
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $170.1:rax $171.1:rbx 
  # $172.1: @FILE = call(write.338, $170.1, $171.1)
  .loc 1 729 17
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $170.1
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] $172.1:rax 
  # $173.1: @FILE = call(end_line.342, $172.1)
  .loc 1 729 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $172.1
  # [discarded value]: $173.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] literal.1:[rbp-40] 
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_28__58:
  # $130.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 731 20
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $130.1:rax 
  # Null_Token.2: @Object_Type = load_variable(Null_Token)
  lea rbx, Null_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $130.1:rax Null_Token.2:rbx 
  # $131.1: Boolean = call(is.325, $130.1, Null_Token.2)
  .loc 1 731 20
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $130.1
  # [discarded value]: Null_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $131.1:rax 
  # jump($131.1, block.59, block.61)
  test al, al
  jz .LABEL__generate_load_value_28__61
.LABEL__generate_load_value_28__59:
  # $154.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 732 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $131.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $154.1:rax 
  # $155.1: @FILE = call(write.339, $154.1, "  xor ")
  .loc 1 732 13
  mov rdi, rax
  lea rsi, .LABEL__string_73[rip] # "  xor "
  call write_339
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $155.1:rax 
  # $156.1: @String = load_struct_member(register.1, name_q)
  .loc 1 732 52
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $155.1:rax $156.1:rbx 
  # $157.1: @FILE = call(write.339, $155.1, $156.1)
  .loc 1 732 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $155.1
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $157.1:rax 
  # $158.1: @FILE = call(write.339, $157.1, ", ")
  .loc 1 732 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $157.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $158.1:rax 
  # $159.1: @String = load_struct_member(register.1, name_q)
  .loc 1 732 87
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $158.1:rax $159.1:rbx 
  # $160.1: @FILE = call(write.339, $158.1, $159.1)
  .loc 1 732 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $158.1
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $160.1:rax 
  # $161.1: @FILE = call(end_line.342, $160.1)
  .loc 1 732 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $160.1
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_28__61:
  # $132.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 733 20
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $132.1:rax 
  # String_Token.2: @Object_Type = load_variable(String_Token)
  lea rbx, String_Token[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $132.1:rax String_Token.2:rbx 
  # $133.1: Boolean = call(is.325, $132.1, String_Token.2)
  .loc 1 733 20
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $132.1
  # [discarded value]: String_Token.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $133.1:rax 
  # jump($133.1, block.62, block.64)
  test al, al
  jz .LABEL__generate_load_value_28__64
.LABEL__generate_load_value_28__62:
  # $140.1: @String_Token = load_struct_member(ir_value.1, literal)
  .loc 1 734 46
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $140.1:rax 
  # mc_string.1: @MC_String = call(convert_string.52, self.1, $140.1)
  .loc 1 734 26
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_string_52
  # [discarded value]: $140.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:rax 
  # $142.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 735 13
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:rax $142.1:rbx 
  # $143.1: @FILE = call(write.339, $142.1, "  lea ")
  .loc 1 735 13
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  lea "
  mov [rbp-40], rax
  call write_339
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $143.1:rax 
  # $144.1: @String = load_struct_member(register.1, name_q)
  .loc 1 735 52
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $143.1:rax $144.1:rbx 
  # $145.1: @FILE = call(write.339, $143.1, $144.1)
  .loc 1 735 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $143.1
  # [discarded value]: $144.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $145.1:rax 
  # $146.1: @FILE = call(write.339, $145.1, ", ")
  .loc 1 735 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $146.1:rax 
  # $147.1: @FILE = call(write_string_label.54, $146.1, mc_string.1)
  .loc 1 735 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_string_label_54
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $147.1:rax 
  # $148.1: @FILE = call(write.339, $147.1, "[rip]")
  .loc 1 735 13
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "[rip]"
  call write_339
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $148.1:rax 
  # $149.1: @FILE = call(write.339, $148.1, " # ")
  .loc 1 735 13
  mov rdi, rax
  lea rsi, .LABEL__string_74[rip] # " # "
  call write_339
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] mc_string.1:[rbp-40] $149.1:rax 
  # $150.1: @String_Token = load_struct_member(mc_string.1, literal)
  .loc 1 735 145
  mov rbx, [rbp-40]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: mc_string.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $149.1:rax $150.1:rbx 
  # $151.1: @String = load_struct_member($150.1, lexeme)
  .loc 1 735 145
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $150.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $149.1:rax $151.1:r15 
  # $152.1: @FILE = call(write.339, $149.1, $151.1)
  .loc 1 735 13
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $149.1
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $152.1:rax 
  # $153.1: @FILE = call(end_line.342, $152.1)
  .loc 1 735 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $152.1
  # [discarded value]: $153.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
.LABEL__generate_load_value_28__64:
  # $134.1: @String = call(clone.329, "Unsupported literal type: ")
  .loc 1 737 24
  lea rdi, .LABEL__string_75[rip] # "Unsupported literal type: "
  call clone_329
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $134.1:rax 
  # $135.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 737 67
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $134.1:rax $135.1:rbx 
  # $136.1: @Object_Type = load_struct_member($135.1, object_type)
  .loc 1 737 67
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $134.1:rax $136.1:r15 
  # $137.1: @String = load_struct_member($136.1, name)
  .loc 1 737 67
  mov rbx, r15
  add rbx, 8
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $134.1:rax $137.1:rbx 
  # $138.1: @String = call(append.332, $134.1, $137.1)
  .loc 1 737 24
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $134.1
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] $138.1:rax 
  # call(abort.31, self.1, $138.1)
  .loc 1 737 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_31
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:[rbp-32] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
.LABEL__generate_load_value_28__11:
  # IR_Variable_Value.8: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] IR_Variable_Value.8:rax 
  # $9.1: Boolean = call(is.325, ir_value.1, IR_Variable_Value.8)
  .loc 1 739 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.8
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.12, block.14)
  test al, al
  jz .LABEL__generate_load_value_28__14
.LABEL__generate_load_value_28__12:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 1 740 21
  mov rax, [rbp-8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax 
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 741 26
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value.1:rax ir_value_type.1:rbx 
  # mc_value.1: @MC_Value = call(get_value.38, self.1, ir_value.1)
  .loc 1 742 21
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-32], rbx
  call get_value_38
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rax 
  # $17.1: Boolean = mc_value.1 == null
  .loc 1 743 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:rax $17.1:rbx 
  # jump($17.1, block.15, block.16)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__generate_load_value_28__16
.LABEL__generate_load_value_28__15:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 744 13
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__16:
  # $18.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 746 13
  mov rax, [rbp-40]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $18.1:rax 
  # $19.1: Boolean = $18.1 != null
  .loc 1 746 13
  cmp rax, 0
  setne bl
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $19.1:rbx 
  # jump($19.1, block.17, block.19)
  test bl, bl
  jz .LABEL__generate_load_value_28__19
.LABEL__generate_load_value_28__17:
  # IR_Boolean_Type.4: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Boolean_Type.4:rax 
  # $69.1: Boolean = call(is.325, ir_value_type.1, IR_Boolean_Type.4)
  .loc 1 747 17
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Boolean_Type.4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $69.1:rax 
  # jump($69.1, block.35, block.37)
  test al, al
  jz .LABEL__generate_load_value_28__37
.LABEL__generate_load_value_28__35:
  # $114.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 748 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $114.1:rax 
  # $115.1: @FILE = call(write.339, $114.1, "  mov ")
  .loc 1 748 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $115.1:rax 
  # $116.1: @String = load_struct_member(register.1, name_b)
  .loc 1 748 56
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $115.1:rax $116.1:rbx 
  # $117.1: @FILE = call(write.339, $115.1, $116.1)
  .loc 1 748 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $115.1
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $117.1:rax 
  # $118.1: @FILE = call(write.339, $117.1, ", ")
  .loc 1 748 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $118.1:rax 
  # $119.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 748 91
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $118.1:rax $119.1:rbx 
  # $120.1: @String = load_struct_member($119.1, name_b)
  .loc 1 748 91
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $119.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $118.1:rax $120.1:r15 
  # $121.1: @FILE = call(write.339, $118.1, $120.1)
  .loc 1 748 17
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $118.1
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $121.1:rax 
  # $122.1: @FILE = call(end_line.342, $121.1)
  .loc 1 748 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $121.1
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__37:
  # IR_Int_Type.6: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int_Type.6:rax 
  # $70.1: Boolean = call(is.325, ir_value_type.1, IR_Int_Type.6)
  .loc 1 749 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int_Type.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $70.1:rax 
  # jump($70.1, block.38, block.40)
  test al, al
  jz .LABEL__generate_load_value_28__40
.LABEL__generate_load_value_28__38:
  # $105.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 750 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $105.1:rax 
  # $106.1: @FILE = call(write.339, $105.1, "  mov ")
  .loc 1 750 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $106.1:rax 
  # $107.1: @String = load_struct_member(register.1, name_q)
  .loc 1 750 56
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $106.1:rax $107.1:rbx 
  # $108.1: @FILE = call(write.339, $106.1, $107.1)
  .loc 1 750 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $106.1
  # [discarded value]: $107.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $108.1:rax 
  # $109.1: @FILE = call(write.339, $108.1, ", ")
  .loc 1 750 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $109.1:rax 
  # $110.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 750 91
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $109.1:rax $110.1:rbx 
  # $111.1: @String = load_struct_member($110.1, name_q)
  .loc 1 750 91
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $109.1:rax $111.1:r15 
  # $112.1: @FILE = call(write.339, $109.1, $111.1)
  .loc 1 750 17
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $109.1
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $112.1:rax 
  # $113.1: @FILE = call(end_line.342, $112.1)
  .loc 1 750 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $112.1
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__40:
  # IR_Int32_Type.6: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int32_Type.6:rax 
  # $71.1: Boolean = call(is.325, ir_value_type.1, IR_Int32_Type.6)
  .loc 1 751 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int32_Type.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $71.1:rax 
  # jump($71.1, block.41, block.43)
  test al, al
  jz .LABEL__generate_load_value_28__43
.LABEL__generate_load_value_28__41:
  # $96.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 752 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $96.1:rax 
  # $97.1: @FILE = call(write.339, $96.1, "  mov ")
  .loc 1 752 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $97.1:rax 
  # $98.1: @String = load_struct_member(register.1, name_d)
  .loc 1 752 56
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $97.1:rax $98.1:rbx 
  # $99.1: @FILE = call(write.339, $97.1, $98.1)
  .loc 1 752 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $97.1
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $99.1:rax 
  # $100.1: @FILE = call(write.339, $99.1, ", ")
  .loc 1 752 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $100.1:rax 
  # $101.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 752 91
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $100.1:rax $101.1:rbx 
  # $102.1: @String = load_struct_member($101.1, name_d)
  .loc 1 752 91
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $100.1:rax $102.1:r15 
  # $103.1: @FILE = call(write.339, $100.1, $102.1)
  .loc 1 752 17
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $100.1
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $103.1:rax 
  # $104.1: @FILE = call(end_line.342, $103.1)
  .loc 1 752 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $103.1
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__43:
  # IR_Int8_Type.6: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int8_Type.6:rax 
  # $72.1: Boolean = call(is.325, ir_value_type.1, IR_Int8_Type.6)
  .loc 1 753 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int8_Type.6
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $72.1:rax 
  # jump($72.1, block.44, block.46)
  test al, al
  jz .LABEL__generate_load_value_28__46
.LABEL__generate_load_value_28__44:
  # $87.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 754 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $87.1:rax 
  # $88.1: @FILE = call(write.339, $87.1, "  mov ")
  .loc 1 754 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $88.1:rax 
  # $89.1: @String = load_struct_member(register.1, name_b)
  .loc 1 754 56
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $88.1:rax $89.1:rbx 
  # $90.1: @FILE = call(write.339, $88.1, $89.1)
  .loc 1 754 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $88.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $90.1:rax 
  # $91.1: @FILE = call(write.339, $90.1, ", ")
  .loc 1 754 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $91.1:rax 
  # $92.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 754 91
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $91.1:rax $92.1:rbx 
  # $93.1: @String = load_struct_member($92.1, name_b)
  .loc 1 754 91
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $91.1:rax $93.1:r15 
  # $94.1: @FILE = call(write.339, $91.1, $93.1)
  .loc 1 754 17
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $91.1
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $94.1:rax 
  # $95.1: @FILE = call(end_line.342, $94.1)
  .loc 1 754 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $94.1
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__46:
  # IR_Pointer_Type.4: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Pointer_Type.4:rax 
  # $73.1: Boolean = call(is.325, ir_value_type.1, IR_Pointer_Type.4)
  .loc 1 755 24
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Pointer_Type.4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $73.1:rax 
  # jump($73.1, block.47, block.49)
  test al, al
  jz .LABEL__generate_load_value_28__49
.LABEL__generate_load_value_28__47:
  # $78.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 756 17
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $78.1:rax 
  # $79.1: @FILE = call(write.339, $78.1, "  mov ")
  .loc 1 756 17
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $79.1:rax 
  # $80.1: @String = load_struct_member(register.1, name_q)
  .loc 1 756 56
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $79.1:rax $80.1:rbx 
  # $81.1: @FILE = call(write.339, $79.1, $80.1)
  .loc 1 756 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $79.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $81.1:rax 
  # $82.1: @FILE = call(write.339, $81.1, ", ")
  .loc 1 756 17
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $82.1:rax 
  # $83.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 756 91
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $82.1:rax $83.1:rbx 
  # $84.1: @String = load_struct_member($83.1, name_q)
  .loc 1 756 91
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $82.1:rax $84.1:r15 
  # $85.1: @FILE = call(write.339, $82.1, $84.1)
  .loc 1 756 17
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $82.1
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $85.1:rax 
  # $86.1: @FILE = call(end_line.342, $85.1)
  .loc 1 756 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $85.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__49:
  # $74.1: @String = call(clone.329, "Unsupported value type: ")
  .loc 1 758 28
  lea rdi, .LABEL__string_76[rip] # "Unsupported value type: "
  call clone_329
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $74.1:rax 
  # $75.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  .loc 1 758 69
  mov rbx, [rbp-32]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $74.1:rax $75.1:rbx 
  # $76.1: @String = load_struct_member($75.1, name)
  .loc 1 758 69
  mov r15, rbx
  add r15, 8
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $74.1:rax $76.1:r15 
  # $77.1: @String = call(append.332, $74.1, $76.1)
  .loc 1 758 28
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $74.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $77.1:rax 
  # call(abort.31, self.1, $77.1)
  .loc 1 758 17
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_31
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__19:
  # IR_Boolean_Type.3: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Boolean_Type.3:rax 
  # $20.1: Boolean = call(is.325, ir_value_type.1, IR_Boolean_Type.3)
  .loc 1 760 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Boolean_Type.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $20.1:rax 
  # jump($20.1, block.20, block.22)
  test al, al
  jz .LABEL__generate_load_value_28__22
.LABEL__generate_load_value_28__20:
  # $61.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 761 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $61.1:rax 
  # $62.1: @FILE = call(write.339, $61.1, "  mov ")
  .loc 1 761 13
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $62.1:rax 
  # $63.1: @String = load_struct_member(register.1, name_b)
  .loc 1 761 52
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $62.1:rax $63.1:rbx 
  # $64.1: @FILE = call(write.339, $62.1, $63.1)
  .loc 1 761 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $64.1:rax 
  # $65.1: @FILE = call(write.339, $64.1, ", ")
  .loc 1 761 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $65.1:rax 
  # $66.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 761 87
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $65.1:rax $66.1:rbx 
  # $67.1: @FILE = call(write.48, $65.1, $66.1)
  .loc 1 761 13
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $65.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $67.1:rax 
  # $68.1: @FILE = call(end_line.342, $67.1)
  .loc 1 761 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__22:
  # IR_Int_Type.5: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int_Type.5:rax 
  # $21.1: Boolean = call(is.325, ir_value_type.1, IR_Int_Type.5)
  .loc 1 762 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int_Type.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $21.1:rax 
  # jump($21.1, block.23, block.25)
  test al, al
  jz .LABEL__generate_load_value_28__25
.LABEL__generate_load_value_28__23:
  # $53.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 763 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $53.1:rax 
  # $54.1: @FILE = call(write.339, $53.1, "  mov ")
  .loc 1 763 13
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $54.1:rax 
  # $55.1: @String = load_struct_member(register.1, name_q)
  .loc 1 763 52
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $54.1:rax $55.1:rbx 
  # $56.1: @FILE = call(write.339, $54.1, $55.1)
  .loc 1 763 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $56.1:rax 
  # $57.1: @FILE = call(write.339, $56.1, ", ")
  .loc 1 763 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $57.1:rax 
  # $58.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 763 87
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $57.1:rax $58.1:rbx 
  # $59.1: @FILE = call(write.48, $57.1, $58.1)
  .loc 1 763 13
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $57.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $59.1:rax 
  # $60.1: @FILE = call(end_line.342, $59.1)
  .loc 1 763 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__25:
  # IR_Int32_Type.5: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int32_Type.5:rax 
  # $22.1: Boolean = call(is.325, ir_value_type.1, IR_Int32_Type.5)
  .loc 1 764 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int32_Type.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $22.1:rax 
  # jump($22.1, block.26, block.28)
  test al, al
  jz .LABEL__generate_load_value_28__28
.LABEL__generate_load_value_28__26:
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 765 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $45.1:rax 
  # $46.1: @FILE = call(write.339, $45.1, "  mov ")
  .loc 1 765 13
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $46.1:rax 
  # $47.1: @String = load_struct_member(register.1, name_d)
  .loc 1 765 52
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $46.1:rax $47.1:rbx 
  # $48.1: @FILE = call(write.339, $46.1, $47.1)
  .loc 1 765 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $48.1:rax 
  # $49.1: @FILE = call(write.339, $48.1, ", ")
  .loc 1 765 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $49.1:rax 
  # $50.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 765 87
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $49.1:rax $50.1:rbx 
  # $51.1: @FILE = call(write.48, $49.1, $50.1)
  .loc 1 765 13
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $51.1:rax 
  # $52.1: @FILE = call(end_line.342, $51.1)
  .loc 1 765 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $51.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__28:
  # IR_Int8_Type.5: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Int8_Type.5:rax 
  # $23.1: Boolean = call(is.325, ir_value_type.1, IR_Int8_Type.5)
  .loc 1 766 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int8_Type.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $23.1:rax 
  # jump($23.1, block.29, block.31)
  test al, al
  jz .LABEL__generate_load_value_28__31
.LABEL__generate_load_value_28__29:
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 767 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $37.1:rax 
  # $38.1: @FILE = call(write.339, $37.1, "  mov ")
  .loc 1 767 13
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $38.1:rax 
  # $39.1: @String = load_struct_member(register.1, name_b)
  .loc 1 767 52
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $38.1:rax $39.1:rbx 
  # $40.1: @FILE = call(write.339, $38.1, $39.1)
  .loc 1 767 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $40.1:rax 
  # $41.1: @FILE = call(write.339, $40.1, ", ")
  .loc 1 767 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $41.1:rax 
  # $42.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 767 87
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $41.1:rax $42.1:rbx 
  # $43.1: @FILE = call(write.48, $41.1, $42.1)
  .loc 1 767 13
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $43.1:rax 
  # $44.1: @FILE = call(end_line.342, $43.1)
  .loc 1 767 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__31:
  # IR_Pointer_Type.3: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] IR_Pointer_Type.3:rax 
  # $24.1: Boolean = call(is.325, ir_value_type.1, IR_Pointer_Type.3)
  .loc 1 768 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Pointer_Type.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $24.1:rax 
  # jump($24.1, block.32, block.34)
  test al, al
  jz .LABEL__generate_load_value_28__34
.LABEL__generate_load_value_28__32:
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 769 13
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $29.1:rax 
  # $30.1: @FILE = call(write.339, $29.1, "  mov ")
  .loc 1 769 13
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $30.1:rax 
  # $31.1: @String = load_struct_member(register.1, name_q)
  .loc 1 769 52
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $30.1:rax $31.1:rbx 
  # $32.1: @FILE = call(write.339, $30.1, $31.1)
  .loc 1 769 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $32.1:rax 
  # $33.1: @FILE = call(write.339, $32.1, ", ")
  .loc 1 769 13
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $33.1:rax 
  # $34.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 769 87
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $33.1:rax $34.1:rbx 
  # $35.1: @FILE = call(write.48, $33.1, $34.1)
  .loc 1 769 13
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $35.1:rax 
  # $36.1: @FILE = call(end_line.342, $35.1)
  .loc 1 769 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # jump(block.10)
  jmp .LABEL__generate_load_value_28__10
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__generate_load_value_28__34:
  # $25.1: @String = call(clone.329, "Unsupported value type: ")
  .loc 1 771 24
  lea rdi, .LABEL__string_76[rip] # "Unsupported value type: "
  call clone_329
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $25.1:rax 
  # $26.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  .loc 1 771 65
  mov rbx, [rbp-32]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $25.1:rax $26.1:rbx 
  # $27.1: @String = load_struct_member($26.1, name)
  .loc 1 771 65
  mov r15, rbx
  add r15, 8
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $25.1:rax $27.1:r15 
  # $28.1: @String = call(append.332, $25.1, $27.1)
  .loc 1 771 24
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $25.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] $28.1:rax 
  # call(abort.31, self.1, $28.1)
  .loc 1 771 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_31
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] ir_value_type.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: ir_value_type.1
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
.LABEL__generate_load_value_28__14:
  # $10.1: @String = call(clone.329, "Unsupported value type: ")
  .loc 1 774 20
  lea rdi, .LABEL__string_76[rip] # "Unsupported value type: "
  call clone_329
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $10.1:rax 
  # $11.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  .loc 1 774 61
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $10.1:rax $11.1:rbx 
  # $12.1: @String = load_struct_member($11.1, name)
  .loc 1 774 61
  mov r15, rbx
  add r15, 8
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $10.1:rax $12.1:r15 
  # $13.1: @String = call(append.332, $10.1, $12.1)
  .loc 1 774 20
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $10.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] $13.1:rax 
  # call(abort.31, self.1, $13.1)
  .loc 1 774 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_31
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] ir_value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: register.1
  # [discarded value]: ir_value.1
  # [live values]: 
.LABEL__generate_load_value_28__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_value_28__stack_frame_size: .word 48

  .loc 1 778 1
  .text
get_offset_29:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_offset_29__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_offset_29__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  # offset.1: Int = 0
  .loc 1 779 5
  xor rax, rax
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax 
  # struct_type.1: @IR_Struct_Type = load_struct_member(struct_type_member.1, struct_type)
  .loc 1 780 20
  mov rbx, rsi
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx 
  # $2.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  .loc 1 781 9
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $2.1:r15 
  # $3.1: Boolean = $2.1 != null
  .loc 1 781 9
  cmp r15, 0
  setne r14b
  # [discarded value]: $2.1
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $3.1:r14 
  # jump($3.1, block.2, block.3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  jz .LABEL__get_offset_29__3
.LABEL__get_offset_29__2:
  # $4.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  .loc 1 782 37
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $4.1:rax 
  # offset.2: Int = call(get_type_size.51, self.1, $4.1)
  .loc 1 782 18
  mov rdi, [rbp-32]
  mov rsi, rax
  call get_type_size_51
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:rax[rbp-8] 
  # jump(block.3)
  mov [rbp-8], rax
.LABEL__get_offset_29__3:
  # offset.7: Int = phi(offset.1, offset.2)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] 
  # $6.1: @List = load_struct_member(struct_type.1, members)
  .loc 1 784 40
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] $6.1:rax 
  # current_struct_type_member_item.1: @List_Item = load_struct_member($6.1, first_item)
  .loc 1 784 40
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:rbx 
  # jump(block.4)
  mov [rbp-40], rbx
.LABEL__get_offset_29__4:
  # offset.6: Int = phi(offset.7, offset.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] 
  # current_struct_type_member_item.2: @List_Item = phi(current_struct_type_member_item.1, current_struct_type_member_item.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
  # $8.1: Boolean = current_struct_type_member_item.2 != null
  .loc 1 785 12
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] $8.1:rax 
  # jump($8.1, block.5, block.6)
  test al, al
  jz .LABEL__get_offset_29__6
.LABEL__get_offset_29__5:
  # current_struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(current_struct_type_member_item.2, data)
  .loc 1 786 39
  mov rax, [rbp-40]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:rax 
  # $11.1: Boolean = current_struct_type_member.1 == struct_type_member.1
  .loc 1 787 13
  cmp rax, QWORD PTR [rbp-24]
  sete bl
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:rax $11.1:rbx 
  # jump($11.1, block.7, block.8)
  test bl, bl
  mov [rbp-48], rax
  jz .LABEL__get_offset_29__8
.LABEL__get_offset_29__7:
  # return(offset.6)
  .loc 1 788 13
  mov rax, [rbp-8]
  jmp .LABEL__get_offset_29__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] 
.LABEL__get_offset_29__8:
  # $12.1: @IR_Type = load_struct_member(current_struct_type_member.1, type)
  .loc 1 790 46
  mov rax, [rbp-48]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] $12.1:rax 
  # $13.1: Int = call(get_type_size.51, self.1, $12.1)
  .loc 1 790 27
  mov rdi, [rbp-32]
  mov rsi, rax
  call get_type_size_51
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] $13.1:rax 
  # offset.5: Int = offset.6 + $13.1
  .loc 1 790 18
  mov rbx, [rbp-8]
  add rbx, rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] offset.5:rbx[rbp-8] 
  # current_struct_type_member_item.5: @List_Item = load_struct_member(current_struct_type_member_item.2, next_item)
  .loc 1 791 43
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] offset.5:rbx[rbp-8] current_struct_type_member_item.5:rax[rbp-40] 
  # jump(block.4)
  mov [rbp-40], rax
  mov [rbp-8], rbx
  jmp .LABEL__get_offset_29__4
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] offset.5:[rbp-8] current_struct_type_member_item.5:[rbp-40] 
  # [discarded value]: offset.5
  # [discarded value]: current_struct_type_member_item.5
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] current_struct_type_member.1:[rbp-48] 
  # [discarded value]: current_struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
.LABEL__get_offset_29__6:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 793 5
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-40] 
  # [discarded value]: offset.6
  # [discarded value]: current_struct_type_member_item.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-40] 
  # [discarded value]: offset.7
  # [discarded value]: current_struct_type_member_item.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] offset.2:[rbp-8] 
  # [discarded value]: offset.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: struct_type_member.1
  # [discarded value]: offset.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__get_offset_29__end:
  mov rsp, rbp
  pop rbp
  ret

get_offset_29__stack_frame_size: .word 48

  .loc 1 796 1
  .text
write_operand_30:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_operand_30__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_operand_30__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # generator.1: @MC_Generator = load_variable(generator)
  # [live values]: file.1:rdi generator.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx 
  # IR_Constant_Value.7: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx IR_Constant_Value.7:rax 
  # $1.1: Boolean = call(is.325, ir_value.1, IR_Constant_Value.7)
  .loc 1 797 9
  mov [rbp-8], rdi
  mov rdi, rdx
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_325
  # [discarded value]: IR_Constant_Value.7
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_operand_30__3
.LABEL__write_operand_30__2:
  # ir_value.1: @IR_Constant_Value = ir_value.1
  .loc 1 798 21
  mov rax, [rbp-24]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax 
  # $3.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 799 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax $3.1:rbx 
  # Boolean_Token.3: @Object_Type = load_variable(Boolean_Token)
  lea r15, Boolean_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax $3.1:rbx Boolean_Token.3:r15 
  # $4.1: Boolean = call(is.325, $3.1, Boolean_Token.3)
  .loc 1 799 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $3.1
  # [discarded value]: Boolean_Token.3
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.4, block.5)
  test al, al
  jz .LABEL__write_operand_30__5
.LABEL__write_operand_30__4:
  # $6.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  .loc 1 800 18
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = load_struct_member($6.1, value)
  .loc 1 800 18
  mov rbx, rax
  add rbx, 32
  mov bl, [rbx]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.6, block.7)
  test bl, bl
  jz .LABEL__write_operand_30__7
.LABEL__write_operand_30__6:
  # $8.1: @FILE = call(write.338, file.1, 1)
  .loc 1 801 24
  mov rdi, [rbp-8]
  mov rsi, 1
  call write_338
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $8.1:rax 
  # return($8.1)
  .loc 1 801 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_30__7:
  # $9.1: @FILE = call(write.338, file.1, 0)
  .loc 1 803 20
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_338
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $9.1:rax 
  # return($9.1)
  .loc 1 803 13
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_30__5:
  # $10.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 805 13
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $10.1:rax 
  # Character_Token.3: @Object_Type = load_variable(Character_Token)
  lea rbx, Character_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $10.1:rax Character_Token.3:rbx 
  # $11.1: Boolean = call(is.325, $10.1, Character_Token.3)
  .loc 1 805 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: Character_Token.3
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $11.1:rax 
  # jump($11.1, block.10, block.11)
  test al, al
  jz .LABEL__write_operand_30__11
.LABEL__write_operand_30__10:
  # $13.1: @Character_Token = load_struct_member(ir_value.1, literal)
  .loc 1 806 32
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $13.1:rax 
  # $14.1: Int8 = load_struct_member($13.1, value)
  .loc 1 806 32
  mov rbx, rax
  add rbx, 32
  mov bl, [rbx]
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $14.1:rbx 
  # $15.1: Int = cast($14.1)
  .loc 1 806 32
  mov al, bl
  movsx rax, al
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(write.338, file.1, $15.1)
  .loc 1 806 20
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_338
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $16.1:rax 
  # return($16.1)
  .loc 1 806 13
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_30__11:
  # $17.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 808 13
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $17.1:rax 
  # Integer_Token.5: @Object_Type = load_variable(Integer_Token)
  lea rbx, Integer_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $17.1:rax Integer_Token.5:rbx 
  # $18.1: Boolean = call(is.325, $17.1, Integer_Token.5)
  .loc 1 808 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $17.1
  # [discarded value]: Integer_Token.5
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $18.1:rax 
  # jump($18.1, block.13, block.14)
  test al, al
  jz .LABEL__write_operand_30__14
.LABEL__write_operand_30__13:
  # $20.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  .loc 1 809 32
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $20.1:rax 
  # $21.1: Int = load_struct_member($20.1, value)
  .loc 1 809 32
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $21.1:rbx 
  # $22.1: @FILE = call(write.338, file.1, $21.1)
  .loc 1 809 20
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_338
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $22.1:rax 
  # return($22.1)
  .loc 1 809 13
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_30__14:
  # $23.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 811 13
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $23.1:rax 
  # Null_Token.3: @Object_Type = load_variable(Null_Token)
  lea rbx, Null_Token[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $23.1:rax Null_Token.3:rbx 
  # $24.1: Boolean = call(is.325, $23.1, Null_Token.3)
  .loc 1 811 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $23.1
  # [discarded value]: Null_Token.3
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $24.1:rax 
  # jump($24.1, block.16, block.17)
  test al, al
  jz .LABEL__write_operand_30__17
.LABEL__write_operand_30__16:
  # $25.1: @FILE = call(write.338, file.1, 0)
  .loc 1 812 20
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_338
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $25.1:rax 
  # return($25.1)
  .loc 1 812 13
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
.LABEL__write_operand_30__17:
  # $26.1: @String = call(clone.329, "Unsupported constant literal: ")
  .loc 1 814 25
  lea rdi, .LABEL__string_77[rip] # "Unsupported constant literal: "
  call clone_329
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $26.1:rax 
  # $27.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  .loc 1 814 72
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $26.1:rax $27.1:rbx 
  # $28.1: @Object_Type = load_struct_member($27.1, object_type)
  .loc 1 814 72
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $26.1:rax $28.1:r15 
  # $29.1: @String = load_struct_member($28.1, name)
  .loc 1 814 72
  mov rbx, r15
  add rbx, 8
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $26.1:rax $29.1:rbx 
  # $30.1: @String = call(append.332, $26.1, $29.1)
  .loc 1 814 25
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $26.1
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] $30.1:rax 
  # call(abort.31, generator.1, $30.1)
  .loc 1 814 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_31
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] 
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
.LABEL__write_operand_30__3:
  # IR_Variable_Value.9: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] IR_Variable_Value.9:rax 
  # $31.1: Boolean = call(is.325, ir_value.1, IR_Variable_Value.9)
  .loc 1 816 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.9
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $31.1:rax 
  # jump($31.1, block.19, block.20)
  test al, al
  jz .LABEL__write_operand_30__20
.LABEL__write_operand_30__19:
  # ir_value.1: @IR_Variable_Value = ir_value.1
  .loc 1 817 21
  mov rax, [rbp-24]
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:rax 
  # mc_value.1: @MC_Value = call(get_value.38, generator.1, ir_value.1)
  .loc 1 818 21
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-32], rax
  call get_value_38
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax 
  # $34.1: Boolean = mc_value.1 == null
  .loc 1 819 13
  cmp rax, 0
  sete bl
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:rax $34.1:rbx 
  # jump($34.1, block.21, block.22)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__write_operand_30__22
.LABEL__write_operand_30__21:
  # call(abort.31, generator.1, "Invalid state")
  .loc 1 820 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] 
.LABEL__write_operand_30__22:
  # $35.1: @IR_Type = load_struct_member(ir_value.1, type)
  .loc 1 822 52
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] $35.1:rax 
  # value_type_size.1: Int = call(get_type_size.51, generator.1, $35.1)
  .loc 1 822 28
  mov rdi, [rbp-16]
  mov rsi, rax
  call get_type_size_51
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:rax 
  # $37.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 823 13
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:rax $37.1:rbx 
  # $38.1: Boolean = $37.1 != null
  .loc 1 823 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:rax $38.1:r15 
  # jump($38.1, block.23, block.24)
  test r15b, r15b
  mov [rbp-48], rax
  jz .LABEL__write_operand_30__24
.LABEL__write_operand_30__23:
  # $39.1: Boolean = value_type_size.1 == 8
  .loc 1 824 17
  cmp QWORD PTR [rbp-48], 8
  sete al
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $39.1:rax 
  # jump($39.1, block.25, block.26)
  test al, al
  jz .LABEL__write_operand_30__26
.LABEL__write_operand_30__25:
  # $40.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 825 35
  mov rax, [rbp-40]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $40.1:rax 
  # $41.1: @String = load_struct_member($40.1, name_q)
  .loc 1 825 35
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $41.1:rbx 
  # $42.1: @FILE = call(write.339, file.1, $41.1)
  .loc 1 825 24
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_339
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $42.1:rax 
  # return($42.1)
  .loc 1 825 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__26:
  # $43.1: Boolean = value_type_size.1 == 4
  .loc 1 827 17
  cmp QWORD PTR [rbp-48], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $43.1:rax 
  # jump($43.1, block.28, block.29)
  test al, al
  jz .LABEL__write_operand_30__29
.LABEL__write_operand_30__28:
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 828 35
  mov rax, [rbp-40]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $44.1:rax 
  # $45.1: @String = load_struct_member($44.1, name_d)
  .loc 1 828 35
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $45.1:rbx 
  # $46.1: @FILE = call(write.339, file.1, $45.1)
  .loc 1 828 24
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_339
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $46.1:rax 
  # return($46.1)
  .loc 1 828 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__29:
  # $47.1: Boolean = value_type_size.1 == 2
  .loc 1 830 17
  cmp QWORD PTR [rbp-48], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $47.1:rax 
  # jump($47.1, block.31, block.32)
  test al, al
  jz .LABEL__write_operand_30__32
.LABEL__write_operand_30__31:
  # $48.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 831 35
  mov rax, [rbp-40]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $48.1:rax 
  # $49.1: @String = load_struct_member($48.1, name_w)
  .loc 1 831 35
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $49.1:rbx 
  # $50.1: @FILE = call(write.339, file.1, $49.1)
  .loc 1 831 24
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_339
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $50.1:rax 
  # return($50.1)
  .loc 1 831 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__32:
  # $51.1: Boolean = value_type_size.1 == 1
  .loc 1 833 17
  cmp QWORD PTR [rbp-48], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $51.1:rax 
  # jump($51.1, block.34, block.35)
  test al, al
  jz .LABEL__write_operand_30__35
.LABEL__write_operand_30__34:
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 834 35
  mov rax, [rbp-40]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $52.1:rax 
  # $53.1: @String = load_struct_member($52.1, name_b)
  .loc 1 834 35
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $53.1:rbx 
  # $54.1: @FILE = call(write.339, file.1, $53.1)
  .loc 1 834 24
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_339
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $54.1:rax 
  # return($54.1)
  .loc 1 834 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__35:
  # $55.1: @String = call(clone.329, "Unsupported type size: ")
  .loc 1 836 29
  lea rdi, .LABEL__string_78[rip] # "Unsupported type size: "
  call clone_329
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $55.1:rax 
  # $56.1: @String = call(append.331, $55.1, value_type_size.1)
  .loc 1 836 29
  mov rdi, rax
  mov rsi, [rbp-48]
  call append_331
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $56.1:rax 
  # call(abort.31, generator.1, $56.1)
  .loc 1 836 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_31
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__24:
  # $57.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 838 13
  mov rax, [rbp-40]
  add rax, 40
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $57.1:rax 
  # $58.1: Boolean = $57.1 != null
  .loc 1 838 13
  cmp rax, 0
  setne bl
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $58.1:rbx 
  # jump($58.1, block.37, block.38)
  test bl, bl
  jz .LABEL__write_operand_30__38
.LABEL__write_operand_30__37:
  # $59.1: Boolean = value_type_size.1 == 8
  .loc 1 839 17
  cmp QWORD PTR [rbp-48], 8
  sete al
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $59.1:rax 
  # jump($59.1, block.39, block.40)
  test al, al
  jz .LABEL__write_operand_30__40
.LABEL__write_operand_30__39:
  # $60.1: @FILE = call(write.339, file.1, "QWORD PTR ")
  .loc 1 840 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_68[rip] # "QWORD PTR "
  call write_339
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $60.1:rax 
  # $61.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 840 55
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $60.1:rax $61.1:rbx 
  # $62.1: @FILE = call(write.48, $60.1, $61.1)
  .loc 1 840 24
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $62.1:rax 
  # return($62.1)
  .loc 1 840 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__40:
  # $63.1: Boolean = value_type_size.1 == 4
  .loc 1 842 17
  cmp QWORD PTR [rbp-48], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $63.1:rax 
  # jump($63.1, block.42, block.43)
  test al, al
  jz .LABEL__write_operand_30__43
.LABEL__write_operand_30__42:
  # $64.1: @FILE = call(write.339, file.1, "DWORD PTR ")
  .loc 1 843 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_69[rip] # "DWORD PTR "
  call write_339
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $64.1:rax 
  # $65.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 843 55
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $64.1:rax $65.1:rbx 
  # $66.1: @FILE = call(write.48, $64.1, $65.1)
  .loc 1 843 24
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $64.1
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $66.1:rax 
  # return($66.1)
  .loc 1 843 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__43:
  # $67.1: Boolean = value_type_size.1 == 2
  .loc 1 845 17
  cmp QWORD PTR [rbp-48], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $67.1:rax 
  # jump($67.1, block.45, block.46)
  test al, al
  jz .LABEL__write_operand_30__46
.LABEL__write_operand_30__45:
  # $68.1: @FILE = call(write.339, file.1, "WORD PTR ")
  .loc 1 846 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_70[rip] # "WORD PTR "
  call write_339
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $68.1:rax 
  # $69.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 846 54
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $68.1:rax $69.1:rbx 
  # $70.1: @FILE = call(write.48, $68.1, $69.1)
  .loc 1 846 24
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $68.1
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $70.1:rax 
  # return($70.1)
  .loc 1 846 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__46:
  # $71.1: Boolean = value_type_size.1 == 1
  .loc 1 848 17
  cmp QWORD PTR [rbp-48], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $71.1:rax 
  # jump($71.1, block.48, block.49)
  test al, al
  jz .LABEL__write_operand_30__49
.LABEL__write_operand_30__48:
  # $72.1: @FILE = call(write.339, file.1, "BYTE PTR ")
  .loc 1 849 24
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_71[rip] # "BYTE PTR "
  call write_339
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $72.1:rax 
  # $73.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 849 54
  mov rbx, [rbp-40]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $72.1:rax $73.1:rbx 
  # $74.1: @FILE = call(write.48, $72.1, $73.1)
  .loc 1 849 24
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $72.1
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $74.1:rax 
  # return($74.1)
  .loc 1 849 17
  jmp .LABEL__write_operand_30__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__49:
  # $75.1: @String = call(clone.329, "Unsupported type size: ")
  .loc 1 851 29
  lea rdi, .LABEL__string_78[rip] # "Unsupported type size: "
  call clone_329
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $75.1:rax 
  # $76.1: @String = call(append.331, $75.1, value_type_size.1)
  .loc 1 851 29
  mov rdi, rax
  mov rsi, [rbp-48]
  call append_331
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] $76.1:rax 
  # call(abort.31, generator.1, $76.1)
  .loc 1 851 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_31
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
.LABEL__write_operand_30__38:
  # call(abort.31, generator.1, "Invalid state")
  .loc 1 853 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] value_type_size.1:[rbp-48] 
  # [discarded value]: value_type_size.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] ir_value.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: ir_value.1
  # [discarded value]: mc_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
.LABEL__write_operand_30__20:
  # $77.1: @String = call(clone.329, "Unsupported value: ")
  .loc 1 855 21
  lea rdi, .LABEL__string_79[rip] # "Unsupported value: "
  call clone_329
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $77.1:rax 
  # $78.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  .loc 1 855 57
  mov rbx, [rbp-24]
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $77.1:rax $78.1:rbx 
  # $79.1: @String = load_struct_member($78.1, name)
  .loc 1 855 57
  mov r15, rbx
  add r15, 8
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $77.1:rax $79.1:r15 
  # $80.1: @String = call(append.332, $77.1, $79.1)
  .loc 1 855 21
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $77.1
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $80.1:rax 
  # call(abort.31, generator.1, $80.1)
  .loc 1 855 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_31
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: file.1
  # [discarded value]: generator.1
  # [discarded value]: ir_value.1
  # [live values]: 
.LABEL__write_operand_30__end:
  mov rsp, rbp
  pop rbp
  ret

write_operand_30__stack_frame_size: .word 48

  .loc 1 858 1
  .text
abort_31:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_31__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_31__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: self.1:rdi message.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 859 5
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: message.1:rsi $1.1:rax 
  # $2.1: @FILE = call(flush.343, $1.1)
  .loc 1 859 5
  mov rdi, rax
  mov [rbp-8], rsi
  call flush_343
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-8] 
  # $3.1: @String = call(clone.329, "[Generator] ")
  .loc 1 860 11
  lea rdi, .LABEL__string_80[rip] # "[Generator] "
  call clone_329
  # [live values]: message.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append.332, $3.1, message.1)
  .loc 1 860 11
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_332
  # [discarded value]: message.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # call(abort.344, $4.1)
  .loc 1 860 5
  mov rdi, rax
  call abort_344
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__abort_31__end:
  mov rsp, rbp
  pop rbp
  ret

abort_31__stack_frame_size: .word 16

  .loc 1 888 1
  .text
create_mc_generator_32:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_generator_32__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_generator_32__1:
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: output_file_path.1:rdi 
  # generator.1: @MC_Generator = new(MC_Generator)
  .loc 1 889 18
  mov [rbp-8], rdi
  mov rdi, 169
  call malloc
  # [live values]: output_file_path.1:[rbp-8] generator.1:rax 
  # store_struct_member(generator.1, output_file_path, output_file_path.1)
  .loc 1 890 5
  mov rbx, rax
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [live values]: output_file_path.1:r15[rbp-8] generator.1:rax 
  # $2.1: @Int8 = load_struct_member(output_file_path.1, data)
  .loc 1 891 35
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: output_file_path.1
  # [live values]: generator.1:rax $2.1:rbx 
  # $3.1: @Int8 = load_struct_member("w", data)
  .loc 1 891 58
  lea r15, .LABEL__string_9[rip] # "w"
  mov r15, [r15]
  # [live values]: generator.1:rax $2.1:rbx $3.1:r15 
  # $4.1: @FILE = call(fopen.349, $2.1, $3.1)
  .loc 1 891 29
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-8], rax
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: generator.1:[rbp-8] $4.1:rax 
  # store_struct_member(generator.1, output_file, $4.1)
  .loc 1 891 5
  mov rbx, [rbp-8]
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $4.1
  # [live values]: generator.1:[rbp-8] 
  # store_struct_member(generator.1, output_debug_comments, true)
  .loc 1 892 5
  mov rax, [rbp-8]
  add rax, 16
  mov BYTE PTR [rax], 1
  # [live values]: generator.1:[rbp-8] 
  # $5.1: @MC_Register_RAX = new(MC_Register_RAX)
  .loc 1 893 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_RAX[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $5.1:rax 
  # $6.1: @MC_Register = call(init.47, $5.1, "rax", "eax", "ax", "al")
  .loc 1 893 30
  mov rdi, rax
  lea rsi, .LABEL__string_81[rip] # "rax"
  lea rdx, .LABEL__string_82[rip] # "eax"
  lea rcx, .LABEL__string_83[rip] # "ax"
  lea r8, .LABEL__string_84[rip] # "al"
  call init_47
  # [discarded value]: $5.1
  # [live values]: generator.1:[rbp-8] $6.1:rax 
  # store_struct_member(generator.1, register_rax, $6.1)
  .loc 1 893 5
  mov rbx, [rbp-8]
  add rbx, 25
  mov QWORD PTR [rbx], rax
  # [discarded value]: $6.1
  # [live values]: generator.1:[rbp-8] 
  # $7.1: @MC_Register_RCX = new(MC_Register_RCX)
  .loc 1 894 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_RCX[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $7.1:rax 
  # $8.1: @MC_Register = call(init.47, $7.1, "rcx", "ecx", "cx", "cl")
  .loc 1 894 30
  mov rdi, rax
  lea rsi, .LABEL__string_85[rip] # "rcx"
  lea rdx, .LABEL__string_86[rip] # "ecx"
  lea rcx, .LABEL__string_87[rip] # "cx"
  lea r8, .LABEL__string_88[rip] # "cl"
  call init_47
  # [discarded value]: $7.1
  # [live values]: generator.1:[rbp-8] $8.1:rax 
  # store_struct_member(generator.1, register_rcx, $8.1)
  .loc 1 894 5
  mov rbx, [rbp-8]
  add rbx, 33
  mov QWORD PTR [rbx], rax
  # [discarded value]: $8.1
  # [live values]: generator.1:[rbp-8] 
  # $9.1: @MC_Register_RDX = new(MC_Register_RDX)
  .loc 1 895 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_RDX[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $9.1:rax 
  # $10.1: @MC_Register = call(init.47, $9.1, "rdx", "edx", "dx", "dl")
  .loc 1 895 30
  mov rdi, rax
  lea rsi, .LABEL__string_89[rip] # "rdx"
  lea rdx, .LABEL__string_90[rip] # "edx"
  lea rcx, .LABEL__string_91[rip] # "dx"
  lea r8, .LABEL__string_92[rip] # "dl"
  call init_47
  # [discarded value]: $9.1
  # [live values]: generator.1:[rbp-8] $10.1:rax 
  # store_struct_member(generator.1, register_rdx, $10.1)
  .loc 1 895 5
  mov rbx, [rbp-8]
  add rbx, 41
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: generator.1:[rbp-8] 
  # $11.1: @MC_Register_RBX = new(MC_Register_RBX)
  .loc 1 896 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_RBX[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $11.1:rax 
  # $12.1: @MC_Register = call(init.47, $11.1, "rbx", "ebx", "bx", "bl")
  .loc 1 896 30
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # "rbx"
  lea rdx, .LABEL__string_94[rip] # "ebx"
  lea rcx, .LABEL__string_95[rip] # "bx"
  lea r8, .LABEL__string_96[rip] # "bl"
  call init_47
  # [discarded value]: $11.1
  # [live values]: generator.1:[rbp-8] $12.1:rax 
  # store_struct_member(generator.1, register_rbx, $12.1)
  .loc 1 896 5
  mov rbx, [rbp-8]
  add rbx, 49
  mov QWORD PTR [rbx], rax
  # [discarded value]: $12.1
  # [live values]: generator.1:[rbp-8] 
  # $13.1: @MC_Register_RSI = new(MC_Register_RSI)
  .loc 1 897 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_RSI[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $13.1:rax 
  # $14.1: @MC_Register = call(init.47, $13.1, "rsi", "esi", "si", "sil")
  .loc 1 897 30
  mov rdi, rax
  lea rsi, .LABEL__string_97[rip] # "rsi"
  lea rdx, .LABEL__string_98[rip] # "esi"
  lea rcx, .LABEL__string_99[rip] # "si"
  lea r8, .LABEL__string_100[rip] # "sil"
  call init_47
  # [discarded value]: $13.1
  # [live values]: generator.1:[rbp-8] $14.1:rax 
  # store_struct_member(generator.1, register_rsi, $14.1)
  .loc 1 897 5
  mov rbx, [rbp-8]
  add rbx, 57
  mov QWORD PTR [rbx], rax
  # [discarded value]: $14.1
  # [live values]: generator.1:[rbp-8] 
  # $15.1: @MC_Register_RDI = new(MC_Register_RDI)
  .loc 1 898 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_RDI[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $15.1:rax 
  # $16.1: @MC_Register = call(init.47, $15.1, "rdi", "edi", "di", "dil")
  .loc 1 898 30
  mov rdi, rax
  lea rsi, .LABEL__string_101[rip] # "rdi"
  lea rdx, .LABEL__string_102[rip] # "edi"
  lea rcx, .LABEL__string_103[rip] # "di"
  lea r8, .LABEL__string_104[rip] # "dil"
  call init_47
  # [discarded value]: $15.1
  # [live values]: generator.1:[rbp-8] $16.1:rax 
  # store_struct_member(generator.1, register_rdi, $16.1)
  .loc 1 898 5
  mov rbx, [rbp-8]
  add rbx, 65
  mov QWORD PTR [rbx], rax
  # [discarded value]: $16.1
  # [live values]: generator.1:[rbp-8] 
  # $17.1: @MC_Register_R8 = new(MC_Register_R8)
  .loc 1 899 29
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R8[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $17.1:rax 
  # $18.1: @MC_Register = call(init.47, $17.1, "r8", "r8d", "r8w", "r8b")
  .loc 1 899 29
  mov rdi, rax
  lea rsi, .LABEL__string_105[rip] # "r8"
  lea rdx, .LABEL__string_106[rip] # "r8d"
  lea rcx, .LABEL__string_107[rip] # "r8w"
  lea r8, .LABEL__string_108[rip] # "r8b"
  call init_47
  # [discarded value]: $17.1
  # [live values]: generator.1:[rbp-8] $18.1:rax 
  # store_struct_member(generator.1, register_r8, $18.1)
  .loc 1 899 5
  mov rbx, [rbp-8]
  add rbx, 73
  mov QWORD PTR [rbx], rax
  # [discarded value]: $18.1
  # [live values]: generator.1:[rbp-8] 
  # $19.1: @MC_Register_R9 = new(MC_Register_R9)
  .loc 1 900 29
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R9[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $19.1:rax 
  # $20.1: @MC_Register = call(init.47, $19.1, "r9", "r9d", "r9w", "r9b")
  .loc 1 900 29
  mov rdi, rax
  lea rsi, .LABEL__string_109[rip] # "r9"
  lea rdx, .LABEL__string_110[rip] # "r9d"
  lea rcx, .LABEL__string_111[rip] # "r9w"
  lea r8, .LABEL__string_112[rip] # "r9b"
  call init_47
  # [discarded value]: $19.1
  # [live values]: generator.1:[rbp-8] $20.1:rax 
  # store_struct_member(generator.1, register_r9, $20.1)
  .loc 1 900 5
  mov rbx, [rbp-8]
  add rbx, 81
  mov QWORD PTR [rbx], rax
  # [discarded value]: $20.1
  # [live values]: generator.1:[rbp-8] 
  # $21.1: @MC_Register_R10 = new(MC_Register_R10)
  .loc 1 901 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R10[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $21.1:rax 
  # $22.1: @MC_Register = call(init.47, $21.1, "r10", "r10d", "r10w", "r10b")
  .loc 1 901 30
  mov rdi, rax
  lea rsi, .LABEL__string_113[rip] # "r10"
  lea rdx, .LABEL__string_114[rip] # "r10d"
  lea rcx, .LABEL__string_115[rip] # "r10w"
  lea r8, .LABEL__string_116[rip] # "r10b"
  call init_47
  # [discarded value]: $21.1
  # [live values]: generator.1:[rbp-8] $22.1:rax 
  # store_struct_member(generator.1, register_r10, $22.1)
  .loc 1 901 5
  mov rbx, [rbp-8]
  add rbx, 89
  mov QWORD PTR [rbx], rax
  # [discarded value]: $22.1
  # [live values]: generator.1:[rbp-8] 
  # $23.1: @MC_Register_R11 = new(MC_Register_R11)
  .loc 1 902 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R11[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $23.1:rax 
  # $24.1: @MC_Register = call(init.47, $23.1, "r11", "r11d", "r11w", "r11b")
  .loc 1 902 30
  mov rdi, rax
  lea rsi, .LABEL__string_117[rip] # "r11"
  lea rdx, .LABEL__string_118[rip] # "r11d"
  lea rcx, .LABEL__string_119[rip] # "r11w"
  lea r8, .LABEL__string_120[rip] # "r11b"
  call init_47
  # [discarded value]: $23.1
  # [live values]: generator.1:[rbp-8] $24.1:rax 
  # store_struct_member(generator.1, register_r11, $24.1)
  .loc 1 902 5
  mov rbx, [rbp-8]
  add rbx, 97
  mov QWORD PTR [rbx], rax
  # [discarded value]: $24.1
  # [live values]: generator.1:[rbp-8] 
  # $25.1: @MC_Register_R12 = new(MC_Register_R12)
  .loc 1 903 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R12[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $25.1:rax 
  # $26.1: @MC_Register = call(init.47, $25.1, "r12", "r12d", "r12w", "r12b")
  .loc 1 903 30
  mov rdi, rax
  lea rsi, .LABEL__string_121[rip] # "r12"
  lea rdx, .LABEL__string_122[rip] # "r12d"
  lea rcx, .LABEL__string_123[rip] # "r12w"
  lea r8, .LABEL__string_124[rip] # "r12b"
  call init_47
  # [discarded value]: $25.1
  # [live values]: generator.1:[rbp-8] $26.1:rax 
  # store_struct_member(generator.1, register_r12, $26.1)
  .loc 1 903 5
  mov rbx, [rbp-8]
  add rbx, 105
  mov QWORD PTR [rbx], rax
  # [discarded value]: $26.1
  # [live values]: generator.1:[rbp-8] 
  # $27.1: @MC_Register_R13 = new(MC_Register_R13)
  .loc 1 904 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R13[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $27.1:rax 
  # $28.1: @MC_Register = call(init.47, $27.1, "r13", "r13d", "r13w", "r13b")
  .loc 1 904 30
  mov rdi, rax
  lea rsi, .LABEL__string_125[rip] # "r13"
  lea rdx, .LABEL__string_126[rip] # "r13d"
  lea rcx, .LABEL__string_127[rip] # "r13w"
  lea r8, .LABEL__string_128[rip] # "r13b"
  call init_47
  # [discarded value]: $27.1
  # [live values]: generator.1:[rbp-8] $28.1:rax 
  # store_struct_member(generator.1, register_r13, $28.1)
  .loc 1 904 5
  mov rbx, [rbp-8]
  add rbx, 113
  mov QWORD PTR [rbx], rax
  # [discarded value]: $28.1
  # [live values]: generator.1:[rbp-8] 
  # $29.1: @MC_Register_R14 = new(MC_Register_R14)
  .loc 1 905 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R14[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $29.1:rax 
  # $30.1: @MC_Register = call(init.47, $29.1, "r14", "r14d", "r14w", "r14b")
  .loc 1 905 30
  mov rdi, rax
  lea rsi, .LABEL__string_129[rip] # "r14"
  lea rdx, .LABEL__string_130[rip] # "r14d"
  lea rcx, .LABEL__string_131[rip] # "r14w"
  lea r8, .LABEL__string_132[rip] # "r14b"
  call init_47
  # [discarded value]: $29.1
  # [live values]: generator.1:[rbp-8] $30.1:rax 
  # store_struct_member(generator.1, register_r14, $30.1)
  .loc 1 905 5
  mov rbx, [rbp-8]
  add rbx, 121
  mov QWORD PTR [rbx], rax
  # [discarded value]: $30.1
  # [live values]: generator.1:[rbp-8] 
  # $31.1: @MC_Register_R15 = new(MC_Register_R15)
  .loc 1 906 30
  mov rdi, 49
  call malloc
  lea rbx, MC_Register_R15[rip]
  mov [rax], rbx
  # [live values]: generator.1:[rbp-8] $31.1:rax 
  # $32.1: @MC_Register = call(init.47, $31.1, "r15", "r15d", "r15w", "r15b")
  .loc 1 906 30
  mov rdi, rax
  lea rsi, .LABEL__string_133[rip] # "r15"
  lea rdx, .LABEL__string_134[rip] # "r15d"
  lea rcx, .LABEL__string_135[rip] # "r15w"
  lea r8, .LABEL__string_136[rip] # "r15b"
  call init_47
  # [discarded value]: $31.1
  # [live values]: generator.1:[rbp-8] $32.1:rax 
  # store_struct_member(generator.1, register_r15, $32.1)
  .loc 1 906 5
  mov rbx, [rbp-8]
  add rbx, 129
  mov QWORD PTR [rbx], rax
  # [discarded value]: $32.1
  # [live values]: generator.1:[rbp-8] 
  # store_struct_member(generator.1, first_value, null)
  .loc 1 907 5
  mov rax, [rbp-8]
  add rax, 137
  mov QWORD PTR [rax], 0
  # [live values]: generator.1:[rbp-8] 
  # store_struct_member(generator.1, last_value, null)
  .loc 1 908 5
  mov rax, [rbp-8]
  add rax, 145
  mov QWORD PTR [rax], 0
  # [live values]: generator.1:[rbp-8] 
  # store_struct_member(generator.1, stack_frame_size, 0)
  .loc 1 909 5
  mov rax, [rbp-8]
  add rax, 153
  mov QWORD PTR [rax], 0
  # [live values]: generator.1:[rbp-8] 
  # $33.1: @List = call(create_list.307)
  .loc 1 910 25
  call create_list_307
  # [live values]: generator.1:[rbp-8] $33.1:rax 
  # store_struct_member(generator.1, strings, $33.1)
  .loc 1 910 5
  mov rbx, [rbp-8]
  add rbx, 161
  mov QWORD PTR [rbx], rax
  # [discarded value]: $33.1
  # [live values]: generator.1:[rbp-8] 
  # return(generator.1)
  .loc 1 911 5
  mov rax, [rbp-8]
  jmp .LABEL__create_mc_generator_32__end
  # [discarded value]: generator.1
  # [live values]: 
.LABEL__create_mc_generator_32__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_generator_32__stack_frame_size: .word 16

  .loc 1 914 1
  .text
reset_33:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_33__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_33__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(block.2)
  mov [rbp-8], rdi
.LABEL__reset_33__2:
  # $1.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 915 12
  mov rax, [rbp-8]
  add rax, 137
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 915 12
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.3, block.4)
  test bl, bl
  jz .LABEL__reset_33__4
.LABEL__reset_33__3:
  # value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 916 18
  mov rax, [rbp-8]
  add rax, 137
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] value.1:rax 
  # $4.1: @MC_Value = load_struct_member(value.1, next_value)
  .loc 1 917 28
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] value.1:rax $4.1:rbx 
  # store_struct_member(self.1, first_value, $4.1)
  .loc 1 917 9
  mov r15, [rbp-8]
  add r15, 137
  mov QWORD PTR [r15], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] value.1:rax 
  # store_struct_member(value.1, prev_value, null)
  .loc 1 918 9
  mov rbx, rax
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-8] value.1:rax 
  # store_struct_member(value.1, next_value, null)
  .loc 1 919 9
  mov rbx, rax
  add rbx, 8
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-8] value.1:rax 
  # $5.1: @MC_Register = load_struct_member(value.1, register)
  .loc 1 920 13
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $5.1:rbx 
  # $6.1: Boolean = $5.1 != null
  .loc 1 920 13
  cmp rbx, 0
  setne al
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # jump($6.1, block.5, block.2)
  test al, al
  jz .LABEL__reset_33__2
.LABEL__reset_33__5:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 921 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__reset_33__4:
  # store_struct_member(self.1, last_value, null)
  .loc 1 924 5
  mov rax, [rbp-8]
  add rax, 145
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # store_struct_member(self.1, stack_frame_size, 0)
  .loc 1 925 5
  mov rax, [rbp-8]
  add rax, 153
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__reset_33__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_33__end:
  mov rsp, rbp
  pop rbp
  ret

reset_33__stack_frame_size: .word 16

  .loc 1 928 1
  .text
find_unused_register_34:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR find_unused_register_34__stack_frame_size[rip]
  sub rsp, rax
.LABEL__find_unused_register_34__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 929 9
  mov rax, rdi
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = load_struct_member($1.1, is_reserved)
  .loc 1 929 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # $4.1: Boolean = $2.1 == false
  .loc 1 929 9
  cmp bl, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__find_unused_register_34__3
.LABEL__find_unused_register_34__2:
  # $5.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 929 51
  mov rax, [rbp-9]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $5.1:rax 
  # $6.1: @MC_Value = load_struct_member($5.1, value)
  .loc 1 929 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $6.1:rbx 
  # $4.2: Boolean = $6.1 == null
  .loc 1 929 51
  cmp rbx, 0
  sete al
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:rax[rbp-1] 
  # jump(block.3)
  mov [rbp-1], al
.LABEL__find_unused_register_34__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 1 929 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # jump($4.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__find_unused_register_34__5
.LABEL__find_unused_register_34__4:
  # $8.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 930 16
  mov rax, [rbp-9]
  add rax, 25
  mov rax, [rax]
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $8.1:rax 
  # return($8.1)
  .loc 1 930 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
.LABEL__find_unused_register_34__5:
  # $9.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 1 932 9
  mov rax, [rbp-9]
  add rax, 49
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $9.1:rax 
  # $10.1: Boolean = load_struct_member($9.1, is_reserved)
  .loc 1 932 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $10.1:rbx 
  # $12.1: Boolean = $10.1 == false
  .loc 1 932 9
  cmp bl, 0
  sete al
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:rax 
  # jump($12.1, block.7, block.8)
  test al, al
  mov [rbp-10], al
  jz .LABEL__find_unused_register_34__8
.LABEL__find_unused_register_34__7:
  # $13.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 1 932 51
  mov rax, [rbp-9]
  add rax, 49
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $13.1:rax 
  # $14.1: @MC_Value = load_struct_member($13.1, value)
  .loc 1 932 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $14.1:rbx 
  # $12.2: Boolean = $14.1 == null
  .loc 1 932 51
  cmp rbx, 0
  sete al
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:rax[rbp-10] 
  # jump(block.8)
  mov [rbp-10], al
.LABEL__find_unused_register_34__8:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 1 932 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # jump($12.3, block.9, block.10)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__find_unused_register_34__10
.LABEL__find_unused_register_34__9:
  # $16.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 1 933 16
  mov rax, [rbp-9]
  add rax, 49
  mov rax, [rax]
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $16.1:rax 
  # return($16.1)
  .loc 1 933 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
.LABEL__find_unused_register_34__10:
  # $17.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 1 935 9
  mov rax, [rbp-9]
  add rax, 129
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $17.1:rax 
  # $18.1: Boolean = load_struct_member($17.1, is_reserved)
  .loc 1 935 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $18.1:rbx 
  # $20.1: Boolean = $18.1 == false
  .loc 1 935 9
  cmp bl, 0
  sete al
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:rax 
  # jump($20.1, block.12, block.13)
  test al, al
  mov [rbp-11], al
  jz .LABEL__find_unused_register_34__13
.LABEL__find_unused_register_34__12:
  # $21.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 1 935 51
  mov rax, [rbp-9]
  add rax, 129
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $21.1:rax 
  # $22.1: @MC_Value = load_struct_member($21.1, value)
  .loc 1 935 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $22.1:rbx 
  # $20.2: Boolean = $22.1 == null
  .loc 1 935 51
  cmp rbx, 0
  sete al
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:rax[rbp-11] 
  # jump(block.13)
  mov [rbp-11], al
.LABEL__find_unused_register_34__13:
  # $20.3: Boolean = phi($20.1, $20.2)
  .loc 1 935 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # jump($20.3, block.14, block.15)
  mov al, [rbp-11]
  test al, al
  jz .LABEL__find_unused_register_34__15
.LABEL__find_unused_register_34__14:
  # $24.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 1 936 16
  mov rax, [rbp-9]
  add rax, 129
  mov rax, [rax]
  # [discarded value]: $20.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $24.1:rax 
  # return($24.1)
  .loc 1 936 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
.LABEL__find_unused_register_34__15:
  # $25.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 1 938 9
  mov rax, [rbp-9]
  add rax, 121
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $25.1:rax 
  # $26.1: Boolean = load_struct_member($25.1, is_reserved)
  .loc 1 938 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $26.1:rbx 
  # $28.1: Boolean = $26.1 == false
  .loc 1 938 9
  cmp bl, 0
  sete al
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:rax 
  # jump($28.1, block.17, block.18)
  test al, al
  mov [rbp-12], al
  jz .LABEL__find_unused_register_34__18
.LABEL__find_unused_register_34__17:
  # $29.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 1 938 51
  mov rax, [rbp-9]
  add rax, 121
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $29.1:rax 
  # $30.1: @MC_Value = load_struct_member($29.1, value)
  .loc 1 938 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $30.1:rbx 
  # $28.2: Boolean = $30.1 == null
  .loc 1 938 51
  cmp rbx, 0
  sete al
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:rax[rbp-12] 
  # jump(block.18)
  mov [rbp-12], al
.LABEL__find_unused_register_34__18:
  # $28.3: Boolean = phi($28.1, $28.2)
  .loc 1 938 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # jump($28.3, block.19, block.20)
  mov al, [rbp-12]
  test al, al
  jz .LABEL__find_unused_register_34__20
.LABEL__find_unused_register_34__19:
  # $32.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 1 939 16
  mov rax, [rbp-9]
  add rax, 121
  mov rax, [rax]
  # [discarded value]: $28.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $32.1:rax 
  # return($32.1)
  .loc 1 939 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
.LABEL__find_unused_register_34__20:
  # $33.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 1 941 9
  mov rax, [rbp-9]
  add rax, 113
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $33.1:rax 
  # $34.1: Boolean = load_struct_member($33.1, is_reserved)
  .loc 1 941 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $34.1:rbx 
  # $36.1: Boolean = $34.1 == false
  .loc 1 941 9
  cmp bl, 0
  sete al
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:rax 
  # jump($36.1, block.22, block.23)
  test al, al
  mov [rbp-13], al
  jz .LABEL__find_unused_register_34__23
.LABEL__find_unused_register_34__22:
  # $37.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 1 941 51
  mov rax, [rbp-9]
  add rax, 113
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $37.1:rax 
  # $38.1: @MC_Value = load_struct_member($37.1, value)
  .loc 1 941 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $38.1:rbx 
  # $36.2: Boolean = $38.1 == null
  .loc 1 941 51
  cmp rbx, 0
  sete al
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:rax[rbp-13] 
  # jump(block.23)
  mov [rbp-13], al
.LABEL__find_unused_register_34__23:
  # $36.3: Boolean = phi($36.1, $36.2)
  .loc 1 941 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # jump($36.3, block.24, block.25)
  mov al, [rbp-13]
  test al, al
  jz .LABEL__find_unused_register_34__25
.LABEL__find_unused_register_34__24:
  # $40.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 1 942 16
  mov rax, [rbp-9]
  add rax, 113
  mov rax, [rax]
  # [discarded value]: $36.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $40.1:rax 
  # return($40.1)
  .loc 1 942 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
.LABEL__find_unused_register_34__25:
  # $41.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 1 944 9
  mov rax, [rbp-9]
  add rax, 105
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $41.1:rax 
  # $42.1: Boolean = load_struct_member($41.1, is_reserved)
  .loc 1 944 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $42.1:rbx 
  # $44.1: Boolean = $42.1 == false
  .loc 1 944 9
  cmp bl, 0
  sete al
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:rax 
  # jump($44.1, block.27, block.28)
  test al, al
  mov [rbp-14], al
  jz .LABEL__find_unused_register_34__28
.LABEL__find_unused_register_34__27:
  # $45.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 1 944 51
  mov rax, [rbp-9]
  add rax, 105
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $45.1:rax 
  # $46.1: @MC_Value = load_struct_member($45.1, value)
  .loc 1 944 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $46.1:rbx 
  # $44.2: Boolean = $46.1 == null
  .loc 1 944 51
  cmp rbx, 0
  sete al
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:rax[rbp-14] 
  # jump(block.28)
  mov [rbp-14], al
.LABEL__find_unused_register_34__28:
  # $44.3: Boolean = phi($44.1, $44.2)
  .loc 1 944 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # jump($44.3, block.29, block.30)
  mov al, [rbp-14]
  test al, al
  jz .LABEL__find_unused_register_34__30
.LABEL__find_unused_register_34__29:
  # $48.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 1 945 16
  mov rax, [rbp-9]
  add rax, 105
  mov rax, [rax]
  # [discarded value]: $44.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $48.1:rax 
  # return($48.1)
  .loc 1 945 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
.LABEL__find_unused_register_34__30:
  # $49.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 1 947 9
  mov rax, [rbp-9]
  add rax, 97
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $49.1:rax 
  # $50.1: Boolean = load_struct_member($49.1, is_reserved)
  .loc 1 947 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $50.1:rbx 
  # $52.1: Boolean = $50.1 == false
  .loc 1 947 9
  cmp bl, 0
  sete al
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:rax 
  # jump($52.1, block.32, block.33)
  test al, al
  mov [rbp-15], al
  jz .LABEL__find_unused_register_34__33
.LABEL__find_unused_register_34__32:
  # $53.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 1 947 51
  mov rax, [rbp-9]
  add rax, 97
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $53.1:rax 
  # $54.1: @MC_Value = load_struct_member($53.1, value)
  .loc 1 947 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $54.1:rbx 
  # $52.2: Boolean = $54.1 == null
  .loc 1 947 51
  cmp rbx, 0
  sete al
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:rax[rbp-15] 
  # jump(block.33)
  mov [rbp-15], al
.LABEL__find_unused_register_34__33:
  # $52.3: Boolean = phi($52.1, $52.2)
  .loc 1 947 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # jump($52.3, block.34, block.35)
  mov al, [rbp-15]
  test al, al
  jz .LABEL__find_unused_register_34__35
.LABEL__find_unused_register_34__34:
  # $56.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 1 948 16
  mov rax, [rbp-9]
  add rax, 97
  mov rax, [rax]
  # [discarded value]: $52.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $56.1:rax 
  # return($56.1)
  .loc 1 948 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
.LABEL__find_unused_register_34__35:
  # $57.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 1 950 9
  mov rax, [rbp-9]
  add rax, 89
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $57.1:rax 
  # $58.1: Boolean = load_struct_member($57.1, is_reserved)
  .loc 1 950 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $58.1:rbx 
  # $60.1: Boolean = $58.1 == false
  .loc 1 950 9
  cmp bl, 0
  sete al
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:rax 
  # jump($60.1, block.37, block.38)
  test al, al
  mov [rbp-16], al
  jz .LABEL__find_unused_register_34__38
.LABEL__find_unused_register_34__37:
  # $61.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 1 950 51
  mov rax, [rbp-9]
  add rax, 89
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $61.1:rax 
  # $62.1: @MC_Value = load_struct_member($61.1, value)
  .loc 1 950 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $62.1:rbx 
  # $60.2: Boolean = $62.1 == null
  .loc 1 950 51
  cmp rbx, 0
  sete al
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:rax[rbp-16] 
  # jump(block.38)
  mov [rbp-16], al
.LABEL__find_unused_register_34__38:
  # $60.3: Boolean = phi($60.1, $60.2)
  .loc 1 950 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # jump($60.3, block.39, block.40)
  mov al, [rbp-16]
  test al, al
  jz .LABEL__find_unused_register_34__40
.LABEL__find_unused_register_34__39:
  # $64.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 1 951 16
  mov rax, [rbp-9]
  add rax, 89
  mov rax, [rax]
  # [discarded value]: $60.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $64.1:rax 
  # return($64.1)
  .loc 1 951 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
.LABEL__find_unused_register_34__40:
  # $65.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 953 9
  mov rax, [rbp-9]
  add rax, 81
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $65.1:rax 
  # $66.1: Boolean = load_struct_member($65.1, is_reserved)
  .loc 1 953 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $66.1:rbx 
  # $68.1: Boolean = $66.1 == false
  .loc 1 953 9
  cmp bl, 0
  sete al
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:rax 
  # jump($68.1, block.42, block.43)
  test al, al
  mov [rbp-17], al
  jz .LABEL__find_unused_register_34__43
.LABEL__find_unused_register_34__42:
  # $69.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 953 50
  mov rax, [rbp-9]
  add rax, 81
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $69.1:rax 
  # $70.1: @MC_Value = load_struct_member($69.1, value)
  .loc 1 953 50
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $70.1:rbx 
  # $68.2: Boolean = $70.1 == null
  .loc 1 953 50
  cmp rbx, 0
  sete al
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:rax[rbp-17] 
  # jump(block.43)
  mov [rbp-17], al
.LABEL__find_unused_register_34__43:
  # $68.3: Boolean = phi($68.1, $68.2)
  .loc 1 953 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # jump($68.3, block.44, block.45)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__find_unused_register_34__45
.LABEL__find_unused_register_34__44:
  # $72.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 954 16
  mov rax, [rbp-9]
  add rax, 81
  mov rax, [rax]
  # [discarded value]: $68.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $72.1:rax 
  # return($72.1)
  .loc 1 954 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
.LABEL__find_unused_register_34__45:
  # $73.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 956 9
  mov rax, [rbp-9]
  add rax, 73
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $73.1:rax 
  # $74.1: Boolean = load_struct_member($73.1, is_reserved)
  .loc 1 956 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $74.1:rbx 
  # $76.1: Boolean = $74.1 == false
  .loc 1 956 9
  cmp bl, 0
  sete al
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:rax 
  # jump($76.1, block.47, block.48)
  test al, al
  mov [rbp-18], al
  jz .LABEL__find_unused_register_34__48
.LABEL__find_unused_register_34__47:
  # $77.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 956 50
  mov rax, [rbp-9]
  add rax, 73
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $77.1:rax 
  # $78.1: @MC_Value = load_struct_member($77.1, value)
  .loc 1 956 50
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $78.1:rbx 
  # $76.2: Boolean = $78.1 == null
  .loc 1 956 50
  cmp rbx, 0
  sete al
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:rax[rbp-18] 
  # jump(block.48)
  mov [rbp-18], al
.LABEL__find_unused_register_34__48:
  # $76.3: Boolean = phi($76.1, $76.2)
  .loc 1 956 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # jump($76.3, block.49, block.50)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__find_unused_register_34__50
.LABEL__find_unused_register_34__49:
  # $80.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 957 16
  mov rax, [rbp-9]
  add rax, 73
  mov rax, [rax]
  # [discarded value]: $76.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $80.1:rax 
  # return($80.1)
  .loc 1 957 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
.LABEL__find_unused_register_34__50:
  # $81.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 959 9
  mov rax, [rbp-9]
  add rax, 33
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $81.1:rax 
  # $82.1: Boolean = load_struct_member($81.1, is_reserved)
  .loc 1 959 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $82.1:rbx 
  # $84.1: Boolean = $82.1 == false
  .loc 1 959 9
  cmp bl, 0
  sete al
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:rax 
  # jump($84.1, block.52, block.53)
  test al, al
  mov [rbp-19], al
  jz .LABEL__find_unused_register_34__53
.LABEL__find_unused_register_34__52:
  # $85.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 959 51
  mov rax, [rbp-9]
  add rax, 33
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $85.1:rax 
  # $86.1: @MC_Value = load_struct_member($85.1, value)
  .loc 1 959 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $86.1:rbx 
  # $84.2: Boolean = $86.1 == null
  .loc 1 959 51
  cmp rbx, 0
  sete al
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:rax[rbp-19] 
  # jump(block.53)
  mov [rbp-19], al
.LABEL__find_unused_register_34__53:
  # $84.3: Boolean = phi($84.1, $84.2)
  .loc 1 959 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # jump($84.3, block.54, block.55)
  mov al, [rbp-19]
  test al, al
  jz .LABEL__find_unused_register_34__55
.LABEL__find_unused_register_34__54:
  # $88.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 960 16
  mov rax, [rbp-9]
  add rax, 33
  mov rax, [rax]
  # [discarded value]: $84.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $88.1:rax 
  # return($88.1)
  .loc 1 960 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
.LABEL__find_unused_register_34__55:
  # $89.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 962 9
  mov rax, [rbp-9]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $89.1:rax 
  # $90.1: Boolean = load_struct_member($89.1, is_reserved)
  .loc 1 962 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $90.1:rbx 
  # $92.1: Boolean = $90.1 == false
  .loc 1 962 9
  cmp bl, 0
  sete al
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:rax 
  # jump($92.1, block.57, block.58)
  test al, al
  mov [rbp-20], al
  jz .LABEL__find_unused_register_34__58
.LABEL__find_unused_register_34__57:
  # $93.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 962 51
  mov rax, [rbp-9]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $93.1:rax 
  # $94.1: @MC_Value = load_struct_member($93.1, value)
  .loc 1 962 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $94.1:rbx 
  # $92.2: Boolean = $94.1 == null
  .loc 1 962 51
  cmp rbx, 0
  sete al
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:rax[rbp-20] 
  # jump(block.58)
  mov [rbp-20], al
.LABEL__find_unused_register_34__58:
  # $92.3: Boolean = phi($92.1, $92.2)
  .loc 1 962 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # jump($92.3, block.59, block.60)
  mov al, [rbp-20]
  test al, al
  jz .LABEL__find_unused_register_34__60
.LABEL__find_unused_register_34__59:
  # $96.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 963 16
  mov rax, [rbp-9]
  add rax, 41
  mov rax, [rax]
  # [discarded value]: $92.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $96.1:rax 
  # return($96.1)
  .loc 1 963 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
.LABEL__find_unused_register_34__60:
  # $97.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 965 9
  mov rax, [rbp-9]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $97.1:rax 
  # $98.1: Boolean = load_struct_member($97.1, is_reserved)
  .loc 1 965 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $98.1:rbx 
  # $100.1: Boolean = $98.1 == false
  .loc 1 965 9
  cmp bl, 0
  sete al
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:rax 
  # jump($100.1, block.62, block.63)
  test al, al
  mov [rbp-21], al
  jz .LABEL__find_unused_register_34__63
.LABEL__find_unused_register_34__62:
  # $101.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 965 51
  mov rax, [rbp-9]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $101.1:rax 
  # $102.1: @MC_Value = load_struct_member($101.1, value)
  .loc 1 965 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $102.1:rbx 
  # $100.2: Boolean = $102.1 == null
  .loc 1 965 51
  cmp rbx, 0
  sete al
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:rax[rbp-21] 
  # jump(block.63)
  mov [rbp-21], al
.LABEL__find_unused_register_34__63:
  # $100.3: Boolean = phi($100.1, $100.2)
  .loc 1 965 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # jump($100.3, block.64, block.65)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__find_unused_register_34__65
.LABEL__find_unused_register_34__64:
  # $104.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 966 16
  mov rax, [rbp-9]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: $100.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $104.1:rax 
  # return($104.1)
  .loc 1 966 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
.LABEL__find_unused_register_34__65:
  # $105.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 968 9
  mov rax, [rbp-9]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $105.1:rax 
  # $106.1: Boolean = load_struct_member($105.1, is_reserved)
  .loc 1 968 9
  mov rbx, rax
  add rbx, 40
  mov bl, [rbx]
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $106.1:rbx 
  # $108.1: Boolean = $106.1 == false
  .loc 1 968 9
  cmp bl, 0
  sete al
  # [discarded value]: $106.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:rax 
  # jump($108.1, block.67, block.68)
  test al, al
  mov [rbp-22], al
  jz .LABEL__find_unused_register_34__68
.LABEL__find_unused_register_34__67:
  # $109.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 968 51
  mov rax, [rbp-9]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $109.1:rax 
  # $110.1: @MC_Value = load_struct_member($109.1, value)
  .loc 1 968 51
  mov rbx, rax
  add rbx, 41
  mov rbx, [rbx]
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $110.1:rbx 
  # $108.2: Boolean = $110.1 == null
  .loc 1 968 51
  cmp rbx, 0
  sete al
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:rax[rbp-22] 
  # jump(block.68)
  mov [rbp-22], al
.LABEL__find_unused_register_34__68:
  # $108.3: Boolean = phi($108.1, $108.2)
  .loc 1 968 9
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # jump($108.3, block.69, block.70)
  mov al, [rbp-22]
  test al, al
  jz .LABEL__find_unused_register_34__70
.LABEL__find_unused_register_34__69:
  # $112.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 969 16
  mov rax, [rbp-9]
  add rax, 65
  mov rax, [rax]
  # [discarded value]: $108.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $112.1:rax 
  # return($112.1)
  .loc 1 969 9
  jmp .LABEL__find_unused_register_34__end
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
.LABEL__find_unused_register_34__70:
  # call(abort.31, self.1, "All registered are used")
  .loc 1 971 5
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_137[rip] # "All registered are used"
  call abort_31
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [discarded value]: $108.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $108.1:[rbp-22] 
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [discarded value]: $100.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $100.1:[rbp-21] 
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [discarded value]: $92.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $92.1:[rbp-20] 
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [discarded value]: $84.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $84.1:[rbp-19] 
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [discarded value]: $76.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $76.1:[rbp-18] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [discarded value]: $68.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $68.1:[rbp-17] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [discarded value]: $60.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $60.1:[rbp-16] 
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [discarded value]: $52.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $52.1:[rbp-15] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [discarded value]: $44.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $44.1:[rbp-14] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [discarded value]: $36.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $36.1:[rbp-13] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [discarded value]: $28.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $28.1:[rbp-12] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [discarded value]: $20.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $20.1:[rbp-11] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $12.1:[rbp-10] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__find_unused_register_34__end:
  mov rsp, rbp
  pop rbp
  ret

find_unused_register_34__stack_frame_size: .word 32

  .loc 1 974 1
  .text
create_mc_value_35:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_value_35__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_value_35__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_instruction.1: @IR_Instruction = load_variable(ir_instruction)
  # [live values]: self.1:rdi ir_instruction.1:rsi 
  # mc_value.1: @MC_Value = new(MC_Value)
  .loc 1 975 17
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 48
  call malloc
  # [live values]: self.1:[rbp-16] ir_instruction.1:[rbp-8] mc_value.1:rax 
  # $2.1: @IR_Variable_Value = load_struct_member(ir_instruction.1, result_value)
  .loc 1 976 34
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] ir_instruction.1:[rbp-8] mc_value.1:rax $2.1:rbx 
  # store_struct_member(mc_value.1, ir_variable_value, $2.1)
  .loc 1 976 5
  mov r15, rax
  add r15, 24
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] ir_instruction.1:[rbp-8] mc_value.1:rax 
  # store_struct_member(mc_value.1, ir_instruction, ir_instruction.1)
  .loc 1 977 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-16] mc_value.1:rax 
  # store_struct_member(mc_value.1, register, null)
  .loc 1 978 5
  mov rbx, rax
  add rbx, 32
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-16] mc_value.1:rax 
  # store_struct_member(mc_value.1, address, null)
  .loc 1 979 5
  mov rbx, rax
  add rbx, 40
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-16] mc_value.1:rax 
  # store_struct_member(mc_value.1, next_value, null)
  .loc 1 980 5
  mov rbx, rax
  add rbx, 8
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-16] mc_value.1:rax 
  # $3.1: @MC_Value = load_struct_member(self.1, last_value)
  .loc 1 981 27
  mov rbx, [rbp-16]
  add rbx, 145
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] mc_value.1:rax $3.1:rbx 
  # store_struct_member(mc_value.1, prev_value, $3.1)
  .loc 1 981 5
  mov r15, rax
  mov QWORD PTR [r15], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] mc_value.1:rax 
  # $4.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 982 9
  mov rbx, [rbp-16]
  add rbx, 137
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] mc_value.1:rax $4.1:rbx 
  # $5.1: Boolean = $4.1 == null
  .loc 1 982 9
  cmp rbx, 0
  sete r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] mc_value.1:rax $5.1:r15 
  # jump($5.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__create_mc_value_35__4
.LABEL__create_mc_value_35__2:
  # store_struct_member(self.1, first_value, mc_value.1)
  .loc 1 983 9
  mov rax, [rbp-16]
  add rax, 137
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx[rbp-24] 
  # jump(block.3)
  mov [rbp-24], rbx
.LABEL__create_mc_value_35__3:
  # store_struct_member(self.1, last_value, mc_value.1)
  .loc 1 987 5
  mov rax, [rbp-16]
  add rax, 145
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] mc_value.1:rbx[rbp-24] 
  # return()
  mov [rbp-24], rbx
  jmp .LABEL__create_mc_value_35__end
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-24] 
.LABEL__create_mc_value_35__4:
  # $6.1: @MC_Value = load_struct_member(self.1, last_value)
  .loc 1 985 9
  mov rax, [rbp-16]
  add rax, 145
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-24] $6.1:rax 
  # store_struct_member($6.1, next_value, mc_value.1)
  .loc 1 985 9
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] mc_value.1:r15[rbp-24] 
  # jump(block.3)
  jmp .LABEL__create_mc_value_35__3
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__create_mc_value_35__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_value_35__stack_frame_size: .word 32

  .loc 1 990 1
  .text
map_variable_value_36:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_36__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_36__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx 
  # $1.1: Boolean = address.1 == null
  .loc 1 991 9
  cmp rdx, 0
  sete al
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__map_variable_value_36__3
.LABEL__map_variable_value_36__2:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 992 9
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] 
.LABEL__map_variable_value_36__3:
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 994 17
  mov rax, [rbp-24]
  add rax, 137
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:rax 
  # jump(block.4)
  mov [rbp-32], rax
.LABEL__map_variable_value_36__4:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.7)
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # $3.1: Boolean = mc_value.2 != null
  .loc 1 995 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  jz .LABEL__map_variable_value_36__6
.LABEL__map_variable_value_36__5:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 996 13
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $4.1:rax 
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  .loc 1 996 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $5.1:rbx 
  # $6.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  .loc 1 996 52
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $5.1:rbx $6.1:rax 
  # $7.1: Boolean = $5.1 == $6.1
  .loc 1 996 13
  cmp rbx, rax
  sete r15b
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $7.1:r15 
  # jump($7.1, block.7, block.8)
  test r15b, r15b
  jz .LABEL__map_variable_value_36__8
.LABEL__map_variable_value_36__7:
  # $8.1: @MC_Address = load_struct_member(mc_value.2, address)
  .loc 1 997 17
  mov rax, [rbp-32]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $8.1:rax 
  # $9.1: Boolean = $8.1 != null
  .loc 1 997 17
  cmp rax, 0
  setne bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] $9.1:rbx 
  # jump($9.1, block.9, block.10)
  test bl, bl
  jz .LABEL__map_variable_value_36__10
.LABEL__map_variable_value_36__9:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 998 17
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
.LABEL__map_variable_value_36__10:
  # store_struct_member(mc_value.2, address, address.1)
  .loc 1 1000 13
  mov rax, [rbp-32]
  add rax, 40
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:rbx[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # jump(block.8)
.LABEL__map_variable_value_36__8:
  # mc_value.7: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1002 20
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] mc_value.7:rax[rbp-32] 
  # jump(block.4)
  mov [rbp-32], rax
  jmp .LABEL__map_variable_value_36__4
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] mc_value.7:[rbp-32] 
  # [discarded value]: mc_value.7
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
.LABEL__map_variable_value_36__6:
  # return()
  jmp .LABEL__map_variable_value_36__end
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] mc_value.2:[rbp-32] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] mc_value.1:[rbp-32] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] ir_variable_value.1:[rbp-16] address.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: address.1
  # [live values]: 
.LABEL__map_variable_value_36__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_36__stack_frame_size: .word 32

  .loc 1 1006 1
  .text
map_variable_value_37:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_37__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_37__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 1007 17
  mov rax, rdi
  add rax, 137
  mov rax, [rax]
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx mc_value.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__map_variable_value_37__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  # $3.1: Boolean = mc_value.2 != null
  .loc 1 1008 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  mov [rbp-33], al
  jz .LABEL__map_variable_value_37__6
.LABEL__map_variable_value_37__5:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1008 32
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $4.1:rax 
  # $3.2: Boolean = $4.1 != ir_variable_value.1
  .loc 1 1008 32
  cmp rax, QWORD PTR [rbp-24]
  setne bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:rbx[rbp-33] 
  # jump(block.6)
  mov [rbp-33], bl
.LABEL__map_variable_value_37__6:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 1 1008 12
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, block.3, block.4)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__map_variable_value_37__4
.LABEL__map_variable_value_37__3:
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1009 20
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] mc_value.5:rax[rbp-8] $3.2:[rbp-33] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__map_variable_value_37__2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] mc_value.5:[rbp-8] $3.2:[rbp-33] 
  # [discarded value]: mc_value.5
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
.LABEL__map_variable_value_37__4:
  # $7.1: Boolean = mc_value.2 == null
  .loc 1 1011 9
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $7.1:rax $3.2:[rbp-33] 
  # jump($7.1, block.7, block.8)
  test al, al
  jz .LABEL__map_variable_value_37__8
.LABEL__map_variable_value_37__7:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 1012 9
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
.LABEL__map_variable_value_37__8:
  # $8.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 1014 9
  mov rax, [rbp-16]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $8.1:rax 
  # $9.1: Boolean = $8.1 != null
  .loc 1 1014 9
  cmp rax, 0
  setne bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $9.1:rbx 
  # jump($9.1, block.9, block.10)
  test bl, bl
  jz .LABEL__map_variable_value_37__10
.LABEL__map_variable_value_37__9:
  # $10.1: @String = call(clone.329, "Register ")
  .loc 1 1015 20
  lea rdi, .LABEL__string_138[rip] # "Register "
  call clone_329
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $10.1:rax 
  # $11.1: @String = load_struct_member(register.1, name_q)
  .loc 1 1015 46
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $10.1:rax $11.1:rbx 
  # $12.1: @String = call(append.332, $10.1, $11.1)
  .loc 1 1015 20
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $12.1:rax 
  # $13.1: @String = call(append.332, $12.1, " already mapped to variable: ")
  .loc 1 1015 20
  mov rdi, rax
  lea rsi, .LABEL__string_139[rip] # " already mapped to variable: "
  call append_332
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $13.1:rax 
  # $14.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 1015 110
  mov rbx, [rbp-16]
  add rbx, 41
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $13.1:rax $14.1:rbx 
  # $15.1: @IR_Variable_Value = load_struct_member($14.1, ir_variable_value)
  .loc 1 1015 110
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $13.1:rax $15.1:r15 
  # $16.1: @IR_Variable = load_struct_member($15.1, variable)
  .loc 1 1015 110
  mov rbx, r15
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $13.1:rax $16.1:rbx 
  # $17.1: @String = load_struct_member($16.1, name)
  .loc 1 1015 110
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $13.1:rax $17.1:r15 
  # $18.1: @String = call(append.332, $13.1, $17.1)
  .loc 1 1015 20
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $13.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $18.1:rax 
  # call(abort.31, self.1, $18.1)
  .loc 1 1015 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_31
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
.LABEL__map_variable_value_37__10:
  # store_struct_member(mc_value.2, register, register.1)
  .loc 1 1017 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # store_struct_member(register.1, value, mc_value.2)
  .loc 1 1018 5
  mov rax, rbx
  add rax, 41
  mov r15, [rbp-8]
  mov QWORD PTR [rax], r15
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx[rbp-16] mc_value.1:[rbp-8] mc_value.2:r15[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # return(mc_value.2)
  .loc 1 1019 5
  mov rax, r15
  jmp .LABEL__map_variable_value_37__end
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: mc_value.2
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: register.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__map_variable_value_37__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_37__stack_frame_size: .word 48

  .loc 1 1022 1
  .text
get_value_38:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_38__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_38__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 1023 17
  mov rax, rdi
  add rax, 137
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: ir_variable_value.1:rsi mc_value.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_value_38__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  # $3.1: Boolean = mc_value.2 != null
  .loc 1 1024 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_value_38__6
.LABEL__get_value_38__5:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1024 32
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $4.1:rax 
  # $3.2: Boolean = $4.1 != ir_variable_value.1
  .loc 1 1024 32
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [discarded value]: $4.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:rbx[rbp-17] 
  # jump(block.6)
  mov [rbp-17], bl
.LABEL__get_value_38__6:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 1 1024 12
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__get_value_38__4
.LABEL__get_value_38__3:
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1025 20
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $3.3
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:rax[rbp-8] $3.2:[rbp-17] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__get_value_38__2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:[rbp-8] $3.2:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
.LABEL__get_value_38__4:
  # return(mc_value.2)
  .loc 1 1027 5
  mov rax, [rbp-8]
  jmp .LABEL__get_value_38__end
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: mc_value.2
  # [discarded value]: $3.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: ir_variable_value.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__get_value_38__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_38__stack_frame_size: .word 32

  .loc 1 1030 1
  .text
spill_local_variable_39:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_local_variable_39__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_local_variable_39__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  # $1.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 1 1031 9
  mov rax, rsi
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  # $2.1: @IR_Variable = load_struct_member($1.1, variable)
  .loc 1 1031 9
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx 
  # IR_Global_Variable.4: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx IR_Global_Variable.4:rax 
  # $3.1: Boolean = call(is.325, $2.1, IR_Global_Variable.4)
  .loc 1 1031 9
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: $2.1
  # [discarded value]: IR_Global_Variable.4
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__spill_local_variable_39__3
.LABEL__spill_local_variable_39__2:
  # call(abort.31, self.1, "Invalid state")
  .loc 1 1033 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_31
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
.LABEL__spill_local_variable_39__3:
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 1 1035 46
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $4.1:rax 
  # $5.1: @IR_Type = load_struct_member($4.1, type)
  .loc 1 1035 46
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $5.1:rbx 
  # variable_type_size.1: Int = call(get_type_size.51, self.1, $5.1)
  .loc 1 1035 27
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_51
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:rax 
  # $7.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 1036 9
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:rax $7.1:rbx 
  # $8.1: Boolean = $7.1 == null
  .loc 1 1036 9
  cmp rbx, 0
  sete r15b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:rax $8.1:r15 
  # jump($8.1, block.4, block.5)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__spill_local_variable_39__5
.LABEL__spill_local_variable_39__4:
  # offset.1: Int = 0
  .loc 1 1037 9
  xor rax, rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:rax 
  # other_mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 1038 27
  mov rbx, [rbp-8]
  add rbx, 137
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:rax other_mc_value.1:rbx 
  # jump(block.6)
  mov [rbp-32], rax
  mov [rbp-40], rbx
.LABEL__spill_local_variable_39__6:
  # offset.8: Int = phi(offset.1, offset.9)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] 
  # other_mc_value.2: @MC_Value = phi(other_mc_value.1, other_mc_value.5)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
  # $10.1: Boolean = other_mc_value.2 != null
  .loc 1 1039 16
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] $10.1:rax 
  # jump($10.1, block.7, block.8)
  test al, al
  jz .LABEL__spill_local_variable_39__8
.LABEL__spill_local_variable_39__7:
  # other_mc_value_address.1: @MC_Address = load_struct_member(other_mc_value.2, address)
  .loc 1 1040 39
  mov rax, [rbp-40]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:rax 
  # $13.1: Boolean = other_mc_value_address.1 != null
  .loc 1 1041 17
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:rax $13.1:rbx 
  # jump($13.1, block.9, block.10)
  test bl, bl
  mov [rbp-48], rax
  mov [rbp-49], bl
  jz .LABEL__spill_local_variable_39__10
.LABEL__spill_local_variable_39__9:
  # MC_Local_Variable_Address.2: @Object_Type = load_variable(MC_Local_Variable_Address)
  lea rax, MC_Local_Variable_Address[rip]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] MC_Local_Variable_Address.2:rax 
  # $13.2: Boolean = call(is.325, other_mc_value_address.1, MC_Local_Variable_Address.2)
  .loc 1 1041 51
  mov rdi, [rbp-48]
  mov rsi, rax
  call is_325
  # [discarded value]: MC_Local_Variable_Address.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:rax[rbp-49] 
  # jump(block.10)
  mov [rbp-49], al
.LABEL__spill_local_variable_39__10:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 1 1041 17
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] $13.3:[rbp-49] 
  # jump($13.3, block.11, block.12)
  mov al, [rbp-49]
  test al, al
  jz .LABEL__spill_local_variable_39__12
.LABEL__spill_local_variable_39__11:
  # other_mc_value_address.1: @MC_Local_Variable_Address = other_mc_value_address.1
  .loc 1 1042 43
  mov rax, [rbp-48]
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax 
  # $16.1: Int = load_struct_member(other_mc_value_address.1, offset)
  .loc 1 1043 30
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax $16.1:rbx 
  # $17.1: Boolean = offset.8 < $16.1
  .loc 1 1043 21
  cmp QWORD PTR [rbp-32], rbx
  setl r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:rax $17.1:r15 
  # jump($17.1, block.13, block.12)
  test r15b, r15b
  mov [rbp-57], rax
  jz .LABEL__spill_local_variable_39__12
.LABEL__spill_local_variable_39__13:
  # offset.3: Int = load_struct_member(other_mc_value_address.1, offset)
  .loc 1 1044 30
  mov rax, [rbp-57]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.3:rax[rbp-32] 
  # jump(block.12)
  mov [rbp-32], rax
.LABEL__spill_local_variable_39__12:
  # offset.9: Int = phi(offset.3, offset.8)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.9:[rbp-32] offset.3:[rbp-32] 
  # other_mc_value.5: @MC_Value = load_struct_member(other_mc_value.2, next_value)
  .loc 1 1047 30
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.9:[rbp-32] other_mc_value.5:rax[rbp-40] offset.3:[rbp-32] 
  # jump(block.6)
  mov [rbp-40], rax
  jmp .LABEL__spill_local_variable_39__6
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.9:[rbp-32] other_mc_value.5:[rbp-40] offset.3:[rbp-32] 
  # [discarded value]: offset.9
  # [discarded value]: other_mc_value.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] offset.3:[rbp-32] 
  # [discarded value]: offset.3
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] other_mc_value_address.1:[rbp-57] 
  # [discarded value]: other_mc_value_address.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] $13.2:[rbp-49] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] other_mc_value_address.1:[rbp-48] $13.1:[rbp-49] 
  # [discarded value]: other_mc_value_address.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
.LABEL__spill_local_variable_39__8:
  # offset.5: Int = offset.8 + variable_type_size.1
  .loc 1 1049 18
  mov rax, [rbp-32]
  add rax, QWORD PTR [rbp-24]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rax[rbp-32] 
  # $21.1: Int = load_struct_member(self.1, stack_frame_size)
  .loc 1 1050 22
  mov rbx, [rbp-8]
  add rbx, 153
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rax[rbp-32] $21.1:rbx 
  # $22.1: Boolean = offset.5 > $21.1
  .loc 1 1050 13
  cmp rax, rbx
  setg r15b
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rax[rbp-32] $22.1:r15 
  # jump($22.1, block.15, block.16)
  test r15b, r15b
  mov [rbp-32], rax
  jz .LABEL__spill_local_variable_39__16
.LABEL__spill_local_variable_39__15:
  # store_struct_member(self.1, stack_frame_size, offset.5)
  .loc 1 1051 13
  mov rax, [rbp-8]
  add rax, 153
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:rbx[rbp-32] 
  # jump(block.16)
  mov [rbp-32], rbx
.LABEL__spill_local_variable_39__16:
  # $23.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 1 1053 33
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $23.1:rax 
  # $24.1: @MC_Local_Variable_Address = call(create_mc_local_variable_address.50, offset.5)
  .loc 1 1053 61
  mov rdi, [rbp-32]
  mov [rbp-48], rax
  call create_mc_local_variable_address_50
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $23.1:[rbp-48] $24.1:rax 
  # call(map_variable_value.36, self.1, $23.1, $24.1)
  .loc 1 1053 9
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov rdx, rax
  call map_variable_value_36
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.5)
.LABEL__spill_local_variable_39__5:
  # $25.1: Boolean = variable_type_size.1 == 8
  .loc 1 1055 9
  cmp QWORD PTR [rbp-24], 8
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] $25.1:rax offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump($25.1, block.17, block.19)
  test al, al
  jz .LABEL__spill_local_variable_39__19
.LABEL__spill_local_variable_39__17:
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1056 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $56.1:rax 
  # $57.1: @FILE = call(write.339, $56.1, "  mov ")
  .loc 1 1056 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $57.1:rax 
  # $58.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 1056 48
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $57.1:rax $58.1:rbx 
  # $59.1: @FILE = call(write.48, $57.1, $58.1)
  .loc 1 1056 9
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $57.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $59.1:rax 
  # $60.1: @FILE = call(write.339, $59.1, ", ")
  .loc 1 1056 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $60.1:rax 
  # $61.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 1056 84
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $60.1:rax $61.1:rbx 
  # $62.1: @String = load_struct_member($61.1, name_q)
  .loc 1 1056 84
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $60.1:rax $62.1:r15 
  # $63.1: @FILE = call(write.339, $60.1, $62.1)
  .loc 1 1056 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $60.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $63.1:rax 
  # $64.1: @FILE = call(end_line.342, $63.1)
  .loc 1 1056 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $63.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
.LABEL__spill_local_variable_39__18:
  # return()
  jmp .LABEL__spill_local_variable_39__end
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
.LABEL__spill_local_variable_39__19:
  # $26.1: Boolean = variable_type_size.1 == 4
  .loc 1 1057 16
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $26.1:rax 
  # jump($26.1, block.20, block.22)
  test al, al
  jz .LABEL__spill_local_variable_39__22
.LABEL__spill_local_variable_39__20:
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1058 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $47.1:rax 
  # $48.1: @FILE = call(write.339, $47.1, "  mov ")
  .loc 1 1058 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $48.1:rax 
  # $49.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 1058 48
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $48.1:rax $49.1:rbx 
  # $50.1: @FILE = call(write.48, $48.1, $49.1)
  .loc 1 1058 9
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $48.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $50.1:rax 
  # $51.1: @FILE = call(write.339, $50.1, ", ")
  .loc 1 1058 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $51.1:rax 
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 1058 84
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $51.1:rax $52.1:rbx 
  # $53.1: @String = load_struct_member($52.1, name_d)
  .loc 1 1058 84
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $51.1:rax $53.1:r15 
  # $54.1: @FILE = call(write.339, $51.1, $53.1)
  .loc 1 1058 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $51.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $54.1:rax 
  # $55.1: @FILE = call(end_line.342, $54.1)
  .loc 1 1058 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
  jmp .LABEL__spill_local_variable_39__18
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
.LABEL__spill_local_variable_39__22:
  # $27.1: Boolean = variable_type_size.1 == 2
  .loc 1 1059 16
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $27.1:rax 
  # jump($27.1, block.23, block.25)
  test al, al
  jz .LABEL__spill_local_variable_39__25
.LABEL__spill_local_variable_39__23:
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1060 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $38.1:rax 
  # $39.1: @FILE = call(write.339, $38.1, "  mov ")
  .loc 1 1060 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $39.1:rax 
  # $40.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 1060 48
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $39.1:rax $40.1:rbx 
  # $41.1: @FILE = call(write.48, $39.1, $40.1)
  .loc 1 1060 9
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $41.1:rax 
  # $42.1: @FILE = call(write.339, $41.1, ", ")
  .loc 1 1060 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $42.1:rax 
  # $43.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 1060 84
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $42.1:rax $43.1:rbx 
  # $44.1: @String = load_struct_member($43.1, name_w)
  .loc 1 1060 84
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $42.1:rax $44.1:r15 
  # $45.1: @FILE = call(write.339, $42.1, $44.1)
  .loc 1 1060 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $42.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $45.1:rax 
  # $46.1: @FILE = call(end_line.342, $45.1)
  .loc 1 1060 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
  jmp .LABEL__spill_local_variable_39__18
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
.LABEL__spill_local_variable_39__25:
  # $28.1: Boolean = variable_type_size.1 == 1
  .loc 1 1061 16
  cmp QWORD PTR [rbp-24], 1
  sete al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $28.1:rax 
  # jump($28.1, block.26, block.18)
  test al, al
  jz .LABEL__spill_local_variable_39__18
.LABEL__spill_local_variable_39__26:
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1062 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $29.1:rax 
  # $30.1: @FILE = call(write.339, $29.1, "  mov ")
  .loc 1 1062 9
  mov rdi, rax
  lea rsi, .LABEL__string_57[rip] # "  mov "
  call write_339
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $30.1:rax 
  # $31.1: @MC_Address = load_struct_member(mc_value.1, address)
  .loc 1 1062 48
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $30.1:rax $31.1:rbx 
  # $32.1: @FILE = call(write.48, $30.1, $31.1)
  .loc 1 1062 9
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $32.1:rax 
  # $33.1: @FILE = call(write.339, $32.1, ", ")
  .loc 1 1062 9
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $33.1:rax 
  # $34.1: @MC_Register = load_struct_member(mc_value.1, register)
  .loc 1 1062 84
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $33.1:rax $34.1:rbx 
  # $35.1: @String = load_struct_member($34.1, name_b)
  .loc 1 1062 84
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $33.1:rax $35.1:r15 
  # $36.1: @FILE = call(write.339, $33.1, $35.1)
  .loc 1 1062 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $33.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] $36.1:rax 
  # $37.1: @FILE = call(end_line.342, $36.1)
  .loc 1 1062 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # jump(block.18)
  jmp .LABEL__spill_local_variable_39__18
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] offset.5:[rbp-32] 
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] offset.8:[rbp-32] other_mc_value.2:[rbp-40] 
  # [discarded value]: offset.8
  # [discarded value]: other_mc_value.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] offset.1:[rbp-32] other_mc_value.1:[rbp-40] 
  # [discarded value]: offset.1
  # [discarded value]: other_mc_value.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] variable_type_size.1:[rbp-24] 
  # [discarded value]: variable_type_size.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__spill_local_variable_39__end:
  mov rsp, rbp
  pop rbp
  ret

spill_local_variable_39__stack_frame_size: .word 64

  .loc 1 1066 1
  .text
spill_global_variable_40:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_global_variable_40__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_global_variable_40__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  # $1.1: @String = call(clone.329, "TODO: spill global variable ")
  .loc 1 1067 16
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_140[rip] # "TODO: spill global variable "
  mov [rbp-16], rsi
  call clone_329
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $1.1:rax 
  # $2.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 1 1067 61
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] $1.1:rax $2.1:rbx 
  # $3.1: @IR_Variable = load_struct_member($2.1, variable)
  .loc 1 1067 61
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:rax $3.1:r15 
  # $4.1: @String = load_struct_member($3.1, name)
  .loc 1 1067 61
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $1.1:rax $4.1:rbx 
  # $5.1: @String = call(append.332, $1.1, $4.1)
  .loc 1 1067 16
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $1.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # call(abort.31, self.1, $5.1)
  .loc 1 1067 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_31
  # [discarded value]: self.1
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__spill_global_variable_40__end:
  mov rsp, rbp
  pop rbp
  ret

spill_global_variable_40__stack_frame_size: .word 16

  .loc 1 1070 1
  .text
release_all_registers_41:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_all_registers_41__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_all_registers_41__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 1071 27
  mov rax, rdi
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # call(release_register.42, self.1, $1.1)
  .loc 1 1071 5
  mov rsi, rax
  mov [rbp-8], rdi
  call release_register_42
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # $2.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 1072 27
  mov rax, [rbp-8]
  add rax, 33
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # call(release_register.42, self.1, $2.1)
  .loc 1 1072 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 1073 27
  mov rax, [rbp-8]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # call(release_register.42, self.1, $3.1)
  .loc 1 1073 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 1 1074 27
  mov rax, [rbp-8]
  add rax, 49
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # call(release_register.42, self.1, $4.1)
  .loc 1 1074 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 1075 27
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # call(release_register.42, self.1, $5.1)
  .loc 1 1075 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 1076 27
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # call(release_register.42, self.1, $6.1)
  .loc 1 1076 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  # $7.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 1077 27
  mov rax, [rbp-8]
  add rax, 73
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # call(release_register.42, self.1, $7.1)
  .loc 1 1077 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # $8.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 1078 27
  mov rax, [rbp-8]
  add rax, 81
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # call(release_register.42, self.1, $8.1)
  .loc 1 1078 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # $9.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 1 1079 27
  mov rax, [rbp-8]
  add rax, 89
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $9.1:rax 
  # call(release_register.42, self.1, $9.1)
  .loc 1 1079 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  # $10.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 1 1080 27
  mov rax, [rbp-8]
  add rax, 97
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $10.1:rax 
  # call(release_register.42, self.1, $10.1)
  .loc 1 1080 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  # $11.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 1 1081 27
  mov rax, [rbp-8]
  add rax, 105
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $11.1:rax 
  # call(release_register.42, self.1, $11.1)
  .loc 1 1081 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  # $12.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 1 1082 27
  mov rax, [rbp-8]
  add rax, 113
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $12.1:rax 
  # call(release_register.42, self.1, $12.1)
  .loc 1 1082 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  # $13.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 1 1083 27
  mov rax, [rbp-8]
  add rax, 121
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $13.1:rax 
  # call(release_register.42, self.1, $13.1)
  .loc 1 1083 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # $14.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 1 1084 27
  mov rax, [rbp-8]
  add rax, 129
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $14.1:rax 
  # call(release_register.42, self.1, $14.1)
  .loc 1 1084 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call release_register_42
  # [discarded value]: self.1
  # [discarded value]: $14.1
  # [live values]: 
  # return()
  jmp .LABEL__release_all_registers_41__end
  # [live values]: 
.LABEL__release_all_registers_41__end:
  mov rsp, rbp
  pop rbp
  ret

release_all_registers_41__stack_frame_size: .word 16

  .loc 1 1087 1
  .text
release_register_42:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_register_42__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_register_42__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # mc_value.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 1088 17
  mov rax, rsi
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax 
  # $2.1: Boolean = mc_value.1 != null
  .loc 1 1089 9
  cmp rax, 0
  setne bl
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__release_register_42__3
.LABEL__release_register_42__2:
  # persist_value.1: Boolean = false
  .loc 1 1090 9
  mov al, 0
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:rax 
  # $3.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  .loc 1 1092 43
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:rax $3.1:rbx 
  # $4.1: @List = load_struct_member($3.1, user_instructions)
  .loc 1 1092 43
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:rax $4.1:r15 
  # ir_value_user_instruction_item.1: @List_Item = load_struct_member($4.1, first_item)
  .loc 1 1092 43
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:rax ir_value_user_instruction_item.1:rbx 
  # jump(block.4)
  mov [rbp-25], al
  mov [rbp-33], rbx
.LABEL__release_register_42__4:
  # ir_value_user_instruction_item.2: @List_Item = phi(ir_value_user_instruction_item.1, ir_value_user_instruction_item.5)
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] 
  # $6.1: Boolean = ir_value_user_instruction_item.2 != null
  .loc 1 1093 16
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] $6.1:rax 
  # jump($6.1, block.5, block.6)
  test al, al
  jz .LABEL__release_register_42__6
.LABEL__release_register_42__5:
  # ir_value_user_instruction.1: @IR_Instruction = load_struct_member(ir_value_user_instruction_item.2, data)
  .loc 1 1094 42
  mov rax, [rbp-33]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:rax 
  # $9.1: Boolean = load_struct_member(ir_value_user_instruction.1, is_generated)
  .loc 1 1095 17
  mov rbx, rax
  add rbx, 56
  mov bl, [rbx]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:rax $9.1:rbx 
  # $11.1: Boolean = $9.1 == false
  .loc 1 1095 17
  cmp bl, 0
  sete r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:rax $11.1:r15 
  # jump($11.1, block.8, block.7)
  test r15b, r15b
  mov [rbp-41], rax
  mov [rbp-42], r15b
  jz .LABEL__release_register_42__7
.LABEL__release_register_42__8:
  # $11.3: Boolean = phi($11.1, $11.2)
  .loc 1 1095 17
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] $11.3:[rbp-42] 
  # jump($11.3, block.9, block.10)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__release_register_42__10
.LABEL__release_register_42__9:
  # persist_value.2: Boolean = true
  .loc 1 1096 17
  mov al, 1
  # [discarded value]: $11.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:rax[rbp-25] 
  # jump(block.6)
  mov [rbp-25], al
.LABEL__release_register_42__6:
  # persist_value.3: Boolean = phi(persist_value.2, persist_value.1)
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.3:[rbp-25] persist_value.2:[rbp-25] 
  # jump(persist_value.3, block.12, block.13)
  mov al, [rbp-25]
  test al, al
  jz .LABEL__release_register_42__13
.LABEL__release_register_42__12:
  # call(spill_local_variable.39, self.1, mc_value.1)
  .loc 1 1103 13
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call spill_local_variable_39
  # [discarded value]: persist_value.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # jump(block.13)
.LABEL__release_register_42__13:
  # store_struct_member(mc_value.1, register, null)
  .loc 1 1106 9
  mov rax, [rbp-8]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # store_struct_member(register.1, value, null)
  .loc 1 1107 9
  mov rax, [rbp-16]
  add rax, 41
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # jump(block.3)
.LABEL__release_register_42__3:
  # return()
  jmp .LABEL__release_register_42__end
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] persist_value.2:[rbp-25] 
  # [discarded value]: persist_value.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] 
.LABEL__release_register_42__10:
  # ir_value_user_instruction_item.5: @List_Item = load_struct_member(ir_value_user_instruction_item.2, next_item)
  .loc 1 1099 46
  mov rax, [rbp-33]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] ir_value_user_instruction_item.5:rax[rbp-33] 
  # jump(block.4)
  mov [rbp-33], rax
  jmp .LABEL__release_register_42__4
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] ir_value_user_instruction_item.5:[rbp-33] 
  # [discarded value]: ir_value_user_instruction_item.5
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] 
.LABEL__release_register_42__7:
  # IR_Phi_Instruction.3: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] IR_Phi_Instruction.3:rax 
  # $11.2: Boolean = call(is.325, ir_value_user_instruction.1, IR_Phi_Instruction.3)
  .loc 1 1095 68
  mov rdi, [rbp-41]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Phi_Instruction.3
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] $11.2:rax[rbp-42] 
  # jump(block.8)
  mov [rbp-42], al
  jmp .LABEL__release_register_42__8
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] $11.2:[rbp-42] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] ir_value_user_instruction.1:[rbp-41] $11.1:[rbp-42] 
  # [discarded value]: ir_value_user_instruction.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] ir_value_user_instruction_item.2:[rbp-33] 
  # [discarded value]: ir_value_user_instruction_item.2
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] persist_value.1:[rbp-25] ir_value_user_instruction_item.1:[rbp-33] 
  # [discarded value]: persist_value.1
  # [discarded value]: ir_value_user_instruction_item.1
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: register.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__release_register_42__end:
  mov rsp, rbp
  pop rbp
  ret

release_register_42__stack_frame_size: .word 48

  .loc 1 1111 1
  .text
discard_used_values_43:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR discard_used_values_43__stack_frame_size[rip]
  sub rsp, rax
.LABEL__discard_used_values_43__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # removed_values.1: Int = 0
  .loc 1 1112 5
  xor rax, rax
  # [live values]: self.1:rdi removed_values.1:rax 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 1114 17
  mov rbx, rdi
  add rbx, 137
  mov rbx, [rbx]
  # [live values]: self.1:rdi removed_values.1:rax mc_value.1:rbx 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rdi
.LABEL__discard_used_values_43__2:
  # removed_values.5: Int = phi(removed_values.1, removed_values.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.19)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # $2.1: Boolean = mc_value.2 != null
  .loc 1 1115 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__discard_used_values_43__4
.LABEL__discard_used_values_43__3:
  # $3.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 1 1116 13
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $3.1:rax 
  # $5.1: Boolean = load_struct_member($3.1, is_generated)
  .loc 1 1116 13
  mov rbx, rax
  add rbx, 56
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:rbx 
  # jump($5.1, block.5, block.6)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__discard_used_values_43__6
.LABEL__discard_used_values_43__5:
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 1 1116 53
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $6.1:rax 
  # $7.1: @IR_Block = load_struct_member($6.1, parent_block)
  .loc 1 1116 53
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $7.1:rbx 
  # $5.2: Boolean = load_struct_member($7.1, is_being_generated)
  .loc 1 1116 53
  mov rax, rbx
  add rax, 48
  mov al, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:rax[rbp-25] 
  # jump(block.6)
  mov [rbp-25], al
.LABEL__discard_used_values_43__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 1 1116 13
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] $5.3:[rbp-25] 
  # jump($5.3, block.7, block.8)
  mov al, [rbp-25]
  test al, al
  jz .LABEL__discard_used_values_43__8
.LABEL__discard_used_values_43__7:
  # discard_value.1: Boolean = true
  .loc 1 1117 13
  mov al, 1
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax 
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1119 38
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax $9.1:rbx 
  # $10.1: @List = load_struct_member($9.1, user_instructions)
  .loc 1 1119 38
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax $10.1:r15 
  # user_instruction_item.1: @List_Item = load_struct_member($10.1, first_item)
  .loc 1 1119 38
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:rax user_instruction_item.1:rbx 
  # jump(block.9)
  mov [rbp-26], al
  mov [rbp-34], rbx
.LABEL__discard_used_values_43__9:
  # user_instruction_item.2: @List_Item = phi(user_instruction_item.1, user_instruction_item.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] 
  # $12.1: Boolean = user_instruction_item.2 != null
  .loc 1 1120 20
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] $12.1:rax 
  # jump($12.1, block.10, block.11)
  test al, al
  jz .LABEL__discard_used_values_43__11
.LABEL__discard_used_values_43__10:
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instruction_item.2, data)
  .loc 1 1121 37
  mov rax, [rbp-34]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] user_instruction.1:rax 
  # $15.1: Boolean = load_struct_member(user_instruction.1, is_generated)
  .loc 1 1122 21
  mov rbx, rax
  add rbx, 56
  mov bl, [rbx]
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] $15.1:rbx 
  # $16.1: Boolean = $15.1 == false
  .loc 1 1122 21
  cmp bl, 0
  sete al
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] $16.1:rax 
  # jump($16.1, block.12, block.13)
  test al, al
  jz .LABEL__discard_used_values_43__13
.LABEL__discard_used_values_43__12:
  # discard_value.2: Boolean = false
  .loc 1 1124 21
  mov al, 0
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.2:rax[rbp-26] 
  # jump(block.11)
  mov [rbp-26], al
.LABEL__discard_used_values_43__11:
  # discard_value.3: Boolean = phi(discard_value.2, discard_value.1)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] 
  # jump(discard_value.3, block.15, block.16)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__discard_used_values_43__16
.LABEL__discard_used_values_43__15:
  # $18.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1131 41
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] $18.1:rax 
  # $19.1: @List = load_struct_member($18.1, user_instructions)
  .loc 1 1131 41
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] $19.1:rbx 
  # user_instruction_item.6: @List_Item = load_struct_member($19.1, first_item)
  .loc 1 1131 41
  mov rax, rbx
  mov rax, [rax]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:rax[rbp-34] 
  # jump(block.17)
  mov [rbp-34], rax
.LABEL__discard_used_values_43__17:
  # user_instruction_item.7: @List_Item = phi(user_instruction_item.6, user_instruction_item.10)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] 
  # $21.1: Boolean = user_instruction_item.7 != null
  .loc 1 1132 24
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $21.1:rax 
  # jump($21.1, block.18, block.16)
  test al, al
  jz .LABEL__discard_used_values_43__16
.LABEL__discard_used_values_43__18:
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instruction_item.7, data)
  .loc 1 1133 41
  mov rax, [rbp-34]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] user_instruction.1:rax 
  # $24.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  .loc 1 1134 25
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $24.1:rbx 
  # $25.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 1 1134 58
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $24.1:rbx $25.1:rax 
  # $26.1: @IR_Block = load_struct_member($25.1, parent_block)
  .loc 1 1134 58
  mov r15, rax
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $24.1:rbx $26.1:r15 
  # $28.1: Boolean = $24.1 != $26.1
  .loc 1 1134 25
  cmp rbx, r15
  setne al
  # [discarded value]: $24.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:rax 
  # jump($28.1, block.20, block.21)
  test al, al
  mov [rbp-35], al
  jz .LABEL__discard_used_values_43__21
.LABEL__discard_used_values_43__20:
  # $29.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 1 1134 98
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $29.1:rax 
  # $30.1: @IR_Block = load_struct_member($29.1, parent_block)
  .loc 1 1134 98
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $30.1:rbx 
  # $31.1: Boolean = load_struct_member($30.1, is_generated)
  .loc 1 1134 98
  mov rax, rbx
  add rax, 49
  mov al, [rax]
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $31.1:rax 
  # $28.2: Boolean = $31.1 == false
  .loc 1 1134 98
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:rbx[rbp-35] 
  # jump(block.21)
  mov [rbp-35], bl
.LABEL__discard_used_values_43__21:
  # $28.3: Boolean = phi($28.1, $28.2)
  .loc 1 1134 25
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] $28.3:[rbp-35] 
  # jump($28.3, block.22, block.23)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__discard_used_values_43__23
.LABEL__discard_used_values_43__22:
  # discard_value.4: Boolean = false
  .loc 1 1136 25
  mov al, 0
  # [discarded value]: $28.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:rax[rbp-26] 
  # jump(block.16)
  mov [rbp-26], al
.LABEL__discard_used_values_43__16:
  # discard_value.5: Boolean = phi(discard_value.4, discard_value.3)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] discard_value.5:[rbp-26] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # jump(discard_value.5, block.25, block.8)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__discard_used_values_43__8
.LABEL__discard_used_values_43__25:
  # $34.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 1 1144 21
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: discard_value.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $34.1:rax 
  # $35.1: Boolean = $34.1 != null
  .loc 1 1144 21
  cmp rax, 0
  setne bl
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $35.1:rbx 
  # jump($35.1, block.27, block.28)
  test bl, bl
  jz .LABEL__discard_used_values_43__28
.LABEL__discard_used_values_43__27:
  # $36.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 1 1145 21
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $36.1:rax 
  # store_struct_member($36.1, value, null)
  .loc 1 1145 21
  mov rbx, rax
  add rbx, 41
  mov QWORD PTR [rbx], 0
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # store_struct_member(mc_value.2, register, null)
  .loc 1 1146 21
  mov rax, [rbp-16]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # jump(block.28)
.LABEL__discard_used_values_43__28:
  # $37.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 1 1150 21
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $37.1:rax 
  # $38.1: Boolean = $37.1 != null
  .loc 1 1150 21
  cmp rax, 0
  setne bl
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $38.1:rbx 
  # jump($38.1, block.29, block.31)
  test bl, bl
  jz .LABEL__discard_used_values_43__31
.LABEL__discard_used_values_43__29:
  # $40.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1151 54
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $40.1:rax 
  # $41.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 1 1151 21
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $40.1:rax $41.1:rbx 
  # store_struct_member($41.1, next_value, $40.1)
  .loc 1 1151 21
  mov r15, rbx
  add r15, 8
  mov QWORD PTR [r15], rax
  # [discarded value]: $40.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # jump(block.30)
.LABEL__discard_used_values_43__30:
  # $42.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1155 21
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $42.1:rax 
  # $43.1: Boolean = $42.1 != null
  .loc 1 1155 21
  cmp rax, 0
  setne bl
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $43.1:rbx 
  # jump($43.1, block.32, block.34)
  test bl, bl
  jz .LABEL__discard_used_values_43__34
.LABEL__discard_used_values_43__32:
  # $45.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 1 1156 54
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $45.1:rax 
  # $46.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1156 21
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $45.1:rax $46.1:rbx 
  # store_struct_member($46.1, prev_value, $45.1)
  .loc 1 1156 21
  mov r15, rbx
  mov QWORD PTR [r15], rax
  # [discarded value]: $45.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # jump(block.33)
.LABEL__discard_used_values_43__33:
  # removed_values.3: Int = removed_values.5 + 1
  .loc 1 1160 34
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:rax[rbp-8] 
  # $48.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 1 1162 21
  mov rbx, [rbp-24]
  add rbx, 16
  mov bl, [rbx]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:rax[rbp-8] $48.1:rbx 
  # jump($48.1, block.35, block.8)
  test bl, bl
  mov [rbp-8], rax
  jz .LABEL__discard_used_values_43__8
.LABEL__discard_used_values_43__35:
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1163 21
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $49.1:rax 
  # $50.1: @FILE = call(write.339, $49.1, "  # [discarded value]: ")
  .loc 1 1163 21
  mov rdi, rax
  lea rsi, .LABEL__string_141[rip] # "  # [discarded value]: "
  call write_339
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $50.1:rax 
  # $51.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1163 77
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $50.1:rax $51.1:rbx 
  # $52.1: @IR_Variable = load_struct_member($51.1, variable)
  .loc 1 1163 77
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $50.1:rax $52.1:r15 
  # $53.1: @String = load_struct_member($52.1, name)
  .loc 1 1163 77
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $50.1:rax $53.1:rbx 
  # $54.1: @FILE = call(write.339, $50.1, $53.1)
  .loc 1 1163 21
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $50.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $54.1:rax 
  # $55.1: @FILE = call(write.341, $54.1, '.')
  .loc 1 1163 21
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $55.1:rax 
  # $56.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1163 136
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $55.1:rax $56.1:rbx 
  # $57.1: Int = load_struct_member($56.1, version)
  .loc 1 1163 136
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $55.1:rax $57.1:r15 
  # $58.1: @FILE = call(write.338, $55.1, $57.1)
  .loc 1 1163 21
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $55.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] $58.1:rax 
  # $59.1: @FILE = call(end_line.342, $58.1)
  .loc 1 1163 21
  mov rdi, rax
  call end_line_342
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # jump(block.8)
.LABEL__discard_used_values_43__8:
  # removed_values.6: Int = phi(removed_values.3, removed_values.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] removed_values.6:[rbp-8] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # mc_value.19: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1168 20
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] removed_values.6:[rbp-8] mc_value.19:rax[rbp-16] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__discard_used_values_43__2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] removed_values.6:[rbp-8] mc_value.19:[rbp-16] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.6
  # [discarded value]: mc_value.19
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
.LABEL__discard_used_values_43__34:
  # $44.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  .loc 1 1158 39
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $44.1:rax 
  # store_struct_member(self.1, last_value, $44.1)
  .loc 1 1158 21
  mov rbx, [rbp-24]
  add rbx, 145
  mov QWORD PTR [rbx], rax
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # jump(block.33)
  jmp .LABEL__discard_used_values_43__33
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
.LABEL__discard_used_values_43__31:
  # $39.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1153 40
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] $39.1:rax 
  # store_struct_member(self.1, first_value, $39.1)
  .loc 1 1153 21
  mov rbx, [rbp-24]
  add rbx, 137
  mov QWORD PTR [rbx], rax
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # jump(block.30)
  jmp .LABEL__discard_used_values_43__30
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] discard_value.4:[rbp-26] 
  # [discarded value]: discard_value.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] 
.LABEL__discard_used_values_43__23:
  # user_instruction_item.10: @List_Item = load_struct_member(user_instruction_item.7, next_item)
  .loc 1 1139 45
  mov rax, [rbp-34]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] user_instruction_item.10:rax[rbp-34] 
  # jump(block.17)
  mov [rbp-34], rax
  jmp .LABEL__discard_used_values_43__17
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] user_instruction_item.10:[rbp-34] 
  # [discarded value]: user_instruction_item.10
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] $28.2:[rbp-35] 
  # [discarded value]: $28.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] $28.1:[rbp-35] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] user_instruction_item.7:[rbp-34] 
  # [discarded value]: user_instruction_item.7
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] user_instruction_item.6:[rbp-34] 
  # [discarded value]: user_instruction_item.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.3:[rbp-26] discard_value.2:[rbp-26] 
  # [discarded value]: discard_value.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] discard_value.2:[rbp-26] 
  # [discarded value]: discard_value.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] 
.LABEL__discard_used_values_43__13:
  # user_instruction_item.5: @List_Item = load_struct_member(user_instruction_item.2, next_item)
  .loc 1 1127 41
  mov rax, [rbp-34]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] user_instruction_item.5:rax[rbp-34] 
  # jump(block.9)
  mov [rbp-34], rax
  jmp .LABEL__discard_used_values_43__9
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] user_instruction_item.5:[rbp-34] 
  # [discarded value]: user_instruction_item.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] user_instruction_item.2:[rbp-34] 
  # [discarded value]: user_instruction_item.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] discard_value.1:[rbp-26] user_instruction_item.1:[rbp-34] 
  # [discarded value]: discard_value.1
  # [discarded value]: user_instruction_item.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] $5.2:[rbp-25] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
.LABEL__discard_used_values_43__4:
  # return(removed_values.5)
  .loc 1 1171 5
  mov rax, [rbp-8]
  jmp .LABEL__discard_used_values_43__end
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: removed_values.5
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: removed_values.1
  # [discarded value]: mc_value.1
  # [live values]: 
.LABEL__discard_used_values_43__end:
  mov rsp, rbp
  pop rbp
  ret

discard_used_values_43__stack_frame_size: .word 48

  .loc 1 1174 1
  .text
output_live_values_44:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_44__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_44__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  .loc 1 1175 9
  mov rax, rdi
  add rax, 16
  mov al, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == false
  .loc 1 1175 9
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__output_live_values_44__3
.LABEL__output_live_values_44__2:
  # return()
  .loc 1 1176 9
  jmp .LABEL__output_live_values_44__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__output_live_values_44__3:
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1178 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: @FILE = call(write.339, $3.1, "  # [live values]: ")
  .loc 1 1178 5
  mov rdi, rax
  lea rsi, .LABEL__string_142[rip] # "  # [live values]: "
  call write_339
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  .loc 1 1179 17
  mov rax, [rbp-8]
  add rax, 137
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:rax 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__output_live_values_44__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.9)
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # $6.1: Boolean = mc_value.2 != null
  .loc 1 1180 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $6.1:rax 
  # jump($6.1, block.6, block.7)
  test al, al
  jz .LABEL__output_live_values_44__7
.LABEL__output_live_values_44__6:
  # $7.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  .loc 1 1181 13
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $7.1:rax 
  # $8.1: Boolean = load_struct_member($7.1, is_generated)
  .loc 1 1181 13
  mov rbx, rax
  add rbx, 56
  mov bl, [rbx]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $8.1:rbx 
  # jump($8.1, block.8, block.9)
  test bl, bl
  jz .LABEL__output_live_values_44__9
.LABEL__output_live_values_44__8:
  # $9.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1182 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $9.1:rax 
  # $10.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1182 36
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $9.1:rax $10.1:rbx 
  # $11.1: @IR_Variable = load_struct_member($10.1, variable)
  .loc 1 1182 36
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $9.1:rax $11.1:r15 
  # $12.1: @String = load_struct_member($11.1, name)
  .loc 1 1182 36
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $9.1:rax $12.1:rbx 
  # $13.1: @FILE = call(write.339, $9.1, $12.1)
  .loc 1 1182 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $9.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $13.1:rax 
  # $14.1: @FILE = call(write.341, $13.1, '.')
  .loc 1 1182 13
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $14.1:rax 
  # $15.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  .loc 1 1182 95
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $14.1:rax $15.1:rbx 
  # $16.1: Int = load_struct_member($15.1, version)
  .loc 1 1182 95
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $14.1:rax $16.1:r15 
  # $17.1: @FILE = call(write.338, $14.1, $16.1)
  .loc 1 1182 13
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $14.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $17.1:rax 
  # $18.1: @FILE = call(write.341, $17.1, ':')
  .loc 1 1182 13
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # $19.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 1 1183 17
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $19.1:rax 
  # $20.1: Boolean = $19.1 != null
  .loc 1 1183 17
  cmp rax, 0
  setne bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $20.1:rbx 
  # jump($20.1, block.10, block.11)
  test bl, bl
  jz .LABEL__output_live_values_44__11
.LABEL__output_live_values_44__10:
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1184 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $21.1:rax 
  # $22.1: @MC_Register = load_struct_member(mc_value.2, register)
  .loc 1 1184 40
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $21.1:rax $22.1:rbx 
  # $23.1: @String = load_struct_member($22.1, name_q)
  .loc 1 1184 40
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $21.1:rax $23.1:r15 
  # $24.1: @FILE = call(write.339, $21.1, $23.1)
  .loc 1 1184 17
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $21.1
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # jump(block.11)
.LABEL__output_live_values_44__11:
  # $25.1: @MC_Address = load_struct_member(mc_value.2, address)
  .loc 1 1186 17
  mov rax, [rbp-16]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $25.1:rax 
  # $26.1: Boolean = $25.1 != null
  .loc 1 1186 17
  cmp rax, 0
  setne bl
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $26.1:rbx 
  # jump($26.1, block.12, block.13)
  test bl, bl
  jz .LABEL__output_live_values_44__13
.LABEL__output_live_values_44__12:
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1187 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $27.1:rax 
  # $28.1: @MC_Address = load_struct_member(mc_value.2, address)
  .loc 1 1187 40
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $27.1:rax $28.1:rbx 
  # $29.1: @FILE = call(write.48, $27.1, $28.1)
  .loc 1 1187 17
  mov rdi, rax
  mov rsi, rbx
  call write_48
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # jump(block.13)
.LABEL__output_live_values_44__13:
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1189 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $30.1:rax 
  # $31.1: @FILE = call(write.341, $30.1, ' ')
  .loc 1 1189 13
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # jump(block.9)
.LABEL__output_live_values_44__9:
  # mc_value.9: @MC_Value = load_struct_member(mc_value.2, next_value)
  .loc 1 1191 20
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] mc_value.9:rax[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
  jmp .LABEL__output_live_values_44__5
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] mc_value.9:[rbp-16] 
  # [discarded value]: mc_value.9
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
.LABEL__output_live_values_44__7:
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1193 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] $33.1:rax 
  # $34.1: @FILE = call(end_line.342, $33.1)
  .loc 1 1193 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # return()
  jmp .LABEL__output_live_values_44__end
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_live_values_44__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_44__stack_frame_size: .word 16

  .loc 1 1196 1
  .text
output_used_registers_45:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_registers_45__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_registers_45__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(true, block.2, block.3)
  mov al, 1
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__output_used_registers_45__3
.LABEL__output_used_registers_45__2:
  # return()
  .loc 1 1198 9
  jmp .LABEL__output_used_registers_45__end
  # [live values]: self.1:[rbp-8] 
.LABEL__output_used_registers_45__3:
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1200 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(write.339, $1.1, "  # [used registers]: ")
  .loc 1 1200 5
  mov rdi, rax
  lea rsi, .LABEL__string_143[rip] # "  # [used registers]: "
  call write_339
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  .loc 1 1201 31
  mov rax, [rbp-8]
  add rax, 25
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # call(output_used_register.46, self.1, $3.1)
  .loc 1 1201 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @MC_Register = load_struct_member(self.1, register_rcx)
  .loc 1 1202 31
  mov rax, [rbp-8]
  add rax, 33
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # call(output_used_register.46, self.1, $4.1)
  .loc 1 1202 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  .loc 1 1203 31
  mov rax, [rbp-8]
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # call(output_used_register.46, self.1, $5.1)
  .loc 1 1203 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # $6.1: @MC_Register = load_struct_member(self.1, register_rbx)
  .loc 1 1204 31
  mov rax, [rbp-8]
  add rax, 49
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # call(output_used_register.46, self.1, $6.1)
  .loc 1 1204 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  .loc 1 1205 31
  mov rax, [rbp-8]
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # call(output_used_register.46, self.1, $7.1)
  .loc 1 1205 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # $8.1: @MC_Register = load_struct_member(self.1, register_rdi)
  .loc 1 1206 31
  mov rax, [rbp-8]
  add rax, 65
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # call(output_used_register.46, self.1, $8.1)
  .loc 1 1206 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # $9.1: @MC_Register = load_struct_member(self.1, register_r8)
  .loc 1 1207 31
  mov rax, [rbp-8]
  add rax, 73
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $9.1:rax 
  # call(output_used_register.46, self.1, $9.1)
  .loc 1 1207 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  # $10.1: @MC_Register = load_struct_member(self.1, register_r9)
  .loc 1 1208 31
  mov rax, [rbp-8]
  add rax, 81
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $10.1:rax 
  # call(output_used_register.46, self.1, $10.1)
  .loc 1 1208 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  # $11.1: @MC_Register = load_struct_member(self.1, register_r10)
  .loc 1 1209 31
  mov rax, [rbp-8]
  add rax, 89
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $11.1:rax 
  # call(output_used_register.46, self.1, $11.1)
  .loc 1 1209 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  # $12.1: @MC_Register = load_struct_member(self.1, register_r11)
  .loc 1 1210 31
  mov rax, [rbp-8]
  add rax, 97
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $12.1:rax 
  # call(output_used_register.46, self.1, $12.1)
  .loc 1 1210 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  # $13.1: @MC_Register = load_struct_member(self.1, register_r12)
  .loc 1 1211 31
  mov rax, [rbp-8]
  add rax, 105
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $13.1:rax 
  # call(output_used_register.46, self.1, $13.1)
  .loc 1 1211 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # $14.1: @MC_Register = load_struct_member(self.1, register_r13)
  .loc 1 1212 31
  mov rax, [rbp-8]
  add rax, 113
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $14.1:rax 
  # call(output_used_register.46, self.1, $14.1)
  .loc 1 1212 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] 
  # $15.1: @MC_Register = load_struct_member(self.1, register_r14)
  .loc 1 1213 31
  mov rax, [rbp-8]
  add rax, 121
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $15.1:rax 
  # call(output_used_register.46, self.1, $15.1)
  .loc 1 1213 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] 
  # $16.1: @MC_Register = load_struct_member(self.1, register_r15)
  .loc 1 1214 31
  mov rax, [rbp-8]
  add rax, 129
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $16.1:rax 
  # call(output_used_register.46, self.1, $16.1)
  .loc 1 1214 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call output_used_register_46
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1215 5
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $17.1:rax 
  # $18.1: @FILE = call(end_line.342, $17.1)
  .loc 1 1215 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__output_used_registers_45__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_registers_45__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_registers_45__stack_frame_size: .word 16

  .loc 1 1218 1
  .text
output_used_register_46:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_register_46__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_register_46__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 1219 9
  mov rax, rsi
  add rax, 41
  mov rax, [rax]
  # [live values]: self.1:rdi register.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 1219 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__output_used_register_46__3
.LABEL__output_used_register_46__2:
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1220 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $3.1:rax 
  # $4.1: @String = load_struct_member(register.1, name_q)
  .loc 1 1220 32
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $3.1:rax $4.1:rbx 
  # $5.1: @FILE = call(write.339, $3.1, $4.1)
  .loc 1 1220 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write.341, $5.1, ':')
  .loc 1 1220 9
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $6.1:rax 
  # $7.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 1220 66
  mov rbx, [rbp-8]
  add rbx, 41
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: @IR_Variable_Value = load_struct_member($7.1, ir_variable_value)
  .loc 1 1220 66
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $6.1:rax $8.1:r15 
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  .loc 1 1220 66
  mov rbx, r15
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $6.1:rax $9.1:rbx 
  # $10.1: @String = load_struct_member($9.1, name)
  .loc 1 1220 66
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $6.1:rax $10.1:r15 
  # $11.1: @FILE = call(write.339, $6.1, $10.1)
  .loc 1 1220 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $6.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $11.1:rax 
  # $12.1: @FILE = call(write.341, $11.1, '.')
  .loc 1 1220 9
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $12.1:rax 
  # $13.1: @MC_Value = load_struct_member(register.1, value)
  .loc 1 1220 131
  mov rbx, [rbp-8]
  add rbx, 41
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $12.1:rax $13.1:rbx 
  # $14.1: @IR_Variable_Value = load_struct_member($13.1, ir_variable_value)
  .loc 1 1220 131
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $12.1:rax $14.1:r15 
  # $15.1: Int = load_struct_member($14.1, version)
  .loc 1 1220 131
  mov rbx, r15
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $12.1:rax $15.1:rbx 
  # $16.1: @FILE = call(write.338, $12.1, $15.1)
  .loc 1 1220 9
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $12.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] $16.1:rax 
  # $17.1: @FILE = call(write.341, $16.1, ' ')
  .loc 1 1220 9
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # jump(block.3)
.LABEL__output_used_register_46__3:
  # return()
  jmp .LABEL__output_used_register_46__end
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] register.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: register.1
  # [live values]: 
.LABEL__output_used_register_46__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_register_46__stack_frame_size: .word 16

  .loc 1 1242 1
  .text
init_47:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_47__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_47__1:
  # self.1: @MC_Register = load_variable(self)
  # [live values]: self.1:rdi 
  # name_q.1: @String = load_variable(name_q)
  # [live values]: self.1:rdi name_q.1:rsi 
  # name_d.1: @String = load_variable(name_d)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx 
  # name_w.1: @String = load_variable(name_w)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx 
  # name_b.1: @String = load_variable(name_b)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  # store_struct_member(self.1, name_q, name_q.1)
  .loc 1 1243 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], rsi
  # [discarded value]: name_q.1
  # [live values]: self.1:rdi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  # store_struct_member(self.1, name_d, name_d.1)
  .loc 1 1244 5
  mov rax, rdi
  add rax, 16
  mov QWORD PTR [rax], rdx
  # [discarded value]: name_d.1
  # [live values]: self.1:rdi name_w.1:rcx name_b.1:r8 
  # store_struct_member(self.1, name_w, name_w.1)
  .loc 1 1245 5
  mov rax, rdi
  add rax, 24
  mov QWORD PTR [rax], rcx
  # [discarded value]: name_w.1
  # [live values]: self.1:rdi name_b.1:r8 
  # store_struct_member(self.1, name_b, name_b.1)
  .loc 1 1246 5
  mov rax, rdi
  add rax, 32
  mov QWORD PTR [rax], r8
  # [discarded value]: name_b.1
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, is_reserved, false)
  .loc 1 1247 5
  mov rax, rdi
  add rax, 40
  mov BYTE PTR [rax], 0
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, value, null)
  .loc 1 1248 5
  mov rax, rdi
  add rax, 41
  mov QWORD PTR [rax], 0
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 1 1249 5
  mov rax, rdi
  jmp .LABEL__init_47__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_47__end:
  mov rsp, rbp
  pop rbp
  ret

init_47__stack_frame_size: .word 0

  .loc 1 1297 1
  .text
write_48:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_48__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_48__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: file.1:rdi address.1:rsi 
  # MC_Global_Variable_Address.3: @Object_Type = load_variable(MC_Global_Variable_Address)
  lea rax, MC_Global_Variable_Address[rip]
  # [live values]: file.1:rdi address.1:rsi MC_Global_Variable_Address.3:rax 
  # $1.1: Boolean = call(is.325, address.1, MC_Global_Variable_Address.3)
  .loc 1 1298 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: MC_Global_Variable_Address.3
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_48__3
.LABEL__write_48__2:
  # address.1: @MC_Global_Variable_Address = address.1
  .loc 1 1299 20
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] address.1:rax 
  # $3.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  .loc 1 1300 27
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $3.1:rbx 
  # $4.1: @String = load_struct_member($3.1, name)
  .loc 1 1300 27
  mov rax, rbx
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $4.1:rax 
  # $5.1: @FILE = call(write.339, file.1, $4.1)
  .loc 1 1300 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_339
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, "[rip]")
  .loc 1 1300 16
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "[rip]"
  call write_339
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 1 1300 9
  jmp .LABEL__write_48__end
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
.LABEL__write_48__3:
  # MC_Local_Variable_Address.3: @Object_Type = load_variable(MC_Local_Variable_Address)
  lea rax, MC_Local_Variable_Address[rip]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] MC_Local_Variable_Address.3:rax 
  # $7.1: Boolean = call(is.325, address.1, MC_Local_Variable_Address.3)
  .loc 1 1302 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: MC_Local_Variable_Address.3
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__write_48__6
.LABEL__write_48__5:
  # address.1: @MC_Local_Variable_Address = address.1
  .loc 1 1303 20
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] address.1:rax 
  # $9.1: @FILE = call(write.339, file.1, "[rbp-")
  .loc 1 1304 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_144[rip] # "[rbp-"
  mov [rbp-24], rax
  call write_339
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] address.1:[rbp-24] $9.1:rax 
  # $10.1: Int = load_struct_member(address.1, offset)
  .loc 1 1304 42
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $9.1:rax $10.1:rbx 
  # $11.1: @FILE = call(write.338, $9.1, $10.1)
  .loc 1 1304 16
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $11.1:rax 
  # $12.1: @FILE = call(write.341, $11.1, ']')
  .loc 1 1304 16
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 1 1304 9
  jmp .LABEL__write_48__end
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
.LABEL__write_48__6:
  # $13.1: @String = call(clone.329, "Unsupported type: ")
  .loc 1 1306 11
  lea rdi, .LABEL__string_145[rip] # "Unsupported type: "
  call clone_329
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $13.1:rax 
  # $14.1: @Object_Type = load_struct_member(address.1, object_type)
  .loc 1 1306 46
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $13.1:rax $14.1:rbx 
  # $15.1: @String = load_struct_member($14.1, name)
  .loc 1 1306 46
  mov r15, rbx
  add r15, 8
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $13.1:rax $15.1:r15 
  # $16.1: @String = call(append.332, $13.1, $15.1)
  .loc 1 1306 11
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $16.1:rax 
  # call(abort.344, $16.1)
  .loc 1 1306 5
  mov rdi, rax
  call abort_344
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: address.1
  # [live values]: 
.LABEL__write_48__end:
  mov rsp, rbp
  pop rbp
  ret

write_48__stack_frame_size: .word 32

  .loc 1 1313 1
  .text
create_mc_global_variable_address_49:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_global_variable_address_49__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_global_variable_address_49__1:
  # ir_variable.1: @IR_Variable = load_variable(ir_variable)
  # [live values]: ir_variable.1:rdi 
  # address.1: @MC_Global_Variable_Address = new(MC_Global_Variable_Address)
  .loc 1 1314 16
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  lea rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  # [live values]: ir_variable.1:[rbp-8] address.1:rax 
  # store_struct_member(address.1, ir_variable, ir_variable.1)
  .loc 1 1315 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: ir_variable.1
  # [live values]: address.1:rax 
  # return(address.1)
  .loc 1 1316 5
  jmp .LABEL__create_mc_global_variable_address_49__end
  # [discarded value]: address.1
  # [live values]: 
.LABEL__create_mc_global_variable_address_49__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_global_variable_address_49__stack_frame_size: .word 16

  .loc 1 1323 1
  .text
create_mc_local_variable_address_50:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_local_variable_address_50__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_local_variable_address_50__1:
  # offset.1: Int = load_variable(offset)
  # [live values]: offset.1:rdi 
  # address.1: @MC_Local_Variable_Address = new(MC_Local_Variable_Address)
  .loc 1 1324 16
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  lea rbx, MC_Local_Variable_Address[rip]
  mov [rax], rbx
  # [live values]: offset.1:[rbp-8] address.1:rax 
  # store_struct_member(address.1, offset, offset.1)
  .loc 1 1325 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: offset.1
  # [live values]: address.1:rax 
  # return(address.1)
  .loc 1 1326 5
  jmp .LABEL__create_mc_local_variable_address_50__end
  # [discarded value]: address.1
  # [live values]: 
.LABEL__create_mc_local_variable_address_50__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_local_variable_address_50__stack_frame_size: .word 16

  .loc 1 1329 1
  .text
get_type_size_51:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_type_size_51__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_type_size_51__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_type.1: @IR_Type = load_variable(ir_type)
  # [live values]: self.1:rdi ir_type.1:rsi 
  # IR_Boolean_Type.5: @Object_Type = load_variable(IR_Boolean_Type)
  lea rax, IR_Boolean_Type[rip]
  # [live values]: self.1:rdi ir_type.1:rsi IR_Boolean_Type.5:rax 
  # $1.1: Boolean = call(is.325, ir_type.1, IR_Boolean_Type.5)
  .loc 1 1330 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Boolean_Type.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__get_type_size_51__3
.LABEL__get_type_size_51__2:
  # return(1)
  .loc 1 1331 9
  mov rax, 1
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__3:
  # IR_Int_Type.7: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int_Type.7:rax 
  # $2.1: Boolean = call(is.325, ir_type.1, IR_Int_Type.7)
  .loc 1 1333 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.5, block.6)
  test al, al
  jz .LABEL__get_type_size_51__6
.LABEL__get_type_size_51__5:
  # return(8)
  .loc 1 1334 9
  mov rax, 8
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__6:
  # IR_Int16_Type.2: @Object_Type = load_variable(IR_Int16_Type)
  lea rax, IR_Int16_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int16_Type.2:rax 
  # $3.1: Boolean = call(is.325, ir_type.1, IR_Int16_Type.2)
  .loc 1 1336 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int16_Type.2
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.8, block.9)
  test al, al
  jz .LABEL__get_type_size_51__9
.LABEL__get_type_size_51__8:
  # return(2)
  .loc 1 1337 9
  mov rax, 2
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__9:
  # IR_Int32_Type.7: @Object_Type = load_variable(IR_Int32_Type)
  lea rax, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int32_Type.7:rax 
  # $4.1: Boolean = call(is.325, ir_type.1, IR_Int32_Type.7)
  .loc 1 1339 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int32_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.11, block.12)
  test al, al
  jz .LABEL__get_type_size_51__12
.LABEL__get_type_size_51__11:
  # return(4)
  .loc 1 1340 9
  mov rax, 4
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__12:
  # IR_Int8_Type.7: @Object_Type = load_variable(IR_Int8_Type)
  lea rax, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Int8_Type.7:rax 
  # $5.1: Boolean = call(is.325, ir_type.1, IR_Int8_Type.7)
  .loc 1 1342 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Int8_Type.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $5.1:rax 
  # jump($5.1, block.14, block.15)
  test al, al
  jz .LABEL__get_type_size_51__15
.LABEL__get_type_size_51__14:
  # return(1)
  .loc 1 1343 9
  mov rax, 1
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__15:
  # IR_Null_Type.2: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Null_Type.2:rax 
  # $6.1: Boolean = call(is.325, ir_type.1, IR_Null_Type.2)
  .loc 1 1345 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Null_Type.2
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $6.1:rax 
  # jump($6.1, block.17, block.18)
  test al, al
  jz .LABEL__get_type_size_51__18
.LABEL__get_type_size_51__17:
  # return(8)
  .loc 1 1346 9
  mov rax, 8
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__18:
  # IR_Pointer_Type.5: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Pointer_Type.5:rax 
  # $7.1: Boolean = call(is.325, ir_type.1, IR_Pointer_Type.5)
  .loc 1 1348 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Pointer_Type.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.20, block.21)
  test al, al
  jz .LABEL__get_type_size_51__21
.LABEL__get_type_size_51__20:
  # return(8)
  .loc 1 1349 9
  mov rax, 8
  jmp .LABEL__get_type_size_51__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__21:
  # IR_Struct_Type.3: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] IR_Struct_Type.3:rax 
  # $8.1: Boolean = call(is.325, ir_type.1, IR_Struct_Type.3)
  .loc 1 1351 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Struct_Type.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $8.1:rax 
  # jump($8.1, block.23, block.24)
  test al, al
  jz .LABEL__get_type_size_51__24
.LABEL__get_type_size_51__23:
  # ir_type.1: @IR_Struct_Type = ir_type.1
  .loc 1 1352 20
  mov rax, [rbp-16]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax 
  # size.1: Int = 0
  .loc 1 1353 9
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax size.1:rbx 
  # $10.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  .loc 1 1354 13
  mov r15, rax
  add r15, 16
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax size.1:rbx $10.1:r15 
  # $11.1: Boolean = $10.1 != null
  .loc 1 1354 13
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:rax size.1:rbx $11.1:r14 
  # jump($11.1, block.25, block.26)
  test r14b, r14b
  mov [rbp-24], rax
  mov [rbp-32], rbx
  jz .LABEL__get_type_size_51__26
.LABEL__get_type_size_51__25:
  # $12.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  .loc 1 1355 46
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] $12.1:rax 
  # $13.1: Int = call(get_type_size.51, self.1, $12.1)
  .loc 1 1355 27
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_type_size_51
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] $13.1:rax 
  # size.3: Int = size.1 + $13.1
  .loc 1 1355 20
  mov rbx, [rbp-32]
  add rbx, rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:rbx[rbp-32] 
  # jump(block.26)
  mov [rbp-32], rbx
.LABEL__get_type_size_51__26:
  # size.8: Int = phi(size.1, size.3)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] 
  # $15.1: @List = load_struct_member(ir_type.1, members)
  .loc 1 1357 32
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] $15.1:rax 
  # struct_type_members.1: @List_Iterator = call(create_iterator.319, $15.1)
  .loc 1 1357 32
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:rax 
  # jump(block.27)
  mov [rbp-40], rax
.LABEL__get_type_size_51__27:
  # size.7: Int = phi(size.8, size.5)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
  # $17.1: Boolean = call(has_next.322, struct_type_members.1)
  .loc 1 1358 16
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] $17.1:rax 
  # jump($17.1, block.28, block.29)
  test al, al
  jz .LABEL__get_type_size_51__29
.LABEL__get_type_size_51__28:
  # struct_type_member.1: @IR_Struct_Type_Member = call(next.323, struct_type_members.1)
  .loc 1 1359 35
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] struct_type_member.1:rax 
  # $20.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 1 1360 46
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] $20.1:rbx 
  # $21.1: Int = call(get_type_size.51, self.1, $20.1)
  .loc 1 1360 27
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_51
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] $21.1:rax 
  # size.5: Int = size.7 + $21.1
  .loc 1 1360 20
  mov rbx, [rbp-32]
  add rbx, rax
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] size.5:rbx[rbp-32] 
  # jump(block.27)
  mov [rbp-32], rbx
  jmp .LABEL__get_type_size_51__27
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] size.5:[rbp-32] 
  # [discarded value]: size.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
.LABEL__get_type_size_51__29:
  # return(size.7)
  .loc 1 1362 9
  mov rax, [rbp-32]
  jmp .LABEL__get_type_size_51__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] size.7:[rbp-32] 
  # [discarded value]: size.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] size.8:[rbp-32] struct_type_members.1:[rbp-40] 
  # [discarded value]: size.8
  # [discarded value]: struct_type_members.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] size.3:[rbp-32] 
  # [discarded value]: size.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] ir_type.1:[rbp-24] size.1:[rbp-32] 
  # [discarded value]: ir_type.1
  # [discarded value]: size.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
.LABEL__get_type_size_51__24:
  # $23.1: @String = call(clone.329, "Unsupported type: ")
  .loc 1 1364 16
  lea rdi, .LABEL__string_145[rip] # "Unsupported type: "
  call clone_329
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $23.1:rax 
  # $24.1: @Object_Type = load_struct_member(ir_type.1, object_type)
  .loc 1 1364 51
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $23.1:rax $24.1:rbx 
  # $25.1: @String = load_struct_member($24.1, name)
  .loc 1 1364 51
  mov r15, rbx
  add r15, 8
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $23.1:rax $25.1:r15 
  # $26.1: @String = call(append.332, $23.1, $25.1)
  .loc 1 1364 16
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $23.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $26.1:rax 
  # call(abort.31, self.1, $26.1)
  .loc 1 1364 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_31
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: ir_type.1
  # [live values]: 
.LABEL__get_type_size_51__end:
  mov rsp, rbp
  pop rbp
  ret

get_type_size_51__stack_frame_size: .word 48

  .loc 1 1372 1
  .text
convert_string_52:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_string_52__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_string_52__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # literal.1: @String_Token = load_variable(literal)
  # [live values]: self.1:rdi literal.1:rsi 
  # $1.1: @List = load_struct_member(self.1, strings)
  .loc 1 1373 20
  mov rax, rdi
  add rax, 161
  mov rax, [rax]
  # [live values]: self.1:rdi literal.1:rsi $1.1:rax 
  # string_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 1 1373 20
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi literal.1:rsi string_item.1:rbx 
  # jump(block.2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__convert_string_52__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.5)
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # $3.1: Boolean = string_item.2 != null
  .loc 1 1374 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__convert_string_52__4
.LABEL__convert_string_52__3:
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  .loc 1 1375 19
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax 
  # $6.1: @String_Token = load_struct_member(string.1, literal)
  .loc 1 1376 13
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $6.1:rbx 
  # $7.1: @String = load_struct_member($6.1, lexeme)
  .loc 1 1376 13
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $7.1:r15 
  # $8.1: @String = load_struct_member(literal.1, lexeme)
  .loc 1 1376 42
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $7.1:r15 $8.1:rbx 
  # $9.1: Boolean = call(equals.335, $7.1, $8.1)
  .loc 1 1376 13
  mov rdi, r15
  mov rsi, rbx
  mov [rbp-32], rax
  call equals_335
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_string_52__6
.LABEL__convert_string_52__5:
  # return(string.1)
  .loc 1 1377 13
  mov rax, [rbp-32]
  jmp .LABEL__convert_string_52__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
.LABEL__convert_string_52__6:
  # string_item.5: @List_Item = load_struct_member(string_item.2, next_item)
  .loc 1 1379 23
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] string_item.5:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__convert_string_52__2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] string_item.5:[rbp-8] 
  # [discarded value]: string_item.5
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
.LABEL__convert_string_52__4:
  # string.1: @MC_String = new(MC_String)
  .loc 1 1381 15
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax 
  # $12.1: @List = load_struct_member(self.1, strings)
  .loc 1 1382 17
  mov rbx, [rbp-24]
  add rbx, 161
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $12.1:rbx 
  # $13.1: Int = load_struct_member($12.1, size)
  .loc 1 1382 17
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $13.1:r15 
  # store_struct_member(string.1, id, $13.1)
  .loc 1 1382 5
  mov rbx, rax
  mov QWORD PTR [rbx], r15
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax 
  # store_struct_member(string.1, literal, literal.1)
  .loc 1 1383 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [live values]: self.1:[rbp-24] literal.1:r15[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax 
  # $14.1: @List = load_struct_member(self.1, strings)
  .loc 1 1384 5
  mov rbx, [rbp-24]
  add rbx, 161
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] literal.1:r15[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:rax $14.1:rbx 
  # call(append.308, $14.1, string.1)
  .loc 1 1384 5
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-32], rax
  call append_308
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] string.1:[rbp-32] 
  # return(string.1)
  .loc 1 1385 5
  mov rax, [rbp-32]
  jmp .LABEL__convert_string_52__end
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: literal.1
  # [discarded value]: string_item.1
  # [live values]: 
.LABEL__convert_string_52__end:
  mov rsp, rbp
  pop rbp
  ret

convert_string_52__stack_frame_size: .word 32

  .loc 1 1388 1
  .text
generate_strings_53:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_strings_53__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_strings_53__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1389 5
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @FILE = call(end_line.342, $1.1)
  .loc 1 1389 5
  mov [rbp-8], rdi
  mov rdi, rax
  call end_line_342
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write.339, $2.1, "  .section .rodata")
  .loc 1 1389 5
  mov rdi, rax
  lea rsi, .LABEL__string_146[rip] # "  .section .rodata"
  call write_339
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: @FILE = call(end_line.342, $3.1)
  .loc 1 1389 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # $5.1: @List = load_struct_member(self.1, strings)
  .loc 1 1390 20
  mov rax, [rbp-8]
  add rax, 161
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # string_item.1: @List_Item = load_struct_member($5.1, first_item)
  .loc 1 1390 20
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] string_item.1:rbx 
  # jump(block.2)
  mov [rbp-16], rbx
.LABEL__generate_strings_53__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.4)
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # $7.1: Boolean = string_item.2 != null
  .loc 1 1391 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:rax 
  # jump($7.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_strings_53__4
.LABEL__generate_strings_53__3:
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  .loc 1 1392 19
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rax 
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1394 9
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:rax $10.1:rbx 
  # $11.1: @FILE = call(end_line.342, $10.1)
  .loc 1 1394 9
  mov rdi, rbx
  mov [rbp-24], rax
  call end_line_342
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1395 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $12.1:rax 
  # $13.1: @FILE = call(write.339, $12.1, "  .align 8")
  .loc 1 1395 9
  mov rdi, rax
  lea rsi, .LABEL__string_147[rip] # "  .align 8"
  call write_339
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(end_line.342, $13.1)
  .loc 1 1395 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1396 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $15.1:rax 
  # $16.1: @FILE = call(write_string_label.54, $15.1, string.1)
  .loc 1 1396 9
  mov rdi, rax
  mov rsi, [rbp-24]
  call write_string_label_54
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $16.1:rax 
  # $17.1: @FILE = call(write.341, $16.1, ':')
  .loc 1 1396 9
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $17.1:rax 
  # $18.1: @FILE = call(end_line.342, $17.1)
  .loc 1 1396 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1397 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $19.1:rax 
  # $20.1: @FILE = call(write.339, $19.1, "  .quad ")
  .loc 1 1397 9
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $20.1:rax 
  # $21.1: @FILE = call(write_string_label.54, $20.1, string.1)
  .loc 1 1397 9
  mov rdi, rax
  mov rsi, [rbp-24]
  call write_string_label_54
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $21.1:rax 
  # $22.1: @FILE = call(write.339, $21.1, "__data")
  .loc 1 1397 9
  mov rdi, rax
  lea rsi, .LABEL__string_149[rip] # "__data"
  call write_339
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $22.1:rax 
  # $23.1: @FILE = call(end_line.342, $22.1)
  .loc 1 1397 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1398 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $24.1:rax 
  # $25.1: @FILE = call(write.339, $24.1, "  .quad ")
  .loc 1 1398 9
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $25.1:rax 
  # $26.1: @String_Token = load_struct_member(string.1, literal)
  .loc 1 1398 50
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $25.1:rax $26.1:rbx 
  # $27.1: @String = load_struct_member($26.1, value)
  .loc 1 1398 50
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $25.1:rax $27.1:r15 
  # $28.1: Int = load_struct_member($27.1, length)
  .loc 1 1398 50
  mov rbx, r15
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $25.1:rax $28.1:rbx 
  # $29.1: Int = $28.1 + 1
  .loc 1 1398 50
  mov r15, rbx
  add r15, 1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $25.1:rax $29.1:r15 
  # $30.1: @FILE = call(write.338, $25.1, $29.1)
  .loc 1 1398 9
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $25.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $30.1:rax 
  # $31.1: @FILE = call(end_line.342, $30.1)
  .loc 1 1398 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1399 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $32.1:rax 
  # $33.1: @FILE = call(write.339, $32.1, "  .quad ")
  .loc 1 1399 9
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $33.1:rax 
  # $34.1: @String_Token = load_struct_member(string.1, literal)
  .loc 1 1399 50
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $33.1:rax $34.1:rbx 
  # $35.1: @String = load_struct_member($34.1, value)
  .loc 1 1399 50
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $33.1:rax $35.1:r15 
  # $36.1: Int = load_struct_member($35.1, length)
  .loc 1 1399 50
  mov rbx, r15
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $33.1:rax $36.1:rbx 
  # $37.1: @FILE = call(write.338, $33.1, $36.1)
  .loc 1 1399 9
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $33.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $37.1:rax 
  # $38.1: @FILE = call(end_line.342, $37.1)
  .loc 1 1399 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] 
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1400 9
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $39.1:rax 
  # $40.1: @FILE = call(write_string_label.54, $39.1, string.1)
  .loc 1 1400 9
  mov rdi, rax
  mov rsi, [rbp-24]
  call write_string_label_54
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $40.1:rax 
  # $41.1: @FILE = call(write.339, $40.1, "__data: .string ")
  .loc 1 1400 9
  mov rdi, rax
  lea rsi, .LABEL__string_150[rip] # "__data: .string "
  call write_339
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string.1:[rbp-24] $41.1:rax 
  # $42.1: @String_Token = load_struct_member(string.1, literal)
  .loc 1 1400 85
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $41.1:rax $42.1:rbx 
  # $43.1: @String = load_struct_member($42.1, lexeme)
  .loc 1 1400 85
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $41.1:rax $43.1:r15 
  # $44.1: @FILE = call(write.339, $41.1, $43.1)
  .loc 1 1400 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $41.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $44.1:rax 
  # $45.1: @FILE = call(end_line.342, $44.1)
  .loc 1 1400 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # string_item.4: @List_Item = load_struct_member(string_item.2, next_item)
  .loc 1 1402 23
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string_item.4:rax[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__generate_strings_53__2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] string_item.4:[rbp-16] 
  # [discarded value]: string_item.4
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
.LABEL__generate_strings_53__4:
  # return()
  jmp .LABEL__generate_strings_53__end
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: string_item.1
  # [live values]: 
.LABEL__generate_strings_53__end:
  mov rsp, rbp
  pop rbp
  ret

generate_strings_53__stack_frame_size: .word 32

  .loc 1 1406 1
  .text
write_string_label_54:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_string_label_54__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_string_label_54__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @MC_String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  # $1.1: @FILE = call(write.339, file.1, ".LABEL__string_")
  .loc 1 1407 12
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_151[rip] # ".LABEL__string_"
  call write_339
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  # $2.1: Int = load_struct_member(string.1, id)
  .loc 1 1407 48
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [discarded value]: string.1
  # [live values]: $1.1:rax $2.1:rbx 
  # $3.1: @FILE = call(write.338, $1.1, $2.1)
  .loc 1 1407 12
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 1407 5
  jmp .LABEL__write_string_label_54__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__write_string_label_54__end:
  mov rsp, rbp
  pop rbp
  ret

write_string_label_54__stack_frame_size: .word 16

  .loc 1 1410 1
  .text
generate_object_types_55:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_object_types_55__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_object_types_55__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # types.1: @List = load_variable(types)
  # [live values]: self.1:rdi types.1:rsi 
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1411 5
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi types.1:rsi $1.1:rax 
  # $2.1: @FILE = call(end_line.342, $1.1)
  .loc 1 1411 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_342
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write.339, $2.1, "  .section .rodata")
  .loc 1 1411 5
  mov rdi, rax
  lea rsi, .LABEL__string_146[rip] # "  .section .rodata"
  call write_339
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(end_line.342, $3.1)
  .loc 1 1411 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # type_item.1: @List_Item = load_struct_member(types.1, first_item)
  .loc 1 1412 18
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-8] type_item.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__generate_object_types_55__2:
  # type_item.2: @List_Item = phi(type_item.1, type_item.5)
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # $6.1: Boolean = type_item.2 != null
  .loc 1 1413 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, block.3, block.4)
  test al, al
  jz .LABEL__generate_object_types_55__4
.LABEL__generate_object_types_55__3:
  # type.1: @IR_Type = load_struct_member(type_item.2, data)
  .loc 1 1414 17
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:rax 
  # IR_Struct_Type.4: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:rax IR_Struct_Type.4:rbx 
  # $9.1: Boolean = call(is.325, type.1, IR_Struct_Type.4)
  .loc 1 1415 13
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: IR_Struct_Type.4
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__generate_object_types_55__6
.LABEL__generate_object_types_55__5:
  # type.1: @IR_Struct_Type = type.1
  .loc 1 1416 21
  mov rax, [rbp-24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:rax 
  # $11.1: Boolean = call(is_object_type.139, type.1)
  .loc 1 1417 17
  mov rdi, rax
  mov [rbp-32], rax
  call is_object_type_139
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $11.1:rax 
  # jump($11.1, block.7, block.6)
  test al, al
  jz .LABEL__generate_object_types_55__6
.LABEL__generate_object_types_55__7:
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1418 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(end_line.342, $12.1)
  .loc 1 1418 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1419 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $14.1:rax 
  # $15.1: @FILE = call(write.339, $14.1, "  .align 8")
  .loc 1 1419 17
  mov rdi, rax
  lea rsi, .LABEL__string_147[rip] # "  .align 8"
  call write_339
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(end_line.342, $15.1)
  .loc 1 1419 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1420 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $17.1:rax 
  # $18.1: @FILE = call(write_type_label.56, $17.1, type.1)
  .loc 1 1420 17
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_type_label_56
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $18.1:rax 
  # $19.1: @FILE = call(write.341, $18.1, ':')
  .loc 1 1420 17
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $19.1:rax 
  # $20.1: @FILE = call(end_line.342, $19.1)
  .loc 1 1420 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1421 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $21.1:rax 
  # $22.1: @FILE = call(write.339, $21.1, "  .quad ")
  .loc 1 1421 17
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $22.1:rax 
  # $23.1: @FILE = call(write.338, $22.1, 0)
  .loc 1 1421 17
  mov rdi, rax
  xor rsi, rsi
  call write_338
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $23.1:rax 
  # $24.1: @FILE = call(end_line.342, $23.1)
  .loc 1 1421 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1422 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $25.1:rax 
  # $26.1: @FILE = call(write.339, $25.1, "  .quad .LABEL__")
  .loc 1 1422 17
  mov rdi, rax
  lea rsi, .LABEL__string_152[rip] # "  .quad .LABEL__"
  call write_339
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $26.1:rax 
  # $27.1: @String = load_struct_member(type.1, name)
  .loc 1 1422 66
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $26.1:rax $27.1:rbx 
  # $28.1: @FILE = call(write.339, $26.1, $27.1)
  .loc 1 1422 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $28.1:rax 
  # $29.1: @FILE = call(write.339, $28.1, "__type_name__data")
  .loc 1 1422 17
  mov rdi, rax
  lea rsi, .LABEL__string_153[rip] # "__type_name__data"
  call write_339
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $29.1:rax 
  # $30.1: @FILE = call(end_line.342, $29.1)
  .loc 1 1422 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1423 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $31.1:rax 
  # $32.1: @FILE = call(write.339, $31.1, "  .quad ")
  .loc 1 1423 17
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $32.1:rax 
  # $33.1: @String = load_struct_member(type.1, name)
  .loc 1 1423 58
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $32.1:rax $33.1:rbx 
  # $34.1: Int = load_struct_member($33.1, length)
  .loc 1 1423 58
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $32.1:rax $34.1:r15 
  # $35.1: Int = $34.1 + 1
  .loc 1 1423 58
  mov rbx, r15
  add rbx, 1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $32.1:rax $35.1:rbx 
  # $36.1: @FILE = call(write.338, $32.1, $35.1)
  .loc 1 1423 17
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $32.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $36.1:rax 
  # $37.1: @FILE = call(end_line.342, $36.1)
  .loc 1 1423 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1424 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $38.1:rax 
  # $39.1: @FILE = call(write.339, $38.1, "  .quad ")
  .loc 1 1424 17
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $39.1:rax 
  # $40.1: @String = load_struct_member(type.1, name)
  .loc 1 1424 58
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $39.1:rax $40.1:rbx 
  # $41.1: Int = load_struct_member($40.1, length)
  .loc 1 1424 58
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $39.1:rax $41.1:r15 
  # $42.1: @FILE = call(write.338, $39.1, $41.1)
  .loc 1 1424 17
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $39.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $42.1:rax 
  # $43.1: @FILE = call(end_line.342, $42.1)
  .loc 1 1424 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # $44.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  .loc 1 1425 21
  mov rax, [rbp-32]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $44.1:rax 
  # $45.1: Boolean = $44.1 != null
  .loc 1 1425 21
  cmp rax, 0
  setne bl
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $45.1:rbx 
  # jump($45.1, block.9, block.11)
  test bl, bl
  jz .LABEL__generate_object_types_55__11
.LABEL__generate_object_types_55__9:
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1426 21
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $49.1:rax 
  # $50.1: @FILE = call(write.339, $49.1, "  .quad ")
  .loc 1 1426 21
  mov rdi, rax
  lea rsi, .LABEL__string_148[rip] # "  .quad "
  call write_339
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $50.1:rax 
  # $51.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  .loc 1 1426 62
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $50.1:rax $51.1:rbx 
  # $52.1: @String = load_struct_member($51.1, name)
  .loc 1 1426 62
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $50.1:rax $52.1:r15 
  # $53.1: @FILE = call(write.339, $50.1, $52.1)
  .loc 1 1426 21
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $50.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $53.1:rax 
  # $54.1: @FILE = call(end_line.342, $53.1)
  .loc 1 1426 21
  mov rdi, rax
  call end_line_342
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # jump(block.10)
.LABEL__generate_object_types_55__10:
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1430 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $55.1:rax 
  # $56.1: @FILE = call(write.339, $55.1, ".LABEL__")
  .loc 1 1430 17
  mov rdi, rax
  lea rsi, .LABEL__string_29[rip] # ".LABEL__"
  call write_339
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $56.1:rax 
  # $57.1: @String = load_struct_member(type.1, name)
  .loc 1 1430 58
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $56.1:rax $57.1:rbx 
  # $58.1: @FILE = call(write.339, $56.1, $57.1)
  .loc 1 1430 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $56.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $58.1:rax 
  # $59.1: @FILE = call(write.339, $58.1, "__type_name__data: .string \"")
  .loc 1 1430 17
  mov rdi, rax
  lea rsi, .LABEL__string_154[rip] # "__type_name__data: .string \""
  call write_339
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $59.1:rax 
  # $60.1: @String = load_struct_member(type.1, name)
  .loc 1 1430 114
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $59.1:rax $60.1:rbx 
  # $61.1: @FILE = call(write.339, $59.1, $60.1)
  .loc 1 1430 17
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $61.1:rax 
  # $62.1: @FILE = call(write.341, $61.1, '"')
  .loc 1 1430 17
  mov rdi, rax
  mov sil, 34
  call write_341
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $62.1:rax 
  # $63.1: @FILE = call(end_line.342, $62.1)
  .loc 1 1430 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # jump(block.6)
.LABEL__generate_object_types_55__6:
  # type_item.5: @List_Item = load_struct_member(type_item.2, next_item)
  .loc 1 1433 21
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] type_item.5:rax[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__generate_object_types_55__2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] type_item.5:[rbp-16] 
  # [discarded value]: type_item.5
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
.LABEL__generate_object_types_55__11:
  # $46.1: @FILE = load_struct_member(self.1, output_file)
  .loc 1 1428 21
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $46.1:rax 
  # $47.1: @FILE = call(write.339, $46.1, "  .quad 0")
  .loc 1 1428 21
  mov rdi, rax
  lea rsi, .LABEL__string_155[rip] # "  .quad 0"
  call write_339
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] $47.1:rax 
  # $48.1: @FILE = call(end_line.342, $47.1)
  .loc 1 1428 21
  mov rdi, rax
  call end_line_342
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__generate_object_types_55__10
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] type.1:[rbp-32] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
.LABEL__generate_object_types_55__4:
  # return()
  jmp .LABEL__generate_object_types_55__end
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [discarded value]: type_item.2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: type_item.1
  # [live values]: 
.LABEL__generate_object_types_55__end:
  mov rsp, rbp
  pop rbp
  ret

generate_object_types_55__stack_frame_size: .word 32

  .loc 1 1437 1
  .text
write_type_label_56:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_type_label_56__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_type_label_56__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  # $1.1: @String = load_struct_member(type.1, name)
  .loc 1 1438 23
  mov rax, rsi
  add rax, 8
  mov rax, [rax]
  # [discarded value]: type.1
  # [live values]: file.1:rdi $1.1:rax 
  # $2.1: @FILE = call(write.339, file.1, $1.1)
  .loc 1 1438 12
  mov rsi, rax
  call write_339
  # [discarded value]: file.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 1438 5
  jmp .LABEL__write_type_label_56__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_type_label_56__end:
  mov rsp, rbp
  pop rbp
  ret

write_type_label_56__stack_frame_size: .word 0

  .loc 1 1445 1
  .text
build_57:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_57__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_57__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  # builder.1: @IR_Builder = call(create_ir_builder.58, compilation_unit.1)
  .loc 1 1446 16
  mov [rbp-8], rdi
  call create_ir_builder_58
  # [live values]: compilation_unit.1:[rbp-8] builder.1:rax 
  # call(build.72, builder.1)
  .loc 1 1447 5
  mov rdi, rax
  mov [rbp-16], rax
  call build_72
  # [live values]: compilation_unit.1:[rbp-8] builder.1:[rbp-16] 
  # build.1: @IR_Build = new(IR_Build)
  .loc 1 1448 14
  mov rdi, 24
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] builder.1:[rbp-16] build.1:rax 
  # $3.1: @List = load_struct_member(compilation_unit.1, sources)
  .loc 1 1449 21
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [discarded value]: compilation_unit.1
  # [live values]: builder.1:[rbp-16] build.1:rax $3.1:rbx 
  # store_struct_member(build.1, sources, $3.1)
  .loc 1 1449 5
  mov r15, rax
  mov QWORD PTR [r15], rbx
  # [discarded value]: $3.1
  # [live values]: builder.1:[rbp-16] build.1:rax 
  # $4.1: @List = load_struct_member(builder.1, named_functions)
  .loc 1 1450 29
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: builder.1:[rbp-16] build.1:rax $4.1:rbx 
  # store_struct_member(build.1, named_functions, $4.1)
  .loc 1 1450 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $4.1
  # [live values]: builder.1:[rbp-16] build.1:rax 
  # $5.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1451 25
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: builder.1
  # [live values]: build.1:rax $5.1:rbx 
  # store_struct_member(build.1, named_types, $5.1)
  .loc 1 1451 5
  mov r15, rax
  add r15, 16
  mov QWORD PTR [r15], rbx
  # [discarded value]: $5.1
  # [live values]: build.1:rax 
  # return(build.1)
  .loc 1 1452 5
  jmp .LABEL__build_57__end
  # [discarded value]: build.1
  # [live values]: 
.LABEL__build_57__end:
  mov rsp, rbp
  pop rbp
  ret

build_57__stack_frame_size: .word 16

  .loc 1 1482 1
  .text
create_ir_builder_58:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_builder_58__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_builder_58__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  # builder.1: @IR_Builder = new(IR_Builder)
  .loc 1 1483 16
  mov [rbp-8], rdi
  mov rdi, 56
  call malloc
  # [live values]: compilation_unit.1:[rbp-8] builder.1:rax 
  # store_struct_member(builder.1, compilation_unit, compilation_unit.1)
  .loc 1 1484 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: compilation_unit.1
  # [live values]: builder.1:rax 
  # $2.1: @IR_Builder_Context = call(create_ir_builder_context.59, null, false)
  .loc 1 1485 23
  xor rdi, rdi
  mov sil, 0
  mov [rbp-8], rax
  call create_ir_builder_context_59
  # [live values]: builder.1:[rbp-8] $2.1:rax 
  # store_struct_member(builder.1, context, $2.1)
  .loc 1 1485 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: builder.1:[rbp-8] 
  # $3.1: @List = call(create_list.307)
  .loc 1 1486 27
  call create_list_307
  # [live values]: builder.1:[rbp-8] $3.1:rax 
  # store_struct_member(builder.1, named_types, $3.1)
  .loc 1 1486 5
  mov rbx, [rbp-8]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: builder.1:[rbp-8] 
  # $4.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1487 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $4.1:rax 
  # $5.1: @IR_Any_Type = new(IR_Any_Type)
  .loc 1 1487 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Any_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Type = call(init.131, $5.1, "Any")
  .loc 1 1487 32
  mov rdi, rax
  lea rsi, .LABEL__string_156[rip] # "Any"
  call init_131
  # [discarded value]: $5.1
  # [live values]: builder.1:[rbp-8] $4.1:[rbp-16] $6.1:rax 
  # call(append.308, $4.1, $6.1)
  .loc 1 1487 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $4.1
  # [discarded value]: $6.1
  # [live values]: builder.1:[rbp-8] 
  # $7.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1488 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $7.1:rax 
  # $8.1: @IR_Boolean_Type = new(IR_Boolean_Type)
  .loc 1 1488 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Boolean_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $7.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Type = call(init.131, $8.1, "Boolean")
  .loc 1 1488 32
  mov rdi, rax
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  call init_131
  # [discarded value]: $8.1
  # [live values]: builder.1:[rbp-8] $7.1:[rbp-16] $9.1:rax 
  # call(append.308, $7.1, $9.1)
  .loc 1 1488 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: builder.1:[rbp-8] 
  # $10.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1489 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $10.1:rax 
  # $11.1: @IR_Int_Type = new(IR_Int_Type)
  .loc 1 1489 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Int_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $10.1:[rbp-16] $11.1:rax 
  # $12.1: @IR_Type = call(init.131, $11.1, "Int")
  .loc 1 1489 32
  mov rdi, rax
  lea rsi, .LABEL__string_158[rip] # "Int"
  call init_131
  # [discarded value]: $11.1
  # [live values]: builder.1:[rbp-8] $10.1:[rbp-16] $12.1:rax 
  # call(append.308, $10.1, $12.1)
  .loc 1 1489 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $10.1
  # [discarded value]: $12.1
  # [live values]: builder.1:[rbp-8] 
  # $13.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1490 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $13.1:rax 
  # $14.1: @IR_Int8_Type = new(IR_Int8_Type)
  .loc 1 1490 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Int8_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $13.1:[rbp-16] $14.1:rax 
  # $15.1: @IR_Type = call(init.131, $14.1, "Int8")
  .loc 1 1490 32
  mov rdi, rax
  lea rsi, .LABEL__string_159[rip] # "Int8"
  call init_131
  # [discarded value]: $14.1
  # [live values]: builder.1:[rbp-8] $13.1:[rbp-16] $15.1:rax 
  # call(append.308, $13.1, $15.1)
  .loc 1 1490 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: builder.1:[rbp-8] 
  # $16.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1491 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $16.1:rax 
  # $17.1: @IR_Int16_Type = new(IR_Int16_Type)
  .loc 1 1491 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Int16_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $16.1:[rbp-16] $17.1:rax 
  # $18.1: @IR_Type = call(init.131, $17.1, "Int16")
  .loc 1 1491 32
  mov rdi, rax
  lea rsi, .LABEL__string_160[rip] # "Int16"
  call init_131
  # [discarded value]: $17.1
  # [live values]: builder.1:[rbp-8] $16.1:[rbp-16] $18.1:rax 
  # call(append.308, $16.1, $18.1)
  .loc 1 1491 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $16.1
  # [discarded value]: $18.1
  # [live values]: builder.1:[rbp-8] 
  # $19.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1492 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $19.1:rax 
  # $20.1: @IR_Int32_Type = new(IR_Int32_Type)
  .loc 1 1492 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Int32_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $19.1:[rbp-16] $20.1:rax 
  # $21.1: @IR_Type = call(init.131, $20.1, "Int32")
  .loc 1 1492 32
  mov rdi, rax
  lea rsi, .LABEL__string_161[rip] # "Int32"
  call init_131
  # [discarded value]: $20.1
  # [live values]: builder.1:[rbp-8] $19.1:[rbp-16] $21.1:rax 
  # call(append.308, $19.1, $21.1)
  .loc 1 1492 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: builder.1:[rbp-8] 
  # $22.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1493 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $22.1:rax 
  # $23.1: @IR_Int64_Type = new(IR_Int64_Type)
  .loc 1 1493 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Int64_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $22.1:[rbp-16] $23.1:rax 
  # $24.1: @IR_Type = call(init.131, $23.1, "Int64")
  .loc 1 1493 32
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "Int64"
  call init_131
  # [discarded value]: $23.1
  # [live values]: builder.1:[rbp-8] $22.1:[rbp-16] $24.1:rax 
  # call(append.308, $22.1, $24.1)
  .loc 1 1493 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: builder.1:[rbp-8] 
  # $25.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1494 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $25.1:rax 
  # $26.1: @IR_Nothing_Type = new(IR_Nothing_Type)
  .loc 1 1494 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Nothing_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $25.1:[rbp-16] $26.1:rax 
  # $27.1: @IR_Type = call(init.131, $26.1, "Nothing")
  .loc 1 1494 32
  mov rdi, rax
  lea rsi, .LABEL__string_163[rip] # "Nothing"
  call init_131
  # [discarded value]: $26.1
  # [live values]: builder.1:[rbp-8] $25.1:[rbp-16] $27.1:rax 
  # call(append.308, $25.1, $27.1)
  .loc 1 1494 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $25.1
  # [discarded value]: $27.1
  # [live values]: builder.1:[rbp-8] 
  # $28.1: @List = load_struct_member(builder.1, named_types)
  .loc 1 1495 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: builder.1:[rbp-8] $28.1:rax 
  # $29.1: @IR_Null_Type = new(IR_Null_Type)
  .loc 1 1495 32
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  lea rbx, IR_Null_Type[rip]
  mov [rax], rbx
  # [live values]: builder.1:[rbp-8] $28.1:[rbp-16] $29.1:rax 
  # $30.1: @IR_Type = call(init.131, $29.1, "Null")
  .loc 1 1495 32
  mov rdi, rax
  lea rsi, .LABEL__string_164[rip] # "Null"
  call init_131
  # [discarded value]: $29.1
  # [live values]: builder.1:[rbp-8] $28.1:[rbp-16] $30.1:rax 
  # call(append.308, $28.1, $30.1)
  .loc 1 1495 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $28.1
  # [discarded value]: $30.1
  # [live values]: builder.1:[rbp-8] 
  # $31.1: @List = call(create_list.307)
  .loc 1 1496 31
  call create_list_307
  # [live values]: builder.1:[rbp-8] $31.1:rax 
  # store_struct_member(builder.1, named_functions, $31.1)
  .loc 1 1496 5
  mov rbx, [rbp-8]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $31.1
  # [live values]: builder.1:[rbp-8] 
  # store_struct_member(builder.1, current_block, null)
  .loc 1 1497 5
  mov rax, [rbp-8]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: builder.1:[rbp-8] 
  # store_struct_member(builder.1, current_loop, null)
  .loc 1 1498 5
  mov rax, [rbp-8]
  add rax, 40
  mov QWORD PTR [rax], 0
  # [live values]: builder.1:[rbp-8] 
  # $32.1: @Counter = new(Counter)
  .loc 1 1499 23
  mov rdi, 8
  call malloc
  # [live values]: builder.1:[rbp-8] $32.1:rax 
  # $33.1: @Counter = call(init.128, $32.1)
  .loc 1 1499 23
  mov rdi, rax
  call init_128
  # [discarded value]: $32.1
  # [live values]: builder.1:[rbp-8] $33.1:rax 
  # store_struct_member(builder.1, counter, $33.1)
  .loc 1 1499 5
  mov rbx, [rbp-8]
  add rbx, 48
  mov QWORD PTR [rbx], rax
  # [discarded value]: $33.1
  # [live values]: builder.1:[rbp-8] 
  # return(builder.1)
  .loc 1 1500 5
  mov rax, [rbp-8]
  jmp .LABEL__create_ir_builder_58__end
  # [discarded value]: builder.1
  # [live values]: 
.LABEL__create_ir_builder_58__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_builder_58__stack_frame_size: .word 16

  .loc 1 1503 1
  .text
create_ir_builder_context_59:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_builder_context_59__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_builder_context_59__1:
  # parent.1: @IR_Builder_Context = load_variable(parent)
  # [live values]: parent.1:rdi 
  # reuse_named_values.1: Boolean = load_variable(reuse_named_values)
  # [live values]: parent.1:rdi reuse_named_values.1:rsi 
  # context.1: @IR_Builder_Context = new(IR_Builder_Context)
  .loc 1 1504 16
  mov [rbp-1], sil
  mov [rbp-9], rdi
  mov rdi, 24
  call malloc
  # [live values]: parent.1:[rbp-9] reuse_named_values.1:[rbp-1] context.1:rax 
  # store_struct_member(context.1, parent, parent.1)
  .loc 1 1505 5
  mov rbx, rax
  mov r15, [rbp-9]
  mov QWORD PTR [rbx], r15
  # [live values]: parent.1:r15[rbp-9] reuse_named_values.1:[rbp-1] context.1:rax 
  # $2.1: @List = call(create_list.307)
  .loc 1 1506 25
  mov [rbp-17], rax
  mov [rbp-9], r15
  call create_list_307
  # [live values]: parent.1:[rbp-9] reuse_named_values.1:[rbp-1] context.1:[rbp-17] $2.1:rax 
  # store_struct_member(context.1, variables, $2.1)
  .loc 1 1506 5
  mov rbx, [rbp-17]
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: parent.1:[rbp-9] reuse_named_values.1:[rbp-1] context.1:[rbp-17] 
  # jump(reuse_named_values.1, block.2, block.4)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__create_ir_builder_context_59__4
.LABEL__create_ir_builder_context_59__2:
  # $4.1: @List = load_struct_member(parent.1, named_values)
  .loc 1 1508 32
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: reuse_named_values.1
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] $4.1:rax 
  # store_struct_member(context.1, named_values, $4.1)
  .loc 1 1508 9
  mov rbx, [rbp-17]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $4.1
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] 
  # jump(block.3)
.LABEL__create_ir_builder_context_59__3:
  # return(context.1)
  .loc 1 1512 5
  mov rax, [rbp-17]
  jmp .LABEL__create_ir_builder_context_59__end
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] 
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] 
.LABEL__create_ir_builder_context_59__4:
  # $3.1: @List = call(create_list.307)
  .loc 1 1510 32
  call create_list_307
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] $3.1:rax 
  # store_struct_member(context.1, named_values, $3.1)
  .loc 1 1510 9
  mov rbx, [rbp-17]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] 
  # jump(block.3)
  jmp .LABEL__create_ir_builder_context_59__3
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] 
  # [live values]: parent.1:[rbp-9] context.1:[rbp-17] 
  # [discarded value]: parent.1
  # [discarded value]: context.1
  # [live values]: 
.LABEL__create_ir_builder_context_59__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_builder_context_59__stack_frame_size: .word 32

  .loc 1 1515 1
  .text
create_ir_loop_60:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_loop_60__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_loop_60__1:
  # parent.1: @IR_Loop = load_variable(parent)
  # [live values]: parent.1:rdi 
  # end_block.1: @IR_Block = load_variable(end_block)
  # [live values]: parent.1:rdi end_block.1:rsi 
  # new_loop.1: @IR_Loop = new(IR_Loop)
  .loc 1 1516 17
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  # [live values]: parent.1:[rbp-16] end_block.1:[rbp-8] new_loop.1:rax 
  # store_struct_member(new_loop.1, parent, parent.1)
  .loc 1 1517 5
  mov rbx, rax
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: parent.1
  # [live values]: end_block.1:[rbp-8] new_loop.1:rax 
  # store_struct_member(new_loop.1, end_block, end_block.1)
  .loc 1 1518 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: end_block.1
  # [live values]: new_loop.1:rax 
  # return(new_loop.1)
  .loc 1 1519 5
  jmp .LABEL__create_ir_loop_60__end
  # [discarded value]: new_loop.1
  # [live values]: 
.LABEL__create_ir_loop_60__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_loop_60__stack_frame_size: .word 16

  .loc 1 1522 1
  .text
get_named_type_61:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_type_61__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_type_61__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # $1.1: @List = load_struct_member(self.1, named_types)
  .loc 1 1523 20
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: name.1:rsi $1.1:rax 
  # named_types.1: @List_Iterator = call(create_iterator.319, $1.1)
  .loc 1 1523 20
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_319
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-8] named_types.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__get_named_type_61__2:
  # $3.1: Boolean = call(has_next.322, named_types.1)
  .loc 1 1524 12
  mov rdi, [rbp-16]
  call has_next_322
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__get_named_type_61__4
.LABEL__get_named_type_61__3:
  # named_type.1: @IR_Type = call(next.323, named_types.1)
  .loc 1 1525 23
  mov rdi, [rbp-16]
  call next_323
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:rax 
  # $6.1: @String = load_struct_member(named_type.1, name)
  .loc 1 1526 25
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:rax $6.1:rbx 
  # $7.1: Boolean = call(equals.335, name.1, $6.1)
  .loc 1 1526 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call equals_335
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:[rbp-24] $7.1:rax 
  # jump($7.1, block.5, block.2)
  test al, al
  jz .LABEL__get_named_type_61__2
.LABEL__get_named_type_61__5:
  # return(named_type.1)
  .loc 1 1527 13
  mov rax, [rbp-24]
  jmp .LABEL__get_named_type_61__end
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:[rbp-24] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] named_type.1:[rbp-24] 
  # [discarded value]: named_type.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
.LABEL__get_named_type_61__4:
  # return(null)
  .loc 1 1530 5
  xor rax, rax
  jmp .LABEL__get_named_type_61__end
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [discarded value]: name.1
  # [discarded value]: named_types.1
  # [live values]: 
.LABEL__get_named_type_61__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_type_61__stack_frame_size: .word 32

  .loc 1 1533 1
  .text
add_variable_62:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_variable_62__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_variable_62__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 1 1534 5
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: variable.1:rsi $1.1:rax 
  # $2.1: @List = load_struct_member($1.1, variables)
  .loc 1 1534 5
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: variable.1:rsi $2.1:rbx 
  # call(prepend.309, $2.1, variable.1)
  .loc 1 1534 5
  mov rdi, rbx
  mov [rbp-8], rsi
  call prepend_309
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-8] 
  # return(variable.1)
  .loc 1 1535 5
  mov rax, [rbp-8]
  jmp .LABEL__add_variable_62__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__add_variable_62__end:
  mov rsp, rbp
  pop rbp
  ret

add_variable_62__stack_frame_size: .word 16

  .loc 1 1538 1
  .text
get_variable_63:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_63__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_63__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # context.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 1 1539 16
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: name.1:rsi context.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_variable_63__2:
  # context.2: @IR_Builder_Context = phi(context.1, context.4)
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] 
  # $2.1: @List = load_struct_member(context.2, variables)
  .loc 1 1541 22
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] $2.1:rax 
  # variables.1: @List_Iterator = call(create_iterator.319, $2.1)
  .loc 1 1541 22
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__get_variable_63__4:
  # $4.1: Boolean = call(has_next.322, variables.1)
  .loc 1 1542 16
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__get_variable_63__6
.LABEL__get_variable_63__5:
  # variable.1: @IR_Variable = call(next.323, variables.1)
  .loc 1 1543 25
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:rax 
  # $7.1: @String = load_struct_member(variable.1, name)
  .loc 1 1544 29
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:rax $7.1:rbx 
  # $8.1: Boolean = call(equals.335, name.1, $7.1)
  .loc 1 1544 17
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call equals_335
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.7, block.4)
  test al, al
  jz .LABEL__get_variable_63__4
.LABEL__get_variable_63__7:
  # return(variable.1)
  .loc 1 1545 17
  mov rax, [rbp-32]
  jmp .LABEL__get_variable_63__end
  # [discarded value]: $8.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:[rbp-32] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] variable.1:[rbp-32] 
  # [discarded value]: variable.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
.LABEL__get_variable_63__6:
  # context.4: @IR_Builder_Context = load_struct_member(context.2, parent)
  .loc 1 1548 19
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:rax[rbp-8] 
  # $10.1: Boolean = context.4 == null
  .loc 1 1549 13
  cmp rax, 0
  sete bl
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:rax[rbp-8] $10.1:rbx 
  # jump($10.1, block.10, block.2)
  test bl, bl
  mov [rbp-8], rax
  jz .LABEL__get_variable_63__2
.LABEL__get_variable_63__10:
  # return(null)
  .loc 1 1550 13
  xor rax, rax
  jmp .LABEL__get_variable_63__end
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] context.4:[rbp-8] 
  # [discarded value]: context.4
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [discarded value]: context.2
  # [discarded value]: variables.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [discarded value]: name.1
  # [discarded value]: context.1
  # [live values]: 
.LABEL__get_variable_63__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_63__stack_frame_size: .word 32

  .loc 1 1555 1
  .text
get_variable_value_64:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_64__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_64__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # IR_Global_Variable.5: @Object_Type = load_variable(IR_Global_Variable)
  lea rax, IR_Global_Variable[rip]
  # [live values]: self.1:rdi variable.1:rsi IR_Global_Variable.5:rax 
  # $1.1: Boolean = call(is.325, variable.1, IR_Global_Variable.5)
  .loc 1 1556 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Global_Variable.5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__get_variable_value_64__3
.LABEL__get_variable_value_64__2:
  # $2.1: @IR_Variable_Value = call(create_variable_value.65, self.1, variable.1)
  .loc 1 1557 64
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  call create_variable_value_65
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction.163, $2.1)
  .loc 1 1557 28
  mov rdi, rax
  call create_ir_load_variable_instruction_163
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $3.1:rax 
  # $5.1: @IR_Variable_Value = call(append.71, self.1, $3.1, null)
  .loc 1 1557 16
  mov rdi, [rbp-8]
  mov rsi, rax
  xor rdx, rdx
  call append_71
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $5.1:rax 
  # return($5.1)
  .loc 1 1557 9
  jmp .LABEL__get_variable_value_64__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
.LABEL__get_variable_value_64__3:
  # $6.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1559 34
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $6.1:rax 
  # current_block_instruction.1: @IR_Instruction = load_struct_member($6.1, last_instruction)
  .loc 1 1559 34
  mov rbx, rax
  add rbx, 40
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:rbx 
  # jump(block.5)
  mov [rbp-24], rbx
.LABEL__get_variable_value_64__5:
  # current_block_instruction.2: @IR_Instruction = phi(current_block_instruction.1, current_block_instruction.7)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
  # $8.1: Boolean = current_block_instruction.2 != null
  .loc 1 1560 12
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $8.1:rax 
  # jump($8.1, block.6, block.7)
  test al, al
  jz .LABEL__get_variable_value_64__7
.LABEL__get_variable_value_64__6:
  # $9.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  .loc 1 1561 13
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $9.1:rax 
  # $11.1: Boolean = $9.1 != null
  .loc 1 1561 13
  cmp rax, 0
  setne bl
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:rbx 
  # jump($11.1, block.8, block.9)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__get_variable_value_64__9
.LABEL__get_variable_value_64__8:
  # $12.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  .loc 1 1561 63
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $12.1:rax 
  # $13.1: @IR_Variable = load_struct_member($12.1, variable)
  .loc 1 1561 63
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $13.1:rbx 
  # $11.2: Boolean = $13.1 == variable.1
  .loc 1 1561 63
  cmp rbx, QWORD PTR [rbp-16]
  sete al
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:rax[rbp-25] 
  # jump(block.9)
  mov [rbp-25], al
.LABEL__get_variable_value_64__9:
  # $11.3: Boolean = phi($11.1, $11.2)
  .loc 1 1561 13
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] $11.3:[rbp-25] 
  # jump($11.3, block.10, block.11)
  mov al, [rbp-25]
  test al, al
  jz .LABEL__get_variable_value_64__11
.LABEL__get_variable_value_64__10:
  # $15.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  .loc 1 1562 20
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $11.3
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] $15.1:rax 
  # return($15.1)
  .loc 1 1562 13
  jmp .LABEL__get_variable_value_64__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
.LABEL__get_variable_value_64__11:
  # current_block_instruction.7: @IR_Instruction = load_struct_member(current_block_instruction.2, prev_instruction)
  .loc 1 1564 37
  mov rax, [rbp-24]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] current_block_instruction.7:rax[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rax
  jmp .LABEL__get_variable_value_64__5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] current_block_instruction.7:[rbp-24] 
  # [discarded value]: current_block_instruction.7
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] $11.2:[rbp-25] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $11.1:[rbp-25] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
.LABEL__get_variable_value_64__7:
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1566 20
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $17.1:rax 
  # $18.1: @IR_Variable_Value = call(create_variable_value.65, self.1, variable.1)
  .loc 1 1566 73
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov [rbp-32], rax
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $17.1:[rbp-32] $18.1:rax 
  # $19.1: @IR_Phi_Instruction = call(create_ir_phi_instruction.180, $18.1)
  .loc 1 1566 47
  mov rdi, rax
  call create_ir_phi_instruction_180
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $17.1:[rbp-32] $19.1:rax 
  # instruction.1: @IR_Instruction = call(prepend.144, $17.1, $19.1)
  .loc 1 1566 20
  mov rdi, [rbp-32]
  mov rsi, rax
  call prepend_144
  # [discarded value]: $17.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] instruction.1:rax 
  # $21.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 1567 12
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] $21.1:rbx 
  # return($21.1)
  .loc 1 1567 5
  mov rax, rbx
  jmp .LABEL__get_variable_value_64__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] current_block_instruction.2:[rbp-24] 
  # [discarded value]: current_block_instruction.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] current_block_instruction.1:[rbp-24] 
  # [discarded value]: current_block_instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__get_variable_value_64__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_64__stack_frame_size: .word 32

  .loc 1 1570 1
  .text
create_variable_value_65:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_variable_value_65__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_variable_value_65__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: variable.1:rsi 
  # $1.1: @IR_Variable_Value = new(IR_Variable_Value)
  .loc 1 1571 12
  mov [rbp-8], rsi
  mov rdi, 40
  call malloc
  lea rbx, IR_Variable_Value[rip]
  mov [rax], rbx
  # [live values]: variable.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Variable_Value = call(init.142, $1.1, variable.1)
  .loc 1 1571 12
  mov rdi, rax
  mov rsi, [rbp-8]
  call init_142
  # [discarded value]: variable.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 1571 5
  jmp .LABEL__create_variable_value_65__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_variable_value_65__end:
  mov rsp, rbp
  pop rbp
  ret

create_variable_value_65__stack_frame_size: .word 16

  .loc 1 1574 1
  .text
get_named_function_66:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_66__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_66__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  # $1.1: @String = load_struct_member(name.1, lexeme)
  .loc 1 1575 41
  mov rax, rsi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx $1.1:rax 
  # function.1: @IR_Function = call(get_named_function.67, self.1, $1.1, argument_types.1)
  .loc 1 1575 17
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdx
  call get_named_function_67
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax 
  # $3.1: Boolean = function.1 == null
  .loc 1 1576 9
  cmp rax, 0
  sete bl
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__get_named_function_66__3
.LABEL__get_named_function_66__2:
  # $4.1: @String = call(clone.329, "Undefined function: ")
  .loc 1 1577 20
  lea rdi, .LABEL__string_165[rip] # "Undefined function: "
  call clone_329
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $4.1:rax 
  # $5.1: @String = load_struct_member(name.1, lexeme)
  .loc 1 1577 57
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $4.1:rax $5.1:rbx 
  # $6.1: @String = call(append.332, $4.1, $5.1)
  .loc 1 1577 20
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $6.1:rax 
  # message.1: @String = call(append.332, $6.1, " :: (")
  .loc 1 1577 20
  mov rdi, rax
  lea rsi, .LABEL__string_166[rip] # " :: ("
  call append_332
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:rax 
  # argument_types.1: @List_Iterator = call(create_iterator.319, argument_types.1)
  .loc 1 1578 27
  mov rdi, [rbp-16]
  mov [rbp-32], rax
  call create_iterator_319
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:rax 
  # jump(block.4)
  mov [rbp-40], rax
.LABEL__get_named_function_66__4:
  # $9.1: Boolean = call(has_next.322, argument_types.1)
  .loc 1 1579 16
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__get_named_function_66__6
.LABEL__get_named_function_66__5:
  # argument_type.1: @IR_Type = call(next.323, argument_types.1)
  .loc 1 1580 30
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] argument_type.1:rax 
  # $12.1: @String = load_struct_member(argument_type.1, name)
  .loc 1 1581 28
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $12.1:rbx 
  # $13.1: @String = call(append.332, message.1, $12.1)
  .loc 1 1581 13
  mov rdi, [rbp-32]
  mov rsi, rbx
  call append_332
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # $14.1: Boolean = call(has_next.322, argument_types.1)
  .loc 1 1582 17
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $14.1:rax 
  # jump($14.1, block.7, block.4)
  test al, al
  jz .LABEL__get_named_function_66__4
.LABEL__get_named_function_66__7:
  # $15.1: @String = call(append.332, message.1, ", ")
  .loc 1 1583 17
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_36[rip] # ", "
  call append_332
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # jump(block.4)
  jmp .LABEL__get_named_function_66__4
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
.LABEL__get_named_function_66__6:
  # $16.1: @String = call(append.332, message.1, ")")
  .loc 1 1586 9
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_167[rip] # ")"
  call append_332
  # [discarded value]: $16.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # $17.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 1587 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] $17.1:rax 
  # call(abort.271, $17.1, message.1)
  .loc 1 1587 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call abort_271
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] message.1:[rbp-32] argument_types.1:[rbp-40] 
  # [discarded value]: message.1
  # [discarded value]: argument_types.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
.LABEL__get_named_function_66__3:
  # return(function.1)
  .loc 1 1589 5
  mov rax, [rbp-24]
  jmp .LABEL__get_named_function_66__end
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: name.1
  # [discarded value]: argument_types.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__get_named_function_66__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_66__stack_frame_size: .word 48

  .loc 1 1592 1
  .text
get_named_function_67:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_67__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_67__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  # function.1: @IR_Function = null
  .loc 1 1593 5
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx function.1:rax 
  # $1.1: @List = load_struct_member(self.1, named_functions)
  .loc 1 1594 24
  mov rbx, rdi
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: self.1
  # [live values]: name.1:rsi argument_types.1:rdx function.1:rax $1.1:rbx 
  # named_functions.1: @List_Iterator = call(create_iterator.319, $1.1)
  .loc 1 1594 24
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_319
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__get_named_function_67__2:
  # function.5: @IR_Function = phi(function.1, function.3, function.5)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # $3.1: Boolean = call(has_next.322, named_functions.1)
  .loc 1 1595 12
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__get_named_function_67__4
.LABEL__get_named_function_67__3:
  # named_function.1: @IR_Function = call(next.323, named_functions.1)
  .loc 1 1596 27
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax 
  # $6.1: @String = load_struct_member(named_function.1, name)
  .loc 1 1597 25
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:rax $6.1:rbx 
  # $7.1: Boolean = call(equals.335, name.1, $6.1)
  .loc 1 1597 13
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-40], rax
  call equals_335
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] $7.1:rax 
  # jump($7.1, block.5, block.2)
  test al, al
  jz .LABEL__get_named_function_67__2
.LABEL__get_named_function_67__5:
  # is_match.1: Boolean = true
  .loc 1 1598 13
  mov al, 1
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:rax 
  # argument_types.1: @List_Iterator = call(create_iterator.319, argument_types.1)
  .loc 1 1599 31
  mov rdi, [rbp-16]
  mov [rbp-41], al
  call create_iterator_319
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:rax 
  # $9.1: @List = load_struct_member(named_function.1, parameters)
  .loc 1 1600 42
  mov rbx, [rbp-40]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:rax $9.1:rbx 
  # named_function_parameters.1: @List_Iterator = call(create_iterator.319, $9.1)
  .loc 1 1600 42
  mov rdi, rbx
  mov [rbp-49], rax
  call create_iterator_319
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:rax 
  # jump(block.7)
  mov [rbp-57], rax
.LABEL__get_named_function_67__7:
  # $12.1: Boolean = call(has_next.322, argument_types.1)
  .loc 1 1601 20
  mov rdi, [rbp-49]
  call has_next_322
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:rax 
  # jump($12.1, block.10, block.11)
  test al, al
  mov [rbp-58], al
  jz .LABEL__get_named_function_67__11
.LABEL__get_named_function_67__10:
  # $12.2: Boolean = call(has_next.322, named_function_parameters.1)
  .loc 1 1601 49
  mov rdi, [rbp-57]
  call has_next_322
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:rax[rbp-58] 
  # jump(block.11)
  mov [rbp-58], al
.LABEL__get_named_function_67__11:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 1 1601 20
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] $12.3:[rbp-58] 
  # jump($12.3, block.8, block.9)
  mov al, [rbp-58]
  test al, al
  jz .LABEL__get_named_function_67__9
.LABEL__get_named_function_67__8:
  # argument_type.1: @IR_Type = call(next.323, argument_types.1)
  .loc 1 1602 34
  mov rdi, [rbp-49]
  call next_323
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] argument_type.1:rax $12.2:[rbp-58] 
  # named_function_parameter.1: @IR_Function_Parameter = call(next.323, named_function_parameters.1)
  .loc 1 1603 45
  mov rdi, [rbp-57]
  mov [rbp-66], rax
  call next_323
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] argument_type.1:[rbp-66] named_function_parameter.1:rax $12.2:[rbp-58] 
  # $18.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  .loc 1 1604 21
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] argument_type.1:[rbp-66] $18.1:rbx $12.2:[rbp-58] 
  # $19.1: Boolean = call(accepts.68, $18.1, argument_type.1)
  .loc 1 1604 21
  mov rdi, rbx
  mov rsi, [rbp-66]
  call accepts_68
  # [discarded value]: argument_type.1
  # [discarded value]: $18.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $19.1:rax $12.2:[rbp-58] 
  # $20.1: Boolean = $19.1 == false
  .loc 1 1604 21
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $20.1:rbx $12.2:[rbp-58] 
  # jump($20.1, block.12, block.7)
  test bl, bl
  jz .LABEL__get_named_function_67__7
.LABEL__get_named_function_67__12:
  # is_match.2: Boolean = false
  .loc 1 1605 21
  mov al, 0
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] is_match.2:rax[rbp-41] 
  # jump(block.9)
  mov [rbp-41], al
.LABEL__get_named_function_67__9:
  # $21.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-41]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:rax $12.2:[rbp-58] is_match.2:[rbp-41] 
  # jump($21.1, block.17, block.18)
  test al, al
  mov [rbp-59], al
  jz .LABEL__get_named_function_67__18
.LABEL__get_named_function_67__17:
  # $22.1: Boolean = call(has_next.322, argument_types.1)
  .loc 1 1609 29
  mov rdi, [rbp-49]
  call has_next_322
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $22.1:rax 
  # $21.2: Boolean = $22.1 == false
  .loc 1 1609 29
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:rbx[rbp-59] 
  # jump(block.18)
  mov [rbp-59], bl
.LABEL__get_named_function_67__18:
  # $24.1: Boolean = phi($21.1, $21.2)
  .loc 1 1609 17
  mov al, [rbp-59]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] $24.1:rax 
  # jump($24.1, block.15, block.16)
  test al, al
  mov [rbp-60], al
  jz .LABEL__get_named_function_67__16
.LABEL__get_named_function_67__15:
  # $25.1: Boolean = call(has_next.322, named_function_parameters.1)
  .loc 1 1609 67
  mov rdi, [rbp-57]
  call has_next_322
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $25.1:rax $21.2:[rbp-59] $24.1:[rbp-60] 
  # $24.2: Boolean = $25.1 == false
  .loc 1 1609 67
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:rbx[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # jump(block.16)
  mov [rbp-60], bl
.LABEL__get_named_function_67__16:
  # $24.3: Boolean = phi($24.1, $24.2)
  .loc 1 1609 17
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $24.3:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # jump($24.3, block.19, block.2)
  mov al, [rbp-60]
  test al, al
  jz .LABEL__get_named_function_67__2
.LABEL__get_named_function_67__19:
  # $27.1: Boolean = function.5 != null
  .loc 1 1610 21
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [discarded value]: $24.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] $27.1:rax 
  # jump($27.1, block.21, block.22)
  test al, al
  jz .LABEL__get_named_function_67__22
.LABEL__get_named_function_67__21:
  # call(abort.344, name.1)
  .loc 1 1611 21
  mov rdi, [rbp-24]
  call abort_344
  # [discarded value]: $27.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
.LABEL__get_named_function_67__22:
  # function.3: @IR_Function = named_function.1
  .loc 1 1613 17
  mov rax, [rbp-40]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] function.3:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_67__2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $24.2:[rbp-60] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [discarded value]: $24.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] $24.1:[rbp-60] 
  # [discarded value]: $24.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] $21.2:[rbp-59] 
  # [discarded value]: $21.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $21.1:[rbp-59] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [discarded value]: $21.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] is_match.2:[rbp-41] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] $12.2:[rbp-58] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] $12.1:[rbp-58] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] is_match.1:[rbp-41] argument_types.1:[rbp-49] named_function_parameters.1:[rbp-57] 
  # [discarded value]: is_match.1
  # [discarded value]: argument_types.1
  # [discarded value]: named_function_parameters.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] named_function.1:[rbp-40] 
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
.LABEL__get_named_function_67__4:
  # return(function.5)
  .loc 1 1617 5
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_67__end
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: name.1
  # [discarded value]: argument_types.1
  # [discarded value]: function.1
  # [discarded value]: named_functions.1
  # [live values]: 
.LABEL__get_named_function_67__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_67__stack_frame_size: .word 80

  .loc 1 1620 1
  .text
accepts_68:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_68__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_68__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Boolean = self.1 == other.1
  .loc 1 1621 9
  cmp rdi, rsi
  sete al
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__accepts_68__3
.LABEL__accepts_68__2:
  # return(true)
  .loc 1 1622 9
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
.LABEL__accepts_68__3:
  # IR_Pointer_Type.6: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] IR_Pointer_Type.6:rax 
  # $2.1: Boolean = call(is.325, self.1, IR_Pointer_Type.6)
  .loc 1 1624 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Pointer_Type.6
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.5, block.6)
  test al, al
  jz .LABEL__accepts_68__6
.LABEL__accepts_68__5:
  # self.1: @IR_Pointer_Type = self.1
  .loc 1 1625 17
  mov rax, [rbp-16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:rax 
  # $4.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 1 1626 13
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:rax $4.1:rbx 
  # IR_Pointer_Type.7: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:rax $4.1:rbx IR_Pointer_Type.7:r15 
  # $5.1: Boolean = call(is.325, $4.1, IR_Pointer_Type.7)
  .loc 1 1626 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call is_325
  # [discarded value]: $4.1
  # [discarded value]: IR_Pointer_Type.7
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.7, block.8)
  test al, al
  jz .LABEL__accepts_68__8
.LABEL__accepts_68__7:
  # stop.1: Boolean = true
  .loc 1 1627 13
  mov al, 1
  # [discarded value]: $5.1
  # [discarded value]: stop.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
  # jump(block.8)
.LABEL__accepts_68__8:
  # IR_Pointer_Type.8: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] IR_Pointer_Type.8:rax 
  # $6.1: Boolean = call(is.325, other.1, IR_Pointer_Type.8)
  .loc 1 1629 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Pointer_Type.8
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] $6.1:rax 
  # jump($6.1, block.9, block.10)
  test al, al
  jz .LABEL__accepts_68__10
.LABEL__accepts_68__9:
  # other.1: @IR_Pointer_Type = other.1
  .loc 1 1630 22
  mov rax, [rbp-8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:rax 
  # $8.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 1 1631 17
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:rax $8.1:rbx 
  # $9.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 1 1631 38
  mov r15, rax
  add r15, 16
  mov r15, [r15]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:rax $8.1:rbx $9.1:r15 
  # $10.1: Boolean = $8.1 == $9.1
  .loc 1 1631 17
  cmp rbx, r15
  sete r14b
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:rax $10.1:r14 
  # jump($10.1, block.11, block.12)
  test r14b, r14b
  mov [rbp-32], rax
  jz .LABEL__accepts_68__12
.LABEL__accepts_68__11:
  # return(true)
  .loc 1 1632 17
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] 
.LABEL__accepts_68__12:
  # $11.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 1 1634 17
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $11.1:rax 
  # IR_Any_Type.2: @Object_Type = load_variable(IR_Any_Type)
  lea rbx, IR_Any_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $11.1:rax IR_Any_Type.2:rbx 
  # $12.1: Boolean = call(is.325, $11.1, IR_Any_Type.2)
  .loc 1 1634 17
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $11.1
  # [discarded value]: IR_Any_Type.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $12.1:rax 
  # jump($12.1, block.14, block.15)
  test al, al
  jz .LABEL__accepts_68__15
.LABEL__accepts_68__14:
  # return(true)
  .loc 1 1635 17
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] 
.LABEL__accepts_68__15:
  # $13.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 1 1637 17
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $13.1:rax 
  # IR_Struct_Type.5: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $13.1:rax IR_Struct_Type.5:rbx 
  # $15.1: Boolean = call(is.325, $13.1, IR_Struct_Type.5)
  .loc 1 1637 17
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $13.1
  # [discarded value]: IR_Struct_Type.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:rax 
  # jump($15.1, block.17, block.18)
  test al, al
  mov [rbp-33], al
  jz .LABEL__accepts_68__18
.LABEL__accepts_68__17:
  # $16.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 1 1637 57
  mov rax, [rbp-32]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $16.1:rax 
  # IR_Struct_Type.6: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $16.1:rax IR_Struct_Type.6:rbx 
  # $15.2: Boolean = call(is.325, $16.1, IR_Struct_Type.6)
  .loc 1 1637 57
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $16.1
  # [discarded value]: IR_Struct_Type.6
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:rax[rbp-33] 
  # jump(block.18)
  mov [rbp-33], al
.LABEL__accepts_68__18:
  # $15.3: Boolean = phi($15.1, $15.2)
  .loc 1 1637 17
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $15.3:[rbp-33] 
  # jump($15.3, block.19, block.20)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__accepts_68__20
.LABEL__accepts_68__19:
  # $19.1: @IR_Struct_Type = load_struct_member(self.1, pointed_type)
  .loc 1 1638 25
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $15.3
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $19.1:rax 
  # $21.1: @IR_Struct_Type = load_struct_member(other.1, pointed_type)
  .loc 1 1638 76
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $19.1:rax $21.1:rbx 
  # $22.1: Boolean = call(is_base_type.138, $19.1, $21.1)
  .loc 1 1638 25
  mov rdi, rax
  mov rsi, rbx
  call is_base_type_138
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $22.1:rax 
  # return($22.1)
  .loc 1 1638 17
  jmp .LABEL__accepts_68__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] 
.LABEL__accepts_68__20:
  # $23.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 1 1640 20
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $23.1:rax 
  # $24.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 1 1640 46
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $23.1:rax $24.1:rbx 
  # $25.1: Boolean = call(accepts.68, $23.1, $24.1)
  .loc 1 1640 20
  mov rdi, rax
  mov rsi, rbx
  call accepts_68
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] $25.1:rax 
  # return($25.1)
  .loc 1 1640 13
  jmp .LABEL__accepts_68__end
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] $15.2:[rbp-33] 
  # [discarded value]: $15.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] $15.1:[rbp-33] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] other.1:[rbp-32] 
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
.LABEL__accepts_68__10:
  # IR_Null_Type.3: @Object_Type = load_variable(IR_Null_Type)
  lea rax, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] IR_Null_Type.3:rax 
  # $26.1: Boolean = call(is.325, other.1, IR_Null_Type.3)
  .loc 1 1642 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Null_Type.3
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] $26.1:rax 
  # jump($26.1, block.23, block.24)
  test al, al
  jz .LABEL__accepts_68__24
.LABEL__accepts_68__23:
  # return(true)
  .loc 1 1643 13
  mov al, 1
  jmp .LABEL__accepts_68__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
.LABEL__accepts_68__24:
  # return(false)
  .loc 1 1645 9
  mov al, 0
  jmp .LABEL__accepts_68__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] self.1:[rbp-24] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
.LABEL__accepts_68__6:
  # return(false)
  .loc 1 1647 5
  mov al, 0
  jmp .LABEL__accepts_68__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__accepts_68__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_68__stack_frame_size: .word 48

  .loc 1 1650 1
  .text
create_temp_variable_69:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_variable_69__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_variable_69__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @IR_Variable = new(IR_Variable)
  .loc 1 1651 12
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, IR_Variable[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:rax 
  # $2.1: @String = call(clone.329, "$")
  .loc 1 1651 33
  lea rdi, .LABEL__string_168[rip] # "$"
  mov [rbp-24], rax
  call clone_329
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] $1.1:[rbp-24] $2.1:rax 
  # $3.1: @Counter = load_struct_member(self.1, counter)
  .loc 1 1651 51
  mov rbx, [rbp-16]
  add rbx, 48
  mov rbx, [rbx]
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-8] $1.1:[rbp-24] $2.1:rax $3.1:rbx 
  # $4.1: Int = call(next.129, $3.1)
  .loc 1 1651 51
  mov rdi, rbx
  mov [rbp-32], rax
  call next_129
  # [discarded value]: $3.1
  # [live values]: type.1:[rbp-8] $1.1:[rbp-24] $2.1:[rbp-32] $4.1:rax 
  # $5.1: @String = call(append.331, $2.1, $4.1)
  .loc 1 1651 33
  mov rdi, [rbp-32]
  mov rsi, rax
  call append_331
  # [discarded value]: $2.1
  # [discarded value]: $4.1
  # [live values]: type.1:[rbp-8] $1.1:[rbp-24] $5.1:rax 
  # $6.1: @IR_Variable = call(init.150, $1.1, $5.1, type.1)
  .loc 1 1651 12
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-8]
  call init_150
  # [discarded value]: type.1
  # [discarded value]: $1.1
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  # return($6.1)
  .loc 1 1651 5
  jmp .LABEL__create_temp_variable_69__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__create_temp_variable_69__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_variable_69__stack_frame_size: .word 32

  .loc 1 1654 1
  .text
create_temp_value_70:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_value_70__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_value_70__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @IR_Variable = call(create_temp_variable.69, self.1, type.1)
  .loc 1 1655 39
  mov [rbp-8], rdi
  call create_temp_variable_69
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # $2.1: @IR_Variable_Value = call(create_variable_value.65, self.1, $1.1)
  .loc 1 1655 12
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_variable_value_65
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 1655 5
  jmp .LABEL__create_temp_value_70__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_temp_value_70__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_value_70__stack_frame_size: .word 16

  .loc 1 1658 1
  .text
append_71:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_71__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_71__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi instruction.1:rsi location.1:rdx 
  # store_struct_member(instruction.1, location, location.1)
  .loc 1 1659 5
  mov rax, rsi
  add rax, 8
  mov QWORD PTR [rax], rdx
  # [discarded value]: location.1
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1660 5
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: instruction.1:rsi $1.1:rax 
  # $2.1: @IR_Instruction = call(append.145, $1.1, instruction.1)
  .loc 1 1660 5
  mov rdi, rax
  mov [rbp-8], rsi
  call append_145
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-8] 
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 1661 12
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 1661 5
  jmp .LABEL__append_71__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__append_71__end:
  mov rsp, rbp
  pop rbp
  ret

append_71__stack_frame_size: .word 16

  .loc 1 1664 1
  .text
build_72:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_72__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_72__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 1665 14
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @List = load_struct_member($1.1, types)
  .loc 1 1665 14
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # types.1: @List_Iterator = call(create_iterator.319, $2.1)
  .loc 1 1665 14
  mov [rbp-8], rdi
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__build_72__2:
  # $4.1: Boolean = call(has_next.322, types.1)
  .loc 1 1666 12
  mov rdi, [rbp-16]
  call has_next_322
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__build_72__4
.LABEL__build_72__3:
  # statement.1: @AST_Statement = call(next.323, types.1)
  .loc 1 1667 22
  mov rdi, [rbp-16]
  call next_323
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] statement.1:rax 
  # $7.1: @IR_Type = call(convert_type_statement.73, self.1, statement.1)
  .loc 1 1668 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_type_statement_73
  # [discarded value]: statement.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # jump(block.2)
  jmp .LABEL__build_72__2
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
.LABEL__build_72__4:
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 1671 25
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $8.1:rax 
  # $9.1: @List = load_struct_member($8.1, global_variables)
  .loc 1 1671 25
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $9.1:rbx 
  # global_variables.1: @List_Iterator = call(create_iterator.319, $9.1)
  .loc 1 1671 25
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__build_72__5:
  # $11.1: Boolean = call(has_next.322, global_variables.1)
  .loc 1 1672 12
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.6, block.7)
  test al, al
  jz .LABEL__build_72__7
.LABEL__build_72__6:
  # variable_statement.1: @AST_Variable_Statement = call(next.323, global_variables.1)
  .loc 1 1673 31
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] variable_statement.1:rax 
  # call(create_global_variable.79, self.1, variable_statement.1)
  .loc 1 1674 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_global_variable_79
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # jump(block.5)
  jmp .LABEL__build_72__5
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
.LABEL__build_72__7:
  # $14.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 1677 18
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] $14.1:rax 
  # $15.1: @List = load_struct_member($14.1, functions)
  .loc 1 1677 18
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] $15.1:rbx 
  # functions.1: @List_Iterator = call(create_iterator.319, $15.1)
  .loc 1 1677 18
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:rax 
  # jump(block.8)
  mov [rbp-32], rax
.LABEL__build_72__8:
  # $17.1: Boolean = call(has_next.322, functions.1)
  .loc 1 1678 12
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] $17.1:rax 
  # jump($17.1, block.9, block.10)
  test al, al
  jz .LABEL__build_72__10
.LABEL__build_72__9:
  # function_statement.1: @AST_Function_Statement = call(next.323, functions.1)
  .loc 1 1679 31
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] function_statement.1:rax 
  # $20.1: @IR_Function = call(create_function.80, self.1, function_statement.1)
  .loc 1 1680 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_function_80
  # [discarded value]: function_statement.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # jump(block.8)
  jmp .LABEL__build_72__8
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
.LABEL__build_72__10:
  # $21.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 1683 18
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] $21.1:rax 
  # $22.1: @List = load_struct_member($21.1, functions)
  .loc 1 1683 18
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] $22.1:rbx 
  # functions.1: @List_Iterator = call(create_iterator.319, $22.1)
  .loc 1 1683 18
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:rax 
  # jump(block.11)
  mov [rbp-40], rax
.LABEL__build_72__11:
  # $24.1: Boolean = call(has_next.322, functions.1)
  .loc 1 1684 12
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] $24.1:rax 
  # jump($24.1, block.12, block.13)
  test al, al
  jz .LABEL__build_72__13
.LABEL__build_72__12:
  # function_statement.1: @AST_Function_Statement = call(next.323, functions.1)
  .loc 1 1685 31
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] function_statement.1:rax 
  # call(build_function.81, self.1, function_statement.1)
  .loc 1 1686 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call build_function_81
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # jump(block.11)
  jmp .LABEL__build_72__11
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
.LABEL__build_72__13:
  # return()
  jmp .LABEL__build_72__end
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] functions.1:[rbp-40] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] functions.1:[rbp-32] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] global_variables.1:[rbp-24] 
  # [discarded value]: global_variables.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: types.1
  # [live values]: 
.LABEL__build_72__end:
  mov rsp, rbp
  pop rbp
  ret

build_72__stack_frame_size: .word 48

  .loc 1 1690 1
  .text
convert_type_statement_73:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_type_statement_73__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_type_statement_73__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # AST_Struct_Statement.2: @Object_Type = load_variable(AST_Struct_Statement)
  lea rax, AST_Struct_Statement[rip]
  # [live values]: self.1:rdi statement.1:rsi AST_Struct_Statement.2:rax 
  # $1.1: Boolean = call(is.325, statement.1, AST_Struct_Statement.2)
  .loc 1 1691 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Struct_Statement.2
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_type_statement_73__3
.LABEL__convert_type_statement_73__2:
  # $2.1: @AST_Struct_Statement = statement.1
  .loc 1 1692 46
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Type = call(convert_struct_statement.74, self.1, $2.1)
  .loc 1 1692 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_struct_statement_74
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 1 1692 9
  jmp .LABEL__convert_type_statement_73__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
.LABEL__convert_type_statement_73__3:
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 1694 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $4.1:rax 
  # $5.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 1 1694 31
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $4.1:rax $5.1:rbx 
  # call(abort.127, $4.1, $5.1)
  .loc 1 1694 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_type_statement_73__end:
  mov rsp, rbp
  pop rbp
  ret

convert_type_statement_73__stack_frame_size: .word 16

  .loc 1 1697 1
  .text
convert_struct_statement_74:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_statement_74__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_statement_74__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_statement.1: @AST_Struct_Statement = load_variable(struct_statement)
  # [live values]: self.1:rdi struct_statement.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  .loc 1 1698 20
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi struct_statement.1:rsi $1.1:rax 
  # struct_name.1: @String = load_struct_member($1.1, lexeme)
  .loc 1 1698 20
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi struct_statement.1:rsi struct_name.1:rbx 
  # type.1: @IR_Type = call(get_named_type.61, self.1, struct_name.1)
  .loc 1 1699 13
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  call get_named_type_61
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax 
  # $4.1: Boolean = type.1 != null
  .loc 1 1700 9
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__convert_struct_statement_74__3
.LABEL__convert_struct_statement_74__2:
  # IR_Struct_Type.7: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] IR_Struct_Type.7:rax 
  # $6.1: Boolean = call(is.325, type.1, IR_Struct_Type.7)
  .loc 1 1701 13
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Struct_Type.7
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:rax 
  # jump($6.1, block.4, block.5)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_struct_statement_74__5
.LABEL__convert_struct_statement_74__4:
  # $7.1: @IR_Struct_Type = type.1
  .loc 1 1701 41
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $7.1:rax 
  # $8.1: @AST_Struct_Statement = load_struct_member($7.1, statement)
  .loc 1 1701 41
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $8.1:rbx 
  # $6.2: Boolean = $8.1 == struct_statement.1
  .loc 1 1701 41
  cmp rbx, QWORD PTR [rbp-8]
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:rax[rbp-33] 
  # jump(block.5)
  mov [rbp-33], al
.LABEL__convert_struct_statement_74__5:
  # $6.3: Boolean = phi($6.1, $6.2)
  .loc 1 1701 13
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $6.3:[rbp-33] 
  # jump($6.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_struct_statement_74__7
.LABEL__convert_struct_statement_74__6:
  # return(type.1)
  .loc 1 1702 13
  mov rax, [rbp-32]
  jmp .LABEL__convert_struct_statement_74__end
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
.LABEL__convert_struct_statement_74__7:
  # $10.1: @Source_Location = load_struct_member(struct_statement.1, location)
  .loc 1 1704 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $10.1:rax 
  # $11.1: @String = call(clone.329, "Duplicate type declaration: ")
  .loc 1 1704 42
  lea rdi, .LABEL__string_169[rip] # "Duplicate type declaration: "
  mov [rbp-41], rax
  call clone_329
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $10.1:[rbp-41] $11.1:rax 
  # $12.1: @String = call(append.332, $11.1, struct_name.1)
  .loc 1 1704 42
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_332
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] $10.1:[rbp-41] $12.1:rax 
  # call(abort.271, $10.1, $12.1)
  .loc 1 1704 9
  mov rdi, [rbp-41]
  mov rsi, rax
  call abort_271
  # [discarded value]: $10.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] $6.2:[rbp-33] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
.LABEL__convert_struct_statement_74__3:
  # type.1: @IR_Struct_Type = call(create_ir_struct_type.135, struct_name.1, struct_statement.1)
  .loc 1 1706 13
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_ir_struct_type_135
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:rax 
  # $14.1: @List = load_struct_member(self.1, named_types)
  .loc 1 1707 5
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:rax $14.1:rbx 
  # call(append.308, $14.1, type.1)
  .loc 1 1707 5
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-40], rax
  call append_308
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] 
  # $15.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  .loc 1 1708 9
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] $15.1:rax 
  # $16.1: Boolean = $15.1 != null
  .loc 1 1708 9
  cmp rax, 0
  setne bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] $16.1:rbx 
  # jump($16.1, block.9, block.10)
  test bl, bl
  jz .LABEL__convert_struct_statement_74__10
.LABEL__convert_struct_statement_74__9:
  # $17.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  .loc 1 1709 46
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] $17.1:rax 
  # base_type.1: @IR_Type = call(convert_value_type.75, self.1, $17.1)
  .loc 1 1709 22
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:rax 
  # IR_Struct_Type.8: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:rax IR_Struct_Type.8:rbx 
  # $19.1: Boolean = call(is.325, base_type.1, IR_Struct_Type.8)
  .loc 1 1710 14
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_325
  # [discarded value]: IR_Struct_Type.8
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $19.1:rax 
  # $20.1: Boolean = $19.1 == false
  .loc 1 1710 14
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $20.1:rbx 
  # jump($20.1, block.11, block.12)
  test bl, bl
  jz .LABEL__convert_struct_statement_74__12
.LABEL__convert_struct_statement_74__11:
  # $21.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  .loc 1 1711 19
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $21.1:rax 
  # $22.1: @Source_Location = load_struct_member($21.1, location)
  .loc 1 1711 19
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $22.1:rbx 
  # call(abort.271, $22.1, "Not a struct type.")
  .loc 1 1711 13
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "Not a struct type."
  call abort_271
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
.LABEL__convert_struct_statement_74__12:
  # $23.1: @IR_Struct_Type = base_type.1
  .loc 1 1713 26
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $23.1:rax 
  # store_struct_member(type.1, base_type, $23.1)
  .loc 1 1713 9
  mov rbx, [rbp-40]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # jump(block.10)
.LABEL__convert_struct_statement_74__10:
  # $24.1: @List = load_struct_member(struct_statement.1, members)
  .loc 1 1715 9
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $24.1:rax 
  # $25.1: Boolean = $24.1 != null
  .loc 1 1715 9
  cmp rax, 0
  setne bl
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $25.1:rbx 
  # jump($25.1, block.13, block.14)
  test bl, bl
  jz .LABEL__convert_struct_statement_74__14
.LABEL__convert_struct_statement_74__13:
  # $26.1: @List = load_struct_member(struct_statement.1, members)
  .loc 1 1716 27
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] $26.1:rax 
  # struct_members.1: @List_Iterator = call(create_iterator.319, $26.1)
  .loc 1 1716 27
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:rax 
  # jump(block.15)
  mov [rbp-56], rax
.LABEL__convert_struct_statement_74__15:
  # $28.1: Boolean = call(has_next.322, struct_members.1)
  .loc 1 1717 16
  mov rdi, [rbp-56]
  call has_next_322
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $28.1:rax 
  # jump($28.1, block.16, block.14)
  test al, al
  jz .LABEL__convert_struct_statement_74__14
.LABEL__convert_struct_statement_74__16:
  # struct_member.1: @AST_Struct_Member = call(next.323, struct_members.1)
  .loc 1 1718 30
  mov rdi, [rbp-56]
  call next_323
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member.1:rax 
  # $31.1: @Identifier_Token = load_struct_member(struct_member.1, name)
  .loc 1 1719 35
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member.1:rax $31.1:rbx 
  # struct_member_name.1: @String = load_struct_member($31.1, lexeme)
  .loc 1 1719 35
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member.1:rax struct_member_name.1:r15 
  # $33.1: @AST_Type = load_struct_member(struct_member.1, type)
  .loc 1 1720 59
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: struct_member.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member_name.1:r15 $33.1:rbx 
  # struct_member_type.1: @IR_Type = call(convert_value_type.75, self.1, $33.1)
  .loc 1 1720 35
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-64], r15
  call convert_value_type_75
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] struct_member_name.1:[rbp-64] struct_member_type.1:rax 
  # $35.1: @IR_Struct_Type_Member = call(add_member.136, type.1, struct_member_name.1, struct_member_type.1)
  .loc 1 1721 13
  mov rdi, [rbp-40]
  mov rsi, [rbp-64]
  mov rdx, rax
  call add_member_136
  # [discarded value]: struct_member_name.1
  # [discarded value]: struct_member_type.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # jump(block.15)
  jmp .LABEL__convert_struct_statement_74__15
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
.LABEL__convert_struct_statement_74__14:
  # $36.1: Boolean = call(is_object_type.139, type.1)
  .loc 1 1724 9
  mov rdi, [rbp-40]
  call is_object_type_139
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $36.1:rax 
  # jump($36.1, block.18, block.19)
  test al, al
  jz .LABEL__convert_struct_statement_74__19
.LABEL__convert_struct_statement_74__18:
  # $37.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  .loc 1 1725 67
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $37.1:rax 
  # $38.1: @Identifier_Token = call(create_identifier_token.298, "Object_Type", null)
  .loc 1 1725 142
  lea rdi, .LABEL__string_60[rip] # "Object_Type"
  xor rsi, rsi
  mov [rbp-64], rax
  call create_identifier_token_298
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $37.1:[rbp-64] $38.1:rax 
  # $39.1: @AST_Type = call(create_ast_named_type.254, $38.1)
  .loc 1 1725 120
  mov rdi, rax
  call create_ast_named_type_254
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $37.1:[rbp-64] $39.1:rax 
  # $40.1: @AST_Pointer_Type = call(create_ast_pointer_type.255, null, $39.1)
  .loc 1 1725 90
  xor rdi, rdi
  mov rsi, rax
  call create_ast_pointer_type_255
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $37.1:[rbp-64] $40.1:rax 
  # $41.1: @AST_Variable_Statement = call(create_ast_variable_statement.250, $37.1, $40.1, null, false)
  .loc 1 1725 37
  mov rdi, [rbp-64]
  mov rsi, rax
  xor rdx, rdx
  mov cl, 0
  call create_ast_variable_statement_250
  # [discarded value]: $37.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] $41.1:rax 
  # call(create_global_variable.79, self.1, $41.1)
  .loc 1 1725 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_global_variable_79
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # jump(block.19)
.LABEL__convert_struct_statement_74__19:
  # return(type.1)
  .loc 1 1727 5
  mov rax, [rbp-40]
  jmp .LABEL__convert_struct_statement_74__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] struct_members.1:[rbp-56] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] base_type.1:[rbp-48] 
  # [discarded value]: base_type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] type.1:[rbp-40] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: struct_statement.1
  # [discarded value]: struct_name.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_struct_statement_74__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_statement_74__stack_frame_size: .word 64

  .loc 1 1730 1
  .text
convert_value_type_75:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_value_type_75__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_value_type_75__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # AST_Array_Type.2: @Object_Type = load_variable(AST_Array_Type)
  lea rax, AST_Array_Type[rip]
  # [live values]: self.1:rdi type.1:rsi AST_Array_Type.2:rax 
  # $1.1: Boolean = call(is.325, type.1, AST_Array_Type.2)
  .loc 1 1731 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Array_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_value_type_75__3
.LABEL__convert_value_type_75__2:
  # $2.1: @AST_Array_Type = type.1
  .loc 1 1732 40
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Type = call(convert_array_type.76, self.1, $2.1)
  .loc 1 1732 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_type_76
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 1 1732 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__3:
  # AST_Named_Type.2: @Object_Type = load_variable(AST_Named_Type)
  lea rax, AST_Named_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] AST_Named_Type.2:rax 
  # $4.1: Boolean = call(is.325, type.1, AST_Named_Type.2)
  .loc 1 1734 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Named_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_value_type_75__6
.LABEL__convert_value_type_75__5:
  # $5.1: @AST_Named_Type = type.1
  .loc 1 1735 40
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Type = call(convert_named_type.77, self.1, $5.1)
  .loc 1 1735 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_named_type_77
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 1 1735 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__6:
  # AST_Pointer_Type.2: @Object_Type = load_variable(AST_Pointer_Type)
  lea rax, AST_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] AST_Pointer_Type.2:rax 
  # $7.1: Boolean = call(is.325, type.1, AST_Pointer_Type.2)
  .loc 1 1737 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Pointer_Type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_value_type_75__9
.LABEL__convert_value_type_75__8:
  # $8.1: @AST_Pointer_Type = type.1
  .loc 1 1738 42
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Type = call(convert_pointer_type.78, self.1, $8.1)
  .loc 1 1738 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_pointer_type_78
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 1 1738 9
  jmp .LABEL__convert_value_type_75__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
.LABEL__convert_value_type_75__9:
  # $10.1: @Source_Location = load_struct_member(type.1, location)
  .loc 1 1740 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $10.1:rax 
  # $11.1: @Object_Type = load_struct_member(type.1, object_type)
  .loc 1 1740 26
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $10.1:rax $11.1:rbx 
  # call(abort.127, $10.1, $11.1)
  .loc 1 1740 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_value_type_75__end:
  mov rsp, rbp
  pop rbp
  ret

convert_value_type_75__stack_frame_size: .word 16

  .loc 1 1743 1
  .text
convert_array_type_76:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_type_76__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_type_76__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Array_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @AST_Type = load_struct_member(type.1, item_type)
  .loc 1 1744 57
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  # $2.1: @IR_Type = call(convert_value_type.75, self.1, $1.1)
  .loc 1 1744 33
  mov [rbp-8], rsi
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-8] $2.1:rax 
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 1 1744 74
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: type.1
  # [live values]: $2.1:rax $3.1:rbx 
  # $4.1: @IR_Type = call(create_ir_array_type.134, $2.1, $3.1)
  .loc 1 1744 12
  mov rdi, rax
  mov rsi, rbx
  call create_ir_array_type_134
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 1 1744 5
  jmp .LABEL__convert_array_type_76__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__convert_array_type_76__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_type_76__stack_frame_size: .word 16

  .loc 1 1747 1
  .text
convert_named_type_77:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_named_type_77__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_named_type_77__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Named_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # type_name.1: @Identifier_Token = load_struct_member(type.1, name)
  .loc 1 1748 18
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [discarded value]: type.1
  # [live values]: self.1:rdi type_name.1:rax 
  # $2.1: @String = load_struct_member(type_name.1, lexeme)
  .loc 1 1749 33
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:rdi type_name.1:rax $2.1:rbx 
  # type.1: @IR_Type = call(get_named_type.61, self.1, $2.1)
  .loc 1 1749 13
  mov rsi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdi
  call get_named_type_61
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax 
  # $4.1: Boolean = type.1 == null
  .loc 1 1750 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__convert_named_type_77__3
.LABEL__convert_named_type_77__2:
  # $5.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 1751 18
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $5.1:rax 
  # $6.1: @List = load_struct_member($5.1, types)
  .loc 1 1751 18
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $6.1:rbx 
  # types.1: @List_Iterator = call(create_iterator.319, $6.1)
  .loc 1 1751 18
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:rax 
  # jump(block.4)
  mov [rbp-32], rax
.LABEL__convert_named_type_77__4:
  # $8.1: Boolean = call(has_next.322, types.1)
  .loc 1 1752 16
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_named_type_77__6
.LABEL__convert_named_type_77__5:
  # statement.1: @AST_Statement = call(next.323, types.1)
  .loc 1 1753 26
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:rax 
  # AST_Struct_Statement.3: @Object_Type = load_variable(AST_Struct_Statement)
  lea rbx, AST_Struct_Statement[rip]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:rax AST_Struct_Statement.3:rbx 
  # $11.1: Boolean = call(is.325, statement.1, AST_Struct_Statement.3)
  .loc 1 1754 17
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-40], rax
  call is_325
  # [discarded value]: AST_Struct_Statement.3
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] $11.1:rax 
  # jump($11.1, block.7, block.9)
  test al, al
  jz .LABEL__convert_named_type_77__9
.LABEL__convert_named_type_77__7:
  # statement.1: @AST_Struct_Statement = statement.1
  .loc 1 1755 30
  mov rax, [rbp-40]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax 
  # $15.1: @Identifier_Token = load_struct_member(statement.1, name)
  .loc 1 1756 21
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax $15.1:rbx 
  # $16.1: @String = load_struct_member($15.1, lexeme)
  .loc 1 1756 21
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax $16.1:r15 
  # $17.1: @String = load_struct_member(type_name.1, lexeme)
  .loc 1 1756 50
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:rax $16.1:r15 $17.1:rbx 
  # $18.1: Boolean = call(equals.335, $16.1, $17.1)
  .loc 1 1756 21
  mov rdi, r15
  mov rsi, rbx
  mov [rbp-48], rax
  call equals_335
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] $18.1:rax 
  # jump($18.1, block.10, block.4)
  test al, al
  jz .LABEL__convert_named_type_77__4
.LABEL__convert_named_type_77__10:
  # $19.1: @IR_Type = call(convert_struct_statement.74, self.1, statement.1)
  .loc 1 1757 28
  mov rdi, [rbp-16]
  mov rsi, [rbp-48]
  call convert_struct_statement_74
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] $19.1:rax 
  # return($19.1)
  .loc 1 1757 21
  jmp .LABEL__convert_named_type_77__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] statement.1:[rbp-48] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] 
.LABEL__convert_named_type_77__9:
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 1760 23
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] $12.1:rax 
  # $13.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 1 1760 43
  mov rbx, [rbp-40]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] $12.1:rax $13.1:rbx 
  # call(abort.127, $12.1, $13.1)
  .loc 1 1760 17
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] statement.1:[rbp-40] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
.LABEL__convert_named_type_77__6:
  # $20.1: @Source_Location = load_struct_member(type_name.1, location)
  .loc 1 1763 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:rax 
  # $21.1: @String = call(clone.329, "Unknown type: ")
  .loc 1 1763 35
  lea rdi, .LABEL__string_171[rip] # "Unknown type: "
  mov [rbp-40], rax
  call clone_329
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:[rbp-40] $21.1:rax 
  # $22.1: @String = load_struct_member(type_name.1, lexeme)
  .loc 1 1763 66
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:[rbp-40] $21.1:rax $22.1:rbx 
  # $23.1: @String = call(append.332, $21.1, $22.1)
  .loc 1 1763 35
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] $20.1:[rbp-40] $23.1:rax 
  # call(abort.271, $20.1, $23.1)
  .loc 1 1763 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_271
  # [discarded value]: $20.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] types.1:[rbp-32] 
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
.LABEL__convert_named_type_77__3:
  # return(type.1)
  .loc 1 1765 5
  mov rax, [rbp-24]
  jmp .LABEL__convert_named_type_77__end
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: type_name.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_named_type_77__end:
  mov rsp, rbp
  pop rbp
  ret

convert_named_type_77__stack_frame_size: .word 48

  .loc 1 1768 1
  .text
convert_pointer_type_78:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_pointer_type_78__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_pointer_type_78__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Pointer_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # $1.1: @AST_Type = load_struct_member(type.1, pointed_type)
  .loc 1 1769 59
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [discarded value]: type.1
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @IR_Type = call(convert_value_type.75, self.1, $1.1)
  .loc 1 1769 35
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # $3.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, $2.1)
  .loc 1 1769 12
  mov rdi, rax
  call create_ir_pointer_type_133
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 1769 5
  jmp .LABEL__convert_pointer_type_78__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__convert_pointer_type_78__end:
  mov rsp, rbp
  pop rbp
  ret

convert_pointer_type_78__stack_frame_size: .word 0

  .loc 1 1772 1
  .text
create_global_variable_79:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_global_variable_79__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_global_variable_79__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  .loc 1 1773 22
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi variable_statement.1:rsi $1.1:rax 
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  .loc 1 1773 22
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx 
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 1 1775 9
  mov rax, rsi
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $3.1:rax 
  # $4.1: Boolean = $3.1 != null
  .loc 1 1775 9
  cmp rax, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $4.1:r15 
  # jump($4.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__create_global_variable_79__4
.LABEL__create_global_variable_79__2:
  # $6.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 1 1776 49
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $6.1:rax 
  # variable_type.2: @IR_Type = call(convert_value_type.75, self.1, $6.1)
  .loc 1 1776 25
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:rax 
  # jump(block.3)
  mov [rbp-32], rax
.LABEL__create_global_variable_79__3:
  # $8.1: Boolean = load_struct_member(variable_statement.1, is_external)
  .loc 1 1780 73
  mov rax, [rbp-16]
  add rax, 40
  mov al, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] $8.1:rax 
  # variable.1: @IR_Global_Variable = call(create_ir_global_variable.151, variable_name.1, variable_type.2, $8.1)
  .loc 1 1780 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  mov dl, al
  call create_ir_global_variable_151
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:rax 
  # $10.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 1 1781 9
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:rax $10.1:rbx 
  # $11.1: Boolean = $10.1 != null
  .loc 1 1781 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:rax $11.1:r15 
  # jump($11.1, block.5, block.6)
  test r15b, r15b
  mov [rbp-40], rax
  jz .LABEL__create_global_variable_79__6
.LABEL__create_global_variable_79__5:
  # $12.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 1 1782 15
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] $12.1:rax 
  # $13.1: @Source_Location = load_struct_member($12.1, location)
  .loc 1 1782 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] $13.1:rbx 
  # call(abort.271, $13.1, "Initialized global variables are not supported yet.")
  .loc 1 1782 9
  mov rdi, rbx
  lea rsi, .LABEL__string_172[rip] # "Initialized global variables are not supported yet."
  call abort_271
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
.LABEL__create_global_variable_79__6:
  # $14.1: @IR_Variable = call(add_variable.62, self.1, variable.1)
  .loc 1 1784 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  call add_variable_62
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # $15.1: @IR_Variable_Value = call(create_variable_value.65, self.1, variable.1)
  .loc 1 1785 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  call create_variable_value_65
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # return()
  jmp .LABEL__create_global_variable_79__end
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] variable.1:[rbp-40] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_type.2:[rbp-32] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
.LABEL__create_global_variable_79__4:
  # $5.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 1 1778 15
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $5.1:rax 
  # call(abort.271, $5.1, "Type inference is not supported yet.")
  .loc 1 1778 9
  mov rdi, rax
  lea rsi, .LABEL__string_173[rip] # "Type inference is not supported yet."
  call abort_271
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: variable_statement.1
  # [discarded value]: variable_name.1
  # [live values]: 
.LABEL__create_global_variable_79__end:
  mov rsp, rbp
  pop rbp
  ret

create_global_variable_79__stack_frame_size: .word 48

  .loc 1 1788 1
  .text
create_function_80:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_function_80__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_function_80__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  # function.1: @IR_Function = new(IR_Function)
  .loc 1 1789 17
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 57
  call malloc
  lea rbx, IR_Function[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax 
  # $2.1: @List = load_struct_member(self.1, named_functions)
  .loc 1 1790 19
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax $2.1:rbx 
  # $3.1: Int = load_struct_member($2.1, size)
  .loc 1 1790 19
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax $3.1:r15 
  # $4.1: Int = $3.1 + 1
  .loc 1 1790 19
  mov rbx, r15
  add rbx, 1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax $4.1:rbx 
  # store_struct_member(function.1, id, $4.1)
  .loc 1 1790 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax 
  # $5.1: @Source_Location = load_struct_member(function_statement.1, location)
  .loc 1 1791 25
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax $5.1:rbx 
  # store_struct_member(function.1, location, $5.1)
  .loc 1 1791 5
  mov r15, rax
  add r15, 16
  mov QWORD PTR [r15], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax 
  # $6.1: @List = call(create_list.307)
  .loc 1 1792 23
  mov [rbp-24], rax
  call create_list_307
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $6.1:rax 
  # store_struct_member(function.1, blocks, $6.1)
  .loc 1 1792 5
  mov rbx, [rbp-24]
  add rbx, 49
  mov QWORD PTR [rbx], rax
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $7.1: @Identifier_Token = load_struct_member(function_statement.1, name)
  .loc 1 1793 21
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $7.1:rax 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 1 1793 21
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $8.1:rbx 
  # store_struct_member(function.1, name, $8.1)
  .loc 1 1793 5
  mov rax, [rbp-24]
  add rax, 24
  mov QWORD PTR [rax], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $9.1: @List = call(create_list.307)
  .loc 1 1794 27
  call create_list_307
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $9.1:rax 
  # store_struct_member(function.1, parameters, $9.1)
  .loc 1 1794 5
  mov rbx, [rbp-24]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $10.1: @AST_Type = load_struct_member(function_statement.1, return_type)
  .loc 1 1795 52
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $10.1:rax 
  # $11.1: @IR_Type = call(convert_value_type.75, self.1, $10.1)
  .loc 1 1795 28
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $11.1:rax 
  # store_struct_member(function.1, return_type, $11.1)
  .loc 1 1795 5
  mov rbx, [rbp-24]
  add rbx, 40
  mov QWORD PTR [rbx], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $12.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  .loc 1 1796 28
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $12.1:rax 
  # $13.1: Boolean = $12.1 == null
  .loc 1 1796 28
  cmp rax, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $13.1:rbx 
  # store_struct_member(function.1, is_external, $13.1)
  .loc 1 1796 5
  mov rax, [rbp-24]
  add rax, 48
  mov BYTE PTR [rax], bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $14.1: @List = load_struct_member(function_statement.1, parameters)
  .loc 1 1798 19
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $14.1:rax 
  # parameters.1: @List_Iterator = call(create_iterator.319, $14.1)
  .loc 1 1798 19
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__create_function_80__2:
  # $16.1: Boolean = call(has_next.322, parameters.1)
  .loc 1 1799 12
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.3, block.4)
  test al, al
  jz .LABEL__create_function_80__4
.LABEL__create_function_80__3:
  # parameter.1: @AST_Function_Parameter = call(next.323, parameters.1)
  .loc 1 1800 22
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] parameter.1:rax 
  # $19.1: @AST_Type = load_struct_member(parameter.1, type)
  .loc 1 1801 51
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] parameter.1:rax $19.1:rbx 
  # parameter_type.1: @IR_Type = call(convert_value_type.75, self.1, $19.1)
  .loc 1 1801 27
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-40], rax
  call convert_value_type_75
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] parameter.1:[rbp-40] parameter_type.1:rax 
  # $21.1: @Identifier_Token = load_struct_member(parameter.1, name)
  .loc 1 1802 27
  mov rbx, [rbp-40]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] parameter_type.1:rax $21.1:rbx 
  # parameter_name.1: @String = load_struct_member($21.1, lexeme)
  .loc 1 1802 27
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] parameter_type.1:rax parameter_name.1:r15 
  # $23.1: @IR_Function_Parameter = new(IR_Function_Parameter)
  .loc 1 1803 31
  mov [rbp-40], rax
  mov [rbp-48], r15
  mov rdi, 32
  call malloc
  lea rbx, IR_Function_Parameter[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] parameter_type.1:[rbp-40] parameter_name.1:[rbp-48] $23.1:rax 
  # function_parameter.1: @IR_Function_Parameter = call(init.150, $23.1, parameter_name.1, parameter_type.1)
  .loc 1 1803 31
  mov rdi, rax
  mov rsi, [rbp-48]
  mov rdx, [rbp-40]
  call init_150
  # [discarded value]: parameter_type.1
  # [discarded value]: parameter_name.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] function_parameter.1:rax 
  # $26.1: @List = load_struct_member(function.1, parameters)
  .loc 1 1804 9
  mov rbx, [rbp-24]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] function_parameter.1:rax $26.1:rbx 
  # call(append.308, $26.1, function_parameter.1)
  .loc 1 1804 9
  mov rdi, rbx
  mov rsi, rax
  call append_308
  # [discarded value]: function_parameter.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] 
  # jump(block.2)
  jmp .LABEL__create_function_80__2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] 
.LABEL__create_function_80__4:
  # store_struct_member(function_statement.1, ir_function, function.1)
  .loc 1 1807 5
  mov rax, [rbp-8]
  add rax, 48
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rbx[rbp-24] parameters.1:[rbp-32] 
  # $27.1: @List = load_struct_member(self.1, named_functions)
  .loc 1 1808 5
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rbx[rbp-24] parameters.1:[rbp-32] $27.1:rax 
  # call(append.308, $27.1, function.1)
  .loc 1 1808 5
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rbx
  call append_308
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] 
  # return(function.1)
  .loc 1 1810 5
  mov rax, [rbp-24]
  jmp .LABEL__create_function_80__end
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] parameters.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: function_statement.1
  # [discarded value]: function.1
  # [discarded value]: parameters.1
  # [live values]: 
.LABEL__create_function_80__end:
  mov rsp, rbp
  pop rbp
  ret

create_function_80__stack_frame_size: .word 48

  .loc 1 1813 1
  .text
build_function_81:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_function_81__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_function_81__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  # $1.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  .loc 1 1814 9
  mov rax, rsi
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 1 1814 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__build_function_81__3
.LABEL__build_function_81__2:
  # return()
  .loc 1 1815 9
  jmp .LABEL__build_function_81__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] 
.LABEL__build_function_81__3:
  # function.1: @IR_Function = load_struct_member(function_statement.1, ir_function)
  .loc 1 1818 17
  mov rax, [rbp-8]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax 
  # $4.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 1 1820 46
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:rax $4.1:rbx 
  # $5.1: @IR_Builder_Context = call(create_ir_builder_context.59, $4.1, false)
  .loc 1 1820 20
  mov rdi, rbx
  mov sil, 0
  mov [rbp-24], rax
  call create_ir_builder_context_59
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $5.1:rax 
  # store_struct_member(self.1, context, $5.1)
  .loc 1 1820 5
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $6.1: @Counter = load_struct_member(self.1, counter)
  .loc 1 1821 5
  mov rax, [rbp-16]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $6.1:rax 
  # $7.1: @Counter = call(reset.130, $6.1)
  .loc 1 1821 5
  mov rdi, rax
  call reset_130
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $8.1: @IR_Block = call(create_block.149, function.1)
  .loc 1 1823 26
  mov rdi, [rbp-24]
  call create_block_149
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $8.1:rax 
  # store_struct_member(self.1, current_block, $8.1)
  .loc 1 1823 5
  mov rbx, [rbp-16]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] 
  # $9.1: @List = load_struct_member(function.1, parameters)
  .loc 1 1825 28
  mov rax, [rbp-24]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] $9.1:rax 
  # function_parameters.1: @List_Iterator = call(create_iterator.319, $9.1)
  .loc 1 1825 28
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__build_function_81__5:
  # $11.1: Boolean = call(has_next.322, function_parameters.1)
  .loc 1 1826 12
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $11.1:rax 
  # jump($11.1, block.6, block.7)
  test al, al
  jz .LABEL__build_function_81__7
.LABEL__build_function_81__6:
  # function_parameter.1: @IR_Function_Parameter = call(next.323, function_parameters.1)
  .loc 1 1827 31
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] function_parameter.1:rax 
  # $14.1: @IR_Variable = call(add_variable.62, self.1, function_parameter.1)
  .loc 1 1828 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-40], rax
  call add_variable_62
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] function_parameter.1:[rbp-40] 
  # $15.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1829 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] function_parameter.1:[rbp-40] $15.1:rax 
  # $16.1: @IR_Variable_Value = call(create_variable_value.65, self.1, function_parameter.1)
  .loc 1 1829 71
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  mov [rbp-48], rax
  call create_variable_value_65
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $15.1:[rbp-48] $16.1:rax 
  # $17.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction.163, $16.1)
  .loc 1 1829 35
  mov rdi, rax
  call create_ir_load_variable_instruction_163
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $15.1:[rbp-48] $17.1:rax 
  # $18.1: @IR_Instruction = call(append.145, $15.1, $17.1)
  .loc 1 1829 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call append_145
  # [discarded value]: $15.1
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # jump(block.5)
  jmp .LABEL__build_function_81__5
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
.LABEL__build_function_81__7:
  # $19.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  .loc 1 1832 34
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $19.1:rax 
  # call(convert_block_statement.90, self.1, $19.1)
  .loc 1 1832 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_block_statement_90
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1833 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $20.1:rax 
  # $21.1: @IR_Instruction = load_struct_member($20.1, last_instruction)
  .loc 1 1833 9
  mov rbx, rax
  add rbx, 40
  mov rbx, [rbx]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $21.1:rbx 
  # $23.1: Boolean = $21.1 == null
  .loc 1 1833 9
  cmp rbx, 0
  sete al
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:rax 
  # jump($23.1, block.9, block.8)
  test al, al
  mov [rbp-33], al
  jz .LABEL__build_function_81__8
.LABEL__build_function_81__9:
  # $23.3: Boolean = phi($23.1, $23.2)
  .loc 1 1833 9
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $23.3:[rbp-33] 
  # jump($23.3, block.10, block.11)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__build_function_81__11
.LABEL__build_function_81__10:
  # $28.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1834 13
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $23.3
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $28.1:rax 
  # $29.1: @List = load_struct_member($28.1, predecessors)
  .loc 1 1834 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $29.1:rbx 
  # $30.1: Int = load_struct_member($29.1, size)
  .loc 1 1834 13
  mov rax, rbx
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $30.1:rax 
  # $32.1: Boolean = $30.1 == 0
  .loc 1 1834 13
  cmp rax, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:rbx 
  # jump($32.1, block.12, block.13)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__build_function_81__13
.LABEL__build_function_81__12:
  # $33.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1834 58
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $33.1:rax 
  # $34.1: Int = load_struct_member($33.1, id)
  .loc 1 1834 58
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $34.1:rbx 
  # $32.2: Boolean = $34.1 != 1
  .loc 1 1834 58
  cmp rbx, 1
  setne al
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:rax[rbp-34] 
  # jump(block.13)
  mov [rbp-34], al
.LABEL__build_function_81__13:
  # $32.3: Boolean = phi($32.1, $32.2)
  .loc 1 1834 13
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $32.3:[rbp-34] 
  # jump($32.3, block.14, block.16)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__build_function_81__16
.LABEL__build_function_81__14:
  # $41.1: @List = load_struct_member(function.1, blocks)
  .loc 1 1836 13
  mov rax, [rbp-24]
  add rax, 49
  mov rax, [rax]
  # [discarded value]: $32.3
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $41.1:rax 
  # $42.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1836 36
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $41.1:rax $42.1:rbx 
  # $43.1: @List = call(remove.310, $41.1, $42.1)
  .loc 1 1836 13
  mov rdi, rax
  mov rsi, rbx
  call remove_310
  # [discarded value]: $41.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $43.1:rax 
  # $44.1: @List = call(prune.312, $43.1)
  .loc 1 1836 13
  mov rdi, rax
  call prune_312
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # jump(block.11)
.LABEL__build_function_81__11:
  # store_struct_member(self.1, current_block, null)
  .loc 1 1843 5
  mov rax, [rbp-16]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # call(remove_redundant_blocks.82, self.1, function.1)
  .loc 1 1845 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call remove_redundant_blocks_82
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # call(populate_phi_instructions.83, self.1, function.1)
  .loc 1 1846 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call populate_phi_instructions_83
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # call(remove_trivial_phi_instructions.85, self.1, function.1)
  .loc 1 1847 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call remove_trivial_phi_instructions_85
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # call(remove_redundant_set_instructions.86, self.1, function.1)
  .loc 1 1848 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call remove_redundant_set_instructions_86
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # $45.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 1 1850 20
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $45.1:rax $32.2:[rbp-34] 
  # $46.1: @IR_Builder_Context = load_struct_member($45.1, parent)
  .loc 1 1850 20
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $46.1:rbx $32.2:[rbp-34] 
  # store_struct_member(self.1, context, $46.1)
  .loc 1 1850 5
  mov rax, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # return()
  jmp .LABEL__build_function_81__end
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
.LABEL__build_function_81__16:
  # $36.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 1 1837 20
  mov rax, [rbp-24]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $36.1:rax 
  # IR_Nothing_Type.2: @Object_Type = load_variable(IR_Nothing_Type)
  lea rbx, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $36.1:rax IR_Nothing_Type.2:rbx 
  # $37.1: Boolean = call(is.325, $36.1, IR_Nothing_Type.2)
  .loc 1 1837 20
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $36.1
  # [discarded value]: IR_Nothing_Type.2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $37.1:rax 
  # jump($37.1, block.17, block.19)
  test al, al
  jz .LABEL__build_function_81__19
.LABEL__build_function_81__17:
  # $39.1: @IR_Return_Instruction = call(create_ir_return_instruction.166, null)
  .loc 1 1838 25
  xor rdi, rdi
  call create_ir_return_instruction_166
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $39.1:rax 
  # $40.1: @IR_Variable_Value = call(append.71, self.1, $39.1, null)
  .loc 1 1838 13
  mov rdi, [rbp-16]
  mov rsi, rax
  xor rdx, rdx
  call append_71
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # jump(block.11)
  jmp .LABEL__build_function_81__11
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
.LABEL__build_function_81__19:
  # $38.1: @Source_Location = load_struct_member(function_statement.1, location)
  .loc 1 1840 19
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] $38.1:rax 
  # call(abort.271, $38.1, "Missing return statement")
  .loc 1 1840 13
  mov rdi, rax
  lea rsi, .LABEL__string_174[rip] # "Missing return statement"
  call abort_271
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] $32.2:[rbp-34] 
  # [discarded value]: $32.2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $32.1:[rbp-34] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] 
.LABEL__build_function_81__8:
  # $24.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 1833 56
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $24.1:rax 
  # $25.1: @IR_Instruction = load_struct_member($24.1, last_instruction)
  .loc 1 1833 56
  mov rbx, rax
  add rbx, 40
  mov rbx, [rbx]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $25.1:rbx 
  # $26.1: Boolean = call(is_exit_instruction.153, $25.1)
  .loc 1 1833 56
  mov rdi, rbx
  call is_exit_instruction_153
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $26.1:rax 
  # $23.2: Boolean = $26.1 == false
  .loc 1 1833 56
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $23.2:rbx[rbp-33] 
  # jump(block.9)
  mov [rbp-33], bl
  jmp .LABEL__build_function_81__9
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] $23.2:[rbp-33] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] $23.1:[rbp-33] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] function.1:[rbp-24] function_parameters.1:[rbp-32] 
  # [discarded value]: function.1
  # [discarded value]: function_parameters.1
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] function_statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: function_statement.1
  # [live values]: 
.LABEL__build_function_81__end:
  mov rsp, rbp
  pop rbp
  ret

build_function_81__stack_frame_size: .word 48

  .loc 1 1853 1
  .text
remove_redundant_blocks_82:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_blocks_82__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_blocks_82__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_blocks_82__2:
  # repeat.1: Boolean = false
  .loc 1 1855 9
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 1 1857 19
  mov rbx, [rbp-8]
  add rbx, 49
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:rax $1.1:rbx 
  # $2.1: @List = call(prune.312, $1.1)
  .loc 1 1857 19
  mov rdi, rbx
  mov [rbp-9], al
  call prune_312
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator.319, $2.1)
  .loc 1 1857 19
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(block.4)
  mov [rbp-17], rax
.LABEL__remove_redundant_blocks_82__4:
  # $4.1: Boolean = call(has_next.322, blocks.1)
  .loc 1 1859 16
  mov rdi, [rbp-17]
  call has_next_322
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__remove_redundant_blocks_82__6
.LABEL__remove_redundant_blocks_82__5:
  # block.1: @IR_Block = call(next.323, blocks.1)
  .loc 1 1860 22
  mov rdi, [rbp-17]
  call next_323
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax 
  # $7.1: Int = load_struct_member(block.1, id)
  .loc 1 1861 17
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax $7.1:rbx 
  # $8.1: Boolean = $7.1 != 1
  .loc 1 1861 17
  cmp rbx, 1
  setne r15b
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:rax $8.1:r15 
  # jump($8.1, block.7, block.4)
  test r15b, r15b
  mov [rbp-25], rax
  jz .LABEL__remove_redundant_blocks_82__4
.LABEL__remove_redundant_blocks_82__7:
  # $9.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1862 21
  mov rax, [rbp-25]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $9.1:rax 
  # $10.1: Int = load_struct_member($9.1, size)
  .loc 1 1862 21
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $10.1:rbx 
  # $11.1: Boolean = $10.1 == 0
  .loc 1 1862 21
  cmp rbx, 0
  sete al
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $11.1:rax 
  # jump($11.1, block.9, block.10)
  test al, al
  jz .LABEL__remove_redundant_blocks_82__10
.LABEL__remove_redundant_blocks_82__9:
  # $12.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 1 1864 25
  mov rax, [rbp-25]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $12.1:rax 
  # $13.1: Boolean = $12.1 == null
  .loc 1 1864 25
  cmp rax, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $13.1:rbx 
  # jump($13.1, block.11, block.13)
  test bl, bl
  jz .LABEL__remove_redundant_blocks_82__13
.LABEL__remove_redundant_blocks_82__11:
  # call(remove_current.321, blocks.1)
  .loc 1 1865 25
  mov rdi, [rbp-17]
  call remove_current_321
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # jump(block.10)
.LABEL__remove_redundant_blocks_82__10:
  # $32.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 1877 21
  mov rax, [rbp-25]
  add rax, 32
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $32.1:rax 
  # $33.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 1 1877 48
  mov rbx, [rbp-25]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $32.1:rax $33.1:rbx 
  # $35.1: Boolean = $32.1 == $33.1
  .loc 1 1877 21
  cmp rax, rbx
  sete r15b
  # [discarded value]: $32.1
  # [discarded value]: $33.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:r15 
  # jump($35.1, block.20, block.21)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_redundant_blocks_82__21
.LABEL__remove_redundant_blocks_82__20:
  # $36.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 1877 74
  mov rax, [rbp-25]
  add rax, 32
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $36.1:rax 
  # IR_Direct_Jump_Instruction.4: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rbx, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $36.1:rax IR_Direct_Jump_Instruction.4:rbx 
  # $35.2: Boolean = call(is.325, $36.1, IR_Direct_Jump_Instruction.4)
  .loc 1 1877 74
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $36.1
  # [discarded value]: IR_Direct_Jump_Instruction.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:rax[rbp-26] 
  # jump(block.21)
  mov [rbp-26], al
.LABEL__remove_redundant_blocks_82__21:
  # $35.3: Boolean = phi($35.1, $35.2)
  .loc 1 1877 21
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] $35.3:[rbp-26] 
  # jump($35.3, block.22, block.4)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_redundant_blocks_82__4
.LABEL__remove_redundant_blocks_82__22:
  # $38.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1879 42
  mov rax, [rbp-25]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $35.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] $38.1:rax 
  # block_predecessor.1: @IR_Block = call(last.318, $38.1)
  .loc 1 1879 42
  mov rdi, rax
  call last_318
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax 
  # $42.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 1880 41
  mov rbx, [rbp-25]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax $42.1:rbx 
  # block_successor.1: @IR_Block = load_struct_member($42.1, block)
  .loc 1 1880 41
  mov r15, rbx
  add r15, 57
  mov r15, [r15]
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax block_successor.1:r15 
  # $44.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 1 1881 25
  mov rbx, rax
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax block_successor.1:r15 $44.1:rbx 
  # IR_Conditional_Jump_Instruction.3: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea r14, IR_Conditional_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:rax block_successor.1:r15 $44.1:rbx IR_Conditional_Jump_Instruction.3:r14 
  # $45.1: Boolean = call(is.325, $44.1, IR_Conditional_Jump_Instruction.3)
  .loc 1 1881 25
  mov rdi, rbx
  mov rsi, r14
  mov [rbp-34], rax
  mov [rbp-42], r15
  call is_325
  # [discarded value]: $44.1
  # [discarded value]: IR_Conditional_Jump_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $45.1:rax 
  # jump($45.1, block.24, block.25)
  test al, al
  jz .LABEL__remove_redundant_blocks_82__25
.LABEL__remove_redundant_blocks_82__24:
  # $46.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1882 25
  mov rax, [rbp-25]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $46.1:rax 
  # $47.1: @List = call(remove.310, $46.1, block_predecessor.1)
  .loc 1 1882 25
  mov rdi, rax
  mov rsi, [rbp-34]
  call remove_310
  # [discarded value]: $46.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $47.1:rax 
  # $48.1: @List = call(prune.312, $47.1)
  .loc 1 1882 25
  mov rdi, rax
  call prune_312
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # block_predecessor_instruction.1: @IR_Conditional_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 1 1883 58
  mov rax, [rbp-34]
  add rax, 40
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rax 
  # $51.1: @IR_Block = load_struct_member(block_predecessor_instruction.1, false_block)
  .loc 1 1884 29
  mov rbx, rax
  add rbx, 65
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rax $51.1:rbx 
  # $52.1: Boolean = $51.1 == block.1
  .loc 1 1884 29
  cmp rbx, QWORD PTR [rbp-25]
  sete r15b
  # [discarded value]: $51.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rax $52.1:r15 
  # jump($52.1, block.26, block.28)
  test r15b, r15b
  mov [rbp-50], rax
  jz .LABEL__remove_redundant_blocks_82__28
.LABEL__remove_redundant_blocks_82__26:
  # store_struct_member(block_predecessor_instruction.1, false_block, block_successor.1)
  .loc 1 1885 29
  mov rax, [rbp-50]
  add rax, 65
  mov rbx, [rbp-42]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $52.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:rbx[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # jump(block.27)
  mov [rbp-42], rbx
.LABEL__remove_redundant_blocks_82__27:
  # $53.1: @List = load_struct_member(block_successor.1, predecessors)
  .loc 1 1889 25
  mov rax, [rbp-42]
  add rax, 24
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] $53.1:rax 
  # $54.1: @List = call(remove.310, $53.1, block.1)
  .loc 1 1889 25
  mov rdi, rax
  mov rsi, [rbp-25]
  call remove_310
  # [discarded value]: $53.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] $54.1:rax 
  # $55.1: @List = call(prune.312, $54.1)
  .loc 1 1889 25
  mov rdi, rax
  call prune_312
  # [discarded value]: $54.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] $55.1:rax 
  # call(append.308, $55.1, block_predecessor.1)
  .loc 1 1889 25
  mov rdi, rax
  mov rsi, [rbp-34]
  call append_308
  # [discarded value]: $55.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # repeat.3: Boolean = true
  .loc 1 1890 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:rax[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
.LABEL__remove_redundant_blocks_82__6:
  # repeat.5: Boolean = phi(repeat.2, repeat.3, repeat.4, repeat.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] repeat.5:[rbp-9] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # $66.1: Boolean = repeat.5 == false
  .loc 1 1905 13
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $66.1:rax $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # jump($66.1, block.3, block.2)
  test al, al
  jz .LABEL__remove_redundant_blocks_82__2
.LABEL__remove_redundant_blocks_82__3:
  # return()
  jmp .LABEL__remove_redundant_blocks_82__end
  # [discarded value]: $66.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
.LABEL__remove_redundant_blocks_82__28:
  # store_struct_member(block_predecessor_instruction.1, true_block, block_successor.1)
  .loc 1 1887 29
  mov rax, [rbp-50]
  add rax, 57
  mov rbx, [rbp-42]
  mov QWORD PTR [rax], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:rbx[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # jump(block.27)
  mov [rbp-42], rbx
  jmp .LABEL__remove_redundant_blocks_82__27
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:[rbp-50] 
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
.LABEL__remove_redundant_blocks_82__25:
  # $56.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 1 1893 25
  mov rax, [rbp-34]
  add rax, 40
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $56.1:rax 
  # IR_Direct_Jump_Instruction.5: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rbx, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $56.1:rax IR_Direct_Jump_Instruction.5:rbx 
  # $57.1: Boolean = call(is.325, $56.1, IR_Direct_Jump_Instruction.5)
  .loc 1 1893 25
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $56.1
  # [discarded value]: IR_Direct_Jump_Instruction.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $57.1:rax 
  # jump($57.1, block.30, block.4)
  test al, al
  jz .LABEL__remove_redundant_blocks_82__4
.LABEL__remove_redundant_blocks_82__30:
  # $58.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1894 25
  mov rax, [rbp-25]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $57.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $58.1:rax 
  # $59.1: @List = call(remove.310, $58.1, block_predecessor.1)
  .loc 1 1894 25
  mov rdi, rax
  mov rsi, [rbp-34]
  call remove_310
  # [discarded value]: $58.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $59.1:rax 
  # $60.1: @List = call(prune.312, $59.1)
  .loc 1 1894 25
  mov rdi, rax
  call prune_312
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # block_predecessor_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  .loc 1 1895 58
  mov rax, [rbp-34]
  add rax, 40
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] block_predecessor_instruction.1:rax 
  # store_struct_member(block_predecessor_instruction.1, block, block_successor.1)
  .loc 1 1896 25
  mov rbx, rax
  add rbx, 57
  mov r15, [rbp-42]
  mov QWORD PTR [rbx], r15
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:r15[rbp-42] 
  # $63.1: @List = load_struct_member(block_successor.1, predecessors)
  .loc 1 1897 25
  mov rax, r15
  add rax, 24
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:r15[rbp-42] $63.1:rax 
  # $64.1: @List = call(remove.310, $63.1, block.1)
  .loc 1 1897 25
  mov rdi, rax
  mov rsi, [rbp-25]
  call remove_310
  # [discarded value]: $63.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $64.1:rax 
  # $65.1: @List = call(prune.312, $64.1)
  .loc 1 1897 25
  mov rdi, rax
  call prune_312
  # [discarded value]: $64.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] $65.1:rax 
  # call(append.308, $65.1, block_predecessor.1)
  .loc 1 1897 25
  mov rdi, rax
  mov rsi, [rbp-34]
  call append_308
  # [discarded value]: $65.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # repeat.4: Boolean = true
  .loc 1 1898 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] repeat.4:rax[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_82__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] block_predecessor.1:[rbp-34] block_successor.1:[rbp-42] 
  # [discarded value]: block_predecessor.1
  # [discarded value]: block_successor.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] $35.2:[rbp-26] 
  # [discarded value]: $35.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $35.1:[rbp-26] 
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
.LABEL__remove_redundant_blocks_82__13:
  # $14.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 1 1866 32
  mov rax, [rbp-25]
  add rax, 40
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $14.1:rax 
  # $15.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 1866 58
  mov rbx, [rbp-25]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $14.1:rax $15.1:rbx 
  # $17.1: Boolean = $14.1 == $15.1
  .loc 1 1866 32
  cmp rax, rbx
  sete r15b
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:r15 
  # jump($17.1, block.14, block.15)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_redundant_blocks_82__15
.LABEL__remove_redundant_blocks_82__14:
  # $18.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 1 1866 85
  mov rax, [rbp-25]
  add rax, 40
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $18.1:rax 
  # IR_Direct_Jump_Instruction.3: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rbx, IR_Direct_Jump_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $18.1:rax IR_Direct_Jump_Instruction.3:rbx 
  # $17.2: Boolean = call(is.325, $18.1, IR_Direct_Jump_Instruction.3)
  .loc 1 1866 85
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $18.1
  # [discarded value]: IR_Direct_Jump_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:rax[rbp-26] 
  # jump(block.15)
  mov [rbp-26], al
.LABEL__remove_redundant_blocks_82__15:
  # $17.3: Boolean = phi($17.1, $17.2)
  .loc 1 1866 32
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $17.3:[rbp-26] 
  # jump($17.3, block.16, block.18)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_redundant_blocks_82__18
.LABEL__remove_redundant_blocks_82__16:
  # block_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, last_instruction)
  .loc 1 1867 46
  mov rax, [rbp-25]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $17.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:rax 
  # $26.1: @IR_Block = load_struct_member(block_instruction.1, block)
  .loc 1 1868 25
  mov rbx, rax
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:rax $26.1:rbx 
  # $27.1: @List = load_struct_member($26.1, predecessors)
  .loc 1 1868 25
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:rax $27.1:r15 
  # $28.1: @List = call(remove.310, $27.1, block.1)
  .loc 1 1868 25
  mov rdi, r15
  mov rsi, [rbp-25]
  mov [rbp-34], rax
  call remove_310
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] block_instruction.1:[rbp-34] 
  # $29.1: @IR_Block = load_struct_member(block_instruction.1, block)
  .loc 1 1869 25
  mov rax, [rbp-34]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $29.1:rax 
  # $30.1: @List = load_struct_member($29.1, predecessors)
  .loc 1 1869 25
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $30.1:rbx 
  # $31.1: @List = call(prune.312, $30.1)
  .loc 1 1869 25
  mov rdi, rbx
  call prune_312
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # call(remove_current.321, blocks.1)
  .loc 1 1870 25
  mov rdi, [rbp-17]
  call remove_current_321
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # repeat.2: Boolean = true
  .loc 1 1871 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] repeat.2:rax[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_82__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
.LABEL__remove_redundant_blocks_82__18:
  # $20.1: @Source_Location = load_struct_member(function.1, location)
  .loc 1 1874 31
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:rax 
  # $21.1: @String = call(clone.329, "Found non-empty unreachable block: block.")
  .loc 1 1874 50
  lea rdi, .LABEL__string_175[rip] # "Found non-empty unreachable block: block."
  mov [rbp-34], rax
  call clone_329
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:[rbp-34] $21.1:rax 
  # $22.1: Int = load_struct_member(block.1, id)
  .loc 1 1874 108
  mov rbx, [rbp-25]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:[rbp-34] $21.1:rax $22.1:rbx 
  # $23.1: @String = call(append.331, $21.1, $22.1)
  .loc 1 1874 50
  mov rdi, rax
  mov rsi, rbx
  call append_331
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] $20.1:[rbp-34] $23.1:rax 
  # call(abort.271, $20.1, $23.1)
  .loc 1 1874 25
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_271
  # [discarded value]: $20.1
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] $17.2:[rbp-26] 
  # [discarded value]: $17.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] $17.1:[rbp-26] 
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] block.1:[rbp-25] 
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: repeat.1
  # [discarded value]: blocks.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_blocks_82__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_blocks_82__stack_frame_size: .word 64

  .loc 1 1911 1
  .text
populate_phi_instructions_83:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR populate_phi_instructions_83__stack_frame_size[rip]
  sub rsp, rax
.LABEL__populate_phi_instructions_83__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 1 1912 15
  mov rax, rsi
  add rax, 49
  mov rax, [rax]
  # [discarded value]: function.1
  # [live values]: self.1:rdi $1.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator.319, $1.1)
  .loc 1 1912 15
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] blocks.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__populate_phi_instructions_83__2:
  # $3.1: Boolean = call(has_next.322, blocks.1)
  .loc 1 1913 12
  mov rdi, [rbp-16]
  call has_next_322
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__populate_phi_instructions_83__4
.LABEL__populate_phi_instructions_83__3:
  # block.1: @IR_Block = call(next.323, blocks.1)
  .loc 1 1914 18
  mov rdi, [rbp-16]
  call next_323
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 1915 30
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:rax block_instruction.1:rbx 
  # jump(block.5)
  mov [rbp-24], rax
  mov [rbp-32], rbx
.LABEL__populate_phi_instructions_83__5:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # $8.1: Boolean = block_instruction.2 != null
  .loc 1 1916 16
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:rax 
  # jump($8.1, block.8, block.9)
  test al, al
  mov [rbp-33], al
  jz .LABEL__populate_phi_instructions_83__9
.LABEL__populate_phi_instructions_83__8:
  # IR_Phi_Instruction.4: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] IR_Phi_Instruction.4:rax 
  # $8.2: Boolean = call(is.325, block_instruction.2, IR_Phi_Instruction.4)
  .loc 1 1916 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Phi_Instruction.4
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:rax[rbp-33] 
  # jump(block.9)
  mov [rbp-33], al
.LABEL__populate_phi_instructions_83__9:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 1 1916 16
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # jump($8.3, block.6, block.2)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__populate_phi_instructions_83__2
.LABEL__populate_phi_instructions_83__6:
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  .loc 1 1917 28
  mov rax, [rbp-32]
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $8.2:[rbp-33] 
  # $11.1: @List = load_struct_member(instruction.1, values)
  .loc 1 1918 17
  mov rbx, rax
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $11.1:rbx $8.2:[rbp-33] 
  # $12.1: Int = load_struct_member($11.1, size)
  .loc 1 1918 17
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $12.1:r15 $8.2:[rbp-33] 
  # $13.1: Boolean = $12.1 == 0
  .loc 1 1918 17
  cmp r15, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:rax $13.1:rbx $8.2:[rbp-33] 
  # jump($13.1, block.10, block.11)
  test bl, bl
  mov [rbp-41], rax
  jz .LABEL__populate_phi_instructions_83__11
.LABEL__populate_phi_instructions_83__10:
  # $14.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1919 39
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] $14.1:rax 
  # block_predecessors.1: @List_Iterator = call(create_iterator.319, $14.1)
  .loc 1 1919 39
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:rax 
  # jump(block.12)
  mov [rbp-49], rax
.LABEL__populate_phi_instructions_83__12:
  # $16.1: Boolean = call(has_next.322, block_predecessors.1)
  .loc 1 1920 24
  mov rdi, [rbp-49]
  call has_next_322
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] $16.1:rax 
  # jump($16.1, block.13, block.11)
  test al, al
  jz .LABEL__populate_phi_instructions_83__11
.LABEL__populate_phi_instructions_83__13:
  # block_predecessor.1: @IR_Block = call(next.323, block_predecessors.1)
  .loc 1 1921 42
  mov rdi, [rbp-49]
  call next_323
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_predecessor.1:rax 
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 1922 89
  mov rbx, [rbp-41]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_predecessor.1:rax $19.1:rbx 
  # $20.1: @IR_Variable = load_struct_member($19.1, variable)
  .loc 1 1922 89
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_predecessor.1:rax $20.1:r15 
  # $21.1: @IR_Value = call(get_block_variable_value.84, self.1, block_predecessor.1, $20.1)
  .loc 1 1922 40
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call get_block_variable_value_84
  # [discarded value]: block_predecessor.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] $21.1:rax 
  # call(append.181, instruction.1, $21.1)
  .loc 1 1922 21
  mov rdi, [rbp-41]
  mov rsi, rax
  call append_181
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # jump(block.12)
  jmp .LABEL__populate_phi_instructions_83__12
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
.LABEL__populate_phi_instructions_83__11:
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 1925 33
  mov rax, [rbp-32]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_instruction.6:rax[rbp-32] 
  # jump(block.5)
  mov [rbp-32], rax
  jmp .LABEL__populate_phi_instructions_83__5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] block_instruction.6:[rbp-32] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] block_predecessors.1:[rbp-49] 
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] instruction.1:[rbp-41] $8.2:[rbp-33] 
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: block_instruction.2
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] block.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
.LABEL__populate_phi_instructions_83__4:
  # return()
  jmp .LABEL__populate_phi_instructions_83__end
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: blocks.1
  # [live values]: 
.LABEL__populate_phi_instructions_83__end:
  mov rsp, rbp
  pop rbp
  ret

populate_phi_instructions_83__stack_frame_size: .word 64

  .loc 1 1930 1
  .text
get_block_variable_value_84:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_block_variable_value_84__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_block_variable_value_84__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  .loc 1 1931 26
  mov rax, rsi
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx block_instruction.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__get_block_variable_value_84__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.7)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # $2.1: Boolean = block_instruction.2 != null
  .loc 1 1932 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__get_block_variable_value_84__4
.LABEL__get_block_variable_value_84__3:
  # $3.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 1933 13
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $3.1:rax 
  # $5.1: Boolean = $3.1 != null
  .loc 1 1933 13
  cmp rax, 0
  setne bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:rbx 
  # jump($5.1, block.5, block.6)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__get_block_variable_value_84__6
.LABEL__get_block_variable_value_84__5:
  # $6.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 1933 55
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $6.1:rax 
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  .loc 1 1933 55
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $7.1:rbx 
  # $5.2: Boolean = $7.1 == variable.1
  .loc 1 1933 55
  cmp rbx, QWORD PTR [rbp-16]
  sete al
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:rax[rbp-33] 
  # jump(block.6)
  mov [rbp-33], al
.LABEL__get_block_variable_value_84__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 1 1933 13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] $5.3:[rbp-33] 
  # jump($5.3, block.7, block.8)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__get_block_variable_value_84__8
.LABEL__get_block_variable_value_84__7:
  # $9.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 1934 20
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] $9.1:rax 
  # return($9.1)
  .loc 1 1934 13
  jmp .LABEL__get_block_variable_value_84__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
.LABEL__get_block_variable_value_84__8:
  # block_instruction.7: @IR_Instruction = load_struct_member(block_instruction.2, prev_instruction)
  .loc 1 1936 29
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] block_instruction.7:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__get_block_variable_value_84__2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] block_instruction.7:[rbp-8] 
  # [discarded value]: block_instruction.7
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] $5.2:[rbp-33] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $5.1:[rbp-33] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
.LABEL__get_block_variable_value_84__4:
  # $11.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1938 9
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $11.1:rax 
  # $12.1: Int = load_struct_member($11.1, size)
  .loc 1 1938 9
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $12.1:rbx 
  # $13.1: Boolean = $12.1 == 1
  .loc 1 1938 9
  cmp rbx, 1
  sete al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $13.1:rax 
  # jump($13.1, block.10, block.11)
  test al, al
  jz .LABEL__get_block_variable_value_84__11
.LABEL__get_block_variable_value_84__10:
  # $14.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1939 46
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $14.1:rax 
  # $16.1: @IR_Block = call(last.318, $14.1)
  .loc 1 1939 46
  mov rdi, rax
  call last_318
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $16.1:rax 
  # $17.1: @IR_Value = call(get_block_variable_value.84, self.1, $16.1, variable.1)
  .loc 1 1939 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_84
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $17.1:rax 
  # return($17.1)
  .loc 1 1939 9
  jmp .LABEL__get_block_variable_value_84__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
.LABEL__get_block_variable_value_84__11:
  # $18.1: @IR_Variable_Value = call(create_variable_value.65, self.1, variable.1)
  .loc 1 1941 46
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  call create_variable_value_65
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $18.1:rax 
  # instruction.1: @IR_Phi_Instruction = call(create_ir_phi_instruction.180, $18.1)
  .loc 1 1941 20
  mov rdi, rax
  call create_ir_phi_instruction_180
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:rax 
  # $20.1: @IR_Instruction = call(prepend.144, block.1, instruction.1)
  .loc 1 1942 5
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-40], rax
  call prepend_144
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] 
  # $21.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 1943 27
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] $21.1:rax 
  # block_predecessors.1: @List_Iterator = call(create_iterator.319, $21.1)
  .loc 1 1943 27
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:rax 
  # jump(block.13)
  mov [rbp-48], rax
.LABEL__get_block_variable_value_84__13:
  # $23.1: Boolean = call(has_next.322, block_predecessors.1)
  .loc 1 1944 12
  mov rdi, [rbp-48]
  call has_next_322
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] $23.1:rax 
  # jump($23.1, block.14, block.15)
  test al, al
  jz .LABEL__get_block_variable_value_84__15
.LABEL__get_block_variable_value_84__14:
  # block_predecessor.1: @IR_Block = call(next.323, block_predecessors.1)
  .loc 1 1945 30
  mov rdi, [rbp-48]
  call next_323
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] block_predecessor.1:rax 
  # $26.1: @IR_Value = call(get_block_variable_value.84, self.1, block_predecessor.1, variable.1)
  .loc 1 1946 28
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_84
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] $26.1:rax 
  # call(append.181, instruction.1, $26.1)
  .loc 1 1946 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call append_181
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # jump(block.13)
  jmp .LABEL__get_block_variable_value_84__13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
.LABEL__get_block_variable_value_84__15:
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 1948 12
  mov rax, [rbp-40]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] $27.1:rax 
  # return($27.1)
  .loc 1 1948 5
  jmp .LABEL__get_block_variable_value_84__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] instruction.1:[rbp-40] block_predecessors.1:[rbp-48] 
  # [discarded value]: instruction.1
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: block.1
  # [discarded value]: variable.1
  # [discarded value]: block_instruction.1
  # [live values]: 
.LABEL__get_block_variable_value_84__end:
  mov rsp, rbp
  pop rbp
  ret

get_block_variable_value_84__stack_frame_size: .word 48

  .loc 1 1951 1
  .text
remove_trivial_phi_instructions_85:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_trivial_phi_instructions_85__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_trivial_phi_instructions_85__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
.LABEL__remove_trivial_phi_instructions_85__2:
  # repeat.1: Boolean = false
  .loc 1 1953 9
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 1 1955 19
  mov rbx, [rbp-8]
  add rbx, 49
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:rax $1.1:rbx 
  # $2.1: @List = call(prune.312, $1.1)
  .loc 1 1955 19
  mov rdi, rbx
  mov [rbp-9], al
  call prune_312
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator.319, $2.1)
  .loc 1 1955 19
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # $4.1: @Any = call(next.323, blocks.1)
  .loc 1 1958 9
  mov rdi, rax
  mov [rbp-17], rax
  call next_323
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # jump(block.4)
.LABEL__remove_trivial_phi_instructions_85__4:
  # repeat.4: Boolean = phi(repeat.1, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # $5.1: Boolean = call(has_next.322, blocks.1)
  .loc 1 1960 16
  mov rdi, [rbp-17]
  call has_next_322
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_85__6
.LABEL__remove_trivial_phi_instructions_85__5:
  # block.1: @IR_Block = call(next.323, blocks.1)
  .loc 1 1961 22
  mov rdi, [rbp-17]
  call next_323
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 1962 34
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:rax block_instruction.1:rbx 
  # jump(block.7)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__remove_trivial_phi_instructions_85__7:
  # repeat.6: Boolean = phi(repeat.4, repeat.7)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] 
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] 
  # $10.1: Boolean = block_instruction.2 != null
  .loc 1 1963 20
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:rax 
  # jump($10.1, block.10, block.11)
  test al, al
  mov [rbp-34], al
  jz .LABEL__remove_trivial_phi_instructions_85__11
.LABEL__remove_trivial_phi_instructions_85__10:
  # IR_Phi_Instruction.5: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] IR_Phi_Instruction.5:rax 
  # $10.2: Boolean = call(is.325, block_instruction.2, IR_Phi_Instruction.5)
  .loc 1 1963 49
  mov rdi, [rbp-33]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Phi_Instruction.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:rax[rbp-34] 
  # jump(block.11)
  mov [rbp-34], al
.LABEL__remove_trivial_phi_instructions_85__11:
  # $10.3: Boolean = phi($10.1, $10.2)
  .loc 1 1963 20
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, block.8, block.4)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_85__4
.LABEL__remove_trivial_phi_instructions_85__8:
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  .loc 1 1964 32
  mov rax, [rbp-33]
  # [discarded value]: $10.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:rax $10.2:[rbp-34] 
  # $13.1: Boolean = call(is_trivial.183, instruction.1)
  .loc 1 1965 21
  mov rdi, rax
  mov [rbp-42], rax
  call is_trivial_183
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $13.1:rax $10.2:[rbp-34] 
  # jump($13.1, block.12, block.13)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_85__13
.LABEL__remove_trivial_phi_instructions_85__12:
  # $14.1: @List = load_struct_member(instruction.1, values)
  .loc 1 1967 21
  mov rax, [rbp-42]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] $14.1:rax 
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 1967 51
  mov rbx, [rbp-42]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] $14.1:rax $15.1:rbx 
  # $16.1: @List = call(remove_all.311, $14.1, $15.1)
  .loc 1 1967 21
  mov rdi, rax
  mov rsi, rbx
  call remove_all_311
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] $16.1:rax 
  # $17.1: @List = call(prune.312, $16.1)
  .loc 1 1967 21
  mov rdi, rax
  call prune_312
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # jump(block.13)
.LABEL__remove_trivial_phi_instructions_85__13:
  # $18.1: Boolean = call(is_redundant.182, instruction.1)
  .loc 1 1969 21
  mov rdi, [rbp-42]
  call is_redundant_182
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] $18.1:rax 
  # jump($18.1, block.14, block.15)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_85__15
.LABEL__remove_trivial_phi_instructions_85__14:
  # old_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 1971 34
  mov rax, [rbp-42]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:rax 
  # $20.1: @List = load_struct_member(instruction.1, values)
  .loc 1 1972 34
  mov rbx, [rbp-42]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:rax $20.1:rbx 
  # new_value.1: @IR_Value = call(first.317, $20.1)
  .loc 1 1972 34
  mov rdi, rbx
  mov [rbp-50], rax
  call first_317
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:rax 
  # $23.1: @List = load_struct_member(old_value.1, user_instructions)
  .loc 1 1973 42
  mov rbx, [rbp-50]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:rax $23.1:rbx 
  # user_instructions.1: @List_Iterator = call(create_iterator.319, $23.1)
  .loc 1 1973 42
  mov rdi, rbx
  mov [rbp-58], rax
  call create_iterator_319
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:rax 
  # jump(block.16)
  mov [rbp-66], rax
.LABEL__remove_trivial_phi_instructions_85__16:
  # $25.1: Boolean = call(has_next.322, user_instructions.1)
  .loc 1 1974 28
  mov rdi, [rbp-66]
  call has_next_322
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] $25.1:rax 
  # jump($25.1, block.17, block.18)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_85__18
.LABEL__remove_trivial_phi_instructions_85__17:
  # user_instruction.1: @IR_Instruction = call(next.323, user_instructions.1)
  .loc 1 1975 45
  mov rdi, [rbp-66]
  call next_323
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] user_instruction.1:rax 
  # call(replace_value.87, user_instruction.1, old_value.1, new_value.1)
  .loc 1 1976 25
  mov rdi, rax
  mov rsi, [rbp-50]
  mov rdx, [rbp-58]
  call replace_value_87
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # jump(block.16)
  jmp .LABEL__remove_trivial_phi_instructions_85__16
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
.LABEL__remove_trivial_phi_instructions_85__18:
  # $28.1: @List = load_struct_member(new_value.1, user_instructions)
  .loc 1 1978 21
  mov rax, [rbp-58]
  add rax, 16
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] $28.1:rax 
  # $29.1: @List = call(remove_all.311, $28.1, instruction.1)
  .loc 1 1978 21
  mov rdi, rax
  mov rsi, [rbp-42]
  call remove_all_311
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] $29.1:rax 
  # $30.1: @List = call(prune.312, $29.1)
  .loc 1 1978 21
  mov rdi, rax
  call prune_312
  # [discarded value]: $29.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # call(remove.148, block.1, instruction.1)
  .loc 1 1979 21
  mov rdi, [rbp-25]
  mov rsi, [rbp-42]
  call remove_148
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # repeat.2: Boolean = true
  .loc 1 1980 21
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.2:rax[rbp-9] 
  # jump(block.15)
  mov [rbp-9], al
.LABEL__remove_trivial_phi_instructions_85__15:
  # repeat.7: Boolean = phi(repeat.2, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.7:[rbp-9] repeat.2:[rbp-9] 
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 1982 37
  mov rax, [rbp-33]
  add rax, 48
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.7:[rbp-9] block_instruction.6:rax[rbp-33] repeat.2:[rbp-9] 
  # jump(block.7)
  mov [rbp-33], rax
  jmp .LABEL__remove_trivial_phi_instructions_85__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.7:[rbp-9] block_instruction.6:[rbp-33] repeat.2:[rbp-9] 
  # [discarded value]: repeat.7
  # [discarded value]: block_instruction.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.2:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] old_value.1:[rbp-50] new_value.1:[rbp-58] user_instructions.1:[rbp-66] 
  # [discarded value]: old_value.1
  # [discarded value]: new_value.1
  # [discarded value]: user_instructions.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] instruction.1:[rbp-42] $10.2:[rbp-34] 
  # [discarded value]: instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] repeat.6:[rbp-9] block_instruction.2:[rbp-33] $10.1:[rbp-34] 
  # [discarded value]: repeat.6
  # [discarded value]: block_instruction.2
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
.LABEL__remove_trivial_phi_instructions_85__6:
  # $32.1: Boolean = repeat.4 == false
  .loc 1 1986 13
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $32.1:rax 
  # jump($32.1, block.3, block.2)
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_85__2
.LABEL__remove_trivial_phi_instructions_85__3:
  # return()
  jmp .LABEL__remove_trivial_phi_instructions_85__end
  # [discarded value]: $32.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: repeat.1
  # [discarded value]: blocks.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_trivial_phi_instructions_85__end:
  mov rsp, rbp
  pop rbp
  ret

remove_trivial_phi_instructions_85__stack_frame_size: .word 80

  .loc 1 1992 1
  .text
remove_redundant_set_instructions_86:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_set_instructions_86__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_set_instructions_86__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_set_instructions_86__2:
  # repeat.1: Boolean = false
  .loc 1 1994 9
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  # $1.1: @List = load_struct_member(function.1, blocks)
  .loc 1 1996 19
  mov rbx, [rbp-8]
  add rbx, 49
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:rax $1.1:rbx 
  # $2.1: @List = call(prune.312, $1.1)
  .loc 1 1996 19
  mov rdi, rbx
  mov [rbp-9], al
  call prune_312
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  # blocks.1: @List_Iterator = call(create_iterator.319, $2.1)
  .loc 1 1996 19
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(block.4)
  mov [rbp-17], rax
.LABEL__remove_redundant_set_instructions_86__4:
  # repeat.5: Boolean = phi(repeat.1, repeat.3, repeat.2, repeat.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # $4.1: Boolean = call(has_next.322, blocks.1)
  .loc 1 1997 16
  mov rdi, [rbp-17]
  call has_next_322
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__6
.LABEL__remove_redundant_set_instructions_86__5:
  # block.1: @IR_Block = call(next.323, blocks.1)
  .loc 1 1998 22
  mov rdi, [rbp-17]
  call next_323
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:rax 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 2000 34
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:rax block_instruction.1:rbx 
  # jump(block.7)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__remove_redundant_set_instructions_86__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.10)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # $8.1: Boolean = block_instruction.2 != null
  .loc 1 2001 20
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:rax 
  # jump($8.1, block.8, block.4)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__4
.LABEL__remove_redundant_set_instructions_86__8:
  # IR_Set_Instruction.3: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] IR_Set_Instruction.3:rax 
  # $9.1: Boolean = call(is.325, block_instruction.2, IR_Set_Instruction.3)
  .loc 1 2002 21
  mov rdi, [rbp-33]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Set_Instruction.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $9.1:rax 
  # jump($9.1, block.10, block.11)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__11
.LABEL__remove_redundant_set_instructions_86__10:
  # block_instruction.1: @IR_Set_Instruction = block_instruction.2
  .loc 1 2003 42
  mov rax, [rbp-33]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:rax 
  # $11.1: @IR_Value = call(get_value.169, block_instruction.1)
  .loc 1 2004 25
  mov rdi, rax
  mov [rbp-41], rax
  call get_value_169
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $11.1:rax 
  # IR_Undefined_Value.3: @Object_Type = load_variable(IR_Undefined_Value)
  lea rbx, IR_Undefined_Value[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $11.1:rax IR_Undefined_Value.3:rbx 
  # $13.1: Boolean = call(is.325, $11.1, IR_Undefined_Value.3)
  .loc 1 2004 25
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $11.1
  # [discarded value]: IR_Undefined_Value.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:rax 
  # jump($13.1, block.12, block.13)
  test al, al
  mov [rbp-42], al
  jz .LABEL__remove_redundant_set_instructions_86__13
.LABEL__remove_redundant_set_instructions_86__12:
  # $14.1: @IR_Variable_Value = load_struct_member(block_instruction.1, result_value)
  .loc 1 2004 81
  mov rax, [rbp-41]
  add rax, 16
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $14.1:rax 
  # $15.1: @List = load_struct_member($14.1, user_instructions)
  .loc 1 2004 81
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $15.1:rbx 
  # $16.1: Int = load_struct_member($15.1, size)
  .loc 1 2004 81
  mov rax, rbx
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $16.1:rax 
  # $13.2: Boolean = $16.1 == 0
  .loc 1 2004 81
  cmp rax, 0
  sete bl
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:rbx[rbp-42] 
  # jump(block.13)
  mov [rbp-42], bl
.LABEL__remove_redundant_set_instructions_86__13:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 1 2004 25
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] $13.3:[rbp-42] 
  # jump($13.3, block.14, block.11)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__11
.LABEL__remove_redundant_set_instructions_86__14:
  # call(remove.148, block.1, block_instruction.1)
  .loc 1 2005 25
  mov rdi, [rbp-25]
  mov rsi, [rbp-41]
  call remove_148
  # [discarded value]: $13.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # repeat.2: Boolean = true
  .loc 1 2006 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] repeat.2:rax[rbp-9] 
  # jump(block.4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_86__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
.LABEL__remove_redundant_set_instructions_86__11:
  # $18.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 2010 21
  mov rax, [rbp-33]
  add rax, 16
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $18.1:rax $13.2:[rbp-42] 
  # $20.1: Boolean = $18.1 != null
  .loc 1 2010 21
  cmp rax, 0
  setne bl
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:rbx $13.2:[rbp-42] 
  # jump($20.1, block.17, block.18)
  test bl, bl
  mov [rbp-43], bl
  jz .LABEL__remove_redundant_set_instructions_86__18
.LABEL__remove_redundant_set_instructions_86__17:
  # $21.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 2010 63
  mov rax, [rbp-33]
  add rax, 16
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $21.1:rax 
  # $22.1: @List = load_struct_member($21.1, user_instructions)
  .loc 1 2010 63
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $22.1:rbx 
  # $23.1: Int = load_struct_member($22.1, size)
  .loc 1 2010 63
  mov rax, rbx
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $23.1:rax 
  # $20.2: Boolean = $23.1 == 1
  .loc 1 2010 63
  cmp rax, 1
  sete bl
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:rbx[rbp-43] 
  # jump(block.18)
  mov [rbp-43], bl
.LABEL__remove_redundant_set_instructions_86__18:
  # $20.3: Boolean = phi($20.1, $20.2)
  .loc 1 2010 21
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] $20.3:[rbp-43] 
  # jump($20.3, block.19, block.20)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__20
.LABEL__remove_redundant_set_instructions_86__19:
  # $25.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  .loc 1 2011 41
  mov rax, [rbp-33]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $20.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] $25.1:rax 
  # $26.1: @List = load_struct_member($25.1, user_instructions)
  .loc 1 2011 41
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] $26.1:rbx 
  # user_instruction.1: @IR_Instruction = call(first.317, $26.1)
  .loc 1 2011 41
  mov rdi, rbx
  call first_317
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax 
  # IR_Set_Instruction.4: @Object_Type = load_variable(IR_Set_Instruction)
  lea rbx, IR_Set_Instruction[rip]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:rax IR_Set_Instruction.4:rbx 
  # $30.1: Boolean = call(is.325, user_instruction.1, IR_Set_Instruction.4)
  .loc 1 2012 25
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-51], rax
  call is_325
  # [discarded value]: IR_Set_Instruction.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:rax 
  # jump($30.1, block.21, block.22)
  test al, al
  mov [rbp-52], al
  jz .LABEL__remove_redundant_set_instructions_86__22
.LABEL__remove_redundant_set_instructions_86__21:
  # $31.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  .loc 1 2012 68
  mov rax, [rbp-51]
  add rax, 32
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $31.1:rax 
  # $30.2: Boolean = $31.1 == block.1
  .loc 1 2012 68
  cmp rax, QWORD PTR [rbp-25]
  sete bl
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:rbx[rbp-52] 
  # jump(block.22)
  mov [rbp-52], bl
.LABEL__remove_redundant_set_instructions_86__22:
  # $30.3: Boolean = phi($30.1, $30.2)
  .loc 1 2012 25
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] $30.3:[rbp-52] 
  # jump($30.3, block.23, block.20)
  mov al, [rbp-52]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__20
.LABEL__remove_redundant_set_instructions_86__23:
  # call(remove.148, block.1, user_instruction.1)
  .loc 1 2013 25
  mov rdi, [rbp-25]
  mov rsi, [rbp-51]
  call remove_148
  # [discarded value]: $30.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # $33.1: @IR_Variable_Value = load_struct_member(user_instruction.1, result_value)
  .loc 1 2014 58
  mov rax, [rbp-51]
  add rax, 16
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] $33.1:rax 
  # store_struct_member(block_instruction.2, result_value, $33.1)
  .loc 1 2014 25
  mov rbx, [rbp-33]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $33.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # repeat.3: Boolean = true
  .loc 1 2015 25
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] repeat.3:rax[rbp-9] 
  # jump(block.4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_86__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
.LABEL__remove_redundant_set_instructions_86__20:
  # block_instruction.10: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 2019 37
  mov rax, [rbp-33]
  add rax, 48
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] block_instruction.10:rax[rbp-33] $30.2:[rbp-52] 
  # jump(block.7)
  mov [rbp-33], rax
  jmp .LABEL__remove_redundant_set_instructions_86__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] block_instruction.10:[rbp-33] $30.2:[rbp-52] 
  # [discarded value]: block_instruction.10
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] $30.2:[rbp-52] 
  # [discarded value]: $30.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] user_instruction.1:[rbp-51] $30.1:[rbp-52] 
  # [discarded value]: user_instruction.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] $20.2:[rbp-43] 
  # [discarded value]: $20.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $20.1:[rbp-43] $13.2:[rbp-42] 
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] $13.2:[rbp-42] 
  # [discarded value]: $13.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] block_instruction.1:[rbp-41] $13.1:[rbp-42] 
  # [discarded value]: block_instruction.1
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  # [discarded value]: block_instruction.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block.1
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
.LABEL__remove_redundant_set_instructions_86__6:
  # $35.1: Boolean = repeat.5 == false
  .loc 1 2023 13
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $35.1:rax 
  # jump($35.1, block.3, block.2)
  test al, al
  jz .LABEL__remove_redundant_set_instructions_86__2
.LABEL__remove_redundant_set_instructions_86__3:
  # return()
  jmp .LABEL__remove_redundant_set_instructions_86__end
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: repeat.1
  # [discarded value]: blocks.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_set_instructions_86__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_set_instructions_86__stack_frame_size: .word 64

  .loc 1 2029 1
  .text
replace_value_87:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_value_87__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_value_87__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: instruction.1:rdi value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: instruction.1:rdi value.1:rsi new_value.1:rdx 
  # $1.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 2030 5
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: instruction.1:rdi value.1:rsi new_value.1:rdx $1.1:rax 
  # $2.1: @List = call(remove.310, $1.1, instruction.1)
  .loc 1 2030 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov [rbp-24], rdx
  call remove_310
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $2.1:rax 
  # $3.1: @List = call(prune.312, $2.1)
  .loc 1 2030 5
  mov rdi, rax
  call prune_312
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # $4.1: @List = load_struct_member(new_value.1, user_instructions)
  .loc 1 2031 5
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $4.1:rax 
  # call(append.308, $4.1, instruction.1)
  .loc 1 2031 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # IR_Phi_Instruction.6: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] IR_Phi_Instruction.6:rax 
  # $5.1: Boolean = call(is.325, instruction.1, IR_Phi_Instruction.6)
  .loc 1 2032 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Phi_Instruction.6
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.2, block.3)
  test al, al
  jz .LABEL__replace_value_87__3
.LABEL__replace_value_87__2:
  # instruction.1: @IR_Phi_Instruction = instruction.1
  .loc 1 2033 24
  mov rax, [rbp-8]
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:rax 
  # $7.1: @List = load_struct_member(instruction.1, values)
  .loc 1 2034 31
  mov rbx, rax
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:rax $7.1:rbx 
  # instruction_values.1: @List_Iterator = call(create_iterator.319, $7.1)
  .loc 1 2034 31
  mov rdi, rbx
  mov [rbp-32], rax
  call create_iterator_319
  # [discarded value]: $7.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:rax 
  # jump(block.4)
  mov [rbp-40], rax
.LABEL__replace_value_87__4:
  # $9.1: Boolean = call(has_next.322, instruction_values.1)
  .loc 1 2035 16
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__replace_value_87__6
.LABEL__replace_value_87__5:
  # instruction_value.1: @IR_Value = call(next.323, instruction_values.1)
  .loc 1 2036 34
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] instruction_value.1:rax 
  # $12.1: Boolean = instruction_value.1 == value.1
  .loc 1 2037 17
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: instruction_value.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $12.1:rbx 
  # jump($12.1, block.7, block.4)
  test bl, bl
  jz .LABEL__replace_value_87__4
.LABEL__replace_value_87__7:
  # $13.1: @List = load_struct_member(instruction.1, values)
  .loc 1 2038 17
  mov rax, [rbp-32]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $13.1:rax 
  # $14.1: @List = call(remove_all.311, $13.1, value.1)
  .loc 1 2038 17
  mov rdi, rax
  mov rsi, [rbp-16]
  call remove_all_311
  # [discarded value]: $13.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $14.1:rax 
  # $15.1: @List = call(remove_all.311, $14.1, new_value.1)
  .loc 1 2038 17
  mov rdi, rax
  mov rsi, [rbp-24]
  call remove_all_311
  # [discarded value]: $14.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $15.1:rax 
  # $16.1: @List = call(prune.312, $15.1)
  .loc 1 2038 17
  mov rdi, rax
  call prune_312
  # [discarded value]: $15.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] $16.1:rax 
  # call(append.308, $16.1, new_value.1)
  .loc 1 2038 17
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $16.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # jump(block.4)
  jmp .LABEL__replace_value_87__4
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
.LABEL__replace_value_87__6:
  # return()
  .loc 1 2041 9
  jmp .LABEL__replace_value_87__end
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] instruction.1:[rbp-32] instruction_values.1:[rbp-40] 
  # [discarded value]: instruction.1
  # [discarded value]: instruction_values.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
.LABEL__replace_value_87__3:
  # $17.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 2043 5
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] $17.1:rax 
  # call(replace.313, $17.1, value.1, new_value.1)
  .loc 1 2043 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call replace_313
  # [discarded value]: $17.1
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # return()
  jmp .LABEL__replace_value_87__end
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] value.1:[rbp-16] new_value.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [discarded value]: value.1
  # [discarded value]: new_value.1
  # [live values]: 
.LABEL__replace_value_87__end:
  mov rsp, rbp
  pop rbp
  ret

replace_value_87__stack_frame_size: .word 48

  .loc 1 2046 1
  .text
convert_statement_88:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_statement_88__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_statement_88__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2047 9
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 1 2047 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__convert_statement_88__3
.LABEL__convert_statement_88__2:
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 2048 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax 
  # $4.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 1 2048 41
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax $4.1:rbx 
  # $5.1: @String = load_struct_member($4.1, name)
  .loc 1 2048 41
  mov r15, rbx
  add r15, 8
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax $5.1:r15 
  # $6.1: @String = call(clone.329, $5.1)
  .loc 1 2048 35
  mov rdi, r15
  mov [rbp-24], rax
  call clone_329
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:[rbp-24] $6.1:rax 
  # $7.1: @String = call(append.332, $6.1, " requires a basic block.")
  .loc 1 2048 35
  mov rdi, rax
  lea rsi, .LABEL__string_176[rip] # " requires a basic block."
  call append_332
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:[rbp-24] $7.1:rax 
  # call(abort.271, $3.1, $7.1)
  .loc 1 2048 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_271
  # [discarded value]: $3.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__3:
  # AST_Assignment_Statement.2: @Object_Type = load_variable(AST_Assignment_Statement)
  lea rax, AST_Assignment_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Assignment_Statement.2:rax 
  # $8.1: Boolean = call(is.325, statement.1, AST_Assignment_Statement.2)
  .loc 1 2050 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Assignment_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $8.1:rax 
  # jump($8.1, block.4, block.6)
  test al, al
  jz .LABEL__convert_statement_88__6
.LABEL__convert_statement_88__4:
  # $27.1: @AST_Assignment_Statement = statement.1
  .loc 1 2051 43
  mov rax, [rbp-8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $27.1:rax 
  # call(convert_assignment_statement.89, self.1, $27.1)
  .loc 1 2051 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_assignment_statement_89
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
.LABEL__convert_statement_88__5:
  # return()
  jmp .LABEL__convert_statement_88__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__6:
  # AST_Block_Statement.2: @Object_Type = load_variable(AST_Block_Statement)
  lea rax, AST_Block_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Block_Statement.2:rax 
  # $9.1: Boolean = call(is.325, statement.1, AST_Block_Statement.2)
  .loc 1 2052 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Block_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.7, block.9)
  test al, al
  jz .LABEL__convert_statement_88__9
.LABEL__convert_statement_88__7:
  # $26.1: @AST_Block_Statement = statement.1
  .loc 1 2053 38
  mov rax, [rbp-8]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $26.1:rax 
  # call(convert_block_statement.90, self.1, $26.1)
  .loc 1 2053 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_block_statement_90
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__9:
  # AST_Break_Statement.2: @Object_Type = load_variable(AST_Break_Statement)
  lea rax, AST_Break_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Break_Statement.2:rax 
  # $10.1: Boolean = call(is.325, statement.1, AST_Break_Statement.2)
  .loc 1 2054 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Break_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $10.1:rax 
  # jump($10.1, block.10, block.12)
  test al, al
  jz .LABEL__convert_statement_88__12
.LABEL__convert_statement_88__10:
  # $25.1: @AST_Break_Statement = statement.1
  .loc 1 2055 38
  mov rax, [rbp-8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $25.1:rax 
  # call(convert_break_statement.91, self.1, $25.1)
  .loc 1 2055 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_break_statement_91
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__12:
  # AST_Expression_Statement.2: @Object_Type = load_variable(AST_Expression_Statement)
  lea rax, AST_Expression_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Expression_Statement.2:rax 
  # $11.1: Boolean = call(is.325, statement.1, AST_Expression_Statement.2)
  .loc 1 2056 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Expression_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $11.1:rax 
  # jump($11.1, block.13, block.15)
  test al, al
  jz .LABEL__convert_statement_88__15
.LABEL__convert_statement_88__13:
  # $24.1: @AST_Expression_Statement = statement.1
  .loc 1 2057 43
  mov rax, [rbp-8]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $24.1:rax 
  # call(convert_expression_statement.92, self.1, $24.1)
  .loc 1 2057 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_expression_statement_92
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__15:
  # AST_If_Statement.2: @Object_Type = load_variable(AST_If_Statement)
  lea rax, AST_If_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_If_Statement.2:rax 
  # $12.1: Boolean = call(is.325, statement.1, AST_If_Statement.2)
  .loc 1 2058 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_If_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $12.1:rax 
  # jump($12.1, block.16, block.18)
  test al, al
  jz .LABEL__convert_statement_88__18
.LABEL__convert_statement_88__16:
  # $23.1: @AST_If_Statement = statement.1
  .loc 1 2059 35
  mov rax, [rbp-8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $23.1:rax 
  # call(convert_if_statement.93, self.1, $23.1)
  .loc 1 2059 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_if_statement_93
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__18:
  # AST_Loop_Statement.2: @Object_Type = load_variable(AST_Loop_Statement)
  lea rax, AST_Loop_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Loop_Statement.2:rax 
  # $13.1: Boolean = call(is.325, statement.1, AST_Loop_Statement.2)
  .loc 1 2060 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Loop_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $13.1:rax 
  # jump($13.1, block.19, block.21)
  test al, al
  jz .LABEL__convert_statement_88__21
.LABEL__convert_statement_88__19:
  # $22.1: @AST_Loop_Statement = statement.1
  .loc 1 2061 37
  mov rax, [rbp-8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $22.1:rax 
  # call(convert_loop_statement.94, self.1, $22.1)
  .loc 1 2061 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_loop_statement_94
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__21:
  # AST_Return_Statement.2: @Object_Type = load_variable(AST_Return_Statement)
  lea rax, AST_Return_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Return_Statement.2:rax 
  # $14.1: Boolean = call(is.325, statement.1, AST_Return_Statement.2)
  .loc 1 2062 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Return_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $14.1:rax 
  # jump($14.1, block.22, block.24)
  test al, al
  jz .LABEL__convert_statement_88__24
.LABEL__convert_statement_88__22:
  # $21.1: @AST_Return_Statement = statement.1
  .loc 1 2063 39
  mov rax, [rbp-8]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $21.1:rax 
  # call(convert_return_statement.95, self.1, $21.1)
  .loc 1 2063 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_return_statement_95
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__24:
  # AST_Variable_Statement.2: @Object_Type = load_variable(AST_Variable_Statement)
  lea rax, AST_Variable_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_Variable_Statement.2:rax 
  # $15.1: Boolean = call(is.325, statement.1, AST_Variable_Statement.2)
  .loc 1 2064 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $15.1:rax 
  # jump($15.1, block.25, block.27)
  test al, al
  jz .LABEL__convert_statement_88__27
.LABEL__convert_statement_88__25:
  # $20.1: @AST_Variable_Statement = statement.1
  .loc 1 2065 41
  mov rax, [rbp-8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $20.1:rax 
  # call(convert_variable_statement.96, self.1, $20.1)
  .loc 1 2065 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_variable_statement_96
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__27:
  # AST_While_Statement.2: @Object_Type = load_variable(AST_While_Statement)
  lea rax, AST_While_Statement[rip]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] AST_While_Statement.2:rax 
  # $16.1: Boolean = call(is.325, statement.1, AST_While_Statement.2)
  .loc 1 2066 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_While_Statement.2
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $16.1:rax 
  # jump($16.1, block.28, block.30)
  test al, al
  jz .LABEL__convert_statement_88__30
.LABEL__convert_statement_88__28:
  # $19.1: @AST_While_Statement = statement.1
  .loc 1 2067 38
  mov rax, [rbp-8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $19.1:rax 
  # call(convert_while_statement.97, self.1, $19.1)
  .loc 1 2067 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_while_statement_97
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__convert_statement_88__5
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_statement_88__30:
  # $17.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 2069 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $17.1:rax 
  # $18.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 1 2069 35
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $17.1:rax $18.1:rbx 
  # call(abort.127, $17.1, $18.1)
  .loc 1 2069 9
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_statement_88__end:
  mov rsp, rbp
  pop rbp
  ret

convert_statement_88__stack_frame_size: .word 32

  .loc 1 2073 1
  .text
convert_assignment_statement_89:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_assignment_statement_89__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_assignment_statement_89__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # assignment_statement.1: @AST_Assignment_Statement = load_variable(assignment_statement)
  # [live values]: self.1:rdi assignment_statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2074 9
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax 
  # AST_Array_Access_Expression.2: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rbx, AST_Array_Access_Expression[rip]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax AST_Array_Access_Expression.2:rbx 
  # $2.1: Boolean = call(is.325, $1.1, AST_Array_Access_Expression.2)
  .loc 1 2074 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_325
  # [discarded value]: $1.1
  # [discarded value]: AST_Array_Access_Expression.2
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.4)
  test al, al
  jz .LABEL__convert_assignment_statement_89__4
.LABEL__convert_assignment_statement_89__2:
  # array_access_expression.1: @AST_Array_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2075 36
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:rax 
  # $97.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  .loc 1 2076 59
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:rax $97.1:rbx 
  # array_item_index_value.1: @IR_Value = call(convert_expression.98, self.1, $97.1)
  .loc 1 2076 35
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:[rbp-24] array_item_index_value.1:rax 
  # $99.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 1 2077 42
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:[rbp-24] array_item_index_value.1:rax $99.1:rbx 
  # value.1: @IR_Value = call(convert_expression.98, self.1, $99.1)
  .loc 1 2077 18
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call convert_expression_98
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_access_expression.1:[rbp-24] array_item_index_value.1:[rbp-32] value.1:rax 
  # $101.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  .loc 1 2078 58
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: array_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:rax $101.1:rbx 
  # array_address.1: @IR_Value = call(convert_expression_address.99, self.1, $101.1)
  .loc 1 2078 26
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-40], rax
  call convert_expression_address_99
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:rax 
  # $103.1: @IR_Type = load_struct_member(array_address.1, type)
  .loc 1 2079 13
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:rax $103.1:rbx 
  # IR_Pointer_Type.11: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:rax $103.1:rbx IR_Pointer_Type.11:r15 
  # $104.1: Boolean = call(is.325, $103.1, IR_Pointer_Type.11)
  .loc 1 2079 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-48], rax
  call is_325
  # [discarded value]: $103.1
  # [discarded value]: IR_Pointer_Type.11
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $104.1:rax 
  # $105.1: Boolean = $104.1 == false
  .loc 1 2079 13
  cmp al, 0
  sete bl
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $105.1:rbx 
  # jump($105.1, block.23, block.24)
  test bl, bl
  jz .LABEL__convert_assignment_statement_89__24
.LABEL__convert_assignment_statement_89__23:
  # $106.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2080 19
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $106.1:rax 
  # $107.1: @String = call(clone.329, "Not an array pointer")
  .loc 1 2080 50
  lea rdi, .LABEL__string_177[rip] # "Not an array pointer"
  mov [rbp-56], rax
  call clone_329
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $106.1:[rbp-56] $107.1:rax 
  # call(abort.271, $106.1, $107.1)
  .loc 1 2080 13
  mov rdi, [rbp-56]
  mov rsi, rax
  call abort_271
  # [discarded value]: $106.1
  # [discarded value]: $107.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
.LABEL__convert_assignment_statement_89__24:
  # $109.1: @IR_Pointer_Type = load_struct_member(array_address.1, type)
  .loc 1 2082 29
  mov rax, [rbp-48]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $109.1:rax 
  # array_item_type.1: @IR_Type = load_struct_member($109.1, pointed_type)
  .loc 1 2082 29
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] array_item_type.1:rbx 
  # $111.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2083 37
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] array_item_type.1:rbx $111.1:rax 
  # $112.1: Boolean = call(accepts.68, array_item_type.1, $111.1)
  .loc 1 2083 13
  mov rdi, rbx
  mov rsi, rax
  call accepts_68
  # [discarded value]: array_item_type.1
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $112.1:rax 
  # $113.1: Boolean = $112.1 == false
  .loc 1 2083 13
  cmp al, 0
  sete bl
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $113.1:rbx 
  # jump($113.1, block.25, block.26)
  test bl, bl
  jz .LABEL__convert_assignment_statement_89__26
.LABEL__convert_assignment_statement_89__25:
  # $114.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 1 2084 19
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $114.1:rax 
  # $115.1: @Source_Location = load_struct_member($114.1, location)
  .loc 1 2084 19
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $115.1:rbx 
  # call(abort.271, $115.1, "Invalid expression type")
  .loc 1 2084 13
  mov rdi, rbx
  lea rsi, .LABEL__string_178[rip] # "Invalid expression type"
  call abort_271
  # [discarded value]: $115.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
.LABEL__convert_assignment_statement_89__26:
  # $116.1: @IR_Store_Array_Item_Instruction = call(create_ir_store_array_item_instruction.170, array_address.1, array_item_index_value.1, value.1)
  .loc 1 2086 21
  mov rdi, [rbp-48]
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call create_ir_store_array_item_instruction_170
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $116.1:rax 
  # $117.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2086 107
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] $116.1:rax $117.1:rbx 
  # $118.1: @IR_Variable_Value = call(append.71, self.1, $116.1, $117.1)
  .loc 1 2086 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $116.1
  # [discarded value]: $117.1
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
  # jump(block.3)
.LABEL__convert_assignment_statement_89__3:
  # return()
  jmp .LABEL__convert_assignment_statement_89__end
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] array_item_index_value.1:[rbp-32] value.1:[rbp-40] array_address.1:[rbp-48] 
  # [discarded value]: array_item_index_value.1
  # [discarded value]: value.1
  # [discarded value]: array_address.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
.LABEL__convert_assignment_statement_89__4:
  # $3.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2087 16
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $3.1:rax 
  # AST_Member_Access_Expression.2: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rbx, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $3.1:rax AST_Member_Access_Expression.2:rbx 
  # $4.1: Boolean = call(is.325, $3.1, AST_Member_Access_Expression.2)
  .loc 1 2087 16
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $3.1
  # [discarded value]: AST_Member_Access_Expression.2
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.7)
  test al, al
  jz .LABEL__convert_assignment_statement_89__7
.LABEL__convert_assignment_statement_89__5:
  # $39.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 1 2088 42
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $39.1:rax 
  # value.1: @IR_Value = call(convert_expression.98, self.1, $39.1)
  .loc 1 2088 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax 
  # member_access_expression.1: @AST_Member_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2089 37
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax member_access_expression.1:rbx 
  # $43.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  .loc 1 2090 65
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax member_access_expression.1:rbx $43.1:r15 
  # object_address_value.1: @IR_Value = call(convert_expression_address.99, self.1, $43.1)
  .loc 1 2090 33
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-24], rax
  mov [rbp-32], rbx
  call convert_expression_address_99
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:rax 
  # $45.1: @IR_Type = load_struct_member(object_address_value.1, type)
  .loc 1 2091 13
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:rax $45.1:rbx 
  # IR_Pointer_Type.9: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:rax $45.1:rbx IR_Pointer_Type.9:r15 
  # $46.1: Boolean = call(is.325, $45.1, IR_Pointer_Type.9)
  .loc 1 2091 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  call is_325
  # [discarded value]: $45.1
  # [discarded value]: IR_Pointer_Type.9
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $46.1:rax 
  # $47.1: Boolean = $46.1 == false
  .loc 1 2091 13
  cmp al, 0
  sete bl
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $47.1:rbx 
  # jump($47.1, block.15, block.16)
  test bl, bl
  jz .LABEL__convert_assignment_statement_89__16
.LABEL__convert_assignment_statement_89__15:
  # $48.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2092 19
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $48.1:rax 
  # $49.1: @String = call(clone.329, "Not a '")
  .loc 1 2092 50
  lea rdi, .LABEL__string_179[rip] # "Not a '"
  mov [rbp-48], rax
  call clone_329
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $48.1:[rbp-48] $49.1:rax 
  # IR_Pointer_Type.10: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $48.1:[rbp-48] $49.1:rax IR_Pointer_Type.10:rbx 
  # $50.1: @String = load_struct_member(IR_Pointer_Type.10, name)
  .loc 1 2092 74
  mov r15, rbx
  add r15, 8
  # [discarded value]: IR_Pointer_Type.10
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $48.1:[rbp-48] $49.1:rax $50.1:r15 
  # $51.1: @String = call(append.332, $49.1, $50.1)
  .loc 1 2092 50
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $48.1:[rbp-48] $51.1:rax 
  # $52.1: @String = call(append.332, $51.1, "' value")
  .loc 1 2092 50
  mov rdi, rax
  lea rsi, .LABEL__string_180[rip] # "' value"
  call append_332
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $48.1:[rbp-48] $52.1:rax 
  # call(abort.271, $48.1, $52.1)
  .loc 1 2092 13
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_271
  # [discarded value]: $48.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] 
.LABEL__convert_assignment_statement_89__16:
  # $54.1: @IR_Pointer_Type = load_struct_member(object_address_value.1, type)
  .loc 1 2094 25
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] $54.1:rax 
  # object_type.1: @IR_Type = load_struct_member($54.1, pointed_type)
  .loc 1 2094 25
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:rbx 
  # IR_Struct_Type.9: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:rbx IR_Struct_Type.9:rax 
  # $56.1: Boolean = call(is.325, object_type.1, IR_Struct_Type.9)
  .loc 1 2095 13
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-48], rbx
  call is_325
  # [discarded value]: IR_Struct_Type.9
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $56.1:rax 
  # $57.1: Boolean = $56.1 == false
  .loc 1 2095 13
  cmp al, 0
  sete bl
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $57.1:rbx 
  # jump($57.1, block.17, block.18)
  test bl, bl
  jz .LABEL__convert_assignment_statement_89__18
.LABEL__convert_assignment_statement_89__17:
  # $58.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2096 19
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $58.1:rax 
  # $59.1: @String = call(clone.329, "Not a '")
  .loc 1 2096 50
  lea rdi, .LABEL__string_179[rip] # "Not a '"
  mov [rbp-56], rax
  call clone_329
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $58.1:[rbp-56] $59.1:rax 
  # IR_Struct_Type.10: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $58.1:[rbp-56] $59.1:rax IR_Struct_Type.10:rbx 
  # $60.1: @String = load_struct_member(IR_Struct_Type.10, name)
  .loc 1 2096 74
  mov r15, rbx
  add r15, 8
  # [discarded value]: IR_Struct_Type.10
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $58.1:[rbp-56] $59.1:rax $60.1:r15 
  # $61.1: @String = call(append.332, $59.1, $60.1)
  .loc 1 2096 50
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $59.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $58.1:[rbp-56] $61.1:rax 
  # $62.1: @String = call(append.332, $61.1, "' value")
  .loc 1 2096 50
  mov rdi, rax
  lea rsi, .LABEL__string_180[rip] # "' value"
  call append_332
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $58.1:[rbp-56] $62.1:rax 
  # call(abort.271, $58.1, $62.1)
  .loc 1 2096 13
  mov rdi, [rbp-56]
  mov rsi, rax
  call abort_271
  # [discarded value]: $58.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] 
.LABEL__convert_assignment_statement_89__18:
  # $63.1: @IR_Struct_Type = object_type.1
  .loc 1 2098 32
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $63.1:rax 
  # $64.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 1 2098 75
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $63.1:rax $64.1:rbx 
  # $65.1: @String = load_struct_member($64.1, lexeme)
  .loc 1 2098 75
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] $63.1:rax $65.1:r15 
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member.137, $63.1, $65.1)
  .loc 1 2098 32
  mov rdi, rax
  mov rsi, r15
  call get_member_137
  # [discarded value]: $63.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:rax 
  # $67.1: Boolean = struct_type_member.1 == null
  .loc 1 2099 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:rax $67.1:rbx 
  # jump($67.1, block.19, block.20)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__convert_assignment_statement_89__20
.LABEL__convert_assignment_statement_89__19:
  # $68.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 1 2100 19
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $68.1:rax 
  # $69.1: @Source_Location = load_struct_member($68.1, location)
  .loc 1 2100 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:rbx 
  # $70.1: @String = load_struct_member(object_type.1, name)
  .loc 1 2100 72
  mov rax, [rbp-48]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:rbx $70.1:rax 
  # $71.1: @String = call(clone.329, $70.1)
  .loc 1 2100 66
  mov rdi, rax
  mov [rbp-64], rbx
  call clone_329
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:[rbp-64] $71.1:rax 
  # $72.1: @String = call(append.332, $71.1, " doesn't have a '")
  .loc 1 2100 66
  mov rdi, rax
  lea rsi, .LABEL__string_181[rip] # " doesn't have a '"
  call append_332
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:[rbp-64] $72.1:rax 
  # $73.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 1 2100 125
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:[rbp-64] $72.1:rax $73.1:rbx 
  # $74.1: @String = load_struct_member($73.1, lexeme)
  .loc 1 2100 125
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:[rbp-64] $72.1:rax $74.1:r15 
  # $75.1: @String = call(append.332, $72.1, $74.1)
  .loc 1 2100 66
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $72.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:[rbp-64] $75.1:rax 
  # $76.1: @String = call(append.332, $75.1, "' member")
  .loc 1 2100 66
  mov rdi, rax
  lea rsi, .LABEL__string_182[rip] # "' member"
  call append_332
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $69.1:[rbp-64] $76.1:rax 
  # call(abort.271, $69.1, $76.1)
  .loc 1 2100 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_271
  # [discarded value]: $69.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_assignment_statement_89__20:
  # $77.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 1 2102 13
  mov rax, [rbp-56]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $77.1:rax 
  # $78.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2102 45
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $77.1:rax $78.1:rbx 
  # $79.1: Boolean = call(accepts.68, $77.1, $78.1)
  .loc 1 2102 13
  mov rdi, rax
  mov rsi, rbx
  call accepts_68
  # [discarded value]: $77.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $79.1:rax 
  # $80.1: Boolean = $79.1 == false
  .loc 1 2102 13
  cmp al, 0
  sete bl
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $80.1:rbx 
  # jump($80.1, block.21, block.22)
  test bl, bl
  jz .LABEL__convert_assignment_statement_89__22
.LABEL__convert_assignment_statement_89__21:
  # $81.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 1 2103 19
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $81.1:rax 
  # $82.1: @Source_Location = load_struct_member($81.1, location)
  .loc 1 2103 19
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:rbx 
  # $83.1: @String = call(clone.329, "Cannot assign a '")
  .loc 1 2103 67
  lea rdi, .LABEL__string_183[rip] # "Cannot assign a '"
  mov [rbp-64], rbx
  call clone_329
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $83.1:rax 
  # $84.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2103 101
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $83.1:rax $84.1:rbx 
  # $85.1: @String = load_struct_member($84.1, name)
  .loc 1 2103 101
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $83.1:rax $85.1:r15 
  # $86.1: @String = call(append.332, $83.1, $85.1)
  .loc 1 2103 67
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $83.1
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $86.1:rax 
  # $87.1: @String = call(append.332, $86.1, "' value to a '")
  .loc 1 2103 67
  mov rdi, rax
  lea rsi, .LABEL__string_184[rip] # "' value to a '"
  call append_332
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $87.1:rax 
  # $88.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 1 2103 150
  mov rbx, [rbp-56]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $87.1:rax $88.1:rbx 
  # $89.1: @String = load_struct_member($88.1, name)
  .loc 1 2103 150
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $87.1:rax $89.1:r15 
  # $90.1: @String = call(append.332, $87.1, $89.1)
  .loc 1 2103 67
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $87.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $90.1:rax 
  # $91.1: @String = call(append.332, $90.1, "' struct member")
  .loc 1 2103 67
  mov rdi, rax
  lea rsi, .LABEL__string_185[rip] # "' struct member"
  call append_332
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $82.1:[rbp-64] $91.1:rax 
  # call(abort.271, $82.1, $91.1)
  .loc 1 2103 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_271
  # [discarded value]: $82.1
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_assignment_statement_89__22:
  # $92.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction.174, object_address_value.1, struct_type_member.1, value.1)
  .loc 1 2105 21
  mov rdi, [rbp-40]
  mov rsi, [rbp-56]
  mov rdx, [rbp-24]
  call create_ir_store_struct_member_instruction_174
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $92.1:rax 
  # $93.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2105 113
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] $92.1:rax $93.1:rbx 
  # $94.1: @IR_Variable_Value = call(append.71, self.1, $92.1, $93.1)
  .loc 1 2105 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $92.1
  # [discarded value]: $93.1
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # jump(block.3)
  jmp .LABEL__convert_assignment_statement_89__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] object_type.1:[rbp-48] 
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] member_access_expression.1:[rbp-32] object_address_value.1:[rbp-40] 
  # [discarded value]: value.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: object_address_value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
.LABEL__convert_assignment_statement_89__7:
  # $5.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2106 16
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $5.1:rax 
  # AST_Variable_Expression.2: @Object_Type = load_variable(AST_Variable_Expression)
  lea rbx, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $5.1:rax AST_Variable_Expression.2:rbx 
  # $6.1: Boolean = call(is.325, $5.1, AST_Variable_Expression.2)
  .loc 1 2106 16
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: AST_Variable_Expression.2
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $6.1:rax 
  # jump($6.1, block.8, block.10)
  test al, al
  jz .LABEL__convert_assignment_statement_89__10
.LABEL__convert_assignment_statement_89__8:
  # $10.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  .loc 1 2107 42
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $10.1:rax 
  # value.1: @IR_Value = call(convert_expression.98, self.1, $10.1)
  .loc 1 2107 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax 
  # variable_expression.1: @AST_Variable_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2108 32
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax variable_expression.1:rbx 
  # $14.1: @Identifier_Token = load_struct_member(variable_expression.1, name)
  .loc 1 2109 26
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax variable_expression.1:rbx $14.1:r15 
  # variable_name.1: @String = load_struct_member($14.1, lexeme)
  .loc 1 2109 26
  mov r14, r15
  add r14, 8
  mov r14, [r14]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:rax variable_expression.1:rbx variable_name.1:r14 
  # variable.1: @IR_Variable = call(get_variable.63, self.1, variable_name.1)
  .loc 1 2110 21
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-24], rax
  mov [rbp-32], rbx
  mov [rbp-40], r14
  call get_variable_63
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:rax 
  # $17.1: Boolean = variable.1 == null
  .loc 1 2111 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:rax $17.1:rbx 
  # jump($17.1, block.11, block.12)
  test bl, bl
  mov [rbp-48], rax
  jz .LABEL__convert_assignment_statement_89__12
.LABEL__convert_assignment_statement_89__11:
  # $18.1: @Source_Location = load_struct_member(variable_expression.1, location)
  .loc 1 2112 19
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $18.1:rax 
  # $19.1: @String = call(clone.329, "Undeclared variable: ")
  .loc 1 2112 49
  lea rdi, .LABEL__string_186[rip] # "Undeclared variable: "
  mov [rbp-56], rax
  call clone_329
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  # $20.1: @String = call(append.332, $19.1, variable_name.1)
  .loc 1 2112 49
  mov rdi, rax
  mov rsi, [rbp-40]
  call append_332
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $18.1:[rbp-56] $20.1:rax 
  # call(abort.271, $18.1, $20.1)
  .loc 1 2112 13
  mov rdi, [rbp-56]
  mov rsi, rax
  call abort_271
  # [discarded value]: $18.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] 
.LABEL__convert_assignment_statement_89__12:
  # $21.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 1 2114 13
  mov rax, [rbp-48]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $21.1:rax 
  # $22.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2114 35
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $21.1:rax $22.1:rbx 
  # $23.1: Boolean = call(accepts.68, $21.1, $22.1)
  .loc 1 2114 13
  mov rdi, rax
  mov rsi, rbx
  call accepts_68
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $23.1:rax 
  # $24.1: Boolean = $23.1 == false
  .loc 1 2114 13
  cmp al, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $24.1:rbx 
  # jump($24.1, block.13, block.14)
  test bl, bl
  jz .LABEL__convert_assignment_statement_89__14
.LABEL__convert_assignment_statement_89__13:
  # $25.1: @Source_Location = load_struct_member(variable_expression.1, location)
  .loc 1 2115 19
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:rax 
  # $26.1: @String = call(clone.329, "Cannot assign a '")
  .loc 1 2115 49
  lea rdi, .LABEL__string_183[rip] # "Cannot assign a '"
  mov [rbp-56], rax
  call clone_329
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $26.1:rax 
  # $27.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2115 83
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $26.1:rax $27.1:rbx 
  # $28.1: @String = load_struct_member($27.1, name)
  .loc 1 2115 83
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $26.1:rax $28.1:r15 
  # $29.1: @String = call(append.332, $26.1, $28.1)
  .loc 1 2115 49
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $26.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $29.1:rax 
  # $30.1: @String = call(append.332, $29.1, "' value to a '")
  .loc 1 2115 49
  mov rdi, rax
  lea rsi, .LABEL__string_184[rip] # "' value to a '"
  call append_332
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $30.1:rax 
  # $31.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 1 2115 132
  mov rbx, [rbp-48]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $30.1:rax $31.1:rbx 
  # $32.1: @String = load_struct_member($31.1, name)
  .loc 1 2115 132
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $30.1:rax $32.1:r15 
  # $33.1: @String = call(append.332, $30.1, $32.1)
  .loc 1 2115 49
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $30.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $33.1:rax 
  # $34.1: @String = call(append.332, $33.1, "' variable")
  .loc 1 2115 49
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # "' variable"
  call append_332
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $25.1:[rbp-56] $34.1:rax 
  # call(abort.271, $25.1, $34.1)
  .loc 1 2115 13
  mov rdi, [rbp-56]
  mov rsi, rax
  call abort_271
  # [discarded value]: $25.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] 
.LABEL__convert_assignment_statement_89__14:
  # $35.1: @IR_Variable_Value = call(create_variable_value.65, self.1, variable.1)
  .loc 1 2117 47
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $35.1:rax 
  # $36.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, $35.1, value.1)
  .loc 1 2117 21
  mov rdi, rax
  mov rsi, [rbp-24]
  call create_ir_set_instruction_168
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $36.1:rax 
  # $37.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2117 93
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] $36.1:rax $37.1:rbx 
  # $38.1: @IR_Variable_Value = call(append.71, self.1, $36.1, $37.1)
  .loc 1 2117 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] 
  # jump(block.3)
  jmp .LABEL__convert_assignment_statement_89__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] value.1:[rbp-24] variable_expression.1:[rbp-32] variable_name.1:[rbp-40] variable.1:[rbp-48] 
  # [discarded value]: value.1
  # [discarded value]: variable_expression.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
.LABEL__convert_assignment_statement_89__10:
  # $7.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  .loc 1 2119 15
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $7.1:rax 
  # $8.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  .loc 1 2119 46
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $7.1:rax $8.1:rbx 
  # $9.1: @Object_Type = load_struct_member($8.1, object_type)
  .loc 1 2119 46
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $7.1:rax $9.1:r15 
  # call(abort.127, $7.1, $9.1)
  .loc 1 2119 9
  mov rdi, rax
  mov rsi, r15
  call abort_127
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: assignment_statement.1
  # [live values]: 
.LABEL__convert_assignment_statement_89__end:
  mov rsp, rbp
  pop rbp
  ret

convert_assignment_statement_89__stack_frame_size: .word 64

  .loc 1 2123 1
  .text
convert_block_statement_90:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_block_statement_90__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_block_statement_90__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Block_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 1 2124 46
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Builder_Context = call(create_ir_builder_context.59, $1.1, true)
  .loc 1 2124 20
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov sil, 1
  call create_ir_builder_context_59
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $2.1:rax 
  # store_struct_member(self.1, context, $2.1)
  .loc 1 2124 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # $3.1: @List = load_struct_member(statement.1, statements)
  .loc 1 2125 25
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # block_statements.1: @List_Iterator = call(create_iterator.319, $3.1)
  .loc 1 2125 25
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] block_statements.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__convert_block_statement_90__2:
  # $5.1: Boolean = call(has_next.322, block_statements.1)
  .loc 1 2126 12
  mov rdi, [rbp-16]
  call has_next_322
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__convert_block_statement_90__4
.LABEL__convert_block_statement_90__3:
  # block_statement.1: @AST_Statement = call(next.323, block_statements.1)
  .loc 1 2127 28
  mov rdi, [rbp-16]
  call next_323
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] block_statement.1:rax 
  # call(convert_statement.88, self.1, block_statement.1)
  .loc 1 2128 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_statement_88
  # [discarded value]: block_statement.1
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] 
  # jump(block.2)
  jmp .LABEL__convert_block_statement_90__2
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] 
.LABEL__convert_block_statement_90__4:
  # $8.1: @IR_Builder_Context = load_struct_member(self.1, context)
  .loc 1 2130 20
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Builder_Context = load_struct_member($8.1, parent)
  .loc 1 2130 20
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] $9.1:rbx 
  # store_struct_member(self.1, context, $9.1)
  .loc 1 2130 5
  mov rax, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] 
  # return()
  jmp .LABEL__convert_block_statement_90__end
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] block_statements.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: block_statements.1
  # [live values]: 
.LABEL__convert_block_statement_90__end:
  mov rsp, rbp
  pop rbp
  ret

convert_block_statement_90__stack_frame_size: .word 16

  .loc 1 2133 1
  .text
convert_break_statement_91:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_break_statement_91__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_break_statement_91__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Break_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 1 2134 9
  mov rax, rdi
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 1 2134 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__convert_break_statement_91__3
.LABEL__convert_break_statement_91__2:
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 2135 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax 
  # call(abort.271, $3.1, "Break outside of a loop?")
  .loc 1 2135 9
  mov rdi, rax
  lea rsi, .LABEL__string_188[rip] # "Break outside of a loop?"
  call abort_271
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_break_statement_91__3:
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2137 5
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $4.1:rax 
  # $5.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 1 2137 36
  mov rbx, [rbp-16]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $4.1:rax $5.1:rbx 
  # $6.1: @IR_Block = load_struct_member($5.1, end_block)
  .loc 1 2137 36
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $4.1:rax $6.1:r15 
  # $7.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $4.1, $6.1)
  .loc 1 2137 5
  mov rdi, rax
  mov rsi, r15
  call append_jump_146
  # [discarded value]: $4.1
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # $8.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2138 26
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $8.1:rax 
  # $9.1: @IR_Function = load_struct_member($8.1, function)
  .loc 1 2138 26
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $9.1:rbx 
  # $10.1: @IR_Block = call(create_block.149, $9.1)
  .loc 1 2138 26
  mov rdi, rbx
  call create_block_149
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $10.1:rax 
  # store_struct_member(self.1, current_block, $10.1)
  .loc 1 2138 5
  mov rbx, [rbp-16]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # return()
  jmp .LABEL__convert_break_statement_91__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_break_statement_91__end:
  mov rsp, rbp
  pop rbp
  ret

convert_break_statement_91__stack_frame_size: .word 16

  .loc 1 2141 1
  .text
convert_expression_statement_92:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_statement_92__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_statement_92__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Expression_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(statement.1, expression)
  .loc 1 2142 29
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [discarded value]: statement.1
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2142 5
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_expression_statement_92__end
  # [live values]: 
.LABEL__convert_expression_statement_92__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_statement_92__stack_frame_size: .word 0

  .loc 1 2145 1
  .text
convert_if_statement_93:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_if_statement_93__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_if_statement_93__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_If_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 1 2146 48
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # condition_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2146 24
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:rax 
  # $3.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2147 19
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:rax $3.1:rbx 
  # $4.1: @IR_Function = load_struct_member($3.1, function)
  .loc 1 2147 19
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:rax $4.1:r15 
  # true_block.1: @IR_Block = call(create_block.149, $4.1)
  .loc 1 2147 19
  mov rdi, r15
  mov [rbp-24], rax
  call create_block_149
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:rax 
  # $6.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2148 18
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:rax $6.1:rbx 
  # $7.1: @IR_Function = load_struct_member($6.1, function)
  .loc 1 2148 18
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:rax $7.1:r15 
  # end_block.1: @IR_Block = call(create_block.149, $7.1)
  .loc 1 2148 18
  mov rdi, r15
  mov [rbp-32], rax
  call create_block_149
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:rax 
  # $9.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 1 2149 9
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:rax $9.1:rbx 
  # $10.1: Boolean = $9.1 != null
  .loc 1 2149 9
  cmp rbx, 0
  setne r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:rax $10.1:r15 
  # jump($10.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-40], rax
  jz .LABEL__convert_if_statement_93__4
.LABEL__convert_if_statement_93__2:
  # $13.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2150 24
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $13.1:rax 
  # $14.1: @IR_Function = load_struct_member($13.1, function)
  .loc 1 2150 24
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $14.1:rbx 
  # false_block.1: @IR_Block = call(create_block.149, $14.1)
  .loc 1 2150 24
  mov rdi, rbx
  call create_block_149
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] false_block.1:rax 
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2151 9
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] false_block.1:rax $16.1:rbx 
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump.147, $16.1, condition_value.1, true_block.1, false_block.1)
  .loc 1 2151 9
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  mov rcx, rax
  mov [rbp-48], rax
  call append_jump_147
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] false_block.1:[rbp-48] 
  # store_struct_member(self.1, current_block, false_block.1)
  .loc 1 2152 9
  mov rax, [rbp-16]
  add rax, 32
  mov rbx, [rbp-48]
  mov QWORD PTR [rax], rbx
  # [discarded value]: false_block.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # $18.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 1 2153 32
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $18.1:rax 
  # call(convert_statement.88, self.1, $18.1)
  .loc 1 2153 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_statement_88
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # $19.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2154 13
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $19.1:rax 
  # $20.1: @IR_Instruction = load_struct_member($19.1, last_instruction)
  .loc 1 2154 13
  mov rbx, rax
  add rbx, 40
  mov rbx, [rbx]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $20.1:rbx 
  # $21.1: Boolean = call(is_exit_instruction.153, $20.1)
  .loc 1 2154 13
  mov rdi, rbx
  call is_exit_instruction_153
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $21.1:rax 
  # $22.1: Boolean = $21.1 == false
  .loc 1 2154 13
  cmp al, 0
  sete bl
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $22.1:rbx 
  # jump($22.1, block.5, block.3)
  test bl, bl
  jz .LABEL__convert_if_statement_93__3
.LABEL__convert_if_statement_93__5:
  # $23.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2155 13
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $23.1:rax 
  # $24.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $23.1, end_block.1)
  .loc 1 2155 13
  mov rdi, rax
  mov rsi, [rbp-40]
  call append_jump_146
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # jump(block.3)
.LABEL__convert_if_statement_93__3:
  # store_struct_member(self.1, current_block, true_block.1)
  .loc 1 2160 5
  mov rax, [rbp-16]
  add rax, 32
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:rbx[rbp-32] end_block.1:[rbp-40] 
  # $25.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  .loc 1 2161 28
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:rbx[rbp-32] end_block.1:[rbp-40] $25.1:rax 
  # call(convert_statement.88, self.1, $25.1)
  .loc 1 2161 5
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-32], rbx
  call convert_statement_88
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # $26.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2162 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $26.1:rax 
  # $27.1: @IR_Instruction = load_struct_member($26.1, last_instruction)
  .loc 1 2162 9
  mov rbx, rax
  add rbx, 40
  mov rbx, [rbx]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $27.1:rbx 
  # $28.1: Boolean = call(is_exit_instruction.153, $27.1)
  .loc 1 2162 9
  mov rdi, rbx
  call is_exit_instruction_153
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $28.1:rax 
  # $29.1: Boolean = $28.1 == false
  .loc 1 2162 9
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $29.1:rbx 
  # jump($29.1, block.7, block.8)
  test bl, bl
  jz .LABEL__convert_if_statement_93__8
.LABEL__convert_if_statement_93__7:
  # $30.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2163 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $30.1:rax 
  # $31.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $30.1, end_block.1)
  .loc 1 2163 9
  mov rdi, rax
  mov rsi, [rbp-40]
  call append_jump_146
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # jump(block.8)
.LABEL__convert_if_statement_93__8:
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 1 2165 5
  mov rax, [rbp-16]
  add rax, 32
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:rbx[rbp-40] 
  # return()
  mov [rbp-40], rbx
  jmp .LABEL__convert_if_statement_93__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
.LABEL__convert_if_statement_93__4:
  # $11.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2158 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] $11.1:rax 
  # $12.1: @IR_Conditional_Jump_Instruction = call(append_jump.147, $11.1, condition_value.1, true_block.1, end_block.1)
  .loc 1 2158 9
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call append_jump_147
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # jump(block.3)
  jmp .LABEL__convert_if_statement_93__3
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] condition_value.1:[rbp-24] true_block.1:[rbp-32] end_block.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [discarded value]: condition_value.1
  # [discarded value]: true_block.1
  # [discarded value]: end_block.1
  # [live values]: 
.LABEL__convert_if_statement_93__end:
  mov rsp, rbp
  pop rbp
  ret

convert_if_statement_93__stack_frame_size: .word 48

  .loc 1 2168 1
  .text
convert_loop_statement_94:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_loop_statement_94__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_loop_statement_94__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Loop_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2169 19
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 1 2169 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # loop_block.1: @IR_Block = call(create_block.149, $2.1)
  .loc 1 2169 19
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_149
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2170 18
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $4.1:rbx 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 1 2170 18
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $5.1:r15 
  # end_block.1: @IR_Block = call(create_block.149, $5.1)
  .loc 1 2170 18
  mov rdi, r15
  mov [rbp-24], rax
  call create_block_149
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax 
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2171 5
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax $7.1:rbx 
  # $8.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $7.1, loop_block.1)
  .loc 1 2171 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_jump_146
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  # store_struct_member(self.1, current_block, loop_block.1)
  .loc 1 2172 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx[rbp-24] end_block.1:[rbp-32] 
  # $9.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 1 2173 40
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx[rbp-24] end_block.1:[rbp-32] $9.1:rax 
  # $10.1: @IR_Loop = call(create_ir_loop.60, $9.1, end_block.1)
  .loc 1 2173 25
  mov rdi, rax
  mov rsi, [rbp-32]
  mov [rbp-24], rbx
  call create_ir_loop_60
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] $10.1:rax 
  # store_struct_member(self.1, current_loop, $10.1)
  .loc 1 2173 5
  mov rbx, [rbp-8]
  add rbx, 40
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  # $11.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 1 2174 34
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] $11.1:rax 
  # call(convert_block_statement.90, self.1, $11.1)
  .loc 1 2174 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_block_statement_90
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2175 5
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] $12.1:rax 
  # $13.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $12.1, loop_block.1)
  .loc 1 2175 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_jump_146
  # [discarded value]: loop_block.1
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-32] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 1 2176 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:[rbp-8] 
  # $14.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 1 2177 25
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $14.1:rax 
  # $15.1: @IR_Loop = load_struct_member($14.1, parent)
  .loc 1 2177 25
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $15.1:rbx 
  # store_struct_member(self.1, current_loop, $15.1)
  .loc 1 2177 5
  mov rax, [rbp-8]
  add rax, 40
  mov QWORD PTR [rax], rbx
  # [discarded value]: self.1
  # [discarded value]: $15.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_loop_statement_94__end
  # [live values]: 
.LABEL__convert_loop_statement_94__end:
  mov rsp, rbp
  pop rbp
  ret

convert_loop_statement_94__stack_frame_size: .word 32

  .loc 1 2180 1
  .text
convert_return_statement_95:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_return_statement_95__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_return_statement_95__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Return_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 2181 9
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 2181 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.4)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__convert_return_statement_95__4
.LABEL__convert_return_statement_95__2:
  # $6.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 2182 49
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $6.1:rax 
  # return_value.1: @IR_Value = call(convert_expression.98, self.1, $6.1)
  .loc 1 2182 25
  mov rdi, [rbp-16]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:rax 
  # $8.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2183 13
  mov rbx, [rbp-16]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:rax $8.1:rbx 
  # $9.1: @IR_Function = load_struct_member($8.1, function)
  .loc 1 2183 13
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:rax $9.1:r15 
  # $10.1: @IR_Type = load_struct_member($9.1, return_type)
  .loc 1 2183 13
  mov rbx, r15
  add rbx, 40
  mov rbx, [rbx]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:rax $10.1:rbx 
  # $11.1: @IR_Type = load_struct_member(return_value.1, type)
  .loc 1 2183 61
  mov r15, rax
  add r15, 8
  mov r15, [r15]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:rax $10.1:rbx $11.1:r15 
  # $12.1: Boolean = call(accepts.68, $10.1, $11.1)
  .loc 1 2183 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call accepts_68
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $12.1:rax 
  # $13.1: Boolean = $12.1 == false
  .loc 1 2183 13
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $13.1:rbx 
  # jump($13.1, block.5, block.6)
  test bl, bl
  jz .LABEL__convert_return_statement_95__6
.LABEL__convert_return_statement_95__5:
  # $14.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 2184 19
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $14.1:rax 
  # $15.1: @String = call(clone.329, "Unexpected returned expression type: ")
  .loc 1 2184 39
  lea rdi, .LABEL__string_189[rip] # "Unexpected returned expression type: "
  mov [rbp-32], rax
  call clone_329
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $14.1:[rbp-32] $15.1:rax 
  # $16.1: @IR_Type = load_struct_member(return_value.1, type)
  .loc 1 2184 93
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $14.1:[rbp-32] $15.1:rax $16.1:rbx 
  # $17.1: @String = load_struct_member($16.1, name)
  .loc 1 2184 93
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $14.1:[rbp-32] $15.1:rax $17.1:r15 
  # $18.1: @String = call(append.332, $15.1, $17.1)
  .loc 1 2184 39
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $15.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $14.1:[rbp-32] $18.1:rax 
  # call(abort.271, $14.1, $18.1)
  .loc 1 2184 13
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_271
  # [discarded value]: $14.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] 
.LABEL__convert_return_statement_95__6:
  # $19.1: @IR_Return_Instruction = call(create_ir_return_instruction.166, return_value.1)
  .loc 1 2186 21
  mov rdi, [rbp-24]
  call create_ir_return_instruction_166
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $19.1:rax 
  # $20.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 2186 65
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $19.1:rax $20.1:rbx 
  # $21.1: @IR_Variable_Value = call(append.71, self.1, $19.1, $20.1)
  .loc 1 2186 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] 
  # jump(block.3)
.LABEL__convert_return_statement_95__3:
  # $22.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2190 26
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $22.1:rax 
  # $23.1: @IR_Function = load_struct_member($22.1, function)
  .loc 1 2190 26
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $23.1:rbx 
  # $24.1: @IR_Block = call(create_block.149, $23.1)
  .loc 1 2190 26
  mov rdi, rbx
  call create_block_149
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] $24.1:rax 
  # store_struct_member(self.1, current_block, $24.1)
  .loc 1 2190 5
  mov rbx, [rbp-16]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] 
  # return()
  jmp .LABEL__convert_return_statement_95__end
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] return_value.1:[rbp-24] 
  # [discarded value]: return_value.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
.LABEL__convert_return_statement_95__4:
  # $3.1: @IR_Return_Instruction = call(create_ir_return_instruction.166, null)
  .loc 1 2188 21
  xor rdi, rdi
  call create_ir_return_instruction_166
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax 
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 2188 57
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] $3.1:rax $4.1:rbx 
  # $5.1: @IR_Variable_Value = call(append.71, self.1, $3.1, $4.1)
  .loc 1 2188 9
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__convert_return_statement_95__3
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statement.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__convert_return_statement_95__end:
  mov rsp, rbp
  pop rbp
  ret

convert_return_statement_95__stack_frame_size: .word 32

  .loc 1 2193 1
  .text
convert_variable_statement_96:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_statement_96__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_statement_96__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  .loc 1 2194 22
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi variable_statement.1:rsi $1.1:rax 
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  .loc 1 2194 22
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx 
  # $3.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 1 2196 9
  mov rax, rsi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $3.1:rax 
  # $4.1: Boolean = $3.1 != null
  .loc 1 2196 9
  cmp rax, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi variable_name.1:rbx $4.1:r15 
  # jump($4.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  jz .LABEL__convert_variable_statement_96__4
.LABEL__convert_variable_statement_96__2:
  # $5.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 1 2197 50
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] $5.1:rax 
  # variable_value.3: @IR_Value = call(convert_expression.98, self.1, $5.1)
  .loc 1 2197 26
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:rax 
  # jump(block.3)
  mov [rbp-32], rax
.LABEL__convert_variable_statement_96__3:
  # variable_value.14: @IR_Value = phi(variable_value.2, variable_value.3)
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
  # $7.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 1 2202 9
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $7.1:rax 
  # $8.1: Boolean = $7.1 != null
  .loc 1 2202 9
  cmp rax, 0
  setne bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $8.1:rbx 
  # jump($8.1, block.5, block.7)
  test bl, bl
  jz .LABEL__convert_variable_statement_96__7
.LABEL__convert_variable_statement_96__5:
  # $16.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 1 2203 49
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $16.1:rax 
  # variable_type.3: @IR_Type = call(convert_value_type.75, self.1, $16.1)
  .loc 1 2203 25
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_value_type_75
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:rax 
  # $18.1: Boolean = variable_value.14 != null
  .loc 1 2204 13
  cmp QWORD PTR [rbp-32], 0
  setne bl
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:rax $18.1:rbx 
  # jump($18.1, block.12, block.6)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__convert_variable_statement_96__6
.LABEL__convert_variable_statement_96__12:
  # $19.1: @IR_Type = load_struct_member(variable_value.14, type)
  .loc 1 2205 39
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $19.1:rax 
  # $20.1: Boolean = call(accepts.68, variable_type.3, $19.1)
  .loc 1 2205 17
  mov rdi, [rbp-40]
  mov rsi, rax
  call accepts_68
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $20.1:rax 
  # $21.1: Boolean = $20.1 == false
  .loc 1 2205 17
  cmp al, 0
  sete bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $21.1:rbx 
  # jump($21.1, block.14, block.15)
  test bl, bl
  jz .LABEL__convert_variable_statement_96__15
.LABEL__convert_variable_statement_96__14:
  # $22.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 1 2206 23
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member($22.1, location)
  .loc 1 2206 23
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:rbx 
  # $24.1: @String = call(clone.329, "Cannot assign a '")
  .loc 1 2206 69
  lea rdi, .LABEL__string_183[rip] # "Cannot assign a '"
  mov [rbp-48], rbx
  call clone_329
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $24.1:rax 
  # $25.1: @IR_Type = load_struct_member(variable_value.14, type)
  .loc 1 2206 103
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $24.1:rax $25.1:rbx 
  # $26.1: @String = load_struct_member($25.1, name)
  .loc 1 2206 103
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $24.1:rax $26.1:r15 
  # $27.1: @String = call(append.332, $24.1, $26.1)
  .loc 1 2206 69
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $24.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $27.1:rax 
  # $28.1: @String = call(append.332, $27.1, "' value to a '")
  .loc 1 2206 69
  mov rdi, rax
  lea rsi, .LABEL__string_184[rip] # "' value to a '"
  call append_332
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $28.1:rax 
  # $29.1: @String = load_struct_member(variable_type.3, name)
  .loc 1 2206 161
  mov rbx, [rbp-40]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $28.1:rax $29.1:rbx 
  # $30.1: @String = call(append.332, $28.1, $29.1)
  .loc 1 2206 69
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $28.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $30.1:rax 
  # $31.1: @String = call(append.332, $30.1, "' variable")
  .loc 1 2206 69
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # "' variable"
  call append_332
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $23.1:[rbp-48] $31.1:rax 
  # call(abort.271, $23.1, $31.1)
  .loc 1 2206 17
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_271
  # [discarded value]: $23.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
.LABEL__convert_variable_statement_96__15:
  # $32.1: @IR_Type = load_struct_member(variable_value.14, type)
  .loc 1 2208 38
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $32.1:rax 
  # $33.1: Boolean = call(equals.132, variable_type.3, $32.1)
  .loc 1 2208 17
  mov rdi, [rbp-40]
  mov rsi, rax
  call equals_132
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $33.1:rax 
  # jump($33.1, block.16, block.6)
  test al, al
  jz .LABEL__convert_variable_statement_96__6
.LABEL__convert_variable_statement_96__16:
  # stderr.2: @FILE = load_variable(stderr)
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] stderr.2:stderr[rip] 
  # $34.1: @AST_Type = load_struct_member(variable_statement.1, type)
  .loc 1 2209 30
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] stderr.2:stderr[rip] $34.1:rax 
  # $35.1: @Source_Location = load_struct_member($34.1, location)
  .loc 1 2209 30
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] stderr.2:stderr[rip] $35.1:rbx 
  # $36.1: @FILE = call(write.305, stderr.2, $35.1)
  .loc 1 2209 17
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_305
  # [discarded value]: stderr.2
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $36.1:rax 
  # $37.1: @FILE = call(write.339, $36.1, ": Redundant type declaration")
  .loc 1 2209 17
  mov rdi, rax
  lea rsi, .LABEL__string_190[rip] # ": Redundant type declaration"
  call write_339
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] $37.1:rax 
  # $38.1: @FILE = call(end_line.342, $37.1)
  .loc 1 2209 17
  mov rdi, rax
  call end_line_342
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
  # jump(block.6)
.LABEL__convert_variable_statement_96__6:
  # variable_type.7: @IR_Type = phi(variable_type.2, variable_type.3)
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] 
  # IR_Any_Type.3: @Object_Type = load_variable(IR_Any_Type)
  lea rax, IR_Any_Type[rip]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] IR_Any_Type.3:rax 
  # $40.1: Boolean = call(is.325, variable_type.7, IR_Any_Type.3)
  .loc 1 2221 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Any_Type.3
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:rax 
  # jump($40.1, block.19, block.18)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_variable_statement_96__18
.LABEL__convert_variable_statement_96__19:
  # $40.3: Boolean = phi($40.1, $40.2)
  .loc 1 2221 9
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $40.3:[rbp-41] 
  # jump($40.3, block.20, block.21)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_variable_statement_96__21
.LABEL__convert_variable_statement_96__20:
  # $42.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 1 2222 15
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $40.3
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $42.1:rax 
  # $43.1: @String = call(clone.329, "Invalid variable type: ")
  .loc 1 2222 44
  lea rdi, .LABEL__string_191[rip] # "Invalid variable type: "
  mov [rbp-49], rax
  call clone_329
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $42.1:[rbp-49] $43.1:rax 
  # $44.1: @String = load_struct_member(variable_type.7, name)
  .loc 1 2222 84
  mov rbx, [rbp-40]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $42.1:[rbp-49] $43.1:rax $44.1:rbx 
  # $45.1: @String = call(append.332, $43.1, $44.1)
  .loc 1 2222 44
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $42.1:[rbp-49] $45.1:rax 
  # call(abort.271, $42.1, $45.1)
  .loc 1 2222 9
  mov rdi, [rbp-49]
  mov rsi, rax
  call abort_271
  # [discarded value]: $42.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] 
.LABEL__convert_variable_statement_96__21:
  # $46.1: @IR_Variable = new(IR_Variable)
  .loc 1 2224 17
  mov rdi, 32
  call malloc
  lea rbx, IR_Variable[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $46.1:rax 
  # variable.1: @IR_Variable = call(init.150, $46.1, variable_name.1, variable_type.7)
  .loc 1 2224 17
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-40]
  call init_150
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:rax 
  # $48.1: @IR_Variable = call(add_variable.62, self.1, variable.1)
  .loc 1 2225 5
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-49], rax
  call add_variable_62
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] 
  # $49.1: Boolean = variable_value.14 == null
  .loc 1 2226 9
  cmp QWORD PTR [rbp-32], 0
  sete al
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] $49.1:rax 
  # jump($49.1, block.22, block.23)
  test al, al
  jz .LABEL__convert_variable_statement_96__23
.LABEL__convert_variable_statement_96__22:
  # $50.1: @IR_Undefined_Value = new(IR_Undefined_Value)
  .loc 1 2227 26
  mov rdi, 24
  call malloc
  lea rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] $50.1:rax 
  # variable_value.12: @IR_Value = call(init.140, $50.1, variable_type.7)
  .loc 1 2227 26
  mov rdi, rax
  mov rsi, [rbp-40]
  call init_140
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:rax[rbp-32] 
  # jump(block.23)
  mov [rbp-32], rax
.LABEL__convert_variable_statement_96__23:
  # variable_value.13: @IR_Value = phi(variable_value.12, variable_value.14)
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] variable_value.13:[rbp-32] 
  # $52.1: @IR_Variable_Value = call(create_variable_value.65, self.1, variable.1)
  .loc 1 2229 43
  mov rdi, [rbp-24]
  mov rsi, [rbp-49]
  call create_variable_value_65
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] variable_value.13:[rbp-32] $52.1:rax 
  # $53.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, $52.1, variable_value.13)
  .loc 1 2229 17
  mov rdi, rax
  mov rsi, [rbp-32]
  call create_ir_set_instruction_168
  # [discarded value]: variable_value.13
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] $53.1:rax 
  # $54.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 1 2229 98
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] $53.1:rax $54.1:rbx 
  # $55.1: @IR_Variable_Value = call(append.71, self.1, $53.1, $54.1)
  .loc 1 2229 5
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] 
  # return()
  jmp .LABEL__convert_variable_statement_96__end
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] variable_value.12:[rbp-32] 
  # [discarded value]: variable_value.12
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] variable.1:[rbp-49] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] 
.LABEL__convert_variable_statement_96__18:
  # IR_Nothing_Type.3: @Object_Type = load_variable(IR_Nothing_Type)
  lea rax, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] IR_Nothing_Type.3:rax 
  # $40.2: Boolean = call(is.325, variable_type.7, IR_Nothing_Type.3)
  .loc 1 2221 42
  mov rdi, [rbp-40]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Nothing_Type.3
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $40.2:rax[rbp-41] 
  # jump(block.19)
  mov [rbp-41], al
  jmp .LABEL__convert_variable_statement_96__19
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] $40.2:[rbp-41] 
  # [discarded value]: $40.2
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] variable_type.7:[rbp-40] $40.1:[rbp-41] 
  # [discarded value]: variable_type.7
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.3:[rbp-40] 
  # [discarded value]: variable_type.3
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
.LABEL__convert_variable_statement_96__7:
  # $9.1: Boolean = variable_value.14 == null
  .loc 1 2213 13
  cmp QWORD PTR [rbp-32], 0
  sete al
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $9.1:rax 
  # jump($9.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_variable_statement_96__9
.LABEL__convert_variable_statement_96__8:
  # $10.1: @Source_Location = load_struct_member(variable_statement.1, location)
  .loc 1 2214 19
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $10.1:rax 
  # call(abort.271, $10.1, "Invalid state")
  .loc 1 2214 13
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # "Invalid state"
  call abort_271
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
.LABEL__convert_variable_statement_96__9:
  # $11.1: @IR_Type = load_struct_member(variable_value.14, type)
  .loc 1 2216 13
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $11.1:rax 
  # IR_Null_Type.4: @Object_Type = load_variable(IR_Null_Type)
  lea rbx, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $11.1:rax IR_Null_Type.4:rbx 
  # $12.1: Boolean = call(is.325, $11.1, IR_Null_Type.4)
  .loc 1 2216 13
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $11.1
  # [discarded value]: IR_Null_Type.4
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $12.1:rax 
  # jump($12.1, block.10, block.11)
  test al, al
  jz .LABEL__convert_variable_statement_96__11
.LABEL__convert_variable_statement_96__10:
  # $13.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  .loc 1 2217 19
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2217 19
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Cannot infer type from null value")
  .loc 1 2217 13
  mov rdi, rbx
  lea rsi, .LABEL__string_192[rip] # "Cannot infer type from null value"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
.LABEL__convert_variable_statement_96__11:
  # variable_type.2: @IR_Type = load_struct_member(variable_value.14, type)
  .loc 1 2219 25
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.2:rax[rbp-40] 
  # jump(block.6)
  mov [rbp-40], rax
  jmp .LABEL__convert_variable_statement_96__6
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] variable_type.2:[rbp-40] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] variable_value.14:[rbp-32] 
  # [discarded value]: variable_value.14
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.3:[rbp-32] 
  # [discarded value]: variable_value.3
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
.LABEL__convert_variable_statement_96__4:
  # variable_value.2: @IR_Value = null
  .loc 1 2199 9
  xor rax, rax
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.2:rax[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__convert_variable_statement_96__3
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] variable_value.2:[rbp-32] 
  # [discarded value]: variable_value.2
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] variable_statement.1:[rbp-16] variable_name.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: variable_statement.1
  # [discarded value]: variable_name.1
  # [live values]: 
.LABEL__convert_variable_statement_96__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_statement_96__stack_frame_size: .word 64

  .loc 1 2232 1
  .text
convert_while_statement_97:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_while_statement_97__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_while_statement_97__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_While_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2233 24
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 1 2233 24
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # condition_block.1: @IR_Block = call(create_block.149, $2.1)
  .loc 1 2233 24
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_149
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2234 19
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $4.1:rbx 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 1 2234 19
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $5.1:r15 
  # loop_block.1: @IR_Block = call(create_block.149, $5.1)
  .loc 1 2234 19
  mov rdi, r15
  mov [rbp-24], rax
  call create_block_149
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax 
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2235 18
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $7.1:rbx 
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  .loc 1 2235 18
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $8.1:r15 
  # end_block.1: @IR_Block = call(create_block.149, $8.1)
  .loc 1 2235 18
  mov rdi, r15
  mov [rbp-32], rax
  call create_block_149
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax 
  # $10.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2236 5
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax $10.1:rbx 
  # $11.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $10.1, condition_block.1)
  .loc 1 2236 5
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov [rbp-40], rax
  call append_jump_146
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  # store_struct_member(self.1, current_block, condition_block.1)
  .loc 1 2237 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rbx[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  # $12.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 1 2238 48
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rbx[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:rax 
  # condition_value.1: @IR_Value = call(convert_expression.98, self.1, $12.1)
  .loc 1 2238 24
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rbx
  call convert_expression_98
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax 
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2239 5
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax $14.1:rbx 
  # $15.1: @IR_Conditional_Jump_Instruction = call(append_jump.147, $14.1, condition_value.1, loop_block.1, end_block.1)
  .loc 1 2239 5
  mov rdi, rbx
  mov rsi, rax
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call append_jump_147
  # [discarded value]: condition_value.1
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  # store_struct_member(self.1, current_block, loop_block.1)
  .loc 1 2240 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [discarded value]: loop_block.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  # $16.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 1 2241 40
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $16.1:rax 
  # $17.1: @IR_Loop = call(create_ir_loop.60, $16.1, end_block.1)
  .loc 1 2241 25
  mov rdi, rax
  mov rsi, [rbp-40]
  call create_ir_loop_60
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:rax 
  # store_struct_member(self.1, current_loop, $17.1)
  .loc 1 2241 5
  mov rbx, [rbp-8]
  add rbx, 40
  mov QWORD PTR [rbx], rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  # $18.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 1 2242 34
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] $18.1:rax 
  # call(convert_block_statement.90, self.1, $18.1)
  .loc 1 2242 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_block_statement_90
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  # $19.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2243 5
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] $19.1:rax 
  # $20.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $19.1, condition_block.1)
  .loc 1 2243 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_jump_146
  # [discarded value]: condition_block.1
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-40] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 1 2244 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:[rbp-8] 
  # $21.1: @IR_Loop = load_struct_member(self.1, current_loop)
  .loc 1 2245 25
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $21.1:rax 
  # $22.1: @IR_Loop = load_struct_member($21.1, parent)
  .loc 1 2245 25
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $22.1:rbx 
  # store_struct_member(self.1, current_loop, $22.1)
  .loc 1 2245 5
  mov rax, [rbp-8]
  add rax, 40
  mov QWORD PTR [rax], rbx
  # [discarded value]: self.1
  # [discarded value]: $22.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_while_statement_97__end
  # [live values]: 
.LABEL__convert_while_statement_97__end:
  mov rsp, rbp
  pop rbp
  ret

convert_while_statement_97__stack_frame_size: .word 48

  .loc 1 2248 1
  .text
convert_expression_98:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_98__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_98__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Add_Expression.2: @Object_Type = load_variable(AST_Add_Expression)
  lea rax, AST_Add_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Add_Expression.2:rax 
  # $1.1: Boolean = call(is.325, expression.1, AST_Add_Expression.2)
  .loc 1 2249 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Add_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_expression_98__3
.LABEL__convert_expression_98__2:
  # $2.1: @AST_Add_Expression = expression.1
  .loc 1 2250 44
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Value = call(convert_add_expression.100, self.1, $2.1)
  .loc 1 2250 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_add_expression_100
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 1 2250 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__3:
  # AST_Array_Access_Expression.3: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rax, AST_Array_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Array_Access_Expression.3:rax 
  # $4.1: Boolean = call(is.325, expression.1, AST_Array_Access_Expression.3)
  .loc 1 2252 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Array_Access_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_expression_98__6
.LABEL__convert_expression_98__5:
  # $5.1: @AST_Array_Access_Expression = expression.1
  .loc 1 2253 53
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Value = call(convert_array_access_expression.101, self.1, $5.1)
  .loc 1 2253 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_access_expression_101
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 1 2253 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__6:
  # AST_Call_Expression.2: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Call_Expression.2:rax 
  # $7.1: Boolean = call(is.325, expression.1, AST_Call_Expression.2)
  .loc 1 2255 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Call_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_expression_98__9
.LABEL__convert_expression_98__8:
  # $8.1: @AST_Call_Expression = expression.1
  .loc 1 2256 45
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Value = call(convert_call_expression.102, self.1, $8.1)
  .loc 1 2256 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_call_expression_102
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 1 2256 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__9:
  # AST_Cast_Expression.2: @Object_Type = load_variable(AST_Cast_Expression)
  lea rax, AST_Cast_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Cast_Expression.2:rax 
  # $10.1: Boolean = call(is.325, expression.1, AST_Cast_Expression.2)
  .loc 1 2258 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Cast_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $10.1:rax 
  # jump($10.1, block.11, block.12)
  test al, al
  jz .LABEL__convert_expression_98__12
.LABEL__convert_expression_98__11:
  # $11.1: @AST_Cast_Expression = expression.1
  .loc 1 2259 45
  mov rax, [rbp-16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $11.1:rax 
  # $12.1: @IR_Value = call(convert_cast_expression.103, self.1, $11.1)
  .loc 1 2259 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_cast_expression_103
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 1 2259 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__12:
  # AST_Divide_Expression.2: @Object_Type = load_variable(AST_Divide_Expression)
  lea rax, AST_Divide_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Divide_Expression.2:rax 
  # $13.1: Boolean = call(is.325, expression.1, AST_Divide_Expression.2)
  .loc 1 2261 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Divide_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $13.1:rax 
  # jump($13.1, block.14, block.15)
  test al, al
  jz .LABEL__convert_expression_98__15
.LABEL__convert_expression_98__14:
  # $14.1: @AST_Divide_Expression = expression.1
  .loc 1 2262 47
  mov rax, [rbp-16]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $14.1:rax 
  # $15.1: @IR_Value = call(convert_divide_expression.104, self.1, $14.1)
  .loc 1 2262 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_divide_expression_104
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:rax 
  # return($15.1)
  .loc 1 2262 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__15:
  # AST_Equals_Expression.2: @Object_Type = load_variable(AST_Equals_Expression)
  lea rax, AST_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Equals_Expression.2:rax 
  # $16.1: Boolean = call(is.325, expression.1, AST_Equals_Expression.2)
  .loc 1 2264 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $16.1:rax 
  # jump($16.1, block.17, block.18)
  test al, al
  jz .LABEL__convert_expression_98__18
.LABEL__convert_expression_98__17:
  # $17.1: @AST_Equals_Expression = expression.1
  .loc 1 2265 47
  mov rax, [rbp-16]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $17.1:rax 
  # $18.1: @IR_Value = call(convert_equals_expression.105, self.1, $17.1)
  .loc 1 2265 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_equals_expression_105
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $18.1:rax 
  # return($18.1)
  .loc 1 2265 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__18:
  # AST_Greater_Than_Expression.2: @Object_Type = load_variable(AST_Greater_Than_Expression)
  lea rax, AST_Greater_Than_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Greater_Than_Expression.2:rax 
  # $19.1: Boolean = call(is.325, expression.1, AST_Greater_Than_Expression.2)
  .loc 1 2267 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Greater_Than_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $19.1:rax 
  # jump($19.1, block.20, block.21)
  test al, al
  jz .LABEL__convert_expression_98__21
.LABEL__convert_expression_98__20:
  # $20.1: @AST_Greater_Than_Expression = expression.1
  .loc 1 2268 53
  mov rax, [rbp-16]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $20.1:rax 
  # $21.1: @IR_Value = call(convert_greater_than_expression.106, self.1, $20.1)
  .loc 1 2268 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_expression_106
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:rax 
  # return($21.1)
  .loc 1 2268 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__21:
  # AST_Greater_Than_Or_Equals_Expression.2: @Object_Type = load_variable(AST_Greater_Than_Or_Equals_Expression)
  lea rax, AST_Greater_Than_Or_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Greater_Than_Or_Equals_Expression.2:rax 
  # $22.1: Boolean = call(is.325, expression.1, AST_Greater_Than_Or_Equals_Expression.2)
  .loc 1 2270 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Greater_Than_Or_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $22.1:rax 
  # jump($22.1, block.23, block.24)
  test al, al
  jz .LABEL__convert_expression_98__24
.LABEL__convert_expression_98__23:
  # $23.1: @AST_Greater_Than_Or_Equals_Expression = expression.1
  .loc 1 2271 63
  mov rax, [rbp-16]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $23.1:rax 
  # $24.1: @IR_Value = call(convert_greater_than_or_equals_expression.107, self.1, $23.1)
  .loc 1 2271 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_or_equals_expression_107
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $24.1:rax 
  # return($24.1)
  .loc 1 2271 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__24:
  # AST_Less_Than_Expression.2: @Object_Type = load_variable(AST_Less_Than_Expression)
  lea rax, AST_Less_Than_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Less_Than_Expression.2:rax 
  # $25.1: Boolean = call(is.325, expression.1, AST_Less_Than_Expression.2)
  .loc 1 2273 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Less_Than_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $25.1:rax 
  # jump($25.1, block.26, block.27)
  test al, al
  jz .LABEL__convert_expression_98__27
.LABEL__convert_expression_98__26:
  # $26.1: @AST_Less_Than_Expression = expression.1
  .loc 1 2274 50
  mov rax, [rbp-16]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $26.1:rax 
  # $27.1: @IR_Value = call(convert_less_than_expression.108, self.1, $26.1)
  .loc 1 2274 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_expression_108
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # return($27.1)
  .loc 1 2274 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__27:
  # AST_Less_Than_Or_Equals_Expression.2: @Object_Type = load_variable(AST_Less_Than_Or_Equals_Expression)
  lea rax, AST_Less_Than_Or_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Less_Than_Or_Equals_Expression.2:rax 
  # $28.1: Boolean = call(is.325, expression.1, AST_Less_Than_Or_Equals_Expression.2)
  .loc 1 2276 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Less_Than_Or_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  # jump($28.1, block.29, block.30)
  test al, al
  jz .LABEL__convert_expression_98__30
.LABEL__convert_expression_98__29:
  # $29.1: @AST_Less_Than_Or_Equals_Expression = expression.1
  .loc 1 2277 60
  mov rax, [rbp-16]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $29.1:rax 
  # $30.1: @IR_Value = call(convert_less_than_or_equals_expression.109, self.1, $29.1)
  .loc 1 2277 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_or_equals_expression_109
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $30.1:rax 
  # return($30.1)
  .loc 1 2277 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__30:
  # AST_Literal_Expression.2: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Literal_Expression.2:rax 
  # $31.1: Boolean = call(is.325, expression.1, AST_Literal_Expression.2)
  .loc 1 2279 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Literal_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $31.1:rax 
  # jump($31.1, block.32, block.33)
  test al, al
  jz .LABEL__convert_expression_98__33
.LABEL__convert_expression_98__32:
  # $32.1: @AST_Literal_Expression = expression.1
  .loc 1 2280 48
  mov rax, [rbp-16]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $32.1:rax 
  # $33.1: @IR_Value = call(convert_literal_expression.110, self.1, $32.1)
  .loc 1 2280 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_literal_expression_110
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $33.1:rax 
  # return($33.1)
  .loc 1 2280 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__33:
  # AST_Logic_And_Expression.2: @Object_Type = load_variable(AST_Logic_And_Expression)
  lea rax, AST_Logic_And_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Logic_And_Expression.2:rax 
  # $34.1: Boolean = call(is.325, expression.1, AST_Logic_And_Expression.2)
  .loc 1 2282 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Logic_And_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $34.1:rax 
  # jump($34.1, block.35, block.36)
  test al, al
  jz .LABEL__convert_expression_98__36
.LABEL__convert_expression_98__35:
  # $35.1: @AST_Logic_And_Expression = expression.1
  .loc 1 2283 50
  mov rax, [rbp-16]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $35.1:rax 
  # $36.1: @IR_Value = call(convert_logic_and_expression.111, self.1, $35.1)
  .loc 1 2283 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_and_expression_111
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $36.1:rax 
  # return($36.1)
  .loc 1 2283 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__36:
  # AST_Logic_Or_Expression.2: @Object_Type = load_variable(AST_Logic_Or_Expression)
  lea rax, AST_Logic_Or_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Logic_Or_Expression.2:rax 
  # $37.1: Boolean = call(is.325, expression.1, AST_Logic_Or_Expression.2)
  .loc 1 2285 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Logic_Or_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $37.1:rax 
  # jump($37.1, block.38, block.39)
  test al, al
  jz .LABEL__convert_expression_98__39
.LABEL__convert_expression_98__38:
  # $38.1: @AST_Logic_Or_Expression = expression.1
  .loc 1 2286 49
  mov rax, [rbp-16]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $38.1:rax 
  # $39.1: @IR_Value = call(convert_logic_or_expression.112, self.1, $38.1)
  .loc 1 2286 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_or_expression_112
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $39.1:rax 
  # return($39.1)
  .loc 1 2286 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__39:
  # AST_Member_Access_Expression.3: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Member_Access_Expression.3:rax 
  # $40.1: Boolean = call(is.325, expression.1, AST_Member_Access_Expression.3)
  .loc 1 2288 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Member_Access_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $40.1:rax 
  # jump($40.1, block.41, block.42)
  test al, al
  jz .LABEL__convert_expression_98__42
.LABEL__convert_expression_98__41:
  # $41.1: @AST_Member_Access_Expression = expression.1
  .loc 1 2289 54
  mov rax, [rbp-16]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $41.1:rax 
  # $42.1: @IR_Value = call(convert_member_access_expression.113, self.1, $41.1)
  .loc 1 2289 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_113
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $42.1:rax 
  # return($42.1)
  .loc 1 2289 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__42:
  # AST_Modulo_Expression.2: @Object_Type = load_variable(AST_Modulo_Expression)
  lea rax, AST_Modulo_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Modulo_Expression.2:rax 
  # $43.1: Boolean = call(is.325, expression.1, AST_Modulo_Expression.2)
  .loc 1 2291 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Modulo_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $43.1:rax 
  # jump($43.1, block.44, block.45)
  test al, al
  jz .LABEL__convert_expression_98__45
.LABEL__convert_expression_98__44:
  # $44.1: @AST_Modulo_Expression = expression.1
  .loc 1 2292 47
  mov rax, [rbp-16]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $44.1:rax 
  # $45.1: @IR_Value = call(convert_modulo_expression.115, self.1, $44.1)
  .loc 1 2292 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_modulo_expression_115
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $45.1:rax 
  # return($45.1)
  .loc 1 2292 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__45:
  # AST_Multiply_Expression.2: @Object_Type = load_variable(AST_Multiply_Expression)
  lea rax, AST_Multiply_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Multiply_Expression.2:rax 
  # $46.1: Boolean = call(is.325, expression.1, AST_Multiply_Expression.2)
  .loc 1 2294 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Multiply_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $46.1:rax 
  # jump($46.1, block.47, block.48)
  test al, al
  jz .LABEL__convert_expression_98__48
.LABEL__convert_expression_98__47:
  # $47.1: @AST_Multiply_Expression = expression.1
  .loc 1 2295 49
  mov rax, [rbp-16]
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $47.1:rax 
  # $48.1: @IR_Value = call(convert_multiply_expression.116, self.1, $47.1)
  .loc 1 2295 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_multiply_expression_116
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $48.1:rax 
  # return($48.1)
  .loc 1 2295 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__48:
  # AST_New_Expression.2: @Object_Type = load_variable(AST_New_Expression)
  lea rax, AST_New_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_New_Expression.2:rax 
  # $49.1: Boolean = call(is.325, expression.1, AST_New_Expression.2)
  .loc 1 2297 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_New_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $49.1:rax 
  # jump($49.1, block.50, block.51)
  test al, al
  jz .LABEL__convert_expression_98__51
.LABEL__convert_expression_98__50:
  # $50.1: @AST_New_Expression = expression.1
  .loc 1 2298 44
  mov rax, [rbp-16]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $50.1:rax 
  # $51.1: @IR_Value = call(convert_new_expression.117, self.1, $50.1)
  .loc 1 2298 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_new_expression_117
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $51.1:rax 
  # return($51.1)
  .loc 1 2298 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__51:
  # AST_Not_Equals_Expression.2: @Object_Type = load_variable(AST_Not_Equals_Expression)
  lea rax, AST_Not_Equals_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Not_Equals_Expression.2:rax 
  # $52.1: Boolean = call(is.325, expression.1, AST_Not_Equals_Expression.2)
  .loc 1 2300 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Not_Equals_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $52.1:rax 
  # jump($52.1, block.53, block.54)
  test al, al
  jz .LABEL__convert_expression_98__54
.LABEL__convert_expression_98__53:
  # $53.1: @AST_Not_Equals_Expression = expression.1
  .loc 1 2301 51
  mov rax, [rbp-16]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $53.1:rax 
  # $54.1: @IR_Value = call(convert_not_equals_expression.118, self.1, $53.1)
  .loc 1 2301 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_not_equals_expression_118
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $54.1:rax 
  # return($54.1)
  .loc 1 2301 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__54:
  # AST_Substract_Expression.2: @Object_Type = load_variable(AST_Substract_Expression)
  lea rax, AST_Substract_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Substract_Expression.2:rax 
  # $55.1: Boolean = call(is.325, expression.1, AST_Substract_Expression.2)
  .loc 1 2303 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Substract_Expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $55.1:rax 
  # jump($55.1, block.56, block.57)
  test al, al
  jz .LABEL__convert_expression_98__57
.LABEL__convert_expression_98__56:
  # $56.1: @AST_Substract_Expression = expression.1
  .loc 1 2304 50
  mov rax, [rbp-16]
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $56.1:rax 
  # $57.1: @IR_Value = call(convert_substract_expression.119, self.1, $56.1)
  .loc 1 2304 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_substract_expression_119
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $57.1:rax 
  # return($57.1)
  .loc 1 2304 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__57:
  # AST_Variable_Expression.3: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.3:rax 
  # $58.1: Boolean = call(is.325, expression.1, AST_Variable_Expression.3)
  .loc 1 2306 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $58.1:rax 
  # jump($58.1, block.59, block.60)
  test al, al
  jz .LABEL__convert_expression_98__60
.LABEL__convert_expression_98__59:
  # $59.1: @AST_Variable_Expression = expression.1
  .loc 1 2307 49
  mov rax, [rbp-16]
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $59.1:rax 
  # $60.1: @IR_Value = call(convert_variable_expression.120, self.1, $59.1)
  .loc 1 2307 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_variable_expression_120
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $60.1:rax 
  # return($60.1)
  .loc 1 2307 9
  jmp .LABEL__convert_expression_98__end
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_98__60:
  # $61.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2309 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $61.1:rax 
  # $62.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 1 2309 32
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $61.1:rax $62.1:rbx 
  # call(abort.127, $61.1, $62.1)
  .loc 1 2309 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_expression_98__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_98__stack_frame_size: .word 16

  .loc 1 2312 1
  .text
convert_expression_address_99:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_address_99__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_address_99__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Member_Access_Expression.4: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Member_Access_Expression.4:rax 
  # $1.1: Boolean = call(is.325, expression.1, AST_Member_Access_Expression.4)
  .loc 1 2313 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Member_Access_Expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_expression_address_99__3
.LABEL__convert_expression_address_99__2:
  # $2.1: @AST_Member_Access_Expression = expression.1
  .loc 1 2314 62
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Value = call(convert_member_access_expression_address.114, self.1, $2.1)
  .loc 1 2314 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_address_114
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 1 2314 9
  jmp .LABEL__convert_expression_address_99__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_address_99__3:
  # AST_Variable_Expression.4: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.4:rax 
  # $4.1: Boolean = call(is.325, expression.1, AST_Variable_Expression.4)
  .loc 1 2316 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_expression_address_99__6
.LABEL__convert_expression_address_99__5:
  # $5.1: @AST_Variable_Expression = expression.1
  .loc 1 2317 57
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Value = call(convert_variable_expression_address.121, self.1, $5.1)
  .loc 1 2317 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_variable_expression_address_121
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 1 2317 9
  jmp .LABEL__convert_expression_address_99__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_expression_address_99__6:
  # $7.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2319 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $7.1:rax 
  # $8.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 1 2319 32
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $7.1:rax $8.1:rbx 
  # call(abort.127, $7.1, $8.1)
  .loc 1 2319 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_expression_address_99__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_address_99__stack_frame_size: .word 16

  .loc 1 2322 1
  .text
convert_add_expression_100:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_add_expression_100__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_add_expression_100__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Add_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2323 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2323 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2324 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2324 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2325 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.8: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.8:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.8)
  .loc 1 2325 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2325 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_add_expression_100__3
.LABEL__convert_add_expression_100__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2326 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2326 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2326 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_add_expression_100__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2328 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.9: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.9:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.9)
  .loc 1 2328 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2328 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_add_expression_100__5
.LABEL__convert_add_expression_100__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2329 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2329 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2329 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_add_expression_100__5:
  # IR_Constant_Value.8: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.8:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.8)
  .loc 1 2331 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_add_expression_100__7
.LABEL__convert_add_expression_100__6:
  # IR_Constant_Value.9: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.9:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.9)
  .loc 1 2331 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_add_expression_100__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2331 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_add_expression_100__9
.LABEL__convert_add_expression_100__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2332 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2332 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_add_expression_100__9:
  # $19.1: @IR_Add_Instruction = new(IR_Add_Instruction)
  .loc 1 2334 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Add_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2334 75
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax $20.1:rbx 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2334 52
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2334 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2334 119
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2334 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2334 5
  jmp .LABEL__convert_add_expression_100__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_add_expression_100__end:
  mov rsp, rbp
  pop rbp
  ret

convert_add_expression_100__stack_frame_size: .word 48

  .loc 1 2337 1
  .text
convert_array_access_expression_101:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_access_expression_101__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_access_expression_101__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # array_access_expression.1: @AST_Array_Access_Expression = load_variable(array_access_expression)
  # [live values]: self.1:rdi array_access_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  .loc 1 2338 44
  mov rax, rsi
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:rdi array_access_expression.1:rsi $1.1:rax 
  # index_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2338 20
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  .loc 1 2339 45
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:rax $3.1:rbx 
  # object_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2339 21
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:rax 
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  .loc 1 2340 26
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:rax object_value_type.1:rbx 
  # IR_Pointer_Type.12: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:rax object_value_type.1:rbx IR_Pointer_Type.12:r15 
  # $6.1: Boolean = call(is.325, object_value_type.1, IR_Pointer_Type.12)
  .loc 1 2341 10
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call is_325
  # [discarded value]: IR_Pointer_Type.12
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2341 10
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_array_access_expression_101__3
.LABEL__convert_array_access_expression_101__2:
  # $8.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  .loc 1 2342 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $8.1:rax 
  # $9.1: @String = call(clone.329, "Not an IR_Pointer_Type value: ")
  .loc 1 2342 49
  lea rdi, .LABEL__string_195[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-48], rax
  call clone_329
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $8.1:[rbp-48] $9.1:rax 
  # $10.1: @String = load_struct_member(object_value_type.1, name)
  .loc 1 2342 96
  mov rbx, [rbp-40]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $8.1:[rbp-48] $9.1:rax $10.1:rbx 
  # $11.1: @String = call(append.332, $9.1, $10.1)
  .loc 1 2342 49
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $8.1:[rbp-48] $11.1:rax 
  # call(abort.271, $8.1, $11.1)
  .loc 1 2342 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_271
  # [discarded value]: $8.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] 
.LABEL__convert_array_access_expression_101__3:
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  .loc 1 2344 26
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] object_value_type.1:rax 
  # $13.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  .loc 1 2345 85
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $13.1:rbx 
  # $14.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $13.1)
  .loc 1 2345 62
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_70
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:rax 
  # $15.1: @IR_Load_Array_Item_Instruction = call(create_ir_load_array_item_instruction.158, $14.1, object_value.1, index_value.1)
  .loc 1 2345 24
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-24]
  call create_ir_load_array_item_instruction_158
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $15.1:rax 
  # $16.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  .loc 1 2345 146
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $15.1:rax $16.1:rbx 
  # $17.1: @IR_Variable_Value = call(append.71, self.1, $15.1, $16.1)
  .loc 1 2345 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] $17.1:rax 
  # return($17.1)
  .loc 1 2345 5
  jmp .LABEL__convert_array_access_expression_101__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] array_access_expression.1:[rbp-8] index_value.1:[rbp-24] object_value.1:[rbp-32] object_value_type.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: array_access_expression.1
  # [discarded value]: index_value.1
  # [discarded value]: object_value.1
  # [discarded value]: object_value_type.1
  # [live values]: 
.LABEL__convert_array_access_expression_101__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_access_expression_101__stack_frame_size: .word 48

  .loc 1 2348 1
  .text
convert_call_expression_102:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_expression_102__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_expression_102__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 1 2349 9
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax 
  # AST_Member_Access_Expression.5: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rbx, AST_Member_Access_Expression[rip]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax AST_Member_Access_Expression.5:rbx 
  # $2.1: Boolean = call(is.325, $1.1, AST_Member_Access_Expression.5)
  .loc 1 2349 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_325
  # [discarded value]: $1.1
  # [discarded value]: AST_Member_Access_Expression.5
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_call_expression_102__3
.LABEL__convert_call_expression_102__2:
  # callee.1: @AST_Member_Access_Expression = load_struct_member(call_expression.1, callee)
  .loc 1 2350 19
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:rax 
  # call_arguments.1: @List = call(create_list.307)
  .loc 1 2351 27
  mov [rbp-24], rax
  call create_list_307
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:rax 
  # call_argument_types.1: @List = call(create_list.307)
  .loc 1 2352 32
  mov [rbp-32], rax
  call create_list_307
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:rax 
  # $7.1: @AST_Expression = load_struct_member(callee.1, object_expression)
  .loc 1 2353 51
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:rax $7.1:rbx 
  # first_argument.1: @IR_Value = call(convert_expression.98, self.1, $7.1)
  .loc 1 2353 27
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-40], rax
  call convert_expression_98
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] first_argument.1:rax 
  # call(append.308, call_arguments.1, first_argument.1)
  .loc 1 2354 9
  mov rdi, [rbp-32]
  mov rsi, rax
  mov [rbp-48], rax
  call append_308
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] first_argument.1:[rbp-48] 
  # $9.1: @IR_Type = load_struct_member(first_argument.1, type)
  .loc 1 2355 36
  mov rax, [rbp-48]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: first_argument.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] $9.1:rax 
  # call(append.308, call_argument_types.1, $9.1)
  .loc 1 2355 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call append_308
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] 
  # $10.1: @List = load_struct_member(call_expression.1, arguments)
  .loc 1 2356 38
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] $10.1:rax 
  # call_expression_arguments.1: @List_Iterator = call(create_iterator.319, $10.1)
  .loc 1 2356 38
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:rax 
  # jump(block.4)
  mov [rbp-48], rax
.LABEL__convert_call_expression_102__4:
  # $12.1: Boolean = call(has_next.322, call_expression_arguments.1)
  .loc 1 2357 16
  mov rdi, [rbp-48]
  call has_next_322
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] $12.1:rax 
  # jump($12.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_call_expression_102__6
.LABEL__convert_call_expression_102__5:
  # call_expression_argument.1: @AST_Expression = call(next.323, call_expression_arguments.1)
  .loc 1 2358 41
  mov rdi, [rbp-48]
  call next_323
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_expression_argument.1:rax 
  # call_argument.1: @IR_Value = call(convert_expression.98, self.1, call_expression_argument.1)
  .loc 1 2359 30
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: call_expression_argument.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_argument.1:rax 
  # call(append.308, call_arguments.1, call_argument.1)
  .loc 1 2360 13
  mov rdi, [rbp-32]
  mov rsi, rax
  mov [rbp-56], rax
  call append_308
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_argument.1:[rbp-56] 
  # $16.1: @IR_Type = load_struct_member(call_argument.1, type)
  .loc 1 2361 40
  mov rax, [rbp-56]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] $16.1:rax 
  # call(append.308, call_argument_types.1, $16.1)
  .loc 1 2361 13
  mov rdi, [rbp-40]
  mov rsi, rax
  call append_308
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # jump(block.4)
  jmp .LABEL__convert_call_expression_102__4
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
.LABEL__convert_call_expression_102__6:
  # $17.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 1 2363 50
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] $17.1:rax 
  # call_function.1: @IR_Function = call(get_named_function.66, self.1, $17.1, call_argument_types.1)
  .loc 1 2363 26
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-40]
  call get_named_function_66
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:rax 
  # $19.1: Boolean = call_function.1 == null
  .loc 1 2364 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:rax $19.1:rbx 
  # jump($19.1, block.7, block.8)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__convert_call_expression_102__8
.LABEL__convert_call_expression_102__7:
  # $20.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 1 2365 19
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $20.1:rax 
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  .loc 1 2365 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $21.1:rbx 
  # $22.1: @String = call(clone.329, "No such function: ")
  .loc 1 2365 48
  lea rdi, .LABEL__string_196[rip] # "No such function: "
  mov [rbp-64], rbx
  call clone_329
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax 
  # $23.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 1 2365 83
  mov rbx, [rbp-24]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax $23.1:rbx 
  # $24.1: @String = load_struct_member($23.1, lexeme)
  .loc 1 2365 83
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax $24.1:r15 
  # $25.1: @String = call(append.332, $22.1, $24.1)
  .loc 1 2365 48
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $21.1:[rbp-64] $25.1:rax 
  # call(abort.271, $21.1, $25.1)
  .loc 1 2365 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_271
  # [discarded value]: $21.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] 
.LABEL__convert_call_expression_102__8:
  # result_value.1: @IR_Variable_Value = null
  .loc 1 2367 9
  xor rax, rax
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:rax 
  # $26.1: @IR_Type = load_struct_member(call_function.1, return_type)
  .loc 1 2368 13
  mov rbx, [rbp-56]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:rax $26.1:rbx 
  # IR_Nothing_Type.4: @Object_Type = load_variable(IR_Nothing_Type)
  lea r15, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:rax $26.1:rbx IR_Nothing_Type.4:r15 
  # $27.1: Boolean = call(is.325, $26.1, IR_Nothing_Type.4)
  .loc 1 2368 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-64], rax
  call is_325
  # [discarded value]: $26.1
  # [discarded value]: IR_Nothing_Type.4
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] $27.1:rax 
  # $28.1: Boolean = $27.1 == false
  .loc 1 2368 13
  cmp al, 0
  sete bl
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] $28.1:rbx 
  # jump($28.1, block.9, block.10)
  test bl, bl
  jz .LABEL__convert_call_expression_102__10
.LABEL__convert_call_expression_102__9:
  # $29.1: @IR_Type = load_struct_member(call_function.1, return_type)
  .loc 1 2369 51
  mov rax, [rbp-56]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] $29.1:rax 
  # result_value.2: @IR_Variable_Value = call(create_temp_value.70, self.1, $29.1)
  .loc 1 2369 28
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:rax[rbp-64] 
  # jump(block.10)
  mov [rbp-64], rax
.LABEL__convert_call_expression_102__10:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] result_value.3:[rbp-64] 
  # $31.1: @IR_Call_Instruction = call(create_ir_call_instruction.154, result_value.3, call_function.1, call_arguments.1)
  .loc 1 2371 28
  mov rdi, [rbp-64]
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  call create_ir_call_instruction_154
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $31.1:rax 
  # $32.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 1 2371 101
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $31.1:rax $32.1:rbx 
  # $33.1: @IR_Variable_Value = call(append.71, self.1, $31.1, $32.1)
  .loc 1 2371 16
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $33.1:rax 
  # return($33.1)
  .loc 1 2371 9
  jmp .LABEL__convert_call_expression_102__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] 
  # [discarded value]: call_function.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # [discarded value]: callee.1
  # [discarded value]: call_arguments.1
  # [discarded value]: call_argument_types.1
  # [discarded value]: call_expression_arguments.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
.LABEL__convert_call_expression_102__3:
  # $34.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 1 2373 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $34.1:rax 
  # AST_Variable_Expression.5: @Object_Type = load_variable(AST_Variable_Expression)
  lea rbx, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $34.1:rax AST_Variable_Expression.5:rbx 
  # $35.1: Boolean = call(is.325, $34.1, AST_Variable_Expression.5)
  .loc 1 2373 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $34.1
  # [discarded value]: AST_Variable_Expression.5
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $35.1:rax 
  # jump($35.1, block.12, block.13)
  test al, al
  jz .LABEL__convert_call_expression_102__13
.LABEL__convert_call_expression_102__12:
  # callee.1: @AST_Variable_Expression = load_struct_member(call_expression.1, callee)
  .loc 1 2374 19
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:rax 
  # call_arguments.1: @List = call(create_list.307)
  .loc 1 2375 27
  mov [rbp-24], rax
  call create_list_307
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:rax 
  # call_argument_types.1: @List = call(create_list.307)
  .loc 1 2376 32
  mov [rbp-32], rax
  call create_list_307
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:rax 
  # $40.1: @List = load_struct_member(call_expression.1, arguments)
  .loc 1 2377 38
  mov rbx, [rbp-16]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:rax $40.1:rbx 
  # call_expression_arguments.1: @List_Iterator = call(create_iterator.319, $40.1)
  .loc 1 2377 38
  mov rdi, rbx
  mov [rbp-40], rax
  call create_iterator_319
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:rax 
  # jump(block.14)
  mov [rbp-48], rax
.LABEL__convert_call_expression_102__14:
  # $42.1: Boolean = call(has_next.322, call_expression_arguments.1)
  .loc 1 2378 16
  mov rdi, [rbp-48]
  call has_next_322
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] $42.1:rax 
  # jump($42.1, block.15, block.16)
  test al, al
  jz .LABEL__convert_call_expression_102__16
.LABEL__convert_call_expression_102__15:
  # call_expression_argument.1: @AST_Expression = call(next.323, call_expression_arguments.1)
  .loc 1 2379 41
  mov rdi, [rbp-48]
  call next_323
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_expression_argument.1:rax 
  # call_argument.1: @IR_Value = call(convert_expression.98, self.1, call_expression_argument.1)
  .loc 1 2380 30
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: call_expression_argument.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_argument.1:rax 
  # call(append.308, call_arguments.1, call_argument.1)
  .loc 1 2381 13
  mov rdi, [rbp-32]
  mov rsi, rax
  mov [rbp-56], rax
  call append_308
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_argument.1:[rbp-56] 
  # $46.1: @IR_Type = load_struct_member(call_argument.1, type)
  .loc 1 2382 40
  mov rax, [rbp-56]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] $46.1:rax 
  # call(append.308, call_argument_types.1, $46.1)
  .loc 1 2382 13
  mov rdi, [rbp-40]
  mov rsi, rax
  call append_308
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # jump(block.14)
  jmp .LABEL__convert_call_expression_102__14
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
.LABEL__convert_call_expression_102__16:
  # $47.1: @Identifier_Token = load_struct_member(callee.1, name)
  .loc 1 2384 50
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] $47.1:rax 
  # call_function.1: @IR_Function = call(get_named_function.66, self.1, $47.1, call_argument_types.1)
  .loc 1 2384 26
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-40]
  call get_named_function_66
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:rax 
  # $49.1: Boolean = call_function.1 == null
  .loc 1 2385 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:rax $49.1:rbx 
  # jump($49.1, block.17, block.18)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__convert_call_expression_102__18
.LABEL__convert_call_expression_102__17:
  # $50.1: @Identifier_Token = load_struct_member(callee.1, name)
  .loc 1 2386 19
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $50.1:rax 
  # $51.1: @Source_Location = load_struct_member($50.1, location)
  .loc 1 2386 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $51.1:rbx 
  # $52.1: @String = call(clone.329, "No such function: ")
  .loc 1 2386 41
  lea rdi, .LABEL__string_196[rip] # "No such function: "
  mov [rbp-64], rbx
  call clone_329
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $51.1:[rbp-64] $52.1:rax 
  # $53.1: @Identifier_Token = load_struct_member(callee.1, name)
  .loc 1 2386 76
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $51.1:[rbp-64] $52.1:rax $53.1:rbx 
  # $54.1: @String = load_struct_member($53.1, lexeme)
  .loc 1 2386 76
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $51.1:[rbp-64] $52.1:rax $54.1:r15 
  # $55.1: @String = call(append.332, $52.1, $54.1)
  .loc 1 2386 41
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $52.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] $51.1:[rbp-64] $55.1:rax 
  # call(abort.271, $51.1, $55.1)
  .loc 1 2386 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_271
  # [discarded value]: $51.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] 
.LABEL__convert_call_expression_102__18:
  # result_value.1: @IR_Variable_Value = null
  .loc 1 2388 9
  xor rax, rax
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:rax 
  # $56.1: @IR_Type = load_struct_member(call_function.1, return_type)
  .loc 1 2389 13
  mov rbx, [rbp-56]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:rax $56.1:rbx 
  # IR_Nothing_Type.5: @Object_Type = load_variable(IR_Nothing_Type)
  lea r15, IR_Nothing_Type[rip]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:rax $56.1:rbx IR_Nothing_Type.5:r15 
  # $57.1: Boolean = call(is.325, $56.1, IR_Nothing_Type.5)
  .loc 1 2389 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-64], rax
  call is_325
  # [discarded value]: $56.1
  # [discarded value]: IR_Nothing_Type.5
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] $57.1:rax 
  # $58.1: Boolean = $57.1 == false
  .loc 1 2389 13
  cmp al, 0
  sete bl
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] $58.1:rbx 
  # jump($58.1, block.19, block.20)
  test bl, bl
  jz .LABEL__convert_call_expression_102__20
.LABEL__convert_call_expression_102__19:
  # $59.1: @IR_Type = load_struct_member(call_function.1, return_type)
  .loc 1 2390 51
  mov rax, [rbp-56]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] $59.1:rax 
  # result_value.2: @IR_Variable_Value = call(create_temp_value.70, self.1, $59.1)
  .loc 1 2390 28
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:rax[rbp-64] 
  # jump(block.20)
  mov [rbp-64], rax
.LABEL__convert_call_expression_102__20:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] result_value.3:[rbp-64] 
  # $61.1: @IR_Call_Instruction = call(create_ir_call_instruction.154, result_value.3, call_function.1, call_arguments.1)
  .loc 1 2392 28
  mov rdi, [rbp-64]
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  call create_ir_call_instruction_154
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $61.1:rax 
  # $62.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 1 2392 101
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $61.1:rax $62.1:rbx 
  # $63.1: @IR_Variable_Value = call(append.71, self.1, $61.1, $62.1)
  .loc 1 2392 16
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] $63.1:rax 
  # return($63.1)
  .loc 1 2392 9
  jmp .LABEL__convert_call_expression_102__end
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] result_value.2:[rbp-64] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] result_value.1:[rbp-64] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] call_function.1:[rbp-56] 
  # [discarded value]: call_function.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] callee.1:[rbp-24] call_arguments.1:[rbp-32] call_argument_types.1:[rbp-40] call_expression_arguments.1:[rbp-48] 
  # [discarded value]: callee.1
  # [discarded value]: call_arguments.1
  # [discarded value]: call_argument_types.1
  # [discarded value]: call_expression_arguments.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
.LABEL__convert_call_expression_102__13:
  # $64.1: @Source_Location = load_struct_member(call_expression.1, location)
  .loc 1 2394 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $64.1:rax 
  # $65.1: @AST_Expression = load_struct_member(call_expression.1, callee)
  .loc 1 2394 37
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $64.1:rax $65.1:rbx 
  # $66.1: @Object_Type = load_struct_member($65.1, object_type)
  .loc 1 2394 37
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $64.1:rax $66.1:r15 
  # call(abort.127, $64.1, $66.1)
  .loc 1 2394 5
  mov rdi, rax
  mov rsi, r15
  call abort_127
  # [discarded value]: $64.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: call_expression.1
  # [live values]: 
.LABEL__convert_call_expression_102__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_expression_102__stack_frame_size: .word 64

  .loc 1 2397 1
  .text
convert_cast_expression_103:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_cast_expression_103__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_cast_expression_103__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # cast_expression.1: @AST_Cast_Expression = load_variable(cast_expression)
  # [live values]: self.1:rdi cast_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(cast_expression.1, value_expression)
  .loc 1 2398 38
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi cast_expression.1:rsi $1.1:rax 
  # value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2398 14
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax 
  # $3.1: @AST_Type = load_struct_member(cast_expression.1, type)
  .loc 1 2399 68
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax $3.1:rbx 
  # $4.1: @IR_Type = call(convert_value_type.75, self.1, $3.1)
  .loc 1 2399 44
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_value_type_75
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] $4.1:rax 
  # result_value.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $4.1)
  .loc 1 2399 21
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax 
  # $6.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2400 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax $6.1:rbx 
  # IR_Pointer_Type.13: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax $6.1:rbx IR_Pointer_Type.13:r15 
  # $8.1: Boolean = call(is.325, $6.1, IR_Pointer_Type.13)
  .loc 1 2400 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $6.1
  # [discarded value]: IR_Pointer_Type.13
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_cast_expression_103__3
.LABEL__convert_cast_expression_103__2:
  # $9.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2400 43
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $9.1:rax 
  # IR_Pointer_Type.14: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $9.1:rax IR_Pointer_Type.14:rbx 
  # $8.2: Boolean = call(is.325, $9.1, IR_Pointer_Type.14)
  .loc 1 2400 43
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $9.1
  # [discarded value]: IR_Pointer_Type.14
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:rax[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__convert_cast_expression_103__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 1 2400 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # jump($8.3, block.4, block.5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_cast_expression_103__5
.LABEL__convert_cast_expression_103__4:
  # $11.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, result_value.1, value.1)
  .loc 1 2401 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_set_instruction_168
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $11.1:rax 
  # $12.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 1 2401 76
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $11.1:rax $12.1:rbx 
  # $13.1: @IR_Variable_Value = call(append.71, self.1, $11.1, $12.1)
  .loc 1 2401 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $13.1:rax 
  # return($13.1)
  .loc 1 2401 9
  jmp .LABEL__convert_cast_expression_103__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
.LABEL__convert_cast_expression_103__5:
  # $14.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2403 9
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $14.1:rax 
  # IR_Int_Type.10: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $14.1:rax IR_Int_Type.10:rbx 
  # $16.1: Boolean = call(is.325, $14.1, IR_Int_Type.10)
  .loc 1 2403 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $14.1
  # [discarded value]: IR_Int_Type.10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:rax 
  # jump($16.1, block.7, block.8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_cast_expression_103__8
.LABEL__convert_cast_expression_103__7:
  # $17.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2403 40
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $17.1:rax 
  # IR_Int32_Type.8: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $17.1:rax IR_Int32_Type.8:rbx 
  # $19.1: Boolean = call(is.325, $17.1, IR_Int32_Type.8)
  .loc 1 2403 40
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $17.1
  # [discarded value]: IR_Int32_Type.8
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:rax 
  # jump($19.1, block.10, block.9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_cast_expression_103__9
.LABEL__convert_cast_expression_103__10:
  # $16.2: Boolean = phi($19.1, $19.2)
  .loc 1 2403 40
  mov al, [rbp-35]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:rax[rbp-34] 
  # jump(block.8)
  mov [rbp-34], al
.LABEL__convert_cast_expression_103__8:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2403 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
  # jump($16.3, block.11, block.12)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_cast_expression_103__12
.LABEL__convert_cast_expression_103__11:
  # $22.1: @IR_Cast_Instruction = call(create_ir_cast_instruction.155, result_value.1, value.1)
  .loc 1 2404 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_155
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 1 2404 77
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2404 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $24.1:rax 
  # return($24.1)
  .loc 1 2404 9
  jmp .LABEL__convert_cast_expression_103__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
.LABEL__convert_cast_expression_103__12:
  # $25.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2406 9
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $25.1:rax 
  # IR_Int32_Type.9: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $25.1:rax IR_Int32_Type.9:rbx 
  # $27.1: Boolean = call(is.325, $25.1, IR_Int32_Type.9)
  .loc 1 2406 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $25.1
  # [discarded value]: IR_Int32_Type.9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:rax 
  # jump($27.1, block.14, block.15)
  test al, al
  mov [rbp-36], al
  jz .LABEL__convert_cast_expression_103__15
.LABEL__convert_cast_expression_103__14:
  # $28.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2406 42
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rax 
  # IR_Int_Type.11: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rax IR_Int_Type.11:rbx 
  # $30.1: Boolean = call(is.325, $28.1, IR_Int_Type.11)
  .loc 1 2406 42
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $28.1
  # [discarded value]: IR_Int_Type.11
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:rax 
  # jump($30.1, block.17, block.16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__convert_cast_expression_103__16
.LABEL__convert_cast_expression_103__17:
  # $27.2: Boolean = phi($30.1, $30.2)
  .loc 1 2406 42
  mov al, [rbp-37]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:rax[rbp-36] 
  # jump(block.15)
  mov [rbp-36], al
.LABEL__convert_cast_expression_103__15:
  # $27.3: Boolean = phi($27.1, $27.2)
  .loc 1 2406 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
  # jump($27.3, block.18, block.19)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_cast_expression_103__19
.LABEL__convert_cast_expression_103__18:
  # $33.1: @IR_Cast_Instruction = call(create_ir_cast_instruction.155, result_value.1, value.1)
  .loc 1 2407 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_155
  # [discarded value]: $27.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $33.1:rax 
  # $34.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 1 2407 77
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $33.1:rax $34.1:rbx 
  # $35.1: @IR_Variable_Value = call(append.71, self.1, $33.1, $34.1)
  .loc 1 2407 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $35.1:rax 
  # return($35.1)
  .loc 1 2407 9
  jmp .LABEL__convert_cast_expression_103__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
.LABEL__convert_cast_expression_103__19:
  # $36.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2409 9
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $36.1:rax 
  # IR_Int8_Type.10: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $36.1:rax IR_Int8_Type.10:rbx 
  # $38.1: Boolean = call(is.325, $36.1, IR_Int8_Type.10)
  .loc 1 2409 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $36.1
  # [discarded value]: IR_Int8_Type.10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:rax 
  # jump($38.1, block.21, block.22)
  test al, al
  mov [rbp-38], al
  jz .LABEL__convert_cast_expression_103__22
.LABEL__convert_cast_expression_103__21:
  # $39.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2409 41
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rax 
  # IR_Int_Type.12: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rax IR_Int_Type.12:rbx 
  # $41.1: Boolean = call(is.325, $39.1, IR_Int_Type.12)
  .loc 1 2409 41
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $39.1
  # [discarded value]: IR_Int_Type.12
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:rax 
  # jump($41.1, block.24, block.23)
  test al, al
  mov [rbp-39], al
  jz .LABEL__convert_cast_expression_103__23
.LABEL__convert_cast_expression_103__24:
  # $38.2: Boolean = phi($41.1, $41.2)
  .loc 1 2409 41
  mov al, [rbp-39]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:rax[rbp-38] 
  # jump(block.22)
  mov [rbp-38], al
.LABEL__convert_cast_expression_103__22:
  # $38.3: Boolean = phi($38.1, $38.2)
  .loc 1 2409 9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
  # jump($38.3, block.25, block.26)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__convert_cast_expression_103__26
.LABEL__convert_cast_expression_103__25:
  # $44.1: @IR_Cast_Instruction = call(create_ir_cast_instruction.155, result_value.1, value.1)
  .loc 1 2410 28
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_155
  # [discarded value]: $38.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $44.1:rax 
  # $45.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 1 2410 77
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $44.1:rax $45.1:rbx 
  # $46.1: @IR_Variable_Value = call(append.71, self.1, $44.1, $45.1)
  .loc 1 2410 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $46.1:rax 
  # return($46.1)
  .loc 1 2410 9
  jmp .LABEL__convert_cast_expression_103__end
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
.LABEL__convert_cast_expression_103__26:
  # $47.1: @Source_Location = load_struct_member(cast_expression.1, location)
  .loc 1 2412 11
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:rax 
  # $48.1: @String = call(clone.329, "Cannot cast ")
  .loc 1 2412 37
  lea rdi, .LABEL__string_39[rip] # "Cannot cast "
  mov [rbp-47], rax
  call clone_329
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax 
  # $49.1: @IR_Type = load_struct_member(value.1, type)
  .loc 1 2412 66
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $49.1:rbx 
  # $50.1: @String = load_struct_member($49.1, name)
  .loc 1 2412 66
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $50.1:r15 
  # $51.1: @String = call(append.332, $48.1, $50.1)
  .loc 1 2412 37
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $48.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $51.1:rax 
  # $52.1: @String = call(append.332, $51.1, " to ")
  .loc 1 2412 37
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # " to "
  call append_332
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax 
  # $53.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2412 105
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $53.1:rbx 
  # $54.1: @String = load_struct_member($53.1, name)
  .loc 1 2412 105
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $54.1:r15 
  # $55.1: @String = call(append.332, $52.1, $54.1)
  .loc 1 2412 37
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $52.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] $47.1:[rbp-47] $55.1:rax 
  # call(abort.271, $47.1, $55.1)
  .loc 1 2412 5
  mov rdi, [rbp-47]
  mov rsi, rax
  call abort_271
  # [discarded value]: $47.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [discarded value]: $38.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
.LABEL__convert_cast_expression_103__23:
  # $42.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2409 78
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rax 
  # IR_Int32_Type.10: @Object_Type = load_variable(IR_Int32_Type)
  lea rbx, IR_Int32_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rax IR_Int32_Type.10:rbx 
  # $41.2: Boolean = call(is.325, $42.1, IR_Int32_Type.10)
  .loc 1 2409 78
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $42.1
  # [discarded value]: IR_Int32_Type.10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:rax[rbp-39] 
  # jump(block.24)
  mov [rbp-39], al
  jmp .LABEL__convert_cast_expression_103__24
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:[rbp-39] 
  # [discarded value]: $41.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
.LABEL__convert_cast_expression_103__16:
  # $31.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2406 79
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rax 
  # IR_Int8_Type.9: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rax IR_Int8_Type.9:rbx 
  # $30.2: Boolean = call(is.325, $31.1, IR_Int8_Type.9)
  .loc 1 2406 79
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $31.1
  # [discarded value]: IR_Int8_Type.9
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:rax[rbp-37] 
  # jump(block.17)
  mov [rbp-37], al
  jmp .LABEL__convert_cast_expression_103__17
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:[rbp-37] 
  # [discarded value]: $30.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
.LABEL__convert_cast_expression_103__9:
  # $20.1: @IR_Type = load_struct_member(result_value.1, type)
  .loc 1 2403 79
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rax 
  # IR_Int8_Type.8: @Object_Type = load_variable(IR_Int8_Type)
  lea rbx, IR_Int8_Type[rip]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rax IR_Int8_Type.8:rbx 
  # $19.2: Boolean = call(is.325, $20.1, IR_Int8_Type.8)
  .loc 1 2403 79
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $20.1
  # [discarded value]: IR_Int8_Type.8
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:rax[rbp-35] 
  # jump(block.10)
  mov [rbp-35], al
  jmp .LABEL__convert_cast_expression_103__10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:[rbp-35] 
  # [discarded value]: $19.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: cast_expression.1
  # [discarded value]: value.1
  # [discarded value]: result_value.1
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__convert_cast_expression_103__end:
  mov rsp, rbp
  pop rbp
  ret

convert_cast_expression_103__stack_frame_size: .word 48

  .loc 1 2415 1
  .text
convert_divide_expression_104:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_divide_expression_104__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_divide_expression_104__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Divide_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2416 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2416 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2417 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2417 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2418 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.13: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.13:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.13)
  .loc 1 2418 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.13
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2418 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_divide_expression_104__3
.LABEL__convert_divide_expression_104__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2419 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2419 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2419 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_divide_expression_104__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2421 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.14: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.14:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.14)
  .loc 1 2421 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.14
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2421 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_divide_expression_104__5
.LABEL__convert_divide_expression_104__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2422 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2422 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2422 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_divide_expression_104__5:
  # IR_Constant_Value.10: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.10:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.10)
  .loc 1 2424 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.10
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_divide_expression_104__7
.LABEL__convert_divide_expression_104__6:
  # IR_Constant_Value.11: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.11:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.11)
  .loc 1 2424 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.11
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_divide_expression_104__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2424 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_divide_expression_104__9
.LABEL__convert_divide_expression_104__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2425 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2425 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_divide_expression_104__9:
  # $19.1: @IR_Divide_Instruction = new(IR_Divide_Instruction)
  .loc 1 2427 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Divide_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2427 78
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax $20.1:rbx 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2427 55
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2427 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2427 122
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2427 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2427 5
  jmp .LABEL__convert_divide_expression_104__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_divide_expression_104__end:
  mov rsp, rbp
  pop rbp
  ret

convert_divide_expression_104__stack_frame_size: .word 48

  .loc 1 2430 1
  .text
convert_equals_expression_105:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_equals_expression_105__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_equals_expression_105__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2431 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2431 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2432 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2432 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2433 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2433 32
  mov r15, rax
  add r15, 8
  mov r15, [r15]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx $6.1:r15 
  # $7.1: Boolean = call(equals.132, $5.1, $6.1)
  .loc 1 2433 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call equals_132
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  # $9.1: Boolean = $7.1 == false
  .loc 1 2433 9
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, block.2, block.3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_equals_expression_105__3
.LABEL__convert_equals_expression_105__2:
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2433 63
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rax 
  # IR_Pointer_Type.15: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rax IR_Pointer_Type.15:rbx 
  # $12.1: Boolean = call(is.325, $10.1, IR_Pointer_Type.15)
  .loc 1 2433 63
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Pointer_Type.15
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, block.4, block.5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_equals_expression_105__5
.LABEL__convert_equals_expression_105__4:
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2433 102
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rax 
  # IR_Null_Type.5: @Object_Type = load_variable(IR_Null_Type)
  lea rbx, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rax IR_Null_Type.5:rbx 
  # $14.1: Boolean = call(is.325, $13.1, IR_Null_Type.5)
  .loc 1 2433 102
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $13.1
  # [discarded value]: IR_Null_Type.5
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  # $12.2: Boolean = $14.1 == false
  .loc 1 2433 102
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx[rbp-34] 
  # jump(block.5)
  mov [rbp-34], bl
.LABEL__convert_equals_expression_105__5:
  # $9.2: Boolean = phi($12.1, $12.2)
  .loc 1 2433 63
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__convert_equals_expression_105__3:
  # $9.3: Boolean = phi($9.1, $9.2)
  .loc 1 2433 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_equals_expression_105__7
.LABEL__convert_equals_expression_105__6:
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2434 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rax 
  # call(abort.271, $16.1, "Operands are not the same type")
  .loc 1 2434 9
  mov rdi, rax
  lea rsi, .LABEL__string_197[rip] # "Operands are not the same type"
  call abort_271
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_equals_expression_105__7:
  # IR_Constant_Value.12: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] IR_Constant_Value.12:rax 
  # $18.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.12)
  .loc 1 2436 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.12
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, block.8, block.9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_equals_expression_105__9
.LABEL__convert_equals_expression_105__8:
  # IR_Constant_Value.13: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] IR_Constant_Value.13:rax 
  # $18.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.13)
  .loc 1 2436 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.13
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax[rbp-35] 
  # jump(block.9)
  mov [rbp-35], al
.LABEL__convert_equals_expression_105__9:
  # $18.3: Boolean = phi($18.1, $18.2)
  .loc 1 2436 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, block.10, block.11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_equals_expression_105__11
.LABEL__convert_equals_expression_105__10:
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2437 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $20.1:rax 
  # call(abort.271, $20.1, "TODO: Evaluate constant expression")
  .loc 1 2437 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
.LABEL__convert_equals_expression_105__11:
  # $21.1: @IR_Equals_Comparison_Instruction = new(IR_Equals_Comparison_Instruction)
  .loc 1 2439 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:rax 
  # $22.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2439 89
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  mov [rbp-43], rax
  call get_named_type_61
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:[rbp-43] $22.1:rax 
  # $23.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $22.1)
  .loc 1 2439 66
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:[rbp-43] $23.1:rax 
  # $24.1: @IR_Binary_Instruction = call(init.177, $21.1, $23.1, left_value.1, right_value.1)
  .loc 1 2439 24
  mov rdi, [rbp-43]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $21.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # $25.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2439 148
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax $25.1:rbx 
  # $26.1: @IR_Variable_Value = call(append.71, self.1, $24.1, $25.1)
  .loc 1 2439 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $26.1:rax 
  # return($26.1)
  .loc 1 2439 5
  jmp .LABEL__convert_equals_expression_105__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $9.1
  # [live values]: 
.LABEL__convert_equals_expression_105__end:
  mov rsp, rbp
  pop rbp
  ret

convert_equals_expression_105__stack_frame_size: .word 48

  .loc 1 2442 1
  .text
convert_greater_than_expression_106:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_expression_106__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_expression_106__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2443 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2443 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2444 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2444 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2445 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.15: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.15:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.15)
  .loc 1 2445 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.15
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2445 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_greater_than_expression_106__3
.LABEL__convert_greater_than_expression_106__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2446 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2446 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2446 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_greater_than_expression_106__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2448 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.16: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.16:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.16)
  .loc 1 2448 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.16
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2448 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_greater_than_expression_106__5
.LABEL__convert_greater_than_expression_106__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2449 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2449 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2449 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_greater_than_expression_106__5:
  # IR_Constant_Value.14: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.14:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.14)
  .loc 1 2451 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.14
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_greater_than_expression_106__7
.LABEL__convert_greater_than_expression_106__6:
  # IR_Constant_Value.15: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.15:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.15)
  .loc 1 2451 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.15
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_greater_than_expression_106__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2451 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_greater_than_expression_106__9
.LABEL__convert_greater_than_expression_106__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2452 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2452 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_greater_than_expression_106__9:
  # $19.1: @IR_Greater_Than_Comparison_Instruction = new(IR_Greater_Than_Comparison_Instruction)
  .loc 1 2454 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Greater_Than_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2454 95
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  mov [rbp-41], rax
  call get_named_type_61
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $20.1:rax 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2454 72
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2454 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2454 154
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2454 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2454 5
  jmp .LABEL__convert_greater_than_expression_106__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_greater_than_expression_106__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_expression_106__stack_frame_size: .word 48

  .loc 1 2457 1
  .text
convert_greater_than_or_equals_expression_107:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_or_equals_expression_107__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_or_equals_expression_107__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2458 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2458 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2459 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2459 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2460 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.17: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.17:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.17)
  .loc 1 2460 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.17
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2460 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_greater_than_or_equals_expression_107__3
.LABEL__convert_greater_than_or_equals_expression_107__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2461 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2461 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2461 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_greater_than_or_equals_expression_107__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2463 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.18: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.18:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.18)
  .loc 1 2463 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.18
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2463 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_greater_than_or_equals_expression_107__5
.LABEL__convert_greater_than_or_equals_expression_107__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2464 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2464 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2464 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_greater_than_or_equals_expression_107__5:
  # IR_Constant_Value.16: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.16:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.16)
  .loc 1 2466 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.16
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_greater_than_or_equals_expression_107__7
.LABEL__convert_greater_than_or_equals_expression_107__6:
  # IR_Constant_Value.17: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.17:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.17)
  .loc 1 2466 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.17
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_greater_than_or_equals_expression_107__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2466 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_greater_than_or_equals_expression_107__9
.LABEL__convert_greater_than_or_equals_expression_107__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2467 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2467 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_greater_than_or_equals_expression_107__9:
  # $19.1: @IR_Greater_Than_Or_Equals_Comparison_Instruction = new(IR_Greater_Than_Or_Equals_Comparison_Instruction)
  .loc 1 2469 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Greater_Than_Or_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2469 105
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  mov [rbp-41], rax
  call get_named_type_61
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $20.1:rax 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2469 82
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2469 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2469 164
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2469 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2469 5
  jmp .LABEL__convert_greater_than_or_equals_expression_107__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_greater_than_or_equals_expression_107__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_or_equals_expression_107__stack_frame_size: .word 48

  .loc 1 2472 1
  .text
convert_less_than_expression_108:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_expression_108__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_expression_108__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2473 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2473 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2474 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2474 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2475 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.19: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.19:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.19)
  .loc 1 2475 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.19
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2475 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_less_than_expression_108__3
.LABEL__convert_less_than_expression_108__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2476 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2476 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2476 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_less_than_expression_108__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2478 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.20: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.20:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.20)
  .loc 1 2478 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.20
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2478 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_less_than_expression_108__5
.LABEL__convert_less_than_expression_108__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2479 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2479 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2479 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_less_than_expression_108__5:
  # IR_Constant_Value.18: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.18:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.18)
  .loc 1 2481 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.18
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_less_than_expression_108__7
.LABEL__convert_less_than_expression_108__6:
  # IR_Constant_Value.19: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.19:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.19)
  .loc 1 2481 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.19
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_less_than_expression_108__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2481 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_less_than_expression_108__9
.LABEL__convert_less_than_expression_108__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2482 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2482 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_less_than_expression_108__9:
  # $19.1: @IR_Less_Than_Comparison_Instruction = new(IR_Less_Than_Comparison_Instruction)
  .loc 1 2484 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Less_Than_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2484 92
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  mov [rbp-41], rax
  call get_named_type_61
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $20.1:rax 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2484 69
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2484 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2484 151
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2484 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2484 5
  jmp .LABEL__convert_less_than_expression_108__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_less_than_expression_108__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_expression_108__stack_frame_size: .word 48

  .loc 1 2487 1
  .text
convert_less_than_or_equals_expression_109:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_or_equals_expression_109__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_or_equals_expression_109__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2488 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2488 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2489 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2489 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2490 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.21: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.21:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.21)
  .loc 1 2490 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.21
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2490 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_less_than_or_equals_expression_109__3
.LABEL__convert_less_than_or_equals_expression_109__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2491 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2491 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2491 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_less_than_or_equals_expression_109__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2493 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.22: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.22:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.22)
  .loc 1 2493 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.22
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2493 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_less_than_or_equals_expression_109__5
.LABEL__convert_less_than_or_equals_expression_109__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2494 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2494 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2494 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_less_than_or_equals_expression_109__5:
  # IR_Constant_Value.20: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.20:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.20)
  .loc 1 2496 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.20
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_less_than_or_equals_expression_109__7
.LABEL__convert_less_than_or_equals_expression_109__6:
  # IR_Constant_Value.21: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.21:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.21)
  .loc 1 2496 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.21
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_less_than_or_equals_expression_109__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2496 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_less_than_or_equals_expression_109__9
.LABEL__convert_less_than_or_equals_expression_109__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2497 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2497 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_less_than_or_equals_expression_109__9:
  # $19.1: @IR_Less_Than_Or_Equals_Comparison_Instruction = new(IR_Less_Than_Or_Equals_Comparison_Instruction)
  .loc 1 2499 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Less_Than_Or_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2499 102
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  mov [rbp-41], rax
  call get_named_type_61
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $20.1:rax 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2499 79
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2499 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2499 161
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2499 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2499 5
  jmp .LABEL__convert_less_than_or_equals_expression_109__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_less_than_or_equals_expression_109__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_or_equals_expression_109__stack_frame_size: .word 48

  .loc 1 2502 1
  .text
convert_literal_expression_110:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_literal_expression_110__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_literal_expression_110__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2503 9
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # Boolean_Token.4: @Object_Type = load_variable(Boolean_Token)
  lea rbx, Boolean_Token[rip]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax Boolean_Token.4:rbx 
  # $2.1: Boolean = call(is.325, $1.1, Boolean_Token.4)
  .loc 1 2503 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, rbx
  call is_325
  # [discarded value]: $1.1
  # [discarded value]: Boolean_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_literal_expression_110__3
.LABEL__convert_literal_expression_110__2:
  # $3.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2504 41
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  call get_named_type_61
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # $4.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2504 73
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax $4.1:rbx 
  # $5.1: @IR_Constant_Value = call(create_ir_constant_value.141, $3.1, $4.1)
  .loc 1 2504 16
  mov rdi, rax
  mov rsi, rbx
  call create_ir_constant_value_141
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # return($5.1)
  .loc 1 2504 9
  jmp .LABEL__convert_literal_expression_110__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_110__3:
  # $6.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2506 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # Character_Token.4: @Object_Type = load_variable(Character_Token)
  lea rbx, Character_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax Character_Token.4:rbx 
  # $7.1: Boolean = call(is.325, $6.1, Character_Token.4)
  .loc 1 2506 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $6.1
  # [discarded value]: Character_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__convert_literal_expression_110__6
.LABEL__convert_literal_expression_110__5:
  # $8.1: @IR_Type = call(get_named_type.61, self.1, "Int8")
  .loc 1 2507 41
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_159[rip] # "Int8"
  call get_named_type_61
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # $9.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2507 70
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax $9.1:rbx 
  # $10.1: @IR_Constant_Value = call(create_ir_constant_value.141, $8.1, $9.1)
  .loc 1 2507 16
  mov rdi, rax
  mov rsi, rbx
  call create_ir_constant_value_141
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $10.1:rax 
  # return($10.1)
  .loc 1 2507 9
  jmp .LABEL__convert_literal_expression_110__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_110__6:
  # $11.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2509 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $11.1:rax 
  # Integer_Token.6: @Object_Type = load_variable(Integer_Token)
  lea rbx, Integer_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $11.1:rax Integer_Token.6:rbx 
  # $12.1: Boolean = call(is.325, $11.1, Integer_Token.6)
  .loc 1 2509 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $11.1
  # [discarded value]: Integer_Token.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $12.1:rax 
  # jump($12.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_literal_expression_110__9
.LABEL__convert_literal_expression_110__8:
  # $13.1: @IR_Type = call(get_named_type.61, self.1, "Int")
  .loc 1 2510 41
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_158[rip] # "Int"
  call get_named_type_61
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $13.1:rax 
  # $14.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2510 69
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $13.1:rax $14.1:rbx 
  # $15.1: @IR_Constant_Value = call(create_ir_constant_value.141, $13.1, $14.1)
  .loc 1 2510 16
  mov rdi, rax
  mov rsi, rbx
  call create_ir_constant_value_141
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $15.1:rax 
  # return($15.1)
  .loc 1 2510 9
  jmp .LABEL__convert_literal_expression_110__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_110__9:
  # $16.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2512 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $16.1:rax 
  # Null_Token.4: @Object_Type = load_variable(Null_Token)
  lea rbx, Null_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $16.1:rax Null_Token.4:rbx 
  # $17.1: Boolean = call(is.325, $16.1, Null_Token.4)
  .loc 1 2512 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $16.1
  # [discarded value]: Null_Token.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $17.1:rax 
  # jump($17.1, block.11, block.12)
  test al, al
  jz .LABEL__convert_literal_expression_110__12
.LABEL__convert_literal_expression_110__11:
  # $18.1: @IR_Type = call(get_named_type.61, self.1, "Null")
  .loc 1 2513 41
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_164[rip] # "Null"
  call get_named_type_61
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $18.1:rax 
  # $19.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2513 70
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $18.1:rax $19.1:rbx 
  # $20.1: @IR_Constant_Value = call(create_ir_constant_value.141, $18.1, $19.1)
  .loc 1 2513 16
  mov rdi, rax
  mov rsi, rbx
  call create_ir_constant_value_141
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $20.1:rax 
  # return($20.1)
  .loc 1 2513 9
  jmp .LABEL__convert_literal_expression_110__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_110__12:
  # $21.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2515 9
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:rax 
  # String_Token.3: @Object_Type = load_variable(String_Token)
  lea rbx, String_Token[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $21.1:rax String_Token.3:rbx 
  # $22.1: Boolean = call(is.325, $21.1, String_Token.3)
  .loc 1 2515 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $21.1
  # [discarded value]: String_Token.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $22.1:rax 
  # jump($22.1, block.14, block.15)
  test al, al
  jz .LABEL__convert_literal_expression_110__15
.LABEL__convert_literal_expression_110__14:
  # $23.1: @IR_Type = call(get_named_type.61, self.1, "String")
  .loc 1 2516 64
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_198[rip] # "String"
  call get_named_type_61
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $23.1:rax 
  # $24.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, $23.1)
  .loc 1 2516 41
  mov rdi, rax
  call create_ir_pointer_type_133
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $24.1:rax 
  # $25.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2516 96
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $24.1:rax $25.1:rbx 
  # $26.1: @IR_Constant_Value = call(create_ir_constant_value.141, $24.1, $25.1)
  .loc 1 2516 16
  mov rdi, rax
  mov rsi, rbx
  call create_ir_constant_value_141
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $26.1:rax 
  # return($26.1)
  .loc 1 2516 9
  jmp .LABEL__convert_literal_expression_110__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__convert_literal_expression_110__15:
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2518 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # $28.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2518 32
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax $28.1:rbx 
  # $29.1: @Object_Type = load_struct_member($28.1, object_type)
  .loc 1 2518 32
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax $29.1:r15 
  # call(abort.127, $27.1, $29.1)
  .loc 1 2518 5
  mov rdi, rax
  mov rsi, r15
  call abort_127
  # [discarded value]: $27.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_literal_expression_110__end:
  mov rsp, rbp
  pop rbp
  ret

convert_literal_expression_110__stack_frame_size: .word 16

  .loc 1 2521 1
  .text
convert_logic_and_expression_111:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_and_expression_111__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_and_expression_111__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_And_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2522 19
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 1 2522 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # next_block.1: @IR_Block = call(create_block.149, $2.1)
  .loc 1 2522 19
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_149
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2523 18
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:rbx 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 1 2523 18
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r15 
  # end_block.1: @IR_Block = call(create_block.149, $5.1)
  .loc 1 2523 18
  mov rdi, r15
  mov [rbp-24], rax
  call create_block_149
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2524 43
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:rbx 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $7.1)
  .loc 1 2524 19
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call convert_expression_98
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2525 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax $9.1:rbx 
  # IR_Boolean_Type.6: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax $9.1:rbx IR_Boolean_Type.6:r15 
  # $10.1: Boolean = call(is.325, $9.1, IR_Boolean_Type.6)
  .loc 1 2525 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  call is_325
  # [discarded value]: $9.1
  # [discarded value]: IR_Boolean_Type.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  # $11.1: Boolean = $10.1 == false
  .loc 1 2525 9
  cmp al, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $11.1:rbx 
  # jump($11.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_logic_and_expression_111__3
.LABEL__convert_logic_and_expression_111__2:
  # $12.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2526 15
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $12.1:rax 
  # $13.1: @Source_Location = load_struct_member($12.1, location)
  .loc 1 2526 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $13.1:rbx 
  # call(abort.271, $13.1, "Must be a boolean expression")
  .loc 1 2526 9
  mov rdi, rbx
  lea rsi, .LABEL__string_199[rip] # "Must be a boolean expression"
  call abort_271
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] 
.LABEL__convert_logic_and_expression_111__3:
  # $14.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2528 50
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  call get_named_type_61
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $14.1:rax 
  # result_variable.1: @IR_Variable = call(create_temp_variable.69, self.1, $14.1)
  .loc 1 2528 24
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_69
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value.65, self.1, result_variable.1)
  .loc 1 2529 26
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  # $17.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, result_value_left.1, left_value.1)
  .loc 1 2530 17
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_168
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $17.1:rax 
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2530 75
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $17.1:rax $18.1:rbx 
  # $19.1: @IR_Variable_Value = call(append.71, self.1, $17.1, $18.1)
  .loc 1 2530 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2531 5
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $20.1:rax 
  # $21.1: @IR_Conditional_Jump_Instruction = call(append_jump.147, $20.1, result_value_left.1, next_block.1, end_block.1)
  .loc 1 2531 5
  mov rdi, rax
  mov rsi, [rbp-56]
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call append_jump_147
  # [discarded value]: result_value_left.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] 
  # store_struct_member(self.1, current_block, next_block.1)
  .loc 1 2532 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rbx[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] 
  # $22.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2533 44
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rbx[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] $22.1:rax 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $22.1)
  .loc 1 2533 20
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:rax 
  # $24.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2534 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:rax $24.1:rbx 
  # IR_Boolean_Type.7: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:rax $24.1:rbx IR_Boolean_Type.7:r15 
  # $25.1: Boolean = call(is.325, $24.1, IR_Boolean_Type.7)
  .loc 1 2534 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-56], rax
  call is_325
  # [discarded value]: $24.1
  # [discarded value]: IR_Boolean_Type.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $25.1:rax 
  # $26.1: Boolean = $25.1 == false
  .loc 1 2534 9
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $26.1:rbx 
  # jump($26.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_logic_and_expression_111__5
.LABEL__convert_logic_and_expression_111__4:
  # $27.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2535 15
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $27.1:rax 
  # $28.1: @Source_Location = load_struct_member($27.1, location)
  .loc 1 2535 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $28.1:rbx 
  # call(abort.271, $28.1, "Must be a boolean expression")
  .loc 1 2535 9
  mov rdi, rbx
  lea rsi, .LABEL__string_199[rip] # "Must be a boolean expression"
  call abort_271
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
.LABEL__convert_logic_and_expression_111__5:
  # $29.1: @IR_Variable_Value = call(create_variable_value.65, self.1, result_variable.1)
  .loc 1 2537 43
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $29.1:rax 
  # $30.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, $29.1, right_value.1)
  .loc 1 2537 17
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_168
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $30.1:rax 
  # $31.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2537 102
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $30.1:rax $31.1:rbx 
  # $32.1: @IR_Variable_Value = call(append.71, self.1, $30.1, $31.1)
  .loc 1 2537 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # $33.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2538 5
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $33.1:rax 
  # $34.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $33.1, end_block.1)
  .loc 1 2538 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_jump_146
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 1 2539 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rbx[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # $35.1: @IR_Variable_Value = call(create_variable_value.65, self.1, result_variable.1)
  .loc 1 2540 50
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $35.1:rax 
  # $36.1: @IR_Phi_Instruction = call(create_ir_phi_instruction.180, $35.1)
  .loc 1 2540 24
  mov rdi, rax
  call create_ir_phi_instruction_180
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $36.1:rax 
  # $37.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2540 96
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $36.1:rax $37.1:rbx 
  # $38.1: @IR_Variable_Value = call(append.71, self.1, $36.1, $37.1)
  .loc 1 2540 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $38.1:rax 
  # return($38.1)
  .loc 1 2540 5
  jmp .LABEL__convert_logic_and_expression_111__end
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # [discarded value]: result_variable.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: next_block.1
  # [discarded value]: end_block.1
  # [discarded value]: left_value.1
  # [live values]: 
.LABEL__convert_logic_and_expression_111__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_and_expression_111__stack_frame_size: .word 64

  .loc 1 2543 1
  .text
convert_logic_or_expression_112:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_or_expression_112__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_or_expression_112__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_Or_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2544 19
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  .loc 1 2544 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # next_block.1: @IR_Block = call(create_block.149, $2.1)
  .loc 1 2544 19
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_149
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2545 18
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:rbx 
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  .loc 1 2545 18
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r15 
  # end_block.1: @IR_Block = call(create_block.149, $5.1)
  .loc 1 2545 18
  mov rdi, r15
  mov [rbp-24], rax
  call create_block_149
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2546 43
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:rbx 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $7.1)
  .loc 1 2546 19
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call convert_expression_98
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2547 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax $9.1:rbx 
  # IR_Boolean_Type.8: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax $9.1:rbx IR_Boolean_Type.8:r15 
  # $10.1: Boolean = call(is.325, $9.1, IR_Boolean_Type.8)
  .loc 1 2547 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  call is_325
  # [discarded value]: $9.1
  # [discarded value]: IR_Boolean_Type.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  # $11.1: Boolean = $10.1 == false
  .loc 1 2547 9
  cmp al, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $11.1:rbx 
  # jump($11.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_logic_or_expression_112__3
.LABEL__convert_logic_or_expression_112__2:
  # $12.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2548 15
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $12.1:rax 
  # $13.1: @Source_Location = load_struct_member($12.1, location)
  .loc 1 2548 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $13.1:rbx 
  # call(abort.271, $13.1, "Must be a boolean expression")
  .loc 1 2548 9
  mov rdi, rbx
  lea rsi, .LABEL__string_199[rip] # "Must be a boolean expression"
  call abort_271
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] 
.LABEL__convert_logic_or_expression_112__3:
  # $14.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2550 50
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  call get_named_type_61
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $14.1:rax 
  # result_variable.1: @IR_Variable = call(create_temp_variable.69, self.1, $14.1)
  .loc 1 2550 24
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_69
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value.65, self.1, result_variable.1)
  .loc 1 2551 26
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  # $17.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, result_value_left.1, left_value.1)
  .loc 1 2552 17
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_168
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $17.1:rax 
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2552 75
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $17.1:rax $18.1:rbx 
  # $19.1: @IR_Variable_Value = call(append.71, self.1, $17.1, $18.1)
  .loc 1 2552 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2553 5
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $20.1:rax 
  # $21.1: @IR_Conditional_Jump_Instruction = call(append_jump.147, $20.1, result_value_left.1, end_block.1, next_block.1)
  .loc 1 2553 5
  mov rdi, rax
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  mov rcx, [rbp-24]
  call append_jump_147
  # [discarded value]: result_value_left.1
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] 
  # store_struct_member(self.1, current_block, next_block.1)
  .loc 1 2554 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rbx[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] 
  # $22.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2555 44
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rbx[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] $22.1:rax 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $22.1)
  .loc 1 2555 20
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_expression_98
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:rax 
  # $24.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2556 9
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:rax $24.1:rbx 
  # IR_Boolean_Type.9: @Object_Type = load_variable(IR_Boolean_Type)
  lea r15, IR_Boolean_Type[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:rax $24.1:rbx IR_Boolean_Type.9:r15 
  # $25.1: Boolean = call(is.325, $24.1, IR_Boolean_Type.9)
  .loc 1 2556 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-56], rax
  call is_325
  # [discarded value]: $24.1
  # [discarded value]: IR_Boolean_Type.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $25.1:rax 
  # $26.1: Boolean = $25.1 == false
  .loc 1 2556 9
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $26.1:rbx 
  # jump($26.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_logic_or_expression_112__5
.LABEL__convert_logic_or_expression_112__4:
  # $27.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2557 15
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $27.1:rax 
  # $28.1: @Source_Location = load_struct_member($27.1, location)
  .loc 1 2557 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $28.1:rbx 
  # call(abort.271, $28.1, "Must be a boolean expression")
  .loc 1 2557 9
  mov rdi, rbx
  lea rsi, .LABEL__string_199[rip] # "Must be a boolean expression"
  call abort_271
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
.LABEL__convert_logic_or_expression_112__5:
  # $29.1: @IR_Variable_Value = call(create_variable_value.65, self.1, result_variable.1)
  .loc 1 2559 43
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $29.1:rax 
  # $30.1: @IR_Set_Instruction = call(create_ir_set_instruction.168, $29.1, right_value.1)
  .loc 1 2559 17
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_168
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $30.1:rax 
  # $31.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2559 102
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $30.1:rax $31.1:rbx 
  # $32.1: @IR_Variable_Value = call(append.71, self.1, $30.1, $31.1)
  .loc 1 2559 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # $33.1: @IR_Block = load_struct_member(self.1, current_block)
  .loc 1 2560 5
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $33.1:rax 
  # $34.1: @IR_Direct_Jump_Instruction = call(append_jump.146, $33.1, end_block.1)
  .loc 1 2560 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_jump_146
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # store_struct_member(self.1, current_block, end_block.1)
  .loc 1 2561 5
  mov rax, [rbp-8]
  add rax, 32
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rbx[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # $35.1: @IR_Variable_Value = call(create_variable_value.65, self.1, result_variable.1)
  .loc 1 2562 50
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call create_variable_value_65
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $35.1:rax 
  # $36.1: @IR_Phi_Instruction = call(create_ir_phi_instruction.180, $35.1)
  .loc 1 2562 24
  mov rdi, rax
  call create_ir_phi_instruction_180
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $36.1:rax 
  # $37.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2562 96
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $36.1:rax $37.1:rbx 
  # $38.1: @IR_Variable_Value = call(append.71, self.1, $36.1, $37.1)
  .loc 1 2562 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $36.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] $38.1:rax 
  # return($38.1)
  .loc 1 2562 5
  jmp .LABEL__convert_logic_or_expression_112__end
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] right_value.1:[rbp-56] 
  # [discarded value]: result_variable.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: next_block.1
  # [discarded value]: end_block.1
  # [discarded value]: left_value.1
  # [live values]: 
.LABEL__convert_logic_or_expression_112__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_or_expression_112__stack_frame_size: .word 64

  .loc 1 2565 1
  .text
convert_member_access_expression_113:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_113__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_113__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  .loc 1 2566 45
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi member_access_expression.1:rsi $1.1:rax 
  # object_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2566 21
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax 
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  .loc 1 2567 26
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx 
  # IR_Pointer_Type.16: @Object_Type = load_variable(IR_Pointer_Type)
  lea r15, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx IR_Pointer_Type.16:r15 
  # $4.1: Boolean = call(is.325, object_value_type.1, IR_Pointer_Type.16)
  .loc 1 2568 10
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  mov [rbp-32], rbx
  call is_325
  # [discarded value]: IR_Pointer_Type.16
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:rax 
  # $5.1: Boolean = $4.1 == false
  .loc 1 2568 10
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $5.1:rbx 
  # jump($5.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_member_access_expression_113__3
.LABEL__convert_member_access_expression_113__2:
  # $6.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 1 2569 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:rax 
  # $7.1: @String = call(clone.329, "Not an IR_Pointer_Type value: ")
  .loc 1 2569 50
  lea rdi, .LABEL__string_195[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-40], rax
  call clone_329
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  # $8.1: @String = load_struct_member(object_value_type.1, name)
  .loc 1 2569 97
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:[rbp-40] $7.1:rax $8.1:rbx 
  # $9.1: @String = call(append.332, $7.1, $8.1)
  .loc 1 2569 50
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $6.1:[rbp-40] $9.1:rax 
  # call(abort.271, $6.1, $9.1)
  .loc 1 2569 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_271
  # [discarded value]: $6.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
.LABEL__convert_member_access_expression_113__3:
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  .loc 1 2571 26
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax 
  # $11.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  .loc 1 2572 10
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax $11.1:rbx 
  # IR_Struct_Type.11: @Object_Type = load_variable(IR_Struct_Type)
  lea r15, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:rax $11.1:rbx IR_Struct_Type.11:r15 
  # $12.1: Boolean = call(is.325, $11.1, IR_Struct_Type.11)
  .loc 1 2572 10
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-40], rax
  call is_325
  # [discarded value]: $11.1
  # [discarded value]: IR_Struct_Type.11
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $12.1:rax 
  # $13.1: Boolean = $12.1 == false
  .loc 1 2572 10
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $13.1:rbx 
  # jump($13.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_member_access_expression_113__5
.LABEL__convert_member_access_expression_113__4:
  # $14.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 1 2573 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:rax 
  # $15.1: @String = call(clone.329, "Not a IR_Struct_Type pointer value: ")
  .loc 1 2573 50
  lea rdi, .LABEL__string_200[rip] # "Not a IR_Struct_Type pointer value: "
  mov [rbp-48], rax
  call clone_329
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:[rbp-48] $15.1:rax 
  # $16.1: @String = load_struct_member(object_value_type.1, name)
  .loc 1 2573 103
  mov rbx, [rbp-40]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:[rbp-48] $15.1:rax $16.1:rbx 
  # $17.1: @String = call(append.332, $15.1, $16.1)
  .loc 1 2573 50
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] $14.1:[rbp-48] $17.1:rax 
  # call(abort.271, $14.1, $17.1)
  .loc 1 2573 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_271
  # [discarded value]: $14.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] 
.LABEL__convert_member_access_expression_113__5:
  # struct_type.1: @IR_Struct_Type = load_struct_member(object_value_type.1, pointed_type)
  .loc 1 2575 20
  mov rax, [rbp-40]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:rax 
  # $20.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 1 2576 50
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:rax $20.1:rbx 
  # $21.1: @String = load_struct_member($20.1, lexeme)
  .loc 1 2576 50
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:rax $21.1:r15 
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member.137, struct_type.1, $21.1)
  .loc 1 2576 27
  mov rdi, rax
  mov rsi, r15
  mov [rbp-48], rax
  call get_member_137
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax 
  # $23.1: Boolean = struct_type_member.1 == null
  .loc 1 2577 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:rax $23.1:rbx 
  # jump($23.1, block.6, block.7)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__convert_member_access_expression_113__7
.LABEL__convert_member_access_expression_113__6:
  # $24.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 1 2578 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $24.1:rax 
  # $25.1: @Source_Location = load_struct_member($24.1, location)
  .loc 1 2578 15
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:rbx 
  # $26.1: @String = load_struct_member(struct_type.1, name)
  .loc 1 2578 68
  mov rax, [rbp-48]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:rbx $26.1:rax 
  # $27.1: @String = call(clone.329, $26.1)
  .loc 1 2578 62
  mov rdi, rax
  mov [rbp-64], rbx
  call clone_329
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $27.1:rax 
  # $28.1: @String = call(append.332, $27.1, " has no such member: ")
  .loc 1 2578 62
  mov rdi, rax
  lea rsi, .LABEL__string_201[rip] # " has no such member: "
  call append_332
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $28.1:rax 
  # $29.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  .loc 1 2578 125
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $28.1:rax $29.1:rbx 
  # $30.1: @String = load_struct_member($29.1, lexeme)
  .loc 1 2578 125
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $28.1:rax $30.1:r15 
  # $31.1: @String = call(append.332, $28.1, $30.1)
  .loc 1 2578 62
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $28.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $25.1:[rbp-64] $31.1:rax 
  # call(abort.271, $25.1, $31.1)
  .loc 1 2578 9
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_271
  # [discarded value]: $25.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_member_access_expression_113__7:
  # $32.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 1 2580 9
  mov rax, [rbp-56]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:rax 
  # IR_Struct_Type.12: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $32.1:rax IR_Struct_Type.12:rbx 
  # $33.1: Boolean = call(is.325, $32.1, IR_Struct_Type.12)
  .loc 1 2580 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $32.1
  # [discarded value]: IR_Struct_Type.12
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $33.1:rax 
  # jump($33.1, block.8, block.9)
  test al, al
  jz .LABEL__convert_member_access_expression_113__9
.LABEL__convert_member_access_expression_113__8:
  # $34.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 1 2581 115
  mov rax, [rbp-56]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $34.1:rax 
  # $35.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, $34.1)
  .loc 1 2581 92
  mov rdi, rax
  call create_ir_pointer_type_133
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $35.1:rax 
  # $36.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $35.1)
  .loc 1 2581 69
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $36.1:rax 
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction.161, $36.1, object_value.1, struct_type_member.1, true)
  .loc 1 2581 28
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-56]
  mov cl, 1
  call create_ir_load_struct_member_instruction_161
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $37.1:rax 
  # $38.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 1 2581 183
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $37.1:rax $38.1:rbx 
  # $39.1: @IR_Variable_Value = call(append.71, self.1, $37.1, $38.1)
  .loc 1 2581 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $39.1:rax 
  # return($39.1)
  .loc 1 2581 9
  jmp .LABEL__convert_member_access_expression_113__end
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
.LABEL__convert_member_access_expression_113__9:
  # $40.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  .loc 1 2583 88
  mov rax, [rbp-56]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $40.1:rax 
  # $41.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $40.1)
  .loc 1 2583 65
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $41.1:rax 
  # $42.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction.161, $41.1, object_value.1, struct_type_member.1, false)
  .loc 1 2583 24
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-56]
  mov cl, 0
  call create_ir_load_struct_member_instruction_161
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $42.1:rax 
  # $43.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 1 2583 156
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $42.1:rax $43.1:rbx 
  # $44.1: @IR_Variable_Value = call(append.71, self.1, $42.1, $43.1)
  .loc 1 2583 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $42.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] $44.1:rax 
  # return($44.1)
  .loc 1 2583 5
  jmp .LABEL__convert_member_access_expression_113__end
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] struct_type.1:[rbp-48] struct_type_member.1:[rbp-56] 
  # [discarded value]: struct_type.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] object_value_type.1:[rbp-40] 
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: object_value.1
  # [discarded value]: object_value_type.1
  # [live values]: 
.LABEL__convert_member_access_expression_113__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_113__stack_frame_size: .word 64

  .loc 1 2586 1
  .text
convert_member_access_expression_address_114:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_address_114__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_address_114__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  # result_type.1: @IR_Type = call(deduce_expression_type.122, self.1, member_access_expression.1)
  .loc 1 2587 20
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call deduce_expression_type_122
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax 
  # IR_Pointer_Type.17: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax IR_Pointer_Type.17:rbx 
  # $2.1: Boolean = call(is.325, result_type.1, IR_Pointer_Type.17)
  .loc 1 2588 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: IR_Pointer_Type.17
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_member_access_expression_address_114__3
.LABEL__convert_member_access_expression_address_114__2:
  # $3.1: @IR_Value = call(convert_member_access_expression.113, self.1, member_access_expression.1)
  .loc 1 2589 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call convert_member_access_expression_113
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $3.1:rax 
  # return($3.1)
  .loc 1 2589 9
  jmp .LABEL__convert_member_access_expression_address_114__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
.LABEL__convert_member_access_expression_address_114__3:
  # $4.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  .loc 1 2591 11
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $4.1:rax 
  # $5.1: @Object_Type = load_struct_member(result_type.1, object_type)
  .loc 1 2591 46
  mov rbx, [rbp-24]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $4.1:rax $5.1:rbx 
  # call(abort.127, $4.1, $5.1)
  .loc 1 2591 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: result_type.1
  # [live values]: 
.LABEL__convert_member_access_expression_address_114__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_address_114__stack_frame_size: .word 32

  .loc 1 2594 1
  .text
convert_modulo_expression_115:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_modulo_expression_115__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_modulo_expression_115__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Modulo_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2595 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2595 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2596 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2596 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2597 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.23: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.23:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.23)
  .loc 1 2597 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.23
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2597 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_modulo_expression_115__3
.LABEL__convert_modulo_expression_115__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2598 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2598 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2598 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_modulo_expression_115__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2600 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.24: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.24:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.24)
  .loc 1 2600 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.24
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2600 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_modulo_expression_115__5
.LABEL__convert_modulo_expression_115__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2601 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2601 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2601 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_modulo_expression_115__5:
  # IR_Constant_Value.22: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.22:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.22)
  .loc 1 2603 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.22
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_modulo_expression_115__7
.LABEL__convert_modulo_expression_115__6:
  # IR_Constant_Value.23: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.23:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.23)
  .loc 1 2603 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.23
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_modulo_expression_115__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2603 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_modulo_expression_115__9
.LABEL__convert_modulo_expression_115__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2604 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2604 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_modulo_expression_115__9:
  # $19.1: @IR_Modulo_Instruction = new(IR_Modulo_Instruction)
  .loc 1 2606 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Modulo_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2606 78
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax $20.1:rbx 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2606 55
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2606 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2606 122
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2606 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2606 5
  jmp .LABEL__convert_modulo_expression_115__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_modulo_expression_115__end:
  mov rsp, rbp
  pop rbp
  ret

convert_modulo_expression_115__stack_frame_size: .word 48

  .loc 1 2609 1
  .text
convert_multiply_expression_116:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_multiply_expression_116__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_multiply_expression_116__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Multiply_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2610 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2610 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2611 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2611 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2612 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.25: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.25:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.25)
  .loc 1 2612 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.25
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2612 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_multiply_expression_116__3
.LABEL__convert_multiply_expression_116__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2613 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2613 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2613 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_multiply_expression_116__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2615 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.26: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.26:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.26)
  .loc 1 2615 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.26
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2615 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_multiply_expression_116__5
.LABEL__convert_multiply_expression_116__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2616 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2616 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2616 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_multiply_expression_116__5:
  # IR_Constant_Value.24: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.24:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.24)
  .loc 1 2618 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.24
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_multiply_expression_116__7
.LABEL__convert_multiply_expression_116__6:
  # IR_Constant_Value.25: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.25:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.25)
  .loc 1 2618 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.25
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_multiply_expression_116__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2618 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_multiply_expression_116__9
.LABEL__convert_multiply_expression_116__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2619 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2619 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_multiply_expression_116__9:
  # $19.1: @IR_Multiply_Instruction = new(IR_Multiply_Instruction)
  .loc 1 2621 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Multiply_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2621 80
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax $20.1:rbx 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2621 57
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2621 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2621 124
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2621 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2621 5
  jmp .LABEL__convert_multiply_expression_116__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_multiply_expression_116__end:
  mov rsp, rbp
  pop rbp
  ret

convert_multiply_expression_116__stack_frame_size: .word 48

  .loc 1 2624 1
  .text
convert_new_expression_117:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_new_expression_117__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_new_expression_117__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Type = load_struct_member(expression.1, type)
  .loc 1 2625 37
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # type.1: @IR_Type = call(convert_value_type.75, self.1, $1.1)
  .loc 1 2625 13
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_value_type_75
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax 
  # IR_Array_Type.2: @Object_Type = load_variable(IR_Array_Type)
  lea rbx, IR_Array_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax IR_Array_Type.2:rbx 
  # $3.1: Boolean = call(is.325, type.1, IR_Array_Type.2)
  .loc 1 2626 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: IR_Array_Type.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__convert_new_expression_117__3
.LABEL__convert_new_expression_117__2:
  # type.1: @IR_Array_Type = type.1
  .loc 1 2627 17
  mov rax, [rbp-24]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:rax 
  # $5.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 1 2628 47
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:rax $5.1:rbx 
  # size_value.1: @IR_Value = call(convert_expression.98, self.1, $5.1)
  .loc 1 2628 23
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call convert_expression_98
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:rax 
  # $7.1: @IR_Type = load_struct_member(type.1, pointed_type)
  .loc 1 2629 100
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:rax $7.1:rbx 
  # $8.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, $7.1)
  .loc 1 2629 77
  mov rdi, rbx
  mov [rbp-40], rax
  call create_ir_pointer_type_133
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:[rbp-40] $8.1:rax 
  # $9.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $8.1)
  .loc 1 2629 54
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] type.1:[rbp-32] size_value.1:[rbp-40] $9.1:rax 
  # $10.1: @IR_Type = load_struct_member(type.1, pointed_type)
  .loc 1 2629 121
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] size_value.1:[rbp-40] $9.1:rax $10.1:rbx 
  # $11.1: @IR_New_Instruction = call(create_ir_new_instruction.164, $9.1, $10.1, size_value.1)
  .loc 1 2629 28
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-40]
  call create_ir_new_instruction_164
  # [discarded value]: size_value.1
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $11.1:rax 
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2629 153
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $11.1:rax $12.1:rbx 
  # $13.1: @IR_Variable_Value = call(append.71, self.1, $11.1, $12.1)
  .loc 1 2629 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $13.1:rax 
  # return($13.1)
  .loc 1 2629 9
  jmp .LABEL__convert_new_expression_117__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
.LABEL__convert_new_expression_117__3:
  # $14.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, type.1)
  .loc 1 2631 73
  mov rdi, [rbp-24]
  call create_ir_pointer_type_133
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $14.1:rax 
  # $15.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $14.1)
  .loc 1 2631 50
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $15.1:rax 
  # $16.1: @IR_New_Instruction = call(create_ir_new_instruction.164, $15.1, type.1, null)
  .loc 1 2631 24
  mov rdi, rax
  mov rsi, [rbp-24]
  xor rdx, rdx
  call create_ir_new_instruction_164
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $16.1:rax 
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2631 117
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $16.1:rax $17.1:rbx 
  # $18.1: @IR_Variable_Value = call(append.71, self.1, $16.1, $17.1)
  .loc 1 2631 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $18.1:rax 
  # return($18.1)
  .loc 1 2631 5
  jmp .LABEL__convert_new_expression_117__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__convert_new_expression_117__end:
  mov rsp, rbp
  pop rbp
  ret

convert_new_expression_117__stack_frame_size: .word 48

  .loc 1 2634 1
  .text
convert_not_equals_expression_118:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_not_equals_expression_118__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_not_equals_expression_118__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Not_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2635 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2635 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2636 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2636 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2637 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2637 32
  mov r15, rax
  add r15, 8
  mov r15, [r15]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx $6.1:r15 
  # $7.1: Boolean = call(equals.132, $5.1, $6.1)
  .loc 1 2637 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call equals_132
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  # $9.1: Boolean = $7.1 == false
  .loc 1 2637 9
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, block.2, block.3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_not_equals_expression_118__3
.LABEL__convert_not_equals_expression_118__2:
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2637 63
  mov rax, [rbp-24]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rax 
  # IR_Pointer_Type.18: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rax IR_Pointer_Type.18:rbx 
  # $12.1: Boolean = call(is.325, $10.1, IR_Pointer_Type.18)
  .loc 1 2637 63
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Pointer_Type.18
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, block.4, block.5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_not_equals_expression_118__5
.LABEL__convert_not_equals_expression_118__4:
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2637 102
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rax 
  # IR_Null_Type.6: @Object_Type = load_variable(IR_Null_Type)
  lea rbx, IR_Null_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rax IR_Null_Type.6:rbx 
  # $14.1: Boolean = call(is.325, $13.1, IR_Null_Type.6)
  .loc 1 2637 102
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $13.1
  # [discarded value]: IR_Null_Type.6
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  # $12.2: Boolean = $14.1 == false
  .loc 1 2637 102
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx[rbp-34] 
  # jump(block.5)
  mov [rbp-34], bl
.LABEL__convert_not_equals_expression_118__5:
  # $9.2: Boolean = phi($12.1, $12.2)
  .loc 1 2637 63
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax[rbp-33] 
  # jump(block.3)
  mov [rbp-33], al
.LABEL__convert_not_equals_expression_118__3:
  # $9.3: Boolean = phi($9.1, $9.2)
  .loc 1 2637 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, block.6, block.7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_not_equals_expression_118__7
.LABEL__convert_not_equals_expression_118__6:
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2638 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rax 
  # call(abort.271, $16.1, "Operands are not the same type")
  .loc 1 2638 9
  mov rdi, rax
  lea rsi, .LABEL__string_197[rip] # "Operands are not the same type"
  call abort_271
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_not_equals_expression_118__7:
  # IR_Constant_Value.26: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] IR_Constant_Value.26:rax 
  # $18.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.26)
  .loc 1 2640 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.26
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, block.8, block.9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_not_equals_expression_118__9
.LABEL__convert_not_equals_expression_118__8:
  # IR_Constant_Value.27: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] IR_Constant_Value.27:rax 
  # $18.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.27)
  .loc 1 2640 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.27
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax[rbp-35] 
  # jump(block.9)
  mov [rbp-35], al
.LABEL__convert_not_equals_expression_118__9:
  # $18.3: Boolean = phi($18.1, $18.2)
  .loc 1 2640 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, block.10, block.11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_not_equals_expression_118__11
.LABEL__convert_not_equals_expression_118__10:
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2641 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $20.1:rax 
  # call(abort.271, $20.1, "TODO: Evaluate constant expression")
  .loc 1 2641 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
.LABEL__convert_not_equals_expression_118__11:
  # $21.1: @IR_Not_Equals_Comparison_Instruction = new(IR_Not_Equals_Comparison_Instruction)
  .loc 1 2643 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Not_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:rax 
  # $22.1: @IR_Type = call(get_named_type.61, self.1, "Boolean")
  .loc 1 2643 93
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_157[rip] # "Boolean"
  mov [rbp-43], rax
  call get_named_type_61
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:[rbp-43] $22.1:rax 
  # $23.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $22.1)
  .loc 1 2643 70
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_70
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $21.1:[rbp-43] $23.1:rax 
  # $24.1: @IR_Binary_Instruction = call(init.177, $21.1, $23.1, left_value.1, right_value.1)
  .loc 1 2643 24
  mov rdi, [rbp-43]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $21.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax 
  # $25.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2643 152
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $24.1:rax $25.1:rbx 
  # $26.1: @IR_Variable_Value = call(append.71, self.1, $24.1, $25.1)
  .loc 1 2643 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $26.1:rax 
  # return($26.1)
  .loc 1 2643 5
  jmp .LABEL__convert_not_equals_expression_118__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [discarded value]: $9.1
  # [live values]: 
.LABEL__convert_not_equals_expression_118__end:
  mov rsp, rbp
  pop rbp
  ret

convert_not_equals_expression_118__stack_frame_size: .word 48

  .loc 1 2646 1
  .text
convert_substract_expression_119:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_substract_expression_119__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_substract_expression_119__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Substract_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2647 43
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # left_value.1: @IR_Value = call(convert_expression.98, self.1, $1.1)
  .loc 1 2647 19
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_expression_98
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2648 44
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  # right_value.1: @IR_Value = call(convert_expression.98, self.1, $3.1)
  .loc 1 2648 20
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-24], rax
  call convert_expression_98
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2649 9
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx 
  # IR_Int_Type.27: @Object_Type = load_variable(IR_Int_Type)
  lea r15, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax $5.1:rbx IR_Int_Type.27:r15 
  # $6.1: Boolean = call(is.325, $5.1, IR_Int_Type.27)
  .loc 1 2649 9
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-32], rax
  call is_325
  # [discarded value]: $5.1
  # [discarded value]: IR_Int_Type.27
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $6.1:rax 
  # $7.1: Boolean = $6.1 == false
  .loc 1 2649 9
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rbx 
  # jump($7.1, block.2, block.3)
  test bl, bl
  jz .LABEL__convert_substract_expression_119__3
.LABEL__convert_substract_expression_119__2:
  # $8.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  .loc 1 2650 15
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rax 
  # $9.1: @Source_Location = load_struct_member($8.1, location)
  .loc 1 2650 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # call(abort.271, $9.1, "Not an Int expression")
  .loc 1 2650 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_substract_expression_119__3:
  # $10.1: @IR_Type = load_struct_member(right_value.1, type)
  .loc 1 2652 9
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax 
  # IR_Int_Type.28: @Object_Type = load_variable(IR_Int_Type)
  lea rbx, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $10.1:rax IR_Int_Type.28:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Int_Type.28)
  .loc 1 2652 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Int_Type.28
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $11.1:rax 
  # $12.1: Boolean = $11.1 == false
  .loc 1 2652 9
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $12.1:rbx 
  # jump($12.1, block.4, block.5)
  test bl, bl
  jz .LABEL__convert_substract_expression_119__5
.LABEL__convert_substract_expression_119__4:
  # $13.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  .loc 1 2653 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $13.1:rax 
  # $14.1: @Source_Location = load_struct_member($13.1, location)
  .loc 1 2653 15
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $14.1:rbx 
  # call(abort.271, $14.1, "Not an Int expression")
  .loc 1 2653 9
  mov rdi, rbx
  lea rsi, .LABEL__string_193[rip] # "Not an Int expression"
  call abort_271
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
.LABEL__convert_substract_expression_119__5:
  # IR_Constant_Value.28: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] IR_Constant_Value.28:rax 
  # $16.1: Boolean = call(is.325, left_value.1, IR_Constant_Value.28)
  .loc 1 2655 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.28
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:rax 
  # jump($16.1, block.6, block.7)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_substract_expression_119__7
.LABEL__convert_substract_expression_119__6:
  # IR_Constant_Value.29: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] IR_Constant_Value.29:rax 
  # $16.2: Boolean = call(is.325, right_value.1, IR_Constant_Value.29)
  .loc 1 2655 45
  mov rdi, [rbp-32]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.29
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:rax[rbp-33] 
  # jump(block.7)
  mov [rbp-33], al
.LABEL__convert_substract_expression_119__7:
  # $16.3: Boolean = phi($16.1, $16.2)
  .loc 1 2655 9
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $16.3:[rbp-33] 
  # jump($16.3, block.8, block.9)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_substract_expression_119__9
.LABEL__convert_substract_expression_119__8:
  # $18.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2656 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $18.1:rax 
  # call(abort.271, $18.1, "TODO: Evaluate constant expression")
  .loc 1 2656 9
  mov rdi, rax
  lea rsi, .LABEL__string_194[rip] # "TODO: Evaluate constant expression"
  call abort_271
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
.LABEL__convert_substract_expression_119__9:
  # $19.1: @IR_Substract_Instruction = new(IR_Substract_Instruction)
  .loc 1 2658 24
  mov rdi, 57
  call malloc
  lea rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax 
  # $20.1: @IR_Type = load_struct_member(left_value.1, type)
  .loc 1 2658 81
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:rax $20.1:rbx 
  # $21.1: @IR_Variable_Value = call(create_temp_value.70, self.1, $20.1)
  .loc 1 2658 58
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-41], rax
  call create_temp_value_70
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $19.1:[rbp-41] $21.1:rax 
  # $22.1: @IR_Binary_Instruction = call(init.177, $19.1, $21.1, left_value.1, right_value.1)
  .loc 1 2658 24
  mov rdi, [rbp-41]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call init_177
  # [discarded value]: $19.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax 
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2658 125
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $22.1:rax $23.1:rbx 
  # $24.1: @IR_Variable_Value = call(append.71, self.1, $22.1, $23.1)
  .loc 1 2658 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call append_71
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] $24.1:rax 
  # return($24.1)
  .loc 1 2658 5
  jmp .LABEL__convert_substract_expression_119__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] $16.2:[rbp-33] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $16.1:[rbp-33] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: left_value.1
  # [discarded value]: right_value.1
  # [live values]: 
.LABEL__convert_substract_expression_119__end:
  mov rsp, rbp
  pop rbp
  ret

convert_substract_expression_119__stack_frame_size: .word 48

  .loc 1 2661 1
  .text
convert_variable_expression_120:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_120__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_120__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2662 35
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, lexeme)
  .loc 1 2662 35
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # variable.1: @IR_Variable = call(get_variable.63, self.1, $2.1)
  .loc 1 2662 17
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_variable_63
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax 
  # $4.1: Boolean = variable.1 == null
  .loc 1 2663 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__convert_variable_expression_120__3
.LABEL__convert_variable_expression_120__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2664 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:rax 
  # $6.1: @String = call(clone.329, "Undeclared variable: ")
  .loc 1 2664 36
  lea rdi, .LABEL__string_186[rip] # "Undeclared variable: "
  mov [rbp-32], rax
  call clone_329
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2664 74
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax $7.1:rbx 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 1 2664 74
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax $8.1:r15 
  # $9.1: @String = call(append.332, $6.1, $8.1)
  .loc 1 2664 36
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $9.1:rax 
  # call(abort.271, $5.1, $9.1)
  .loc 1 2664 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_271
  # [discarded value]: $5.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
.LABEL__convert_variable_expression_120__3:
  # value.1: @IR_Variable_Value = call(get_variable_value.64, self.1, variable.1)
  .loc 1 2666 14
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_64
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:rax 
  # $11.1: Boolean = value.1 == null
  .loc 1 2667 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:rax $11.1:rbx 
  # jump($11.1, block.4, block.5)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__convert_variable_expression_120__5
.LABEL__convert_variable_expression_120__4:
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2668 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] $12.1:rax 
  # $13.1: @String = call(clone.329, "Undeclared variable value: ")
  .loc 1 2668 36
  lea rdi, .LABEL__string_202[rip] # "Undeclared variable value: "
  mov [rbp-40], rax
  call clone_329
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] $12.1:[rbp-40] $13.1:rax 
  # $14.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2668 80
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] $12.1:[rbp-40] $13.1:rax $14.1:rbx 
  # $15.1: @String = load_struct_member($14.1, lexeme)
  .loc 1 2668 80
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] $12.1:[rbp-40] $13.1:rax $15.1:r15 
  # $16.1: @String = call(append.332, $13.1, $15.1)
  .loc 1 2668 36
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $13.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] $12.1:[rbp-40] $16.1:rax 
  # call(abort.271, $12.1, $16.1)
  .loc 1 2668 9
  mov rdi, [rbp-40]
  mov rsi, rax
  call abort_271
  # [discarded value]: $12.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] 
.LABEL__convert_variable_expression_120__5:
  # return(value.1)
  .loc 1 2670 5
  mov rax, [rbp-32]
  jmp .LABEL__convert_variable_expression_120__end
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] value.1:[rbp-32] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__convert_variable_expression_120__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_120__stack_frame_size: .word 48

  .loc 1 2673 1
  .text
convert_variable_expression_address_121:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_address_121__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_address_121__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2674 35
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, lexeme)
  .loc 1 2674 35
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # variable.1: @IR_Variable = call(get_variable.63, self.1, $2.1)
  .loc 1 2674 17
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_variable_63
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax 
  # $4.1: Boolean = variable.1 == null
  .loc 1 2675 9
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__convert_variable_expression_address_121__3
.LABEL__convert_variable_expression_address_121__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2676 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:rax 
  # $6.1: @String = call(clone.329, "Undeclared variable: ")
  .loc 1 2676 36
  lea rdi, .LABEL__string_186[rip] # "Undeclared variable: "
  mov [rbp-32], rax
  call clone_329
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2676 74
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax $7.1:rbx 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 1 2676 74
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $6.1:rax $8.1:r15 
  # $9.1: @String = call(append.332, $6.1, $8.1)
  .loc 1 2676 36
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $5.1:[rbp-32] $9.1:rax 
  # call(abort.271, $5.1, $9.1)
  .loc 1 2676 9
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_271
  # [discarded value]: $5.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
.LABEL__convert_variable_expression_address_121__3:
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 1 2678 9
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $10.1:rax 
  # IR_Pointer_Type.19: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $10.1:rax IR_Pointer_Type.19:rbx 
  # $11.1: Boolean = call(is.325, $10.1, IR_Pointer_Type.19)
  .loc 1 2678 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $10.1
  # [discarded value]: IR_Pointer_Type.19
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.4, block.5)
  test al, al
  jz .LABEL__convert_variable_expression_address_121__5
.LABEL__convert_variable_expression_address_121__4:
  # $12.1: @IR_Variable_Value = call(get_variable_value.64, self.1, variable.1)
  .loc 1 2679 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_64
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $12.1:rax 
  # return($12.1)
  .loc 1 2679 9
  jmp .LABEL__convert_variable_expression_address_121__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
.LABEL__convert_variable_expression_address_121__5:
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2681 11
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:rax 
  # $14.1: @String = call(clone.329, "Variable type without address: ")
  .loc 1 2681 32
  lea rdi, .LABEL__string_203[rip] # "Variable type without address: "
  mov [rbp-32], rax
  call clone_329
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:[rbp-32] $14.1:rax 
  # $15.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 1 2681 80
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:[rbp-32] $14.1:rax $15.1:rbx 
  # $16.1: @String = load_struct_member($15.1, name)
  .loc 1 2681 80
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:[rbp-32] $14.1:rax $16.1:r15 
  # $17.1: @String = call(append.332, $14.1, $16.1)
  .loc 1 2681 32
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $14.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $13.1:[rbp-32] $17.1:rax 
  # call(abort.271, $13.1, $17.1)
  .loc 1 2681 5
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_271
  # [discarded value]: $13.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__convert_variable_expression_address_121__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_address_121__stack_frame_size: .word 32

  .loc 1 2684 1
  .text
deduce_expression_type_122:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_expression_type_122__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_expression_type_122__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # AST_Call_Expression.3: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: self.1:rdi expression.1:rsi AST_Call_Expression.3:rax 
  # $1.1: Boolean = call(is.325, expression.1, AST_Call_Expression.3)
  .loc 1 2685 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Call_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__deduce_expression_type_122__3
.LABEL__deduce_expression_type_122__2:
  # $2.1: @AST_Call_Expression = expression.1
  .loc 1 2686 49
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @IR_Type = call(deduce_call_expression_type.123, self.1, $2.1)
  .loc 1 2686 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_call_expression_type_123
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # return($3.1)
  .loc 1 2686 9
  jmp .LABEL__deduce_expression_type_122__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_122__3:
  # AST_Literal_Expression.3: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Literal_Expression.3:rax 
  # $4.1: Boolean = call(is.325, expression.1, AST_Literal_Expression.3)
  .loc 1 2688 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Literal_Expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  jz .LABEL__deduce_expression_type_122__6
.LABEL__deduce_expression_type_122__5:
  # $5.1: @AST_Literal_Expression = expression.1
  .loc 1 2689 52
  mov rax, [rbp-16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @IR_Type = call(deduce_literal_expression_type.124, self.1, $5.1)
  .loc 1 2689 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_literal_expression_type_124
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # return($6.1)
  .loc 1 2689 9
  jmp .LABEL__deduce_expression_type_122__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_122__6:
  # AST_Member_Access_Expression.6: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Member_Access_Expression.6:rax 
  # $7.1: Boolean = call(is.325, expression.1, AST_Member_Access_Expression.6)
  .loc 1 2691 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Member_Access_Expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__deduce_expression_type_122__9
.LABEL__deduce_expression_type_122__8:
  # $8.1: @AST_Member_Access_Expression = expression.1
  .loc 1 2692 58
  mov rax, [rbp-16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # $9.1: @IR_Type = call(deduce_member_access_expression_type.125, self.1, $8.1)
  .loc 1 2692 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_member_access_expression_type_125
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 1 2692 9
  jmp .LABEL__deduce_expression_type_122__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_122__9:
  # AST_Variable_Expression.6: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.6:rax 
  # $10.1: Boolean = call(is.325, expression.1, AST_Variable_Expression.6)
  .loc 1 2694 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $10.1:rax 
  # jump($10.1, block.11, block.12)
  test al, al
  jz .LABEL__deduce_expression_type_122__12
.LABEL__deduce_expression_type_122__11:
  # $11.1: @AST_Variable_Expression = expression.1
  .loc 1 2695 53
  mov rax, [rbp-16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $11.1:rax 
  # $12.1: @IR_Type = call(deduce_variable_expression_type.126, self.1, $11.1)
  .loc 1 2695 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_variable_expression_type_126
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $12.1:rax 
  # return($12.1)
  .loc 1 2695 9
  jmp .LABEL__deduce_expression_type_122__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__deduce_expression_type_122__12:
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2697 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $13.1:rax 
  # $14.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 1 2697 32
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $13.1:rax $14.1:rbx 
  # call(abort.127, $13.1, $14.1)
  .loc 1 2697 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_expression_type_122__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_expression_type_122__stack_frame_size: .word 16

  .loc 1 2700 1
  .text
deduce_call_expression_type_123:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_call_expression_type_123__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_call_expression_type_123__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Call_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # argument_types.1: @List = call(create_list.307)
  .loc 1 2701 23
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call create_list_307
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:rax 
  # $2.1: @List = load_struct_member(expression.1, arguments)
  .loc 1 2702 18
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:rax $2.1:rbx 
  # arguments.1: @List_Iterator = call(create_iterator.319, $2.1)
  .loc 1 2702 18
  mov rdi, rbx
  mov [rbp-24], rax
  call create_iterator_319
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:rax 
  # jump(block.2)
  mov [rbp-32], rax
.LABEL__deduce_call_expression_type_123__2:
  # $4.1: Boolean = call(has_next.322, arguments.1)
  .loc 1 2703 12
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__deduce_call_expression_type_123__4
.LABEL__deduce_call_expression_type_123__3:
  # argument.1: @AST_Expression = call(next.323, arguments.1)
  .loc 1 2704 21
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] argument.1:rax 
  # argument_type.1: @IR_Type = call(deduce_expression_type.122, self.1, argument.1)
  .loc 1 2705 26
  mov rdi, [rbp-16]
  mov rsi, rax
  call deduce_expression_type_122
  # [discarded value]: argument.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] argument_type.1:rax 
  # call(append.308, argument_types.1, argument_type.1)
  .loc 1 2706 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_308
  # [discarded value]: argument_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # jump(block.2)
  jmp .LABEL__deduce_call_expression_type_123__2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
.LABEL__deduce_call_expression_type_123__4:
  # $8.1: @AST_Expression = load_struct_member(expression.1, callee)
  .loc 1 2708 9
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $8.1:rax 
  # AST_Member_Access_Expression.7: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rbx, AST_Member_Access_Expression[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $8.1:rax AST_Member_Access_Expression.7:rbx 
  # $9.1: Boolean = call(is.325, $8.1, AST_Member_Access_Expression.7)
  .loc 1 2708 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $8.1
  # [discarded value]: AST_Member_Access_Expression.7
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__deduce_call_expression_type_123__6
.LABEL__deduce_call_expression_type_123__5:
  # callee.1: @AST_Member_Access_Expression = load_struct_member(expression.1, callee)
  .loc 1 2709 19
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rax 
  # $12.1: @AST_Expression = load_struct_member(callee.1, object_expression)
  .loc 1 2710 52
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:rax $12.1:rbx 
  # object_type.1: @IR_Type = call(deduce_expression_type.122, self.1, $12.1)
  .loc 1 2710 24
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-40], rax
  call deduce_expression_type_122
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:rax 
  # IR_Struct_Type.13: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:rax IR_Struct_Type.13:rbx 
  # $14.1: Boolean = call(is.325, object_type.1, IR_Struct_Type.13)
  .loc 1 2711 13
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-48], rax
  call is_325
  # [discarded value]: IR_Struct_Type.13
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] $14.1:rax 
  # jump($14.1, block.7, block.9)
  test al, al
  jz .LABEL__deduce_call_expression_type_123__9
.LABEL__deduce_call_expression_type_123__7:
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, object_type.1)
  .loc 1 2712 36
  mov rdi, [rbp-48]
  call create_ir_pointer_type_133
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] $15.1:rax 
  # call(prepend.309, argument_types.1, $15.1)
  .loc 1 2712 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call prepend_309
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # jump(block.8)
.LABEL__deduce_call_expression_type_123__8:
  # $16.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 1 2716 45
  mov rax, [rbp-40]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] $16.1:rax 
  # $17.1: @String = load_struct_member($16.1, lexeme)
  .loc 1 2716 45
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] $17.1:rbx 
  # function.1: @IR_Function = call(get_named_function.67, self.1, $17.1, argument_types.1)
  .loc 1 2716 21
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call get_named_function_67
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:rax 
  # $19.1: Boolean = function.1 == null
  .loc 1 2717 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:rax $19.1:rbx 
  # jump($19.1, block.10, block.11)
  test bl, bl
  mov [rbp-56], rax
  jz .LABEL__deduce_call_expression_type_123__11
.LABEL__deduce_call_expression_type_123__10:
  # $20.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 1 2718 19
  mov rax, [rbp-40]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $20.1:rax 
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  .loc 1 2718 19
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:rbx 
  # $22.1: @String = call(clone.329, "Unknown function: ")
  .loc 1 2718 48
  lea rdi, .LABEL__string_204[rip] # "Unknown function: "
  mov [rbp-64], rbx
  call clone_329
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax 
  # $23.1: @Identifier_Token = load_struct_member(callee.1, member_name)
  .loc 1 2718 83
  mov rbx, [rbp-40]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax $23.1:rbx 
  # $24.1: @String = load_struct_member($23.1, lexeme)
  .loc 1 2718 83
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $22.1:rax $24.1:r15 
  # $25.1: @String = call(append.332, $22.1, $24.1)
  .loc 1 2718 48
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $21.1:[rbp-64] $25.1:rax 
  # call(abort.271, $21.1, $25.1)
  .loc 1 2718 13
  mov rdi, [rbp-64]
  mov rsi, rax
  call abort_271
  # [discarded value]: $21.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] 
.LABEL__deduce_call_expression_type_123__11:
  # $26.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 1 2720 16
  mov rax, [rbp-56]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] $26.1:rax 
  # return($26.1)
  .loc 1 2720 9
  jmp .LABEL__deduce_call_expression_type_123__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] function.1:[rbp-56] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
.LABEL__deduce_call_expression_type_123__9:
  # call(prepend.309, argument_types.1, object_type.1)
  .loc 1 2714 13
  mov rdi, [rbp-24]
  mov rsi, [rbp-48]
  call prepend_309
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # jump(block.8)
  jmp .LABEL__deduce_call_expression_type_123__8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] callee.1:[rbp-40] object_type.1:[rbp-48] 
  # [discarded value]: callee.1
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
.LABEL__deduce_call_expression_type_123__6:
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2722 11
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $27.1:rax 
  # $28.1: @AST_Expression = load_struct_member(expression.1, callee)
  .loc 1 2722 32
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $27.1:rax $28.1:rbx 
  # $29.1: @Object_Type = load_struct_member($28.1, object_type)
  .loc 1 2722 32
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $27.1:rax $29.1:r15 
  # call(abort.127, $27.1, $29.1)
  .loc 1 2722 5
  mov rdi, rax
  mov rsi, r15
  call abort_127
  # [discarded value]: $27.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: argument_types.1
  # [discarded value]: arguments.1
  # [live values]: 
.LABEL__deduce_call_expression_type_123__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_call_expression_type_123__stack_frame_size: .word 64

  .loc 1 2725 1
  .text
deduce_literal_expression_type_124:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_literal_expression_type_124__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_literal_expression_type_124__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # literal.1: @Literal_Token = load_struct_member(expression.1, literal)
  .loc 1 2726 16
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [discarded value]: expression.1
  # [live values]: self.1:rdi literal.1:rax 
  # String_Token.4: @Object_Type = load_variable(String_Token)
  lea rbx, String_Token[rip]
  # [live values]: self.1:rdi literal.1:rax String_Token.4:rbx 
  # $2.1: Boolean = call(is.325, literal.1, String_Token.4)
  .loc 1 2727 9
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call is_325
  # [discarded value]: String_Token.4
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__deduce_literal_expression_type_124__3
.LABEL__deduce_literal_expression_type_124__2:
  # $3.1: @IR_Type = call(get_named_type.61, self.1, "String")
  .loc 1 2728 39
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_198[rip] # "String"
  call get_named_type_61
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $3.1:rax 
  # $4.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, $3.1)
  .loc 1 2728 16
  mov rdi, rax
  call create_ir_pointer_type_133
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $4.1:rax 
  # return($4.1)
  .loc 1 2728 9
  jmp .LABEL__deduce_literal_expression_type_124__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
.LABEL__deduce_literal_expression_type_124__3:
  # $5.1: @Source_Location = load_struct_member(literal.1, location)
  .loc 1 2730 11
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $5.1:rax 
  # $6.1: @Object_Type = load_struct_member(literal.1, object_type)
  .loc 1 2730 29
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $5.1:rax $6.1:rbx 
  # call(abort.127, $5.1, $6.1)
  .loc 1 2730 5
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: literal.1
  # [live values]: 
.LABEL__deduce_literal_expression_type_124__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_literal_expression_type_124__stack_frame_size: .word 16

  .loc 1 2733 1
  .text
deduce_member_access_expression_type_125:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_member_access_expression_type_125__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_member_access_expression_type_125__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Member_Access_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @AST_Expression = load_struct_member(expression.1, object_expression)
  .loc 1 2734 48
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # object_type.1: @IR_Type = call(deduce_expression_type.122, self.1, $1.1)
  .loc 1 2734 20
  mov [rbp-8], rsi
  mov rsi, rax
  call deduce_expression_type_122
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: expression.1:[rbp-8] object_type.1:rax 
  # IR_Pointer_Type.20: @Object_Type = load_variable(IR_Pointer_Type)
  lea rbx, IR_Pointer_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:rax IR_Pointer_Type.20:rbx 
  # $3.1: Boolean = call(is.325, object_type.1, IR_Pointer_Type.20)
  .loc 1 2735 9
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call is_325
  # [discarded value]: IR_Pointer_Type.20
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $3.1:rax 
  # $4.1: Boolean = $3.1 == false
  .loc 1 2735 9
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  jz .LABEL__deduce_member_access_expression_type_125__3
.LABEL__deduce_member_access_expression_type_125__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2736 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $5.1:rax 
  # $6.1: @Object_Type = load_struct_member(object_type.1, object_type)
  .loc 1 2736 36
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $5.1:rax $6.1:rbx 
  # call(abort.127, $5.1, $6.1)
  .loc 1 2736 9
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
.LABEL__deduce_member_access_expression_type_125__3:
  # $7.1: @IR_Pointer_Type = object_type.1
  .loc 1 2738 21
  mov rax, [rbp-16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $7.1:rax 
  # object_type.1: @IR_Type = load_struct_member($7.1, pointed_type)
  .loc 1 2738 21
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $7.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:rbx 
  # IR_Struct_Type.14: @Object_Type = load_variable(IR_Struct_Type)
  lea rax, IR_Struct_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:rbx IR_Struct_Type.14:rax 
  # $9.1: Boolean = call(is.325, object_type.1, IR_Struct_Type.14)
  .loc 1 2739 9
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-24], rbx
  call is_325
  # [discarded value]: IR_Struct_Type.14
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $9.1:rax 
  # $10.1: Boolean = $9.1 == false
  .loc 1 2739 9
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $10.1:rbx 
  # jump($10.1, block.4, block.5)
  test bl, bl
  jz .LABEL__deduce_member_access_expression_type_125__5
.LABEL__deduce_member_access_expression_type_125__4:
  # $11.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2740 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $11.1:rax 
  # $12.1: @Object_Type = load_struct_member(object_type.1, object_type)
  .loc 1 2740 36
  mov rbx, [rbp-24]
  mov rbx, [rbx]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] $11.1:rax $12.1:rbx 
  # call(abort.127, $11.1, $12.1)
  .loc 1 2740 9
  mov rdi, rax
  mov rsi, rbx
  call abort_127
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] 
.LABEL__deduce_member_access_expression_type_125__5:
  # object_type.1: @IR_Struct_Type = object_type.1
  .loc 1 2742 20
  mov rax, [rbp-24]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rax 
  # $14.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  .loc 1 2743 38
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rax $14.1:rbx 
  # $15.1: @String = load_struct_member($14.1, lexeme)
  .loc 1 2743 38
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $14.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:rax $15.1:r15 
  # member.1: @IR_Struct_Type_Member = call(get_member.137, object_type.1, $15.1)
  .loc 1 2743 15
  mov rdi, rax
  mov rsi, r15
  mov [rbp-32], rax
  call get_member_137
  # [discarded value]: $15.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax 
  # $17.1: Boolean = member.1 == null
  .loc 1 2744 9
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:rax $17.1:rbx 
  # jump($17.1, block.6, block.7)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__deduce_member_access_expression_type_125__7
.LABEL__deduce_member_access_expression_type_125__6:
  # $18.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  .loc 1 2745 15
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $17.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $18.1:rax 
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  .loc 1 2745 15
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $18.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:rbx 
  # $20.1: @String = load_struct_member(object_type.1, name)
  .loc 1 2745 54
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:rbx $20.1:rax 
  # $21.1: @String = call(clone.329, $20.1)
  .loc 1 2745 48
  mov rdi, rax
  mov [rbp-48], rbx
  call clone_329
  # [discarded value]: $20.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $21.1:rax 
  # $22.1: @String = call(append.332, $21.1, " has no such member: ")
  .loc 1 2745 48
  mov rdi, rax
  lea rsi, .LABEL__string_201[rip] # " has no such member: "
  call append_332
  # [discarded value]: $21.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $22.1:rax 
  # $23.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  .loc 1 2745 111
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $22.1:rax $23.1:rbx 
  # $24.1: @String = load_struct_member($23.1, lexeme)
  .loc 1 2745 111
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $23.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $22.1:rax $24.1:r15 
  # $25.1: @String = call(append.332, $22.1, $24.1)
  .loc 1 2745 48
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $19.1:[rbp-48] $25.1:rax 
  # call(abort.271, $19.1, $25.1)
  .loc 1 2745 9
  mov rdi, [rbp-48]
  mov rsi, rax
  call abort_271
  # [discarded value]: $19.1
  # [discarded value]: $25.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
.LABEL__deduce_member_access_expression_type_125__7:
  # $26.1: @IR_Type = load_struct_member(member.1, type)
  .loc 1 2747 9
  mov rax, [rbp-40]
  add rax, 24
  mov rax, [rax]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $26.1:rax 
  # IR_Struct_Type.15: @Object_Type = load_variable(IR_Struct_Type)
  lea rbx, IR_Struct_Type[rip]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $26.1:rax IR_Struct_Type.15:rbx 
  # $27.1: Boolean = call(is.325, $26.1, IR_Struct_Type.15)
  .loc 1 2747 9
  mov rdi, rax
  mov rsi, rbx
  call is_325
  # [discarded value]: $26.1
  # [discarded value]: IR_Struct_Type.15
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $27.1:rax 
  # jump($27.1, block.8, block.9)
  test al, al
  jz .LABEL__deduce_member_access_expression_type_125__9
.LABEL__deduce_member_access_expression_type_125__8:
  # $28.1: @IR_Type = load_struct_member(member.1, type)
  .loc 1 2748 39
  mov rax, [rbp-40]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: $27.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $28.1:rax 
  # $29.1: @IR_Pointer_Type = call(create_ir_pointer_type.133, $28.1)
  .loc 1 2748 16
  mov rdi, rax
  call create_ir_pointer_type_133
  # [discarded value]: $28.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $29.1:rax 
  # return($29.1)
  .loc 1 2748 9
  jmp .LABEL__deduce_member_access_expression_type_125__end
  # [discarded value]: $29.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
.LABEL__deduce_member_access_expression_type_125__9:
  # $30.1: @IR_Type = load_struct_member(member.1, type)
  .loc 1 2750 12
  mov rax, [rbp-40]
  add rax, 24
  mov rax, [rax]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] $30.1:rax 
  # return($30.1)
  .loc 1 2750 5
  jmp .LABEL__deduce_member_access_expression_type_125__end
  # [discarded value]: $30.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] object_type.1:[rbp-32] member.1:[rbp-40] 
  # [discarded value]: object_type.1
  # [discarded value]: member.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] object_type.1:[rbp-24] 
  # [discarded value]: object_type.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: object_type.1
  # [live values]: 
.LABEL__deduce_member_access_expression_type_125__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_member_access_expression_type_125__stack_frame_size: .word 48

  .loc 1 2753 1
  .text
deduce_variable_expression_type_126:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_variable_expression_type_126__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_variable_expression_type_126__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2754 35
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, lexeme)
  .loc 1 2754 35
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  # variable.1: @IR_Variable = call(get_variable.63, self.1, $2.1)
  .loc 1 2754 17
  mov [rbp-8], rsi
  mov rsi, rbx
  call get_variable_63
  # [discarded value]: self.1
  # [discarded value]: $2.1
  # [live values]: expression.1:[rbp-8] variable.1:rax 
  # $4.1: Boolean = variable.1 == null
  .loc 1 2755 9
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, block.2, block.3)
  test bl, bl
  mov [rbp-16], rax
  jz .LABEL__deduce_variable_expression_type_126__3
.LABEL__deduce_variable_expression_type_126__2:
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 2756 15
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:rax 
  # $6.1: @String = call(clone.329, "Unknown variable: ")
  .loc 1 2756 36
  lea rdi, .LABEL__string_205[rip] # "Unknown variable: "
  mov [rbp-24], rax
  call clone_329
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $6.1:rax 
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 2756 71
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $6.1:rax $7.1:rbx 
  # $8.1: @String = load_struct_member($7.1, lexeme)
  .loc 1 2756 71
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $6.1:rax $8.1:r15 
  # $9.1: @String = call(append.332, $6.1, $8.1)
  .loc 1 2756 36
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $6.1
  # [discarded value]: $8.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $5.1:[rbp-24] $9.1:rax 
  # call(abort.271, $5.1, $9.1)
  .loc 1 2756 9
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_271
  # [discarded value]: $5.1
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
.LABEL__deduce_variable_expression_type_126__3:
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 1 2758 12
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $10.1:rax 
  # return($10.1)
  .loc 1 2758 5
  jmp .LABEL__deduce_variable_expression_type_126__end
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__deduce_variable_expression_type_126__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_variable_expression_type_126__stack_frame_size: .word 32

  .loc 1 2761 1
  .text
abort_127:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_127__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_127__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # unexpected_type.1: @Object_Type = load_variable(unexpected_type)
  # [live values]: location.1:rdi unexpected_type.1:rsi 
  # stderr.3: @FILE = load_variable(stderr)
  # [live values]: location.1:rdi unexpected_type.1:rsi stderr.3:stderr[rip] 
  # $1.1: @FILE = call(end_line.342, stderr.3)
  .loc 1 2762 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_342
  # [discarded value]: stderr.3
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $1.1:rax 
  # $2.1: @FILE = call(end_line.342, $1.1)
  .loc 1 2762 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $1.1
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write.305, $2.1, location.1)
  .loc 1 2762 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_305
  # [discarded value]: location.1
  # [discarded value]: $2.1
  # [live values]: unexpected_type.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write.339, $3.1, ": Unexpected type: ")
  .loc 1 2762 5
  mov rdi, rax
  lea rsi, .LABEL__string_206[rip] # ": Unexpected type: "
  call write_339
  # [discarded value]: $3.1
  # [live values]: unexpected_type.1:[rbp-16] $4.1:rax 
  # $5.1: @String = load_struct_member(unexpected_type.1, name)
  .loc 1 2762 85
  mov rbx, [rbp-16]
  add rbx, 8
  # [discarded value]: unexpected_type.1
  # [live values]: $4.1:rax $5.1:rbx 
  # $6.1: @FILE = call(write.339, $4.1, $5.1)
  .loc 1 2762 5
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  # $7.1: @FILE = call(end_line.342, $6.1)
  .loc 1 2762 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: 
  # call(abort.352)
  .loc 1 2763 5
  call abort
  # [live values]: 
.LABEL__abort_127__end:
  mov rsp, rbp
  pop rbp
  ret

abort_127__stack_frame_size: .word 16

  .loc 1 2774 1
  .text
init_128:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_128__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_128__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, value, 0)
  .loc 1 2775 5
  mov rax, rdi
  mov QWORD PTR [rax], 0
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 1 2776 5
  mov rax, rdi
  jmp .LABEL__init_128__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_128__end:
  mov rsp, rbp
  pop rbp
  ret

init_128__stack_frame_size: .word 0

  .loc 1 2779 1
  .text
next_129:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_129__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_129__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, value)
  .loc 1 2780 18
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Int = $1.1 + 1
  .loc 1 2780 18
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # store_struct_member(self.1, value, $2.1)
  .loc 1 2780 5
  mov rax, rdi
  mov QWORD PTR [rax], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:rdi 
  # $3.1: Int = load_struct_member(self.1, value)
  .loc 1 2781 12
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 2781 5
  jmp .LABEL__next_129__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__next_129__end:
  mov rsp, rbp
  pop rbp
  ret

next_129__stack_frame_size: .word 0

  .loc 1 2784 1
  .text
reset_130:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_130__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_130__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, value, 0)
  .loc 1 2785 5
  mov rax, rdi
  mov QWORD PTR [rax], 0
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 1 2786 5
  mov rax, rdi
  jmp .LABEL__reset_130__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_130__end:
  mov rsp, rbp
  pop rbp
  ret

reset_130__stack_frame_size: .word 0

  .loc 1 2800 1
  .text
init_131:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_131__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_131__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # store_struct_member(self.1, name, name.1)
  .loc 1 2801 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], rsi
  # [discarded value]: name.1
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 1 2802 5
  mov rax, rdi
  jmp .LABEL__init_131__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_131__end:
  mov rsp, rbp
  pop rbp
  ret

init_131__stack_frame_size: .word 0

  .loc 1 2836 1
  .text
equals_132:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_132__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_132__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # IR_Pointer_Type.21: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:rdi other.1:rsi IR_Pointer_Type.21:rax 
  # $2.1: Boolean = call(is.325, self.1, IR_Pointer_Type.21)
  .loc 1 2837 9
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call is_325
  # [discarded value]: IR_Pointer_Type.21
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__equals_132__3
.LABEL__equals_132__2:
  # IR_Pointer_Type.22: @Object_Type = load_variable(IR_Pointer_Type)
  lea rax, IR_Pointer_Type[rip]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] IR_Pointer_Type.22:rax 
  # $2.2: Boolean = call(is.325, other.1, IR_Pointer_Type.22)
  .loc 1 2837 37
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Pointer_Type.22
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:rax[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
.LABEL__equals_132__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 1 2837 9
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, block.4, block.5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__equals_132__5
.LABEL__equals_132__4:
  # self.1: @IR_Pointer_Type = self.1
  .loc 1 2838 17
  mov rax, [rbp-16]
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] self.1:rax 
  # other.1: @IR_Pointer_Type = other.1
  .loc 1 2839 18
  mov rbx, [rbp-8]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] self.1:rax other.1:rbx 
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  .loc 1 2840 16
  mov r15, rax
  add r15, 16
  mov r15, [r15]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] other.1:rbx $6.1:r15 
  # $7.1: @IR_Type = load_struct_member(other.1, pointed_type)
  .loc 1 2840 41
  mov rax, rbx
  add rax, 16
  mov rax, [rax]
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $6.1:r15 $7.1:rax 
  # $8.1: Boolean = call(equals.132, $6.1, $7.1)
  .loc 1 2840 16
  mov rdi, r15
  mov rsi, rax
  call equals_132
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $8.1:rax 
  # return($8.1)
  .loc 1 2840 9
  jmp .LABEL__equals_132__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
.LABEL__equals_132__5:
  # $9.1: Boolean = self.1 == other.1
  .loc 1 2842 12
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [live values]: self.1:rax[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $9.1:rbx 
  # return($9.1)
  .loc 1 2842 5
  mov al, bl
  jmp .LABEL__equals_132__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__equals_132__end:
  mov rsp, rbp
  pop rbp
  ret

equals_132__stack_frame_size: .word 32

  .loc 1 2845 1
  .text
create_ir_pointer_type_133:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_pointer_type_133__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_pointer_type_133__1:
  # pointed_type.1: @IR_Type = load_variable(pointed_type)
  # [live values]: pointed_type.1:rdi 
  # type.1: @IR_Pointer_Type = new(IR_Pointer_Type)
  .loc 1 2846 13
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  lea rbx, IR_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: pointed_type.1:[rbp-8] type.1:rax 
  # $2.1: @String = call(clone.329, "@")
  .loc 1 2847 15
  lea rdi, .LABEL__string_207[rip] # "@"
  mov [rbp-16], rax
  call clone_329
  # [live values]: pointed_type.1:[rbp-8] type.1:[rbp-16] $2.1:rax 
  # $3.1: @String = load_struct_member(pointed_type.1, name)
  .loc 1 2847 33
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: pointed_type.1:[rbp-8] type.1:[rbp-16] $2.1:rax $3.1:rbx 
  # $4.1: @String = call(append.332, $2.1, $3.1)
  .loc 1 2847 15
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: pointed_type.1:[rbp-8] type.1:[rbp-16] $4.1:rax 
  # $5.1: @IR_Type = call(init.131, type.1, $4.1)
  .loc 1 2847 5
  mov rdi, [rbp-16]
  mov rsi, rax
  call init_131
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: pointed_type.1:[rbp-8] type.1:[rbp-16] 
  # store_struct_member(type.1, pointed_type, pointed_type.1)
  .loc 1 2848 5
  mov rax, [rbp-16]
  add rax, 16
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: pointed_type.1
  # [live values]: type.1:[rbp-16] 
  # return(type.1)
  .loc 1 2849 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_pointer_type_133__end
  # [discarded value]: type.1
  # [live values]: 
.LABEL__create_ir_pointer_type_133__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_pointer_type_133__stack_frame_size: .word 16

  .loc 1 2856 1
  .text
create_ir_array_type_134:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_array_type_134__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_array_type_134__1:
  # item_type.1: @IR_Type = load_variable(item_type)
  # [live values]: item_type.1:rdi 
  # size_expression.1: @AST_Expression = load_variable(size_expression)
  # [live values]: item_type.1:rdi size_expression.1:rsi 
  # type.1: @IR_Array_Type = new(IR_Array_Type)
  .loc 1 2857 13
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, IR_Array_Type[rip]
  mov [rax], rbx
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:rax 
  # $2.1: @String = call(clone.329, "[")
  .loc 1 2858 15
  lea rdi, .LABEL__string_208[rip] # "["
  mov [rbp-24], rax
  call clone_329
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:[rbp-24] $2.1:rax 
  # $3.1: @String = load_struct_member(item_type.1, name)
  .loc 1 2858 33
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:[rbp-24] $2.1:rax $3.1:rbx 
  # $4.1: @String = call(append.332, $2.1, $3.1)
  .loc 1 2858 15
  mov rdi, rax
  mov rsi, rbx
  call append_332
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:[rbp-24] $4.1:rax 
  # $5.1: @String = call(append.332, $4.1, "]")
  .loc 1 2858 15
  mov rdi, rax
  lea rsi, .LABEL__string_209[rip] # "]"
  call append_332
  # [discarded value]: $4.1
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:[rbp-24] $5.1:rax 
  # $6.1: @IR_Type = call(init.131, type.1, $5.1)
  .loc 1 2858 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call init_131
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:[rbp-24] 
  # store_struct_member(type.1, pointed_type, item_type.1)
  .loc 1 2859 5
  mov rax, [rbp-24]
  add rax, 16
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: item_type.1
  # [live values]: size_expression.1:[rbp-8] type.1:[rbp-24] 
  # store_struct_member(type.1, size_expression, size_expression.1)
  .loc 1 2860 5
  mov rax, [rbp-24]
  add rax, 24
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: size_expression.1
  # [live values]: type.1:[rbp-24] 
  # return(type.1)
  .loc 1 2861 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_array_type_134__end
  # [discarded value]: type.1
  # [live values]: 
.LABEL__create_ir_array_type_134__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_array_type_134__stack_frame_size: .word 32

  .loc 1 2876 1
  .text
create_ir_struct_type_135:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_struct_type_135__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_struct_type_135__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # statement.1: @AST_Struct_Statement = load_variable(statement)
  # [live values]: name.1:rdi statement.1:rsi 
  # type.1: @IR_Struct_Type = new(IR_Struct_Type)
  .loc 1 2877 13
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 40
  call malloc
  lea rbx, IR_Struct_Type[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] type.1:rax 
  # $2.1: @IR_Type = call(init.131, type.1, name.1)
  .loc 1 2878 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call init_131
  # [discarded value]: name.1
  # [discarded value]: $2.1
  # [live values]: statement.1:[rbp-8] type.1:[rbp-24] 
  # $3.1: @List = call(create_list.307)
  .loc 1 2879 20
  call create_list_307
  # [live values]: statement.1:[rbp-8] type.1:[rbp-24] $3.1:rax 
  # store_struct_member(type.1, members, $3.1)
  .loc 1 2879 5
  mov rbx, [rbp-24]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: statement.1:[rbp-8] type.1:[rbp-24] 
  # store_struct_member(type.1, statement, statement.1)
  .loc 1 2880 5
  mov rax, [rbp-24]
  add rax, 32
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: statement.1
  # [live values]: type.1:[rbp-24] 
  # return(type.1)
  .loc 1 2881 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_struct_type_135__end
  # [discarded value]: type.1
  # [live values]: 
.LABEL__create_ir_struct_type_135__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_struct_type_135__stack_frame_size: .word 32

  .loc 1 2884 1
  .text
add_member_136:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_member_136__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_member_136__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi name.1:rsi type.1:rdx 
  # member.1: @IR_Struct_Type_Member = new(IR_Struct_Type_Member)
  .loc 1 2885 15
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 32
  call malloc
  lea rbx, IR_Struct_Type_Member[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-24] name.1:[rbp-16] type.1:[rbp-8] member.1:rax 
  # store_struct_member(member.1, struct_type, self.1)
  .loc 1 2886 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [live values]: self.1:r15[rbp-24] name.1:[rbp-16] type.1:[rbp-8] member.1:rax 
  # store_struct_member(member.1, name, name.1)
  .loc 1 2887 5
  mov rbx, rax
  add rbx, 16
  mov r14, [rbp-16]
  mov QWORD PTR [rbx], r14
  # [discarded value]: name.1
  # [live values]: self.1:r15[rbp-24] type.1:[rbp-8] member.1:rax 
  # store_struct_member(member.1, type, type.1)
  .loc 1 2888 5
  mov rbx, rax
  add rbx, 24
  mov r14, [rbp-8]
  mov QWORD PTR [rbx], r14
  # [discarded value]: type.1
  # [live values]: self.1:r15[rbp-24] member.1:rax 
  # $2.1: @List = load_struct_member(self.1, members)
  .loc 1 2889 5
  mov rbx, r15
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: self.1
  # [live values]: member.1:rax $2.1:rbx 
  # call(append.308, $2.1, member.1)
  .loc 1 2889 5
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-8], rax
  call append_308
  # [discarded value]: $2.1
  # [live values]: member.1:[rbp-8] 
  # return(member.1)
  .loc 1 2890 5
  mov rax, [rbp-8]
  jmp .LABEL__add_member_136__end
  # [discarded value]: member.1
  # [live values]: 
.LABEL__add_member_136__end:
  mov rsp, rbp
  pop rbp
  ret

add_member_136__stack_frame_size: .word 32

  .loc 1 2893 1
  .text
get_member_137:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_137__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_137__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: struct_type.1:rdi name.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__get_member_137__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] 
  # $1.1: @List = load_struct_member(struct_type.2, members)
  .loc 1 2896 20
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] $1.1:rax 
  # members.1: @List_Iterator = call(create_iterator.319, $1.1)
  .loc 1 2896 20
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__get_member_137__4:
  # $3.1: Boolean = call(has_next.322, members.1)
  .loc 1 2897 16
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  jz .LABEL__get_member_137__6
.LABEL__get_member_137__5:
  # member.1: @IR_Struct_Type_Member = call(next.323, members.1)
  .loc 1 2898 23
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] member.1:rax 
  # $6.1: @String = load_struct_member(member.1, name)
  .loc 1 2899 17
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] member.1:rax $6.1:rbx 
  # $7.1: Boolean = call(equals.335, $6.1, name.1)
  .loc 1 2899 17
  mov rdi, rbx
  mov rsi, [rbp-8]
  mov [rbp-32], rax
  call equals_335
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] member.1:[rbp-32] $7.1:rax 
  # jump($7.1, block.7, block.4)
  test al, al
  jz .LABEL__get_member_137__4
.LABEL__get_member_137__7:
  # return(member.1)
  .loc 1 2900 17
  mov rax, [rbp-32]
  jmp .LABEL__get_member_137__end
  # [discarded value]: $7.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] member.1:[rbp-32] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] member.1:[rbp-32] 
  # [discarded value]: member.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] 
.LABEL__get_member_137__6:
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 1 2903 23
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] struct_type.4:rax[rbp-16] 
  # $9.1: Boolean = struct_type.4 == null
  .loc 1 2904 13
  cmp rax, 0
  sete bl
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] struct_type.4:rax[rbp-16] $9.1:rbx 
  # jump($9.1, block.10, block.2)
  test bl, bl
  mov [rbp-16], rax
  jz .LABEL__get_member_137__2
.LABEL__get_member_137__10:
  # return(null)
  .loc 1 2905 13
  xor rax, rax
  jmp .LABEL__get_member_137__end
  # [discarded value]: $9.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] struct_type.4:[rbp-16] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] struct_type.4:[rbp-16] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members.1:[rbp-24] 
  # [discarded value]: struct_type.2
  # [discarded value]: members.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_member_137__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_137__stack_frame_size: .word 32

  .loc 1 2910 1
  .text
is_base_type_138:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_base_type_138__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_base_type_138__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type.1: @IR_Struct_Type = load_variable(other)
  # [live values]: self.1:rdi struct_type.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__is_base_type_138__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 1 2913 21
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $1.1:rax 
  # $2.1: Boolean = self.1 == $1.1
  .loc 1 2913 13
  cmp QWORD PTR [rbp-16], rax
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rbx 
  # jump($2.1, block.4, block.5)
  test bl, bl
  jz .LABEL__is_base_type_138__5
.LABEL__is_base_type_138__4:
  # return(true)
  .loc 1 2914 13
  mov al, 1
  jmp .LABEL__is_base_type_138__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
.LABEL__is_base_type_138__5:
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 1 2916 23
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rax[rbp-8] 
  # $4.1: Boolean = struct_type.4 == null
  .loc 1 2917 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rax[rbp-8] $4.1:rbx 
  # jump($4.1, block.7, block.2)
  test bl, bl
  mov [rbp-8], rax
  jz .LABEL__is_base_type_138__2
.LABEL__is_base_type_138__7:
  # return(false)
  .loc 1 2918 13
  mov al, 0
  jmp .LABEL__is_base_type_138__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_base_type_138__end:
  mov rsp, rbp
  pop rbp
  ret

is_base_type_138__stack_frame_size: .word 16

  .loc 1 2923 1
  .text
is_object_type_139:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_object_type_139__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_object_type_139__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # jump(block.2)
  mov [rbp-8], rdi
.LABEL__is_object_type_139__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # $1.1: @String = load_struct_member(struct_type.2, name)
  .loc 1 2926 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $1.1:rax 
  # $2.1: Boolean = call(equals.335, $1.1, "Object")
  .loc 1 2926 13
  mov rdi, rax
  lea rsi, .LABEL__string_210[rip] # "Object"
  call equals_335
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.4, block.5)
  test al, al
  jz .LABEL__is_object_type_139__5
.LABEL__is_object_type_139__4:
  # return(true)
  .loc 1 2927 13
  mov al, 1
  jmp .LABEL__is_object_type_139__end
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
.LABEL__is_object_type_139__5:
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  .loc 1 2929 23
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rax[rbp-8] 
  # $4.1: Boolean = struct_type.4 == null
  .loc 1 2930 13
  cmp rax, 0
  sete bl
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:rax[rbp-8] $4.1:rbx 
  # jump($4.1, block.7, block.2)
  test bl, bl
  mov [rbp-8], rax
  jz .LABEL__is_object_type_139__2
.LABEL__is_object_type_139__7:
  # return(false)
  .loc 1 2931 13
  mov al, 0
  jmp .LABEL__is_object_type_139__end
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_object_type_139__end:
  mov rsp, rbp
  pop rbp
  ret

is_object_type_139__stack_frame_size: .word 16

  .loc 1 2941 1
  .text
init_140:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_140__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_140__1:
  # self.1: @IR_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  # store_struct_member(self.1, type, type.1)
  .loc 1 2942 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], rsi
  # [discarded value]: type.1
  # [live values]: self.1:rdi 
  # $1.1: @List = call(create_list.307)
  .loc 1 2943 30
  mov [rbp-8], rdi
  call create_list_307
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # store_struct_member(self.1, user_instructions, $1.1)
  .loc 1 2943 5
  mov rbx, [rbp-8]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 1 2944 5
  mov rax, [rbp-8]
  jmp .LABEL__init_140__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_140__end:
  mov rsp, rbp
  pop rbp
  ret

init_140__stack_frame_size: .word 16

  .loc 1 2954 1
  .text
create_ir_constant_value_141:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_constant_value_141__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_constant_value_141__1:
  # type.1: @IR_Type = load_variable(type)
  # [live values]: type.1:rdi 
  # literal.1: @Literal_Token = load_variable(literal)
  # [live values]: type.1:rdi literal.1:rsi 
  # value.1: @IR_Constant_Value = new(IR_Constant_Value)
  .loc 1 2955 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  # [live values]: type.1:[rbp-16] literal.1:[rbp-8] value.1:rax 
  # $2.1: @IR_Value = call(init.140, value.1, type.1)
  .loc 1 2956 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call init_140
  # [discarded value]: type.1
  # [discarded value]: $2.1
  # [live values]: literal.1:[rbp-8] value.1:[rbp-24] 
  # store_struct_member(value.1, literal, literal.1)
  .loc 1 2957 5
  mov rax, [rbp-24]
  add rax, 24
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: literal.1
  # [live values]: value.1:[rbp-24] 
  # return(value.1)
  .loc 1 2958 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_constant_value_141__end
  # [discarded value]: value.1
  # [live values]: 
.LABEL__create_ir_constant_value_141__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_constant_value_141__stack_frame_size: .word 32

  .loc 1 2966 1
  .text
init_142:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_142__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_142__1:
  # self.1: @IR_Variable_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  # $1.1: @IR_Type = load_struct_member(variable.1, type)
  .loc 1 2967 15
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi variable.1:rsi $1.1:rax 
  # $2.1: @IR_Value = call(init.140, self.1, $1.1)
  .loc 1 2967 5
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call init_140
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] variable.1:[rbp-8] 
  # store_struct_member(self.1, variable, variable.1)
  .loc 1 2968 5
  mov rax, [rbp-16]
  add rax, 24
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] variable.1:rbx[rbp-8] 
  # $3.1: @List = load_struct_member(variable.1, values)
  .loc 1 2969 20
  mov rax, rbx
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] variable.1:rbx[rbp-8] $3.1:rax 
  # $4.1: Int = load_struct_member($3.1, size)
  .loc 1 2969 20
  mov r15, rax
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] variable.1:rbx[rbp-8] $4.1:r15 
  # $5.1: Int = $4.1 + 1
  .loc 1 2969 20
  mov rax, r15
  add rax, 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] variable.1:rbx[rbp-8] $5.1:rax 
  # store_struct_member(self.1, version, $5.1)
  .loc 1 2969 5
  mov r15, [rbp-16]
  add r15, 32
  mov QWORD PTR [r15], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] variable.1:rbx[rbp-8] 
  # $6.1: @List = load_struct_member(variable.1, values)
  .loc 1 2970 5
  mov rax, rbx
  add rax, 24
  mov rax, [rax]
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-16] $6.1:rax 
  # call(append.308, $6.1, self.1)
  .loc 1 2970 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] 
  # return(self.1)
  .loc 1 2971 5
  mov rax, [rbp-16]
  jmp .LABEL__init_142__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_142__end:
  mov rsp, rbp
  pop rbp
  ret

init_142__stack_frame_size: .word 16

  .loc 1 2984 1
  .text
has_instructions_143:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_instructions_143__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_instructions_143__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 1 2985 12
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 2985 12
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  # return($2.1)
  .loc 1 2985 5
  mov al, bl
  jmp .LABEL__has_instructions_143__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_instructions_143__end:
  mov rsp, rbp
  pop rbp
  ret

has_instructions_143__stack_frame_size: .word 0

  .loc 1 2988 1
  .text
prepend_144:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_144__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_144__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, parent_block, self.1)
  .loc 1 2989 5
  mov rax, rsi
  add rax, 32
  mov QWORD PTR [rax], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, prev_instruction, null)
  .loc 1 2990 5
  mov rax, rsi
  add rax, 40
  mov QWORD PTR [rax], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 1 2991 36
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # store_struct_member(instruction.1, next_instruction, $1.1)
  .loc 1 2991 5
  mov rbx, rsi
  add rbx, 48
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  # $2.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 1 2992 9
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  # $3.1: Boolean = $2.1 == null
  .loc 1 2992 9
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, block.2, block.4)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__prepend_144__4
.LABEL__prepend_144__2:
  # store_struct_member(self.1, last_instruction, instruction.1)
  .loc 1 2993 9
  mov rax, [rbp-16]
  add rax, 40
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx[rbp-8] 
  # jump(block.3)
  mov [rbp-8], rbx
.LABEL__prepend_144__3:
  # store_struct_member(self.1, first_instruction, instruction.1)
  .loc 1 2997 5
  mov rax, [rbp-16]
  add rax, 32
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] instruction.1:rbx[rbp-8] 
  # return(instruction.1)
  .loc 1 2998 5
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__prepend_144__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__prepend_144__4:
  # $4.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 1 2995 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, prev_instruction, instruction.1)
  .loc 1 2995 9
  mov rbx, rax
  add rbx, 40
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:r15[rbp-8] 
  # jump(block.3)
  jmp .LABEL__prepend_144__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__prepend_144__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_144__stack_frame_size: .word 16

  .loc 1 3001 1
  .text
append_145:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_145__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_145__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, parent_block, self.1)
  .loc 1 3002 5
  mov rax, rsi
  add rax, 32
  mov QWORD PTR [rax], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 1 3003 36
  mov rax, rdi
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # store_struct_member(instruction.1, prev_instruction, $1.1)
  .loc 1 3003 5
  mov rbx, rsi
  add rbx, 40
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  # store_struct_member(instruction.1, next_instruction, null)
  .loc 1 3004 5
  mov rax, rsi
  add rax, 48
  mov QWORD PTR [rax], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  # $2.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 1 3005 9
  mov rax, rdi
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  # $3.1: Boolean = $2.1 == null
  .loc 1 3005 9
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, block.2, block.4)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__append_145__4
.LABEL__append_145__2:
  # store_struct_member(self.1, first_instruction, instruction.1)
  .loc 1 3006 9
  mov rax, [rbp-16]
  add rax, 32
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx[rbp-8] 
  # jump(block.3)
  mov [rbp-8], rbx
.LABEL__append_145__3:
  # store_struct_member(self.1, last_instruction, instruction.1)
  .loc 1 3010 5
  mov rax, [rbp-16]
  add rax, 40
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] instruction.1:rbx[rbp-8] 
  # return(instruction.1)
  .loc 1 3011 5
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__append_145__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__append_145__4:
  # $4.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 1 3008 9
  mov rax, [rbp-16]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rax 
  # store_struct_member($4.1, next_instruction, instruction.1)
  .loc 1 3008 9
  mov rbx, rax
  add rbx, 48
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:r15[rbp-8] 
  # jump(block.3)
  jmp .LABEL__append_145__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_145__end:
  mov rsp, rbp
  pop rbp
  ret

append_145__stack_frame_size: .word 16

  .loc 1 3014 1
  .text
append_jump_146:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_146__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_146__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # instruction.1: @IR_Direct_Jump_Instruction = new(IR_Direct_Jump_Instruction)
  .loc 1 3015 20
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 65
  call malloc
  lea rbx, IR_Direct_Jump_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, null)
  .loc 1 3016 5
  mov rdi, rax
  xor rsi, rsi
  mov [rbp-24], rax
  call init_152
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] instruction.1:[rbp-24] 
  # store_struct_member(instruction.1, block, block.1)
  .loc 1 3017 5
  mov rax, [rbp-24]
  add rax, 57
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] block.1:rbx[rbp-8] instruction.1:[rbp-24] 
  # $3.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 3018 5
  mov rax, rbx
  add rax, 24
  mov rax, [rax]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-24] $3.1:rax 
  # call(append.308, $3.1, self.1)
  .loc 1 3018 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-24] 
  # $4.1: @IR_Instruction = call(append.145, self.1, instruction.1)
  .loc 1 3019 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call append_145
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 1 3020 5
  mov rax, [rbp-24]
  jmp .LABEL__append_jump_146__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_146__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_146__stack_frame_size: .word 32

  .loc 1 3023 1
  .text
append_jump_147:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_147__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_147__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # condition_value.1: @IR_Value = load_variable(condition_value)
  # [live values]: self.1:rdi condition_value.1:rsi 
  # true_block.1: @IR_Block = load_variable(true_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx 
  # false_block.1: @IR_Block = load_variable(false_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx false_block.1:rcx 
  # instruction.1: @IR_Conditional_Jump_Instruction = new(IR_Conditional_Jump_Instruction)
  .loc 1 3024 20
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 73
  call malloc
  lea rbx, IR_Conditional_Jump_Instruction[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, null)
  .loc 1 3025 5
  mov rdi, rax
  xor rsi, rsi
  mov [rbp-40], rax
  call init_152
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3026 5
  mov rax, [rbp-40]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] $3.1:rax 
  # call(append.308, $3.1, condition_value.1)
  .loc 1 3026 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  # store_struct_member(instruction.1, true_block, true_block.1)
  .loc 1 3027 5
  mov rax, [rbp-40]
  add rax, 57
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:rbx[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  # $4.1: @List = load_struct_member(true_block.1, predecessors)
  .loc 1 3028 5
  mov rax, rbx
  add rax, 24
  mov rax, [rax]
  # [discarded value]: true_block.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] false_block.1:[rbp-8] instruction.1:[rbp-40] $4.1:rax 
  # call(append.308, $4.1, self.1)
  .loc 1 3028 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  # store_struct_member(instruction.1, false_block, false_block.1)
  .loc 1 3029 5
  mov rax, [rbp-40]
  add rax, 65
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] false_block.1:rbx[rbp-8] instruction.1:[rbp-40] 
  # $5.1: @List = load_struct_member(false_block.1, predecessors)
  .loc 1 3030 5
  mov rax, rbx
  add rax, 24
  mov rax, [rax]
  # [discarded value]: false_block.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] instruction.1:[rbp-40] $5.1:rax 
  # call(append.308, $5.1, self.1)
  .loc 1 3030 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] instruction.1:[rbp-40] 
  # $6.1: @List = load_struct_member(condition_value.1, user_instructions)
  .loc 1 3031 5
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] $6.1:rax 
  # call(append.308, $6.1, instruction.1)
  .loc 1 3031 5
  mov rdi, rax
  mov rsi, [rbp-40]
  call append_308
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] 
  # $7.1: @IR_Instruction = call(append.145, self.1, instruction.1)
  .loc 1 3032 5
  mov rdi, [rbp-32]
  mov rsi, [rbp-40]
  call append_145
  # [discarded value]: self.1
  # [discarded value]: $7.1
  # [live values]: instruction.1:[rbp-40] 
  # return(instruction.1)
  .loc 1 3033 5
  mov rax, [rbp-40]
  jmp .LABEL__append_jump_147__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_147__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_147__stack_frame_size: .word 48

  .loc 1 3036 1
  .text
remove_148:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_148__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_148__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # $1.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  .loc 1 3037 9
  mov rax, rsi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != self.1
  .loc 1 3037 9
  cmp rax, rdi
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__remove_148__3
.LABEL__remove_148__2:
  # call(abort.344, "Tried to remove instruction belonging to another block")
  .loc 1 3038 9
  lea rdi, .LABEL__string_211[rip] # "Tried to remove instruction belonging to another block"
  call abort_344
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
.LABEL__remove_148__3:
  # $3.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 1 3040 9
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $3.1:rax 
  # $4.1: Boolean = $3.1 != null
  .loc 1 3040 9
  cmp rax, 0
  setne bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  # jump($4.1, block.4, block.5)
  test bl, bl
  jz .LABEL__remove_148__5
.LABEL__remove_148__4:
  # $5.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 1 3041 57
  mov rax, [rbp-8]
  add rax, 48
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  # $6.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 1 3041 9
  mov rbx, [rbp-8]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax $6.1:rbx 
  # store_struct_member($6.1, next_instruction, $5.1)
  .loc 1 3041 9
  mov r15, rbx
  add r15, 48
  mov QWORD PTR [r15], rax
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.5)
.LABEL__remove_148__5:
  # $7.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 1 3043 9
  mov rax, [rbp-8]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $7.1:rax 
  # $8.1: Boolean = $7.1 != null
  .loc 1 3043 9
  cmp rax, 0
  setne bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rbx 
  # jump($8.1, block.6, block.7)
  test bl, bl
  jz .LABEL__remove_148__7
.LABEL__remove_148__6:
  # $9.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 1 3044 57
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  # $10.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 1 3044 9
  mov rbx, [rbp-8]
  add rbx, 48
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax $10.1:rbx 
  # store_struct_member($10.1, prev_instruction, $9.1)
  .loc 1 3044 9
  mov r15, rbx
  add r15, 40
  mov QWORD PTR [r15], rax
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.7)
.LABEL__remove_148__7:
  # $11.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  .loc 1 3046 9
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $11.1:rax 
  # $12.1: Boolean = $11.1 == instruction.1
  .loc 1 3046 9
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rbx 
  # jump($12.1, block.8, block.9)
  test bl, bl
  jz .LABEL__remove_148__9
.LABEL__remove_148__8:
  # $13.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  .loc 1 3047 34
  mov rax, [rbp-8]
  add rax, 48
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax 
  # store_struct_member(self.1, first_instruction, $13.1)
  .loc 1 3047 9
  mov rbx, [rbp-16]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.9)
.LABEL__remove_148__9:
  # $14.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  .loc 1 3049 9
  mov rax, [rbp-16]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $14.1:rax 
  # $15.1: Boolean = $14.1 == instruction.1
  .loc 1 3049 9
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $15.1:rbx 
  # jump($15.1, block.10, block.11)
  test bl, bl
  jz .LABEL__remove_148__11
.LABEL__remove_148__10:
  # $16.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  .loc 1 3050 33
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $16.1:rax 
  # store_struct_member(self.1, last_instruction, $16.1)
  .loc 1 3050 9
  mov rbx, [rbp-16]
  add rbx, 40
  mov QWORD PTR [rbx], rax
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # jump(block.11)
.LABEL__remove_148__11:
  # store_struct_member(instruction.1, parent_block, null)
  .loc 1 3052 5
  mov rax, [rbp-8]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # store_struct_member(instruction.1, prev_instruction, null)
  .loc 1 3053 5
  mov rax, [rbp-8]
  add rax, 40
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # store_struct_member(instruction.1, next_instruction, null)
  .loc 1 3054 5
  mov rax, [rbp-8]
  add rax, 48
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # return()
  jmp .LABEL__remove_148__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__remove_148__end:
  mov rsp, rbp
  pop rbp
  ret

remove_148__stack_frame_size: .word 16

  .loc 1 3067 1
  .text
create_block_149:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_block_149__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_block_149__1:
  # self.1: @IR_Function = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = new(IR_Block)
  .loc 1 3068 14
  mov [rbp-8], rdi
  mov rdi, 50
  call malloc
  lea rbx, IR_Block[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] block.1:rax 
  # $2.1: @List = load_struct_member(self.1, blocks)
  .loc 1 3069 16
  mov rbx, [rbp-8]
  add rbx, 49
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] block.1:rax $2.1:rbx 
  # $3.1: Int = load_struct_member($2.1, size)
  .loc 1 3069 16
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] block.1:rax $3.1:r15 
  # $4.1: Int = $3.1 + 1
  .loc 1 3069 16
  mov rbx, r15
  add rbx, 1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] block.1:rax $4.1:rbx 
  # store_struct_member(block.1, id, $4.1)
  .loc 1 3069 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] block.1:rax 
  # store_struct_member(block.1, function, self.1)
  .loc 1 3070 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [live values]: self.1:r15[rbp-8] block.1:rax 
  # $5.1: @List = call(create_list.307)
  .loc 1 3071 26
  mov [rbp-16], rax
  mov [rbp-8], r15
  call create_list_307
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $5.1:rax 
  # store_struct_member(block.1, predecessors, $5.1)
  .loc 1 3071 5
  mov rbx, [rbp-16]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # store_struct_member(block.1, first_instruction, null)
  .loc 1 3072 5
  mov rax, [rbp-16]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # store_struct_member(block.1, last_instruction, null)
  .loc 1 3073 5
  mov rax, [rbp-16]
  add rax, 40
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # store_struct_member(block.1, is_being_generated, false)
  .loc 1 3074 5
  mov rax, [rbp-16]
  add rax, 48
  mov BYTE PTR [rax], 0
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # store_struct_member(block.1, is_generated, false)
  .loc 1 3075 5
  mov rax, [rbp-16]
  add rax, 49
  mov BYTE PTR [rax], 0
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  # $6.1: @List = load_struct_member(self.1, blocks)
  .loc 1 3076 5
  mov rax, [rbp-8]
  add rax, 49
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: block.1:[rbp-16] $6.1:rax 
  # call(append.308, $6.1, block.1)
  .loc 1 3076 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-16] 
  # return(block.1)
  .loc 1 3077 5
  mov rax, [rbp-16]
  jmp .LABEL__create_block_149__end
  # [discarded value]: block.1
  # [live values]: 
.LABEL__create_block_149__end:
  mov rsp, rbp
  pop rbp
  ret

create_block_149__stack_frame_size: .word 16

  .loc 1 3086 1
  .text
init_150:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_150__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_150__1:
  # self.1: @IR_Variable = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi name.1:rsi type.1:rdx 
  # store_struct_member(self.1, name, name.1)
  .loc 1 3087 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], rsi
  # [discarded value]: name.1
  # [live values]: self.1:rdi type.1:rdx 
  # store_struct_member(self.1, type, type.1)
  .loc 1 3088 5
  mov rax, rdi
  add rax, 16
  mov QWORD PTR [rax], rdx
  # [discarded value]: type.1
  # [live values]: self.1:rdi 
  # $1.1: @List = call(create_list.307)
  .loc 1 3089 19
  mov [rbp-8], rdi
  call create_list_307
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # store_struct_member(self.1, values, $1.1)
  .loc 1 3089 5
  mov rbx, [rbp-8]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 1 3090 5
  mov rax, [rbp-8]
  jmp .LABEL__init_150__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_150__end:
  mov rsp, rbp
  pop rbp
  ret

init_150__stack_frame_size: .word 16

  .loc 1 3097 1
  .text
create_ir_global_variable_151:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_global_variable_151__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_global_variable_151__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: name.1:rdi type.1:rsi 
  # is_external.1: Boolean = load_variable(is_external)
  # [live values]: name.1:rdi type.1:rsi is_external.1:rdx 
  # variable.1: @IR_Global_Variable = new(IR_Global_Variable)
  .loc 1 3098 17
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 33
  call malloc
  lea rbx, IR_Global_Variable[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-17] type.1:[rbp-9] is_external.1:[rbp-1] variable.1:rax 
  # $2.1: @IR_Variable = call(init.150, variable.1, name.1, type.1)
  .loc 1 3099 5
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rdx, [rbp-9]
  mov [rbp-25], rax
  call init_150
  # [discarded value]: name.1
  # [discarded value]: type.1
  # [discarded value]: $2.1
  # [live values]: is_external.1:[rbp-1] variable.1:[rbp-25] 
  # store_struct_member(variable.1, is_external, is_external.1)
  .loc 1 3100 5
  mov rax, [rbp-25]
  add rax, 32
  mov bl, [rbp-1]
  mov BYTE PTR [rax], bl
  # [discarded value]: is_external.1
  # [live values]: variable.1:[rbp-25] 
  # return(variable.1)
  .loc 1 3101 5
  mov rax, [rbp-25]
  jmp .LABEL__create_ir_global_variable_151__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__create_ir_global_variable_151__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_global_variable_151__stack_frame_size: .word 32

  .loc 1 3117 1
  .text
init_152:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_152__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_152__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: self.1:rdi result_value.1:rsi 
  # store_struct_member(self.1, location, null)
  .loc 1 3118 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], 0
  # [live values]: self.1:rdi result_value.1:rsi 
  # store_struct_member(self.1, result_value, result_value.1)
  .loc 1 3119 5
  mov rax, rdi
  add rax, 16
  mov QWORD PTR [rax], rsi
  # [discarded value]: result_value.1
  # [live values]: self.1:rdi 
  # $1.1: @List = call(create_list.307)
  .loc 1 3120 27
  mov [rbp-8], rdi
  call create_list_307
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # store_struct_member(self.1, operand_values, $1.1)
  .loc 1 3120 5
  mov rbx, [rbp-8]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # store_struct_member(self.1, parent_block, null)
  .loc 1 3121 5
  mov rax, [rbp-8]
  add rax, 32
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # store_struct_member(self.1, prev_instruction, null)
  .loc 1 3122 5
  mov rax, [rbp-8]
  add rax, 40
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # store_struct_member(self.1, next_instruction, null)
  .loc 1 3123 5
  mov rax, [rbp-8]
  add rax, 48
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # store_struct_member(self.1, is_generated, false)
  .loc 1 3124 5
  mov rax, [rbp-8]
  add rax, 56
  mov BYTE PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 1 3125 5
  mov rax, [rbp-8]
  jmp .LABEL__init_152__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_152__end:
  mov rsp, rbp
  pop rbp
  ret

init_152__stack_frame_size: .word 16

  .loc 1 3128 1
  .text
is_exit_instruction_153:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_exit_instruction_153__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_exit_instruction_153__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Boolean = self.1 == null
  .loc 1 3129 9
  cmp rdi, 0
  sete al
  # [live values]: self.1:rdi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__is_exit_instruction_153__3
.LABEL__is_exit_instruction_153__2:
  # return(false)
  .loc 1 3130 9
  mov al, 0
  jmp .LABEL__is_exit_instruction_153__end
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
.LABEL__is_exit_instruction_153__3:
  # IR_Jump_Instruction.2: @Object_Type = load_variable(IR_Jump_Instruction)
  lea rax, IR_Jump_Instruction[rip]
  # [live values]: self.1:[rbp-8] IR_Jump_Instruction.2:rax 
  # $3.1: Boolean = call(is.325, self.1, IR_Jump_Instruction.2)
  .loc 1 3132 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Jump_Instruction.2
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.6, block.5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__is_exit_instruction_153__5
.LABEL__is_exit_instruction_153__6:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 1 3132 9
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $3.3:[rbp-9] 
  # jump($3.3, block.7, block.8)
  mov al, [rbp-9]
  test al, al
  jz .LABEL__is_exit_instruction_153__8
.LABEL__is_exit_instruction_153__7:
  # return(true)
  .loc 1 3133 9
  mov al, 1
  jmp .LABEL__is_exit_instruction_153__end
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__is_exit_instruction_153__8:
  # IR_Call_Instruction.3: @Object_Type = load_variable(IR_Call_Instruction)
  lea rax, IR_Call_Instruction[rip]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] IR_Call_Instruction.3:rax 
  # $5.1: Boolean = call(is.325, self.1, IR_Call_Instruction.3)
  .loc 1 3135 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Call_Instruction.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $5.1:rax 
  # jump($5.1, block.10, block.11)
  test al, al
  jz .LABEL__is_exit_instruction_153__11
.LABEL__is_exit_instruction_153__10:
  # self.1: @IR_Call_Instruction = self.1
  .loc 1 3136 17
  mov rax, [rbp-8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] self.1:rax 
  # function.1: @IR_Function = load_struct_member(self.1, function)
  .loc 1 3137 21
  mov rbx, rax
  add rbx, 57
  mov rbx, [rbx]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rbx 
  # $8.1: @String = load_struct_member(function.1, name)
  .loc 1 3138 13
  mov rax, rbx
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:rbx $8.1:rax 
  # $9.1: Boolean = call(equals.335, $8.1, "abort")
  .loc 1 3138 13
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # "abort"
  mov [rbp-17], rbx
  call equals_335
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $9.1:rax 
  # jump($9.1, block.12, block.13)
  test al, al
  jz .LABEL__is_exit_instruction_153__13
.LABEL__is_exit_instruction_153__12:
  # return(true)
  .loc 1 3139 13
  mov al, 1
  jmp .LABEL__is_exit_instruction_153__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] 
.LABEL__is_exit_instruction_153__13:
  # $10.1: @String = load_struct_member(function.1, name)
  .loc 1 3141 13
  mov rax, [rbp-17]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $10.1:rax 
  # $12.1: Boolean = call(equals.335, $10.1, "exit")
  .loc 1 3141 13
  mov rdi, rax
  lea rsi, .LABEL__string_213[rip] # "exit"
  call equals_335
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:rax 
  # jump($12.1, block.15, block.16)
  test al, al
  mov [rbp-18], al
  jz .LABEL__is_exit_instruction_153__16
.LABEL__is_exit_instruction_153__15:
  # $13.1: @List = load_struct_member(function.1, parameters)
  .loc 1 3141 45
  mov rax, [rbp-17]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $13.1:rax 
  # $14.1: Int = load_struct_member($13.1, size)
  .loc 1 3141 45
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $14.1:rbx 
  # $12.2: Boolean = $14.1 == 1
  .loc 1 3141 45
  cmp rbx, 1
  sete al
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:rax[rbp-18] 
  # jump(block.16)
  mov [rbp-18], al
.LABEL__is_exit_instruction_153__16:
  # $12.3: Boolean = phi($12.1, $12.2)
  .loc 1 3141 13
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $12.3:[rbp-18] 
  # jump($12.3, block.17, block.11)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__is_exit_instruction_153__11
.LABEL__is_exit_instruction_153__17:
  # $16.1: @List = load_struct_member(function.1, parameters)
  .loc 1 3142 35
  mov rax, [rbp-17]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $16.1:rax 
  # function_parameter.1: @IR_Function_Parameter = call(get.316, $16.1, 0)
  .loc 1 3142 35
  mov rdi, rax
  xor rsi, rsi
  call get_316
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] function_parameter.1:rax 
  # $19.1: @IR_Type = load_struct_member(function_parameter.1, type)
  .loc 1 3143 17
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $19.1:rbx 
  # IR_Int_Type.29: @Object_Type = load_variable(IR_Int_Type)
  lea rax, IR_Int_Type[rip]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $19.1:rbx IR_Int_Type.29:rax 
  # $20.1: Boolean = call(is.325, $19.1, IR_Int_Type.29)
  .loc 1 3143 17
  mov rdi, rbx
  mov rsi, rax
  call is_325
  # [discarded value]: $19.1
  # [discarded value]: IR_Int_Type.29
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] $20.1:rax 
  # jump($20.1, block.19, block.11)
  test al, al
  jz .LABEL__is_exit_instruction_153__11
.LABEL__is_exit_instruction_153__19:
  # return(true)
  .loc 1 3144 17
  mov al, 1
  jmp .LABEL__is_exit_instruction_153__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
.LABEL__is_exit_instruction_153__11:
  # return(false)
  .loc 1 3148 5
  mov al, 0
  jmp .LABEL__is_exit_instruction_153__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] $12.2:[rbp-18] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] $12.1:[rbp-18] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] function.1:[rbp-17] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__is_exit_instruction_153__5:
  # IR_Return_Instruction.3: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] IR_Return_Instruction.3:rax 
  # $3.2: Boolean = call(is.325, self.1, IR_Return_Instruction.3)
  .loc 1 3132 41
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Return_Instruction.3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $3.2:rax[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__is_exit_instruction_153__6
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $3.2:[rbp-9] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_exit_instruction_153__end:
  mov rsp, rbp
  pop rbp
  ret

is_exit_instruction_153__stack_frame_size: .word 32

  .loc 1 3156 1
  .text
create_ir_call_instruction_154:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_call_instruction_154__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_call_instruction_154__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi function.1:rsi 
  # arguments.1: @List = load_variable(arguments)
  # [live values]: result_value.1:rdi function.1:rsi arguments.1:rdx 
  # instruction.1: @IR_Call_Instruction = new(IR_Call_Instruction)
  .loc 1 3157 20
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 73
  call malloc
  lea rbx, IR_Call_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] function.1:[rbp-16] arguments.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3158 5
  mov rdi, rax
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-16] arguments.1:[rbp-8] instruction.1:[rbp-32] 
  # store_struct_member(instruction.1, function, function.1)
  .loc 1 3159 5
  mov rax, [rbp-32]
  add rax, 57
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: function.1
  # [live values]: arguments.1:[rbp-8] instruction.1:[rbp-32] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3160 29
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: arguments.1:[rbp-8] instruction.1:[rbp-32] $3.1:rax 
  # store_struct_member(instruction.1, arguments, $3.1)
  .loc 1 3160 5
  mov rbx, [rbp-32]
  add rbx, 65
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: arguments.1:[rbp-8] instruction.1:[rbp-32] 
  # arguments.1: @List_Iterator = call(create_iterator.319, arguments.1)
  .loc 1 3161 18
  mov rdi, [rbp-8]
  call create_iterator_319
  # [discarded value]: arguments.1
  # [live values]: instruction.1:[rbp-32] arguments.1:rax 
  # jump(block.2)
  mov [rbp-40], rax
.LABEL__create_ir_call_instruction_154__2:
  # $5.1: Boolean = call(has_next.322, arguments.1)
  .loc 1 3162 12
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__create_ir_call_instruction_154__4
.LABEL__create_ir_call_instruction_154__3:
  # value.1: @IR_Value = call(next.323, arguments.1)
  .loc 1 3163 18
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] value.1:rax 
  # $8.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3164 9
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] value.1:rax $8.1:rbx 
  # call(append.308, $8.1, value.1)
  .loc 1 3164 9
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-48], rax
  call append_308
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] value.1:[rbp-48] 
  # $9.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3165 9
  mov rax, [rbp-48]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] $9.1:rax 
  # call(append.308, $9.1, instruction.1)
  .loc 1 3165 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] 
  # jump(block.2)
  jmp .LABEL__create_ir_call_instruction_154__2
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] 
.LABEL__create_ir_call_instruction_154__4:
  # return(instruction.1)
  .loc 1 3167 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_call_instruction_154__end
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] 
  # [live values]: instruction.1:[rbp-32] arguments.1:[rbp-40] 
  # [discarded value]: instruction.1
  # [discarded value]: arguments.1
  # [live values]: 
.LABEL__create_ir_call_instruction_154__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_call_instruction_154__stack_frame_size: .word 48

  .loc 1 3173 1
  .text
create_ir_cast_instruction_155:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_cast_instruction_155__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_cast_instruction_155__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  # instruction.1: @IR_Cast_Instruction = new(IR_Cast_Instruction)
  .loc 1 3174 20
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 57
  call malloc
  lea rbx, IR_Cast_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3175 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-24] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3176 5
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-24] $3.1:rax 
  # call(append.308, $3.1, value.1)
  .loc 1 3176 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-24] 
  # $4.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3177 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-24] $4.1:rax 
  # call(append.308, $4.1, instruction.1)
  .loc 1 3177 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 1 3178 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_cast_instruction_155__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_cast_instruction_155__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_cast_instruction_155__stack_frame_size: .word 32

  .loc 1 3181 1
  .text
get_value_156:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_156__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_156__1:
  # self.1: @IR_Cast_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3182 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3182 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3182 5
  jmp .LABEL__get_value_156__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_156__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_156__stack_frame_size: .word 0

  .loc 1 3193 1
  .text
get_condition_value_157:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_condition_value_157__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_condition_value_157__1:
  # self.1: @IR_Conditional_Jump_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3194 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3194 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3194 5
  jmp .LABEL__get_condition_value_157__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_condition_value_157__end:
  mov rsp, rbp
  pop rbp
  ret

get_condition_value_157__stack_frame_size: .word 0

  .loc 1 3204 1
  .text
create_ir_load_array_item_instruction_158:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_array_item_instruction_158__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_array_item_instruction_158__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: result_value.1:rdi array_value.1:rsi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: result_value.1:rdi array_value.1:rsi index_value.1:rdx 
  # instruction.1: @IR_Load_Array_Item_Instruction = new(IR_Load_Array_Item_Instruction)
  .loc 1 3205 20
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 57
  call malloc
  lea rbx, IR_Load_Array_Item_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3206 5
  mov rdi, rax
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-32] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3207 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-32] $3.1:rax 
  # call(append.308, $3.1, array_value.1)
  .loc 1 3207 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $3.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-32] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3208 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-32] $4.1:rax 
  # call(append.308, $4.1, index_value.1)
  .loc 1 3208 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $4.1
  # [live values]: array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:[rbp-32] 
  # $5.1: @List = load_struct_member(array_value.1, user_instructions)
  .loc 1 3209 5
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-8] instruction.1:[rbp-32] $5.1:rax 
  # call(append.308, $5.1, instruction.1)
  .loc 1 3209 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $5.1
  # [live values]: index_value.1:[rbp-8] instruction.1:[rbp-32] 
  # $6.1: @List = load_struct_member(index_value.1, user_instructions)
  .loc 1 3210 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: index_value.1
  # [live values]: instruction.1:[rbp-32] $6.1:rax 
  # call(append.308, $6.1, instruction.1)
  .loc 1 3210 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-32] 
  # return(instruction.1)
  .loc 1 3211 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_load_array_item_instruction_158__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_array_item_instruction_158__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_array_item_instruction_158__stack_frame_size: .word 32

  .loc 1 3214 1
  .text
get_array_value_159:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_159__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_159__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3215 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3215 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3215 5
  jmp .LABEL__get_array_value_159__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_array_value_159__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_159__stack_frame_size: .word 0

  .loc 1 3218 1
  .text
get_index_value_160:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_160__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_160__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3219 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last.318, $1.1)
  .loc 1 3219 12
  mov rdi, rax
  call last_318
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3219 5
  jmp .LABEL__get_index_value_160__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_index_value_160__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_160__stack_frame_size: .word 0

  .loc 1 3227 1
  .text
create_ir_load_struct_member_instruction_161:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_struct_member_instruction_161__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_struct_member_instruction_161__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx 
  # load_address.1: Boolean = load_variable(load_address)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx load_address.1:rcx 
  # instruction.1: @IR_Load_Struct_Member_Instruction = new(IR_Load_Struct_Member_Instruction)
  .loc 1 3228 20
  mov [rbp-1], cl
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  mov rdi, 66
  call malloc
  lea rbx, IR_Load_Struct_Member_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3229 5
  mov rdi, rax
  mov rsi, [rbp-25]
  mov [rbp-33], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] instruction.1:[rbp-33] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3230 5
  mov rax, [rbp-33]
  add rax, 24
  mov rax, [rax]
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] instruction.1:[rbp-33] $3.1:rax 
  # call(append.308, $3.1, struct_pointer_value.1)
  .loc 1 3230 5
  mov rdi, rax
  mov rsi, [rbp-17]
  call append_308
  # [discarded value]: $3.1
  # [live values]: struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] instruction.1:[rbp-33] 
  # store_struct_member(instruction.1, struct_type_member, struct_type_member.1)
  .loc 1 3231 5
  mov rax, [rbp-33]
  add rax, 57
  mov rbx, [rbp-9]
  mov QWORD PTR [rax], rbx
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-17] load_address.1:[rbp-1] instruction.1:[rbp-33] 
  # store_struct_member(instruction.1, load_address, load_address.1)
  .loc 1 3232 5
  mov rax, [rbp-33]
  add rax, 65
  mov bl, [rbp-1]
  mov BYTE PTR [rax], bl
  # [discarded value]: load_address.1
  # [live values]: struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] 
  # $4.1: @List = load_struct_member(struct_pointer_value.1, user_instructions)
  .loc 1 3233 5
  mov rax, [rbp-17]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: struct_pointer_value.1
  # [live values]: instruction.1:[rbp-33] $4.1:rax 
  # call(append.308, $4.1, instruction.1)
  .loc 1 3233 5
  mov rdi, rax
  mov rsi, [rbp-33]
  call append_308
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-33] 
  # return(instruction.1)
  .loc 1 3234 5
  mov rax, [rbp-33]
  jmp .LABEL__create_ir_load_struct_member_instruction_161__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_struct_member_instruction_161__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_struct_member_instruction_161__stack_frame_size: .word 48

  .loc 1 3237 1
  .text
get_struct_pointer_value_162:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_162__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_162__1:
  # self.1: @IR_Load_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3238 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3238 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3238 5
  jmp .LABEL__get_struct_pointer_value_162__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_struct_pointer_value_162__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_162__stack_frame_size: .word 0

  .loc 1 3245 1
  .text
create_ir_load_variable_instruction_163:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_instruction_163__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_instruction_163__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # instruction.1: @IR_Load_Variable_Instruction = new(IR_Load_Variable_Instruction)
  .loc 1 3246 20
  mov [rbp-8], rdi
  mov rdi, 65
  call malloc
  lea rbx, IR_Load_Variable_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3247 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call init_152
  # [discarded value]: $2.1
  # [live values]: result_value.1:[rbp-8] instruction.1:[rbp-16] 
  # $3.1: @IR_Variable = load_struct_member(result_value.1, variable)
  .loc 1 3248 28
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [discarded value]: result_value.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  # store_struct_member(instruction.1, variable, $3.1)
  .loc 1 3248 5
  mov rbx, [rbp-16]
  add rbx, 57
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] 
  # return(instruction.1)
  .loc 1 3249 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_load_variable_instruction_163__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_instruction_163__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_instruction_163__stack_frame_size: .word 16

  .loc 1 3256 1
  .text
create_ir_new_instruction_164:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_new_instruction_164__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_new_instruction_164__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: result_value.1:rdi type.1:rsi 
  # size_value.1: @IR_Value = load_variable(size_value)
  # [live values]: result_value.1:rdi type.1:rsi size_value.1:rdx 
  # instruction.1: @IR_New_Instruction = new(IR_New_Instruction)
  .loc 1 3257 20
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 65
  call malloc
  lea rbx, IR_New_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] size_value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3258 5
  mov rdi, rax
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: type.1:[rbp-16] size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # store_struct_member(instruction.1, type, type.1)
  .loc 1 3259 5
  mov rax, [rbp-32]
  add rax, 57
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: type.1
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3260 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] $3.1:rax 
  # call(append.308, $3.1, size_value.1)
  .loc 1 3260 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $3.1
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # $4.1: Boolean = size_value.1 != null
  .loc 1 3261 9
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__create_ir_new_instruction_164__3
.LABEL__create_ir_new_instruction_164__2:
  # $5.1: @List = load_struct_member(size_value.1, user_instructions)
  .loc 1 3262 9
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] $5.1:rax 
  # call(append.308, $5.1, instruction.1)
  .loc 1 3262 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $5.1
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # jump(block.3)
.LABEL__create_ir_new_instruction_164__3:
  # return(instruction.1)
  .loc 1 3264 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_new_instruction_164__end
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # [live values]: size_value.1:[rbp-8] instruction.1:[rbp-32] 
  # [discarded value]: size_value.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_new_instruction_164__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_new_instruction_164__stack_frame_size: .word 32

  .loc 1 3267 1
  .text
get_size_value_165:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_size_value_165__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_size_value_165__1:
  # self.1: @IR_New_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3268 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3268 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3268 5
  jmp .LABEL__get_size_value_165__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_size_value_165__end:
  mov rsp, rbp
  pop rbp
  ret

get_size_value_165__stack_frame_size: .word 0

  .loc 1 3274 1
  .text
create_ir_return_instruction_166:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_return_instruction_166__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_return_instruction_166__1:
  # return_value.1: @IR_Value = load_variable(return_value)
  # [live values]: return_value.1:rdi 
  # instruction.1: @IR_Return_Instruction = new(IR_Return_Instruction)
  .loc 1 3275 20
  mov [rbp-8], rdi
  mov rdi, 57
  call malloc
  lea rbx, IR_Return_Instruction[rip]
  mov [rax], rbx
  # [live values]: return_value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, null)
  .loc 1 3276 5
  mov rdi, rax
  xor rsi, rsi
  mov [rbp-16], rax
  call init_152
  # [discarded value]: $2.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3277 5
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax 
  # call(append.308, $3.1, return_value.1)
  .loc 1 3277 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $3.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # $4.1: Boolean = return_value.1 != null
  .loc 1 3278 9
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__create_ir_return_instruction_166__3
.LABEL__create_ir_return_instruction_166__2:
  # $5.1: @List = load_struct_member(return_value.1, user_instructions)
  .loc 1 3279 9
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $5.1:rax 
  # call(append.308, $5.1, instruction.1)
  .loc 1 3279 9
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $5.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # jump(block.3)
.LABEL__create_ir_return_instruction_166__3:
  # return(instruction.1)
  .loc 1 3281 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_return_instruction_166__end
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: return_value.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_return_instruction_166__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_return_instruction_166__stack_frame_size: .word 16

  .loc 1 3284 1
  .text
get_return_value_167:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_return_value_167__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_return_value_167__1:
  # self.1: @IR_Return_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3285 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3285 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3285 5
  jmp .LABEL__get_return_value_167__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_return_value_167__end:
  mov rsp, rbp
  pop rbp
  ret

get_return_value_167__stack_frame_size: .word 0

  .loc 1 3291 1
  .text
create_ir_set_instruction_168:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_set_instruction_168__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_set_instruction_168__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  # instruction.1: @IR_Set_Instruction = new(IR_Set_Instruction)
  .loc 1 3292 20
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 57
  call malloc
  lea rbx, IR_Set_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3293 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-24] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3294 5
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-24] $3.1:rax 
  # call(append.308, $3.1, value.1)
  .loc 1 3294 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-24] 
  # $4.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3295 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-24] $4.1:rax 
  # call(append.308, $4.1, instruction.1)
  .loc 1 3295 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-24] 
  # return(instruction.1)
  .loc 1 3296 5
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_set_instruction_168__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_set_instruction_168__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_set_instruction_168__stack_frame_size: .word 32

  .loc 1 3299 1
  .text
get_value_169:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_169__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_169__1:
  # self.1: @IR_Set_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3300 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3300 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3300 5
  jmp .LABEL__get_value_169__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_169__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_169__stack_frame_size: .word 0

  .loc 1 3306 1
  .text
create_ir_store_array_item_instruction_170:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_array_item_instruction_170__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_array_item_instruction_170__1:
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: array_value.1:rdi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: array_value.1:rdi index_value.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: array_value.1:rdi index_value.1:rsi value.1:rdx 
  # instruction.1: @IR_Store_Array_Item_Instruction = new(IR_Store_Array_Item_Instruction)
  .loc 1 3307 20
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 57
  call malloc
  lea rbx, IR_Store_Array_Item_Instruction[rip]
  mov [rax], rbx
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, null)
  .loc 1 3308 5
  mov rdi, rax
  xor rsi, rsi
  mov [rbp-32], rax
  call init_152
  # [discarded value]: $2.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3309 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] $3.1:rax 
  # call(append.308, $3.1, array_value.1)
  .loc 1 3309 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $3.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3310 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] $4.1:rax 
  # call(append.308, $4.1, index_value.1)
  .loc 1 3310 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $4.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $5.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3311 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] $5.1:rax 
  # call(append.308, $5.1, value.1)
  .loc 1 3311 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $5.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $6.1: @List = load_struct_member(array_value.1, user_instructions)
  .loc 1 3312 5
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] $6.1:rax 
  # call(append.308, $6.1, instruction.1)
  .loc 1 3312 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $6.1
  # [live values]: index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $7.1: @List = load_struct_member(index_value.1, user_instructions)
  .loc 1 3313 5
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: index_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] $7.1:rax 
  # call(append.308, $7.1, instruction.1)
  .loc 1 3313 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $7.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  # $8.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3314 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] $8.1:rax 
  # call(append.308, $8.1, instruction.1)
  .loc 1 3314 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-32] 
  # return(instruction.1)
  .loc 1 3315 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_array_item_instruction_170__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_array_item_instruction_170__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_array_item_instruction_170__stack_frame_size: .word 32

  .loc 1 3318 1
  .text
get_array_value_171:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_171__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_171__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3319 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3319 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3319 5
  jmp .LABEL__get_array_value_171__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_array_value_171__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_171__stack_frame_size: .word 0

  .loc 1 3322 1
  .text
get_index_value_172:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_172__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_172__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3323 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(get.316, $1.1, 1)
  .loc 1 3323 12
  mov rdi, rax
  mov rsi, 1
  call get_316
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3323 5
  jmp .LABEL__get_index_value_172__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_index_value_172__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_172__stack_frame_size: .word 0

  .loc 1 3326 1
  .text
get_value_173:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_173__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_173__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3327 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last.318, $1.1)
  .loc 1 3327 12
  mov rdi, rax
  call last_318
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3327 5
  jmp .LABEL__get_value_173__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_173__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_173__stack_frame_size: .word 0

  .loc 1 3334 1
  .text
create_ir_store_struct_member_instruction_174:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_struct_member_instruction_174__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_struct_member_instruction_174__1:
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: struct_pointer_value.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi value.1:rdx 
  # instruction.1: @IR_Store_Struct_Member_Instruction = new(IR_Store_Struct_Member_Instruction)
  .loc 1 3335 20
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 65
  call malloc
  lea rbx, IR_Store_Struct_Member_Instruction[rip]
  mov [rax], rbx
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, null)
  .loc 1 3336 5
  mov rdi, rax
  xor rsi, rsi
  mov [rbp-32], rax
  call init_152
  # [discarded value]: $2.1
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3337 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] $3.1:rax 
  # call(append.308, $3.1, struct_pointer_value.1)
  .loc 1 3337 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $3.1
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  # store_struct_member(instruction.1, struct_type_member, struct_type_member.1)
  .loc 1 3338 5
  mov rax, [rbp-32]
  add rax, 57
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $4.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3339 5
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:[rbp-32] $4.1:rax 
  # call(append.308, $4.1, value.1)
  .loc 1 3339 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $4.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:[rbp-32] 
  # $5.1: @List = load_struct_member(struct_pointer_value.1, user_instructions)
  .loc 1 3340 5
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: struct_pointer_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] $5.1:rax 
  # call(append.308, $5.1, instruction.1)
  .loc 1 3340 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $5.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  # $6.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3341 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] $6.1:rax 
  # call(append.308, $6.1, instruction.1)
  .loc 1 3341 5
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_308
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-32] 
  # return(instruction.1)
  .loc 1 3342 5
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_struct_member_instruction_174__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_struct_member_instruction_174__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_struct_member_instruction_174__stack_frame_size: .word 32

  .loc 1 3345 1
  .text
get_struct_pointer_value_175:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_175__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_175__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3346 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3346 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3346 5
  jmp .LABEL__get_struct_pointer_value_175__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_struct_pointer_value_175__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_175__stack_frame_size: .word 0

  .loc 1 3349 1
  .text
get_value_176:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_176__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_176__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3350 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last.318, $1.1)
  .loc 1 3350 12
  mov rdi, rax
  call last_318
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3350 5
  jmp .LABEL__get_value_176__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_value_176__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_176__stack_frame_size: .word 0

  .loc 1 3356 1
  .text
init_177:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_177__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_177__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: self.1:rdi result_value.1:rsi 
  # left_value.1: @IR_Value = load_variable(left_value)
  # [live values]: self.1:rdi result_value.1:rsi left_value.1:rdx 
  # right_value.1: @IR_Value = load_variable(right_value)
  # [live values]: self.1:rdi result_value.1:rsi left_value.1:rdx right_value.1:rcx 
  # $1.1: @IR_Instruction = call(init.152, self.1, result_value.1)
  .loc 1 3357 5
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] left_value.1:[rbp-16] right_value.1:[rbp-8] 
  # $2.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3358 5
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] left_value.1:[rbp-16] right_value.1:[rbp-8] $2.1:rax 
  # call(append.308, $2.1, left_value.1)
  .loc 1 3358 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] left_value.1:[rbp-16] right_value.1:[rbp-8] 
  # $3.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3359 5
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] left_value.1:[rbp-16] right_value.1:[rbp-8] $3.1:rax 
  # call(append.308, $3.1, right_value.1)
  .loc 1 3359 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] left_value.1:[rbp-16] right_value.1:[rbp-8] 
  # $4.1: @List = load_struct_member(left_value.1, user_instructions)
  .loc 1 3360 5
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-24] right_value.1:[rbp-8] $4.1:rax 
  # call(append.308, $4.1, self.1)
  .loc 1 3360 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] right_value.1:[rbp-8] 
  # $5.1: @List = load_struct_member(right_value.1, user_instructions)
  .loc 1 3361 5
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-24] $5.1:rax 
  # call(append.308, $5.1, self.1)
  .loc 1 3361 5
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_308
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] 
  # return(self.1)
  .loc 1 3362 5
  mov rax, [rbp-24]
  jmp .LABEL__init_177__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_177__end:
  mov rsp, rbp
  pop rbp
  ret

init_177__stack_frame_size: .word 32

  .loc 1 3365 1
  .text
get_left_value_178:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_left_value_178__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_left_value_178__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3366 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(first.317, $1.1)
  .loc 1 3366 12
  mov rdi, rax
  call first_317
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3366 5
  jmp .LABEL__get_left_value_178__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_left_value_178__end:
  mov rsp, rbp
  pop rbp
  ret

get_left_value_178__stack_frame_size: .word 0

  .loc 1 3369 1
  .text
get_right_value_179:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_right_value_179__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_right_value_179__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, operand_values)
  .loc 1 3370 12
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $3.1: @IR_Value = call(last.318, $1.1)
  .loc 1 3370 12
  mov rdi, rax
  call last_318
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  # return($3.1)
  .loc 1 3370 5
  jmp .LABEL__get_right_value_179__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_right_value_179__end:
  mov rsp, rbp
  pop rbp
  ret

get_right_value_179__stack_frame_size: .word 0

  .loc 1 3413 1
  .text
create_ir_phi_instruction_180:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_phi_instruction_180__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_phi_instruction_180__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # instruction.1: @IR_Phi_Instruction = new(IR_Phi_Instruction)
  .loc 1 3414 20
  mov [rbp-8], rdi
  mov rdi, 65
  call malloc
  lea rbx, IR_Phi_Instruction[rip]
  mov [rax], rbx
  # [live values]: result_value.1:[rbp-8] instruction.1:rax 
  # $2.1: @IR_Instruction = call(init.152, instruction.1, result_value.1)
  .loc 1 3415 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call init_152
  # [discarded value]: result_value.1
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] 
  # $3.1: @List = load_struct_member(instruction.1, operand_values)
  .loc 1 3416 26
  mov rax, [rbp-16]
  add rax, 24
  mov rax, [rax]
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  # store_struct_member(instruction.1, values, $3.1)
  .loc 1 3416 5
  mov rbx, [rbp-16]
  add rbx, 57
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] 
  # return(instruction.1)
  .loc 1 3417 5
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_phi_instruction_180__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_phi_instruction_180__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_phi_instruction_180__stack_frame_size: .word 16

  .loc 1 3420 1
  .text
append_181:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_181__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_181__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  # $1.1: @List = load_struct_member(self.1, values)
  .loc 1 3421 5
  mov rax, rdi
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:rdi value.1:rsi $1.1:rax 
  # $2.1: @List = call(remove_all.311, $1.1, value.1)
  .loc 1 3421 5
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call remove_all_311
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $2.1:rax 
  # $3.1: @List = call(prune.312, $2.1)
  .loc 1 3421 5
  mov rdi, rax
  call prune_312
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] $3.1:rax 
  # call(append.308, $3.1, value.1)
  .loc 1 3421 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_308
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  # $4.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3422 5
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # call(append.308, $4.1, self.1)
  .loc 1 3422 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_308
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: 
  # return()
  jmp .LABEL__append_181__end
  # [live values]: 
.LABEL__append_181__end:
  mov rsp, rbp
  pop rbp
  ret

append_181__stack_frame_size: .word 16

  .loc 1 3425 1
  .text
is_redundant_182:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_redundant_182__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_redundant_182__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, values)
  .loc 1 3429 19
  mov rax, rdi
  add rax, 57
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # value_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 1 3429 19
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: value_item.1:rbx 
  # $3.1: Boolean = value_item.1 == null
  .loc 1 3430 9
  cmp rbx, 0
  sete al
  # [live values]: value_item.1:rbx $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rbx
  jz .LABEL__is_redundant_182__3
.LABEL__is_redundant_182__2:
  # call(abort.352)
  .loc 1 3431 9
  call abort
  # [discarded value]: $3.1
  # [live values]: value_item.1:[rbp-8] 
.LABEL__is_redundant_182__3:
  # other_value.1: @IR_Value = load_struct_member(value_item.1, data)
  .loc 1 3433 20
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: value_item.1:[rbp-8] other_value.1:rax 
  # value_item.3: @List_Item = load_struct_member(value_item.1, next_item)
  .loc 1 3434 18
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: value_item.1:[rbp-8] other_value.1:rax value_item.3:rbx[rbp-8] 
  # jump(block.4)
  mov [rbp-16], rax
  mov [rbp-8], rbx
.LABEL__is_redundant_182__4:
  # value_item.4: @List_Item = phi(value_item.3, value_item.7)
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # $7.1: Boolean = value_item.4 != null
  .loc 1 3435 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] $7.1:rax 
  # jump($7.1, block.5, block.6)
  test al, al
  jz .LABEL__is_redundant_182__6
.LABEL__is_redundant_182__5:
  # value.1: @IR_Value = load_struct_member(value_item.4, data)
  .loc 1 3436 18
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] value.1:rax 
  # $10.1: Boolean = value.1 != other_value.1
  .loc 1 3437 13
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [discarded value]: value.1
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] $10.1:rbx 
  # jump($10.1, block.7, block.8)
  test bl, bl
  jz .LABEL__is_redundant_182__8
.LABEL__is_redundant_182__7:
  # return(false)
  .loc 1 3438 13
  mov al, 0
  jmp .LABEL__is_redundant_182__end
  # [discarded value]: $10.1
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
.LABEL__is_redundant_182__8:
  # value_item.7: @List_Item = load_struct_member(value_item.4, next_item)
  .loc 1 3440 22
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] value_item.7:rax[rbp-8] 
  # jump(block.4)
  mov [rbp-8], rax
  jmp .LABEL__is_redundant_182__4
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] value_item.7:[rbp-8] 
  # [discarded value]: value_item.7
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
.LABEL__is_redundant_182__6:
  # return(true)
  .loc 1 3442 5
  mov al, 1
  jmp .LABEL__is_redundant_182__end
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] value_item.4:[rbp-8] 
  # [discarded value]: value_item.4
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] other_value.1:[rbp-16] value_item.3:[rbp-8] 
  # [discarded value]: other_value.1
  # [discarded value]: value_item.3
  # [live values]: value_item.1:[rbp-8] 
  # [live values]: value_item.1:[rbp-8] 
  # [discarded value]: value_item.1
  # [live values]: 
.LABEL__is_redundant_182__end:
  mov rsp, rbp
  pop rbp
  ret

is_redundant_182__stack_frame_size: .word 16

  .loc 1 3445 1
  .text
is_trivial_183:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_trivial_183__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_trivial_183__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List = load_struct_member(self.1, values)
  .loc 1 3450 19
  mov rax, rdi
  add rax, 57
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # value_item.1: @List_Item = load_struct_member($1.1, first_item)
  .loc 1 3450 19
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi value_item.1:rbx 
  # $3.1: Boolean = value_item.1 == null
  .loc 1 3451 9
  cmp rbx, 0
  sete al
  # [live values]: self.1:rdi value_item.1:rbx $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rbx
  mov [rbp-16], rdi
  jz .LABEL__is_trivial_183__3
.LABEL__is_trivial_183__2:
  # call(abort.352)
  .loc 1 3452 9
  call abort
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] 
.LABEL__is_trivial_183__3:
  # result_value.1: @IR_Value = load_struct_member(self.1, result_value)
  .loc 1 3454 31
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:rax 
  # other_value.1: @IR_Value = null
  .loc 1 3455 5
  xor rbx, rbx
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:rax other_value.1:rbx 
  # jump(block.4)
  mov [rbp-24], rax
  mov [rbp-32], rbx
.LABEL__is_trivial_183__4:
  # other_value.5: @IR_Value = phi(other_value.1, other_value.6)
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] 
  # value_item.2: @List_Item = phi(value_item.1, value_item.5)
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
  # $5.1: Boolean = value_item.2 != null
  .loc 1 3456 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__is_trivial_183__6
.LABEL__is_trivial_183__5:
  # value.1: @IR_Value = load_struct_member(value_item.2, data)
  .loc 1 3457 18
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:rax 
  # $8.1: Boolean = value.1 != result_value.1
  .loc 1 3458 13
  cmp rax, QWORD PTR [rbp-24]
  setne bl
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:rax $8.1:rbx 
  # jump($8.1, block.7, block.8)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__is_trivial_183__8
.LABEL__is_trivial_183__7:
  # $9.1: Boolean = value.1 != other_value.5
  .loc 1 3459 17
  mov rax, [rbp-40]
  cmp rax, QWORD PTR [rbp-32]
  setne bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:rax[rbp-40] $9.1:rbx 
  # jump($9.1, block.9, block.8)
  test bl, bl
  mov [rbp-40], rax
  jz .LABEL__is_trivial_183__8
.LABEL__is_trivial_183__9:
  # $10.1: Boolean = other_value.5 != null
  .loc 1 3460 21
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] $10.1:rax 
  # jump($10.1, block.11, block.12)
  test al, al
  jz .LABEL__is_trivial_183__12
.LABEL__is_trivial_183__11:
  # return(false)
  .loc 1 3461 21
  mov al, 0
  jmp .LABEL__is_trivial_183__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
.LABEL__is_trivial_183__12:
  # other_value.4: @IR_Value = value.1
  .loc 1 3463 17
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.4:rax[rbp-32] 
  # jump(block.8)
  mov [rbp-32], rax
.LABEL__is_trivial_183__8:
  # other_value.6: @IR_Value = phi(other_value.4, other_value.5)
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.6:[rbp-32] other_value.4:[rbp-32] 
  # value_item.5: @List_Item = load_struct_member(value_item.2, next_item)
  .loc 1 3466 22
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.6:[rbp-32] value_item.5:rax[rbp-8] other_value.4:[rbp-32] 
  # jump(block.4)
  mov [rbp-8], rax
  jmp .LABEL__is_trivial_183__4
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.6:[rbp-32] value_item.5:[rbp-8] other_value.4:[rbp-32] 
  # [discarded value]: other_value.6
  # [discarded value]: value_item.5
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.4:[rbp-32] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] other_value.4:[rbp-32] 
  # [discarded value]: other_value.4
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] value.1:[rbp-40] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
.LABEL__is_trivial_183__6:
  # return(true)
  .loc 1 3468 5
  mov al, 1
  jmp .LABEL__is_trivial_183__end
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] other_value.5:[rbp-32] value_item.2:[rbp-8] 
  # [discarded value]: other_value.5
  # [discarded value]: value_item.2
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] result_value.1:[rbp-24] other_value.1:[rbp-32] 
  # [discarded value]: result_value.1
  # [discarded value]: other_value.1
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] value_item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: value_item.1
  # [live values]: 
.LABEL__is_trivial_183__end:
  mov rsp, rbp
  pop rbp
  ret

is_trivial_183__stack_frame_size: .word 48

  .loc 1 3471 1
  .text
dump_184:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_184__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_184__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: build.1:rdi file.1:rsi 
  # $1.1: @List = load_struct_member(build.1, named_functions)
  .loc 1 3472 18
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [discarded value]: build.1
  # [live values]: file.1:rsi $1.1:rax 
  # functions.1: @List_Iterator = call(create_iterator.319, $1.1)
  .loc 1 3472 18
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_319
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] functions.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__dump_184__2:
  # $3.1: Boolean = call(has_next.322, functions.1)
  .loc 1 3473 12
  mov rdi, [rbp-16]
  call has_next_322
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__dump_184__4
.LABEL__dump_184__3:
  # function.1: @IR_Function = call(next.323, functions.1)
  .loc 1 3474 21
  mov rdi, [rbp-16]
  call next_323
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:rax 
  # $6.1: Boolean = load_struct_member(function.1, is_external)
  .loc 1 3475 13
  mov rbx, rax
  add rbx, 48
  mov bl, [rbx]
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:rax $6.1:rbx 
  # $7.1: Boolean = $6.1 == false
  .loc 1 3475 13
  cmp bl, 0
  sete r15b
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:rax $7.1:r15 
  # jump($7.1, block.5, block.2)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__dump_184__2
.LABEL__dump_184__5:
  # call(dump.185, function.1, file.1)
  .loc 1 3476 13
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call dump_185
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # $8.1: @FILE = call(end_line.342, file.1)
  .loc 1 3477 13
  mov rdi, [rbp-8]
  call end_line_342
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # jump(block.2)
  jmp .LABEL__dump_184__2
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: function.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
.LABEL__dump_184__4:
  # return()
  jmp .LABEL__dump_184__end
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: functions.1
  # [live values]: 
.LABEL__dump_184__end:
  mov rsp, rbp
  pop rbp
  ret

dump_184__stack_frame_size: .word 32

  .loc 1 3482 1
  .text
dump_185:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_185__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_185__1:
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: function.1:rdi file.1:rsi 
  # $1.1: @String = load_struct_member(function.1, name)
  .loc 1 3483 16
  mov rax, rdi
  add rax, 24
  mov rax, [rax]
  # [live values]: function.1:rdi file.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write.339, file.1, $1.1)
  .loc 1 3483 5
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call write_339
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write.341, $2.1, '.')
  .loc 1 3483 5
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $3.1:rax 
  # $4.1: Int = load_struct_member(function.1, id)
  .loc 1 3483 48
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $3.1:rax $4.1:rbx 
  # $5.1: @FILE = call(write.338, $3.1, $4.1)
  .loc 1 3483 5
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, " :: (")
  .loc 1 3483 5
  mov rdi, rax
  lea rsi, .LABEL__string_166[rip] # " :: ("
  call write_339
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] 
  # $7.1: @List = load_struct_member(function.1, parameters)
  .loc 1 3484 28
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $7.1:rax 
  # function_parameters.1: @List_Iterator = call(create_iterator.319, $7.1)
  .loc 1 3484 28
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:rax 
  # jump(block.2)
  mov [rbp-24], rax
.LABEL__dump_185__2:
  # $9.1: Boolean = call(has_next.322, function_parameters.1)
  .loc 1 3485 12
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $9.1:rax 
  # jump($9.1, block.3, block.4)
  test al, al
  jz .LABEL__dump_185__4
.LABEL__dump_185__3:
  # function_parameter.1: @IR_Function_Parameter = call(next.323, function_parameters.1)
  .loc 1 3486 31
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:rax 
  # $12.1: @String = load_struct_member(function_parameter.1, name)
  .loc 1 3487 20
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:rax $12.1:rbx 
  # $13.1: @FILE = call(write.339, file.1, $12.1)
  .loc 1 3487 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_339
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, ": ")
  .loc 1 3487 9
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] function_parameter.1:[rbp-32] $14.1:rax 
  # $15.1: @IR_Type = load_struct_member(function_parameter.1, type)
  .loc 1 3487 63
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: function_parameter.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $14.1:rax $15.1:rbx 
  # $16.1: @String = load_struct_member($15.1, name)
  .loc 1 3487 63
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $14.1:rax $16.1:r15 
  # $17.1: @FILE = call(write.339, $14.1, $16.1)
  .loc 1 3487 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $14.1
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $18.1: Boolean = call(has_next.322, function_parameters.1)
  .loc 1 3488 13
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $18.1:rax 
  # jump($18.1, block.5, block.2)
  test al, al
  jz .LABEL__dump_185__2
.LABEL__dump_185__5:
  # $19.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 3489 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # jump(block.2)
  jmp .LABEL__dump_185__2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
.LABEL__dump_185__4:
  # $20.1: @FILE = call(write.339, file.1, ") -> ")
  .loc 1 3492 5
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_215[rip] # ") -> "
  call write_339
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $20.1:rax 
  # $21.1: @IR_Type = load_struct_member(function.1, return_type)
  .loc 1 3492 31
  mov rbx, [rbp-8]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $20.1:rax $21.1:rbx 
  # $22.1: @String = load_struct_member($21.1, name)
  .loc 1 3492 31
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $20.1:rax $22.1:r15 
  # $23.1: @FILE = call(write.339, $20.1, $22.1)
  .loc 1 3492 5
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $20.1
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $23.1:rax 
  # $24.1: @FILE = call(write.339, $23.1, " {")
  .loc 1 3492 5
  mov rdi, rax
  lea rsi, .LABEL__string_216[rip] # " {"
  call write_339
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $24.1:rax 
  # $25.1: @FILE = call(end_line.342, $24.1)
  .loc 1 3492 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # $26.1: @List = load_struct_member(function.1, blocks)
  .loc 1 3493 19
  mov rax, [rbp-8]
  add rax, 49
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $26.1:rax 
  # block_item.1: @List_Item = load_struct_member($26.1, first_item)
  .loc 1 3493 19
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:rbx 
  # jump(block.7)
  mov [rbp-32], rbx
.LABEL__dump_185__7:
  # block_item.2: @List_Item = phi(block_item.1, block_item.4)
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # $28.1: Boolean = block_item.2 != null
  .loc 1 3494 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] $28.1:rax 
  # jump($28.1, block.8, block.9)
  test al, al
  jz .LABEL__dump_185__9
.LABEL__dump_185__8:
  # $30.1: @IR_Block = load_struct_member(block_item.2, data)
  .loc 1 3495 10
  mov rax, [rbp-32]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] $30.1:rax 
  # $31.1: @FILE = call(dump.186, $30.1, file.1)
  .loc 1 3495 10
  mov rdi, rax
  mov rsi, [rbp-16]
  call dump_186
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # block_item.4: @List_Item = load_struct_member(block_item.2, next_item)
  .loc 1 3496 22
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] block_item.4:rax[rbp-32] 
  # jump(block.7)
  mov [rbp-32], rax
  jmp .LABEL__dump_185__7
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] block_item.4:[rbp-32] 
  # [discarded value]: block_item.4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
.LABEL__dump_185__9:
  # $33.1: @FILE = call(write.341, file.1, '}')
  .loc 1 3498 5
  mov rdi, [rbp-16]
  mov sil, 125
  call write_341
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] $33.1:rax 
  # $34.1: @FILE = call(end_line.342, $33.1)
  .loc 1 3498 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # return()
  jmp .LABEL__dump_185__end
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] block_item.2:[rbp-32] 
  # [discarded value]: block_item.2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] block_item.1:[rbp-32] 
  # [discarded value]: block_item.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: function.1
  # [discarded value]: file.1
  # [discarded value]: function_parameters.1
  # [live values]: 
.LABEL__dump_185__end:
  mov rsp, rbp
  pop rbp
  ret

dump_185__stack_frame_size: .word 32

  .loc 1 3501 1
  .text
dump_186:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_186__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_186__1:
  # block.1: @IR_Block = load_variable(block)
  # [live values]: block.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: block.1:rdi file.1:rsi 
  # $1.1: @FILE = call(write.339, file.1, "block.")
  .loc 1 3502 5
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_217[rip] # "block."
  call write_339
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  # $2.1: Int = load_struct_member(block.1, id)
  .loc 1 3502 32
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $1.1:rax $2.1:rbx 
  # $3.1: @FILE = call(write.338, $1.1, $2.1)
  .loc 1 3502 5
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] 
  # $4.1: @List = load_struct_member(block.1, predecessors)
  .loc 1 3503 27
  mov rax, [rbp-8]
  add rax, 24
  mov rax, [rax]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $4.1:rax 
  # block_predecessors.1: @List_Iterator = call(create_iterator.319, $4.1)
  .loc 1 3503 27
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:rax 
  # $6.1: Boolean = call(has_next.322, block_predecessors.1)
  .loc 1 3504 9
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_322
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:rax 
  # jump($6.1, block.2, block.3)
  test al, al
  jz .LABEL__dump_186__3
.LABEL__dump_186__2:
  # $7.1: @FILE = call(write.341, file.1, '(')
  .loc 1 3505 9
  mov rdi, [rbp-16]
  mov sil, 40
  call write_341
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # jump(block.4)
.LABEL__dump_186__4:
  # block_predecessor.1: @IR_Block = call(next.323, block_predecessors.1)
  .loc 1 3507 34
  mov rdi, [rbp-24]
  call next_323
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_predecessor.1:rax 
  # $10.1: @FILE = call(write.339, file.1, "block.")
  .loc 1 3508 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_217[rip] # "block."
  mov [rbp-32], rax
  call write_339
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_predecessor.1:[rbp-32] $10.1:rax 
  # $11.1: Int = load_struct_member(block_predecessor.1, id)
  .loc 1 3508 40
  mov rbx, [rbp-32]
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: block_predecessor.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $10.1:rax $11.1:rbx 
  # $12.1: @FILE = call(write.338, $10.1, $11.1)
  .loc 1 3508 13
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # $13.1: Boolean = call(has_next.322, block_predecessors.1)
  .loc 1 3509 17
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $13.1:rax 
  # jump($13.1, block.6, block.5)
  test al, al
  jz .LABEL__dump_186__5
.LABEL__dump_186__6:
  # $14.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 3510 17
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # jump(block.4)
  jmp .LABEL__dump_186__4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
.LABEL__dump_186__5:
  # $15.1: @FILE = call(write.341, file.1, ')')
  .loc 1 3515 9
  mov rdi, [rbp-16]
  mov sil, 41
  call write_341
  # [discarded value]: $15.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # jump(block.3)
.LABEL__dump_186__3:
  # $16.1: @FILE = call(write.341, file.1, ':')
  .loc 1 3517 5
  mov rdi, [rbp-16]
  mov sil, 58
  call write_341
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 3517 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  .loc 1 3518 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:rax 
  # jump(block.10)
  mov [rbp-32], rax
.LABEL__dump_186__10:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.4)
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # $19.1: Boolean = block_instruction.2 != null
  .loc 1 3519 12
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] $19.1:rax 
  # jump($19.1, block.11, block.12)
  test al, al
  jz .LABEL__dump_186__12
.LABEL__dump_186__11:
  # $20.1: @FILE = call(dump.187, block_instruction.2, file.1, "   ")
  .loc 1 3520 9
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  lea rdx, .LABEL__string_218[rip] # "   "
  call dump_187
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # block_instruction.4: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  .loc 1 3521 29
  mov rax, [rbp-32]
  add rax, 48
  mov rax, [rax]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.4:rax[rbp-32] 
  # jump(block.10)
  mov [rbp-32], rax
  jmp .LABEL__dump_186__10
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] block_instruction.4:[rbp-32] 
  # [discarded value]: block_instruction.4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
.LABEL__dump_186__12:
  # return(file.1)
  .loc 1 3523 5
  mov rax, [rbp-16]
  jmp .LABEL__dump_186__end
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] block_instruction.2:[rbp-32] 
  # [discarded value]: block_instruction.2
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] block_instruction.1:[rbp-32] 
  # [discarded value]: block_instruction.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [discarded value]: block.1
  # [discarded value]: file.1
  # [discarded value]: block_predecessors.1
  # [live values]: 
.LABEL__dump_186__end:
  mov rsp, rbp
  pop rbp
  ret

dump_186__stack_frame_size: .word 32

  .loc 1 3526 1
  .text
dump_187:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_187__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_187__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  # $1.1: @FILE = call(write.339, file.1, prefix.1)
  .loc 1 3527 5
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rdx
  call write_339
  # [discarded value]: prefix.1
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # IR_Add_Instruction.3: @Object_Type = load_variable(IR_Add_Instruction)
  lea rax, IR_Add_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Add_Instruction.3:rax 
  # $2.1: Boolean = call(is.325, instruction.1, IR_Add_Instruction.3)
  .loc 1 3528 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Add_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__dump_187__3
.LABEL__dump_187__2:
  # instruction.1: @IR_Add_Instruction = instruction.1
  .loc 1 3529 24
  mov rax, [rbp-8]
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $4.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3530 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $4.1:rbx 
  # $5.1: @FILE = call(write.188, file.1, $4.1, false)
  .loc 1 3530 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $4.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, ": ")
  .loc 1 3530 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $6.1:rax 
  # $7.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3530 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $6.1:rax $7.1:rbx 
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  .loc 1 3530 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $6.1:rax $8.1:r15 
  # $9.1: @String = load_struct_member($8.1, name)
  .loc 1 3530 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $6.1:rax $9.1:rbx 
  # $10.1: @FILE = call(write.339, $6.1, $9.1)
  .loc 1 3530 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $6.1
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write.339, $10.1, " = ")
  .loc 1 3530 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $10.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $11.1:rax 
  # $12.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3530 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $11.1:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write.188, $11.1, $12.1, true)
  .loc 1 3530 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, " + ")
  .loc 1 3530 16
  mov rdi, rax
  lea rsi, .LABEL__string_220[rip] # " + "
  call write_339
  # [discarded value]: $13.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $14.1:rax 
  # $15.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3530 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $14.1:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(write.188, $14.1, $15.1, true)
  .loc 1 3530 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $16.1:rax 
  # $17.1: @FILE = call(end_line.342, $16.1)
  .loc 1 3530 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $16.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $17.1:rax 
  # return($17.1)
  .loc 1 3530 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $17.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__3:
  # IR_Call_Instruction.4: @Object_Type = load_variable(IR_Call_Instruction)
  lea rax, IR_Call_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Call_Instruction.4:rax 
  # $18.1: Boolean = call(is.325, instruction.1, IR_Call_Instruction.4)
  .loc 1 3532 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Call_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $18.1:rax 
  # jump($18.1, block.5, block.6)
  test al, al
  jz .LABEL__dump_187__6
.LABEL__dump_187__5:
  # instruction.1: @IR_Call_Instruction = instruction.1
  .loc 1 3533 24
  mov rax, [rbp-8]
  # [discarded value]: $18.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $20.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3534 13
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $20.1:rbx 
  # $21.1: Boolean = $20.1 == null
  .loc 1 3534 13
  cmp rbx, 0
  sete r15b
  # [discarded value]: $20.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $21.1:r15 
  # jump($21.1, block.7, block.9)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__dump_187__9
.LABEL__dump_187__7:
  # $39.1: @FILE = call(write.339, file.1, "call")
  .loc 1 3535 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_221[rip] # "call"
  call write_339
  # [discarded value]: $21.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $39.1:rax 
  # $40.1: @FILE = call(write.341, $39.1, '(')
  .loc 1 3535 13
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $39.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $40.1:rax 
  # $41.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 3535 49
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $40.1:rax $41.1:rbx 
  # $42.1: @String = load_struct_member($41.1, name)
  .loc 1 3535 49
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $41.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $40.1:rax $42.1:r15 
  # $43.1: @FILE = call(write.339, $40.1, $42.1)
  .loc 1 3535 13
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $40.1
  # [discarded value]: $42.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $43.1:rax 
  # $44.1: @FILE = call(write.341, $43.1, '.')
  .loc 1 3535 13
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $43.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $44.1:rax 
  # $45.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 3535 93
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $44.1:rax $45.1:rbx 
  # $46.1: Int = load_struct_member($45.1, id)
  .loc 1 3535 93
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $45.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $44.1:rax $46.1:r15 
  # $47.1: @FILE = call(write.338, $44.1, $46.1)
  .loc 1 3535 13
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $44.1
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.8)
.LABEL__dump_187__8:
  # $48.1: @IR_Call_Instruction = instruction.1
  .loc 1 3539 28
  mov rax, [rbp-24]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $48.1:rax 
  # $49.1: @List = load_struct_member($48.1, arguments)
  .loc 1 3539 28
  mov rbx, rax
  add rbx, 65
  mov rbx, [rbx]
  # [discarded value]: $48.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $49.1:rbx 
  # call_arguments.1: @List_Iterator = call(create_iterator.319, $49.1)
  .loc 1 3539 28
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $49.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:rax 
  # jump(block.10)
  mov [rbp-32], rax
.LABEL__dump_187__10:
  # $51.1: Boolean = call(has_next.322, call_arguments.1)
  .loc 1 3540 16
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] $51.1:rax 
  # jump($51.1, block.11, block.12)
  test al, al
  jz .LABEL__dump_187__12
.LABEL__dump_187__11:
  # $52.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 3541 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $51.1
  # [discarded value]: $52.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] 
  # call_argument.1: @IR_Value = call(next.323, call_arguments.1)
  .loc 1 3542 30
  mov rdi, [rbp-32]
  call next_323
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] call_argument.1:rax 
  # $55.1: @FILE = call(write.188, file.1, call_argument.1, true)
  .loc 1 3543 13
  mov rdi, [rbp-16]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: call_argument.1
  # [discarded value]: $55.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] 
  # jump(block.10)
  jmp .LABEL__dump_187__10
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] 
.LABEL__dump_187__12:
  # $56.1: @FILE = call(write.341, file.1, ')')
  .loc 1 3545 16
  mov rdi, [rbp-16]
  mov sil, 41
  call write_341
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] $56.1:rax 
  # $57.1: @FILE = call(end_line.342, $56.1)
  .loc 1 3545 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $56.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] $57.1:rax 
  # return($57.1)
  .loc 1 3545 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $57.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] call_arguments.1:[rbp-32] 
  # [discarded value]: call_arguments.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
.LABEL__dump_187__9:
  # $22.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3537 24
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $22.1:rax 
  # $23.1: @FILE = call(write.188, file.1, $22.1, false)
  .loc 1 3537 13
  mov rdi, [rbp-16]
  mov rsi, rax
  mov dl, 0
  call write_188
  # [discarded value]: $22.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $23.1:rax 
  # $24.1: @FILE = call(write.339, $23.1, ": ")
  .loc 1 3537 13
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $23.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $24.1:rax 
  # $25.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3537 75
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $24.1:rax $25.1:rbx 
  # $26.1: @IR_Type = load_struct_member($25.1, type)
  .loc 1 3537 75
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $25.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $24.1:rax $26.1:r15 
  # $27.1: @String = load_struct_member($26.1, name)
  .loc 1 3537 75
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $26.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $24.1:rax $27.1:rbx 
  # $28.1: @FILE = call(write.339, $24.1, $27.1)
  .loc 1 3537 13
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $24.1
  # [discarded value]: $27.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $28.1:rax 
  # $29.1: @FILE = call(write.339, $28.1, " = ")
  .loc 1 3537 13
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $28.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $29.1:rax 
  # $30.1: @FILE = call(write.339, $29.1, "call")
  .loc 1 3537 13
  mov rdi, rax
  lea rsi, .LABEL__string_221[rip] # "call"
  call write_339
  # [discarded value]: $29.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $30.1:rax 
  # $31.1: @FILE = call(write.341, $30.1, '(')
  .loc 1 3537 13
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $30.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $31.1:rax 
  # $32.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 3537 155
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $31.1:rax $32.1:rbx 
  # $33.1: @String = load_struct_member($32.1, name)
  .loc 1 3537 155
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $32.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $31.1:rax $33.1:r15 
  # $34.1: @FILE = call(write.339, $31.1, $33.1)
  .loc 1 3537 13
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $31.1
  # [discarded value]: $33.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $34.1:rax 
  # $35.1: @FILE = call(write.341, $34.1, '.')
  .loc 1 3537 13
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $34.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $35.1:rax 
  # $36.1: @IR_Function = load_struct_member(instruction.1, function)
  .loc 1 3537 199
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $35.1:rax $36.1:rbx 
  # $37.1: Int = load_struct_member($36.1, id)
  .loc 1 3537 199
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $36.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $35.1:rax $37.1:r15 
  # $38.1: @FILE = call(write.338, $35.1, $37.1)
  .loc 1 3537 13
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $35.1
  # [discarded value]: $37.1
  # [discarded value]: $38.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.8)
  jmp .LABEL__dump_187__8
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__6:
  # IR_Cast_Instruction.3: @Object_Type = load_variable(IR_Cast_Instruction)
  lea rax, IR_Cast_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Cast_Instruction.3:rax 
  # $58.1: Boolean = call(is.325, instruction.1, IR_Cast_Instruction.3)
  .loc 1 3547 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Cast_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $58.1:rax 
  # jump($58.1, block.14, block.15)
  test al, al
  jz .LABEL__dump_187__15
.LABEL__dump_187__14:
  # instruction.1: @IR_Cast_Instruction = instruction.1
  .loc 1 3548 24
  mov rax, [rbp-8]
  # [discarded value]: $58.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3549 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $60.1:rbx 
  # $61.1: @FILE = call(write.188, file.1, $60.1, false)
  .loc 1 3549 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $60.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $61.1:rax 
  # $62.1: @FILE = call(write.339, $61.1, ": ")
  .loc 1 3549 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $61.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $62.1:rax 
  # $63.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3549 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $62.1:rax $63.1:rbx 
  # $64.1: @IR_Type = load_struct_member($63.1, type)
  .loc 1 3549 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $63.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $62.1:rax $64.1:r15 
  # $65.1: @String = load_struct_member($64.1, name)
  .loc 1 3549 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $64.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $62.1:rax $65.1:rbx 
  # $66.1: @FILE = call(write.339, $62.1, $65.1)
  .loc 1 3549 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $62.1
  # [discarded value]: $65.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $66.1:rax 
  # $67.1: @FILE = call(write.339, $66.1, " = ")
  .loc 1 3549 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $66.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $67.1:rax 
  # $68.1: @FILE = call(write.339, $67.1, "cast")
  .loc 1 3549 16
  mov rdi, rax
  lea rsi, .LABEL__string_222[rip] # "cast"
  call write_339
  # [discarded value]: $67.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $68.1:rax 
  # $69.1: @FILE = call(write.341, $68.1, '(')
  .loc 1 3549 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $68.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $69.1:rax 
  # $70.1: @IR_Value = call(get_value.156, instruction.1)
  .loc 1 3549 158
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_156
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $69.1:[rbp-32] $70.1:rax 
  # $71.1: @FILE = call(write.188, $69.1, $70.1, true)
  .loc 1 3549 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $69.1
  # [discarded value]: $70.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $71.1:rax 
  # $72.1: @FILE = call(write.341, $71.1, ')')
  .loc 1 3549 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $71.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $72.1:rax 
  # $73.1: @FILE = call(end_line.342, $72.1)
  .loc 1 3549 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $72.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $73.1:rax 
  # return($73.1)
  .loc 1 3549 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $73.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__15:
  # IR_Conditional_Jump_Instruction.4: @Object_Type = load_variable(IR_Conditional_Jump_Instruction)
  lea rax, IR_Conditional_Jump_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Conditional_Jump_Instruction.4:rax 
  # $74.1: Boolean = call(is.325, instruction.1, IR_Conditional_Jump_Instruction.4)
  .loc 1 3551 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Conditional_Jump_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $74.1:rax 
  # jump($74.1, block.17, block.18)
  test al, al
  jz .LABEL__dump_187__18
.LABEL__dump_187__17:
  # instruction.1: @IR_Conditional_Jump_Instruction = instruction.1
  .loc 1 3552 24
  mov rax, [rbp-8]
  # [discarded value]: $74.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $76.1: @FILE = call(write.339, file.1, "jump")
  .loc 1 3553 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_223[rip] # "jump"
  mov [rbp-24], rax
  call write_339
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $76.1:rax 
  # $77.1: @FILE = call(write.341, $76.1, '(')
  .loc 1 3553 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $76.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $77.1:rax 
  # $78.1: @IR_Value = call(get_condition_value.157, instruction.1)
  .loc 1 3553 52
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_condition_value_157
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $77.1:[rbp-32] $78.1:rax 
  # $79.1: @FILE = call(write.188, $77.1, $78.1, true)
  .loc 1 3553 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $77.1
  # [discarded value]: $78.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $79.1:rax 
  # $80.1: @FILE = call(write.339, $79.1, ", block.")
  .loc 1 3553 16
  mov rdi, rax
  lea rsi, .LABEL__string_224[rip] # ", block."
  call write_339
  # [discarded value]: $79.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $80.1:rax 
  # $81.1: @IR_Block = load_struct_member(instruction.1, true_block)
  .loc 1 3553 117
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $80.1:rax $81.1:rbx 
  # $82.1: Int = load_struct_member($81.1, id)
  .loc 1 3553 117
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $81.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $80.1:rax $82.1:r15 
  # $83.1: @FILE = call(write.338, $80.1, $82.1)
  .loc 1 3553 16
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $80.1
  # [discarded value]: $82.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $83.1:rax 
  # $84.1: @FILE = call(write.339, $83.1, ", block.")
  .loc 1 3553 16
  mov rdi, rax
  lea rsi, .LABEL__string_224[rip] # ", block."
  call write_339
  # [discarded value]: $83.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $84.1:rax 
  # $85.1: @IR_Block = load_struct_member(instruction.1, false_block)
  .loc 1 3553 168
  mov rbx, [rbp-24]
  add rbx, 65
  mov rbx, [rbx]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $84.1:rax $85.1:rbx 
  # $86.1: Int = load_struct_member($85.1, id)
  .loc 1 3553 168
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $85.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $84.1:rax $86.1:r15 
  # $87.1: @FILE = call(write.338, $84.1, $86.1)
  .loc 1 3553 16
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $84.1
  # [discarded value]: $86.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $87.1:rax 
  # $88.1: @FILE = call(write.341, $87.1, ')')
  .loc 1 3553 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $87.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $88.1:rax 
  # $89.1: @FILE = call(end_line.342, $88.1)
  .loc 1 3553 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $88.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $89.1:rax 
  # return($89.1)
  .loc 1 3553 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $89.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__18:
  # IR_Direct_Jump_Instruction.6: @Object_Type = load_variable(IR_Direct_Jump_Instruction)
  lea rax, IR_Direct_Jump_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Direct_Jump_Instruction.6:rax 
  # $90.1: Boolean = call(is.325, instruction.1, IR_Direct_Jump_Instruction.6)
  .loc 1 3555 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Direct_Jump_Instruction.6
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $90.1:rax 
  # jump($90.1, block.20, block.21)
  test al, al
  jz .LABEL__dump_187__21
.LABEL__dump_187__20:
  # instruction.1: @IR_Direct_Jump_Instruction = instruction.1
  .loc 1 3556 24
  mov rax, [rbp-8]
  # [discarded value]: $90.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $92.1: @FILE = call(write.339, file.1, "jump")
  .loc 1 3557 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_223[rip] # "jump"
  mov [rbp-24], rax
  call write_339
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $92.1:rax 
  # $93.1: @FILE = call(write.341, $92.1, '(')
  .loc 1 3557 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $92.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $93.1:rax 
  # $94.1: @FILE = call(write.339, $93.1, "block.")
  .loc 1 3557 16
  mov rdi, rax
  lea rsi, .LABEL__string_217[rip] # "block."
  call write_339
  # [discarded value]: $93.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $94.1:rax 
  # $95.1: @IR_Block = load_struct_member(instruction.1, block)
  .loc 1 3557 68
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $94.1:rax $95.1:rbx 
  # $96.1: Int = load_struct_member($95.1, id)
  .loc 1 3557 68
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $95.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $94.1:rax $96.1:r15 
  # $97.1: @FILE = call(write.338, $94.1, $96.1)
  .loc 1 3557 16
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $94.1
  # [discarded value]: $96.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $97.1:rax 
  # $98.1: @FILE = call(write.341, $97.1, ')')
  .loc 1 3557 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $97.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $98.1:rax 
  # $99.1: @FILE = call(end_line.342, $98.1)
  .loc 1 3557 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $98.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $99.1:rax 
  # return($99.1)
  .loc 1 3557 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $99.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__21:
  # IR_Divide_Instruction.3: @Object_Type = load_variable(IR_Divide_Instruction)
  lea rax, IR_Divide_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Divide_Instruction.3:rax 
  # $100.1: Boolean = call(is.325, instruction.1, IR_Divide_Instruction.3)
  .loc 1 3559 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Divide_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $100.1:rax 
  # jump($100.1, block.23, block.24)
  test al, al
  jz .LABEL__dump_187__24
.LABEL__dump_187__23:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3560 24
  mov rax, [rbp-8]
  # [discarded value]: $100.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $102.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3561 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $102.1:rbx 
  # $103.1: @FILE = call(write.188, file.1, $102.1, false)
  .loc 1 3561 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $102.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $103.1:rax 
  # $104.1: @FILE = call(write.339, $103.1, ": ")
  .loc 1 3561 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $103.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $104.1:rax 
  # $105.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3561 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $104.1:rax $105.1:rbx 
  # $106.1: @IR_Type = load_struct_member($105.1, type)
  .loc 1 3561 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $105.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $104.1:rax $106.1:r15 
  # $107.1: @String = load_struct_member($106.1, name)
  .loc 1 3561 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $106.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $104.1:rax $107.1:rbx 
  # $108.1: @FILE = call(write.339, $104.1, $107.1)
  .loc 1 3561 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $104.1
  # [discarded value]: $107.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $108.1:rax 
  # $109.1: @FILE = call(write.339, $108.1, " = ")
  .loc 1 3561 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $108.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $109.1:rax 
  # $110.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3561 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $109.1:[rbp-32] $110.1:rax 
  # $111.1: @FILE = call(write.188, $109.1, $110.1, true)
  .loc 1 3561 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $109.1
  # [discarded value]: $110.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $111.1:rax 
  # $112.1: @FILE = call(write.339, $111.1, " / ")
  .loc 1 3561 16
  mov rdi, rax
  lea rsi, .LABEL__string_225[rip] # " / "
  call write_339
  # [discarded value]: $111.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $112.1:rax 
  # $113.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3561 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $112.1:[rbp-32] $113.1:rax 
  # $114.1: @FILE = call(write.188, $112.1, $113.1, true)
  .loc 1 3561 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $112.1
  # [discarded value]: $113.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $114.1:rax 
  # $115.1: @FILE = call(end_line.342, $114.1)
  .loc 1 3561 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $114.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $115.1:rax 
  # return($115.1)
  .loc 1 3561 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $115.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__24:
  # IR_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Equals_Comparison_Instruction)
  lea rax, IR_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Equals_Comparison_Instruction.3:rax 
  # $116.1: Boolean = call(is.325, instruction.1, IR_Equals_Comparison_Instruction.3)
  .loc 1 3563 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $116.1:rax 
  # jump($116.1, block.26, block.27)
  test al, al
  jz .LABEL__dump_187__27
.LABEL__dump_187__26:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3564 24
  mov rax, [rbp-8]
  # [discarded value]: $116.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $118.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3565 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $118.1:rbx 
  # $119.1: @FILE = call(write.188, file.1, $118.1, false)
  .loc 1 3565 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $118.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $119.1:rax 
  # $120.1: @FILE = call(write.339, $119.1, ": ")
  .loc 1 3565 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $119.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $120.1:rax 
  # $121.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3565 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $120.1:rax $121.1:rbx 
  # $122.1: @IR_Type = load_struct_member($121.1, type)
  .loc 1 3565 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $121.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $120.1:rax $122.1:r15 
  # $123.1: @String = load_struct_member($122.1, name)
  .loc 1 3565 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $122.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $120.1:rax $123.1:rbx 
  # $124.1: @FILE = call(write.339, $120.1, $123.1)
  .loc 1 3565 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $120.1
  # [discarded value]: $123.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $124.1:rax 
  # $125.1: @FILE = call(write.339, $124.1, " = ")
  .loc 1 3565 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $124.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $125.1:rax 
  # $126.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3565 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $125.1:[rbp-32] $126.1:rax 
  # $127.1: @FILE = call(write.188, $125.1, $126.1, true)
  .loc 1 3565 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $125.1
  # [discarded value]: $126.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $127.1:rax 
  # $128.1: @FILE = call(write.339, $127.1, " == ")
  .loc 1 3565 16
  mov rdi, rax
  lea rsi, .LABEL__string_226[rip] # " == "
  call write_339
  # [discarded value]: $127.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $128.1:rax 
  # $129.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3565 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $128.1:[rbp-32] $129.1:rax 
  # $130.1: @FILE = call(write.188, $128.1, $129.1, true)
  .loc 1 3565 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $128.1
  # [discarded value]: $129.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $130.1:rax 
  # $131.1: @FILE = call(end_line.342, $130.1)
  .loc 1 3565 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $130.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $131.1:rax 
  # return($131.1)
  .loc 1 3565 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $131.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__27:
  # IR_Greater_Than_Comparison_Instruction.3: @Object_Type = load_variable(IR_Greater_Than_Comparison_Instruction)
  lea rax, IR_Greater_Than_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Greater_Than_Comparison_Instruction.3:rax 
  # $132.1: Boolean = call(is.325, instruction.1, IR_Greater_Than_Comparison_Instruction.3)
  .loc 1 3567 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Greater_Than_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $132.1:rax 
  # jump($132.1, block.29, block.30)
  test al, al
  jz .LABEL__dump_187__30
.LABEL__dump_187__29:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3568 24
  mov rax, [rbp-8]
  # [discarded value]: $132.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $134.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3569 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $134.1:rbx 
  # $135.1: @FILE = call(write.188, file.1, $134.1, false)
  .loc 1 3569 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $134.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $135.1:rax 
  # $136.1: @FILE = call(write.339, $135.1, ": ")
  .loc 1 3569 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $135.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $136.1:rax 
  # $137.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3569 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $136.1:rax $137.1:rbx 
  # $138.1: @IR_Type = load_struct_member($137.1, type)
  .loc 1 3569 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $137.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $136.1:rax $138.1:r15 
  # $139.1: @String = load_struct_member($138.1, name)
  .loc 1 3569 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $138.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $136.1:rax $139.1:rbx 
  # $140.1: @FILE = call(write.339, $136.1, $139.1)
  .loc 1 3569 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $136.1
  # [discarded value]: $139.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $140.1:rax 
  # $141.1: @FILE = call(write.339, $140.1, " = ")
  .loc 1 3569 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $140.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $141.1:rax 
  # $142.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3569 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $141.1:[rbp-32] $142.1:rax 
  # $143.1: @FILE = call(write.188, $141.1, $142.1, true)
  .loc 1 3569 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $141.1
  # [discarded value]: $142.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $143.1:rax 
  # $144.1: @FILE = call(write.339, $143.1, " > ")
  .loc 1 3569 16
  mov rdi, rax
  lea rsi, .LABEL__string_227[rip] # " > "
  call write_339
  # [discarded value]: $143.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $144.1:rax 
  # $145.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3569 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $144.1:[rbp-32] $145.1:rax 
  # $146.1: @FILE = call(write.188, $144.1, $145.1, true)
  .loc 1 3569 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $144.1
  # [discarded value]: $145.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $146.1:rax 
  # $147.1: @FILE = call(end_line.342, $146.1)
  .loc 1 3569 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $146.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $147.1:rax 
  # return($147.1)
  .loc 1 3569 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $147.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__30:
  # IR_Greater_Than_Or_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Greater_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Greater_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Greater_Than_Or_Equals_Comparison_Instruction.3:rax 
  # $148.1: Boolean = call(is.325, instruction.1, IR_Greater_Than_Or_Equals_Comparison_Instruction.3)
  .loc 1 3571 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Greater_Than_Or_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $148.1:rax 
  # jump($148.1, block.32, block.33)
  test al, al
  jz .LABEL__dump_187__33
.LABEL__dump_187__32:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3572 24
  mov rax, [rbp-8]
  # [discarded value]: $148.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $150.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3573 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $150.1:rbx 
  # $151.1: @FILE = call(write.188, file.1, $150.1, false)
  .loc 1 3573 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $150.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $151.1:rax 
  # $152.1: @FILE = call(write.339, $151.1, ": ")
  .loc 1 3573 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $151.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $152.1:rax 
  # $153.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3573 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $152.1:rax $153.1:rbx 
  # $154.1: @IR_Type = load_struct_member($153.1, type)
  .loc 1 3573 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $153.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $152.1:rax $154.1:r15 
  # $155.1: @String = load_struct_member($154.1, name)
  .loc 1 3573 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $154.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $152.1:rax $155.1:rbx 
  # $156.1: @FILE = call(write.339, $152.1, $155.1)
  .loc 1 3573 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $152.1
  # [discarded value]: $155.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $156.1:rax 
  # $157.1: @FILE = call(write.339, $156.1, " = ")
  .loc 1 3573 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $156.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $157.1:rax 
  # $158.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3573 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $157.1:[rbp-32] $158.1:rax 
  # $159.1: @FILE = call(write.188, $157.1, $158.1, true)
  .loc 1 3573 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $157.1
  # [discarded value]: $158.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $159.1:rax 
  # $160.1: @FILE = call(write.339, $159.1, " >= ")
  .loc 1 3573 16
  mov rdi, rax
  lea rsi, .LABEL__string_228[rip] # " >= "
  call write_339
  # [discarded value]: $159.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $160.1:rax 
  # $161.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3573 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $160.1:[rbp-32] $161.1:rax 
  # $162.1: @FILE = call(write.188, $160.1, $161.1, true)
  .loc 1 3573 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $160.1
  # [discarded value]: $161.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $162.1:rax 
  # $163.1: @FILE = call(end_line.342, $162.1)
  .loc 1 3573 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $162.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $163.1:rax 
  # return($163.1)
  .loc 1 3573 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $163.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__33:
  # IR_Less_Than_Comparison_Instruction.3: @Object_Type = load_variable(IR_Less_Than_Comparison_Instruction)
  lea rax, IR_Less_Than_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Less_Than_Comparison_Instruction.3:rax 
  # $164.1: Boolean = call(is.325, instruction.1, IR_Less_Than_Comparison_Instruction.3)
  .loc 1 3575 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Less_Than_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $164.1:rax 
  # jump($164.1, block.35, block.36)
  test al, al
  jz .LABEL__dump_187__36
.LABEL__dump_187__35:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3576 24
  mov rax, [rbp-8]
  # [discarded value]: $164.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $166.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3577 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $166.1:rbx 
  # $167.1: @FILE = call(write.188, file.1, $166.1, false)
  .loc 1 3577 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $166.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $167.1:rax 
  # $168.1: @FILE = call(write.339, $167.1, ": ")
  .loc 1 3577 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $167.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $168.1:rax 
  # $169.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3577 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $168.1:rax $169.1:rbx 
  # $170.1: @IR_Type = load_struct_member($169.1, type)
  .loc 1 3577 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $169.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $168.1:rax $170.1:r15 
  # $171.1: @String = load_struct_member($170.1, name)
  .loc 1 3577 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $170.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $168.1:rax $171.1:rbx 
  # $172.1: @FILE = call(write.339, $168.1, $171.1)
  .loc 1 3577 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $168.1
  # [discarded value]: $171.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $172.1:rax 
  # $173.1: @FILE = call(write.339, $172.1, " = ")
  .loc 1 3577 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $172.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $173.1:rax 
  # $174.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3577 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $173.1:[rbp-32] $174.1:rax 
  # $175.1: @FILE = call(write.188, $173.1, $174.1, true)
  .loc 1 3577 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $173.1
  # [discarded value]: $174.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $175.1:rax 
  # $176.1: @FILE = call(write.339, $175.1, " < ")
  .loc 1 3577 16
  mov rdi, rax
  lea rsi, .LABEL__string_229[rip] # " < "
  call write_339
  # [discarded value]: $175.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $176.1:rax 
  # $177.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3577 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $176.1:[rbp-32] $177.1:rax 
  # $178.1: @FILE = call(write.188, $176.1, $177.1, true)
  .loc 1 3577 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $176.1
  # [discarded value]: $177.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $178.1:rax 
  # $179.1: @FILE = call(end_line.342, $178.1)
  .loc 1 3577 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $178.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $179.1:rax 
  # return($179.1)
  .loc 1 3577 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $179.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__36:
  # IR_Less_Than_Or_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Less_Than_Or_Equals_Comparison_Instruction)
  lea rax, IR_Less_Than_Or_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Less_Than_Or_Equals_Comparison_Instruction.3:rax 
  # $180.1: Boolean = call(is.325, instruction.1, IR_Less_Than_Or_Equals_Comparison_Instruction.3)
  .loc 1 3579 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Less_Than_Or_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $180.1:rax 
  # jump($180.1, block.38, block.39)
  test al, al
  jz .LABEL__dump_187__39
.LABEL__dump_187__38:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3580 24
  mov rax, [rbp-8]
  # [discarded value]: $180.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $182.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3581 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $182.1:rbx 
  # $183.1: @FILE = call(write.188, file.1, $182.1, false)
  .loc 1 3581 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $182.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $183.1:rax 
  # $184.1: @FILE = call(write.339, $183.1, ": ")
  .loc 1 3581 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $183.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $184.1:rax 
  # $185.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3581 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $184.1:rax $185.1:rbx 
  # $186.1: @IR_Type = load_struct_member($185.1, type)
  .loc 1 3581 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $185.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $184.1:rax $186.1:r15 
  # $187.1: @String = load_struct_member($186.1, name)
  .loc 1 3581 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $186.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $184.1:rax $187.1:rbx 
  # $188.1: @FILE = call(write.339, $184.1, $187.1)
  .loc 1 3581 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $184.1
  # [discarded value]: $187.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $188.1:rax 
  # $189.1: @FILE = call(write.339, $188.1, " = ")
  .loc 1 3581 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $188.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $189.1:rax 
  # $190.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3581 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $189.1:[rbp-32] $190.1:rax 
  # $191.1: @FILE = call(write.188, $189.1, $190.1, true)
  .loc 1 3581 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $189.1
  # [discarded value]: $190.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $191.1:rax 
  # $192.1: @FILE = call(write.339, $191.1, " <= ")
  .loc 1 3581 16
  mov rdi, rax
  lea rsi, .LABEL__string_230[rip] # " <= "
  call write_339
  # [discarded value]: $191.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $192.1:rax 
  # $193.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3581 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $192.1:[rbp-32] $193.1:rax 
  # $194.1: @FILE = call(write.188, $192.1, $193.1, true)
  .loc 1 3581 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $192.1
  # [discarded value]: $193.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $194.1:rax 
  # $195.1: @FILE = call(end_line.342, $194.1)
  .loc 1 3581 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $194.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $195.1:rax 
  # return($195.1)
  .loc 1 3581 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $195.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__39:
  # IR_Load_Array_Item_Instruction.3: @Object_Type = load_variable(IR_Load_Array_Item_Instruction)
  lea rax, IR_Load_Array_Item_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Array_Item_Instruction.3:rax 
  # $196.1: Boolean = call(is.325, instruction.1, IR_Load_Array_Item_Instruction.3)
  .loc 1 3583 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Array_Item_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $196.1:rax 
  # jump($196.1, block.41, block.42)
  test al, al
  jz .LABEL__dump_187__42
.LABEL__dump_187__41:
  # instruction.1: @IR_Load_Array_Item_Instruction = instruction.1
  .loc 1 3584 24
  mov rax, [rbp-8]
  # [discarded value]: $196.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $198.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3585 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $198.1:rbx 
  # $199.1: @FILE = call(write.188, file.1, $198.1, false)
  .loc 1 3585 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $198.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $199.1:rax 
  # $200.1: @FILE = call(write.339, $199.1, ": ")
  .loc 1 3585 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $199.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $200.1:rax 
  # $201.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3585 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $200.1:rax $201.1:rbx 
  # $202.1: @IR_Type = load_struct_member($201.1, type)
  .loc 1 3585 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $201.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $200.1:rax $202.1:r15 
  # $203.1: @String = load_struct_member($202.1, name)
  .loc 1 3585 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $202.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $200.1:rax $203.1:rbx 
  # $204.1: @FILE = call(write.339, $200.1, $203.1)
  .loc 1 3585 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $200.1
  # [discarded value]: $203.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $204.1:rax 
  # $205.1: @FILE = call(write.339, $204.1, " = ")
  .loc 1 3585 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $204.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $205.1:rax 
  # $206.1: @FILE = call(write.339, $205.1, "load_array_item")
  .loc 1 3585 16
  mov rdi, rax
  lea rsi, .LABEL__string_231[rip] # "load_array_item"
  call write_339
  # [discarded value]: $205.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $206.1:rax 
  # $207.1: @FILE = call(write.341, $206.1, '(')
  .loc 1 3585 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $206.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $207.1:rax 
  # $208.1: @IR_Value = call(get_array_value.159, instruction.1)
  .loc 1 3585 169
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_array_value_159
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $207.1:[rbp-32] $208.1:rax 
  # $209.1: @FILE = call(write.188, $207.1, $208.1, true)
  .loc 1 3585 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $207.1
  # [discarded value]: $208.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $209.1:rax 
  # $210.1: @FILE = call(write.339, $209.1, ", ")
  .loc 1 3585 16
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $209.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $210.1:rax 
  # $211.1: @IR_Value = call(get_index_value.160, instruction.1)
  .loc 1 3585 224
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_index_value_160
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $210.1:[rbp-32] $211.1:rax 
  # $212.1: @FILE = call(write.188, $210.1, $211.1, true)
  .loc 1 3585 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $210.1
  # [discarded value]: $211.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $212.1:rax 
  # $213.1: @FILE = call(write.341, $212.1, ')')
  .loc 1 3585 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $212.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $213.1:rax 
  # $214.1: @FILE = call(end_line.342, $213.1)
  .loc 1 3585 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $213.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $214.1:rax 
  # return($214.1)
  .loc 1 3585 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $214.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__42:
  # IR_Load_Struct_Member_Instruction.3: @Object_Type = load_variable(IR_Load_Struct_Member_Instruction)
  lea rax, IR_Load_Struct_Member_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Struct_Member_Instruction.3:rax 
  # $215.1: Boolean = call(is.325, instruction.1, IR_Load_Struct_Member_Instruction.3)
  .loc 1 3587 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Struct_Member_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $215.1:rax 
  # jump($215.1, block.44, block.45)
  test al, al
  jz .LABEL__dump_187__45
.LABEL__dump_187__44:
  # instruction.1: @IR_Load_Struct_Member_Instruction = instruction.1
  .loc 1 3588 24
  mov rax, [rbp-8]
  # [discarded value]: $215.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $217.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3589 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $217.1:rbx 
  # $218.1: @FILE = call(write.188, file.1, $217.1, false)
  .loc 1 3589 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $217.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $218.1:rax 
  # $219.1: @FILE = call(write.339, $218.1, ": ")
  .loc 1 3589 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $218.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $219.1:rax 
  # $220.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3589 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $219.1:rax $220.1:rbx 
  # $221.1: @IR_Type = load_struct_member($220.1, type)
  .loc 1 3589 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $220.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $219.1:rax $221.1:r15 
  # $222.1: @String = load_struct_member($221.1, name)
  .loc 1 3589 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $221.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $219.1:rax $222.1:rbx 
  # $223.1: @FILE = call(write.339, $219.1, $222.1)
  .loc 1 3589 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $219.1
  # [discarded value]: $222.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $223.1:rax 
  # $224.1: @FILE = call(write.339, $223.1, " = ")
  .loc 1 3589 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $223.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $224.1:rax 
  # $225.1: @FILE = call(write.339, $224.1, "load_struct_member")
  .loc 1 3589 16
  mov rdi, rax
  lea rsi, .LABEL__string_232[rip] # "load_struct_member"
  call write_339
  # [discarded value]: $224.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $225.1:rax 
  # $226.1: @FILE = call(write.341, $225.1, '(')
  .loc 1 3589 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $225.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $226.1:rax 
  # $227.1: @IR_Value = call(get_struct_pointer_value.162, instruction.1)
  .loc 1 3589 172
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_struct_pointer_value_162
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $226.1:[rbp-32] $227.1:rax 
  # $228.1: @FILE = call(write.188, $226.1, $227.1, true)
  .loc 1 3589 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $226.1
  # [discarded value]: $227.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $228.1:rax 
  # $229.1: @FILE = call(write.339, $228.1, ", ")
  .loc 1 3589 16
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $228.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $229.1:rax 
  # $230.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 1 3589 236
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $229.1:rax $230.1:rbx 
  # $231.1: @String = load_struct_member($230.1, name)
  .loc 1 3589 236
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $230.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $229.1:rax $231.1:r15 
  # $232.1: @FILE = call(write.339, $229.1, $231.1)
  .loc 1 3589 16
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $229.1
  # [discarded value]: $231.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $232.1:rax 
  # $233.1: @FILE = call(write.341, $232.1, ')')
  .loc 1 3589 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $232.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $233.1:rax 
  # $234.1: @FILE = call(end_line.342, $233.1)
  .loc 1 3589 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $233.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $234.1:rax 
  # return($234.1)
  .loc 1 3589 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $234.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__45:
  # IR_Load_Variable_Instruction.4: @Object_Type = load_variable(IR_Load_Variable_Instruction)
  lea rax, IR_Load_Variable_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Load_Variable_Instruction.4:rax 
  # $235.1: Boolean = call(is.325, instruction.1, IR_Load_Variable_Instruction.4)
  .loc 1 3591 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Load_Variable_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $235.1:rax 
  # jump($235.1, block.47, block.48)
  test al, al
  jz .LABEL__dump_187__48
.LABEL__dump_187__47:
  # $236.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3592 27
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $235.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $236.1:rax 
  # $237.1: @FILE = call(write.188, file.1, $236.1, false)
  .loc 1 3592 16
  mov rdi, [rbp-16]
  mov rsi, rax
  mov dl, 0
  call write_188
  # [discarded value]: $236.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $237.1:rax 
  # $238.1: @FILE = call(write.339, $237.1, ": ")
  .loc 1 3592 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $237.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $238.1:rax 
  # $239.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3592 78
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $238.1:rax $239.1:rbx 
  # $240.1: @IR_Type = load_struct_member($239.1, type)
  .loc 1 3592 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $239.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $238.1:rax $240.1:r15 
  # $241.1: @String = load_struct_member($240.1, name)
  .loc 1 3592 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $240.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $238.1:rax $241.1:rbx 
  # $242.1: @FILE = call(write.339, $238.1, $241.1)
  .loc 1 3592 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $238.1
  # [discarded value]: $241.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $242.1:rax 
  # $243.1: @FILE = call(write.339, $242.1, " = ")
  .loc 1 3592 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $242.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $243.1:rax 
  # $244.1: @FILE = call(write.339, $243.1, "load_variable")
  .loc 1 3592 16
  mov rdi, rax
  lea rsi, .LABEL__string_233[rip] # "load_variable"
  call write_339
  # [discarded value]: $243.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $244.1:rax 
  # $245.1: @FILE = call(write.341, $244.1, '(')
  .loc 1 3592 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $244.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $245.1:rax 
  # $246.1: @IR_Load_Variable_Instruction = instruction.1
  .loc 1 3592 168
  mov rbx, [rbp-8]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $245.1:rax $246.1:rbx 
  # $247.1: @IR_Variable = load_struct_member($246.1, variable)
  .loc 1 3592 168
  mov r15, rbx
  add r15, 57
  mov r15, [r15]
  # [discarded value]: $246.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $245.1:rax $247.1:r15 
  # $248.1: @String = load_struct_member($247.1, name)
  .loc 1 3592 168
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $247.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $245.1:rax $248.1:rbx 
  # $249.1: @FILE = call(write.339, $245.1, $248.1)
  .loc 1 3592 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $245.1
  # [discarded value]: $248.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $249.1:rax 
  # $250.1: @FILE = call(write.341, $249.1, ')')
  .loc 1 3592 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $249.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $250.1:rax 
  # $251.1: @FILE = call(end_line.342, $250.1)
  .loc 1 3592 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $250.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $251.1:rax 
  # return($251.1)
  .loc 1 3592 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $251.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__48:
  # IR_Modulo_Instruction.3: @Object_Type = load_variable(IR_Modulo_Instruction)
  lea rax, IR_Modulo_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Modulo_Instruction.3:rax 
  # $252.1: Boolean = call(is.325, instruction.1, IR_Modulo_Instruction.3)
  .loc 1 3594 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Modulo_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $252.1:rax 
  # jump($252.1, block.50, block.51)
  test al, al
  jz .LABEL__dump_187__51
.LABEL__dump_187__50:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3595 24
  mov rax, [rbp-8]
  # [discarded value]: $252.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $254.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3596 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $254.1:rbx 
  # $255.1: @FILE = call(write.188, file.1, $254.1, false)
  .loc 1 3596 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $254.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $255.1:rax 
  # $256.1: @FILE = call(write.339, $255.1, ": ")
  .loc 1 3596 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $255.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $256.1:rax 
  # $257.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3596 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $256.1:rax $257.1:rbx 
  # $258.1: @IR_Type = load_struct_member($257.1, type)
  .loc 1 3596 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $257.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $256.1:rax $258.1:r15 
  # $259.1: @String = load_struct_member($258.1, name)
  .loc 1 3596 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $258.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $256.1:rax $259.1:rbx 
  # $260.1: @FILE = call(write.339, $256.1, $259.1)
  .loc 1 3596 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $256.1
  # [discarded value]: $259.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $260.1:rax 
  # $261.1: @FILE = call(write.339, $260.1, " = ")
  .loc 1 3596 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $260.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $261.1:rax 
  # $262.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3596 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $261.1:[rbp-32] $262.1:rax 
  # $263.1: @FILE = call(write.188, $261.1, $262.1, true)
  .loc 1 3596 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $261.1
  # [discarded value]: $262.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $263.1:rax 
  # $264.1: @FILE = call(write.339, $263.1, " // ")
  .loc 1 3596 16
  mov rdi, rax
  lea rsi, .LABEL__string_234[rip] # " // "
  call write_339
  # [discarded value]: $263.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $264.1:rax 
  # $265.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3596 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $264.1:[rbp-32] $265.1:rax 
  # $266.1: @FILE = call(write.188, $264.1, $265.1, true)
  .loc 1 3596 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $264.1
  # [discarded value]: $265.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $266.1:rax 
  # $267.1: @FILE = call(end_line.342, $266.1)
  .loc 1 3596 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $266.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $267.1:rax 
  # return($267.1)
  .loc 1 3596 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $267.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__51:
  # IR_Multiply_Instruction.3: @Object_Type = load_variable(IR_Multiply_Instruction)
  lea rax, IR_Multiply_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Multiply_Instruction.3:rax 
  # $268.1: Boolean = call(is.325, instruction.1, IR_Multiply_Instruction.3)
  .loc 1 3598 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Multiply_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $268.1:rax 
  # jump($268.1, block.53, block.54)
  test al, al
  jz .LABEL__dump_187__54
.LABEL__dump_187__53:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3599 24
  mov rax, [rbp-8]
  # [discarded value]: $268.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $270.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3600 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $270.1:rbx 
  # $271.1: @FILE = call(write.188, file.1, $270.1, false)
  .loc 1 3600 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $270.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $271.1:rax 
  # $272.1: @FILE = call(write.339, $271.1, ": ")
  .loc 1 3600 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $271.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $272.1:rax 
  # $273.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3600 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $272.1:rax $273.1:rbx 
  # $274.1: @IR_Type = load_struct_member($273.1, type)
  .loc 1 3600 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $273.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $272.1:rax $274.1:r15 
  # $275.1: @String = load_struct_member($274.1, name)
  .loc 1 3600 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $274.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $272.1:rax $275.1:rbx 
  # $276.1: @FILE = call(write.339, $272.1, $275.1)
  .loc 1 3600 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $272.1
  # [discarded value]: $275.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $276.1:rax 
  # $277.1: @FILE = call(write.339, $276.1, " = ")
  .loc 1 3600 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $276.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $277.1:rax 
  # $278.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3600 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $277.1:[rbp-32] $278.1:rax 
  # $279.1: @FILE = call(write.188, $277.1, $278.1, true)
  .loc 1 3600 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $277.1
  # [discarded value]: $278.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $279.1:rax 
  # $280.1: @FILE = call(write.339, $279.1, " * ")
  .loc 1 3600 16
  mov rdi, rax
  lea rsi, .LABEL__string_235[rip] # " * "
  call write_339
  # [discarded value]: $279.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $280.1:rax 
  # $281.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3600 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $280.1:[rbp-32] $281.1:rax 
  # $282.1: @FILE = call(write.188, $280.1, $281.1, true)
  .loc 1 3600 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $280.1
  # [discarded value]: $281.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $282.1:rax 
  # $283.1: @FILE = call(end_line.342, $282.1)
  .loc 1 3600 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $282.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $283.1:rax 
  # return($283.1)
  .loc 1 3600 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $283.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__54:
  # IR_New_Instruction.3: @Object_Type = load_variable(IR_New_Instruction)
  lea rax, IR_New_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_New_Instruction.3:rax 
  # $284.1: Boolean = call(is.325, instruction.1, IR_New_Instruction.3)
  .loc 1 3602 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_New_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $284.1:rax 
  # jump($284.1, block.56, block.57)
  test al, al
  jz .LABEL__dump_187__57
.LABEL__dump_187__56:
  # instruction.1: @IR_New_Instruction = instruction.1
  .loc 1 3603 24
  mov rax, [rbp-8]
  # [discarded value]: $284.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $286.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3604 20
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $286.1:rbx 
  # $287.1: @FILE = call(write.188, file.1, $286.1, false)
  .loc 1 3604 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $286.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $287.1:rax 
  # $288.1: @FILE = call(write.339, $287.1, ": ")
  .loc 1 3604 9
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $287.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $288.1:rax 
  # $289.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3604 71
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $288.1:rax $289.1:rbx 
  # $290.1: @IR_Type = load_struct_member($289.1, type)
  .loc 1 3604 71
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $289.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $288.1:rax $290.1:r15 
  # $291.1: @String = load_struct_member($290.1, name)
  .loc 1 3604 71
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $290.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $288.1:rax $291.1:rbx 
  # $292.1: @FILE = call(write.339, $288.1, $291.1)
  .loc 1 3604 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $288.1
  # [discarded value]: $291.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $292.1:rax 
  # $293.1: @FILE = call(write.339, $292.1, " = ")
  .loc 1 3604 9
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $292.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $293.1:rax 
  # $294.1: @FILE = call(write.339, $293.1, "new")
  .loc 1 3604 9
  mov rdi, rax
  lea rsi, .LABEL__string_236[rip] # "new"
  call write_339
  # [discarded value]: $293.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $294.1:rax 
  # $295.1: @FILE = call(write.341, $294.1, '(')
  .loc 1 3604 9
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $294.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $295.1:rax 
  # $296.1: @IR_Type = load_struct_member(instruction.1, type)
  .loc 1 3604 150
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $295.1:rax $296.1:rbx 
  # $297.1: @String = load_struct_member($296.1, name)
  .loc 1 3604 150
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $296.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $295.1:rax $297.1:r15 
  # $298.1: @FILE = call(write.339, $295.1, $297.1)
  .loc 1 3604 9
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $295.1
  # [discarded value]: $297.1
  # [discarded value]: $298.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # $299.1: @IR_Value = call(get_size_value.165, instruction.1)
  .loc 1 3605 13
  mov rdi, [rbp-24]
  call get_size_value_165
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $299.1:rax 
  # $300.1: Boolean = $299.1 != null
  .loc 1 3605 13
  cmp rax, 0
  setne bl
  # [discarded value]: $299.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $300.1:rbx 
  # jump($300.1, block.58, block.59)
  test bl, bl
  jz .LABEL__dump_187__59
.LABEL__dump_187__58:
  # $301.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 3606 13
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $300.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $301.1:rax 
  # $302.1: @IR_Value = call(get_size_value.165, instruction.1)
  .loc 1 3606 36
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_size_value_165
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $301.1:[rbp-32] $302.1:rax 
  # $303.1: @FILE = call(write.188, $301.1, $302.1, true)
  .loc 1 3606 13
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $301.1
  # [discarded value]: $302.1
  # [discarded value]: $303.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # jump(block.59)
.LABEL__dump_187__59:
  # $304.1: @FILE = call(write.341, file.1, ')')
  .loc 1 3608 16
  mov rdi, [rbp-16]
  mov sil, 41
  call write_341
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $304.1:rax 
  # $305.1: @FILE = call(end_line.342, $304.1)
  .loc 1 3608 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $304.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $305.1:rax 
  # return($305.1)
  .loc 1 3608 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $305.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__57:
  # IR_Not_Equals_Comparison_Instruction.3: @Object_Type = load_variable(IR_Not_Equals_Comparison_Instruction)
  lea rax, IR_Not_Equals_Comparison_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Not_Equals_Comparison_Instruction.3:rax 
  # $306.1: Boolean = call(is.325, instruction.1, IR_Not_Equals_Comparison_Instruction.3)
  .loc 1 3610 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Not_Equals_Comparison_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $306.1:rax 
  # jump($306.1, block.61, block.62)
  test al, al
  jz .LABEL__dump_187__62
.LABEL__dump_187__61:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3611 24
  mov rax, [rbp-8]
  # [discarded value]: $306.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $308.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3612 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $308.1:rbx 
  # $309.1: @FILE = call(write.188, file.1, $308.1, false)
  .loc 1 3612 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $308.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $309.1:rax 
  # $310.1: @FILE = call(write.339, $309.1, ": ")
  .loc 1 3612 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $309.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $310.1:rax 
  # $311.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3612 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $310.1:rax $311.1:rbx 
  # $312.1: @IR_Type = load_struct_member($311.1, type)
  .loc 1 3612 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $311.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $310.1:rax $312.1:r15 
  # $313.1: @String = load_struct_member($312.1, name)
  .loc 1 3612 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $312.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $310.1:rax $313.1:rbx 
  # $314.1: @FILE = call(write.339, $310.1, $313.1)
  .loc 1 3612 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $310.1
  # [discarded value]: $313.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $314.1:rax 
  # $315.1: @FILE = call(write.339, $314.1, " = ")
  .loc 1 3612 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $314.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $315.1:rax 
  # $316.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3612 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $315.1:[rbp-32] $316.1:rax 
  # $317.1: @FILE = call(write.188, $315.1, $316.1, true)
  .loc 1 3612 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $315.1
  # [discarded value]: $316.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $317.1:rax 
  # $318.1: @FILE = call(write.339, $317.1, " != ")
  .loc 1 3612 16
  mov rdi, rax
  lea rsi, .LABEL__string_237[rip] # " != "
  call write_339
  # [discarded value]: $317.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $318.1:rax 
  # $319.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3612 189
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $318.1:[rbp-32] $319.1:rax 
  # $320.1: @FILE = call(write.188, $318.1, $319.1, true)
  .loc 1 3612 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $318.1
  # [discarded value]: $319.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $320.1:rax 
  # $321.1: @FILE = call(end_line.342, $320.1)
  .loc 1 3612 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $320.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $321.1:rax 
  # return($321.1)
  .loc 1 3612 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $321.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__62:
  # IR_Phi_Instruction.7: @Object_Type = load_variable(IR_Phi_Instruction)
  lea rax, IR_Phi_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Phi_Instruction.7:rax 
  # $322.1: Boolean = call(is.325, instruction.1, IR_Phi_Instruction.7)
  .loc 1 3614 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Phi_Instruction.7
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $322.1:rax 
  # jump($322.1, block.64, block.65)
  test al, al
  jz .LABEL__dump_187__65
.LABEL__dump_187__64:
  # instruction.1: @IR_Phi_Instruction = instruction.1
  .loc 1 3615 24
  mov rax, [rbp-8]
  # [discarded value]: $322.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $324.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3616 20
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $324.1:rbx 
  # $325.1: @FILE = call(write.188, file.1, $324.1, false)
  .loc 1 3616 9
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $324.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $325.1:rax 
  # $326.1: @FILE = call(write.339, $325.1, ": ")
  .loc 1 3616 9
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $325.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $326.1:rax 
  # $327.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3616 71
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $326.1:rax $327.1:rbx 
  # $328.1: @IR_Type = load_struct_member($327.1, type)
  .loc 1 3616 71
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $327.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $326.1:rax $328.1:r15 
  # $329.1: @String = load_struct_member($328.1, name)
  .loc 1 3616 71
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $328.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $326.1:rax $329.1:rbx 
  # $330.1: @FILE = call(write.339, $326.1, $329.1)
  .loc 1 3616 9
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $326.1
  # [discarded value]: $329.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $330.1:rax 
  # $331.1: @FILE = call(write.339, $330.1, " = ")
  .loc 1 3616 9
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $330.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $331.1:rax 
  # $332.1: @FILE = call(write.339, $331.1, "phi")
  .loc 1 3616 9
  mov rdi, rax
  lea rsi, .LABEL__string_238[rip] # "phi"
  call write_339
  # [discarded value]: $331.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $332.1:rax 
  # $333.1: @FILE = call(write.341, $332.1, '(')
  .loc 1 3616 9
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $332.1
  # [discarded value]: $333.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # $334.1: @List = load_struct_member(instruction.1, values)
  .loc 1 3617 19
  mov rax, [rbp-24]
  add rax, 57
  mov rax, [rax]
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $334.1:rax 
  # values.1: @List_Iterator = call(create_iterator.319, $334.1)
  .loc 1 3617 19
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $334.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:rax 
  # $336.1: Boolean = call(has_next.322, values.1)
  .loc 1 3618 13
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_322
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $336.1:rax 
  # jump($336.1, block.68, block.67)
  test al, al
  jz .LABEL__dump_187__67
.LABEL__dump_187__68:
  # value.1: @IR_Value = call(next.323, values.1)
  .loc 1 3620 26
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $336.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] value.1:rax 
  # $339.1: @FILE = call(write.188, file.1, value.1, true)
  .loc 1 3621 17
  mov rdi, [rbp-16]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: value.1
  # [discarded value]: $339.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # $340.1: Boolean = call(has_next.322, values.1)
  .loc 1 3622 21
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $340.1:rax 
  # jump($340.1, block.70, block.67)
  test al, al
  jz .LABEL__dump_187__67
.LABEL__dump_187__70:
  # $341.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 3623 21
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $340.1
  # [discarded value]: $341.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # jump(block.68)
  jmp .LABEL__dump_187__68
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
.LABEL__dump_187__67:
  # $342.1: @FILE = call(write.341, file.1, ')')
  .loc 1 3629 16
  mov rdi, [rbp-16]
  mov sil, 41
  call write_341
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $342.1:rax 
  # $343.1: @FILE = call(end_line.342, $342.1)
  .loc 1 3629 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $342.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] $343.1:rax 
  # return($343.1)
  .loc 1 3629 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $343.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] values.1:[rbp-24] 
  # [discarded value]: values.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__65:
  # IR_Return_Instruction.4: @Object_Type = load_variable(IR_Return_Instruction)
  lea rax, IR_Return_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Return_Instruction.4:rax 
  # $344.1: Boolean = call(is.325, instruction.1, IR_Return_Instruction.4)
  .loc 1 3631 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Return_Instruction.4
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $344.1:rax 
  # jump($344.1, block.75, block.76)
  test al, al
  jz .LABEL__dump_187__76
.LABEL__dump_187__75:
  # instruction.1: @IR_Return_Instruction = instruction.1
  .loc 1 3632 24
  mov rax, [rbp-8]
  # [discarded value]: $344.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $346.1: @IR_Value = call(get_return_value.167, instruction.1)
  .loc 1 3633 13
  mov rdi, rax
  mov [rbp-24], rax
  call get_return_value_167
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $346.1:rax 
  # $347.1: Boolean = $346.1 == null
  .loc 1 3633 13
  cmp rax, 0
  sete bl
  # [discarded value]: $346.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $347.1:rbx 
  # jump($347.1, block.77, block.78)
  test bl, bl
  jz .LABEL__dump_187__78
.LABEL__dump_187__77:
  # $348.1: @FILE = call(write.339, file.1, "return")
  .loc 1 3634 20
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_239[rip] # "return"
  call write_339
  # [discarded value]: $347.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $348.1:rax 
  # $349.1: @FILE = call(write.341, $348.1, '(')
  .loc 1 3634 20
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $348.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $349.1:rax 
  # $350.1: @FILE = call(write.341, $349.1, ')')
  .loc 1 3634 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $349.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $350.1:rax 
  # $351.1: @FILE = call(end_line.342, $350.1)
  .loc 1 3634 20
  mov rdi, rax
  call end_line_342
  # [discarded value]: $350.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $351.1:rax 
  # return($351.1)
  .loc 1 3634 13
  jmp .LABEL__dump_187__end
  # [discarded value]: $351.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
.LABEL__dump_187__78:
  # $352.1: @FILE = call(write.339, file.1, "return")
  .loc 1 3636 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_239[rip] # "return"
  call write_339
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $352.1:rax 
  # $353.1: @FILE = call(write.341, $352.1, '(')
  .loc 1 3636 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $352.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $353.1:rax 
  # $354.1: @IR_Value = call(get_return_value.167, instruction.1)
  .loc 1 3636 54
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_return_value_167
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $353.1:[rbp-32] $354.1:rax 
  # $355.1: @FILE = call(write.188, $353.1, $354.1, true)
  .loc 1 3636 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $353.1
  # [discarded value]: $354.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $355.1:rax 
  # $356.1: @FILE = call(write.341, $355.1, ')')
  .loc 1 3636 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $355.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $356.1:rax 
  # $357.1: @FILE = call(end_line.342, $356.1)
  .loc 1 3636 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $356.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $357.1:rax 
  # return($357.1)
  .loc 1 3636 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $357.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] 
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__76:
  # IR_Set_Instruction.5: @Object_Type = load_variable(IR_Set_Instruction)
  lea rax, IR_Set_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Set_Instruction.5:rax 
  # $358.1: Boolean = call(is.325, instruction.1, IR_Set_Instruction.5)
  .loc 1 3638 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Set_Instruction.5
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $358.1:rax 
  # jump($358.1, block.81, block.82)
  test al, al
  jz .LABEL__dump_187__82
.LABEL__dump_187__81:
  # instruction.1: @IR_Set_Instruction = instruction.1
  .loc 1 3639 24
  mov rax, [rbp-8]
  # [discarded value]: $358.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $360.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3640 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $360.1:rbx 
  # $361.1: @FILE = call(write.188, file.1, $360.1, false)
  .loc 1 3640 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $360.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $361.1:rax 
  # $362.1: @FILE = call(write.339, $361.1, ": ")
  .loc 1 3640 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $361.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $362.1:rax 
  # $363.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3640 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $362.1:rax $363.1:rbx 
  # $364.1: @IR_Type = load_struct_member($363.1, type)
  .loc 1 3640 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $363.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $362.1:rax $364.1:r15 
  # $365.1: @String = load_struct_member($364.1, name)
  .loc 1 3640 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $364.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $362.1:rax $365.1:rbx 
  # $366.1: @FILE = call(write.339, $362.1, $365.1)
  .loc 1 3640 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $362.1
  # [discarded value]: $365.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $366.1:rax 
  # $367.1: @FILE = call(write.339, $366.1, " = ")
  .loc 1 3640 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $366.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $367.1:rax 
  # $368.1: @IR_Value = call(get_value.169, instruction.1)
  .loc 1 3640 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_169
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $367.1:[rbp-32] $368.1:rax 
  # $369.1: @FILE = call(write.188, $367.1, $368.1, true)
  .loc 1 3640 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $367.1
  # [discarded value]: $368.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $369.1:rax 
  # $370.1: @FILE = call(end_line.342, $369.1)
  .loc 1 3640 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $369.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $370.1:rax 
  # return($370.1)
  .loc 1 3640 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $370.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__82:
  # IR_Store_Array_Item_Instruction.3: @Object_Type = load_variable(IR_Store_Array_Item_Instruction)
  lea rax, IR_Store_Array_Item_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Store_Array_Item_Instruction.3:rax 
  # $371.1: Boolean = call(is.325, instruction.1, IR_Store_Array_Item_Instruction.3)
  .loc 1 3642 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Store_Array_Item_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $371.1:rax 
  # jump($371.1, block.84, block.85)
  test al, al
  jz .LABEL__dump_187__85
.LABEL__dump_187__84:
  # instruction.1: @IR_Store_Array_Item_Instruction = instruction.1
  .loc 1 3643 24
  mov rax, [rbp-8]
  # [discarded value]: $371.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $373.1: @FILE = call(write.339, file.1, "store_array_item")
  .loc 1 3644 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_240[rip] # "store_array_item"
  mov [rbp-24], rax
  call write_339
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $373.1:rax 
  # $374.1: @FILE = call(write.341, $373.1, '(')
  .loc 1 3644 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $373.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $374.1:rax 
  # $375.1: @IR_Value = call(get_array_value.171, instruction.1)
  .loc 1 3644 64
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_array_value_171
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $374.1:[rbp-32] $375.1:rax 
  # $376.1: @FILE = call(write.188, $374.1, $375.1, true)
  .loc 1 3644 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $374.1
  # [discarded value]: $375.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $376.1:rax 
  # $377.1: @FILE = call(write.339, $376.1, ", ")
  .loc 1 3644 16
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $376.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $377.1:rax 
  # $378.1: @IR_Value = call(get_index_value.172, instruction.1)
  .loc 1 3644 119
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_index_value_172
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $377.1:[rbp-32] $378.1:rax 
  # $379.1: @FILE = call(write.188, $377.1, $378.1, true)
  .loc 1 3644 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $377.1
  # [discarded value]: $378.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $379.1:rax 
  # $380.1: @FILE = call(write.339, $379.1, ", ")
  .loc 1 3644 16
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $379.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $380.1:rax 
  # $381.1: @IR_Value = call(get_value.173, instruction.1)
  .loc 1 3644 174
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_173
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $380.1:[rbp-32] $381.1:rax 
  # $382.1: @FILE = call(write.188, $380.1, $381.1, true)
  .loc 1 3644 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $380.1
  # [discarded value]: $381.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $382.1:rax 
  # $383.1: @FILE = call(write.341, $382.1, ')')
  .loc 1 3644 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $382.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $383.1:rax 
  # $384.1: @FILE = call(end_line.342, $383.1)
  .loc 1 3644 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $383.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $384.1:rax 
  # return($384.1)
  .loc 1 3644 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $384.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__85:
  # IR_Store_Struct_Member_Instruction.3: @Object_Type = load_variable(IR_Store_Struct_Member_Instruction)
  lea rax, IR_Store_Struct_Member_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Store_Struct_Member_Instruction.3:rax 
  # $385.1: Boolean = call(is.325, instruction.1, IR_Store_Struct_Member_Instruction.3)
  .loc 1 3646 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Store_Struct_Member_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $385.1:rax 
  # jump($385.1, block.87, block.88)
  test al, al
  jz .LABEL__dump_187__88
.LABEL__dump_187__87:
  # instruction.1: @IR_Store_Struct_Member_Instruction = instruction.1
  .loc 1 3647 24
  mov rax, [rbp-8]
  # [discarded value]: $385.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $387.1: @FILE = call(write.339, file.1, "store_struct_member")
  .loc 1 3648 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_241[rip] # "store_struct_member"
  mov [rbp-24], rax
  call write_339
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $387.1:rax 
  # $388.1: @FILE = call(write.341, $387.1, '(')
  .loc 1 3648 16
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $387.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $388.1:rax 
  # $389.1: @IR_Value = call(get_struct_pointer_value.175, instruction.1)
  .loc 1 3648 67
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_struct_pointer_value_175
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $388.1:[rbp-32] $389.1:rax 
  # $390.1: @FILE = call(write.188, $388.1, $389.1, true)
  .loc 1 3648 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $388.1
  # [discarded value]: $389.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $390.1:rax 
  # $391.1: @FILE = call(write.339, $390.1, ", ")
  .loc 1 3648 16
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $390.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $391.1:rax 
  # $392.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  .loc 1 3648 131
  mov rbx, [rbp-24]
  add rbx, 57
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $391.1:rax $392.1:rbx 
  # $393.1: @String = load_struct_member($392.1, name)
  .loc 1 3648 131
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $392.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $391.1:rax $393.1:r15 
  # $394.1: @FILE = call(write.339, $391.1, $393.1)
  .loc 1 3648 16
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $391.1
  # [discarded value]: $393.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $394.1:rax 
  # $395.1: @FILE = call(write.339, $394.1, ", ")
  .loc 1 3648 16
  mov rdi, rax
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $394.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $395.1:rax 
  # $396.1: @IR_Value = call(get_value.176, instruction.1)
  .loc 1 3648 186
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_value_176
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $395.1:[rbp-32] $396.1:rax 
  # $397.1: @FILE = call(write.188, $395.1, $396.1, true)
  .loc 1 3648 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $395.1
  # [discarded value]: $396.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $397.1:rax 
  # $398.1: @FILE = call(write.341, $397.1, ')')
  .loc 1 3648 16
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $397.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $398.1:rax 
  # $399.1: @FILE = call(end_line.342, $398.1)
  .loc 1 3648 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $398.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $399.1:rax 
  # return($399.1)
  .loc 1 3648 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $399.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__88:
  # IR_Substract_Instruction.3: @Object_Type = load_variable(IR_Substract_Instruction)
  lea rax, IR_Substract_Instruction[rip]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] IR_Substract_Instruction.3:rax 
  # $400.1: Boolean = call(is.325, instruction.1, IR_Substract_Instruction.3)
  .loc 1 3650 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Substract_Instruction.3
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $400.1:rax 
  # jump($400.1, block.90, block.91)
  test al, al
  jz .LABEL__dump_187__91
.LABEL__dump_187__90:
  # instruction.1: @IR_Binary_Instruction = instruction.1
  .loc 1 3651 24
  mov rax, [rbp-8]
  # [discarded value]: $400.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax 
  # $402.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3652 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:rax $402.1:rbx 
  # $403.1: @FILE = call(write.188, file.1, $402.1, false)
  .loc 1 3652 16
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  mov [rbp-24], rax
  call write_188
  # [discarded value]: $402.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $403.1:rax 
  # $404.1: @FILE = call(write.339, $403.1, ": ")
  .loc 1 3652 16
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $403.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $404.1:rax 
  # $405.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  .loc 1 3652 78
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $404.1:rax $405.1:rbx 
  # $406.1: @IR_Type = load_struct_member($405.1, type)
  .loc 1 3652 78
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $405.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $404.1:rax $406.1:r15 
  # $407.1: @String = load_struct_member($406.1, name)
  .loc 1 3652 78
  mov rbx, r15
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $406.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $404.1:rax $407.1:rbx 
  # $408.1: @FILE = call(write.339, $404.1, $407.1)
  .loc 1 3652 16
  mov rdi, rax
  mov rsi, rbx
  call write_339
  # [discarded value]: $404.1
  # [discarded value]: $407.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $408.1:rax 
  # $409.1: @FILE = call(write.339, $408.1, " = ")
  .loc 1 3652 16
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $408.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $409.1:rax 
  # $410.1: @IR_Value = call(get_left_value.178, instruction.1)
  .loc 1 3652 133
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_left_value_178
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $409.1:[rbp-32] $410.1:rax 
  # $411.1: @FILE = call(write.188, $409.1, $410.1, true)
  .loc 1 3652 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $409.1
  # [discarded value]: $410.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $411.1:rax 
  # $412.1: @FILE = call(write.339, $411.1, " - ")
  .loc 1 3652 16
  mov rdi, rax
  lea rsi, .LABEL__string_242[rip] # " - "
  call write_339
  # [discarded value]: $411.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] instruction.1:[rbp-24] $412.1:rax 
  # $413.1: @IR_Value = call(get_right_value.179, instruction.1)
  .loc 1 3652 188
  mov rdi, [rbp-24]
  mov [rbp-32], rax
  call get_right_value_179
  # [discarded value]: instruction.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $412.1:[rbp-32] $413.1:rax 
  # $414.1: @FILE = call(write.188, $412.1, $413.1, true)
  .loc 1 3652 16
  mov rdi, [rbp-32]
  mov rsi, rax
  mov dl, 1
  call write_188
  # [discarded value]: $412.1
  # [discarded value]: $413.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $414.1:rax 
  # $415.1: @FILE = call(end_line.342, $414.1)
  .loc 1 3652 16
  mov rdi, rax
  call end_line_342
  # [discarded value]: $414.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $415.1:rax 
  # return($415.1)
  .loc 1 3652 9
  jmp .LABEL__dump_187__end
  # [discarded value]: $415.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
.LABEL__dump_187__91:
  # $416.1: @String = call(clone.329, "Unsupported type: ")
  .loc 1 3654 11
  lea rdi, .LABEL__string_145[rip] # "Unsupported type: "
  call clone_329
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $416.1:rax 
  # $417.1: @Object_Type = load_struct_member(instruction.1, object_type)
  .loc 1 3654 46
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $416.1:rax $417.1:rbx 
  # $418.1: @String = load_struct_member($417.1, name)
  .loc 1 3654 46
  mov r15, rbx
  add r15, 8
  # [discarded value]: $417.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $416.1:rax $418.1:r15 
  # $419.1: @String = call(append.332, $416.1, $418.1)
  .loc 1 3654 11
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $416.1
  # [discarded value]: $418.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] $419.1:rax 
  # call(abort.344, $419.1)
  .loc 1 3654 5
  mov rdi, rax
  call abort_344
  # [discarded value]: $419.1
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [live values]: instruction.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_187__end:
  mov rsp, rbp
  pop rbp
  ret

dump_187__stack_frame_size: .word 32

  .loc 1 3657 1
  .text
write_188:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_188__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_188__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: file.1:rdi value.1:rsi 
  # $1.1: Boolean = load_variable(check_users)
  # [live values]: file.1:rdi value.1:rsi $1.1:rdx 
  # jump($1.1, block.2, block.3)
  test dl, dl
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_188__3
.LABEL__write_188__2:
  # $2.1: @List = load_struct_member(value.1, user_instructions)
  .loc 1 3658 24
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  # $3.1: Int = load_struct_member($2.1, size)
  .loc 1 3658 24
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $3.1:rbx 
  # $1.2: Boolean = $3.1 == 0
  .loc 1 3658 24
  cmp rbx, 0
  sete al
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:rax[rbp-1] 
  # jump(block.3)
  mov [rbp-1], al
.LABEL__write_188__3:
  # $1.3: Boolean = phi($1.1, $1.2)
  .loc 1 3658 9
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # jump($1.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__write_188__5
.LABEL__write_188__4:
  # $5.1: @FILE = call(flush.343, file.1)
  .loc 1 3659 9
  mov rdi, [rbp-17]
  call flush_343
  # [discarded value]: $1.3
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # IR_Variable_Value.10: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Variable_Value.10:rax 
  # $6.1: Boolean = call(is.325, value.1, IR_Variable_Value.10)
  .loc 1 3660 13
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.10
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $6.1:rax 
  # jump($6.1, block.6, block.5)
  test al, al
  jz .LABEL__write_188__5
.LABEL__write_188__6:
  # value.1: @IR_Variable_Value = value.1
  .loc 1 3661 22
  mov rax, [rbp-9]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:rax 
  # value_version.1: Int = load_struct_member(value.1, version)
  .loc 1 3662 30
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:rax value_version.1:rbx 
  # stderr.4: @FILE = load_variable(stderr)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:rax value_version.1:rbx stderr.4:stderr[rip] 
  # $9.1: @FILE = call(end_line.342, stderr.4)
  .loc 1 3663 13
  mov rdi, stderr[rip]
  mov [rbp-25], rax
  mov [rbp-33], rbx
  call end_line_342
  # [discarded value]: stderr.4
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value.1:[rbp-25] value_version.1:[rbp-33] $9.1:rax 
  # $10.1: @IR_Variable = load_struct_member(value.1, variable)
  .loc 1 3663 37
  mov rbx, [rbp-25]
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $9.1:rax $10.1:rbx 
  # $11.1: @String = load_struct_member($10.1, name)
  .loc 1 3663 37
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $9.1:rax $11.1:r15 
  # $12.1: @FILE = call(write.339, $9.1, $11.1)
  .loc 1 3663 13
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $9.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $12.1:rax 
  # $13.1: @FILE = call(write.339, $12.1, ".")
  .loc 1 3663 13
  mov rdi, rax
  lea rsi, .LABEL__string_243[rip] # "."
  call write_339
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] value_version.1:[rbp-33] $13.1:rax 
  # $14.1: @FILE = call(write.338, $13.1, value_version.1)
  .loc 1 3663 13
  mov rdi, rax
  mov rsi, [rbp-33]
  call write_338
  # [discarded value]: value_version.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $14.1:rax 
  # $15.1: @FILE = call(end_line.342, $14.1)
  .loc 1 3663 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # jump(block.5)
.LABEL__write_188__5:
  # IR_Constant_Value.30: @Object_Type = load_variable(IR_Constant_Value)
  lea rax, IR_Constant_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Constant_Value.30:rax 
  # $16.1: Boolean = call(is.325, value.1, IR_Constant_Value.30)
  .loc 1 3667 9
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Constant_Value.30
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $16.1:rax 
  # jump($16.1, block.8, block.9)
  test al, al
  jz .LABEL__write_188__9
.LABEL__write_188__8:
  # $17.1: @IR_Constant_Value = value.1
  .loc 1 3668 28
  mov rax, [rbp-9]
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $17.1:rax 
  # $18.1: @Literal_Token = load_struct_member($17.1, literal)
  .loc 1 3668 28
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $18.1:rbx 
  # $19.1: @String = load_struct_member($18.1, lexeme)
  .loc 1 3668 28
  mov rax, rbx
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $19.1:rax 
  # $20.1: @FILE = call(write.339, file.1, $19.1)
  .loc 1 3668 16
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_339
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $20.1:rax 
  # return($20.1)
  .loc 1 3668 9
  jmp .LABEL__write_188__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
.LABEL__write_188__9:
  # IR_Variable_Value.11: @Object_Type = load_variable(IR_Variable_Value)
  lea rax, IR_Variable_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Variable_Value.11:rax 
  # $21.1: Boolean = call(is.325, value.1, IR_Variable_Value.11)
  .loc 1 3670 9
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Variable_Value.11
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $21.1:rax 
  # jump($21.1, block.11, block.12)
  test al, al
  jz .LABEL__write_188__12
.LABEL__write_188__11:
  # $22.1: @IR_Variable_Value = value.1
  .loc 1 3671 28
  mov rax, [rbp-9]
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $22.1:rax 
  # $23.1: @IR_Variable = load_struct_member($22.1, variable)
  .loc 1 3671 28
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $23.1:rbx 
  # $24.1: @String = load_struct_member($23.1, name)
  .loc 1 3671 28
  mov rax, rbx
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $24.1:rax 
  # $25.1: @FILE = call(write.339, file.1, $24.1)
  .loc 1 3671 16
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_339
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $25.1:rax 
  # $26.1: @FILE = call(write.341, $25.1, '.')
  .loc 1 3671 16
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $26.1:rax 
  # $27.1: @IR_Variable_Value = value.1
  .loc 1 3671 90
  mov rbx, [rbp-9]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $26.1:rax $27.1:rbx 
  # $28.1: Int = load_struct_member($27.1, version)
  .loc 1 3671 90
  mov r15, rbx
  add r15, 32
  mov r15, [r15]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $26.1:rax $28.1:r15 
  # $29.1: @FILE = call(write.338, $26.1, $28.1)
  .loc 1 3671 16
  mov rdi, rax
  mov rsi, r15
  call write_338
  # [discarded value]: $26.1
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $29.1:rax 
  # return($29.1)
  .loc 1 3671 9
  jmp .LABEL__write_188__end
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
.LABEL__write_188__12:
  # IR_Undefined_Value.4: @Object_Type = load_variable(IR_Undefined_Value)
  lea rax, IR_Undefined_Value[rip]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] IR_Undefined_Value.4:rax 
  # $30.1: Boolean = call(is.325, value.1, IR_Undefined_Value.4)
  .loc 1 3673 9
  mov rdi, [rbp-9]
  mov rsi, rax
  call is_325
  # [discarded value]: IR_Undefined_Value.4
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $30.1:rax 
  # jump($30.1, block.14, block.15)
  test al, al
  jz .LABEL__write_188__15
.LABEL__write_188__14:
  # $31.1: @FILE = call(write.339, file.1, "undefined")
  .loc 1 3674 16
  mov rdi, [rbp-17]
  lea rsi, .LABEL__string_244[rip] # "undefined"
  call write_339
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $31.1:rax 
  # return($31.1)
  .loc 1 3674 9
  jmp .LABEL__write_188__end
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
.LABEL__write_188__15:
  # $32.1: @String = call(clone.329, "Unsupported type: ")
  .loc 1 3676 11
  lea rdi, .LABEL__string_145[rip] # "Unsupported type: "
  call clone_329
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $32.1:rax 
  # $33.1: @Object_Type = load_struct_member(value.1, object_type)
  .loc 1 3676 46
  mov rbx, [rbp-9]
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $32.1:rax $33.1:rbx 
  # $34.1: @String = load_struct_member($33.1, name)
  .loc 1 3676 46
  mov r15, rbx
  add r15, 8
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $32.1:rax $34.1:r15 
  # $35.1: @String = call(append.332, $32.1, $34.1)
  .loc 1 3676 11
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $32.1
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $35.1:rax 
  # call(abort.344, $35.1)
  .loc 1 3676 5
  mov rdi, rax
  call abort_344
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [discarded value]: $1.2
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: file.1
  # [discarded value]: value.1
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__write_188__end:
  mov rsp, rbp
  pop rbp
  ret

write_188__stack_frame_size: .word 48

  .loc 1 3729 1
  .text
create_parser_189:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_parser_189__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_parser_189__1:
  # parser.1: @Parser = new(Parser)
  .loc 1 3730 15
  mov rdi, 344
  call malloc
  # [live values]: parser.1:rax 
  # store_struct_member(parser.1, scanner, null)
  .loc 1 3731 5
  mov rbx, rax
  mov QWORD PTR [rbx], 0
  # [live values]: parser.1:rax 
  # $2.1: @Compilation_Unit = call(create_compilation_unit.240)
  .loc 1 3732 31
  mov [rbp-8], rax
  call create_compilation_unit_240
  # [live values]: parser.1:[rbp-8] $2.1:rax 
  # store_struct_member(parser.1, compilation_unit, $2.1)
  .loc 1 3732 5
  mov rbx, [rbp-8]
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: parser.1:[rbp-8] 
  # store_struct_member(parser.1, current_alignment, 0)
  .loc 1 3733 5
  mov rax, [rbp-8]
  add rax, 16
  mov QWORD PTR [rax], 0
  # [live values]: parser.1:[rbp-8] 
  # $3.1: @Comment_Matcher = call(create_comment_matcher.230, false)
  .loc 1 3735 31
  mov dil, 0
  call create_comment_matcher_230
  # [live values]: parser.1:[rbp-8] $3.1:rax 
  # store_struct_member(parser.1, optional_comment, $3.1)
  .loc 1 3735 5
  mov rbx, [rbp-8]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: parser.1:[rbp-8] 
  # $4.1: @Space_Matcher = call(create_space_matcher.238, false)
  .loc 1 3736 29
  mov dil, 0
  call create_space_matcher_238
  # [live values]: parser.1:[rbp-8] $4.1:rax 
  # store_struct_member(parser.1, optional_space, $4.1)
  .loc 1 3736 5
  mov rbx, [rbp-8]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $4.1
  # [live values]: parser.1:[rbp-8] 
  # $5.1: @Other_Matcher = call(create_other_matcher.237, true, "&")
  .loc 1 3738 33
  mov dil, 1
  lea rsi, .LABEL__string_245[rip] # "&"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $5.1:rax 
  # store_struct_member(parser.1, required_ampersand, $5.1)
  .loc 1 3738 5
  mov rbx, [rbp-8]
  add rbx, 40
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: parser.1:[rbp-8] 
  # $6.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "as")
  .loc 1 3739 26
  mov dil, 1
  lea rsi, .LABEL__string_246[rip] # "as"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $6.1:rax 
  # store_struct_member(parser.1, required_as, $6.1)
  .loc 1 3739 5
  mov rbx, [rbp-8]
  add rbx, 48
  mov QWORD PTR [rbx], rax
  # [discarded value]: $6.1
  # [live values]: parser.1:[rbp-8] 
  # $7.1: @Other_Matcher = call(create_other_matcher.237, true, "*")
  .loc 1 3740 32
  mov dil, 1
  lea rsi, .LABEL__string_247[rip] # "*"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $7.1:rax 
  # store_struct_member(parser.1, required_asterisk, $7.1)
  .loc 1 3740 5
  mov rbx, [rbp-8]
  add rbx, 56
  mov QWORD PTR [rbx], rax
  # [discarded value]: $7.1
  # [live values]: parser.1:[rbp-8] 
  # $8.1: @Other_Matcher = call(create_other_matcher.237, true, "@")
  .loc 1 3741 26
  mov dil, 1
  lea rsi, .LABEL__string_207[rip] # "@"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $8.1:rax 
  # store_struct_member(parser.1, required_at, $8.1)
  .loc 1 3741 5
  mov rbx, [rbp-8]
  add rbx, 64
  mov QWORD PTR [rbx], rax
  # [discarded value]: $8.1
  # [live values]: parser.1:[rbp-8] 
  # $9.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "break")
  .loc 1 3742 29
  mov dil, 1
  lea rsi, .LABEL__string_248[rip] # "break"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $9.1:rax 
  # store_struct_member(parser.1, required_break, $9.1)
  .loc 1 3742 5
  mov rbx, [rbp-8]
  add rbx, 72
  mov QWORD PTR [rbx], rax
  # [discarded value]: $9.1
  # [live values]: parser.1:[rbp-8] 
  # $10.1: @Other_Matcher = call(create_other_matcher.237, true, "}")
  .loc 1 3743 35
  mov dil, 1
  lea rsi, .LABEL__string_249[rip] # "}"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $10.1:rax 
  # store_struct_member(parser.1, required_close_brace, $10.1)
  .loc 1 3743 5
  mov rbx, [rbp-8]
  add rbx, 80
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: parser.1:[rbp-8] 
  # $11.1: @Other_Matcher = call(create_other_matcher.237, true, "]")
  .loc 1 3744 37
  mov dil, 1
  lea rsi, .LABEL__string_209[rip] # "]"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $11.1:rax 
  # store_struct_member(parser.1, required_close_bracket, $11.1)
  .loc 1 3744 5
  mov rbx, [rbp-8]
  add rbx, 88
  mov QWORD PTR [rbx], rax
  # [discarded value]: $11.1
  # [live values]: parser.1:[rbp-8] 
  # $12.1: @Other_Matcher = call(create_other_matcher.237, true, ")")
  .loc 1 3745 35
  mov dil, 1
  lea rsi, .LABEL__string_167[rip] # ")"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $12.1:rax 
  # store_struct_member(parser.1, required_close_paren, $12.1)
  .loc 1 3745 5
  mov rbx, [rbp-8]
  add rbx, 96
  mov QWORD PTR [rbx], rax
  # [discarded value]: $12.1
  # [live values]: parser.1:[rbp-8] 
  # $13.1: @Other_Matcher = call(create_other_matcher.237, true, ":")
  .loc 1 3746 29
  mov dil, 1
  lea rsi, .LABEL__string_24[rip] # ":"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $13.1:rax 
  # store_struct_member(parser.1, required_colon, $13.1)
  .loc 1 3746 5
  mov rbx, [rbp-8]
  add rbx, 104
  mov QWORD PTR [rbx], rax
  # [discarded value]: $13.1
  # [live values]: parser.1:[rbp-8] 
  # $14.1: @Other_Matcher = call(create_other_matcher.237, true, ";")
  .loc 1 3747 30
  mov dil, 1
  lea rsi, .LABEL__string_250[rip] # ";"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $14.1:rax 
  # store_struct_member(parser.1, required_column, $14.1)
  .loc 1 3747 5
  mov rbx, [rbp-8]
  add rbx, 112
  mov QWORD PTR [rbx], rax
  # [discarded value]: $14.1
  # [live values]: parser.1:[rbp-8] 
  # $15.1: @Other_Matcher = call(create_other_matcher.237, true, ",")
  .loc 1 3748 29
  mov dil, 1
  lea rsi, .LABEL__string_251[rip] # ","
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $15.1:rax 
  # store_struct_member(parser.1, required_comma, $15.1)
  .loc 1 3748 5
  mov rbx, [rbp-8]
  add rbx, 120
  mov QWORD PTR [rbx], rax
  # [discarded value]: $15.1
  # [live values]: parser.1:[rbp-8] 
  # $16.1: @Comment_Matcher = call(create_comment_matcher.230, true)
  .loc 1 3749 31
  mov dil, 1
  call create_comment_matcher_230
  # [live values]: parser.1:[rbp-8] $16.1:rax 
  # store_struct_member(parser.1, required_comment, $16.1)
  .loc 1 3749 5
  mov rbx, [rbp-8]
  add rbx, 128
  mov QWORD PTR [rbx], rax
  # [discarded value]: $16.1
  # [live values]: parser.1:[rbp-8] 
  # $17.1: @Other_Matcher = call(create_other_matcher.237, true, ".")
  .loc 1 3750 27
  mov dil, 1
  lea rsi, .LABEL__string_243[rip] # "."
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $17.1:rax 
  # store_struct_member(parser.1, required_dot, $17.1)
  .loc 1 3750 5
  mov rbx, [rbp-8]
  add rbx, 136
  mov QWORD PTR [rbx], rax
  # [discarded value]: $17.1
  # [live values]: parser.1:[rbp-8] 
  # $18.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "else")
  .loc 1 3751 28
  mov dil, 1
  lea rsi, .LABEL__string_252[rip] # "else"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $18.1:rax 
  # store_struct_member(parser.1, required_else, $18.1)
  .loc 1 3751 5
  mov rbx, [rbp-8]
  add rbx, 144
  mov QWORD PTR [rbx], rax
  # [discarded value]: $18.1
  # [live values]: parser.1:[rbp-8] 
  # $19.1: @End_Of_File_Matcher = call(create_end_of_file_matcher.231, true)
  .loc 1 3752 35
  mov dil, 1
  call create_end_of_file_matcher_231
  # [live values]: parser.1:[rbp-8] $19.1:rax 
  # store_struct_member(parser.1, required_end_of_file, $19.1)
  .loc 1 3752 5
  mov rbx, [rbp-8]
  add rbx, 152
  mov QWORD PTR [rbx], rax
  # [discarded value]: $19.1
  # [live values]: parser.1:[rbp-8] 
  # $20.1: @End_Of_Line_Matcher = call(create_end_of_line_matcher.232, true)
  .loc 1 3753 35
  mov dil, 1
  call create_end_of_line_matcher_232
  # [live values]: parser.1:[rbp-8] $20.1:rax 
  # store_struct_member(parser.1, required_end_of_line, $20.1)
  .loc 1 3753 5
  mov rbx, [rbp-8]
  add rbx, 160
  mov QWORD PTR [rbx], rax
  # [discarded value]: $20.1
  # [live values]: parser.1:[rbp-8] 
  # $21.1: @Other_Matcher = call(create_other_matcher.237, true, "=")
  .loc 1 3754 30
  mov dil, 1
  lea rsi, .LABEL__string_253[rip] # "="
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $21.1:rax 
  # store_struct_member(parser.1, required_equals, $21.1)
  .loc 1 3754 5
  mov rbx, [rbp-8]
  add rbx, 168
  mov QWORD PTR [rbx], rax
  # [discarded value]: $21.1
  # [live values]: parser.1:[rbp-8] 
  # $22.1: @Other_Matcher = call(create_other_matcher.237, true, "!")
  .loc 1 3755 40
  mov dil, 1
  lea rsi, .LABEL__string_254[rip] # "!"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $22.1:rax 
  # store_struct_member(parser.1, required_exclamation_mark, $22.1)
  .loc 1 3755 5
  mov rbx, [rbp-8]
  add rbx, 176
  mov QWORD PTR [rbx], rax
  # [discarded value]: $22.1
  # [live values]: parser.1:[rbp-8] 
  # $23.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "external")
  .loc 1 3756 32
  mov dil, 1
  lea rsi, .LABEL__string_255[rip] # "external"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $23.1:rax 
  # store_struct_member(parser.1, required_external, $23.1)
  .loc 1 3756 5
  mov rbx, [rbp-8]
  add rbx, 184
  mov QWORD PTR [rbx], rax
  # [discarded value]: $23.1
  # [live values]: parser.1:[rbp-8] 
  # $24.1: @Other_Matcher = call(create_other_matcher.237, true, ">")
  .loc 1 3757 36
  mov dil, 1
  lea rsi, .LABEL__string_256[rip] # ">"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $24.1:rax 
  # store_struct_member(parser.1, required_greater_than, $24.1)
  .loc 1 3757 5
  mov rbx, [rbp-8]
  add rbx, 192
  mov QWORD PTR [rbx], rax
  # [discarded value]: $24.1
  # [live values]: parser.1:[rbp-8] 
  # $25.1: @Other_Matcher = call(create_other_matcher.237, true, "-")
  .loc 1 3758 30
  mov dil, 1
  lea rsi, .LABEL__string_257[rip] # "-"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $25.1:rax 
  # store_struct_member(parser.1, required_hyphen, $25.1)
  .loc 1 3758 5
  mov rbx, [rbp-8]
  add rbx, 200
  mov QWORD PTR [rbx], rax
  # [discarded value]: $25.1
  # [live values]: parser.1:[rbp-8] 
  # $26.1: @Identifier_Matcher = call(create_identifier_matcher.233, true)
  .loc 1 3759 34
  mov dil, 1
  call create_identifier_matcher_233
  # [live values]: parser.1:[rbp-8] $26.1:rax 
  # store_struct_member(parser.1, required_identifier, $26.1)
  .loc 1 3759 5
  mov rbx, [rbp-8]
  add rbx, 208
  mov QWORD PTR [rbx], rax
  # [discarded value]: $26.1
  # [live values]: parser.1:[rbp-8] 
  # $27.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "if")
  .loc 1 3760 26
  mov dil, 1
  lea rsi, .LABEL__string_258[rip] # "if"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $27.1:rax 
  # store_struct_member(parser.1, required_if, $27.1)
  .loc 1 3760 5
  mov rbx, [rbp-8]
  add rbx, 216
  mov QWORD PTR [rbx], rax
  # [discarded value]: $27.1
  # [live values]: parser.1:[rbp-8] 
  # $28.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "include")
  .loc 1 3761 31
  mov dil, 1
  lea rsi, .LABEL__string_259[rip] # "include"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $28.1:rax 
  # store_struct_member(parser.1, required_include, $28.1)
  .loc 1 3761 5
  mov rbx, [rbp-8]
  add rbx, 224
  mov QWORD PTR [rbx], rax
  # [discarded value]: $28.1
  # [live values]: parser.1:[rbp-8] 
  # $29.1: @Other_Matcher = call(create_other_matcher.237, true, "<")
  .loc 1 3762 33
  mov dil, 1
  lea rsi, .LABEL__string_260[rip] # "<"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $29.1:rax 
  # store_struct_member(parser.1, required_less_than, $29.1)
  .loc 1 3762 5
  mov rbx, [rbp-8]
  add rbx, 232
  mov QWORD PTR [rbx], rax
  # [discarded value]: $29.1
  # [live values]: parser.1:[rbp-8] 
  # $30.1: @Literal_Matcher = call(create_literal_matcher.235, true)
  .loc 1 3763 31
  mov dil, 1
  call create_literal_matcher_235
  # [live values]: parser.1:[rbp-8] $30.1:rax 
  # store_struct_member(parser.1, required_literal, $30.1)
  .loc 1 3763 5
  mov rbx, [rbp-8]
  add rbx, 240
  mov QWORD PTR [rbx], rax
  # [discarded value]: $30.1
  # [live values]: parser.1:[rbp-8] 
  # $31.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "loop")
  .loc 1 3764 28
  mov dil, 1
  lea rsi, .LABEL__string_261[rip] # "loop"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $31.1:rax 
  # store_struct_member(parser.1, required_loop, $31.1)
  .loc 1 3764 5
  mov rbx, [rbp-8]
  add rbx, 248
  mov QWORD PTR [rbx], rax
  # [discarded value]: $31.1
  # [live values]: parser.1:[rbp-8] 
  # $32.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "new")
  .loc 1 3765 27
  mov dil, 1
  lea rsi, .LABEL__string_236[rip] # "new"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $32.1:rax 
  # store_struct_member(parser.1, required_new, $32.1)
  .loc 1 3765 5
  mov rbx, [rbp-8]
  add rbx, 256
  mov QWORD PTR [rbx], rax
  # [discarded value]: $32.1
  # [live values]: parser.1:[rbp-8] 
  # $33.1: @Other_Matcher = call(create_other_matcher.237, true, "{")
  .loc 1 3766 34
  mov dil, 1
  lea rsi, .LABEL__string_262[rip] # "{"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $33.1:rax 
  # store_struct_member(parser.1, required_open_brace, $33.1)
  .loc 1 3766 5
  mov rbx, [rbp-8]
  add rbx, 264
  mov QWORD PTR [rbx], rax
  # [discarded value]: $33.1
  # [live values]: parser.1:[rbp-8] 
  # $34.1: @Other_Matcher = call(create_other_matcher.237, true, "[")
  .loc 1 3767 36
  mov dil, 1
  lea rsi, .LABEL__string_208[rip] # "["
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $34.1:rax 
  # store_struct_member(parser.1, required_open_bracket, $34.1)
  .loc 1 3767 5
  mov rbx, [rbp-8]
  add rbx, 272
  mov QWORD PTR [rbx], rax
  # [discarded value]: $34.1
  # [live values]: parser.1:[rbp-8] 
  # $35.1: @Other_Matcher = call(create_other_matcher.237, true, "(")
  .loc 1 3768 34
  mov dil, 1
  lea rsi, .LABEL__string_263[rip] # "("
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $35.1:rax 
  # store_struct_member(parser.1, required_open_paren, $35.1)
  .loc 1 3768 5
  mov rbx, [rbp-8]
  add rbx, 280
  mov QWORD PTR [rbx], rax
  # [discarded value]: $35.1
  # [live values]: parser.1:[rbp-8] 
  # $36.1: @Other_Matcher = call(create_other_matcher.237, true, "+")
  .loc 1 3769 28
  mov dil, 1
  lea rsi, .LABEL__string_264[rip] # "+"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $36.1:rax 
  # store_struct_member(parser.1, required_plus, $36.1)
  .loc 1 3769 5
  mov rbx, [rbp-8]
  add rbx, 288
  mov QWORD PTR [rbx], rax
  # [discarded value]: $36.1
  # [live values]: parser.1:[rbp-8] 
  # $37.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "return")
  .loc 1 3770 30
  mov dil, 1
  lea rsi, .LABEL__string_239[rip] # "return"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $37.1:rax 
  # store_struct_member(parser.1, required_return, $37.1)
  .loc 1 3770 5
  mov rbx, [rbp-8]
  add rbx, 296
  mov QWORD PTR [rbx], rax
  # [discarded value]: $37.1
  # [live values]: parser.1:[rbp-8] 
  # $38.1: @Other_Matcher = call(create_other_matcher.237, true, "/")
  .loc 1 3771 29
  mov dil, 1
  lea rsi, .LABEL__string_265[rip] # "/"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $38.1:rax 
  # store_struct_member(parser.1, required_slash, $38.1)
  .loc 1 3771 5
  mov rbx, [rbp-8]
  add rbx, 304
  mov QWORD PTR [rbx], rax
  # [discarded value]: $38.1
  # [live values]: parser.1:[rbp-8] 
  # $39.1: @String_Literal_Matcher = call(create_string_literal_matcher.236, true)
  .loc 1 3772 38
  mov dil, 1
  call create_string_literal_matcher_236
  # [live values]: parser.1:[rbp-8] $39.1:rax 
  # store_struct_member(parser.1, required_string_literal, $39.1)
  .loc 1 3772 5
  mov rbx, [rbp-8]
  add rbx, 312
  mov QWORD PTR [rbx], rax
  # [discarded value]: $39.1
  # [live values]: parser.1:[rbp-8] 
  # $40.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "struct")
  .loc 1 3773 30
  mov dil, 1
  lea rsi, .LABEL__string_266[rip] # "struct"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $40.1:rax 
  # store_struct_member(parser.1, required_struct, $40.1)
  .loc 1 3773 5
  mov rbx, [rbp-8]
  add rbx, 320
  mov QWORD PTR [rbx], rax
  # [discarded value]: $40.1
  # [live values]: parser.1:[rbp-8] 
  # $41.1: @Other_Matcher = call(create_other_matcher.237, true, "|")
  .loc 1 3774 36
  mov dil, 1
  lea rsi, .LABEL__string_267[rip] # "|"
  call create_other_matcher_237
  # [live values]: parser.1:[rbp-8] $41.1:rax 
  # store_struct_member(parser.1, required_vertical_bar, $41.1)
  .loc 1 3774 5
  mov rbx, [rbp-8]
  add rbx, 328
  mov QWORD PTR [rbx], rax
  # [discarded value]: $41.1
  # [live values]: parser.1:[rbp-8] 
  # $42.1: @Keyword_Matcher = call(create_keyword_matcher.234, true, "while")
  .loc 1 3775 29
  mov dil, 1
  lea rsi, .LABEL__string_268[rip] # "while"
  call create_keyword_matcher_234
  # [live values]: parser.1:[rbp-8] $42.1:rax 
  # store_struct_member(parser.1, required_while, $42.1)
  .loc 1 3775 5
  mov rbx, [rbp-8]
  add rbx, 336
  mov QWORD PTR [rbx], rax
  # [discarded value]: $42.1
  # [live values]: parser.1:[rbp-8] 
  # return(parser.1)
  .loc 1 3777 5
  mov rax, [rbp-8]
  jmp .LABEL__create_parser_189__end
  # [discarded value]: parser.1
  # [live values]: 
.LABEL__create_parser_189__end:
  mov rsp, rbp
  pop rbp
  ret

create_parser_189__stack_frame_size: .word 16

  .loc 1 3780 1
  .text
parse_190:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_190__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_190__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # parser.1: @Parser = call(create_parser.189)
  .loc 1 3781 15
  mov [rbp-8], rdi
  call create_parser_189
  # [live values]: file_path.1:[rbp-8] parser.1:rax 
  # call(parse.191, parser.1, file_path.1)
  .loc 1 3782 5
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call parse_191
  # [discarded value]: file_path.1
  # [live values]: parser.1:[rbp-16] 
  # $2.1: @Compilation_Unit = load_struct_member(parser.1, compilation_unit)
  .loc 1 3783 12
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: parser.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 3783 5
  jmp .LABEL__parse_190__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__parse_190__end:
  mov rsp, rbp
  pop rbp
  ret

parse_190__stack_frame_size: .word 16

  .loc 1 3786 1
  .text
parse_191:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_191__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_191__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # file_path.1: @String = load_variable(file_path)
  # [live values]: self.1:rdi file_path.1:rsi 
  # source.1: @Source = call(create_source.306, file_path.1)
  .loc 1 3787 15
  mov [rbp-8], rdi
  mov rdi, rsi
  call create_source_306
  # [discarded value]: file_path.1
  # [live values]: self.1:[rbp-8] source.1:rax 
  # $2.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 3788 5
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] source.1:rax $2.1:rbx 
  # $3.1: @List = load_struct_member($2.1, sources)
  .loc 1 3788 5
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] source.1:rax $3.1:r15 
  # call(append.308, $3.1, source.1)
  .loc 1 3788 5
  mov rdi, r15
  mov rsi, rax
  mov [rbp-16], rax
  call append_308
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] source.1:[rbp-16] 
  # $4.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 3789 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] source.1:[rbp-16] $4.1:rax 
  # $5.1: @List = load_struct_member($4.1, sources)
  .loc 1 3789 17
  mov rbx, rax
  mov rbx, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] source.1:[rbp-16] $5.1:rbx 
  # $6.1: Int = load_struct_member($5.1, size)
  .loc 1 3789 17
  mov rax, rbx
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] source.1:[rbp-16] $6.1:rax 
  # store_struct_member(source.1, id, $6.1)
  .loc 1 3789 5
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] source.1:[rbp-16] 
  # other_scanner.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 3791 22
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] source.1:[rbp-16] other_scanner.1:rax 
  # $8.1: @Scanner = call(create_scanner.272, source.1)
  .loc 1 3792 20
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call create_scanner_272
  # [discarded value]: source.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $8.1:rax 
  # store_struct_member(self.1, scanner, $8.1)
  .loc 1 3792 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] 
  # $9.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 3793 27
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $9.1:rax 
  # $10.1: @List = load_struct_member($9.1, statements)
  .loc 1 3793 27
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $10.1:rbx 
  # call(parse_statements.192, self.1, $10.1)
  .loc 1 3793 5
  mov rdi, [rbp-8]
  mov rsi, rbx
  call parse_statements_192
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] 
  # $11.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 3794 9
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $11.1:rax 
  # $12.1: @Token = load_struct_member($11.1, current_token)
  .loc 1 3794 9
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $12.1:rbx 
  # End_Of_File_Token.2: @Object_Type = load_variable(End_Of_File_Token)
  lea rax, End_Of_File_Token[rip]
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $12.1:rbx End_Of_File_Token.2:rax 
  # $13.1: Boolean = call(is.325, $12.1, End_Of_File_Token.2)
  .loc 1 3794 9
  mov rdi, rbx
  mov rsi, rax
  call is_325
  # [discarded value]: $12.1
  # [discarded value]: End_Of_File_Token.2
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $13.1:rax 
  # $14.1: Boolean = $13.1 == false
  .loc 1 3794 9
  cmp al, 0
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $14.1:rbx 
  # jump($14.1, block.2, block.3)
  test bl, bl
  jz .LABEL__parse_191__3
.LABEL__parse_191__2:
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 3795 21
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $15.1:rax 
  # $16.1: @Token = load_struct_member($15.1, current_token)
  .loc 1 3795 21
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] $16.1:rbx 
  # call(abort.219, self.1, $16.1)
  .loc 1 3795 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  call abort_219
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] 
.LABEL__parse_191__3:
  # store_struct_member(self.1, scanner, other_scanner.1)
  .loc 1 3798 5
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-8] other_scanner.1:rbx[rbp-24] 
  # return()
  jmp .LABEL__parse_191__end
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] other_scanner.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: other_scanner.1
  # [live values]: 
.LABEL__parse_191__end:
  mov rsp, rbp
  pop rbp
  ret

parse_191__stack_frame_size: .word 32

  .loc 1 3803 1
  .text
parse_statements_192:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statements_192__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statements_192__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # statements.1: @List = load_variable(statements)
  # [live values]: self.1:rdi statements.1:rsi 
  # jump(block.2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__parse_statements_192__2:
  # statement.1: @AST_Statement = call(parse_statement.195, self.1)
  .loc 1 3805 22
  mov rdi, [rbp-16]
  call parse_statement_195
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax 
  # $2.1: Boolean = statement.1 == null
  .loc 1 3806 13
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax $2.1:rbx 
  # jump($2.1, block.3, block.5)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__parse_statements_192__5
.LABEL__parse_statements_192__3:
  # return()
  jmp .LABEL__parse_statements_192__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
.LABEL__parse_statements_192__5:
  # call(consume_end_of_line.220, self.1)
  .loc 1 3809 9
  mov rdi, [rbp-16]
  call consume_end_of_line_220
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # AST_Include_Statement.2: @Object_Type = load_variable(AST_Include_Statement)
  lea rax, AST_Include_Statement[rip]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] AST_Include_Statement.2:rax 
  # $3.1: Boolean = call(is.325, statement.1, AST_Include_Statement.2)
  .loc 1 3810 13
  mov rdi, [rbp-24]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Include_Statement.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_statements_192__9
.LABEL__parse_statements_192__7:
  # statement.1: @AST_Include_Statement = statement.1
  .loc 1 3811 26
  mov rax, [rbp-24]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax 
  # $5.1: @String = load_struct_member(statement.1, file_path)
  .loc 1 3813 36
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement.1:rax $5.1:rbx 
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 3813 75
  mov r15, rax
  add r15, 8
  mov r15, [r15]
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $5.1:rbx $6.1:r15 
  # $7.1: @Source = load_struct_member($6.1, source)
  .loc 1 3813 75
  mov rax, r15
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $5.1:rbx $7.1:rax 
  # $8.1: @String = load_struct_member($7.1, file_path)
  .loc 1 3813 75
  mov r15, rax
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $5.1:rbx $8.1:r15 
  # statement_file_path.1: @String = call(make_relative_path.194, $5.1, $8.1)
  .loc 1 3813 36
  mov rdi, rbx
  mov rsi, r15
  call make_relative_path_194
  # [discarded value]: $5.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:rax 
  # $10.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 3815 46
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:rax $10.1:rbx 
  # $11.1: @List = load_struct_member($10.1, sources)
  .loc 1 3815 46
  mov r15, rbx
  mov r15, [r15]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:rax $11.1:r15 
  # compilation_unit_sources_item.1: @List_Item = load_struct_member($11.1, first_item)
  .loc 1 3815 46
  mov rbx, r15
  mov rbx, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:rax compilation_unit_sources_item.1:rbx 
  # jump(block.10)
  mov [rbp-32], rax
  mov [rbp-40], rbx
.LABEL__parse_statements_192__10:
  # compilation_unit_sources_item.2: @List_Item = phi(compilation_unit_sources_item.1, compilation_unit_sources_item.5)
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
  # $13.1: Boolean = compilation_unit_sources_item.2 != null
  .loc 1 3816 20
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] $13.1:rax 
  # jump($13.1, block.11, block.12)
  test al, al
  jz .LABEL__parse_statements_192__12
.LABEL__parse_statements_192__11:
  # $15.1: @Source = load_struct_member(compilation_unit_sources_item.2, data)
  .loc 1 3817 22
  mov rax, [rbp-40]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] $15.1:rax 
  # $16.1: @String = load_struct_member($15.1, file_path)
  .loc 1 3817 22
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] $16.1:rbx 
  # $17.1: Boolean = call(equals.335, $16.1, statement_file_path.1)
  .loc 1 3817 22
  mov rdi, rbx
  mov rsi, [rbp-32]
  call equals_335
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] $17.1:rax 
  # jump($17.1, block.12, block.14)
  test al, al
  jz .LABEL__parse_statements_192__14
.LABEL__parse_statements_192__12:
  # $19.1: Boolean = compilation_unit_sources_item.2 == null
  .loc 1 3823 17
  cmp QWORD PTR [rbp-40], 0
  sete al
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] $19.1:rax 
  # jump($19.1, block.16, block.2)
  test al, al
  jz .LABEL__parse_statements_192__2
.LABEL__parse_statements_192__16:
  # call(parse.191, self.1, statement_file_path.1)
  .loc 1 3824 17
  mov rdi, [rbp-16]
  mov rsi, [rbp-32]
  call parse_191
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
  # jump(block.2)
  jmp .LABEL__parse_statements_192__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
.LABEL__parse_statements_192__14:
  # compilation_unit_sources_item.5: @List_Item = load_struct_member(compilation_unit_sources_item.2, next_item)
  .loc 1 3820 49
  mov rax, [rbp-40]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] compilation_unit_sources_item.5:rax[rbp-40] 
  # jump(block.10)
  mov [rbp-40], rax
  jmp .LABEL__parse_statements_192__10
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] compilation_unit_sources_item.5:[rbp-40] 
  # [discarded value]: compilation_unit_sources_item.5
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] compilation_unit_sources_item.2:[rbp-40] 
  # [discarded value]: compilation_unit_sources_item.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] statement_file_path.1:[rbp-32] compilation_unit_sources_item.1:[rbp-40] 
  # [discarded value]: statement_file_path.1
  # [discarded value]: compilation_unit_sources_item.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
.LABEL__parse_statements_192__9:
  # call(append.308, statements.1, statement.1)
  .loc 1 3827 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call append_308
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # jump(block.2)
  jmp .LABEL__parse_statements_192__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: statements.1
  # [live values]: 
.LABEL__parse_statements_192__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statements_192__stack_frame_size: .word 48

  .loc 1 3832 1
  .text
make_parent_path_193:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR make_parent_path_193__stack_frame_size[rip]
  sub rsp, rax
.LABEL__make_parent_path_193__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # $1.1: Int = load_struct_member(file_path.1, length)
  .loc 1 3833 18
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: file_path.1:rdi $1.1:rax 
  # end_index.1: Int = $1.1 - 1
  .loc 1 3833 18
  mov rbx, rax
  sub rbx, 1
  # [discarded value]: $1.1
  # [live values]: file_path.1:rdi end_index.1:rbx 
  # jump(block.2)
  mov [rbp-8], rbx
  mov [rbp-16], rdi
.LABEL__make_parent_path_193__2:
  # end_index.2: Int = phi(end_index.1, end_index.5)
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] 
  # $4.1: Boolean = end_index.2 > 0
  .loc 1 3834 12
  cmp QWORD PTR [rbp-8], 0
  setg al
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:rax 
  # jump($4.1, block.5, block.6)
  test al, al
  mov [rbp-17], al
  jz .LABEL__make_parent_path_193__6
.LABEL__make_parent_path_193__5:
  # $5.1: @Int8 = load_struct_member(file_path.1, data)
  .loc 1 3834 29
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $5.1:rax 
  # $6.1: Int8 = load_array_item($5.1, end_index.2)
  .loc 1 3834 29
  mov rbx, rax
  mov r15, [rbp-8]
  add rbx, r15
  mov bl, [rbx]
  # [discarded value]: $5.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $6.1:rbx 
  # $4.2: Boolean = $6.1 != '/'
  .loc 1 3834 29
  cmp bl, 47
  setne al
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $4.2:rax[rbp-17] 
  # jump(block.6)
  mov [rbp-17], al
.LABEL__make_parent_path_193__6:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 1 3834 12
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $4.2:[rbp-17] $4.3:[rbp-17] 
  # jump($4.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__make_parent_path_193__4
.LABEL__make_parent_path_193__3:
  # end_index.5: Int = end_index.2 - 1
  .loc 1 3835 21
  mov rax, [rbp-8]
  sub rax, 1
  # [discarded value]: $4.3
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] end_index.5:rax[rbp-8] $4.2:[rbp-17] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__make_parent_path_193__2
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] end_index.5:[rbp-8] $4.2:[rbp-17] 
  # [discarded value]: end_index.5
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $4.2:[rbp-17] 
.LABEL__make_parent_path_193__4:
  # $9.1: @String = new(String)
  .loc 1 3837 20
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $9.1:rax $4.2:[rbp-17] 
  # parent_path.1: @String = call(init.326, $9.1)
  .loc 1 3837 20
  mov rdi, rax
  call init_326
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:rax $4.2:[rbp-17] 
  # $11.1: Boolean = end_index.2 > 0
  .loc 1 3838 9
  cmp QWORD PTR [rbp-8], 0
  setg bl
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:rax $11.1:rbx $4.2:[rbp-17] 
  # jump($11.1, block.7, block.8)
  test bl, bl
  mov [rbp-25], rax
  jz .LABEL__make_parent_path_193__8
.LABEL__make_parent_path_193__7:
  # index.1: Int = 0
  .loc 1 3839 9
  xor rax, rax
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:rax 
  # jump(block.9)
  mov [rbp-33], rax
.LABEL__make_parent_path_193__9:
  # index.2: Int = phi(index.1, index.4)
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] 
  # $12.1: Boolean = index.2 < end_index.2
  .loc 1 3840 16
  mov rax, [rbp-33]
  cmp rax, QWORD PTR [rbp-8]
  setl bl
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:rax[rbp-33] $12.1:rbx 
  # jump($12.1, block.10, block.8)
  test bl, bl
  mov [rbp-33], rax
  jz .LABEL__make_parent_path_193__8
.LABEL__make_parent_path_193__10:
  # $13.1: @Int8 = load_struct_member(file_path.1, data)
  .loc 1 3841 32
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] $13.1:rax 
  # $14.1: Int8 = load_array_item($13.1, index.2)
  .loc 1 3841 32
  mov rbx, rax
  mov r15, [rbp-33]
  add rbx, r15
  mov bl, [rbx]
  # [discarded value]: $13.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] $14.1:rbx 
  # $15.1: @String = call(append.330, parent_path.1, $14.1)
  .loc 1 3841 13
  mov rdi, [rbp-25]
  mov sil, bl
  call append_330
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] 
  # index.4: Int = index.2 + 1
  .loc 1 3842 21
  mov rax, [rbp-33]
  add rax, 1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] index.4:rax[rbp-33] 
  # jump(block.9)
  mov [rbp-33], rax
  jmp .LABEL__make_parent_path_193__9
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] index.4:[rbp-33] 
  # [discarded value]: index.4
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] 
.LABEL__make_parent_path_193__8:
  # return(parent_path.1)
  .loc 1 3845 5
  mov rax, [rbp-25]
  jmp .LABEL__make_parent_path_193__end
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] index.2:[rbp-33] 
  # [discarded value]: index.2
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] index.1:[rbp-33] 
  # [discarded value]: index.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] parent_path.1:[rbp-25] $4.2:[rbp-17] 
  # [discarded value]: parent_path.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $4.2:[rbp-17] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $4.2:[rbp-17] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] $4.2:[rbp-17] 
  # [discarded value]: $4.2
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] end_index.2:[rbp-8] $4.1:[rbp-17] 
  # [discarded value]: end_index.2
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] 
  # [live values]: file_path.1:[rbp-16] end_index.1:[rbp-8] 
  # [discarded value]: file_path.1
  # [discarded value]: end_index.1
  # [live values]: 
.LABEL__make_parent_path_193__end:
  mov rsp, rbp
  pop rbp
  ret

make_parent_path_193__stack_frame_size: .word 48

  .loc 1 3848 1
  .text
make_relative_path_194:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR make_relative_path_194__stack_frame_size[rip]
  sub rsp, rax
.LABEL__make_relative_path_194__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # base_file_path.1: @String = load_variable(base_file_path)
  # [live values]: file_path.1:rdi base_file_path.1:rsi 
  # $1.1: Boolean = call(starts_with.333, file_path.1, "./")
  .loc 1 3849 9
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_269[rip] # "./"
  mov [rbp-16], rdi
  call starts_with_333
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__make_relative_path_194__3
.LABEL__make_relative_path_194__2:
  # relative_path.1: @String = call(make_parent_path.193, base_file_path.1)
  .loc 1 3850 26
  mov rdi, [rbp-8]
  call make_parent_path_193
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:rax 
  # index.1: Int = 1
  .loc 1 3851 9
  mov rbx, 1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:rax index.1:rbx 
  # jump(block.4)
  mov [rbp-24], rax
  mov [rbp-32], rbx
.LABEL__make_relative_path_194__4:
  # index.2: Int = phi(index.1, index.4)
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] 
  # $3.1: Int = load_struct_member(file_path.1, length)
  .loc 1 3852 24
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] $3.1:rax 
  # $4.1: Boolean = index.2 < $3.1
  .loc 1 3852 16
  cmp QWORD PTR [rbp-32], rax
  setl bl
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] $4.1:rbx 
  # jump($4.1, block.5, block.6)
  test bl, bl
  jz .LABEL__make_relative_path_194__6
.LABEL__make_relative_path_194__5:
  # $5.1: @Int8 = load_struct_member(file_path.1, data)
  .loc 1 3853 34
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] $5.1:rax 
  # $6.1: Int8 = load_array_item($5.1, index.2)
  .loc 1 3853 34
  mov rbx, rax
  mov r15, [rbp-32]
  add rbx, r15
  mov bl, [rbx]
  # [discarded value]: $5.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] $6.1:rbx 
  # $7.1: @String = call(append.330, relative_path.1, $6.1)
  .loc 1 3853 13
  mov rdi, [rbp-24]
  mov sil, bl
  call append_330
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] 
  # index.4: Int = index.2 + 1
  .loc 1 3854 21
  mov rax, [rbp-32]
  add rax, 1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] index.4:rax[rbp-32] 
  # jump(block.4)
  mov [rbp-32], rax
  jmp .LABEL__make_relative_path_194__4
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] index.4:[rbp-32] 
  # [discarded value]: index.4
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] 
.LABEL__make_relative_path_194__6:
  # return(relative_path.1)
  .loc 1 3856 9
  mov rax, [rbp-24]
  jmp .LABEL__make_relative_path_194__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] index.2:[rbp-32] 
  # [discarded value]: index.2
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] relative_path.1:[rbp-24] index.1:[rbp-32] 
  # [discarded value]: relative_path.1
  # [discarded value]: index.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
.LABEL__make_relative_path_194__3:
  # $9.1: @String = call(clone.329, "Unsupported file path: ")
  .loc 1 3858 11
  lea rdi, .LABEL__string_270[rip] # "Unsupported file path: "
  call clone_329
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $9.1:rax 
  # $10.1: @String = call(append.332, $9.1, file_path.1)
  .loc 1 3858 11
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_332
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $10.1:rax 
  # call(abort.344, $10.1)
  .loc 1 3858 5
  mov rdi, rax
  call abort_344
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [discarded value]: file_path.1
  # [discarded value]: base_file_path.1
  # [live values]: 
.LABEL__make_relative_path_194__end:
  mov rsp, rbp
  pop rbp
  ret

make_relative_path_194__stack_frame_size: .word 32

  .loc 1 3868 1
  .text
parse_statement_195:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statement_195__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statement_195__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(block.2)
  mov [rbp-8], rdi
.LABEL__parse_statement_195__2:
  # $1.1: Boolean = call(consume_empty_line.221, self.1)
  .loc 1 3869 12
  mov rdi, [rbp-8]
  call consume_empty_line_221
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.4)
  test al, al
  jnz .LABEL__parse_statement_195__2
.LABEL__parse_statement_195__4:
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3872 22
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_close_brace)
  .loc 1 3872 43
  mov rbx, [rbp-8]
  add rbx, 80
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $2.1:rax $3.1:rbx 
  # $5.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 3872 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.6, block.5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_statement_195__5
.LABEL__parse_statement_195__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 1 3872 9
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $5.3:[rbp-9] 
  # jump($5.3, block.7, block.8)
  mov al, [rbp-9]
  test al, al
  jz .LABEL__parse_statement_195__8
.LABEL__parse_statement_195__7:
  # return(null)
  .loc 1 3873 9
  xor rax, rax
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__8:
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 3876 24
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $8.1:rax 
  # $9.1: Int = $8.1 * 4
  .loc 1 3876 24
  mov rbx, rax
  imul rbx, 4
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $9.1:rbx 
  # call(consume_space.222, self.1, $9.1)
  .loc 1 3876 5
  mov rdi, [rbp-8]
  mov rsi, rbx
  call consume_space_222
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # $10.1: @Matcher = load_struct_member(self.1, required_if)
  .loc 1 3878 22
  mov rax, [rbp-8]
  add rax, 216
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $10.1:rax 
  # $11.1: Boolean = call(matches.227, self.1, $10.1)
  .loc 1 3878 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $11.1:rax 
  # jump($11.1, block.10, block.11)
  test al, al
  jz .LABEL__parse_statement_195__11
.LABEL__parse_statement_195__10:
  # $12.1: @AST_Statement = call(parse_if.203, self.1)
  .loc 1 3879 16
  mov rdi, [rbp-8]
  call parse_if_203
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $12.1:rax 
  # return($12.1)
  .loc 1 3879 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__11:
  # $13.1: @Matcher = load_struct_member(self.1, required_return)
  .loc 1 3881 22
  mov rax, [rbp-8]
  add rax, 296
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $13.1:rax 
  # $14.1: Boolean = call(matches.227, self.1, $13.1)
  .loc 1 3881 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $14.1:rax 
  # jump($14.1, block.13, block.14)
  test al, al
  jz .LABEL__parse_statement_195__14
.LABEL__parse_statement_195__13:
  # $15.1: @Matcher = load_struct_member(self.1, required_return)
  .loc 1 3882 31
  mov rax, [rbp-8]
  add rax, 296
  mov rax, [rax]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $15.1:rax 
  # token.1: @Token = call(consume.223, self.1, $15.1)
  .loc 1 3882 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax 
  # value_expression.1: @AST_Expression = null
  .loc 1 3883 9
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax value_expression.1:rbx 
  # $17.1: Boolean = call(matches_end_of_line.226, self.1)
  .loc 1 3884 13
  mov rdi, [rbp-8]
  mov [rbp-17], rax
  mov [rbp-25], rbx
  call matches_end_of_line_226
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] $17.1:rax 
  # $18.1: Boolean = $17.1 == false
  .loc 1 3884 13
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] $18.1:rbx 
  # jump($18.1, block.15, block.16)
  test bl, bl
  jz .LABEL__parse_statement_195__16
.LABEL__parse_statement_195__15:
  # call(consume_space.222, self.1, 1)
  .loc 1 3885 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] 
  # value_expression.2: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 3886 32
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:rax[rbp-25] 
  # jump(block.16)
  mov [rbp-25], rax
.LABEL__parse_statement_195__16:
  # value_expression.3: @AST_Expression = phi(value_expression.1, value_expression.2)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] value_expression.3:[rbp-25] 
  # $20.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 3888 44
  mov rax, [rbp-17]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] value_expression.3:[rbp-25] $20.1:rax 
  # $21.1: @AST_Return_Statement = call(create_ast_return_statement.249, $20.1, value_expression.3)
  .loc 1 3888 16
  mov rdi, rax
  mov rsi, [rbp-25]
  call create_ast_return_statement_249
  # [discarded value]: value_expression.3
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] $21.1:rax 
  # return($21.1)
  .loc 1 3888 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] value_expression.2:[rbp-25] 
  # [discarded value]: value_expression.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:[rbp-17] value_expression.1:[rbp-25] 
  # [discarded value]: token.1
  # [discarded value]: value_expression.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__14:
  # $22.1: @Matcher = load_struct_member(self.1, required_loop)
  .loc 1 3890 22
  mov rax, [rbp-8]
  add rax, 248
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $22.1:rax 
  # $23.1: Boolean = call(matches.227, self.1, $22.1)
  .loc 1 3890 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $23.1:rax 
  # jump($23.1, block.18, block.19)
  test al, al
  jz .LABEL__parse_statement_195__19
.LABEL__parse_statement_195__18:
  # $24.1: @AST_Statement = call(parse_loop.204, self.1)
  .loc 1 3891 16
  mov rdi, [rbp-8]
  call parse_loop_204
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $24.1:rax 
  # return($24.1)
  .loc 1 3891 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__19:
  # $25.1: @Matcher = load_struct_member(self.1, required_while)
  .loc 1 3893 22
  mov rax, [rbp-8]
  add rax, 336
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $25.1:rax 
  # $26.1: Boolean = call(matches.227, self.1, $25.1)
  .loc 1 3893 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $26.1:rax 
  # jump($26.1, block.21, block.22)
  test al, al
  jz .LABEL__parse_statement_195__22
.LABEL__parse_statement_195__21:
  # $27.1: @AST_Statement = call(parse_while.205, self.1)
  .loc 1 3894 16
  mov rdi, [rbp-8]
  call parse_while_205
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $27.1:rax 
  # return($27.1)
  .loc 1 3894 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__22:
  # $28.1: @Matcher = load_struct_member(self.1, required_break)
  .loc 1 3896 22
  mov rax, [rbp-8]
  add rax, 72
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $28.1:rax 
  # $29.1: Boolean = call(matches.227, self.1, $28.1)
  .loc 1 3896 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $29.1:rax 
  # jump($29.1, block.24, block.25)
  test al, al
  jz .LABEL__parse_statement_195__25
.LABEL__parse_statement_195__24:
  # $30.1: @Matcher = load_struct_member(self.1, required_break)
  .loc 1 3897 31
  mov rax, [rbp-8]
  add rax, 72
  mov rax, [rax]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $30.1:rax 
  # token.1: @Token = call(consume.223, self.1, $30.1)
  .loc 1 3897 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] token.1:rax 
  # $32.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 3898 43
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $32.1:rbx 
  # $33.1: @AST_Break_Statement = call(create_ast_break_statement.248, $32.1)
  .loc 1 3898 16
  mov rdi, rbx
  call create_ast_break_statement_248
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $33.1:rax 
  # return($33.1)
  .loc 1 3898 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__25:
  # $34.1: @Matcher = load_struct_member(self.1, required_include)
  .loc 1 3900 22
  mov rax, [rbp-8]
  add rax, 224
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $34.1:rax 
  # $35.1: Boolean = call(matches.227, self.1, $34.1)
  .loc 1 3900 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $35.1:rax 
  # jump($35.1, block.27, block.28)
  test al, al
  jz .LABEL__parse_statement_195__28
.LABEL__parse_statement_195__27:
  # $36.1: @AST_Include_Statement = call(parse_include.196, self.1)
  .loc 1 3901 16
  mov rdi, [rbp-8]
  call parse_include_196
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $36.1:rax 
  # return($36.1)
  .loc 1 3901 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__28:
  # expression.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 3904 19
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax 
  # $38.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3906 22
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax $38.1:rbx 
  # $39.1: @Matcher = load_struct_member(self.1, optional_comment)
  .loc 1 3906 43
  mov r15, [rbp-8]
  add r15, 24
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax $38.1:rbx $39.1:r15 
  # $40.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 1 3906 66
  mov r14, [rbp-8]
  add r14, 160
  mov r14, [r14]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:rax $38.1:rbx $39.1:r15 $40.1:r14 
  # $41.1: Boolean = call(matches.229, self.1, $38.1, $39.1, $40.1)
  .loc 1 3906 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  mov [rbp-17], rax
  call matches_229
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $41.1:rax 
  # jump($41.1, block.30, block.31)
  test al, al
  jz .LABEL__parse_statement_195__31
.LABEL__parse_statement_195__30:
  # $42.1: @AST_Expression_Statement = call(create_ast_expression_statement.244, expression.1)
  .loc 1 3907 16
  mov rdi, [rbp-17]
  call create_ast_expression_statement_244
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $42.1:rax 
  # return($42.1)
  .loc 1 3907 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_195__31:
  # $43.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3910 22
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $43.1:rax 
  # $44.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3910 43
  mov rbx, [rbp-8]
  add rbx, 104
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $43.1:rax $44.1:rbx 
  # $45.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3910 64
  mov r15, [rbp-8]
  add r15, 104
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $43.1:rax $44.1:rbx $45.1:r15 
  # $46.1: Boolean = call(matches.229, self.1, $43.1, $44.1, $45.1)
  .loc 1 3910 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_229
  # [discarded value]: $43.1
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $46.1:rax 
  # jump($46.1, block.33, block.34)
  test al, al
  jz .LABEL__parse_statement_195__34
.LABEL__parse_statement_195__33:
  # call(consume_space.222, self.1, 1)
  .loc 1 3911 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # $47.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3912 22
  mov rax, [rbp-8]
  add rax, 104
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $47.1:rax 
  # $48.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3912 43
  mov rbx, [rbp-8]
  add rbx, 104
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $47.1:rax $48.1:rbx 
  # $49.1: @Token = call(consume.224, self.1, $47.1, $48.1)
  .loc 1 3912 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call consume_224
  # [discarded value]: $47.1
  # [discarded value]: $48.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # call(consume_space.222, self.1, 1)
  .loc 1 3913 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # $50.1: @Matcher = load_struct_member(self.1, required_struct)
  .loc 1 3914 26
  mov rax, [rbp-8]
  add rax, 320
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $50.1:rax 
  # $51.1: Boolean = call(matches.227, self.1, $50.1)
  .loc 1 3914 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $51.1:rax 
  # jump($51.1, block.35, block.36)
  test al, al
  jz .LABEL__parse_statement_195__36
.LABEL__parse_statement_195__35:
  # $52.1: @AST_Statement = call(parse_struct.197, self.1, expression.1)
  .loc 1 3915 20
  mov rdi, [rbp-8]
  mov rsi, [rbp-17]
  call parse_struct_197
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $52.1:rax 
  # return($52.1)
  .loc 1 3915 13
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_195__36:
  # $53.1: @AST_Statement = call(parse_function.199, self.1, expression.1)
  .loc 1 3917 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-17]
  call parse_function_199
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $53.1:rax 
  # return($53.1)
  .loc 1 3917 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_195__34:
  # $54.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3920 22
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $54.1:rax 
  # $55.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3920 43
  mov rbx, [rbp-8]
  add rbx, 104
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $54.1:rax $55.1:rbx 
  # $56.1: Boolean = call(matches.228, self.1, $54.1, $55.1)
  .loc 1 3920 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $54.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $56.1:rax 
  # jump($56.1, block.39, block.40)
  test al, al
  jz .LABEL__parse_statement_195__40
.LABEL__parse_statement_195__39:
  # AST_Variable_Expression.7: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] AST_Variable_Expression.7:rax 
  # $57.1: Boolean = call(is.325, expression.1, AST_Variable_Expression.7)
  .loc 1 3921 13
  mov rdi, [rbp-17]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.7
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $57.1:rax 
  # jump($57.1, block.41, block.42)
  test al, al
  jz .LABEL__parse_statement_195__42
.LABEL__parse_statement_195__41:
  # expression.1: @AST_Variable_Expression = expression.1
  .loc 1 3922 27
  mov rax, [rbp-17]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] expression.1:rax 
  # variable_name.1: @Identifier_Token = load_struct_member(expression.1, name)
  .loc 1 3923 30
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx 
  # variable_value_type.1: @AST_Type = null
  .loc 1 3924 13
  xor rax, rax
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax 
  # variable_value_expression.1: @AST_Expression = null
  .loc 1 3925 13
  xor r15, r15
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 
  # variable_is_external.1: Boolean = false
  .loc 1 3926 13
  mov r14b, 0
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 
  # $60.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3927 30
  mov r13, [rbp-8]
  add r13, 32
  mov r13, [r13]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $60.1:r13 
  # $61.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3927 51
  mov r12, [rbp-8]
  add r12, 104
  mov r12, [r12]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $60.1:r13 $61.1:r12 
  # $62.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 3927 72
  mov r11, [rbp-8]
  add r11, 168
  mov r11, [r11]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $60.1:r13 $61.1:r12 $62.1:r11 
  # $63.1: Boolean = call(matches.229, self.1, $60.1, $61.1, $62.1)
  .loc 1 3927 17
  mov rdi, [rbp-8]
  mov rsi, r13
  mov rdx, r12
  mov rcx, r11
  mov [rbp-25], rax
  mov [rbp-33], rbx
  mov [rbp-34], r14b
  mov [rbp-42], r15
  call matches_229
  # [discarded value]: $60.1
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $63.1:rax 
  # jump($63.1, block.43, block.45)
  test al, al
  jz .LABEL__parse_statement_195__45
.LABEL__parse_statement_195__43:
  # call(consume_space.222, self.1, 1)
  .loc 1 3928 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # $77.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3929 30
  mov rax, [rbp-8]
  add rax, 104
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $77.1:rax 
  # $78.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 3929 51
  mov rbx, [rbp-8]
  add rbx, 168
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $77.1:rax $78.1:rbx 
  # $79.1: @Token = call(consume.224, self.1, $77.1, $78.1)
  .loc 1 3929 17
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call consume_224
  # [discarded value]: $77.1
  # [discarded value]: $78.1
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # call(consume_space.222, self.1, 1)
  .loc 1 3930 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # variable_value_expression.3: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 3931 45
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:rax[rbp-42] 
  # jump(block.44)
  mov [rbp-42], rax
.LABEL__parse_statement_195__44:
  # variable_is_external.3: Boolean = phi(variable_is_external.2, variable_is_external.1)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] 
  # variable_value_expression.4: @AST_Expression = phi(variable_value_expression.3, variable_value_expression.1, variable_value_expression.2)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] 
  # variable_value_type.3: @AST_Type = phi(variable_value_type.1, variable_value_type.2)
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_is_external.3:[rbp-34] variable_value_expression.4:[rbp-42] variable_value_type.3:[rbp-25] 
  # variable_statement.1: @AST_Variable_Statement = call(create_ast_variable_statement.250, variable_name.1, variable_value_type.3, variable_value_expression.4, variable_is_external.3)
  .loc 1 3949 35
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, [rbp-42]
  mov cl, [rbp-34]
  call create_ast_variable_statement_250
  # [discarded value]: variable_is_external.3
  # [discarded value]: variable_value_expression.4
  # [discarded value]: variable_value_type.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:rax 
  # $82.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 3950 17
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:rax $82.1:rbx 
  # $83.1: Boolean = $82.1 == 0
  .loc 1 3950 17
  cmp rbx, 0
  sete r15b
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:rax $83.1:r15 
  # jump($83.1, block.51, block.52)
  test r15b, r15b
  mov [rbp-50], rax
  jz .LABEL__parse_statement_195__52
.LABEL__parse_statement_195__51:
  # $84.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 3951 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] $84.1:rax 
  # $85.1: @List = load_struct_member($84.1, global_variables)
  .loc 1 3951 17
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] $85.1:rbx 
  # call(append.308, $85.1, variable_statement.1)
  .loc 1 3951 17
  mov rdi, rbx
  mov rsi, [rbp-50]
  call append_308
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # jump(block.52)
.LABEL__parse_statement_195__52:
  # return(variable_statement.1)
  .loc 1 3953 13
  mov rax, [rbp-50]
  jmp .LABEL__parse_statement_195__end
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] variable_statement.1:[rbp-50] 
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_expression.3:[rbp-42] 
  # [discarded value]: variable_value_expression.3
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
.LABEL__parse_statement_195__45:
  # call(consume_space.222, self.1, 0)
  .loc 1 3933 17
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # $64.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3934 30
  mov rax, [rbp-8]
  add rax, 104
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] $64.1:rax 
  # $65.1: @Token = call(consume.223, self.1, $64.1)
  .loc 1 3934 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $64.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # call(consume_space.222, self.1, 1)
  .loc 1 3935 17
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # variable_value_type.2: @AST_Type = call(parse_type.206, self.1)
  .loc 1 3936 39
  mov rdi, [rbp-8]
  call parse_type_206
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:rax[rbp-25] 
  # $67.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3937 34
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:rax[rbp-25] $67.1:rbx 
  # $68.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 3937 55
  mov r15, [rbp-8]
  add r15, 168
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:rax[rbp-25] $67.1:rbx $68.1:r15 
  # $69.1: Boolean = call(matches.228, self.1, $67.1, $68.1)
  .loc 1 3937 21
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-25], rax
  call matches_228
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $69.1:rax 
  # jump($69.1, block.46, block.44)
  test al, al
  jz .LABEL__parse_statement_195__44
.LABEL__parse_statement_195__46:
  # call(consume_space.222, self.1, 1)
  .loc 1 3938 21
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # $70.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 3939 34
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $70.1:rax 
  # $71.1: @Token = call(consume.223, self.1, $70.1)
  .loc 1 3939 21
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $70.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # call(consume_space.222, self.1, 1)
  .loc 1 3940 21
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # $72.1: @Matcher = load_struct_member(self.1, required_external)
  .loc 1 3941 38
  mov rax, [rbp-8]
  add rax, 184
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $72.1:rax 
  # $73.1: Boolean = call(matches.227, self.1, $72.1)
  .loc 1 3941 25
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $73.1:rax 
  # jump($73.1, block.48, block.50)
  test al, al
  jz .LABEL__parse_statement_195__50
.LABEL__parse_statement_195__48:
  # $75.1: @Matcher = load_struct_member(self.1, required_external)
  .loc 1 3942 38
  mov rax, [rbp-8]
  add rax, 184
  mov rax, [rax]
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] $75.1:rax 
  # $76.1: @Token = call(consume.223, self.1, $75.1)
  .loc 1 3942 25
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $75.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # variable_is_external.2: Boolean = true
  .loc 1 3943 25
  mov al, 1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_is_external.2:rax[rbp-34] 
  # jump(block.44)
  mov [rbp-34], al
  jmp .LABEL__parse_statement_195__44
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_is_external.2:[rbp-34] 
  # [discarded value]: variable_is_external.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
.LABEL__parse_statement_195__50:
  # variable_value_expression.2: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 3945 53
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_value_expression.2:rax[rbp-42] 
  # jump(block.44)
  mov [rbp-42], rax
  jmp .LABEL__parse_statement_195__44
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] variable_value_expression.2:[rbp-42] 
  # [discarded value]: variable_value_expression.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] variable_value_type.2:[rbp-25] 
  # [discarded value]: variable_value_type.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] variable_name.1:[rbp-33] variable_value_type.1:[rbp-25] variable_value_expression.1:[rbp-42] variable_is_external.1:[rbp-34] 
  # [discarded value]: variable_name.1
  # [discarded value]: variable_value_type.1
  # [discarded value]: variable_value_expression.1
  # [discarded value]: variable_is_external.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_195__42:
  # $86.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 3955 15
  mov rax, [rbp-17]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $86.1:rax 
  # call(abort.271, $86.1, "Cannot use expression as variable name")
  .loc 1 3955 9
  mov rdi, rax
  lea rsi, .LABEL__string_271[rip] # "Cannot use expression as variable name"
  call abort_271
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_195__40:
  # $87.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3958 22
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $87.1:rax 
  # $88.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 3958 43
  mov rbx, [rbp-8]
  add rbx, 168
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $87.1:rax $88.1:rbx 
  # $89.1: Boolean = call(matches.228, self.1, $87.1, $88.1)
  .loc 1 3958 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $87.1
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $89.1:rax 
  # jump($89.1, block.54, block.55)
  test al, al
  jz .LABEL__parse_statement_195__55
.LABEL__parse_statement_195__54:
  # call(consume_space.222, self.1, 1)
  .loc 1 3959 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # $90.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 3960 34
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $90.1:rax 
  # operator.1: @Other_Token = call(consume.223, self.1, $90.1)
  .loc 1 3960 21
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:rax 
  # call(consume_space.222, self.1, 1)
  .loc 1 3961 9
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-25], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:[rbp-25] 
  # $93.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 3962 70
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] operator.1:[rbp-25] $93.1:rax 
  # $94.1: @AST_Assignment_Statement = call(create_ast_assignment_statement.253, expression.1, operator.1, $93.1)
  .loc 1 3962 16
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  mov rdx, rax
  call create_ast_assignment_statement_253
  # [discarded value]: operator.1
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] $94.1:rax 
  # return($94.1)
  .loc 1 3962 9
  jmp .LABEL__parse_statement_195__end
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
.LABEL__parse_statement_195__55:
  # return(null)
  .loc 1 3965 5
  xor rax, rax
  jmp .LABEL__parse_statement_195__end
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] expression.1:[rbp-17] 
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
.LABEL__parse_statement_195__5:
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_file)
  .loc 1 3872 86
  mov rax, [rbp-8]
  add rax, 152
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $6.1:rax 
  # $5.2: Boolean = call(matches.227, self.1, $6.1)
  .loc 1 3872 73
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $5.2:rax[rbp-9] 
  # jump(block.6)
  mov [rbp-9], al
  jmp .LABEL__parse_statement_195__6
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] $5.2:[rbp-9] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $5.1:[rbp-9] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statement_195__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statement_195__stack_frame_size: .word 64

  .loc 1 3970 1
  .text
parse_include_196:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_include_196__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_include_196__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Include_Statement = new(AST_Include_Statement)
  .loc 1 3971 18
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Include_Statement[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] statement.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, required_include)
  .loc 1 3972 39
  mov rbx, [rbp-8]
  add rbx, 224
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] statement.1:rax $2.1:rbx 
  # $3.1: @Token = call(consume.223, self.1, $2.1)
  .loc 1 3972 26
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-16], rax
  call consume_223
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $3.1:rax 
  # $4.1: @Source_Location = load_struct_member($3.1, location)
  .loc 1 3972 26
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $4.1:rbx 
  # store_struct_member(statement.1, location, $4.1)
  .loc 1 3972 5
  mov rax, [rbp-16]
  add rax, 8
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # call(consume_space.222, self.1, 1)
  .loc 1 3973 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # $5.1: @Matcher = load_struct_member(self.1, required_string_literal)
  .loc 1 3974 41
  mov rax, [rbp-8]
  add rax, 312
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $5.1:rax 
  # $7.1: @String_Token = call(consume.223, self.1, $5.1)
  .loc 1 3974 28
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: self.1
  # [discarded value]: $5.1
  # [live values]: statement.1:[rbp-16] $7.1:rax 
  # $8.1: @String = load_struct_member($7.1, value)
  .loc 1 3974 28
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $7.1
  # [live values]: statement.1:[rbp-16] $8.1:rbx 
  # store_struct_member(statement.1, file_path, $8.1)
  .loc 1 3974 5
  mov rax, [rbp-16]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $8.1
  # [live values]: statement.1:[rbp-16] 
  # return(statement.1)
  .loc 1 3975 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_include_196__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__parse_include_196__end:
  mov rsp, rbp
  pop rbp
  ret

parse_include_196__stack_frame_size: .word 16

  .loc 1 3980 1
  .text
parse_struct_197:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_struct_197__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_struct_197__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  # AST_Variable_Expression.8: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:rdi name_expression.1:rsi AST_Variable_Expression.8:rax 
  # $1.1: Boolean = call(is.325, name_expression.1, AST_Variable_Expression.8)
  .loc 1 3981 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.8
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_struct_197__3
.LABEL__parse_struct_197__2:
  # $2.1: @AST_Variable_Expression = name_expression.1
  .loc 1 3982 25
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:rax 
  # struct_name.1: @Identifier_Token = load_struct_member($2.1, name)
  .loc 1 3982 25
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx 
  # $4.1: @Matcher = load_struct_member(self.1, required_struct)
  .loc 1 3983 22
  mov rax, [rbp-8]
  add rax, 320
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:rbx $4.1:rax 
  # $5.1: @Token = call(consume.223, self.1, $4.1)
  .loc 1 3983 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rbx
  call consume_223
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3985 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3985 47
  mov rbx, [rbp-8]
  add rbx, 104
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $6.1:rax $7.1:rbx 
  # $8.1: Boolean = call(matches.228, self.1, $6.1, $7.1)
  .loc 1 3985 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $8.1:rax 
  # jump($8.1, block.4, block.6)
  test al, al
  jz .LABEL__parse_struct_197__6
.LABEL__parse_struct_197__4:
  # call(consume_space.222, self.1, 1)
  .loc 1 3986 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
  # $9.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 3987 26
  mov rax, [rbp-8]
  add rax, 104
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] $9.1:rax 
  # $10.1: @Token = call(consume.223, self.1, $9.1)
  .loc 1 3987 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
  # call(consume_space.222, self.1, 1)
  .loc 1 3988 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
  # base_type.3: @AST_Type = call(parse_type.206, self.1)
  .loc 1 3989 25
  mov rdi, [rbp-8]
  call parse_type_206
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__parse_struct_197__5:
  # base_type.5: @AST_Type = phi(base_type.2, base_type.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] 
  # $12.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 3994 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] $12.1:rax 
  # $13.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 1 3994 47
  mov rbx, [rbp-8]
  add rbx, 264
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] $12.1:rax $13.1:rbx 
  # $14.1: Boolean = call(matches.228, self.1, $12.1, $13.1)
  .loc 1 3994 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] $14.1:rax 
  # jump($14.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_struct_197__9
.LABEL__parse_struct_197__7:
  # struct_members.3: @List = call(create_list.307)
  .loc 1 3995 30
  call create_list_307
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:rax 
  # call(consume_space.222, self.1, 1)
  .loc 1 3996 13
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-40], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # $16.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 1 3997 26
  mov rax, [rbp-8]
  add rax, 264
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $16.1:rax 
  # $17.1: @Token = call(consume.223, self.1, $16.1)
  .loc 1 3997 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # call(consume_end_of_line.220, self.1)
  .loc 1 3998 13
  mov rdi, [rbp-8]
  call consume_end_of_line_220
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # $18.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 3999 38
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $18.1:rax 
  # $19.1: Int = $18.1 + 1
  .loc 1 3999 38
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $19.1:rbx 
  # store_struct_member(self.1, current_alignment, $19.1)
  .loc 1 3999 13
  mov rax, [rbp-8]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # call(parse_struct_members.198, self.1, struct_members.3)
  .loc 1 4000 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  call parse_struct_members_198
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # $20.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4001 38
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $20.1:rax 
  # $21.1: Int = $20.1 - 1
  .loc 1 4001 38
  mov rbx, rax
  sub rbx, 1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $21.1:rbx 
  # store_struct_member(self.1, current_alignment, $21.1)
  .loc 1 4001 13
  mov rax, [rbp-8]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # $22.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4002 32
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $22.1:rax 
  # $23.1: Int = $22.1 * 4
  .loc 1 4002 32
  mov rbx, rax
  imul rbx, 4
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $23.1:rbx 
  # call(consume_space.222, self.1, $23.1)
  .loc 1 4002 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  call consume_space_222
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # $24.1: @Matcher = load_struct_member(self.1, required_close_brace)
  .loc 1 4003 26
  mov rax, [rbp-8]
  add rax, 80
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] $24.1:rax 
  # $25.1: @Token = call(consume.223, self.1, $24.1)
  .loc 1 4003 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # jump(block.8)
.LABEL__parse_struct_197__8:
  # struct_members.4: @List = phi(struct_members.2, struct_members.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] struct_members.4:[rbp-40] 
  # struct_statement.1: @AST_Struct_Statement = call(create_ast_struct_statement.251, struct_name.1, base_type.5, struct_members.4)
  .loc 1 4007 29
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call create_ast_struct_statement_251
  # [discarded value]: struct_members.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] struct_statement.1:rax 
  # $27.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 4008 9
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] struct_statement.1:rax $27.1:rbx 
  # $28.1: @List = load_struct_member($27.1, types)
  .loc 1 4008 9
  mov r15, rbx
  add r15, 8
  mov r15, [r15]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] struct_statement.1:rax $28.1:r15 
  # call(append.308, $28.1, struct_statement.1)
  .loc 1 4008 9
  mov rdi, r15
  mov rsi, rax
  mov [rbp-48], rax
  call append_308
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] struct_statement.1:[rbp-48] 
  # return(struct_statement.1)
  .loc 1 4009 9
  mov rax, [rbp-48]
  jmp .LABEL__parse_struct_197__end
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.3:[rbp-40] 
  # [discarded value]: struct_members.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] 
.LABEL__parse_struct_197__9:
  # struct_members.2: @List = null
  .loc 1 4005 13
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.2:rax[rbp-40] 
  # jump(block.8)
  mov [rbp-40], rax
  jmp .LABEL__parse_struct_197__8
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] struct_members.2:[rbp-40] 
  # [discarded value]: struct_members.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] base_type.5:[rbp-32] 
  # [discarded value]: base_type.5
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.3:[rbp-32] 
  # [discarded value]: base_type.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
.LABEL__parse_struct_197__6:
  # base_type.2: @AST_Type = null
  .loc 1 3991 13
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.2:rax[rbp-32] 
  # jump(block.5)
  mov [rbp-32], rax
  jmp .LABEL__parse_struct_197__5
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] base_type.2:[rbp-32] 
  # [discarded value]: base_type.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] struct_name.1:[rbp-24] 
  # [discarded value]: struct_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
.LABEL__parse_struct_197__3:
  # $29.1: @Source_Location = load_struct_member(name_expression.1, location)
  .loc 1 4011 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $29.1:rax 
  # call(abort.271, $29.1, "Cannot use expression as struct name")
  .loc 1 4011 5
  mov rdi, rax
  lea rsi, .LABEL__string_272[rip] # "Cannot use expression as struct name"
  call abort_271
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: name_expression.1
  # [live values]: 
.LABEL__parse_struct_197__end:
  mov rsp, rbp
  pop rbp
  ret

parse_struct_197__stack_frame_size: .word 48

  .loc 1 4016 1
  .text
parse_struct_members_198:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_struct_members_198__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_struct_members_198__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_members.1: @List = load_variable(struct_members)
  # [live values]: self.1:rdi struct_members.1:rsi 
  # jump(block.4)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__parse_struct_members_198__4:
  # $1.1: Boolean = call(consume_empty_line.221, self.1)
  .loc 1 4018 16
  mov rdi, [rbp-16]
  call consume_empty_line_221
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.4, block.6)
  test al, al
  jnz .LABEL__parse_struct_members_198__4
.LABEL__parse_struct_members_198__6:
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4021 26
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4021 47
  mov rbx, [rbp-16]
  add rbx, 208
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $2.1:rax $3.1:rbx 
  # $4.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4021 13
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $4.1:rax 
  # jump($4.1, block.7, block.3)
  test al, al
  jz .LABEL__parse_struct_members_198__3
.LABEL__parse_struct_members_198__7:
  # $5.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4022 32
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $5.1:rax 
  # $6.1: Int = $5.1 * 4
  .loc 1 4022 32
  mov rbx, rax
  imul rbx, 4
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $6.1:rbx 
  # call(consume_space.222, self.1, $6.1)
  .loc 1 4022 13
  mov rdi, [rbp-16]
  mov rsi, rbx
  call consume_space_222
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
  # $7.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4023 41
  mov rax, [rbp-16]
  add rax, 208
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $7.1:rax 
  # member_name.1: @Identifier_Token = call(consume.223, self.1, $7.1)
  .loc 1 4023 28
  mov rdi, [rbp-16]
  mov rsi, rax
  call consume_223
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] member_name.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4024 13
  mov rdi, [rbp-16]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_222
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] member_name.1:[rbp-24] 
  # $10.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 4025 26
  mov rax, [rbp-16]
  add rax, 104
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] member_name.1:[rbp-24] $10.1:rax 
  # $11.1: @Token = call(consume.223, self.1, $10.1)
  .loc 1 4025 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call consume_223
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] member_name.1:[rbp-24] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4026 13
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] member_name.1:[rbp-24] 
  # member_value_type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4027 34
  mov rdi, [rbp-16]
  call parse_type_206
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] member_name.1:[rbp-24] member_value_type.1:rax 
  # $13.1: @AST_Struct_Member = call(create_ast_struct_member.252, member_name.1, member_value_type.1)
  .loc 1 4028 35
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_ast_struct_member_252
  # [discarded value]: member_name.1
  # [discarded value]: member_value_type.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] $13.1:rax 
  # call(append.308, struct_members.1, $13.1)
  .loc 1 4028 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_308
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
  # jump(block.4)
  jmp .LABEL__parse_struct_members_198__4
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
.LABEL__parse_struct_members_198__3:
  # return()
  jmp .LABEL__parse_struct_members_198__end
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_members.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: struct_members.1
  # [live values]: 
.LABEL__parse_struct_members_198__end:
  mov rsp, rbp
  pop rbp
  ret

parse_struct_members_198__stack_frame_size: .word 32

  .loc 1 4037 1
  .text
parse_function_199:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_199__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_199__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  # AST_Variable_Expression.9: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: self.1:rdi name_expression.1:rsi AST_Variable_Expression.9:rax 
  # $1.1: Boolean = call(is.325, name_expression.1, AST_Variable_Expression.9)
  .loc 1 4038 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.9
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_function_199__3
.LABEL__parse_function_199__2:
  # $2.1: @AST_Variable_Expression = name_expression.1
  .loc 1 4039 27
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:rax 
  # function_name.1: @Identifier_Token = load_struct_member($2.1, name)
  .loc 1 4039 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx 
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4040 22
  mov rax, [rbp-8]
  add rax, 280
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:rbx $4.1:rax 
  # $5.1: @Token = call(consume.223, self.1, $4.1)
  .loc 1 4040 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rbx
  call consume_223
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] 
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4042 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4042 47
  mov rbx, [rbp-8]
  add rbx, 96
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] $6.1:rax $7.1:rbx 
  # $8.1: Boolean = call(matches.228, self.1, $6.1, $7.1)
  .loc 1 4042 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] $8.1:rax 
  # jump($8.1, block.4, block.6)
  test al, al
  jz .LABEL__parse_function_199__6
.LABEL__parse_function_199__4:
  # function_parameters.3: @List = call(create_list.307)
  .loc 1 4043 35
  call create_list_307
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:rax 
  # jump(block.5)
  mov [rbp-32], rax
.LABEL__parse_function_199__5:
  # function_parameters.5: @List = phi(function_parameters.2, function_parameters.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4047 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] 
  # $11.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4048 22
  mov rax, [rbp-8]
  add rax, 96
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] $11.1:rax 
  # $12.1: @Token = call(consume.223, self.1, $11.1)
  .loc 1 4048 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4049 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] 
  # $13.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 1 4050 22
  mov rax, [rbp-8]
  add rax, 200
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] $13.1:rax 
  # $14.1: @Matcher = load_struct_member(self.1, required_greater_than)
  .loc 1 4050 44
  mov rbx, [rbp-8]
  add rbx, 192
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] $13.1:rax $14.1:rbx 
  # $15.1: @Token = call(consume.224, self.1, $13.1, $14.1)
  .loc 1 4050 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call consume_224
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4051 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] 
  # function_return_type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4052 33
  mov rdi, [rbp-8]
  call parse_type_206
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:rax 
  # $17.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4054 26
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:rax $17.1:rbx 
  # $18.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 1 4054 47
  mov r15, [rbp-8]
  add r15, 264
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:rax $17.1:rbx $18.1:r15 
  # $19.1: Boolean = call(matches.228, self.1, $17.1, $18.1)
  .loc 1 4054 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-40], rax
  call matches_228
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] $19.1:rax 
  # jump($19.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_function_199__9
.LABEL__parse_function_199__7:
  # call(consume_space.222, self.1, 1)
  .loc 1 4055 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] 
  # function_body.3: @AST_Block_Statement = call(parse_block.202, self.1)
  .loc 1 4056 29
  mov rdi, [rbp-8]
  call parse_block_202
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:rax 
  # jump(block.8)
  mov [rbp-48], rax
.LABEL__parse_function_199__8:
  # function_body.4: @AST_Block_Statement = phi(function_body.2, function_body.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] function_body.4:[rbp-48] 
  # function_statement.1: @AST_Function_Statement = call(create_ast_function_statement.241, function_name.1, function_parameters.5, function_return_type.1, function_body.4)
  .loc 1 4060 31
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, [rbp-48]
  call create_ast_function_statement_241
  # [discarded value]: function_body.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] function_statement.1:rax 
  # $22.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  .loc 1 4061 9
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] function_statement.1:rax $22.1:rbx 
  # $23.1: @List = load_struct_member($22.1, functions)
  .loc 1 4061 9
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] function_statement.1:rax $23.1:r15 
  # call(append.308, $23.1, function_statement.1)
  .loc 1 4061 9
  mov rdi, r15
  mov rsi, rax
  mov [rbp-56], rax
  call append_308
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] function_statement.1:[rbp-56] 
  # return(function_statement.1)
  .loc 1 4062 9
  mov rax, [rbp-56]
  jmp .LABEL__parse_function_199__end
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.3:[rbp-48] 
  # [discarded value]: function_body.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] 
.LABEL__parse_function_199__9:
  # function_body.2: @AST_Block_Statement = null
  .loc 1 4058 13
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.2:rax[rbp-48] 
  # jump(block.8)
  mov [rbp-48], rax
  jmp .LABEL__parse_function_199__8
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] function_body.2:[rbp-48] 
  # [discarded value]: function_body.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] function_parameters.5:[rbp-32] function_return_type.1:[rbp-40] 
  # [discarded value]: function_parameters.5
  # [discarded value]: function_return_type.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.3:[rbp-32] 
  # [discarded value]: function_parameters.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] 
.LABEL__parse_function_199__6:
  # function_parameters.2: @List = call(parse_function_parameters.200, self.1)
  .loc 1 4045 35
  mov rdi, [rbp-8]
  call parse_function_parameters_200
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.2:rax[rbp-32] 
  # jump(block.5)
  mov [rbp-32], rax
  jmp .LABEL__parse_function_199__5
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] function_parameters.2:[rbp-32] 
  # [discarded value]: function_parameters.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] function_name.1:[rbp-24] 
  # [discarded value]: function_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
.LABEL__parse_function_199__3:
  # $24.1: @Source_Location = load_struct_member(name_expression.1, location)
  .loc 1 4064 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $24.1:rax 
  # call(abort.271, $24.1, "Cannot use expression as function name")
  .loc 1 4064 5
  mov rdi, rax
  lea rsi, .LABEL__string_273[rip] # "Cannot use expression as function name"
  call abort_271
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: name_expression.1
  # [live values]: 
.LABEL__parse_function_199__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_199__stack_frame_size: .word 64

  .loc 1 4069 1
  .text
parse_function_parameters_200:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_parameters_200__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_parameters_200__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # function_parameters.1: @List = call(create_list.307)
  .loc 1 4070 28
  mov [rbp-8], rdi
  call create_list_307
  # [live values]: self.1:[rbp-8] function_parameters.1:rax 
  # expected_space.1: Int = 0
  .loc 1 4071 5
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] function_parameters.1:rax expected_space.1:rbx 
  # jump(block.2)
  mov [rbp-16], rax
  mov [rbp-24], rbx
.LABEL__parse_function_parameters_200__2:
  # expected_space.2: Int = phi(expected_space.1, expected_space.3)
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] expected_space.2:[rbp-24] 
  # call(consume_space.222, self.1, expected_space.2)
  .loc 1 4073 9
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call consume_space_222
  # [discarded value]: expected_space.2
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # $2.1: @AST_Function_Parameter = call(parse_function_parameter.201, self.1)
  .loc 1 4074 36
  mov rdi, [rbp-8]
  call parse_function_parameter_201
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] $2.1:rax 
  # call(append.308, function_parameters.1, $2.1)
  .loc 1 4074 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_308
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # $3.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4075 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] $3.1:rax 
  # $4.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 1 4075 47
  mov rbx, [rbp-8]
  add rbx, 120
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] $3.1:rax $4.1:rbx 
  # $5.1: Boolean = call(matches.228, self.1, $3.1, $4.1)
  .loc 1 4075 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] $5.1:rax 
  # jump($5.1, block.4, block.3)
  test al, al
  jz .LABEL__parse_function_parameters_200__3
.LABEL__parse_function_parameters_200__4:
  # call(consume_space.222, self.1, 0)
  .loc 1 4076 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # $6.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 1 4077 26
  mov rax, [rbp-8]
  add rax, 120
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] $6.1:rax 
  # $7.1: @Token = call(consume.223, self.1, $6.1)
  .loc 1 4077 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # expected_space.3: Int = 1
  .loc 1 4078 13
  mov rax, 1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] expected_space.3:rax[rbp-24] 
  # jump(block.2)
  mov [rbp-24], rax
  jmp .LABEL__parse_function_parameters_200__2
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] expected_space.3:[rbp-24] 
  # [discarded value]: expected_space.3
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
.LABEL__parse_function_parameters_200__3:
  # return(function_parameters.1)
  .loc 1 4083 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_function_parameters_200__end
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-16] expected_space.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: function_parameters.1
  # [discarded value]: expected_space.1
  # [live values]: 
.LABEL__parse_function_parameters_200__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_parameters_200__stack_frame_size: .word 32

  .loc 1 4088 1
  .text
parse_function_parameter_201:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_parameter_201__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_parameter_201__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4089 36
  mov rax, rdi
  add rax, 208
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # parameter_name.1: @Identifier_Token = call(consume.223, self.1, $1.1)
  .loc 1 4089 23
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_223
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] parameter_name.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4090 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  # $4.1: @Matcher = load_struct_member(self.1, required_colon)
  .loc 1 4091 18
  mov rax, [rbp-8]
  add rax, 104
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] $4.1:rax 
  # $5.1: @Token = call(consume.223, self.1, $4.1)
  .loc 1 4091 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4092 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  # parameter_type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4093 23
  mov rdi, [rbp-8]
  call parse_type_206
  # [discarded value]: self.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:rax 
  # $7.1: @AST_Function_Parameter = call(create_ast_function_parameter.242, parameter_name.1, parameter_type.1)
  .loc 1 4094 12
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_ast_function_parameter_242
  # [discarded value]: parameter_name.1
  # [discarded value]: parameter_type.1
  # [live values]: $7.1:rax 
  # return($7.1)
  .loc 1 4094 5
  jmp .LABEL__parse_function_parameter_201__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__parse_function_parameter_201__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_parameter_201__stack_frame_size: .word 16

  .loc 1 4099 1
  .text
parse_block_202:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_block_202__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_block_202__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_open_brace)
  .loc 1 4100 27
  mov rax, rdi
  add rax, 264
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # token.1: @Token = call(consume.223, self.1, $1.1)
  .loc 1 4100 14
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_223
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_end_of_line.220, self.1)
  .loc 1 4101 5
  mov rdi, [rbp-8]
  mov [rbp-16], rax
  call consume_end_of_line_220
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # $3.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4102 30
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $3.1:rax 
  # $4.1: Int = $3.1 + 1
  .loc 1 4102 30
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $4.1:rbx 
  # store_struct_member(self.1, current_alignment, $4.1)
  .loc 1 4102 5
  mov rax, [rbp-8]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # statements.1: @List = call(create_list.307)
  .loc 1 4103 19
  call create_list_307
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:rax 
  # call(parse_statements.192, self.1, statements.1)
  .loc 1 4104 5
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rax
  call parse_statements_192
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] 
  # $6.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4105 30
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] $6.1:rax 
  # $7.1: Int = $6.1 - 1
  .loc 1 4105 30
  mov rbx, rax
  sub rbx, 1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] $7.1:rbx 
  # store_struct_member(self.1, current_alignment, $7.1)
  .loc 1 4105 5
  mov rax, [rbp-8]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] 
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4106 24
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] $8.1:rax 
  # $9.1: Int = $8.1 * 4
  .loc 1 4106 24
  mov rbx, rax
  imul rbx, 4
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] $9.1:rbx 
  # call(consume_space.222, self.1, $9.1)
  .loc 1 4106 5
  mov rdi, [rbp-8]
  mov rsi, rbx
  call consume_space_222
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] 
  # $10.1: @Matcher = load_struct_member(self.1, required_close_brace)
  .loc 1 4107 18
  mov rax, [rbp-8]
  add rax, 80
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] statements.1:[rbp-24] $10.1:rax 
  # $11.1: @Token = call(consume.223, self.1, $10.1)
  .loc 1 4107 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: self.1
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: token.1:[rbp-16] statements.1:[rbp-24] 
  # $12.1: @AST_Block_Statement = call(create_ast_block_statement.243, token.1, statements.1)
  .loc 1 4108 12
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call create_ast_block_statement_243
  # [discarded value]: token.1
  # [discarded value]: statements.1
  # [live values]: $12.1:rax 
  # return($12.1)
  .loc 1 4108 5
  jmp .LABEL__parse_block_202__end
  # [discarded value]: $12.1
  # [live values]: 
.LABEL__parse_block_202__end:
  mov rsp, rbp
  pop rbp
  ret

parse_block_202__stack_frame_size: .word 32

  .loc 1 4113 1
  .text
parse_if_203:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_if_203__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_if_203__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_if)
  .loc 1 4114 27
  mov rax, rdi
  add rax, 216
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # token.1: @Token = call(consume.223, self.1, $1.1)
  .loc 1 4114 14
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_223
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space.222, self.1, 1)
  .loc 1 4115 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # $3.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4116 18
  mov rax, [rbp-8]
  add rax, 280
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $3.1:rax 
  # $4.1: @Token = call(consume.223, self.1, $3.1)
  .loc 1 4116 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4117 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # condition_expression.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4118 29
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4119 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] 
  # $6.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4120 18
  mov rax, [rbp-8]
  add rax, 96
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] $6.1:rax 
  # $7.1: @Token = call(consume.223, self.1, $6.1)
  .loc 1 4120 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4121 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] 
  # true_statement.1: @AST_Block_Statement = call(parse_block.202, self.1)
  .loc 1 4122 23
  mov rdi, [rbp-8]
  call parse_block_202
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax 
  # false_statement.1: @AST_Statement = null
  .loc 1 4123 5
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx 
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4124 22
  mov r15, [rbp-8]
  add r15, 32
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $9.1:r15 
  # $10.1: @Matcher = load_struct_member(self.1, required_else)
  .loc 1 4124 43
  mov r14, [rbp-8]
  add r14, 144
  mov r14, [r14]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $9.1:r15 $10.1:r14 
  # $11.1: Boolean = call(matches.228, self.1, $9.1, $10.1)
  .loc 1 4124 9
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, r14
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call matches_228
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $11.1:rax 
  # jump($11.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_if_203__3
.LABEL__parse_if_203__2:
  # call(consume_space.222, self.1, 1)
  .loc 1 4125 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # $12.1: @Matcher = load_struct_member(self.1, required_else)
  .loc 1 4126 22
  mov rax, [rbp-8]
  add rax, 144
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:rax 
  # $13.1: @Token = call(consume.223, self.1, $12.1)
  .loc 1 4126 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4127 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # $14.1: @Matcher = load_struct_member(self.1, required_if)
  .loc 1 4128 26
  mov rax, [rbp-8]
  add rax, 216
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $14.1:rax 
  # $15.1: Boolean = call(matches.227, self.1, $14.1)
  .loc 1 4128 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $15.1:rax 
  # jump($15.1, block.4, block.6)
  test al, al
  jz .LABEL__parse_if_203__6
.LABEL__parse_if_203__4:
  # false_statement.3: @AST_Statement = call(parse_if.203, self.1)
  .loc 1 4129 31
  mov rdi, [rbp-8]
  call parse_if_203
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.3:rax[rbp-40] 
  # jump(block.3)
  mov [rbp-40], rax
.LABEL__parse_if_203__3:
  # false_statement.4: @AST_Statement = phi(false_statement.1, false_statement.3, false_statement.2)
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] false_statement.3:[rbp-40] 
  # $18.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4134 36
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.4:[rbp-40] $18.1:rax false_statement.3:[rbp-40] 
  # $19.1: @AST_If_Statement = call(create_ast_if_statement.245, $18.1, condition_expression.1, true_statement.1, false_statement.4)
  .loc 1 4134 12
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call create_ast_if_statement_245
  # [discarded value]: false_statement.4
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $19.1:rax false_statement.3:[rbp-40] 
  # return($19.1)
  .loc 1 4134 5
  jmp .LABEL__parse_if_203__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.3:[rbp-40] 
  # [discarded value]: false_statement.3
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
.LABEL__parse_if_203__6:
  # false_statement.2: @AST_Statement = call(parse_block.202, self.1)
  .loc 1 4131 31
  mov rdi, [rbp-8]
  call parse_block_202
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.2:rax[rbp-40] 
  # jump(block.3)
  mov [rbp-40], rax
  jmp .LABEL__parse_if_203__3
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] false_statement.2:[rbp-40] 
  # [discarded value]: false_statement.2
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] 
  # [discarded value]: self.1
  # [discarded value]: token.1
  # [discarded value]: condition_expression.1
  # [discarded value]: true_statement.1
  # [discarded value]: false_statement.1
  # [live values]: 
.LABEL__parse_if_203__end:
  mov rsp, rbp
  pop rbp
  ret

parse_if_203__stack_frame_size: .word 48

  .loc 1 4139 1
  .text
parse_loop_204:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_loop_204__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_loop_204__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_loop)
  .loc 1 4140 27
  mov rax, rdi
  add rax, 248
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # token.1: @Token = call(consume.223, self.1, $1.1)
  .loc 1 4140 14
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_223
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space.222, self.1, 1)
  .loc 1 4141 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # loop_block.1: @AST_Block_Statement = call(parse_block.202, self.1)
  .loc 1 4142 19
  mov rdi, [rbp-8]
  call parse_block_202
  # [discarded value]: self.1
  # [live values]: token.1:[rbp-16] loop_block.1:rax 
  # $4.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4143 38
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: token.1
  # [live values]: loop_block.1:rax $4.1:rbx 
  # $5.1: @AST_Loop_Statement = call(create_ast_loop_statement.246, $4.1, loop_block.1)
  .loc 1 4143 12
  mov rdi, rbx
  mov rsi, rax
  call create_ast_loop_statement_246
  # [discarded value]: loop_block.1
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  # return($5.1)
  .loc 1 4143 5
  jmp .LABEL__parse_loop_204__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__parse_loop_204__end:
  mov rsp, rbp
  pop rbp
  ret

parse_loop_204__stack_frame_size: .word 16

  .loc 1 4148 1
  .text
parse_while_205:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_while_205__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_while_205__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_while)
  .loc 1 4149 27
  mov rax, rdi
  add rax, 336
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # token.1: @Token = call(consume.223, self.1, $1.1)
  .loc 1 4149 14
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_223
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space.222, self.1, 1)
  .loc 1 4150 5
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # $3.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4151 18
  mov rax, [rbp-8]
  add rax, 280
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $3.1:rax 
  # $4.1: @Token = call(consume.223, self.1, $3.1)
  .loc 1 4151 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4152 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # condition_expression.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4153 29
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4154 5
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] 
  # $6.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4155 18
  mov rax, [rbp-8]
  add rax, 96
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] $6.1:rax 
  # $7.1: @Token = call(consume.223, self.1, $6.1)
  .loc 1 4155 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4156 5
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] condition_expression.1:[rbp-24] 
  # loop_block.1: @AST_Block_Statement = call(parse_block.202, self.1)
  .loc 1 4157 19
  mov rdi, [rbp-8]
  call parse_block_202
  # [discarded value]: self.1
  # [live values]: token.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:rax 
  # $9.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4158 39
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: token.1
  # [live values]: condition_expression.1:[rbp-24] loop_block.1:rax $9.1:rbx 
  # $10.1: @AST_While_Statement = call(create_ast_while_statement.247, $9.1, condition_expression.1, loop_block.1)
  .loc 1 4158 12
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov rdx, rax
  call create_ast_while_statement_247
  # [discarded value]: condition_expression.1
  # [discarded value]: loop_block.1
  # [discarded value]: $9.1
  # [live values]: $10.1:rax 
  # return($10.1)
  .loc 1 4158 5
  jmp .LABEL__parse_while_205__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__parse_while_205__end:
  mov rsp, rbp
  pop rbp
  ret

parse_while_205__stack_frame_size: .word 32

  .loc 1 4166 1
  .text
parse_type_206:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_type_206__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_type_206__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_at)
  .loc 1 4167 22
  mov rax, rdi
  add rax, 64
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = call(matches.227, self.1, $1.1)
  .loc 1 4167 9
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_227
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_type_206__3
.LABEL__parse_type_206__2:
  # $3.1: @Matcher = load_struct_member(self.1, required_at)
  .loc 1 4168 31
  mov rax, [rbp-8]
  add rax, 64
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # token.1: @Token = call(consume.223, self.1, $3.1)
  .loc 1 4168 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4169 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4170 17
  mov rdi, [rbp-8]
  call parse_type_206
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:rax 
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4171 40
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] type.1:rax $6.1:rbx 
  # $7.1: @AST_Pointer_Type = call(create_ast_pointer_type.255, $6.1, type.1)
  .loc 1 4171 16
  mov rdi, rbx
  mov rsi, rax
  call create_ast_pointer_type_255
  # [discarded value]: type.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # return($7.1)
  .loc 1 4171 9
  jmp .LABEL__parse_type_206__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_type_206__3:
  # $8.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 1 4173 22
  mov rax, [rbp-8]
  add rax, 272
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # $9.1: Boolean = call(matches.227, self.1, $8.1)
  .loc 1 4173 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.5, block.6)
  test al, al
  jz .LABEL__parse_type_206__6
.LABEL__parse_type_206__5:
  # $10.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 1 4174 31
  mov rax, [rbp-8]
  add rax, 272
  mov rax, [rax]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $10.1:rax 
  # token.1: @Token = call(consume.223, self.1, $10.1)
  .loc 1 4174 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # array_item_type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4175 28
  mov rdi, [rbp-8]
  mov [rbp-16], rax
  call parse_type_206
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rax 
  # $13.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4176 26
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rax $13.1:rbx 
  # $14.1: @Matcher = load_struct_member(self.1, required_column)
  .loc 1 4176 47
  mov r15, [rbp-8]
  add r15, 112
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:rax $13.1:rbx $14.1:r15 
  # $15.1: Boolean = call(matches.228, self.1, $13.1, $14.1)
  .loc 1 4176 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-24], rax
  call matches_228
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $15.1:rax 
  # jump($15.1, block.7, block.8)
  test al, al
  jz .LABEL__parse_type_206__8
.LABEL__parse_type_206__7:
  # call(consume_space.222, self.1, 0)
  .loc 1 4177 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # $16.1: @Matcher = load_struct_member(self.1, required_column)
  .loc 1 4178 26
  mov rax, [rbp-8]
  add rax, 112
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $16.1:rax 
  # $17.1: @Token = call(consume.223, self.1, $16.1)
  .loc 1 4178 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4179 13
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # array_size_expression.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4180 38
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4181 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-32], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] 
  # $19.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  .loc 1 4182 26
  mov rax, [rbp-8]
  add rax, 88
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] $19.1:rax 
  # $20.1: @Token = call(consume.223, self.1, $19.1)
  .loc 1 4182 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] 
  # $21.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4183 42
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] array_size_expression.1:[rbp-32] $21.1:rax 
  # $22.1: @AST_Array_Type = call(create_ast_array_type.256, $21.1, array_item_type.1, array_size_expression.1)
  .loc 1 4183 20
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call create_ast_array_type_256
  # [discarded value]: array_size_expression.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $22.1:rax 
  # return($22.1)
  .loc 1 4183 13
  jmp .LABEL__parse_type_206__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
.LABEL__parse_type_206__8:
  # $23.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4185 38
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $23.1:rax 
  # $24.1: @AST_Array_Type = call(create_ast_array_type.256, $23.1, array_item_type.1, null)
  .loc 1 4185 16
  mov rdi, rax
  mov rsi, [rbp-24]
  xor rdx, rdx
  call create_ast_array_type_256
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] $24.1:rax 
  # return($24.1)
  .loc 1 4185 9
  jmp .LABEL__parse_type_206__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] array_item_type.1:[rbp-24] 
  # [discarded value]: token.1
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_type_206__6:
  # $25.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4187 47
  mov rax, [rbp-8]
  add rax, 208
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $25.1:rax 
  # $27.1: @Identifier_Token = call(consume.223, self.1, $25.1)
  .loc 1 4187 34
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $27.1:rax 
  # $28.1: @AST_Type = call(create_ast_named_type.254, $27.1)
  .loc 1 4187 12
  mov rdi, rax
  call create_ast_named_type_254
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $28.1:rax 
  # return($28.1)
  .loc 1 4187 5
  jmp .LABEL__parse_type_206__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_type_206__end:
  mov rsp, rbp
  pop rbp
  ret

parse_type_206__stack_frame_size: .word 32

  .loc 1 4190 1
  .text
parse_expression_207:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_expression_207__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_expression_207__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @AST_Expression = call(parse_logic_or_expression.208, self.1)
  .loc 1 4191 12
  call parse_logic_or_expression_208
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 4191 5
  jmp .LABEL__parse_expression_207__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__parse_expression_207__end:
  mov rsp, rbp
  pop rbp
  ret

parse_expression_207__stack_frame_size: .word 0

  .loc 1 4196 1
  .text
parse_logic_or_expression_208:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_or_expression_208__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_or_expression_208__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_logic_and_expression.209, self.1)
  .loc 1 4197 19
  mov [rbp-8], rdi
  call parse_logic_and_expression_209
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_logic_or_expression_208__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4198 25
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 1 4198 46
  mov rbx, [rbp-8]
  add rbx, 328
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax $3.1:rbx 
  # $4.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 1 4198 74
  mov r15, [rbp-8]
  add r15, 328
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax $3.1:rbx $4.1:r15 
  # $5.1: Boolean = call(matches.229, self.1, $2.1, $3.1, $4.1)
  .loc 1 4198 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_229
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__parse_logic_or_expression_208__4
.LABEL__parse_logic_or_expression_208__3:
  # call(consume_space.222, self.1, 1)
  .loc 1 4199 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $6.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 1 4200 22
  mov rax, [rbp-8]
  add rax, 328
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  .loc 1 4200 50
  mov rbx, [rbp-8]
  add rbx, 328
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rax $7.1:rbx 
  # $8.1: @Token = call(consume.224, self.1, $6.1, $7.1)
  .loc 1 4200 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call consume_224
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4201 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $9.1: @AST_Logic_Or_Expression = new(AST_Logic_Or_Expression)
  .loc 1 4202 22
  mov rdi, 32
  call malloc
  lea rbx, AST_Logic_Or_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:rax 
  # $10.1: @AST_Expression = call(parse_logic_and_expression.209, self.1)
  .loc 1 4202 67
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call parse_logic_and_expression_209
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # expression.3: @AST_Expression = call(init.259, $9.1, expression.5, $10.1)
  .loc 1 4202 22
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call init_259
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:rax[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_or_expression_208__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
.LABEL__parse_logic_or_expression_208__4:
  # return(expression.5)
  .loc 1 4204 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_or_expression_208__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_logic_or_expression_208__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_or_expression_208__stack_frame_size: .word 32

  .loc 1 4209 1
  .text
parse_logic_and_expression_209:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_and_expression_209__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_and_expression_209__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_equality_expression.210, self.1)
  .loc 1 4210 19
  mov [rbp-8], rdi
  call parse_equality_expression_210
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_logic_and_expression_209__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4211 25
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 1 4211 46
  mov rbx, [rbp-8]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax $3.1:rbx 
  # $4.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 1 4211 71
  mov r15, [rbp-8]
  add r15, 40
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax $3.1:rbx $4.1:r15 
  # $5.1: Boolean = call(matches.229, self.1, $2.1, $3.1, $4.1)
  .loc 1 4211 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_229
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.4)
  test al, al
  jz .LABEL__parse_logic_and_expression_209__4
.LABEL__parse_logic_and_expression_209__3:
  # call(consume_space.222, self.1, 1)
  .loc 1 4212 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $6.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 1 4213 22
  mov rax, [rbp-8]
  add rax, 40
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_ampersand)
  .loc 1 4213 47
  mov rbx, [rbp-8]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $6.1:rax $7.1:rbx 
  # $8.1: @Token = call(consume.224, self.1, $6.1, $7.1)
  .loc 1 4213 9
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call consume_224
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4214 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # $9.1: @AST_Logic_And_Expression = new(AST_Logic_And_Expression)
  .loc 1 4215 22
  mov rdi, 32
  call malloc
  lea rbx, AST_Logic_And_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:rax 
  # $10.1: @AST_Expression = call(parse_equality_expression.210, self.1)
  .loc 1 4215 68
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call parse_equality_expression_210
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  # expression.3: @AST_Expression = call(init.259, $9.1, expression.5, $10.1)
  .loc 1 4215 22
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call init_259
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:rax[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_and_expression_209__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
.LABEL__parse_logic_and_expression_209__4:
  # return(expression.5)
  .loc 1 4217 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_and_expression_209__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_logic_and_expression_209__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_and_expression_209__stack_frame_size: .word 32

  .loc 1 4222 1
  .text
parse_equality_expression_210:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_equality_expression_210__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_equality_expression_210__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_comparison_expression.211, self.1)
  .loc 1 4223 19
  mov [rbp-8], rdi
  call parse_comparison_expression_211
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4224 22
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4224 43
  mov r15, [rbp-8]
  add r15, 168
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx $3.1:r15 
  # $4.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4224 65
  mov r14, [rbp-8]
  add r14, 168
  mov r14, [r14]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx $3.1:r15 $4.1:r14 
  # $6.1: Boolean = call(matches.229, self.1, $2.1, $3.1, $4.1)
  .loc 1 4224 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  mov [rbp-16], rax
  call matches_229
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # jump($6.1, block.3, block.2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_equality_expression_210__2
.LABEL__parse_equality_expression_210__3:
  # $6.3: Boolean = phi($6.1, $6.2)
  .loc 1 4224 9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  # jump($6.3, block.4, block.5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_equality_expression_210__5
.LABEL__parse_equality_expression_210__4:
  # call(consume_space.222, self.1, 1)
  .loc 1 4225 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # $11.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4227 26
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $11.1:rax 
  # $12.1: Boolean = call(matches.227, self.1, $11.1)
  .loc 1 4227 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $12.1:rax 
  # jump($12.1, block.6, block.8)
  test al, al
  jz .LABEL__parse_equality_expression_210__8
.LABEL__parse_equality_expression_210__6:
  # $16.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4228 26
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $16.1:rax 
  # $17.1: @Token = call(consume.223, self.1, $16.1)
  .loc 1 4228 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # binary_expression.3: @AST_Binary_Expression = new(AST_Equals_Expression)
  .loc 1 4229 33
  mov rdi, 32
  call malloc
  lea rbx, AST_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:rax 
  # jump(block.7)
  mov [rbp-25], rax
.LABEL__parse_equality_expression_210__7:
  # binary_expression.4: @AST_Binary_Expression = phi(binary_expression.2, binary_expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] 
  # $19.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4234 22
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] $19.1:rax 
  # $20.1: @Token = call(consume.223, self.1, $19.1)
  .loc 1 4234 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4235 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] 
  # $21.1: @AST_Expression = call(parse_comparison_expression.211, self.1)
  .loc 1 4236 57
  mov rdi, [rbp-8]
  call parse_comparison_expression_211
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] $21.1:rax 
  # expression.3: @AST_Expression = call(init.259, binary_expression.4, expression.1, $21.1)
  .loc 1 4236 22
  mov rdi, [rbp-25]
  mov rsi, [rbp-16]
  mov rdx, rax
  call init_259
  # [discarded value]: binary_expression.4
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] expression.3:rax[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__parse_equality_expression_210__5:
  # expression.4: @AST_Expression = phi(expression.3, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] expression.4:[rbp-16] binary_expression.3:[rbp-25] expression.3:[rbp-16] 
  # return(expression.4)
  .loc 1 4238 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_equality_expression_210__end
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] expression.3:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.3:[rbp-25] 
  # [discarded value]: binary_expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
.LABEL__parse_equality_expression_210__8:
  # $13.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  .loc 1 4231 26
  mov rax, [rbp-8]
  add rax, 176
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $13.1:rax 
  # $14.1: @Token = call(consume.223, self.1, $13.1)
  .loc 1 4231 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # binary_expression.2: @AST_Binary_Expression = new(AST_Not_Equals_Expression)
  .loc 1 4232 33
  mov rdi, 32
  call malloc
  lea rbx, AST_Not_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.2:rax[rbp-25] 
  # jump(block.7)
  mov [rbp-25], rax
  jmp .LABEL__parse_equality_expression_210__7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] binary_expression.2:[rbp-25] 
  # [discarded value]: binary_expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
.LABEL__parse_equality_expression_210__2:
  # $7.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4224 103
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rax 
  # $8.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  .loc 1 4224 124
  mov rbx, [rbp-8]
  add rbx, 176
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rax $8.1:rbx 
  # $9.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4224 156
  mov r15, [rbp-8]
  add r15, 168
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rax $8.1:rbx $9.1:r15 
  # $6.2: Boolean = call(matches.229, self.1, $7.1, $8.1, $9.1)
  .loc 1 4224 90
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_229
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:rax[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
  jmp .LABEL__parse_equality_expression_210__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:[rbp-17] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__parse_equality_expression_210__end:
  mov rsp, rbp
  pop rbp
  ret

parse_equality_expression_210__stack_frame_size: .word 32

  .loc 1 4243 1
  .text
parse_comparison_expression_211:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_comparison_expression_211__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_comparison_expression_211__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_addition_expression.212, self.1)
  .loc 1 4244 19
  mov [rbp-8], rdi
  call parse_addition_expression_212
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4245 22
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_less_than)
  .loc 1 4245 43
  mov r15, [rbp-8]
  add r15, 232
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx $3.1:r15 
  # $5.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4245 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-16], rax
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # jump($5.1, block.3, block.2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_comparison_expression_211__2
.LABEL__parse_comparison_expression_211__3:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 1 4245 9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, block.4, block.5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_comparison_expression_211__5
.LABEL__parse_comparison_expression_211__4:
  # call(consume_space.222, self.1, 1)
  .loc 1 4246 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $9.1: @Matcher = load_struct_member(self.1, required_less_than)
  .loc 1 4248 26
  mov rax, [rbp-8]
  add rax, 232
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $9.1:rax 
  # $10.1: Boolean = call(matches.227, self.1, $9.1)
  .loc 1 4248 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $10.1:rax 
  # jump($10.1, block.6, block.8)
  test al, al
  jz .LABEL__parse_comparison_expression_211__8
.LABEL__parse_comparison_expression_211__6:
  # $19.1: @Matcher = load_struct_member(self.1, required_less_than)
  .loc 1 4249 26
  mov rax, [rbp-8]
  add rax, 232
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $19.1:rax 
  # $20.1: @Token = call(consume.223, self.1, $19.1)
  .loc 1 4249 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $21.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4250 30
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $21.1:rax 
  # $22.1: Boolean = call(matches.227, self.1, $21.1)
  .loc 1 4250 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $22.1:rax 
  # jump($22.1, block.12, block.14)
  test al, al
  jz .LABEL__parse_comparison_expression_211__14
.LABEL__parse_comparison_expression_211__12:
  # $24.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4251 30
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $24.1:rax 
  # $25.1: @Token = call(consume.223, self.1, $24.1)
  .loc 1 4251 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # binary_expression.5: @AST_Binary_Expression = new(AST_Less_Than_Or_Equals_Expression)
  .loc 1 4252 37
  mov rdi, 32
  call malloc
  lea rbx, AST_Less_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.5:rax 
  # jump(block.7)
  mov [rbp-25], rax
.LABEL__parse_comparison_expression_211__7:
  # binary_expression.6: @AST_Binary_Expression = phi(binary_expression.3, binary_expression.2, binary_expression.5, binary_expression.4)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.6:[rbp-25] binary_expression.5:[rbp-25] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4265 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.6:[rbp-25] binary_expression.5:[rbp-25] 
  # $27.1: @AST_Expression = call(parse_addition_expression.212, self.1)
  .loc 1 4266 57
  mov rdi, [rbp-8]
  call parse_addition_expression_212
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.6:[rbp-25] $27.1:rax binary_expression.5:[rbp-25] 
  # expression.3: @AST_Expression = call(init.259, binary_expression.6, expression.1, $27.1)
  .loc 1 4266 22
  mov rdi, [rbp-25]
  mov rsi, [rbp-16]
  mov rdx, rax
  call init_259
  # [discarded value]: binary_expression.6
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.3:rax[rbp-16] binary_expression.5:[rbp-25] 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__parse_comparison_expression_211__5:
  # expression.4: @AST_Expression = phi(expression.3, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.4:[rbp-16] expression.3:[rbp-16] binary_expression.5:[rbp-25] 
  # return(expression.4)
  .loc 1 4268 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_comparison_expression_211__end
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] binary_expression.5:[rbp-25] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] binary_expression.5:[rbp-25] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.5:[rbp-25] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.5:[rbp-25] 
  # [discarded value]: binary_expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_211__14:
  # binary_expression.4: @AST_Binary_Expression = new(AST_Less_Than_Expression)
  .loc 1 4254 37
  mov rdi, 32
  call malloc
  lea rbx, AST_Less_Than_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.4:rax[rbp-25] 
  # jump(block.7)
  mov [rbp-25], rax
  jmp .LABEL__parse_comparison_expression_211__7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.4:[rbp-25] 
  # [discarded value]: binary_expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_211__8:
  # $11.1: @Matcher = load_struct_member(self.1, required_greater_than)
  .loc 1 4257 26
  mov rax, [rbp-8]
  add rax, 192
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $11.1:rax 
  # $12.1: @Token = call(consume.223, self.1, $11.1)
  .loc 1 4257 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # $13.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4258 30
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $13.1:rax 
  # $14.1: Boolean = call(matches.227, self.1, $13.1)
  .loc 1 4258 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $14.1:rax 
  # jump($14.1, block.9, block.11)
  test al, al
  jz .LABEL__parse_comparison_expression_211__11
.LABEL__parse_comparison_expression_211__9:
  # $16.1: @Matcher = load_struct_member(self.1, required_equals)
  .loc 1 4259 30
  mov rax, [rbp-8]
  add rax, 168
  mov rax, [rax]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $16.1:rax 
  # $17.1: @Token = call(consume.223, self.1, $16.1)
  .loc 1 4259 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $16.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # binary_expression.3: @AST_Binary_Expression = new(AST_Greater_Than_Or_Equals_Expression)
  .loc 1 4260 37
  mov rdi, 32
  call malloc
  lea rbx, AST_Greater_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.3:rax[rbp-25] 
  # jump(block.7)
  mov [rbp-25], rax
  jmp .LABEL__parse_comparison_expression_211__7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] 
  # [discarded value]: binary_expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_211__11:
  # binary_expression.2: @AST_Binary_Expression = new(AST_Greater_Than_Expression)
  .loc 1 4262 37
  mov rdi, 32
  call malloc
  lea rbx, AST_Greater_Than_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.2:rax[rbp-25] 
  # jump(block.7)
  mov [rbp-25], rax
  jmp .LABEL__parse_comparison_expression_211__7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] binary_expression.2:[rbp-25] 
  # [discarded value]: binary_expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_211__2:
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4245 84
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_greater_than)
  .loc 1 4245 105
  mov rbx, [rbp-8]
  add rbx, 192
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rax $7.1:rbx 
  # $5.2: Boolean = call(matches.228, self.1, $6.1, $7.1)
  .loc 1 4245 71
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:rax[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
  jmp .LABEL__parse_comparison_expression_211__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__parse_comparison_expression_211__end:
  mov rsp, rbp
  pop rbp
  ret

parse_comparison_expression_211__stack_frame_size: .word 32

  .loc 1 4273 1
  .text
parse_addition_expression_212:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_addition_expression_212__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_addition_expression_212__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_multiplication_expression.213, self.1)
  .loc 1 4274 19
  mov [rbp-8], rdi
  call parse_multiplication_expression_213
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_addition_expression_212__2:
  # expression.6: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4275 25
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_plus)
  .loc 1 4275 46
  mov rbx, [rbp-8]
  add rbx, 288
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $2.1:rax $3.1:rbx 
  # $5.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4275 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:rax 
  # jump($5.1, block.6, block.5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_addition_expression_212__5
.LABEL__parse_addition_expression_212__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 1 4275 12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_addition_expression_212__4
.LABEL__parse_addition_expression_212__3:
  # call(consume_space.222, self.1, 1)
  .loc 1 4276 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # $9.1: @Matcher = load_struct_member(self.1, required_plus)
  .loc 1 4278 26
  mov rax, [rbp-8]
  add rax, 288
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $9.1:rax 
  # $10.1: Boolean = call(matches.227, self.1, $9.1)
  .loc 1 4278 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $10.1:rax 
  # jump($10.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_addition_expression_212__9
.LABEL__parse_addition_expression_212__7:
  # $14.1: @Matcher = load_struct_member(self.1, required_plus)
  .loc 1 4279 26
  mov rax, [rbp-8]
  add rax, 288
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $14.1:rax 
  # $15.1: @Token = call(consume.223, self.1, $14.1)
  .loc 1 4279 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # binary_expression.3: @AST_Binary_Expression = new(AST_Add_Expression)
  .loc 1 4280 33
  mov rdi, 32
  call malloc
  lea rbx, AST_Add_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:rax 
  # jump(block.8)
  mov [rbp-25], rax
.LABEL__parse_addition_expression_212__8:
  # binary_expression.4: @AST_Binary_Expression = phi(binary_expression.2, binary_expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4285 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] 
  # $17.1: @AST_Expression = call(parse_multiplication_expression.213, self.1)
  .loc 1 4286 57
  mov rdi, [rbp-8]
  call parse_multiplication_expression_213
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] binary_expression.4:[rbp-25] $17.1:rax 
  # expression.3: @AST_Expression = call(init.259, binary_expression.4, expression.6, $17.1)
  .loc 1 4286 22
  mov rdi, [rbp-25]
  mov rsi, [rbp-16]
  mov rdx, rax
  call init_259
  # [discarded value]: binary_expression.4
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] expression.3:rax[rbp-16] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_212__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] 
  # [discarded value]: binary_expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_212__9:
  # $11.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 1 4282 26
  mov rax, [rbp-8]
  add rax, 200
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $11.1:rax 
  # $12.1: @Token = call(consume.223, self.1, $11.1)
  .loc 1 4282 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # binary_expression.2: @AST_Binary_Expression = new(AST_Substract_Expression)
  .loc 1 4283 33
  mov rdi, 32
  call malloc
  lea rbx, AST_Substract_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.2:rax[rbp-25] 
  # jump(block.8)
  mov [rbp-25], rax
  jmp .LABEL__parse_addition_expression_212__8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.2:[rbp-25] 
  # [discarded value]: binary_expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_212__4:
  # return(expression.6)
  .loc 1 4288 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_addition_expression_212__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_212__5:
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4275 82
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_hyphen)
  .loc 1 4275 103
  mov rbx, [rbp-8]
  add rbx, 200
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $6.1:rax $7.1:rbx 
  # $5.2: Boolean = call(matches.228, self.1, $6.1, $7.1)
  .loc 1 4275 69
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $5.2:rax[rbp-17] 
  # jump(block.6)
  mov [rbp-17], al
  jmp .LABEL__parse_addition_expression_212__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: expression.6
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_addition_expression_212__end:
  mov rsp, rbp
  pop rbp
  ret

parse_addition_expression_212__stack_frame_size: .word 32

  .loc 1 4293 1
  .text
parse_multiplication_expression_213:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_multiplication_expression_213__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_multiplication_expression_213__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_unary_expression.214, self.1)
  .loc 1 4294 19
  mov [rbp-8], rdi
  call parse_unary_expression_214
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_multiplication_expression_213__2:
  # expression.6: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4295 25
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_asterisk)
  .loc 1 4295 46
  mov rbx, [rbp-8]
  add rbx, 56
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $2.1:rax $3.1:rbx 
  # $5.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4295 12
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:rax 
  # jump($5.1, block.6, block.5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_multiplication_expression_213__5
.LABEL__parse_multiplication_expression_213__6:
  # $5.3: Boolean = phi($5.1, $5.2)
  .loc 1 4295 12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, block.3, block.4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_multiplication_expression_213__4
.LABEL__parse_multiplication_expression_213__3:
  # call(consume_space.222, self.1, 1)
  .loc 1 4296 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # $9.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 1 4298 26
  mov rax, [rbp-8]
  add rax, 304
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $9.1:rax 
  # $10.1: Boolean = call(matches.227, self.1, $9.1)
  .loc 1 4298 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $10.1:rax 
  # jump($10.1, block.7, block.9)
  test al, al
  jz .LABEL__parse_multiplication_expression_213__9
.LABEL__parse_multiplication_expression_213__7:
  # $14.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 1 4299 26
  mov rax, [rbp-8]
  add rax, 304
  mov rax, [rax]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $14.1:rax 
  # $15.1: @Token = call(consume.223, self.1, $14.1)
  .loc 1 4299 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # $16.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 1 4300 30
  mov rax, [rbp-8]
  add rax, 304
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $16.1:rax 
  # $17.1: Boolean = call(matches.227, self.1, $16.1)
  .loc 1 4300 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $17.1:rax 
  # jump($17.1, block.10, block.12)
  test al, al
  jz .LABEL__parse_multiplication_expression_213__12
.LABEL__parse_multiplication_expression_213__10:
  # $19.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 1 4301 30
  mov rax, [rbp-8]
  add rax, 304
  mov rax, [rax]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $19.1:rax 
  # $20.1: @Token = call(consume.223, self.1, $19.1)
  .loc 1 4301 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $19.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # binary_expression.4: @AST_Binary_Expression = new(AST_Modulo_Expression)
  .loc 1 4302 37
  mov rdi, 32
  call malloc
  lea rbx, AST_Modulo_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.4:rax 
  # jump(block.8)
  mov [rbp-25], rax
.LABEL__parse_multiplication_expression_213__8:
  # binary_expression.5: @AST_Binary_Expression = phi(binary_expression.2, binary_expression.4, binary_expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.5:[rbp-25] binary_expression.4:[rbp-25] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4310 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.5:[rbp-25] binary_expression.4:[rbp-25] 
  # $22.1: @AST_Expression = call(parse_unary_expression.214, self.1)
  .loc 1 4311 57
  mov rdi, [rbp-8]
  call parse_unary_expression_214
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.5:[rbp-25] $22.1:rax binary_expression.4:[rbp-25] 
  # expression.3: @AST_Expression = call(init.259, binary_expression.5, expression.6, $22.1)
  .loc 1 4311 22
  mov rdi, [rbp-25]
  mov rsi, [rbp-16]
  mov rdx, rax
  call init_259
  # [discarded value]: binary_expression.5
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] expression.3:rax[rbp-16] binary_expression.4:[rbp-25] 
  # jump(block.2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_213__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] binary_expression.4:[rbp-25] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.4:[rbp-25] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.4:[rbp-25] 
  # [discarded value]: binary_expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_213__12:
  # binary_expression.3: @AST_Binary_Expression = new(AST_Divide_Expression)
  .loc 1 4304 37
  mov rdi, 32
  call malloc
  lea rbx, AST_Divide_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:rax[rbp-25] 
  # jump(block.8)
  mov [rbp-25], rax
  jmp .LABEL__parse_multiplication_expression_213__8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.3:[rbp-25] 
  # [discarded value]: binary_expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_213__9:
  # $11.1: @Matcher = load_struct_member(self.1, required_asterisk)
  .loc 1 4307 26
  mov rax, [rbp-8]
  add rax, 56
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $11.1:rax 
  # $12.1: @Token = call(consume.223, self.1, $11.1)
  .loc 1 4307 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # binary_expression.2: @AST_Binary_Expression = new(AST_Multiply_Expression)
  .loc 1 4308 33
  mov rdi, 32
  call malloc
  lea rbx, AST_Multiply_Expression[rip]
  mov [rax], rbx
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.2:rax[rbp-25] 
  # jump(block.8)
  mov [rbp-25], rax
  jmp .LABEL__parse_multiplication_expression_213__8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] binary_expression.2:[rbp-25] 
  # [discarded value]: binary_expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_213__4:
  # return(expression.6)
  .loc 1 4313 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_multiplication_expression_213__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_213__5:
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4295 86
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $6.1:rax 
  # $7.1: @Matcher = load_struct_member(self.1, required_slash)
  .loc 1 4295 107
  mov rbx, [rbp-8]
  add rbx, 304
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $6.1:rax $7.1:rbx 
  # $5.2: Boolean = call(matches.228, self.1, $6.1, $7.1)
  .loc 1 4295 73
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $5.2:rax[rbp-17] 
  # jump(block.6)
  mov [rbp-17], al
  jmp .LABEL__parse_multiplication_expression_213__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.6:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: expression.6
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_multiplication_expression_213__end:
  mov rsp, rbp
  pop rbp
  ret

parse_multiplication_expression_213__stack_frame_size: .word 32

  .loc 1 4316 1
  .text
parse_unary_expression_214:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_unary_expression_214__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_unary_expression_214__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @AST_Expression = call(parse_cast_expression.215, self.1)
  .loc 1 4317 12
  call parse_cast_expression_215
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 4317 5
  jmp .LABEL__parse_unary_expression_214__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__parse_unary_expression_214__end:
  mov rsp, rbp
  pop rbp
  ret

parse_unary_expression_214__stack_frame_size: .word 0

  .loc 1 4322 1
  .text
parse_cast_expression_215:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_cast_expression_215__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_cast_expression_215__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_access_expression.216, self.1)
  .loc 1 4323 19
  mov [rbp-8], rdi
  call parse_access_expression_216
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4324 22
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_as)
  .loc 1 4324 43
  mov r15, [rbp-8]
  add r15, 48
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4324 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-16], rax
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_cast_expression_215__3
.LABEL__parse_cast_expression_215__2:
  # call(consume_space.222, self.1, 1)
  .loc 1 4325 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # $5.1: @Matcher = load_struct_member(self.1, required_as)
  .loc 1 4326 22
  mov rax, [rbp-8]
  add rax, 48
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @Token = call(consume.223, self.1, $5.1)
  .loc 1 4326 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4327 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4328 17
  mov rdi, [rbp-8]
  call parse_type_206
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] type.1:rax 
  # $8.1: @AST_Cast_Expression = call(create_ast_cast_expression.260, expression.1, type.1)
  .loc 1 4329 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_ast_cast_expression_260
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # return($8.1)
  .loc 1 4329 9
  jmp .LABEL__parse_cast_expression_215__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__parse_cast_expression_215__3:
  # return(expression.1)
  .loc 1 4331 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_cast_expression_215__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_cast_expression_215__end:
  mov rsp, rbp
  pop rbp
  ret

parse_cast_expression_215__stack_frame_size: .word 16

  .loc 1 4336 1
  .text
parse_access_expression_216:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_access_expression_216__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_access_expression_216__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = call(parse_primary_expression.218, self.1)
  .loc 1 4337 19
  mov [rbp-8], rdi
  call parse_primary_expression_218
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__parse_access_expression_216__2:
  # expression.2: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] 
  # old_expression.1: @AST_Expression = expression.2
  .loc 1 4339 9
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4340 26
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_dot)
  .loc 1 4340 47
  mov r15, [rbp-8]
  add r15, 136
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4340 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-24], rax
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.4, block.5)
  test al, al
  jz .LABEL__parse_access_expression_216__5
.LABEL__parse_access_expression_216__4:
  # call(consume_space.222, self.1, 0)
  .loc 1 4341 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # $5.1: @Matcher = load_struct_member(self.1, required_dot)
  .loc 1 4342 26
  mov rax, [rbp-8]
  add rax, 136
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $5.1:rax 
  # $6.1: @Token = call(consume.223, self.1, $5.1)
  .loc 1 4342 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4343 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # $7.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4344 87
  mov rax, [rbp-8]
  add rax, 208
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $7.1:rax 
  # $9.1: @Identifier_Token = call(consume.223, self.1, $7.1)
  .loc 1 4344 74
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] $9.1:rax 
  # expression.4: @AST_Expression = call(create_ast_member_access_expression.263, expression.2, $9.1)
  .loc 1 4344 26
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_ast_member_access_expression_263
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:rax[rbp-16] 
  # jump(block.5)
  mov [rbp-16], rax
.LABEL__parse_access_expression_216__5:
  # expression.11: @AST_Expression = phi(expression.2, expression.4)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # $11.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4346 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $11.1:rax 
  # $12.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4346 47
  mov rbx, [rbp-8]
  add rbx, 280
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $11.1:rax $12.1:rbx 
  # $13.1: Boolean = call(matches.228, self.1, $11.1, $12.1)
  .loc 1 4346 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $13.1:rax 
  # jump($13.1, block.6, block.7)
  test al, al
  jz .LABEL__parse_access_expression_216__7
.LABEL__parse_access_expression_216__6:
  # call(consume_space.222, self.1, 0)
  .loc 1 4347 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # $14.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4348 26
  mov rax, [rbp-8]
  add rax, 280
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] $14.1:rax 
  # $15.1: @Token = call(consume.223, self.1, $14.1)
  .loc 1 4348 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4349 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # call_arguments.1: @List = call(create_list.307)
  .loc 1 4350 31
  call create_list_307
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:rax 
  # $17.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4351 30
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:rax $17.1:rbx 
  # $18.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4351 51
  mov r15, [rbp-8]
  add r15, 96
  mov r15, [r15]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:rax $17.1:rbx $18.1:r15 
  # $19.1: Boolean = call(matches.228, self.1, $17.1, $18.1)
  .loc 1 4351 17
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-32], rax
  call matches_228
  # [discarded value]: $17.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $19.1:rax 
  # $20.1: Boolean = $19.1 == false
  .loc 1 4351 17
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $20.1:rbx 
  # jump($20.1, block.8, block.9)
  test bl, bl
  jz .LABEL__parse_access_expression_216__9
.LABEL__parse_access_expression_216__8:
  # call(parse_call_arguments.217, self.1, call_arguments.1)
  .loc 1 4352 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-32]
  call parse_call_arguments_217
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # jump(block.9)
.LABEL__parse_access_expression_216__9:
  # call(consume_space.222, self.1, 0)
  .loc 1 4354 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # $21.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4355 26
  mov rax, [rbp-8]
  add rax, 96
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] $21.1:rax 
  # $22.1: @Token = call(consume.223, self.1, $21.1)
  .loc 1 4355 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $21.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # expression.6: @AST_Expression = call(create_ast_call_expression.262, expression.11, call_arguments.1)
  .loc 1 4356 26
  mov rdi, [rbp-16]
  mov rsi, [rbp-32]
  call create_ast_call_expression_262
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.6:rax[rbp-16] 
  # jump(block.7)
  mov [rbp-16], rax
.LABEL__parse_access_expression_216__7:
  # expression.12: @AST_Expression = phi(expression.11, expression.6)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # $24.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4358 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] $24.1:rax expression.6:[rbp-16] 
  # $25.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 1 4358 47
  mov rbx, [rbp-8]
  add rbx, 272
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] $24.1:rax $25.1:rbx expression.6:[rbp-16] 
  # $26.1: Boolean = call(matches.228, self.1, $24.1, $25.1)
  .loc 1 4358 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] $26.1:rax expression.6:[rbp-16] 
  # jump($26.1, block.10, block.11)
  test al, al
  jz .LABEL__parse_access_expression_216__11
.LABEL__parse_access_expression_216__10:
  # call(consume_space.222, self.1, 0)
  .loc 1 4359 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # $27.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  .loc 1 4360 26
  mov rax, [rbp-8]
  add rax, 272
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] $27.1:rax 
  # $28.1: @Token = call(consume.223, self.1, $27.1)
  .loc 1 4360 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $27.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4361 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # index_expression.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4362 33
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4363 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-40], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] 
  # $30.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  .loc 1 4364 26
  mov rax, [rbp-8]
  add rax, 88
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] $30.1:rax 
  # $31.1: @Token = call(consume.223, self.1, $30.1)
  .loc 1 4364 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $30.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] index_expression.1:[rbp-40] 
  # expression.8: @AST_Expression = call(create_ast_array_access_expression.264, expression.12, index_expression.1)
  .loc 1 4365 26
  mov rdi, [rbp-16]
  mov rsi, [rbp-40]
  call create_ast_array_access_expression_264
  # [discarded value]: index_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:rax[rbp-16] 
  # jump(block.11)
  mov [rbp-16], rax
.LABEL__parse_access_expression_216__11:
  # expression.9: @AST_Expression = phi(expression.12, expression.8)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # $33.1: Boolean = expression.9 == old_expression.1
  .loc 1 4367 13
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-24]
  sete bl
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:rax[rbp-16] $33.1:rbx 
  # jump($33.1, block.3, block.2)
  test bl, bl
  mov [rbp-16], rax
  jz .LABEL__parse_access_expression_216__2
.LABEL__parse_access_expression_216__3:
  # return(expression.9)
  .loc 1 4371 5
  mov rax, [rbp-16]
  jmp .LABEL__parse_access_expression_216__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [discarded value]: expression.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] expression.6:[rbp-16] 
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] call_arguments.1:[rbp-32] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [discarded value]: expression.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] expression.4:[rbp-16] 
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-24] 
  # [discarded value]: expression.2
  # [discarded value]: old_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: self.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__parse_access_expression_216__end:
  mov rsp, rbp
  pop rbp
  ret

parse_access_expression_216__stack_frame_size: .word 48

  .loc 1 4376 1
  .text
parse_call_arguments_217:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_arguments_217__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_arguments_217__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  # $1.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4377 27
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call parse_expression_207
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:rax 
  # call(append.308, call_arguments.1, $1.1)
  .loc 1 4377 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_308
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.2)
.LABEL__parse_call_arguments_217__2:
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4378 25
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $2.1:rax 
  # $3.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 1 4378 46
  mov rbx, [rbp-16]
  add rbx, 120
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $2.1:rax $3.1:rbx 
  # $4.1: Boolean = call(matches.228, self.1, $2.1, $3.1)
  .loc 1 4378 12
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $4.1:rax 
  # jump($4.1, block.3, block.4)
  test al, al
  jz .LABEL__parse_call_arguments_217__4
.LABEL__parse_call_arguments_217__3:
  # call(consume_space.222, self.1, 0)
  .loc 1 4379 9
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_222
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # $5.1: @Matcher = load_struct_member(self.1, required_comma)
  .loc 1 4380 22
  mov rax, [rbp-16]
  add rax, 120
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $5.1:rax 
  # $6.1: @Token = call(consume.223, self.1, $5.1)
  .loc 1 4380 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call consume_223
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # call(consume_space.222, self.1, 1)
  .loc 1 4381 9
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_222
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # $7.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4382 31
  mov rdi, [rbp-16]
  call parse_expression_207
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $7.1:rax 
  # call(append.308, call_arguments.1, $7.1)
  .loc 1 4382 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_308
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__parse_call_arguments_217__2
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
.LABEL__parse_call_arguments_217__4:
  # return()
  jmp .LABEL__parse_call_arguments_217__end
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: call_arguments.1
  # [live values]: 
.LABEL__parse_call_arguments_217__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_arguments_217__stack_frame_size: .word 16

  .loc 1 4396 1
  .text
parse_primary_expression_218:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_primary_expression_218__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_primary_expression_218__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4397 22
  mov rax, rdi
  add rax, 208
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = call(matches.227, self.1, $1.1)
  .loc 1 4397 9
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_227
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.2, block.3)
  test al, al
  jz .LABEL__parse_primary_expression_218__3
.LABEL__parse_primary_expression_218__2:
  # $3.1: @Matcher = load_struct_member(self.1, required_identifier)
  .loc 1 4398 60
  mov rax, [rbp-8]
  add rax, 208
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $5.1: @Identifier_Token = call(consume.223, self.1, $3.1)
  .loc 1 4398 47
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # $6.1: @AST_Variable_Expression = call(create_ast_variable_expression.258, $5.1)
  .loc 1 4398 16
  mov rdi, rax
  call create_ast_variable_expression_258
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # return($6.1)
  .loc 1 4398 9
  jmp .LABEL__parse_primary_expression_218__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_218__3:
  # $7.1: @Matcher = load_struct_member(self.1, required_literal)
  .loc 1 4400 22
  mov rax, [rbp-8]
  add rax, 240
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # $8.1: Boolean = call(matches.227, self.1, $7.1)
  .loc 1 4400 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # jump($8.1, block.5, block.6)
  test al, al
  jz .LABEL__parse_primary_expression_218__6
.LABEL__parse_primary_expression_218__5:
  # $9.1: @Matcher = load_struct_member(self.1, required_literal)
  .loc 1 4401 59
  mov rax, [rbp-8]
  add rax, 240
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $9.1:rax 
  # $11.1: @Literal_Token = call(consume.223, self.1, $9.1)
  .loc 1 4401 46
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $11.1:rax 
  # $12.1: @AST_Literal_Expression = call(create_ast_literal_expression.257, $11.1)
  .loc 1 4401 16
  mov rdi, rax
  call create_ast_literal_expression_257
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $12.1:rax 
  # return($12.1)
  .loc 1 4401 9
  jmp .LABEL__parse_primary_expression_218__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_218__6:
  # $13.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4403 22
  mov rax, [rbp-8]
  add rax, 280
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $13.1:rax 
  # $14.1: Boolean = call(matches.227, self.1, $13.1)
  .loc 1 4403 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $14.1:rax 
  # jump($14.1, block.8, block.9)
  test al, al
  jz .LABEL__parse_primary_expression_218__9
.LABEL__parse_primary_expression_218__8:
  # $15.1: @Matcher = load_struct_member(self.1, required_open_paren)
  .loc 1 4404 22
  mov rax, [rbp-8]
  add rax, 280
  mov rax, [rax]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $15.1:rax 
  # $16.1: @Token = call(consume.223, self.1, $15.1)
  .loc 1 4404 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] 
  # call(consume_space.222, self.1, 0)
  .loc 1 4405 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] 
  # expression.1: @AST_Expression = call(parse_expression.207, self.1)
  .loc 1 4406 23
  mov rdi, [rbp-8]
  call parse_expression_207
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # call(consume_space.222, self.1, 0)
  .loc 1 4407 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # $18.1: @Matcher = load_struct_member(self.1, required_close_paren)
  .loc 1 4408 22
  mov rax, [rbp-8]
  add rax, 96
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $18.1:rax 
  # $19.1: @Token = call(consume.223, self.1, $18.1)
  .loc 1 4408 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # return(expression.1)
  .loc 1 4409 9
  mov rax, [rbp-16]
  jmp .LABEL__parse_primary_expression_218__end
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_218__9:
  # $20.1: @Matcher = load_struct_member(self.1, required_new)
  .loc 1 4411 22
  mov rax, [rbp-8]
  add rax, 256
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $20.1:rax 
  # $21.1: Boolean = call(matches.227, self.1, $20.1)
  .loc 1 4411 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call matches_227
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.11, block.12)
  test al, al
  jz .LABEL__parse_primary_expression_218__12
.LABEL__parse_primary_expression_218__11:
  # $22.1: @Matcher = load_struct_member(self.1, required_new)
  .loc 1 4412 31
  mov rax, [rbp-8]
  add rax, 256
  mov rax, [rax]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $22.1:rax 
  # token.1: @Token = call(consume.223, self.1, $22.1)
  .loc 1 4412 18
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token.1:rax 
  # call(consume_space.222, self.1, 1)
  .loc 1 4413 9
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_222
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # type.1: @AST_Type = call(parse_type.206, self.1)
  .loc 1 4414 17
  mov rdi, [rbp-8]
  call parse_type_206
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] type.1:rax 
  # $25.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4415 42
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] type.1:rax $25.1:rbx 
  # $26.1: @AST_New_Expression = call(create_ast_new_expression.261, $25.1, type.1)
  .loc 1 4415 16
  mov rdi, rbx
  mov rsi, rax
  call create_ast_new_expression_261
  # [discarded value]: type.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $26.1:rax 
  # return($26.1)
  .loc 1 4415 9
  jmp .LABEL__parse_primary_expression_218__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] 
.LABEL__parse_primary_expression_218__12:
  # return(null)
  .loc 1 4417 5
  xor rax, rax
  jmp .LABEL__parse_primary_expression_218__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_primary_expression_218__end:
  mov rsp, rbp
  pop rbp
  ret

parse_primary_expression_218__stack_frame_size: .word 16

  .loc 1 4420 1
  .text
abort_219:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_219__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_219__1:
  # self.1: @Parser = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # unexpected_token.1: @Token = load_variable(unexpected_token)
  # [live values]: unexpected_token.1:rsi 
  # stderr.5: @FILE = load_variable(stderr)
  # [live values]: unexpected_token.1:rsi stderr.5:stderr[rip] 
  # $1.1: @Source_Location = load_struct_member(unexpected_token.1, location)
  .loc 1 4421 18
  mov rax, rsi
  add rax, 16
  mov rax, [rax]
  # [live values]: unexpected_token.1:rsi stderr.5:stderr[rip] $1.1:rax 
  # $2.1: @FILE = call(write.305, stderr.5, $1.1)
  .loc 1 4421 5
  mov rdi, stderr[rip]
  mov [rbp-8], rsi
  mov rsi, rax
  call write_305
  # [discarded value]: stderr.5
  # [discarded value]: $1.1
  # [live values]: unexpected_token.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write.339, $2.1, ": Unexpected ")
  .loc 1 4421 5
  mov rdi, rax
  lea rsi, .LABEL__string_274[rip] # ": Unexpected "
  call write_339
  # [discarded value]: $2.1
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax 
  # $4.1: @Object_Type = load_struct_member(unexpected_token.1, object_type)
  .loc 1 4421 74
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax $4.1:rbx 
  # $5.1: @String = load_struct_member($4.1, name)
  .loc 1 4421 74
  mov r15, rbx
  add r15, 8
  # [discarded value]: $4.1
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax $5.1:r15 
  # $6.1: @FILE = call(write.339, $3.1, $5.1)
  .loc 1 4421 5
  mov rdi, rax
  mov rsi, r15
  call write_339
  # [discarded value]: $3.1
  # [discarded value]: $5.1
  # [live values]: unexpected_token.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(write.339, $6.1, ": ")
  .loc 1 4421 5
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $6.1
  # [live values]: unexpected_token.1:[rbp-8] $7.1:rax 
  # $8.1: @FILE = call(write.291, $7.1, unexpected_token.1)
  .loc 1 4421 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_291
  # [discarded value]: unexpected_token.1
  # [discarded value]: $7.1
  # [live values]: $8.1:rax 
  # $9.1: @FILE = call(end_line.342, $8.1)
  .loc 1 4421 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: 
  # call(abort.352)
  .loc 1 4422 5
  call abort
  # [live values]: 
.LABEL__abort_219__end:
  mov rsp, rbp
  pop rbp
  ret

abort_219__stack_frame_size: .word 16

  .loc 1 4425 1
  .text
consume_end_of_line_220:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_end_of_line_220__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_end_of_line_220__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4426 22
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 1 4426 43
  mov rbx, rdi
  add rbx, 128
  mov rbx, [rbx]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = call(matches.228, self.1, $1.1, $2.1)
  .loc 1 4426 9
  mov rsi, rax
  mov rdx, rbx
  mov [rbp-8], rdi
  call matches_228
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__consume_end_of_line_220__4
.LABEL__consume_end_of_line_220__2:
  # call(consume_space.222, self.1, 1)
  .loc 1 4427 9
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_222
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 1 4428 22
  mov rax, [rbp-8]
  add rax, 128
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # $5.1: @Token = call(consume.223, self.1, $4.1)
  .loc 1 4428 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # jump(block.3)
.LABEL__consume_end_of_line_220__3:
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 1 4432 18
  mov rax, [rbp-8]
  add rax, 160
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # $7.1: @Token = call(consume.223, self.1, $6.1)
  .loc 1 4432 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__consume_end_of_line_220__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__consume_end_of_line_220__4:
  # call(consume_space.222, self.1, 0)
  .loc 1 4430 9
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] 
  # jump(block.3)
  jmp .LABEL__consume_end_of_line_220__3
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_end_of_line_220__end:
  mov rsp, rbp
  pop rbp
  ret

consume_end_of_line_220__stack_frame_size: .word 16

  .loc 1 4435 1
  .text
consume_empty_line_221:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_empty_line_221__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_empty_line_221__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4436 22
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  .loc 1 4436 43
  mov rbx, rdi
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 1 4436 66
  mov r15, rdi
  add r15, 160
  mov r15, [r15]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches.229, self.1, $1.1, $2.1, $3.1)
  .loc 1 4436 9
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_229
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, block.2, block.3)
  test al, al
  jz .LABEL__consume_empty_line_221__3
.LABEL__consume_empty_line_221__2:
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4437 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # $6.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 1 4437 47
  mov rbx, [rbp-8]
  add rbx, 128
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $5.1:rax $6.1:rbx 
  # $7.1: Boolean = call(matches.228, self.1, $5.1, $6.1)
  .loc 1 4437 13
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, rbx
  call matches_228
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $7.1:rax 
  # jump($7.1, block.4, block.6)
  test al, al
  jz .LABEL__consume_empty_line_221__6
.LABEL__consume_empty_line_221__4:
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  .loc 1 4438 32
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # $9.1: Int = $8.1 * 4
  .loc 1 4438 32
  mov rbx, rax
  imul rbx, 4
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $9.1:rbx 
  # call(consume_space.222, self.1, $9.1)
  .loc 1 4438 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  call consume_space_222
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  # $10.1: @Matcher = load_struct_member(self.1, required_comment)
  .loc 1 4439 26
  mov rax, [rbp-8]
  add rax, 128
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $10.1:rax 
  # $11.1: @Token = call(consume.223, self.1, $10.1)
  .loc 1 4439 13
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  # jump(block.5)
.LABEL__consume_empty_line_221__5:
  # $12.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 1 4443 22
  mov rax, [rbp-8]
  add rax, 160
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $12.1:rax 
  # $13.1: @Token = call(consume.223, self.1, $12.1)
  .loc 1 4443 9
  mov rdi, [rbp-8]
  mov rsi, rax
  call consume_223
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  # return(true)
  .loc 1 4444 9
  mov al, 1
  jmp .LABEL__consume_empty_line_221__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__consume_empty_line_221__6:
  # call(consume_space.222, self.1, 0)
  .loc 1 4441 13
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_222
  # [live values]: self.1:[rbp-8] 
  # jump(block.5)
  jmp .LABEL__consume_empty_line_221__5
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
.LABEL__consume_empty_line_221__3:
  # return(false)
  .loc 1 4446 5
  mov al, 0
  jmp .LABEL__consume_empty_line_221__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_empty_line_221__end:
  mov rsp, rbp
  pop rbp
  ret

consume_empty_line_221__stack_frame_size: .word 16

  .loc 1 4449 1
  .text
consume_space_222:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_space_222__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_space_222__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expected_space_count.1: Int = load_variable(expected_space_count)
  # [live values]: self.1:rdi expected_space_count.1:rsi 
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4451 14
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi expected_space_count.1:rsi $1.1:rax 
  # token.1: @Token = load_struct_member($1.1, current_token)
  .loc 1 4451 14
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx 
  # Space_Token.2: @Object_Type = load_variable(Space_Token)
  lea rax, Space_Token[rip]
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx Space_Token.2:rax 
  # $3.1: Boolean = call(is.325, token.1, Space_Token.2)
  .loc 1 4452 9
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rbx
  call is_325
  # [discarded value]: Space_Token.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__consume_space_222__4
.LABEL__consume_space_222__2:
  # $4.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4453 9
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $4.1:rax 
  # $5.1: @Token = call(next_token.274, $4.1)
  .loc 1 4453 9
  mov rdi, rax
  call next_token_274
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # space.1: @Space_Token = token.1
  .loc 1 4454 18
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space.1:rax 
  # space_count.3: Int = load_struct_member(space.1, count)
  .loc 1 4455 23
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: space.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:rbx 
  # jump(block.3)
  mov [rbp-32], rbx
.LABEL__consume_space_222__3:
  # space_count.4: Int = phi(space_count.2, space_count.3)
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # $8.1: Boolean = space_count.4 != expected_space_count.1
  .loc 1 4459 9
  mov rax, [rbp-32]
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:rax[rbp-32] $8.1:rbx 
  # jump($8.1, block.5, block.6)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__consume_space_222__6
.LABEL__consume_space_222__5:
  # stderr.6: @FILE = load_variable(stderr)
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] stderr.6:stderr[rip] 
  # $9.1: @Source_Location = load_struct_member(token.1, location)
  .loc 1 4460 22
  mov rax, [rbp-24]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] stderr.6:stderr[rip] $9.1:rax 
  # $10.1: @FILE = call(write.305, stderr.6, $9.1)
  .loc 1 4460 9
  mov rdi, stderr[rip]
  mov rsi, rax
  call write_305
  # [discarded value]: stderr.6
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $10.1:rax 
  # $11.1: @FILE = call(write.339, $10.1, ": Consumed ")
  .loc 1 4460 9
  mov rdi, rax
  lea rsi, .LABEL__string_275[rip] # ": Consumed "
  call write_339
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $11.1:rax 
  # $12.1: @FILE = call(write.338, $11.1, space_count.4)
  .loc 1 4460 9
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_338
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write.339, $12.1, " spaces where ")
  .loc 1 4460 9
  mov rdi, rax
  lea rsi, .LABEL__string_276[rip] # " spaces where "
  call write_339
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $13.1:rax 
  # $14.1: @FILE = call(write.338, $13.1, expected_space_count.1)
  .loc 1 4460 9
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_338
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $14.1:rax 
  # $15.1: @FILE = call(write.339, $14.1, " are expected")
  .loc 1 4460 9
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # " are expected"
  call write_339
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] $15.1:rax 
  # $16.1: @FILE = call(end_line.342, $15.1)
  .loc 1 4460 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # jump(block.6)
.LABEL__consume_space_222__6:
  # return()
  jmp .LABEL__consume_space_222__end
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] space_count.4:[rbp-32] 
  # [discarded value]: space_count.4
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.3:[rbp-32] 
  # [discarded value]: space_count.3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
.LABEL__consume_space_222__4:
  # space_count.2: Int = 0
  .loc 1 4457 9
  xor rax, rax
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.2:rax[rbp-32] 
  # jump(block.3)
  mov [rbp-32], rax
  jmp .LABEL__consume_space_222__3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] space_count.2:[rbp-32] 
  # [discarded value]: space_count.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: expected_space_count.1
  # [discarded value]: token.1
  # [live values]: 
.LABEL__consume_space_222__end:
  mov rsp, rbp
  pop rbp
  ret

consume_space_222__stack_frame_size: .word 32

  .loc 1 4464 1
  .text
consume_223:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_223__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_223__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # $1.1: @Token = call(consume.224, self.1, first_matcher.1, null)
  .loc 1 4465 12
  xor rdx, rdx
  call consume_224
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 4465 5
  jmp .LABEL__consume_223__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_223__end:
  mov rsp, rbp
  pop rbp
  ret

consume_223__stack_frame_size: .word 0

  .loc 1 4468 1
  .text
consume_224:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_224__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_224__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # $1.1: @Token = call(consume.225, self.1, first_matcher.1, second_matcher.1, null)
  .loc 1 4469 12
  xor rcx, rcx
  call consume_225
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 4469 5
  jmp .LABEL__consume_224__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_224__end:
  mov rsp, rbp
  pop rbp
  ret

consume_224__stack_frame_size: .word 0

  .loc 1 4472 1
  .text
consume_225:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_225__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_225__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4473 14
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  # token.1: @Token = load_struct_member($1.1, current_token)
  .loc 1 4473 14
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  # first_token.1: @Token = token.1
  .loc 1 4474 5
  mov rax, rbx
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx first_token.1:rax 
  # $3.1: Boolean = call(accepts.239, first_matcher.1, token.1)
  .loc 1 4475 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_239
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__consume_225__4
.LABEL__consume_225__2:
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4476 17
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] $5.1:rax 
  # token.3: @Token = call(next_token.274, $5.1)
  .loc 1 4476 17
  mov rdi, rax
  call next_token_274
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:rax[rbp-48] 
  # jump(block.3)
  mov [rbp-48], rax
.LABEL__consume_225__3:
  # token.10: @Token = phi(token.3, token.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] 
  # $7.1: Boolean = second_matcher.1 != null
  .loc 1 4482 9
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] $7.1:rax 
  # jump($7.1, block.7, block.8)
  test al, al
  jz .LABEL__consume_225__8
.LABEL__consume_225__7:
  # $8.1: Boolean = call(accepts.239, second_matcher.1, token.10)
  .loc 1 4483 13
  mov rdi, [rbp-40]
  mov rsi, [rbp-48]
  call accepts_239
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] $8.1:rax 
  # jump($8.1, block.9, block.11)
  test al, al
  jz .LABEL__consume_225__11
.LABEL__consume_225__9:
  # $10.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4484 21
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] $10.1:rax 
  # token.6: @Token = call(next_token.274, $10.1)
  .loc 1 4484 21
  mov rdi, rax
  call next_token_274
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.6:rax[rbp-48] 
  # jump(block.8)
  mov [rbp-48], rax
.LABEL__consume_225__8:
  # token.11: @Token = phi(token.6, token.10)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # $12.1: Boolean = third_matcher.1 != null
  .loc 1 4491 9
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] $12.1:rax token.6:[rbp-48] 
  # jump($12.1, block.14, block.15)
  test al, al
  jz .LABEL__consume_225__15
.LABEL__consume_225__14:
  # $13.1: Boolean = call(accepts.239, third_matcher.1, token.11)
  .loc 1 4492 13
  mov rdi, [rbp-32]
  mov rsi, [rbp-48]
  call accepts_239
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] $13.1:rax 
  # jump($13.1, block.16, block.18)
  test al, al
  jz .LABEL__consume_225__18
.LABEL__consume_225__16:
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4493 21
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] $15.1:rax 
  # token.9: @Token = call(next_token.274, $15.1)
  .loc 1 4493 21
  mov rdi, rax
  call next_token_274
  # [discarded value]: $15.1
  # [discarded value]: token.9
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # jump(block.15)
.LABEL__consume_225__15:
  # return(first_token.1)
  .loc 1 4500 5
  mov rax, [rbp-24]
  jmp .LABEL__consume_225__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
.LABEL__consume_225__18:
  # $14.1: Boolean = load_struct_member(third_matcher.1, is_required)
  .loc 1 4495 17
  mov rax, [rbp-32]
  add rax, 8
  mov al, [rax]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] $14.1:rax 
  # jump($14.1, block.19, block.15)
  test al, al
  jz .LABEL__consume_225__15
.LABEL__consume_225__19:
  # call(abort.219, self.1, token.11)
  .loc 1 4496 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call abort_219
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.11:[rbp-48] token.6:[rbp-48] 
  # [discarded value]: token.11
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.6:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] token.6:[rbp-48] 
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] 
.LABEL__consume_225__11:
  # $9.1: Boolean = load_struct_member(second_matcher.1, is_required)
  .loc 1 4486 17
  mov rax, [rbp-40]
  add rax, 8
  mov al, [rax]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] $9.1:rax 
  # jump($9.1, block.12, block.8)
  test al, al
  jz .LABEL__consume_225__8
.LABEL__consume_225__12:
  # call(abort.219, self.1, token.10)
  .loc 1 4487 17
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call abort_219
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] token.10:[rbp-48] 
  # [discarded value]: token.10
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] token.3:[rbp-48] 
  # [discarded value]: token.3
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] 
.LABEL__consume_225__4:
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  .loc 1 4478 13
  mov rax, [rbp-16]
  add rax, 8
  mov al, [rax]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.5, block.3)
  test al, al
  jz .LABEL__consume_225__3
.LABEL__consume_225__5:
  # call(abort.219, self.1, token.1)
  .loc 1 4479 13
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  call abort_219
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] first_token.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: third_matcher.1
  # [discarded value]: token.1
  # [discarded value]: first_token.1
  # [live values]: 
.LABEL__consume_225__end:
  mov rsp, rbp
  pop rbp
  ret

consume_225__stack_frame_size: .word 48

  .loc 1 4503 1
  .text
matches_end_of_line_226:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_end_of_line_226__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_end_of_line_226__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  .loc 1 4504 25
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  .loc 1 4504 46
  mov rbx, rdi
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  .loc 1 4504 69
  mov r15, rdi
  add r15, 160
  mov r15, [r15]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  # $4.1: Boolean = call(matches.229, self.1, $1.1, $2.1, $3.1)
  .loc 1 4504 12
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_229
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # return($4.1)
  .loc 1 4504 5
  jmp .LABEL__matches_end_of_line_226__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__matches_end_of_line_226__end:
  mov rsp, rbp
  pop rbp
  ret

matches_end_of_line_226__stack_frame_size: .word 0

  .loc 1 4507 1
  .text
matches_227:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_227__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_227__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # $1.1: Boolean = call(matches.228, self.1, first_matcher.1, null)
  .loc 1 4508 12
  xor rdx, rdx
  call matches_228
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 4508 5
  jmp .LABEL__matches_227__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_227__end:
  mov rsp, rbp
  pop rbp
  ret

matches_227__stack_frame_size: .word 0

  .loc 1 4511 1
  .text
matches_228:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_228__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_228__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # $1.1: Boolean = call(matches.229, self.1, first_matcher.1, second_matcher.1, null)
  .loc 1 4512 12
  xor rcx, rcx
  call matches_229
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 4512 5
  jmp .LABEL__matches_228__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_228__end:
  mov rsp, rbp
  pop rbp
  ret

matches_228__stack_frame_size: .word 0

  .loc 1 4515 1
  .text
matches_229:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_229__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_229__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4516 14
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  # token.1: @Token = load_struct_member($1.1, current_token)
  .loc 1 4516 14
  mov rbx, rax
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  # peek_offset.1: Int = 0
  .loc 1 4517 5
  xor rax, rax
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx peek_offset.1:rax 
  # $3.1: Boolean = call(accepts.239, first_matcher.1, token.1)
  .loc 1 4518 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_239
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.2, block.4)
  test al, al
  jz .LABEL__matches_229__4
.LABEL__matches_229__2:
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4519 17
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $5.1:rax 
  # token.2: @Token = call(peek_token.273, $5.1, peek_offset.1)
  .loc 1 4519 17
  mov rdi, rax
  mov rsi, [rbp-24]
  call peek_token_273
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:rax[rbp-48] 
  # peek_offset.3: Int = peek_offset.1 + 1
  .loc 1 4520 23
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:rax[rbp-48] peek_offset.3:rbx[rbp-24] 
  # jump(block.3)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_229__3:
  # peek_offset.8: Int = phi(peek_offset.3, peek_offset.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] 
  # token.7: @Token = phi(token.2, token.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # $8.1: Boolean = second_matcher.1 != null
  .loc 1 4524 9
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:rax 
  # jump($8.1, block.8, block.9)
  test al, al
  jz .LABEL__matches_229__9
.LABEL__matches_229__8:
  # $9.1: Boolean = call(accepts.239, second_matcher.1, token.7)
  .loc 1 4525 13
  mov rdi, [rbp-40]
  mov rsi, [rbp-48]
  call accepts_239
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:rax 
  # jump($9.1, block.10, block.12)
  test al, al
  jz .LABEL__matches_229__12
.LABEL__matches_229__10:
  # $11.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4526 21
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $11.1:rax 
  # token.4: @Token = call(peek_token.273, $11.1, peek_offset.8)
  .loc 1 4526 21
  mov rdi, rax
  mov rsi, [rbp-24]
  call peek_token_273
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:rax[rbp-48] 
  # peek_offset.5: Int = peek_offset.8 + 1
  .loc 1 4527 27
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:rax[rbp-48] peek_offset.5:rbx[rbp-24] 
  # jump(block.9)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_229__9:
  # peek_offset.9: Int = phi(peek_offset.5, peek_offset.8)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # token.8: @Token = phi(token.4, token.7)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # $14.1: Boolean = third_matcher.1 != null
  .loc 1 4532 9
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:rax token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump($14.1, block.16, block.17)
  test al, al
  jz .LABEL__matches_229__17
.LABEL__matches_229__16:
  # $15.1: Boolean = call(accepts.239, third_matcher.1, token.8)
  .loc 1 4533 13
  mov rdi, [rbp-32]
  mov rsi, [rbp-48]
  call accepts_239
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:rax 
  # jump($15.1, block.18, block.20)
  test al, al
  jz .LABEL__matches_229__20
.LABEL__matches_229__18:
  # $17.1: @Scanner = load_struct_member(self.1, scanner)
  .loc 1 4534 21
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] $17.1:rax 
  # token.6: @Token = call(peek_token.273, $17.1, peek_offset.9)
  .loc 1 4534 21
  mov rdi, rax
  mov rsi, [rbp-24]
  call peek_token_273
  # [discarded value]: $17.1
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # peek_offset.7: Int = peek_offset.9 + 1
  .loc 1 4535 27
  mov rax, [rbp-24]
  add rax, 1
  # [discarded value]: peek_offset.7
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump(block.17)
.LABEL__matches_229__17:
  # return(true)
  .loc 1 4540 5
  mov al, 1
  jmp .LABEL__matches_229__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
.LABEL__matches_229__20:
  # $16.1: Boolean = load_struct_member(third_matcher.1, is_required)
  .loc 1 4536 20
  mov rax, [rbp-32]
  add rax, 8
  mov al, [rax]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] $16.1:rax 
  # jump($16.1, block.21, block.17)
  test al, al
  jz .LABEL__matches_229__17
.LABEL__matches_229__21:
  # return(false)
  .loc 1 4537 13
  mov al, 0
  jmp .LABEL__matches_229__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: peek_offset.9
  # [discarded value]: token.8
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: token.4
  # [discarded value]: peek_offset.5
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
.LABEL__matches_229__12:
  # $10.1: Boolean = load_struct_member(second_matcher.1, is_required)
  .loc 1 4528 20
  mov rax, [rbp-40]
  add rax, 8
  mov al, [rax]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $10.1:rax 
  # jump($10.1, block.13, block.9)
  test al, al
  jz .LABEL__matches_229__9
.LABEL__matches_229__13:
  # return(false)
  .loc 1 4529 13
  mov al, 0
  jmp .LABEL__matches_229__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [discarded value]: peek_offset.8
  # [discarded value]: token.7
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [discarded value]: token.2
  # [discarded value]: peek_offset.3
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
.LABEL__matches_229__4:
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  .loc 1 4521 16
  mov rax, [rbp-16]
  add rax, 8
  mov al, [rax]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:rax 
  # jump($4.1, block.5, block.3)
  test al, al
  jz .LABEL__matches_229__3
.LABEL__matches_229__5:
  # return(false)
  .loc 1 4522 9
  mov al, 0
  jmp .LABEL__matches_229__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: first_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: third_matcher.1
  # [discarded value]: token.1
  # [discarded value]: peek_offset.1
  # [live values]: 
.LABEL__matches_229__end:
  mov rsp, rbp
  pop rbp
  ret

matches_229__stack_frame_size: .word 48

  .loc 1 4550 1
  .text
create_comment_matcher_230:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_comment_matcher_230__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_comment_matcher_230__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @Comment_Matcher = new(Comment_Matcher)
  .loc 1 4551 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, Comment_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4552 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4553 5
  jmp .LABEL__create_comment_matcher_230__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_comment_matcher_230__end:
  mov rsp, rbp
  pop rbp
  ret

create_comment_matcher_230__stack_frame_size: .word 16

  .loc 1 4559 1
  .text
create_end_of_file_matcher_231:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_end_of_file_matcher_231__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_end_of_file_matcher_231__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @End_Of_File_Matcher = new(End_Of_File_Matcher)
  .loc 1 4560 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, End_Of_File_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4561 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4562 5
  jmp .LABEL__create_end_of_file_matcher_231__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_end_of_file_matcher_231__end:
  mov rsp, rbp
  pop rbp
  ret

create_end_of_file_matcher_231__stack_frame_size: .word 16

  .loc 1 4568 1
  .text
create_end_of_line_matcher_232:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_end_of_line_matcher_232__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_end_of_line_matcher_232__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @End_Of_Line_Matcher = new(End_Of_Line_Matcher)
  .loc 1 4569 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, End_Of_Line_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4570 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4571 5
  jmp .LABEL__create_end_of_line_matcher_232__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_end_of_line_matcher_232__end:
  mov rsp, rbp
  pop rbp
  ret

create_end_of_line_matcher_232__stack_frame_size: .word 16

  .loc 1 4577 1
  .text
create_identifier_matcher_233:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_identifier_matcher_233__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_identifier_matcher_233__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @Identifier_Matcher = new(Identifier_Matcher)
  .loc 1 4578 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, Identifier_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4579 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4580 5
  jmp .LABEL__create_identifier_matcher_233__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_identifier_matcher_233__end:
  mov rsp, rbp
  pop rbp
  ret

create_identifier_matcher_233__stack_frame_size: .word 16

  .loc 1 4587 1
  .text
create_keyword_matcher_234:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_keyword_matcher_234__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_keyword_matcher_234__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: required.1:rdi lexeme.1:rsi 
  # matcher.1: @Keyword_Matcher = new(Keyword_Matcher)
  .loc 1 4588 16
  mov [rbp-8], rsi
  mov [rbp-9], dil
  mov rdi, 17
  call malloc
  lea rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-9] lexeme.1:[rbp-8] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4589 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-9]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: lexeme.1:[rbp-8] matcher.1:rax 
  # store_struct_member(matcher.1, lexeme, lexeme.1)
  .loc 1 4590 5
  mov rbx, rax
  add rbx, 9
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: lexeme.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4591 5
  jmp .LABEL__create_keyword_matcher_234__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_keyword_matcher_234__end:
  mov rsp, rbp
  pop rbp
  ret

create_keyword_matcher_234__stack_frame_size: .word 16

  .loc 1 4597 1
  .text
create_literal_matcher_235:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_literal_matcher_235__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_literal_matcher_235__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @Literal_Matcher = new(Literal_Matcher)
  .loc 1 4598 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, Literal_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4599 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4600 5
  jmp .LABEL__create_literal_matcher_235__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_literal_matcher_235__end:
  mov rsp, rbp
  pop rbp
  ret

create_literal_matcher_235__stack_frame_size: .word 16

  .loc 1 4606 1
  .text
create_string_literal_matcher_236:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_string_literal_matcher_236__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_string_literal_matcher_236__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @String_Literal_Matcher = new(String_Literal_Matcher)
  .loc 1 4607 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, String_Literal_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4608 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4609 5
  jmp .LABEL__create_string_literal_matcher_236__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_string_literal_matcher_236__end:
  mov rsp, rbp
  pop rbp
  ret

create_string_literal_matcher_236__stack_frame_size: .word 16

  .loc 1 4616 1
  .text
create_other_matcher_237:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_other_matcher_237__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_other_matcher_237__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: required.1:rdi lexeme.1:rsi 
  # matcher.1: @Other_Matcher = new(Other_Matcher)
  .loc 1 4617 16
  mov [rbp-8], rsi
  mov [rbp-9], dil
  mov rdi, 17
  call malloc
  lea rbx, Other_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-9] lexeme.1:[rbp-8] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4618 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-9]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: lexeme.1:[rbp-8] matcher.1:rax 
  # store_struct_member(matcher.1, lexeme, lexeme.1)
  .loc 1 4619 5
  mov rbx, rax
  add rbx, 9
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: lexeme.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4620 5
  jmp .LABEL__create_other_matcher_237__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_other_matcher_237__end:
  mov rsp, rbp
  pop rbp
  ret

create_other_matcher_237__stack_frame_size: .word 16

  .loc 1 4626 1
  .text
create_space_matcher_238:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_space_matcher_238__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_space_matcher_238__1:
  # required.1: Boolean = load_variable(required)
  # [live values]: required.1:rdi 
  # matcher.1: @Space_Matcher = new(Space_Matcher)
  .loc 1 4627 16
  mov [rbp-1], dil
  mov rdi, 9
  call malloc
  lea rbx, Space_Matcher[rip]
  mov [rax], rbx
  # [live values]: required.1:[rbp-1] matcher.1:rax 
  # store_struct_member(matcher.1, is_required, required.1)
  .loc 1 4628 5
  mov rbx, rax
  add rbx, 8
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: required.1
  # [live values]: matcher.1:rax 
  # return(matcher.1)
  .loc 1 4629 5
  jmp .LABEL__create_space_matcher_238__end
  # [discarded value]: matcher.1
  # [live values]: 
.LABEL__create_space_matcher_238__end:
  mov rsp, rbp
  pop rbp
  ret

create_space_matcher_238__stack_frame_size: .word 16

  .loc 1 4632 1
  .text
accepts_239:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_239__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_239__1:
  # self.1: @Matcher = load_variable(self)
  # [live values]: self.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: self.1:rdi token.1:rsi 
  # Other_Matcher.2: @Object_Type = load_variable(Other_Matcher)
  lea rax, Other_Matcher[rip]
  # [live values]: self.1:rdi token.1:rsi Other_Matcher.2:rax 
  # $1.1: Boolean = call(is.325, self.1, Other_Matcher.2)
  .loc 1 4633 9
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call is_325
  # [discarded value]: Other_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__accepts_239__3
.LABEL__accepts_239__2:
  # self.1: @Other_Matcher = self.1
  .loc 1 4634 17
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax 
  # Other_Token.2: @Object_Type = load_variable(Other_Token)
  lea rbx, Other_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax Other_Token.2:rbx 
  # $3.1: Boolean = call(is.325, token.1, Other_Token.2)
  .loc 1 4635 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: Other_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $3.1:rax 
  # jump($3.1, block.4, block.5)
  test al, al
  jz .LABEL__accepts_239__5
.LABEL__accepts_239__4:
  # $4.1: @String = load_struct_member(token.1, lexeme)
  .loc 1 4636 20
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $4.1:rax 
  # $5.1: @String = load_struct_member(self.1, lexeme)
  .loc 1 4636 40
  mov rbx, [rbp-24]
  add rbx, 9
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $4.1:rax $5.1:rbx 
  # $6.1: Boolean = call(equals.335, $4.1, $5.1)
  .loc 1 4636 20
  mov rdi, rax
  mov rsi, rbx
  call equals_335
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $6.1:rax 
  # return($6.1)
  .loc 1 4636 13
  jmp .LABEL__accepts_239__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
.LABEL__accepts_239__5:
  # return(false)
  .loc 1 4638 9
  mov al, 0
  jmp .LABEL__accepts_239__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__3:
  # Space_Matcher.2: @Object_Type = load_variable(Space_Matcher)
  lea rax, Space_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Space_Matcher.2:rax 
  # $7.1: Boolean = call(is.325, self.1, Space_Matcher.2)
  .loc 1 4640 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Space_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__accepts_239__9
.LABEL__accepts_239__8:
  # Space_Token.3: @Object_Type = load_variable(Space_Token)
  lea rax, Space_Token[rip]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Space_Token.3:rax 
  # $8.1: Boolean = call(is.325, token.1, Space_Token.3)
  .loc 1 4641 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Space_Token.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 1 4641 9
  jmp .LABEL__accepts_239__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__9:
  # Identifier_Matcher.2: @Object_Type = load_variable(Identifier_Matcher)
  lea rax, Identifier_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Identifier_Matcher.2:rax 
  # $9.1: Boolean = call(is.325, self.1, Identifier_Matcher.2)
  .loc 1 4643 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Identifier_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.11, block.12)
  test al, al
  jz .LABEL__accepts_239__12
.LABEL__accepts_239__11:
  # Identifier_Token.2: @Object_Type = load_variable(Identifier_Token)
  lea rax, Identifier_Token[rip]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Identifier_Token.2:rax 
  # $10.1: Boolean = call(is.325, token.1, Identifier_Token.2)
  .loc 1 4644 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Identifier_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $10.1:rax 
  # return($10.1)
  .loc 1 4644 9
  jmp .LABEL__accepts_239__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__12:
  # Keyword_Matcher.2: @Object_Type = load_variable(Keyword_Matcher)
  lea rax, Keyword_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Keyword_Matcher.2:rax 
  # $11.1: Boolean = call(is.325, self.1, Keyword_Matcher.2)
  .loc 1 4646 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Keyword_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $11.1:rax 
  # jump($11.1, block.14, block.15)
  test al, al
  jz .LABEL__accepts_239__15
.LABEL__accepts_239__14:
  # self.1: @Keyword_Matcher = self.1
  .loc 1 4647 17
  mov rax, [rbp-16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax 
  # Keyword_Token.2: @Object_Type = load_variable(Keyword_Token)
  lea rbx, Keyword_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:rax Keyword_Token.2:rbx 
  # $13.1: Boolean = call(is.325, token.1, Keyword_Token.2)
  .loc 1 4648 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-24], rax
  call is_325
  # [discarded value]: Keyword_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $13.1:rax 
  # jump($13.1, block.16, block.17)
  test al, al
  jz .LABEL__accepts_239__17
.LABEL__accepts_239__16:
  # $14.1: @String = load_struct_member(token.1, lexeme)
  .loc 1 4649 20
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $14.1:rax 
  # $15.1: @String = load_struct_member(self.1, lexeme)
  .loc 1 4649 40
  mov rbx, [rbp-24]
  add rbx, 9
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $14.1:rax $15.1:rbx 
  # $16.1: Boolean = call(equals.335, $14.1, $15.1)
  .loc 1 4649 20
  mov rdi, rax
  mov rsi, rbx
  call equals_335
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] $16.1:rax 
  # return($16.1)
  .loc 1 4649 13
  jmp .LABEL__accepts_239__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
.LABEL__accepts_239__17:
  # return(false)
  .loc 1 4651 9
  mov al, 0
  jmp .LABEL__accepts_239__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] self.1:[rbp-24] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__15:
  # String_Literal_Matcher.2: @Object_Type = load_variable(String_Literal_Matcher)
  lea rax, String_Literal_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] String_Literal_Matcher.2:rax 
  # $17.1: Boolean = call(is.325, self.1, String_Literal_Matcher.2)
  .loc 1 4653 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: String_Literal_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $17.1:rax 
  # jump($17.1, block.20, block.21)
  test al, al
  jz .LABEL__accepts_239__21
.LABEL__accepts_239__20:
  # String_Token.5: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] String_Token.5:rax 
  # $18.1: Boolean = call(is.325, token.1, String_Token.5)
  .loc 1 4654 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: String_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $18.1:rax 
  # return($18.1)
  .loc 1 4654 9
  jmp .LABEL__accepts_239__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__21:
  # Literal_Matcher.2: @Object_Type = load_variable(Literal_Matcher)
  lea rax, Literal_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Literal_Matcher.2:rax 
  # $19.1: Boolean = call(is.325, self.1, Literal_Matcher.2)
  .loc 1 4656 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Literal_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $19.1:rax 
  # jump($19.1, block.23, block.24)
  test al, al
  jz .LABEL__accepts_239__24
.LABEL__accepts_239__23:
  # Integer_Token.7: @Object_Type = load_variable(Integer_Token)
  lea rax, Integer_Token[rip]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Integer_Token.7:rax 
  # $21.1: Boolean = call(is.325, token.1, Integer_Token.7)
  .loc 1 4657 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Integer_Token.7
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.32, block.31)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_239__31
.LABEL__accepts_239__32:
  # $23.1: Boolean = phi($21.1, $21.2)
  .loc 1 4657 16
  mov al, [rbp-17]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:rax 
  # jump($23.1, block.30, block.29)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_239__29
.LABEL__accepts_239__30:
  # $25.1: Boolean = phi($23.1, $23.2)
  .loc 1 4657 16
  mov al, [rbp-18]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:rax $23.1:[rbp-18] 
  # jump($25.1, block.28, block.27)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_239__27
.LABEL__accepts_239__28:
  # $27.1: Boolean = phi($25.1, $25.2)
  .loc 1 4657 16
  mov al, [rbp-19]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:rax $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump($27.1, block.26, block.25)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_239__25
.LABEL__accepts_239__26:
  # $27.3: Boolean = phi($27.1, $27.2)
  .loc 1 4657 16
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.3:[rbp-20] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # return($27.3)
  .loc 1 4657 9
  mov al, [rbp-20]
  jmp .LABEL__accepts_239__end
  # [discarded value]: $27.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
.LABEL__accepts_239__25:
  # Null_Token.5: @Object_Type = load_variable(Null_Token)
  lea rax, Null_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Null_Token.5:rax $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # $27.2: Boolean = call(is.325, token.1, Null_Token.5)
  .loc 1 4657 125
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Null_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.2:rax[rbp-20] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump(block.26)
  mov [rbp-20], al
  jmp .LABEL__accepts_239__26
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.2:[rbp-20] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $27.1:[rbp-20] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:[rbp-19] $23.1:[rbp-18] 
.LABEL__accepts_239__27:
  # Boolean_Token.5: @Object_Type = load_variable(Boolean_Token)
  lea rax, Boolean_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Boolean_Token.5:rax $25.1:[rbp-19] $23.1:[rbp-18] 
  # $25.2: Boolean = call(is.325, token.1, Boolean_Token.5)
  .loc 1 4657 98
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Boolean_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.2:rax[rbp-19] $25.1:[rbp-19] $23.1:[rbp-18] 
  # jump(block.28)
  mov [rbp-19], al
  jmp .LABEL__accepts_239__28
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.2:[rbp-19] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $25.1:[rbp-19] $23.1:[rbp-18] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:[rbp-18] 
.LABEL__accepts_239__29:
  # Character_Token.5: @Object_Type = load_variable(Character_Token)
  lea rax, Character_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] Character_Token.5:rax $23.1:[rbp-18] 
  # $23.2: Boolean = call(is.325, token.1, Character_Token.5)
  .loc 1 4657 69
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Character_Token.5
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.2:rax[rbp-18] $23.1:[rbp-18] 
  # jump(block.30)
  mov [rbp-18], al
  jmp .LABEL__accepts_239__30
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.2:[rbp-18] $23.1:[rbp-18] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $23.1:[rbp-18] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] 
.LABEL__accepts_239__31:
  # String_Token.6: @Object_Type = load_variable(String_Token)
  lea rax, String_Token[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] String_Token.6:rax 
  # $21.2: Boolean = call(is.325, token.1, String_Token.6)
  .loc 1 4657 43
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: String_Token.6
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $21.2:rax[rbp-17] 
  # jump(block.32)
  mov [rbp-17], al
  jmp .LABEL__accepts_239__32
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] $21.2:[rbp-17] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $21.1:[rbp-17] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__24:
  # End_Of_Line_Matcher.2: @Object_Type = load_variable(End_Of_Line_Matcher)
  lea rax, End_Of_Line_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_Line_Matcher.2:rax 
  # $29.1: Boolean = call(is.325, self.1, End_Of_Line_Matcher.2)
  .loc 1 4659 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: End_Of_Line_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $29.1:rax 
  # jump($29.1, block.34, block.35)
  test al, al
  jz .LABEL__accepts_239__35
.LABEL__accepts_239__34:
  # End_Of_Line_Token.2: @Object_Type = load_variable(End_Of_Line_Token)
  lea rax, End_Of_Line_Token[rip]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_Line_Token.2:rax 
  # $30.1: Boolean = call(is.325, token.1, End_Of_Line_Token.2)
  .loc 1 4660 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: End_Of_Line_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $30.1:rax 
  # return($30.1)
  .loc 1 4660 9
  jmp .LABEL__accepts_239__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__35:
  # Comment_Matcher.2: @Object_Type = load_variable(Comment_Matcher)
  lea rax, Comment_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Comment_Matcher.2:rax 
  # $31.1: Boolean = call(is.325, self.1, Comment_Matcher.2)
  .loc 1 4662 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Comment_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.37, block.38)
  test al, al
  jz .LABEL__accepts_239__38
.LABEL__accepts_239__37:
  # Comment_Token.2: @Object_Type = load_variable(Comment_Token)
  lea rax, Comment_Token[rip]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] Comment_Token.2:rax 
  # $32.1: Boolean = call(is.325, token.1, Comment_Token.2)
  .loc 1 4663 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: Comment_Token.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $32.1:rax 
  # return($32.1)
  .loc 1 4663 9
  jmp .LABEL__accepts_239__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__38:
  # End_Of_File_Matcher.2: @Object_Type = load_variable(End_Of_File_Matcher)
  lea rax, End_Of_File_Matcher[rip]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_File_Matcher.2:rax 
  # $33.1: Boolean = call(is.325, self.1, End_Of_File_Matcher.2)
  .loc 1 4665 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: End_Of_File_Matcher.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $33.1:rax 
  # jump($33.1, block.40, block.41)
  test al, al
  jz .LABEL__accepts_239__41
.LABEL__accepts_239__40:
  # End_Of_File_Token.3: @Object_Type = load_variable(End_Of_File_Token)
  lea rax, End_Of_File_Token[rip]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] End_Of_File_Token.3:rax 
  # $34.1: Boolean = call(is.325, token.1, End_Of_File_Token.3)
  .loc 1 4666 16
  mov rdi, [rbp-8]
  mov rsi, rax
  call is_325
  # [discarded value]: End_Of_File_Token.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $34.1:rax 
  # return($34.1)
  .loc 1 4666 9
  jmp .LABEL__accepts_239__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
.LABEL__accepts_239__41:
  # stderr.7: @FILE = load_variable(stderr)
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] stderr.7:stderr[rip] 
  # $35.1: @FILE = call(write.339, stderr.7, "Unsupported token matcher")
  .loc 1 4668 5
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_278[rip] # "Unsupported token matcher"
  call write_339
  # [discarded value]: stderr.7
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $35.1:rax 
  # $36.1: @FILE = call(end_line.342, $35.1)
  .loc 1 4668 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $35.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # call(abort.352)
  .loc 1 4669 5
  call abort
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token.1
  # [live values]: 
.LABEL__accepts_239__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_239__stack_frame_size: .word 32

  .loc 1 4684 1
  .text
create_compilation_unit_240:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_compilation_unit_240__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_compilation_unit_240__1:
  # compilation_unit.1: @Compilation_Unit = new(Compilation_Unit)
  .loc 1 4685 25
  mov rdi, 40
  call malloc
  # [live values]: compilation_unit.1:rax 
  # $2.1: @List = call(create_list.307)
  .loc 1 4686 32
  mov [rbp-8], rax
  call create_list_307
  # [live values]: compilation_unit.1:[rbp-8] $2.1:rax 
  # store_struct_member(compilation_unit.1, sources, $2.1)
  .loc 1 4686 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: compilation_unit.1:[rbp-8] 
  # $3.1: @List = call(create_list.307)
  .loc 1 4687 30
  call create_list_307
  # [live values]: compilation_unit.1:[rbp-8] $3.1:rax 
  # store_struct_member(compilation_unit.1, types, $3.1)
  .loc 1 4687 5
  mov rbx, [rbp-8]
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: compilation_unit.1:[rbp-8] 
  # $4.1: @List = call(create_list.307)
  .loc 1 4688 41
  call create_list_307
  # [live values]: compilation_unit.1:[rbp-8] $4.1:rax 
  # store_struct_member(compilation_unit.1, global_variables, $4.1)
  .loc 1 4688 5
  mov rbx, [rbp-8]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $4.1
  # [live values]: compilation_unit.1:[rbp-8] 
  # $5.1: @List = call(create_list.307)
  .loc 1 4689 34
  call create_list_307
  # [live values]: compilation_unit.1:[rbp-8] $5.1:rax 
  # store_struct_member(compilation_unit.1, functions, $5.1)
  .loc 1 4689 5
  mov rbx, [rbp-8]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: compilation_unit.1:[rbp-8] 
  # $6.1: @List = call(create_list.307)
  .loc 1 4690 35
  call create_list_307
  # [live values]: compilation_unit.1:[rbp-8] $6.1:rax 
  # store_struct_member(compilation_unit.1, statements, $6.1)
  .loc 1 4690 5
  mov rbx, [rbp-8]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $6.1
  # [live values]: compilation_unit.1:[rbp-8] 
  # return(compilation_unit.1)
  .loc 1 4691 5
  mov rax, [rbp-8]
  jmp .LABEL__create_compilation_unit_240__end
  # [discarded value]: compilation_unit.1
  # [live values]: 
.LABEL__create_compilation_unit_240__end:
  mov rsp, rbp
  pop rbp
  ret

create_compilation_unit_240__stack_frame_size: .word 16

  .loc 1 4710 1
  .text
create_ast_function_statement_241:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_function_statement_241__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_function_statement_241__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # parameters.1: @List = load_variable(parameters)
  # [live values]: name.1:rdi parameters.1:rsi 
  # return_type.1: @AST_Type = load_variable(return_type)
  # [live values]: name.1:rdi parameters.1:rsi return_type.1:rdx 
  # body.1: @AST_Block_Statement = load_variable(body)
  # [live values]: name.1:rdi parameters.1:rsi return_type.1:rdx body.1:rcx 
  # function_statement.1: @AST_Function_Statement = new(AST_Function_Statement)
  .loc 1 4711 27
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 56
  call malloc
  lea rbx, AST_Function_Statement[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-32] parameters.1:[rbp-24] return_type.1:[rbp-16] body.1:[rbp-8] function_statement.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4712 35
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-32] parameters.1:[rbp-24] return_type.1:[rbp-16] body.1:[rbp-8] function_statement.1:rax $2.1:rbx 
  # store_struct_member(function_statement.1, location, $2.1)
  .loc 1 4712 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-32] parameters.1:[rbp-24] return_type.1:[rbp-16] body.1:[rbp-8] function_statement.1:rax 
  # store_struct_member(function_statement.1, name, name.1)
  .loc 1 4713 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-32]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: parameters.1:[rbp-24] return_type.1:[rbp-16] body.1:[rbp-8] function_statement.1:rax 
  # store_struct_member(function_statement.1, parameters, parameters.1)
  .loc 1 4714 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: parameters.1
  # [live values]: return_type.1:[rbp-16] body.1:[rbp-8] function_statement.1:rax 
  # store_struct_member(function_statement.1, return_type, return_type.1)
  .loc 1 4715 5
  mov rbx, rax
  add rbx, 32
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: return_type.1
  # [live values]: body.1:[rbp-8] function_statement.1:rax 
  # store_struct_member(function_statement.1, body, body.1)
  .loc 1 4716 5
  mov rbx, rax
  add rbx, 40
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: body.1
  # [live values]: function_statement.1:rax 
  # store_struct_member(function_statement.1, ir_function, null)
  .loc 1 4717 5
  mov rbx, rax
  add rbx, 48
  mov QWORD PTR [rbx], 0
  # [live values]: function_statement.1:rax 
  # return(function_statement.1)
  .loc 1 4718 5
  jmp .LABEL__create_ast_function_statement_241__end
  # [discarded value]: function_statement.1
  # [live values]: 
.LABEL__create_ast_function_statement_241__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_function_statement_241__stack_frame_size: .word 32

  .loc 1 4727 1
  .text
create_ast_function_parameter_242:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_function_parameter_242__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_function_parameter_242__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: name.1:rdi type.1:rsi 
  # function_parameter.1: @AST_Function_Parameter = new(AST_Function_Parameter)
  .loc 1 4728 27
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: name.1:[rbp-16] type.1:[rbp-8] function_parameter.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4729 35
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-16] type.1:[rbp-8] function_parameter.1:rax $2.1:rbx 
  # store_struct_member(function_parameter.1, location, $2.1)
  .loc 1 4729 5
  mov r15, rax
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] type.1:[rbp-8] function_parameter.1:rax 
  # store_struct_member(function_parameter.1, name, name.1)
  .loc 1 4730 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: type.1:[rbp-8] function_parameter.1:rax 
  # store_struct_member(function_parameter.1, type, type.1)
  .loc 1 4731 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: type.1
  # [live values]: function_parameter.1:rax 
  # return(function_parameter.1)
  .loc 1 4732 5
  jmp .LABEL__create_ast_function_parameter_242__end
  # [discarded value]: function_parameter.1
  # [live values]: 
.LABEL__create_ast_function_parameter_242__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_function_parameter_242__stack_frame_size: .word 16

  .loc 1 4739 1
  .text
create_ast_block_statement_243:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_block_statement_243__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_block_statement_243__1:
  # open_brace.1: @Token = load_variable(open_brace)
  # [live values]: open_brace.1:rdi 
  # statements.1: @List = load_variable(statements)
  # [live values]: open_brace.1:rdi statements.1:rsi 
  # block_statement.1: @AST_Block_Statement = new(AST_Block_Statement)
  .loc 1 4740 24
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Block_Statement[rip]
  mov [rax], rbx
  # [live values]: open_brace.1:[rbp-16] statements.1:[rbp-8] block_statement.1:rax 
  # $2.1: @Source_Location = load_struct_member(open_brace.1, location)
  .loc 1 4741 32
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: open_brace.1
  # [live values]: statements.1:[rbp-8] block_statement.1:rax $2.1:rbx 
  # store_struct_member(block_statement.1, location, $2.1)
  .loc 1 4741 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: statements.1:[rbp-8] block_statement.1:rax 
  # store_struct_member(block_statement.1, statements, statements.1)
  .loc 1 4742 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: statements.1
  # [live values]: block_statement.1:rax 
  # return(block_statement.1)
  .loc 1 4743 5
  jmp .LABEL__create_ast_block_statement_243__end
  # [discarded value]: block_statement.1
  # [live values]: 
.LABEL__create_ast_block_statement_243__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_block_statement_243__stack_frame_size: .word 16

  .loc 1 4750 1
  .text
create_ast_expression_statement_244:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_expression_statement_244__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_expression_statement_244__1:
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: expression.1:rdi 
  # statement.1: @AST_Expression_Statement = new(AST_Expression_Statement)
  .loc 1 4751 18
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Expression_Statement[rip]
  mov [rax], rbx
  # [live values]: expression.1:[rbp-8] statement.1:rax 
  # $2.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 4752 26
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: expression.1:[rbp-8] statement.1:rax $2.1:rbx 
  # store_struct_member(statement.1, location, $2.1)
  .loc 1 4752 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: expression.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, expression, expression.1)
  .loc 1 4753 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: expression.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4754 5
  jmp .LABEL__create_ast_expression_statement_244__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_expression_statement_244__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_expression_statement_244__stack_frame_size: .word 16

  .loc 1 4763 1
  .text
create_ast_if_statement_245:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_if_statement_245__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_if_statement_245__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # condition_expression.1: @AST_Expression = load_variable(condition_expression)
  # [live values]: location.1:rdi condition_expression.1:rsi 
  # true_statement.1: @AST_Statement = load_variable(true_statement)
  # [live values]: location.1:rdi condition_expression.1:rsi true_statement.1:rdx 
  # false_statement.1: @AST_Statement = load_variable(false_statement)
  # [live values]: location.1:rdi condition_expression.1:rsi true_statement.1:rdx false_statement.1:rcx 
  # statement.1: @AST_If_Statement = new(AST_If_Statement)
  .loc 1 4764 18
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 40
  call malloc
  lea rbx, AST_If_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-32] condition_expression.1:[rbp-24] true_statement.1:[rbp-16] false_statement.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, location, location.1)
  .loc 1 4765 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-32]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: condition_expression.1:[rbp-24] true_statement.1:[rbp-16] false_statement.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, condition_expression, condition_expression.1)
  .loc 1 4766 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: condition_expression.1
  # [live values]: true_statement.1:[rbp-16] false_statement.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, true_statement, true_statement.1)
  .loc 1 4767 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: true_statement.1
  # [live values]: false_statement.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, false_statement, false_statement.1)
  .loc 1 4768 5
  mov rbx, rax
  add rbx, 32
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: false_statement.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4769 5
  jmp .LABEL__create_ast_if_statement_245__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_if_statement_245__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_if_statement_245__stack_frame_size: .word 32

  .loc 1 4776 1
  .text
create_ast_loop_statement_246:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_loop_statement_246__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_loop_statement_246__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # block.1: @AST_Block_Statement = load_variable(block)
  # [live values]: location.1:rdi block.1:rsi 
  # statement.1: @AST_Loop_Statement = new(AST_Loop_Statement)
  .loc 1 4777 18
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Loop_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] block.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, location, location.1)
  .loc 1 4778 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: block.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, block, block.1)
  .loc 1 4779 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: block.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4780 5
  jmp .LABEL__create_ast_loop_statement_246__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_loop_statement_246__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_loop_statement_246__stack_frame_size: .word 16

  .loc 1 4788 1
  .text
create_ast_while_statement_247:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_while_statement_247__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_while_statement_247__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # condition_expression.1: @AST_Expression = load_variable(condition_expression)
  # [live values]: location.1:rdi condition_expression.1:rsi 
  # block.1: @AST_Block_Statement = load_variable(block)
  # [live values]: location.1:rdi condition_expression.1:rsi block.1:rdx 
  # statement.1: @AST_While_Statement = new(AST_While_Statement)
  .loc 1 4789 18
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 32
  call malloc
  lea rbx, AST_While_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-24] condition_expression.1:[rbp-16] block.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, location, location.1)
  .loc 1 4790 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: condition_expression.1:[rbp-16] block.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, condition_expression, condition_expression.1)
  .loc 1 4791 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: condition_expression.1
  # [live values]: block.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, block, block.1)
  .loc 1 4792 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: block.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4793 5
  jmp .LABEL__create_ast_while_statement_247__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_while_statement_247__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_while_statement_247__stack_frame_size: .word 32

  .loc 1 4799 1
  .text
create_ast_break_statement_248:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_break_statement_248__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_break_statement_248__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # statement.1: @AST_Break_Statement = new(AST_Break_Statement)
  .loc 1 4800 18
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  lea rbx, AST_Break_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, location, location.1)
  .loc 1 4801 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4802 5
  jmp .LABEL__create_ast_break_statement_248__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_break_statement_248__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_break_statement_248__stack_frame_size: .word 16

  .loc 1 4809 1
  .text
create_ast_return_statement_249:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_return_statement_249__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_return_statement_249__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # value_expression.1: @AST_Expression = load_variable(value_expression)
  # [live values]: location.1:rdi value_expression.1:rsi 
  # statement.1: @AST_Return_Statement = new(AST_Return_Statement)
  .loc 1 4810 18
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Return_Statement[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] value_expression.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, location, location.1)
  .loc 1 4811 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: value_expression.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, value_expression, value_expression.1)
  .loc 1 4812 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: value_expression.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4813 5
  jmp .LABEL__create_ast_return_statement_249__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_return_statement_249__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_return_statement_249__stack_frame_size: .word 16

  .loc 1 4823 1
  .text
create_ast_variable_statement_250:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_variable_statement_250__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_variable_statement_250__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: name.1:rdi type.1:rsi 
  # value_expression.1: @AST_Expression = load_variable(value_expression)
  # [live values]: name.1:rdi type.1:rsi value_expression.1:rdx 
  # is_external.1: Boolean = load_variable(is_external)
  # [live values]: name.1:rdi type.1:rsi value_expression.1:rdx is_external.1:rcx 
  # statement.1: @AST_Variable_Statement = new(AST_Variable_Statement)
  .loc 1 4824 18
  mov [rbp-1], cl
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  mov rdi, 41
  call malloc
  lea rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-25] type.1:[rbp-17] value_expression.1:[rbp-9] is_external.1:[rbp-1] statement.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4825 26
  mov rbx, [rbp-25]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-25] type.1:[rbp-17] value_expression.1:[rbp-9] is_external.1:[rbp-1] statement.1:rax $2.1:rbx 
  # store_struct_member(statement.1, location, $2.1)
  .loc 1 4825 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-25] type.1:[rbp-17] value_expression.1:[rbp-9] is_external.1:[rbp-1] statement.1:rax 
  # store_struct_member(statement.1, name, name.1)
  .loc 1 4826 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-25]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: type.1:[rbp-17] value_expression.1:[rbp-9] is_external.1:[rbp-1] statement.1:rax 
  # store_struct_member(statement.1, type, type.1)
  .loc 1 4827 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-17]
  mov QWORD PTR [rbx], r15
  # [discarded value]: type.1
  # [live values]: value_expression.1:[rbp-9] is_external.1:[rbp-1] statement.1:rax 
  # store_struct_member(statement.1, value_expression, value_expression.1)
  .loc 1 4828 5
  mov rbx, rax
  add rbx, 32
  mov r15, [rbp-9]
  mov QWORD PTR [rbx], r15
  # [discarded value]: value_expression.1
  # [live values]: is_external.1:[rbp-1] statement.1:rax 
  # store_struct_member(statement.1, is_external, is_external.1)
  .loc 1 4829 5
  mov rbx, rax
  add rbx, 40
  mov r15b, [rbp-1]
  mov BYTE PTR [rbx], r15b
  # [discarded value]: is_external.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4830 5
  jmp .LABEL__create_ast_variable_statement_250__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_variable_statement_250__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_variable_statement_250__stack_frame_size: .word 32

  .loc 1 4839 1
  .text
create_ast_struct_statement_251:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_struct_statement_251__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_struct_statement_251__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # base_type.1: @AST_Type = load_variable(base_type)
  # [live values]: name.1:rdi base_type.1:rsi 
  # members.1: @List = load_variable(members)
  # [live values]: name.1:rdi base_type.1:rsi members.1:rdx 
  # statement.1: @AST_Struct_Statement = new(AST_Struct_Statement)
  .loc 1 4840 18
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 40
  call malloc
  lea rbx, AST_Struct_Statement[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-24] base_type.1:[rbp-16] members.1:[rbp-8] statement.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4841 26
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-24] base_type.1:[rbp-16] members.1:[rbp-8] statement.1:rax $2.1:rbx 
  # store_struct_member(statement.1, location, $2.1)
  .loc 1 4841 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-24] base_type.1:[rbp-16] members.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, name, name.1)
  .loc 1 4842 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: base_type.1:[rbp-16] members.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, base_type, base_type.1)
  .loc 1 4843 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: base_type.1
  # [live values]: members.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, members, members.1)
  .loc 1 4844 5
  mov rbx, rax
  add rbx, 32
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: members.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4845 5
  jmp .LABEL__create_ast_struct_statement_251__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_struct_statement_251__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_struct_statement_251__stack_frame_size: .word 32

  .loc 1 4854 1
  .text
create_ast_struct_member_252:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_struct_member_252__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_struct_member_252__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: name.1:rdi type.1:rsi 
  # struct_member.1: @AST_Struct_Member = new(AST_Struct_Member)
  .loc 1 4855 22
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  # [live values]: name.1:[rbp-16] type.1:[rbp-8] struct_member.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4856 30
  mov rbx, [rbp-16]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-16] type.1:[rbp-8] struct_member.1:rax $2.1:rbx 
  # store_struct_member(struct_member.1, location, $2.1)
  .loc 1 4856 5
  mov r15, rax
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] type.1:[rbp-8] struct_member.1:rax 
  # store_struct_member(struct_member.1, name, name.1)
  .loc 1 4857 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: type.1:[rbp-8] struct_member.1:rax 
  # store_struct_member(struct_member.1, type, type.1)
  .loc 1 4858 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: type.1
  # [live values]: struct_member.1:rax 
  # return(struct_member.1)
  .loc 1 4859 5
  jmp .LABEL__create_ast_struct_member_252__end
  # [discarded value]: struct_member.1
  # [live values]: 
.LABEL__create_ast_struct_member_252__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_struct_member_252__stack_frame_size: .word 16

  .loc 1 4868 1
  .text
create_ast_assignment_statement_253:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_assignment_statement_253__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_assignment_statement_253__1:
  # storage_expression.1: @AST_Expression = load_variable(storage_expression)
  # [live values]: storage_expression.1:rdi 
  # operator.1: @Other_Token = load_variable(operator)
  # [live values]: storage_expression.1:rdi operator.1:rsi 
  # value_expression.1: @AST_Expression = load_variable(value_expression)
  # [live values]: storage_expression.1:rdi operator.1:rsi value_expression.1:rdx 
  # statement.1: @AST_Assignment_Statement = new(AST_Assignment_Statement)
  .loc 1 4869 18
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 40
  call malloc
  lea rbx, AST_Assignment_Statement[rip]
  mov [rax], rbx
  # [live values]: storage_expression.1:[rbp-24] operator.1:[rbp-16] value_expression.1:[rbp-8] statement.1:rax 
  # $2.1: @Source_Location = load_struct_member(storage_expression.1, location)
  .loc 1 4870 26
  mov rbx, [rbp-24]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: storage_expression.1:[rbp-24] operator.1:[rbp-16] value_expression.1:[rbp-8] statement.1:rax $2.1:rbx 
  # store_struct_member(statement.1, location, $2.1)
  .loc 1 4870 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: storage_expression.1:[rbp-24] operator.1:[rbp-16] value_expression.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, storage_expression, storage_expression.1)
  .loc 1 4871 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: storage_expression.1
  # [live values]: operator.1:[rbp-16] value_expression.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, operator, operator.1)
  .loc 1 4872 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: operator.1
  # [live values]: value_expression.1:[rbp-8] statement.1:rax 
  # store_struct_member(statement.1, value_expression, value_expression.1)
  .loc 1 4873 5
  mov rbx, rax
  add rbx, 32
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: value_expression.1
  # [live values]: statement.1:rax 
  # return(statement.1)
  .loc 1 4874 5
  jmp .LABEL__create_ast_assignment_statement_253__end
  # [discarded value]: statement.1
  # [live values]: 
.LABEL__create_ast_assignment_statement_253__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_assignment_statement_253__stack_frame_size: .word 32

  .loc 1 4885 1
  .text
create_ast_named_type_254:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_named_type_254__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_named_type_254__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # type.1: @AST_Named_Type = new(AST_Named_Type)
  .loc 1 4886 13
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Named_Type[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-8] type.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4887 21
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-8] type.1:rax $2.1:rbx 
  # store_struct_member(type.1, location, $2.1)
  .loc 1 4887 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-8] type.1:rax 
  # store_struct_member(type.1, name, name.1)
  .loc 1 4888 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: type.1:rax 
  # return(type.1)
  .loc 1 4889 5
  jmp .LABEL__create_ast_named_type_254__end
  # [discarded value]: type.1
  # [live values]: 
.LABEL__create_ast_named_type_254__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_named_type_254__stack_frame_size: .word 16

  .loc 1 4896 1
  .text
create_ast_pointer_type_255:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_pointer_type_255__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_pointer_type_255__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # pointed_type.1: @AST_Type = load_variable(pointed_type)
  # [live values]: location.1:rdi pointed_type.1:rsi 
  # type.1: @AST_Pointer_Type = new(AST_Pointer_Type)
  .loc 1 4897 13
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] pointed_type.1:[rbp-8] type.1:rax 
  # store_struct_member(type.1, location, location.1)
  .loc 1 4898 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: pointed_type.1:[rbp-8] type.1:rax 
  # store_struct_member(type.1, pointed_type, pointed_type.1)
  .loc 1 4899 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: pointed_type.1
  # [live values]: type.1:rax 
  # return(type.1)
  .loc 1 4900 5
  jmp .LABEL__create_ast_pointer_type_255__end
  # [discarded value]: type.1
  # [live values]: 
.LABEL__create_ast_pointer_type_255__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_pointer_type_255__stack_frame_size: .word 16

  .loc 1 4908 1
  .text
create_ast_array_type_256:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_array_type_256__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_array_type_256__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # item_type.1: @AST_Type = load_variable(item_type)
  # [live values]: location.1:rdi item_type.1:rsi 
  # size_expression.1: @AST_Expression = load_variable(size_expression)
  # [live values]: location.1:rdi item_type.1:rsi size_expression.1:rdx 
  # type.1: @AST_Array_Type = new(AST_Array_Type)
  .loc 1 4909 13
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Type[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-24] item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:rax 
  # store_struct_member(type.1, location, location.1)
  .loc 1 4910 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: item_type.1:[rbp-16] size_expression.1:[rbp-8] type.1:rax 
  # store_struct_member(type.1, item_type, item_type.1)
  .loc 1 4911 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: item_type.1
  # [live values]: size_expression.1:[rbp-8] type.1:rax 
  # store_struct_member(type.1, size_expression, size_expression.1)
  .loc 1 4912 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: size_expression.1
  # [live values]: type.1:rax 
  # return(type.1)
  .loc 1 4913 5
  jmp .LABEL__create_ast_array_type_256__end
  # [discarded value]: type.1
  # [live values]: 
.LABEL__create_ast_array_type_256__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_array_type_256__stack_frame_size: .word 32

  .loc 1 4924 1
  .text
create_ast_literal_expression_257:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_literal_expression_257__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_literal_expression_257__1:
  # literal.1: @Literal_Token = load_variable(literal)
  # [live values]: literal.1:rdi 
  # expression.1: @AST_Literal_Expression = new(AST_Literal_Expression)
  .loc 1 4925 19
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Literal_Expression[rip]
  mov [rax], rbx
  # [live values]: literal.1:[rbp-8] expression.1:rax 
  # $2.1: @Source_Location = load_struct_member(literal.1, location)
  .loc 1 4926 27
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: literal.1:[rbp-8] expression.1:rax $2.1:rbx 
  # store_struct_member(expression.1, location, $2.1)
  .loc 1 4926 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: literal.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, literal, literal.1)
  .loc 1 4927 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: literal.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 4928 5
  jmp .LABEL__create_ast_literal_expression_257__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_literal_expression_257__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_literal_expression_257__stack_frame_size: .word 16

  .loc 1 4935 1
  .text
create_ast_variable_expression_258:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_variable_expression_258__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_variable_expression_258__1:
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: name.1:rdi 
  # expression.1: @AST_Variable_Expression = new(AST_Variable_Expression)
  .loc 1 4936 19
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_Variable_Expression[rip]
  mov [rax], rbx
  # [live values]: name.1:[rbp-8] expression.1:rax 
  # $2.1: @Source_Location = load_struct_member(name.1, location)
  .loc 1 4937 27
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: name.1:[rbp-8] expression.1:rax $2.1:rbx 
  # store_struct_member(expression.1, location, $2.1)
  .loc 1 4937 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, name, name.1)
  .loc 1 4938 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: name.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 4939 5
  jmp .LABEL__create_ast_variable_expression_258__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_variable_expression_258__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_variable_expression_258__stack_frame_size: .word 16

  .loc 1 4947 1
  .text
init_259:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_259__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_259__1:
  # self.1: @AST_Binary_Expression = load_variable(self)
  # [live values]: self.1:rdi 
  # left_expression.1: @AST_Expression = load_variable(left_expression)
  # [live values]: self.1:rdi left_expression.1:rsi 
  # right_expression.1: @AST_Expression = load_variable(right_expression)
  # [live values]: self.1:rdi left_expression.1:rsi right_expression.1:rdx 
  # $1.1: @Source_Location = load_struct_member(left_expression.1, location)
  .loc 1 4948 21
  mov rax, rsi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi left_expression.1:rsi right_expression.1:rdx $1.1:rax 
  # store_struct_member(self.1, location, $1.1)
  .loc 1 4948 5
  mov rbx, rdi
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi left_expression.1:rsi right_expression.1:rdx 
  # store_struct_member(self.1, left_expression, left_expression.1)
  .loc 1 4949 5
  mov rax, rdi
  add rax, 16
  mov QWORD PTR [rax], rsi
  # [discarded value]: left_expression.1
  # [live values]: self.1:rdi right_expression.1:rdx 
  # store_struct_member(self.1, right_expression, right_expression.1)
  .loc 1 4950 5
  mov rax, rdi
  add rax, 24
  mov QWORD PTR [rax], rdx
  # [discarded value]: right_expression.1
  # [live values]: self.1:rdi 
  # return(self.1)
  .loc 1 4951 5
  mov rax, rdi
  jmp .LABEL__init_259__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_259__end:
  mov rsp, rbp
  pop rbp
  ret

init_259__stack_frame_size: .word 0

  .loc 1 4998 1
  .text
create_ast_cast_expression_260:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_cast_expression_260__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_cast_expression_260__1:
  # value_expression.1: @AST_Expression = load_variable(value_expression)
  # [live values]: value_expression.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: value_expression.1:rdi type.1:rsi 
  # expression.1: @AST_Cast_Expression = new(AST_Cast_Expression)
  .loc 1 4999 19
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, AST_Cast_Expression[rip]
  mov [rax], rbx
  # [live values]: value_expression.1:[rbp-16] type.1:[rbp-8] expression.1:rax 
  # $2.1: @Source_Location = load_struct_member(value_expression.1, location)
  .loc 1 5000 27
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: value_expression.1:[rbp-16] type.1:[rbp-8] expression.1:rax $2.1:rbx 
  # store_struct_member(expression.1, location, $2.1)
  .loc 1 5000 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: value_expression.1:[rbp-16] type.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, value_expression, value_expression.1)
  .loc 1 5001 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: value_expression.1
  # [live values]: type.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, type, type.1)
  .loc 1 5002 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: type.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 5003 5
  jmp .LABEL__create_ast_cast_expression_260__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_cast_expression_260__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_cast_expression_260__stack_frame_size: .word 16

  .loc 1 5010 1
  .text
create_ast_new_expression_261:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_new_expression_261__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_new_expression_261__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: location.1:rdi type.1:rsi 
  # expression.1: @AST_New_Expression = new(AST_New_Expression)
  .loc 1 5011 19
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  lea rbx, AST_New_Expression[rip]
  mov [rax], rbx
  # [live values]: location.1:[rbp-16] type.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, location, location.1)
  .loc 1 5012 5
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: location.1
  # [live values]: type.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, type, type.1)
  .loc 1 5013 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: type.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 5014 5
  jmp .LABEL__create_ast_new_expression_261__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_new_expression_261__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_new_expression_261__stack_frame_size: .word 16

  .loc 1 5022 1
  .text
create_ast_call_expression_262:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_call_expression_262__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_call_expression_262__1:
  # callee.1: @AST_Expression = load_variable(callee)
  # [live values]: callee.1:rdi 
  # arguments.1: @List = load_variable(arguments)
  # [live values]: callee.1:rdi arguments.1:rsi 
  # expression.1: @AST_Call_Expression = new(AST_Call_Expression)
  .loc 1 5023 19
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, AST_Call_Expression[rip]
  mov [rax], rbx
  # [live values]: callee.1:[rbp-16] arguments.1:[rbp-8] expression.1:rax 
  # $2.1: @Source_Location = load_struct_member(callee.1, location)
  .loc 1 5024 27
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: callee.1:[rbp-16] arguments.1:[rbp-8] expression.1:rax $2.1:rbx 
  # store_struct_member(expression.1, location, $2.1)
  .loc 1 5024 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: callee.1:[rbp-16] arguments.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, callee, callee.1)
  .loc 1 5025 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: callee.1
  # [live values]: arguments.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, arguments, arguments.1)
  .loc 1 5026 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: arguments.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 5027 5
  jmp .LABEL__create_ast_call_expression_262__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_call_expression_262__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_call_expression_262__stack_frame_size: .word 16

  .loc 1 5038 1
  .text
create_ast_member_access_expression_263:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_member_access_expression_263__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_member_access_expression_263__1:
  # object_expression.1: @AST_Expression = load_variable(object_expression)
  # [live values]: object_expression.1:rdi 
  # member_name.1: @Identifier_Token = load_variable(member_name)
  # [live values]: object_expression.1:rdi member_name.1:rsi 
  # expression.1: @AST_Member_Access_Expression = new(AST_Member_Access_Expression)
  .loc 1 5039 19
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, AST_Member_Access_Expression[rip]
  mov [rax], rbx
  # [live values]: object_expression.1:[rbp-16] member_name.1:[rbp-8] expression.1:rax 
  # $2.1: @Source_Location = load_struct_member(object_expression.1, location)
  .loc 1 5040 27
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: object_expression.1:[rbp-16] member_name.1:[rbp-8] expression.1:rax $2.1:rbx 
  # store_struct_member(expression.1, location, $2.1)
  .loc 1 5040 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: object_expression.1:[rbp-16] member_name.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, object_expression, object_expression.1)
  .loc 1 5041 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: object_expression.1
  # [live values]: member_name.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, member_name, member_name.1)
  .loc 1 5042 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: member_name.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 5043 5
  jmp .LABEL__create_ast_member_access_expression_263__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_member_access_expression_263__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_member_access_expression_263__stack_frame_size: .word 16

  .loc 1 5051 1
  .text
create_ast_array_access_expression_264:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ast_array_access_expression_264__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ast_array_access_expression_264__1:
  # array_expression.1: @AST_Expression = load_variable(array_expression)
  # [live values]: array_expression.1:rdi 
  # index_expression.1: @AST_Expression = load_variable(index_expression)
  # [live values]: array_expression.1:rdi index_expression.1:rsi 
  # expression.1: @AST_Array_Access_Expression = new(AST_Array_Access_Expression)
  .loc 1 5052 19
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, AST_Array_Access_Expression[rip]
  mov [rax], rbx
  # [live values]: array_expression.1:[rbp-16] index_expression.1:[rbp-8] expression.1:rax 
  # $2.1: @Source_Location = load_struct_member(array_expression.1, location)
  .loc 1 5053 27
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: array_expression.1:[rbp-16] index_expression.1:[rbp-8] expression.1:rax $2.1:rbx 
  # store_struct_member(expression.1, location, $2.1)
  .loc 1 5053 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: array_expression.1:[rbp-16] index_expression.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, array_expression, array_expression.1)
  .loc 1 5054 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-16]
  mov QWORD PTR [rbx], r15
  # [discarded value]: array_expression.1
  # [live values]: index_expression.1:[rbp-8] expression.1:rax 
  # store_struct_member(expression.1, index_expression, index_expression.1)
  .loc 1 5055 5
  mov rbx, rax
  add rbx, 24
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: index_expression.1
  # [live values]: expression.1:rax 
  # return(expression.1)
  .loc 1 5056 5
  jmp .LABEL__create_ast_array_access_expression_264__end
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__create_ast_array_access_expression_264__end:
  mov rsp, rbp
  pop rbp
  ret

create_ast_array_access_expression_264__stack_frame_size: .word 16

  .loc 1 5059 1
  .text
write_265:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_265__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_265__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: file.1:rdi compilation_unit.1:rsi 
  # $1.1: @List = load_struct_member(compilation_unit.1, statements)
  .loc 1 5060 19
  mov rax, rsi
  add rax, 32
  mov rax, [rax]
  # [discarded value]: compilation_unit.1
  # [live values]: file.1:rdi $1.1:rax 
  # statements.1: @List_Iterator = call(create_iterator.319, $1.1)
  .loc 1 5060 19
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statements.1:rax 
  # jump(block.2)
  mov [rbp-16], rax
.LABEL__write_265__2:
  # $3.1: Boolean = call(has_next.322, statements.1)
  .loc 1 5061 12
  mov rdi, [rbp-16]
  call has_next_322
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:rax 
  # jump($3.1, block.3, block.4)
  test al, al
  jz .LABEL__write_265__4
.LABEL__write_265__3:
  # statement.1: @AST_Statement = call(next.323, statements.1)
  .loc 1 5062 22
  mov rdi, [rbp-16]
  call next_323
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] statement.1:rax 
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 5063 32
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] statement.1:rax $6.1:rbx 
  # $7.1: @FILE = call(write_source_line.267, file.1, $6.1, 0)
  .loc 1 5063 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  mov [rbp-24], rax
  call write_source_line_267
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] statement.1:[rbp-24] $7.1:rax 
  # $8.1: @FILE = call(write.266, $7.1, statement.1, 0)
  .loc 1 5063 9
  mov rdi, rax
  mov rsi, [rbp-24]
  xor rdx, rdx
  call write_266
  # [discarded value]: statement.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $8.1:rax 
  # $9.1: @FILE = call(end_line.342, $8.1)
  .loc 1 5063 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # jump(block.2)
  jmp .LABEL__write_265__2
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
.LABEL__write_265__4:
  # return(file.1)
  .loc 1 5065 5
  mov rax, [rbp-8]
  jmp .LABEL__write_265__end
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: statements.1
  # [live values]: 
.LABEL__write_265__end:
  mov rsp, rbp
  pop rbp
  ret

write_265__stack_frame_size: .word 32

  .loc 1 5068 1
  .text
write_266:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_266__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_266__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: file.1:rdi statement.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx 
  # AST_Assignment_Statement.3: @Object_Type = load_variable(AST_Assignment_Statement)
  lea rax, AST_Assignment_Statement[rip]
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx AST_Assignment_Statement.3:rax 
  # $1.1: Boolean = call(is.325, statement.1, AST_Assignment_Statement.3)
  .loc 1 5069 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  mov [rbp-24], rdx
  call is_325
  # [discarded value]: AST_Assignment_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_266__3
.LABEL__write_266__2:
  # statement.1: @AST_Assignment_Statement = statement.1
  .loc 1 5070 22
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $3.1: @AST_Expression = load_struct_member(statement.1, storage_expression)
  .loc 1 5071 27
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $3.1:rbx 
  # $4.1: @FILE = call(write.270, file.1, $3.1)
  .loc 1 5071 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_270
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $4.1:rax 
  # $5.1: @FILE = call(write.341, $4.1, ' ')
  .loc 1 5071 16
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $5.1:rax 
  # $6.1: @Other_Token = load_struct_member(statement.1, operator)
  .loc 1 5071 74
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $5.1:rax $6.1:rbx 
  # $7.1: @FILE = call(write.291, $5.1, $6.1)
  .loc 1 5071 16
  mov rdi, rax
  mov rsi, rbx
  call write_291
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $7.1:rax 
  # $8.1: @FILE = call(write.341, $7.1, ' ')
  .loc 1 5071 16
  mov rdi, rax
  mov sil, 32
  call write_341
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $8.1:rax 
  # $9.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 5071 111
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $8.1:rax $9.1:rbx 
  # $10.1: @FILE = call(write.270, $8.1, $9.1)
  .loc 1 5071 16
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $10.1:rax 
  # return($10.1)
  .loc 1 5071 9
  jmp .LABEL__write_266__end
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__3:
  # AST_Block_Statement.3: @Object_Type = load_variable(AST_Block_Statement)
  lea rax, AST_Block_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Block_Statement.3:rax 
  # $11.1: Boolean = call(is.325, statement.1, AST_Block_Statement.3)
  .loc 1 5074 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Block_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $11.1:rax 
  # jump($11.1, block.5, block.6)
  test al, al
  jz .LABEL__write_266__6
.LABEL__write_266__5:
  # $12.1: @FILE = call(write.341, file.1, '{')
  .loc 1 5075 9
  mov rdi, [rbp-8]
  mov sil, 123
  call write_341
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $12.1:rax 
  # $13.1: @FILE = call(end_line.342, $12.1)
  .loc 1 5075 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # $14.1: @AST_Block_Statement = statement.1
  .loc 1 5076 30
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $14.1:rax 
  # $15.1: @List = load_struct_member($14.1, statements)
  .loc 1 5076 30
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $15.1:rbx 
  # block_statements.1: @List_Iterator = call(create_iterator.319, $15.1)
  .loc 1 5076 30
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:rax 
  # jump(block.7)
  mov [rbp-32], rax
.LABEL__write_266__7:
  # $17.1: Boolean = call(has_next.322, block_statements.1)
  .loc 1 5077 16
  mov rdi, [rbp-32]
  call has_next_322
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $17.1:rax 
  # jump($17.1, block.8, block.9)
  test al, al
  jz .LABEL__write_266__9
.LABEL__write_266__8:
  # block_statement.1: @AST_Statement = call(next.323, block_statements.1)
  .loc 1 5078 32
  mov rdi, [rbp-32]
  call next_323
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax 
  # $20.1: @Source_Location = load_struct_member(block_statement.1, location)
  .loc 1 5079 36
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax $20.1:rbx 
  # $21.1: Int = alignment.1 + 1
  .loc 1 5079 62
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:rax $20.1:rbx $21.1:r15 
  # $22.1: @FILE = call(write_source_line.267, file.1, $20.1, $21.1)
  .loc 1 5079 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-40], rax
  call write_source_line_267
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:[rbp-40] $22.1:rax 
  # $23.1: Int = alignment.1 + 1
  .loc 1 5079 100
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] block_statement.1:[rbp-40] $22.1:rax $23.1:rbx 
  # $24.1: @FILE = call(write.266, $22.1, block_statement.1, $23.1)
  .loc 1 5079 13
  mov rdi, rax
  mov rsi, [rbp-40]
  mov rdx, rbx
  call write_266
  # [discarded value]: block_statement.1
  # [discarded value]: $22.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $24.1:rax 
  # $25.1: @FILE = call(end_line.342, $24.1)
  .loc 1 5079 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $24.1
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # jump(block.7)
  jmp .LABEL__write_266__7
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
.LABEL__write_266__9:
  # $26.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 5081 39
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $26.1:rax 
  # $27.1: @FILE = call(write_source_line.267, file.1, $26.1, alignment.1)
  .loc 1 5081 16
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  call write_source_line_267
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $27.1:rax 
  # $28.1: @FILE = call(write.341, $27.1, '}')
  .loc 1 5081 16
  mov rdi, rax
  mov sil, 125
  call write_341
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] $28.1:rax 
  # return($28.1)
  .loc 1 5081 9
  jmp .LABEL__write_266__end
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] block_statements.1:[rbp-32] 
  # [discarded value]: block_statements.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__6:
  # AST_Break_Statement.3: @Object_Type = load_variable(AST_Break_Statement)
  lea rax, AST_Break_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Break_Statement.3:rax 
  # $29.1: Boolean = call(is.325, statement.1, AST_Break_Statement.3)
  .loc 1 5084 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Break_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $29.1:rax 
  # jump($29.1, block.11, block.12)
  test al, al
  jz .LABEL__write_266__12
.LABEL__write_266__11:
  # $30.1: @FILE = call(write.339, file.1, "break")
  .loc 1 5085 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_248[rip] # "break"
  call write_339
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $30.1:rax 
  # return($30.1)
  .loc 1 5085 9
  jmp .LABEL__write_266__end
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__12:
  # AST_Expression_Statement.3: @Object_Type = load_variable(AST_Expression_Statement)
  lea rax, AST_Expression_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Expression_Statement.3:rax 
  # $31.1: Boolean = call(is.325, statement.1, AST_Expression_Statement.3)
  .loc 1 5088 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Expression_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $31.1:rax 
  # jump($31.1, block.14, block.15)
  test al, al
  jz .LABEL__write_266__15
.LABEL__write_266__14:
  # $32.1: @AST_Expression_Statement = statement.1
  .loc 1 5089 28
  mov rax, [rbp-16]
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $32.1:rax 
  # $33.1: @AST_Expression = load_struct_member($32.1, expression)
  .loc 1 5089 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $33.1:rbx 
  # $34.1: @FILE = call(write.270, file.1, $33.1)
  .loc 1 5089 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_270
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $34.1:rax 
  # return($34.1)
  .loc 1 5089 9
  jmp .LABEL__write_266__end
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__15:
  # AST_Function_Statement.2: @Object_Type = load_variable(AST_Function_Statement)
  lea rax, AST_Function_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Function_Statement.2:rax 
  # $35.1: Boolean = call(is.325, statement.1, AST_Function_Statement.2)
  .loc 1 5092 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Function_Statement.2
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $35.1:rax 
  # jump($35.1, block.17, block.18)
  test al, al
  jz .LABEL__write_266__18
.LABEL__write_266__17:
  # statement.1: @AST_Function_Statement = statement.1
  .loc 1 5093 22
  mov rax, [rbp-16]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $37.1: @Identifier_Token = load_struct_member(statement.1, name)
  .loc 1 5094 20
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $37.1:rbx 
  # $38.1: @FILE = call(write.291, file.1, $37.1)
  .loc 1 5094 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_291
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $38.1:rax 
  # $39.1: @FILE = call(write.339, $38.1, " :: (")
  .loc 1 5094 9
  mov rdi, rax
  lea rsi, .LABEL__string_166[rip] # " :: ("
  call write_339
  # [discarded value]: $38.1
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $40.1: @List = load_struct_member(statement.1, parameters)
  .loc 1 5095 32
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $40.1:rax 
  # function_parameters.1: @List_Iterator = call(create_iterator.319, $40.1)
  .loc 1 5095 32
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:rax 
  # $42.1: Boolean = call(has_next.322, function_parameters.1)
  .loc 1 5096 13
  mov rdi, rax
  mov [rbp-40], rax
  call has_next_322
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $42.1:rax 
  # jump($42.1, block.21, block.20)
  test al, al
  jz .LABEL__write_266__20
.LABEL__write_266__21:
  # $44.1: @AST_Function_Parameter = call(next.323, function_parameters.1)
  .loc 1 5098 28
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $44.1:rax 
  # $45.1: @FILE = call(write.268, file.1, $44.1)
  .loc 1 5098 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_268
  # [discarded value]: $44.1
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # $46.1: Boolean = call(has_next.322, function_parameters.1)
  .loc 1 5099 21
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $46.1:rax 
  # jump($46.1, block.23, block.20)
  test al, al
  jz .LABEL__write_266__20
.LABEL__write_266__23:
  # $47.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 5100 21
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $46.1
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # jump(block.21)
  jmp .LABEL__write_266__21
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
.LABEL__write_266__20:
  # $48.1: @FILE = call(write.339, file.1, ") -> ")
  .loc 1 5106 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_215[rip] # ") -> "
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $48.1:rax 
  # $49.1: @AST_Type = load_struct_member(statement.1, return_type)
  .loc 1 5106 35
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $48.1:rax $49.1:rbx 
  # $50.1: @FILE = call(write.269, $48.1, $49.1)
  .loc 1 5106 9
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $48.1
  # [discarded value]: $49.1
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # $51.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  .loc 1 5107 13
  mov rax, [rbp-32]
  add rax, 40
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $51.1:rax 
  # $52.1: Boolean = $51.1 == null
  .loc 1 5107 13
  cmp rax, 0
  sete bl
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $52.1:rbx 
  # jump($52.1, block.27, block.28)
  test bl, bl
  jz .LABEL__write_266__28
.LABEL__write_266__27:
  # return(file.1)
  .loc 1 5108 13
  mov rax, [rbp-8]
  jmp .LABEL__write_266__end
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
.LABEL__write_266__28:
  # $53.1: @FILE = call(write.339, file.1, " ")
  .loc 1 5110 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_279[rip] # " "
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $53.1:rax 
  # $54.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  .loc 1 5110 38
  mov rbx, [rbp-32]
  add rbx, 40
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $53.1:rax $54.1:rbx 
  # $55.1: @FILE = call(write.266, $53.1, $54.1, alignment.1)
  .loc 1 5110 16
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_266
  # [discarded value]: $53.1
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] $55.1:rax 
  # return($55.1)
  .loc 1 5110 9
  jmp .LABEL__write_266__end
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] function_parameters.1:[rbp-40] 
  # [discarded value]: statement.1
  # [discarded value]: function_parameters.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__18:
  # AST_If_Statement.3: @Object_Type = load_variable(AST_If_Statement)
  lea rax, AST_If_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_If_Statement.3:rax 
  # $56.1: Boolean = call(is.325, statement.1, AST_If_Statement.3)
  .loc 1 5113 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_If_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $56.1:rax 
  # jump($56.1, block.31, block.32)
  test al, al
  jz .LABEL__write_266__32
.LABEL__write_266__31:
  # statement.1: @AST_If_Statement = statement.1
  .loc 1 5114 22
  mov rax, [rbp-16]
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $58.1: @FILE = call(write.339, file.1, "if (")
  .loc 1 5115 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_280[rip] # "if ("
  mov [rbp-32], rax
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $58.1:rax 
  # $59.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 1 5115 34
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $58.1:rax $59.1:rbx 
  # $60.1: @FILE = call(write.270, $58.1, $59.1)
  .loc 1 5115 9
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $58.1
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $60.1:rax 
  # $61.1: @FILE = call(write.339, $60.1, ") ")
  .loc 1 5115 9
  mov rdi, rax
  lea rsi, .LABEL__string_281[rip] # ") "
  call write_339
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $61.1:rax 
  # $62.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  .loc 1 5115 84
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $61.1:rax $62.1:rbx 
  # $63.1: @FILE = call(write.266, $61.1, $62.1, alignment.1)
  .loc 1 5115 9
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_266
  # [discarded value]: $61.1
  # [discarded value]: $62.1
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $64.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 1 5116 13
  mov rax, [rbp-32]
  add rax, 32
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $64.1:rax 
  # $65.1: Boolean = $64.1 != null
  .loc 1 5116 13
  cmp rax, 0
  setne bl
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $65.1:rbx 
  # jump($65.1, block.33, block.34)
  test bl, bl
  jz .LABEL__write_266__34
.LABEL__write_266__33:
  # $66.1: @FILE = call(write.339, file.1, " else ")
  .loc 1 5117 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_282[rip] # " else "
  call write_339
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $66.1:rax 
  # $67.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  .loc 1 5117 40
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $66.1:rax $67.1:rbx 
  # $68.1: @FILE = call(write.266, $66.1, $67.1, alignment.1)
  .loc 1 5117 13
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_266
  # [discarded value]: $66.1
  # [discarded value]: $67.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.34)
.LABEL__write_266__34:
  # return(file.1)
  .loc 1 5119 9
  mov rax, [rbp-8]
  jmp .LABEL__write_266__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__32:
  # AST_Loop_Statement.3: @Object_Type = load_variable(AST_Loop_Statement)
  lea rax, AST_Loop_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Loop_Statement.3:rax 
  # $69.1: Boolean = call(is.325, statement.1, AST_Loop_Statement.3)
  .loc 1 5122 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Loop_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $69.1:rax 
  # jump($69.1, block.36, block.37)
  test al, al
  jz .LABEL__write_266__37
.LABEL__write_266__36:
  # statement.1: @AST_Loop_Statement = statement.1
  .loc 1 5123 22
  mov rax, [rbp-16]
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $71.1: @FILE = call(write.339, file.1, "loop ")
  .loc 1 5124 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_283[rip] # "loop "
  mov [rbp-32], rax
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $71.1:rax 
  # $72.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 1 5124 42
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $71.1:rax $72.1:rbx 
  # $73.1: @FILE = call(write.266, $71.1, $72.1, alignment.1)
  .loc 1 5124 16
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_266
  # [discarded value]: $71.1
  # [discarded value]: $72.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $73.1:rax 
  # return($73.1)
  .loc 1 5124 9
  jmp .LABEL__write_266__end
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__37:
  # AST_Return_Statement.3: @Object_Type = load_variable(AST_Return_Statement)
  lea rax, AST_Return_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Return_Statement.3:rax 
  # $74.1: Boolean = call(is.325, statement.1, AST_Return_Statement.3)
  .loc 1 5127 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Return_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $74.1:rax 
  # jump($74.1, block.39, block.40)
  test al, al
  jz .LABEL__write_266__40
.LABEL__write_266__39:
  # statement.1: @AST_Return_Statement = statement.1
  .loc 1 5128 22
  mov rax, [rbp-16]
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $76.1: @FILE = call(write.339, file.1, "return")
  .loc 1 5129 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_239[rip] # "return"
  mov [rbp-32], rax
  call write_339
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $77.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 5130 13
  mov rax, [rbp-32]
  add rax, 16
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $77.1:rax 
  # $78.1: Boolean = $77.1 != null
  .loc 1 5130 13
  cmp rax, 0
  setne bl
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $78.1:rbx 
  # jump($78.1, block.41, block.42)
  test bl, bl
  jz .LABEL__write_266__42
.LABEL__write_266__41:
  # $79.1: @FILE = call(write.339, file.1, " ")
  .loc 1 5131 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_279[rip] # " "
  call write_339
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $79.1:rax 
  # $80.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 5131 35
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $79.1:rax $80.1:rbx 
  # $81.1: @FILE = call(write.270, $79.1, $80.1)
  .loc 1 5131 13
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $79.1
  # [discarded value]: $80.1
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.42)
.LABEL__write_266__42:
  # return(file.1)
  .loc 1 5133 9
  mov rax, [rbp-8]
  jmp .LABEL__write_266__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__40:
  # AST_Struct_Statement.4: @Object_Type = load_variable(AST_Struct_Statement)
  lea rax, AST_Struct_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Struct_Statement.4:rax 
  # $82.1: Boolean = call(is.325, statement.1, AST_Struct_Statement.4)
  .loc 1 5136 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Struct_Statement.4
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $82.1:rax 
  # jump($82.1, block.44, block.45)
  test al, al
  jz .LABEL__write_266__45
.LABEL__write_266__44:
  # statement.1: @AST_Struct_Statement = statement.1
  .loc 1 5137 22
  mov rax, [rbp-16]
  # [discarded value]: $82.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $84.1: @Identifier_Token = load_struct_member(statement.1, name)
  .loc 1 5138 20
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $84.1:rbx 
  # $85.1: @FILE = call(write.291, file.1, $84.1)
  .loc 1 5138 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-32], rax
  call write_291
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $85.1:rax 
  # $86.1: @FILE = call(write.339, $85.1, " :: struct")
  .loc 1 5138 9
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # " :: struct"
  call write_339
  # [discarded value]: $85.1
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $87.1: @AST_Type = load_struct_member(statement.1, base_type)
  .loc 1 5139 13
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $87.1:rax 
  # $88.1: Boolean = $87.1 != null
  .loc 1 5139 13
  cmp rax, 0
  setne bl
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $88.1:rbx 
  # jump($88.1, block.46, block.47)
  test bl, bl
  jz .LABEL__write_266__47
.LABEL__write_266__46:
  # $89.1: @FILE = call(write.339, file.1, " : ")
  .loc 1 5140 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_285[rip] # " : "
  call write_339
  # [discarded value]: $88.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $89.1:rax 
  # $90.1: @AST_Type = load_struct_member(statement.1, base_type)
  .loc 1 5140 37
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $89.1:rax $90.1:rbx 
  # $91.1: @FILE = call(write.269, $89.1, $90.1)
  .loc 1 5140 13
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $89.1
  # [discarded value]: $90.1
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.47)
.LABEL__write_266__47:
  # $92.1: @List = load_struct_member(statement.1, members)
  .loc 1 5142 13
  mov rax, [rbp-32]
  add rax, 32
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $92.1:rax 
  # $93.1: Boolean = $92.1 == null
  .loc 1 5142 13
  cmp rax, 0
  sete bl
  # [discarded value]: $92.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $93.1:rbx 
  # jump($93.1, block.48, block.49)
  test bl, bl
  jz .LABEL__write_266__49
.LABEL__write_266__48:
  # return(file.1)
  .loc 1 5143 13
  mov rax, [rbp-8]
  jmp .LABEL__write_266__end
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
.LABEL__write_266__49:
  # $94.1: @FILE = call(write.339, file.1, " {")
  .loc 1 5145 9
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_216[rip] # " {"
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $94.1:rax 
  # $95.1: @FILE = call(end_line.342, $94.1)
  .loc 1 5145 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $94.1
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $96.1: @List = load_struct_member(statement.1, members)
  .loc 1 5146 20
  mov rax, [rbp-32]
  add rax, 32
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $96.1:rax 
  # members.1: @List_Iterator = call(create_iterator.319, $96.1)
  .loc 1 5146 20
  mov rdi, rax
  call create_iterator_319
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:rax 
  # jump(block.51)
  mov [rbp-40], rax
.LABEL__write_266__51:
  # $98.1: Boolean = call(has_next.322, members.1)
  .loc 1 5147 16
  mov rdi, [rbp-40]
  call has_next_322
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $98.1:rax 
  # jump($98.1, block.52, block.53)
  test al, al
  jz .LABEL__write_266__53
.LABEL__write_266__52:
  # member.1: @AST_Struct_Member = call(next.323, members.1)
  .loc 1 5148 23
  mov rdi, [rbp-40]
  call next_323
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rax 
  # $101.1: @Source_Location = load_struct_member(member.1, location)
  .loc 1 5149 36
  mov rbx, rax
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rax $101.1:rbx 
  # $102.1: Int = alignment.1 + 1
  .loc 1 5149 53
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:rax $101.1:rbx $102.1:r15 
  # $103.1: @FILE = call(write_source_line.267, file.1, $101.1, $102.1)
  .loc 1 5149 13
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-48], rax
  call write_source_line_267
  # [discarded value]: $101.1
  # [discarded value]: $102.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $103.1:rax 
  # $104.1: @Identifier_Token = load_struct_member(member.1, name)
  .loc 1 5149 74
  mov rbx, [rbp-48]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $103.1:rax $104.1:rbx 
  # $105.1: @FILE = call(write.291, $103.1, $104.1)
  .loc 1 5149 13
  mov rdi, rax
  mov rsi, rbx
  call write_291
  # [discarded value]: $103.1
  # [discarded value]: $104.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $105.1:rax 
  # $106.1: @FILE = call(write.339, $105.1, ": ")
  .loc 1 5149 13
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] member.1:[rbp-48] $106.1:rax 
  # $107.1: @AST_Type = load_struct_member(member.1, type)
  .loc 1 5149 105
  mov rbx, [rbp-48]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: member.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $106.1:rax $107.1:rbx 
  # $108.1: @FILE = call(write.269, $106.1, $107.1)
  .loc 1 5149 13
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $106.1
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $108.1:rax 
  # $109.1: @FILE = call(end_line.342, $108.1)
  .loc 1 5149 13
  mov rdi, rax
  call end_line_342
  # [discarded value]: $108.1
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # jump(block.51)
  jmp .LABEL__write_266__51
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
.LABEL__write_266__53:
  # $110.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 5151 39
  mov rax, [rbp-32]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $110.1:rax 
  # $111.1: @FILE = call(write_source_line.267, file.1, $110.1, alignment.1)
  .loc 1 5151 16
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  call write_source_line_267
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $111.1:rax 
  # $112.1: @FILE = call(write.341, $111.1, '}')
  .loc 1 5151 16
  mov rdi, rax
  mov sil, 125
  call write_341
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] $112.1:rax 
  # return($112.1)
  .loc 1 5151 9
  jmp .LABEL__write_266__end
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] members.1:[rbp-40] 
  # [discarded value]: members.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__45:
  # AST_Variable_Statement.3: @Object_Type = load_variable(AST_Variable_Statement)
  lea rax, AST_Variable_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_Variable_Statement.3:rax 
  # $113.1: Boolean = call(is.325, statement.1, AST_Variable_Statement.3)
  .loc 1 5154 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $113.1:rax 
  # jump($113.1, block.55, block.56)
  test al, al
  jz .LABEL__write_266__56
.LABEL__write_266__55:
  # statement.1: @AST_Variable_Statement = statement.1
  .loc 1 5155 22
  mov rax, [rbp-16]
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $115.1: @AST_Variable_Statement = statement.1
  .loc 1 5156 21
  mov rbx, rax
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $115.1:rbx 
  # $116.1: @Identifier_Token = load_struct_member($115.1, name)
  .loc 1 5156 21
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax $116.1:r15 
  # $117.1: @FILE = call(write.291, file.1, $116.1)
  .loc 1 5156 9
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-32], rax
  call write_291
  # [discarded value]: $116.1
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $118.1: @AST_Type = load_struct_member(statement.1, type)
  .loc 1 5157 13
  mov rax, [rbp-32]
  add rax, 24
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $118.1:rax 
  # $119.1: Boolean = $118.1 != null
  .loc 1 5157 13
  cmp rax, 0
  setne bl
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $119.1:rbx 
  # jump($119.1, block.57, block.59)
  test bl, bl
  jz .LABEL__write_266__59
.LABEL__write_266__57:
  # $123.1: @FILE = call(write.339, file.1, ": ")
  .loc 1 5158 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $123.1:rax 
  # $124.1: @AST_Type = load_struct_member(statement.1, type)
  .loc 1 5158 36
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $123.1:rax $124.1:rbx 
  # $125.1: @FILE = call(write.269, $123.1, $124.1)
  .loc 1 5158 13
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $123.1
  # [discarded value]: $124.1
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # $126.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 5159 17
  mov rax, [rbp-32]
  add rax, 32
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $126.1:rax 
  # $127.1: Boolean = $126.1 != null
  .loc 1 5159 17
  cmp rax, 0
  setne bl
  # [discarded value]: $126.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $127.1:rbx 
  # jump($127.1, block.60, block.61)
  test bl, bl
  jz .LABEL__write_266__61
.LABEL__write_266__60:
  # $128.1: @FILE = call(write.339, file.1, " = ")
  .loc 1 5160 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_219[rip] # " = "
  call write_339
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $128.1:rax 
  # $129.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 5160 41
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $128.1:rax $129.1:rbx 
  # $130.1: @FILE = call(write.270, $128.1, $129.1)
  .loc 1 5160 17
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $128.1
  # [discarded value]: $129.1
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.61)
.LABEL__write_266__61:
  # $131.1: Boolean = load_struct_member(statement.1, is_external)
  .loc 1 5162 17
  mov rax, [rbp-32]
  add rax, 40
  mov al, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $131.1:rax 
  # jump($131.1, block.62, block.58)
  test al, al
  jz .LABEL__write_266__58
.LABEL__write_266__62:
  # $132.1: @FILE = call(write.339, file.1, " = external")
  .loc 1 5163 17
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_286[rip] # " = external"
  call write_339
  # [discarded value]: $131.1
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.58)
.LABEL__write_266__58:
  # return(file.1)
  .loc 1 5168 9
  mov rax, [rbp-8]
  jmp .LABEL__write_266__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
.LABEL__write_266__59:
  # $120.1: @FILE = call(write.339, file.1, " := ")
  .loc 1 5166 13
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_287[rip] # " := "
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $120.1:rax 
  # $121.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  .loc 1 5166 38
  mov rbx, [rbp-32]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $120.1:rax $121.1:rbx 
  # $122.1: @FILE = call(write.270, $120.1, $121.1)
  .loc 1 5166 13
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $120.1
  # [discarded value]: $121.1
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # jump(block.58)
  jmp .LABEL__write_266__58
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__56:
  # AST_While_Statement.3: @Object_Type = load_variable(AST_While_Statement)
  lea rax, AST_While_Statement[rip]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] AST_While_Statement.3:rax 
  # $133.1: Boolean = call(is.325, statement.1, AST_While_Statement.3)
  .loc 1 5171 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_While_Statement.3
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $133.1:rax 
  # jump($133.1, block.65, block.66)
  test al, al
  jz .LABEL__write_266__66
.LABEL__write_266__65:
  # statement.1: @AST_While_Statement = statement.1
  .loc 1 5172 22
  mov rax, [rbp-16]
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:rax 
  # $135.1: @FILE = call(write.339, file.1, "while (")
  .loc 1 5173 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_288[rip] # "while ("
  mov [rbp-32], rax
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $135.1:rax 
  # $136.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  .loc 1 5173 44
  mov rbx, [rbp-32]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $135.1:rax $136.1:rbx 
  # $137.1: @FILE = call(write.270, $135.1, $136.1)
  .loc 1 5173 16
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $135.1
  # [discarded value]: $136.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $137.1:rax 
  # $138.1: @FILE = call(write.339, $137.1, ") ")
  .loc 1 5173 16
  mov rdi, rax
  lea rsi, .LABEL__string_281[rip] # ") "
  call write_339
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] statement.1:[rbp-32] $138.1:rax 
  # $139.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  .loc 1 5173 94
  mov rbx, [rbp-32]
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $138.1:rax $139.1:rbx 
  # $140.1: @FILE = call(write.266, $138.1, $139.1, alignment.1)
  .loc 1 5173 16
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_266
  # [discarded value]: $138.1
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $140.1:rax 
  # return($140.1)
  .loc 1 5173 9
  jmp .LABEL__write_266__end
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
.LABEL__write_266__66:
  # $141.1: @FILE = call(flush.343, file.1)
  .loc 1 5176 5
  mov rdi, [rbp-8]
  call flush_343
  # [discarded value]: $141.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # $142.1: @Source_Location = load_struct_member(statement.1, location)
  .loc 1 5177 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $142.1:rax 
  # $143.1: @String = call(clone.329, "Unsupported AST_Statement type: ")
  .loc 1 5177 31
  lea rdi, .LABEL__string_289[rip] # "Unsupported AST_Statement type: "
  mov [rbp-32], rax
  call clone_329
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $142.1:[rbp-32] $143.1:rax 
  # $144.1: @Object_Type = load_struct_member(statement.1, object_type)
  .loc 1 5177 81
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $142.1:[rbp-32] $143.1:rax $144.1:rbx 
  # $145.1: @String = load_struct_member($144.1, name)
  .loc 1 5177 81
  mov r15, rbx
  add r15, 8
  # [discarded value]: $144.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $142.1:[rbp-32] $143.1:rax $145.1:r15 
  # $146.1: @String = call(append.332, $143.1, $145.1)
  .loc 1 5177 31
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $143.1
  # [discarded value]: $145.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $142.1:[rbp-32] $146.1:rax 
  # call(abort.271, $142.1, $146.1)
  .loc 1 5177 5
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_271
  # [discarded value]: $142.1
  # [discarded value]: $146.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [discarded value]: file.1
  # [discarded value]: statement.1
  # [discarded value]: alignment.1
  # [live values]: 
.LABEL__write_266__end:
  mov rsp, rbp
  pop rbp
  ret

write_266__stack_frame_size: .word 48

  .loc 1 5180 1
  .text
write_source_line_267:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_source_line_267__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_source_line_267__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: file.1:rdi location.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx 
  # $1.1: @Source = load_struct_member(location.1, source)
  .loc 1 5181 16
  mov rax, rsi
  mov rax, [rax]
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $1.1:rax 
  # $2.1: @String = load_struct_member($1.1, file_path)
  .loc 1 5181 16
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $2.1:rbx 
  # $3.1: @FILE = call(write.339, file.1, $2.1)
  .loc 1 5181 5
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call write_339
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write.341, $3.1, ':')
  .loc 1 5181 5
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] 
  # line.1: Int = load_struct_member(location.1, line)
  .loc 1 5182 13
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: location.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rax 
  # $6.1: Boolean = line.1 < 1000
  .loc 1 5183 9
  cmp rax, 1000
  setl bl
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rax $6.1:rbx 
  # jump($6.1, block.2, block.3)
  test bl, bl
  mov [rbp-32], rax
  jz .LABEL__write_source_line_267__3
.LABEL__write_source_line_267__2:
  # $7.1: @FILE = call(write.341, file.1, '0')
  .loc 1 5184 9
  mov rdi, [rbp-24]
  mov sil, 48
  call write_341
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # jump(block.3)
.LABEL__write_source_line_267__3:
  # $8.1: Boolean = line.1 < 100
  .loc 1 5186 9
  cmp QWORD PTR [rbp-32], 100
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] $8.1:rax 
  # jump($8.1, block.4, block.5)
  test al, al
  jz .LABEL__write_source_line_267__5
.LABEL__write_source_line_267__4:
  # $9.1: @FILE = call(write.341, file.1, '0')
  .loc 1 5187 9
  mov rdi, [rbp-24]
  mov sil, 48
  call write_341
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # jump(block.5)
.LABEL__write_source_line_267__5:
  # $10.1: Boolean = line.1 < 10
  .loc 1 5189 9
  cmp QWORD PTR [rbp-32], 10
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] $10.1:rax 
  # jump($10.1, block.6, block.7)
  test al, al
  jz .LABEL__write_source_line_267__7
.LABEL__write_source_line_267__6:
  # $11.1: @FILE = call(write.341, file.1, '0')
  .loc 1 5190 9
  mov rdi, [rbp-24]
  mov sil, 48
  call write_341
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # jump(block.7)
.LABEL__write_source_line_267__7:
  # $12.1: @FILE = call(write.338, file.1, line.1)
  .loc 1 5192 5
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call write_338
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] $12.1:rax 
  # $13.1: @FILE = call(write.339, $12.1, ": ")
  .loc 1 5192 5
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # space_count.1: Int = alignment.1 * 2
  .loc 1 5194 20
  mov rax, [rbp-16]
  imul rax, 2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:rax 
  # jump(block.8)
  mov [rbp-40], rax
.LABEL__write_source_line_267__8:
  # space_count.2: Int = phi(space_count.1, space_count.4)
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # $15.1: Boolean = space_count.2 > 0
  .loc 1 5195 12
  cmp QWORD PTR [rbp-40], 0
  setg al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] $15.1:rax 
  # jump($15.1, block.9, block.10)
  test al, al
  jz .LABEL__write_source_line_267__10
.LABEL__write_source_line_267__9:
  # $16.1: @FILE = call(write.341, file.1, ' ')
  .loc 1 5196 9
  mov rdi, [rbp-24]
  mov sil, 32
  call write_341
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # space_count.4: Int = space_count.2 - 1
  .loc 1 5197 23
  mov rax, [rbp-40]
  sub rax, 1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] space_count.4:rax[rbp-40] 
  # jump(block.8)
  mov [rbp-40], rax
  jmp .LABEL__write_source_line_267__8
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] space_count.4:[rbp-40] 
  # [discarded value]: space_count.4
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
.LABEL__write_source_line_267__10:
  # return(file.1)
  .loc 1 5200 5
  mov rax, [rbp-24]
  jmp .LABEL__write_source_line_267__end
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] space_count.2:[rbp-40] 
  # [discarded value]: space_count.2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] space_count.1:[rbp-40] 
  # [discarded value]: space_count.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-32] 
  # [discarded value]: file.1
  # [discarded value]: alignment.1
  # [discarded value]: line.1
  # [live values]: 
.LABEL__write_source_line_267__end:
  mov rsp, rbp
  pop rbp
  ret

write_source_line_267__stack_frame_size: .word 48

  .loc 1 5203 1
  .text
write_268:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_268__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_268__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # parameter.1: @AST_Function_Parameter = load_variable(parameter)
  # [live values]: file.1:rdi parameter.1:rsi 
  # $1.1: @Identifier_Token = load_struct_member(parameter.1, name)
  .loc 1 5204 23
  mov rax, rsi
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:rdi parameter.1:rsi $1.1:rax 
  # $2.1: @FILE = call(write.291, file.1, $1.1)
  .loc 1 5204 12
  mov [rbp-8], rsi
  mov rsi, rax
  call write_291
  # [discarded value]: file.1
  # [discarded value]: $1.1
  # [live values]: parameter.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write.339, $2.1, ": ")
  .loc 1 5204 12
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $2.1
  # [live values]: parameter.1:[rbp-8] $3.1:rax 
  # $4.1: @AST_Type = load_struct_member(parameter.1, type)
  .loc 1 5204 57
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: parameter.1
  # [live values]: $3.1:rax $4.1:rbx 
  # $5.1: @FILE = call(write.269, $3.1, $4.1)
  .loc 1 5204 12
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  # return($5.1)
  .loc 1 5204 5
  jmp .LABEL__write_268__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__write_268__end:
  mov rsp, rbp
  pop rbp
  ret

write_268__stack_frame_size: .word 16

  .loc 1 5207 1
  .text
write_269:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_269__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_269__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  # AST_Array_Type.3: @Object_Type = load_variable(AST_Array_Type)
  lea rax, AST_Array_Type[rip]
  # [live values]: file.1:rdi type.1:rsi AST_Array_Type.3:rax 
  # $1.1: Boolean = call(is.325, type.1, AST_Array_Type.3)
  .loc 1 5208 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Array_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_269__3
.LABEL__write_269__2:
  # type.1: @AST_Array_Type = type.1
  .loc 1 5209 17
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rax 
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 1 5210 13
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rax $3.1:rbx 
  # $4.1: Boolean = $3.1 != null
  .loc 1 5210 13
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:rax $4.1:r15 
  # jump($4.1, block.4, block.5)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__write_269__5
.LABEL__write_269__4:
  # $5.1: @FILE = call(write.341, file.1, '[')
  .loc 1 5211 20
  mov rdi, [rbp-8]
  mov sil, 91
  call write_341
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $5.1:rax 
  # $6.1: @AST_Type = load_struct_member(type.1, item_type)
  .loc 1 5211 42
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $5.1:rax $6.1:rbx 
  # $7.1: @FILE = call(write.269, $5.1, $6.1)
  .loc 1 5211 20
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $7.1:rax 
  # $8.1: @FILE = call(write.339, $7.1, "; ")
  .loc 1 5211 20
  mov rdi, rax
  lea rsi, .LABEL__string_290[rip] # "; "
  call write_339
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $8.1:rax 
  # $9.1: @AST_Expression = load_struct_member(type.1, size_expression)
  .loc 1 5211 76
  mov rbx, [rbp-24]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $8.1:rax $9.1:rbx 
  # $10.1: @FILE = call(write.270, $8.1, $9.1)
  .loc 1 5211 20
  mov rdi, rax
  mov rsi, rbx
  call write_270
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $10.1:rax 
  # $11.1: @FILE = call(write.341, $10.1, ']')
  .loc 1 5211 20
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $11.1:rax 
  # return($11.1)
  .loc 1 5211 13
  jmp .LABEL__write_269__end
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] 
.LABEL__write_269__5:
  # $12.1: @FILE = call(write.341, file.1, '[')
  .loc 1 5213 16
  mov rdi, [rbp-8]
  mov sil, 91
  call write_341
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $12.1:rax 
  # $13.1: @AST_Type = load_struct_member(type.1, item_type)
  .loc 1 5213 38
  mov rbx, [rbp-24]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $12.1:rax $13.1:rbx 
  # $14.1: @FILE = call(write.269, $12.1, $13.1)
  .loc 1 5213 16
  mov rdi, rax
  mov rsi, rbx
  call write_269
  # [discarded value]: $12.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $14.1:rax 
  # $15.1: @FILE = call(write.341, $14.1, ']')
  .loc 1 5213 16
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] $15.1:rax 
  # return($15.1)
  .loc 1 5213 9
  jmp .LABEL__write_269__end
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
.LABEL__write_269__3:
  # AST_Named_Type.3: @Object_Type = load_variable(AST_Named_Type)
  lea rax, AST_Named_Type[rip]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] AST_Named_Type.3:rax 
  # $16.1: Boolean = call(is.325, type.1, AST_Named_Type.3)
  .loc 1 5216 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Named_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $16.1:rax 
  # jump($16.1, block.8, block.9)
  test al, al
  jz .LABEL__write_269__9
.LABEL__write_269__8:
  # $17.1: @AST_Named_Type = type.1
  .loc 1 5217 28
  mov rax, [rbp-16]
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $17.1:rax 
  # $18.1: @Identifier_Token = load_struct_member($17.1, name)
  .loc 1 5217 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $18.1:rbx 
  # $19.1: @FILE = call(write.291, file.1, $18.1)
  .loc 1 5217 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_291
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $19.1:rax 
  # return($19.1)
  .loc 1 5217 9
  jmp .LABEL__write_269__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
.LABEL__write_269__9:
  # AST_Pointer_Type.3: @Object_Type = load_variable(AST_Pointer_Type)
  lea rax, AST_Pointer_Type[rip]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] AST_Pointer_Type.3:rax 
  # $20.1: Boolean = call(is.325, type.1, AST_Pointer_Type.3)
  .loc 1 5220 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Pointer_Type.3
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $20.1:rax 
  # jump($20.1, block.11, block.12)
  test al, al
  jz .LABEL__write_269__12
.LABEL__write_269__11:
  # $21.1: @FILE = call(write.341, file.1, '@')
  .loc 1 5221 16
  mov rdi, [rbp-8]
  mov sil, 64
  call write_341
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $21.1:rax 
  # $22.1: @AST_Pointer_Type = type.1
  .loc 1 5221 39
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $21.1:rax $22.1:rbx 
  # $23.1: @AST_Type = load_struct_member($22.1, pointed_type)
  .loc 1 5221 39
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $21.1:rax $23.1:r15 
  # $24.1: @FILE = call(write.269, $21.1, $23.1)
  .loc 1 5221 16
  mov rdi, rax
  mov rsi, r15
  call write_269
  # [discarded value]: $21.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $24.1:rax 
  # return($24.1)
  .loc 1 5221 9
  jmp .LABEL__write_269__end
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
.LABEL__write_269__12:
  # $25.1: @FILE = call(flush.343, file.1)
  .loc 1 5224 5
  mov rdi, [rbp-8]
  call flush_343
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # $26.1: @Source_Location = load_struct_member(type.1, location)
  .loc 1 5225 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:rax 
  # $27.1: @String = call(clone.329, "Unsupported AST_Type type: ")
  .loc 1 5225 26
  lea rdi, .LABEL__string_291[rip] # "Unsupported AST_Type type: "
  mov [rbp-24], rax
  call clone_329
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:[rbp-24] $27.1:rax 
  # $28.1: @Object_Type = load_struct_member(type.1, object_type)
  .loc 1 5225 71
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:[rbp-24] $27.1:rax $28.1:rbx 
  # $29.1: @String = load_struct_member($28.1, name)
  .loc 1 5225 71
  mov r15, rbx
  add r15, 8
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:[rbp-24] $27.1:rax $29.1:r15 
  # $30.1: @String = call(append.332, $27.1, $29.1)
  .loc 1 5225 26
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $27.1
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $26.1:[rbp-24] $30.1:rax 
  # call(abort.271, $26.1, $30.1)
  .loc 1 5225 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_271
  # [discarded value]: $26.1
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: type.1
  # [live values]: 
.LABEL__write_269__end:
  mov rsp, rbp
  pop rbp
  ret

write_269__stack_frame_size: .word 32

  .loc 1 5228 1
  .text
write_270:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_270__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_270__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: file.1:rdi expression.1:rsi 
  # AST_Array_Access_Expression.4: @Object_Type = load_variable(AST_Array_Access_Expression)
  lea rax, AST_Array_Access_Expression[rip]
  # [live values]: file.1:rdi expression.1:rsi AST_Array_Access_Expression.4:rax 
  # $1.1: Boolean = call(is.325, expression.1, AST_Array_Access_Expression.4)
  .loc 1 5229 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Array_Access_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__write_270__3
.LABEL__write_270__2:
  # $2.1: @AST_Array_Access_Expression = expression.1
  .loc 1 5230 28
  mov rax, [rbp-16]
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # $3.1: @AST_Expression = load_struct_member($2.1, array_expression)
  .loc 1 5230 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $3.1:rbx 
  # $4.1: @FILE = call(write.270, file.1, $3.1)
  .loc 1 5230 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_270
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # $5.1: @FILE = call(write.341, $4.1, '[')
  .loc 1 5230 16
  mov rdi, rax
  mov sil, 91
  call write_341
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # $6.1: @AST_Array_Access_Expression = expression.1
  .loc 1 5230 108
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $5.1:rax $6.1:rbx 
  # $7.1: @AST_Expression = load_struct_member($6.1, index_expression)
  .loc 1 5230 108
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $5.1:rax $7.1:r15 
  # $8.1: @FILE = call(write.270, $5.1, $7.1)
  .loc 1 5230 16
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $5.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $8.1:rax 
  # $9.1: @FILE = call(write.341, $8.1, ']')
  .loc 1 5230 16
  mov rdi, rax
  mov sil, 93
  call write_341
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $9.1:rax 
  # return($9.1)
  .loc 1 5230 9
  jmp .LABEL__write_270__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__3:
  # AST_Binary_Expression.2: @Object_Type = load_variable(AST_Binary_Expression)
  lea rax, AST_Binary_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Binary_Expression.2:rax 
  # $10.1: Boolean = call(is.325, expression.1, AST_Binary_Expression.2)
  .loc 1 5233 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Binary_Expression.2
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $10.1:rax 
  # jump($10.1, block.5, block.6)
  test al, al
  jz .LABEL__write_270__6
.LABEL__write_270__5:
  # $11.1: @FILE = call(write.341, file.1, '(')
  .loc 1 5234 9
  mov rdi, [rbp-8]
  mov sil, 40
  call write_341
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $11.1:rax 
  # $12.1: @AST_Binary_Expression = expression.1
  .loc 1 5234 32
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $11.1:rax $12.1:rbx 
  # $13.1: @AST_Expression = load_struct_member($12.1, left_expression)
  .loc 1 5234 32
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $11.1:rax $13.1:r15 
  # $14.1: @FILE = call(write.270, $11.1, $13.1)
  .loc 1 5234 9
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $11.1
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # AST_Add_Expression.3: @Object_Type = load_variable(AST_Add_Expression)
  lea rax, AST_Add_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Add_Expression.3:rax 
  # $15.1: Boolean = call(is.325, expression.1, AST_Add_Expression.3)
  .loc 1 5235 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Add_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $15.1:rax 
  # jump($15.1, block.7, block.8)
  test al, al
  jz .LABEL__write_270__8
.LABEL__write_270__7:
  # $16.1: @FILE = call(write.339, file.1, " + ")
  .loc 1 5236 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_220[rip] # " + "
  call write_339
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $16.1:rax 
  # $17.1: @AST_Binary_Expression = expression.1
  .loc 1 5236 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $16.1:rax $17.1:rbx 
  # $18.1: @AST_Expression = load_struct_member($17.1, right_expression)
  .loc 1 5236 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $16.1:rax $18.1:r15 
  # $19.1: @FILE = call(write.270, $16.1, $18.1)
  .loc 1 5236 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $16.1
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $19.1:rax 
  # $20.1: @FILE = call(write.341, $19.1, ')')
  .loc 1 5236 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $20.1:rax 
  # return($20.1)
  .loc 1 5236 13
  jmp .LABEL__write_270__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__8:
  # AST_Divide_Expression.3: @Object_Type = load_variable(AST_Divide_Expression)
  lea rax, AST_Divide_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Divide_Expression.3:rax 
  # $21.1: Boolean = call(is.325, expression.1, AST_Divide_Expression.3)
  .loc 1 5238 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Divide_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $21.1:rax 
  # jump($21.1, block.10, block.11)
  test al, al
  jz .LABEL__write_270__11
.LABEL__write_270__10:
  # $22.1: @FILE = call(write.339, file.1, " / ")
  .loc 1 5239 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_225[rip] # " / "
  call write_339
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $22.1:rax 
  # $23.1: @AST_Binary_Expression = expression.1
  .loc 1 5239 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $22.1:rax $23.1:rbx 
  # $24.1: @AST_Expression = load_struct_member($23.1, right_expression)
  .loc 1 5239 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $22.1:rax $24.1:r15 
  # $25.1: @FILE = call(write.270, $22.1, $24.1)
  .loc 1 5239 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $22.1
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $25.1:rax 
  # $26.1: @FILE = call(write.341, $25.1, ')')
  .loc 1 5239 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $26.1:rax 
  # return($26.1)
  .loc 1 5239 13
  jmp .LABEL__write_270__end
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__11:
  # AST_Equals_Expression.3: @Object_Type = load_variable(AST_Equals_Expression)
  lea rax, AST_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Equals_Expression.3:rax 
  # $27.1: Boolean = call(is.325, expression.1, AST_Equals_Expression.3)
  .loc 1 5241 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  # jump($27.1, block.13, block.14)
  test al, al
  jz .LABEL__write_270__14
.LABEL__write_270__13:
  # $28.1: @FILE = call(write.339, file.1, " == ")
  .loc 1 5242 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_226[rip] # " == "
  call write_339
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  # $29.1: @AST_Binary_Expression = expression.1
  .loc 1 5242 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $28.1:rax $29.1:rbx 
  # $30.1: @AST_Expression = load_struct_member($29.1, right_expression)
  .loc 1 5242 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $28.1:rax $30.1:r15 
  # $31.1: @FILE = call(write.270, $28.1, $30.1)
  .loc 1 5242 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $28.1
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $31.1:rax 
  # $32.1: @FILE = call(write.341, $31.1, ')')
  .loc 1 5242 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $32.1:rax 
  # return($32.1)
  .loc 1 5242 13
  jmp .LABEL__write_270__end
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__14:
  # AST_Greater_Than_Expression.3: @Object_Type = load_variable(AST_Greater_Than_Expression)
  lea rax, AST_Greater_Than_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Greater_Than_Expression.3:rax 
  # $33.1: Boolean = call(is.325, expression.1, AST_Greater_Than_Expression.3)
  .loc 1 5244 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Greater_Than_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $33.1:rax 
  # jump($33.1, block.16, block.17)
  test al, al
  jz .LABEL__write_270__17
.LABEL__write_270__16:
  # $34.1: @FILE = call(write.339, file.1, " > ")
  .loc 1 5245 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_227[rip] # " > "
  call write_339
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $34.1:rax 
  # $35.1: @AST_Binary_Expression = expression.1
  .loc 1 5245 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $34.1:rax $35.1:rbx 
  # $36.1: @AST_Expression = load_struct_member($35.1, right_expression)
  .loc 1 5245 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $34.1:rax $36.1:r15 
  # $37.1: @FILE = call(write.270, $34.1, $36.1)
  .loc 1 5245 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $34.1
  # [discarded value]: $36.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $37.1:rax 
  # $38.1: @FILE = call(write.341, $37.1, ')')
  .loc 1 5245 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $38.1:rax 
  # return($38.1)
  .loc 1 5245 13
  jmp .LABEL__write_270__end
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__17:
  # AST_Greater_Than_Or_Equals_Expression.3: @Object_Type = load_variable(AST_Greater_Than_Or_Equals_Expression)
  lea rax, AST_Greater_Than_Or_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Greater_Than_Or_Equals_Expression.3:rax 
  # $39.1: Boolean = call(is.325, expression.1, AST_Greater_Than_Or_Equals_Expression.3)
  .loc 1 5247 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Greater_Than_Or_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $39.1:rax 
  # jump($39.1, block.19, block.20)
  test al, al
  jz .LABEL__write_270__20
.LABEL__write_270__19:
  # $40.1: @FILE = call(write.339, file.1, " >= ")
  .loc 1 5248 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_228[rip] # " >= "
  call write_339
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $40.1:rax 
  # $41.1: @AST_Binary_Expression = expression.1
  .loc 1 5248 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $40.1:rax $41.1:rbx 
  # $42.1: @AST_Expression = load_struct_member($41.1, right_expression)
  .loc 1 5248 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $40.1:rax $42.1:r15 
  # $43.1: @FILE = call(write.270, $40.1, $42.1)
  .loc 1 5248 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $40.1
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $43.1:rax 
  # $44.1: @FILE = call(write.341, $43.1, ')')
  .loc 1 5248 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $44.1:rax 
  # return($44.1)
  .loc 1 5248 13
  jmp .LABEL__write_270__end
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__20:
  # AST_Less_Than_Expression.3: @Object_Type = load_variable(AST_Less_Than_Expression)
  lea rax, AST_Less_Than_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Less_Than_Expression.3:rax 
  # $45.1: Boolean = call(is.325, expression.1, AST_Less_Than_Expression.3)
  .loc 1 5250 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Less_Than_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $45.1:rax 
  # jump($45.1, block.22, block.23)
  test al, al
  jz .LABEL__write_270__23
.LABEL__write_270__22:
  # $46.1: @FILE = call(write.339, file.1, " < ")
  .loc 1 5251 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_229[rip] # " < "
  call write_339
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $46.1:rax 
  # $47.1: @AST_Binary_Expression = expression.1
  .loc 1 5251 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $46.1:rax $47.1:rbx 
  # $48.1: @AST_Expression = load_struct_member($47.1, right_expression)
  .loc 1 5251 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $46.1:rax $48.1:r15 
  # $49.1: @FILE = call(write.270, $46.1, $48.1)
  .loc 1 5251 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $46.1
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $49.1:rax 
  # $50.1: @FILE = call(write.341, $49.1, ')')
  .loc 1 5251 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $50.1:rax 
  # return($50.1)
  .loc 1 5251 13
  jmp .LABEL__write_270__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__23:
  # AST_Less_Than_Or_Equals_Expression.3: @Object_Type = load_variable(AST_Less_Than_Or_Equals_Expression)
  lea rax, AST_Less_Than_Or_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Less_Than_Or_Equals_Expression.3:rax 
  # $51.1: Boolean = call(is.325, expression.1, AST_Less_Than_Or_Equals_Expression.3)
  .loc 1 5253 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Less_Than_Or_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $51.1:rax 
  # jump($51.1, block.25, block.26)
  test al, al
  jz .LABEL__write_270__26
.LABEL__write_270__25:
  # $52.1: @FILE = call(write.339, file.1, " <= ")
  .loc 1 5254 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_230[rip] # " <= "
  call write_339
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $52.1:rax 
  # $53.1: @AST_Binary_Expression = expression.1
  .loc 1 5254 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $52.1:rax $53.1:rbx 
  # $54.1: @AST_Expression = load_struct_member($53.1, right_expression)
  .loc 1 5254 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $52.1:rax $54.1:r15 
  # $55.1: @FILE = call(write.270, $52.1, $54.1)
  .loc 1 5254 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $52.1
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $55.1:rax 
  # $56.1: @FILE = call(write.341, $55.1, ')')
  .loc 1 5254 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $56.1:rax 
  # return($56.1)
  .loc 1 5254 13
  jmp .LABEL__write_270__end
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__26:
  # AST_Logic_And_Expression.3: @Object_Type = load_variable(AST_Logic_And_Expression)
  lea rax, AST_Logic_And_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Logic_And_Expression.3:rax 
  # $57.1: Boolean = call(is.325, expression.1, AST_Logic_And_Expression.3)
  .loc 1 5256 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Logic_And_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $57.1:rax 
  # jump($57.1, block.28, block.29)
  test al, al
  jz .LABEL__write_270__29
.LABEL__write_270__28:
  # $58.1: @FILE = call(write.339, file.1, " && ")
  .loc 1 5257 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_292[rip] # " && "
  call write_339
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $58.1:rax 
  # $59.1: @AST_Binary_Expression = expression.1
  .loc 1 5257 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $58.1:rax $59.1:rbx 
  # $60.1: @AST_Expression = load_struct_member($59.1, right_expression)
  .loc 1 5257 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $58.1:rax $60.1:r15 
  # $61.1: @FILE = call(write.270, $58.1, $60.1)
  .loc 1 5257 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $58.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $61.1:rax 
  # $62.1: @FILE = call(write.341, $61.1, ')')
  .loc 1 5257 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $62.1:rax 
  # return($62.1)
  .loc 1 5257 13
  jmp .LABEL__write_270__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__29:
  # AST_Logic_Or_Expression.3: @Object_Type = load_variable(AST_Logic_Or_Expression)
  lea rax, AST_Logic_Or_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Logic_Or_Expression.3:rax 
  # $63.1: Boolean = call(is.325, expression.1, AST_Logic_Or_Expression.3)
  .loc 1 5259 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Logic_Or_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $63.1:rax 
  # jump($63.1, block.31, block.32)
  test al, al
  jz .LABEL__write_270__32
.LABEL__write_270__31:
  # $64.1: @FILE = call(write.339, file.1, " || ")
  .loc 1 5260 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_293[rip] # " || "
  call write_339
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $64.1:rax 
  # $65.1: @AST_Binary_Expression = expression.1
  .loc 1 5260 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $64.1:rax $65.1:rbx 
  # $66.1: @AST_Expression = load_struct_member($65.1, right_expression)
  .loc 1 5260 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $64.1:rax $66.1:r15 
  # $67.1: @FILE = call(write.270, $64.1, $66.1)
  .loc 1 5260 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $64.1
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $67.1:rax 
  # $68.1: @FILE = call(write.341, $67.1, ')')
  .loc 1 5260 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $68.1:rax 
  # return($68.1)
  .loc 1 5260 13
  jmp .LABEL__write_270__end
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__32:
  # AST_Modulo_Expression.3: @Object_Type = load_variable(AST_Modulo_Expression)
  lea rax, AST_Modulo_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Modulo_Expression.3:rax 
  # $69.1: Boolean = call(is.325, expression.1, AST_Modulo_Expression.3)
  .loc 1 5262 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Modulo_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $69.1:rax 
  # jump($69.1, block.34, block.35)
  test al, al
  jz .LABEL__write_270__35
.LABEL__write_270__34:
  # $70.1: @FILE = call(write.339, file.1, " // ")
  .loc 1 5263 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_234[rip] # " // "
  call write_339
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $70.1:rax 
  # $71.1: @AST_Binary_Expression = expression.1
  .loc 1 5263 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $70.1:rax $71.1:rbx 
  # $72.1: @AST_Expression = load_struct_member($71.1, right_expression)
  .loc 1 5263 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $70.1:rax $72.1:r15 
  # $73.1: @FILE = call(write.270, $70.1, $72.1)
  .loc 1 5263 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $70.1
  # [discarded value]: $72.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $73.1:rax 
  # $74.1: @FILE = call(write.341, $73.1, ')')
  .loc 1 5263 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $74.1:rax 
  # return($74.1)
  .loc 1 5263 13
  jmp .LABEL__write_270__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__35:
  # AST_Multiply_Expression.3: @Object_Type = load_variable(AST_Multiply_Expression)
  lea rax, AST_Multiply_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Multiply_Expression.3:rax 
  # $75.1: Boolean = call(is.325, expression.1, AST_Multiply_Expression.3)
  .loc 1 5265 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Multiply_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $75.1:rax 
  # jump($75.1, block.37, block.38)
  test al, al
  jz .LABEL__write_270__38
.LABEL__write_270__37:
  # $76.1: @FILE = call(write.339, file.1, " * ")
  .loc 1 5266 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_235[rip] # " * "
  call write_339
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $76.1:rax 
  # $77.1: @AST_Binary_Expression = expression.1
  .loc 1 5266 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $76.1:rax $77.1:rbx 
  # $78.1: @AST_Expression = load_struct_member($77.1, right_expression)
  .loc 1 5266 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $76.1:rax $78.1:r15 
  # $79.1: @FILE = call(write.270, $76.1, $78.1)
  .loc 1 5266 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $76.1
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $79.1:rax 
  # $80.1: @FILE = call(write.341, $79.1, ')')
  .loc 1 5266 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $80.1:rax 
  # return($80.1)
  .loc 1 5266 13
  jmp .LABEL__write_270__end
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__38:
  # AST_Not_Equals_Expression.3: @Object_Type = load_variable(AST_Not_Equals_Expression)
  lea rax, AST_Not_Equals_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Not_Equals_Expression.3:rax 
  # $81.1: Boolean = call(is.325, expression.1, AST_Not_Equals_Expression.3)
  .loc 1 5268 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Not_Equals_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $81.1:rax 
  # jump($81.1, block.40, block.41)
  test al, al
  jz .LABEL__write_270__41
.LABEL__write_270__40:
  # $82.1: @FILE = call(write.339, file.1, " != ")
  .loc 1 5269 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_237[rip] # " != "
  call write_339
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $82.1:rax 
  # $83.1: @AST_Binary_Expression = expression.1
  .loc 1 5269 46
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $82.1:rax $83.1:rbx 
  # $84.1: @AST_Expression = load_struct_member($83.1, right_expression)
  .loc 1 5269 46
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $83.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $82.1:rax $84.1:r15 
  # $85.1: @FILE = call(write.270, $82.1, $84.1)
  .loc 1 5269 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $82.1
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $85.1:rax 
  # $86.1: @FILE = call(write.341, $85.1, ')')
  .loc 1 5269 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $85.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $86.1:rax 
  # return($86.1)
  .loc 1 5269 13
  jmp .LABEL__write_270__end
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__41:
  # AST_Substract_Expression.3: @Object_Type = load_variable(AST_Substract_Expression)
  lea rax, AST_Substract_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Substract_Expression.3:rax 
  # $87.1: Boolean = call(is.325, expression.1, AST_Substract_Expression.3)
  .loc 1 5271 13
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Substract_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $87.1:rax 
  # jump($87.1, block.43, block.6)
  test al, al
  jz .LABEL__write_270__6
.LABEL__write_270__43:
  # $88.1: @FILE = call(write.339, file.1, " - ")
  .loc 1 5272 20
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_242[rip] # " - "
  call write_339
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $88.1:rax 
  # $89.1: @AST_Binary_Expression = expression.1
  .loc 1 5272 45
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $88.1:rax $89.1:rbx 
  # $90.1: @AST_Expression = load_struct_member($89.1, right_expression)
  .loc 1 5272 45
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $88.1:rax $90.1:r15 
  # $91.1: @FILE = call(write.270, $88.1, $90.1)
  .loc 1 5272 20
  mov rdi, rax
  mov rsi, r15
  call write_270
  # [discarded value]: $88.1
  # [discarded value]: $90.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $91.1:rax 
  # $92.1: @FILE = call(write.341, $91.1, ')')
  .loc 1 5272 20
  mov rdi, rax
  mov sil, 41
  call write_341
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $92.1:rax 
  # return($92.1)
  .loc 1 5272 13
  jmp .LABEL__write_270__end
  # [discarded value]: $92.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__6:
  # AST_Call_Expression.4: @Object_Type = load_variable(AST_Call_Expression)
  lea rax, AST_Call_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Call_Expression.4:rax 
  # $93.1: Boolean = call(is.325, expression.1, AST_Call_Expression.4)
  .loc 1 5276 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Call_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $93.1:rax 
  # jump($93.1, block.46, block.47)
  test al, al
  jz .LABEL__write_270__47
.LABEL__write_270__46:
  # $94.1: @AST_Call_Expression = expression.1
  .loc 1 5277 21
  mov rax, [rbp-16]
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $94.1:rax 
  # $95.1: @AST_Expression = load_struct_member($94.1, callee)
  .loc 1 5277 21
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $95.1:rbx 
  # $96.1: @FILE = call(write.270, file.1, $95.1)
  .loc 1 5277 9
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_270
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $96.1:rax 
  # $97.1: @FILE = call(write.341, $96.1, '(')
  .loc 1 5277 9
  mov rdi, rax
  mov sil, 40
  call write_341
  # [discarded value]: $96.1
  # [discarded value]: $97.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # $98.1: @AST_Call_Expression = expression.1
  .loc 1 5278 28
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $98.1:rax 
  # $99.1: @List = load_struct_member($98.1, arguments)
  .loc 1 5278 28
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $99.1:rbx 
  # call_arguments.1: @List_Iterator = call(create_iterator.319, $99.1)
  .loc 1 5278 28
  mov rdi, rbx
  call create_iterator_319
  # [discarded value]: $99.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:rax 
  # $101.1: Boolean = call(has_next.322, call_arguments.1)
  .loc 1 5279 13
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_322
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $101.1:rax 
  # jump($101.1, block.50, block.49)
  test al, al
  jz .LABEL__write_270__49
.LABEL__write_270__50:
  # $103.1: @AST_Expression = call(next.323, call_arguments.1)
  .loc 1 5281 28
  mov rdi, [rbp-24]
  call next_323
  # [discarded value]: $101.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $103.1:rax 
  # $104.1: @FILE = call(write.270, file.1, $103.1)
  .loc 1 5281 17
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_270
  # [discarded value]: $103.1
  # [discarded value]: $104.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # $105.1: Boolean = call(has_next.322, call_arguments.1)
  .loc 1 5282 21
  mov rdi, [rbp-24]
  call has_next_322
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $105.1:rax 
  # jump($105.1, block.52, block.49)
  test al, al
  jz .LABEL__write_270__49
.LABEL__write_270__52:
  # $106.1: @FILE = call(write.339, file.1, ", ")
  .loc 1 5283 21
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_36[rip] # ", "
  call write_339
  # [discarded value]: $105.1
  # [discarded value]: $106.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # jump(block.50)
  jmp .LABEL__write_270__50
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
.LABEL__write_270__49:
  # $107.1: @FILE = call(write.341, file.1, ')')
  .loc 1 5289 16
  mov rdi, [rbp-8]
  mov sil, 41
  call write_341
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] $107.1:rax 
  # return($107.1)
  .loc 1 5289 9
  jmp .LABEL__write_270__end
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] call_arguments.1:[rbp-24] 
  # [discarded value]: call_arguments.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__47:
  # AST_Cast_Expression.3: @Object_Type = load_variable(AST_Cast_Expression)
  lea rax, AST_Cast_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Cast_Expression.3:rax 
  # $108.1: Boolean = call(is.325, expression.1, AST_Cast_Expression.3)
  .loc 1 5292 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Cast_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $108.1:rax 
  # jump($108.1, block.57, block.58)
  test al, al
  jz .LABEL__write_270__58
.LABEL__write_270__57:
  # $109.1: @AST_Cast_Expression = expression.1
  .loc 1 5293 28
  mov rax, [rbp-16]
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $109.1:rax 
  # $110.1: @AST_Expression = load_struct_member($109.1, value_expression)
  .loc 1 5293 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $110.1:rbx 
  # $111.1: @FILE = call(write.270, file.1, $110.1)
  .loc 1 5293 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_270
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $111.1:rax 
  # $112.1: @FILE = call(write.339, $111.1, " as ")
  .loc 1 5293 16
  mov rdi, rax
  lea rsi, .LABEL__string_294[rip] # " as "
  call write_339
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $112.1:rax 
  # $113.1: @AST_Cast_Expression = expression.1
  .loc 1 5293 103
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $112.1:rax $113.1:rbx 
  # $114.1: @AST_Type = load_struct_member($113.1, type)
  .loc 1 5293 103
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $112.1:rax $114.1:r15 
  # $115.1: @FILE = call(write.269, $112.1, $114.1)
  .loc 1 5293 16
  mov rdi, rax
  mov rsi, r15
  call write_269
  # [discarded value]: $112.1
  # [discarded value]: $114.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $115.1:rax 
  # return($115.1)
  .loc 1 5293 9
  jmp .LABEL__write_270__end
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__58:
  # AST_Literal_Expression.4: @Object_Type = load_variable(AST_Literal_Expression)
  lea rax, AST_Literal_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Literal_Expression.4:rax 
  # $116.1: Boolean = call(is.325, expression.1, AST_Literal_Expression.4)
  .loc 1 5296 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Literal_Expression.4
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $116.1:rax 
  # jump($116.1, block.60, block.61)
  test al, al
  jz .LABEL__write_270__61
.LABEL__write_270__60:
  # $117.1: @AST_Literal_Expression = expression.1
  .loc 1 5297 28
  mov rax, [rbp-16]
  # [discarded value]: $116.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $117.1:rax 
  # $118.1: @Literal_Token = load_struct_member($117.1, literal)
  .loc 1 5297 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $118.1:rbx 
  # $119.1: @FILE = call(write.291, file.1, $118.1)
  .loc 1 5297 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_291
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $119.1:rax 
  # return($119.1)
  .loc 1 5297 9
  jmp .LABEL__write_270__end
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__61:
  # AST_New_Expression.3: @Object_Type = load_variable(AST_New_Expression)
  lea rax, AST_New_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_New_Expression.3:rax 
  # $120.1: Boolean = call(is.325, expression.1, AST_New_Expression.3)
  .loc 1 5300 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_New_Expression.3
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $120.1:rax 
  # jump($120.1, block.63, block.64)
  test al, al
  jz .LABEL__write_270__64
.LABEL__write_270__63:
  # $121.1: @FILE = call(write.339, file.1, "new ")
  .loc 1 5301 16
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_295[rip] # "new "
  call write_339
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $121.1:rax 
  # $122.1: @AST_New_Expression = expression.1
  .loc 1 5301 42
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $121.1:rax $122.1:rbx 
  # $123.1: @AST_Type = load_struct_member($122.1, type)
  .loc 1 5301 42
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $121.1:rax $123.1:r15 
  # $124.1: @FILE = call(write.269, $121.1, $123.1)
  .loc 1 5301 16
  mov rdi, rax
  mov rsi, r15
  call write_269
  # [discarded value]: $121.1
  # [discarded value]: $123.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $124.1:rax 
  # return($124.1)
  .loc 1 5301 9
  jmp .LABEL__write_270__end
  # [discarded value]: $124.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__64:
  # AST_Member_Access_Expression.8: @Object_Type = load_variable(AST_Member_Access_Expression)
  lea rax, AST_Member_Access_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Member_Access_Expression.8:rax 
  # $125.1: Boolean = call(is.325, expression.1, AST_Member_Access_Expression.8)
  .loc 1 5304 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Member_Access_Expression.8
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $125.1:rax 
  # jump($125.1, block.66, block.67)
  test al, al
  jz .LABEL__write_270__67
.LABEL__write_270__66:
  # $126.1: @AST_Member_Access_Expression = expression.1
  .loc 1 5305 28
  mov rax, [rbp-16]
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $126.1:rax 
  # $127.1: @AST_Expression = load_struct_member($126.1, object_expression)
  .loc 1 5305 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $126.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $127.1:rbx 
  # $128.1: @FILE = call(write.270, file.1, $127.1)
  .loc 1 5305 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_270
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $128.1:rax 
  # $129.1: @FILE = call(write.341, $128.1, '.')
  .loc 1 5305 16
  mov rdi, rax
  mov sil, 46
  call write_341
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $129.1:rax 
  # $130.1: @AST_Member_Access_Expression = expression.1
  .loc 1 5305 110
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $129.1:rax $130.1:rbx 
  # $131.1: @Identifier_Token = load_struct_member($130.1, member_name)
  .loc 1 5305 110
  mov r15, rbx
  add r15, 24
  mov r15, [r15]
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $129.1:rax $131.1:r15 
  # $132.1: @FILE = call(write.291, $129.1, $131.1)
  .loc 1 5305 16
  mov rdi, rax
  mov rsi, r15
  call write_291
  # [discarded value]: $129.1
  # [discarded value]: $131.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $132.1:rax 
  # return($132.1)
  .loc 1 5305 9
  jmp .LABEL__write_270__end
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__67:
  # AST_Variable_Expression.10: @Object_Type = load_variable(AST_Variable_Expression)
  lea rax, AST_Variable_Expression[rip]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] AST_Variable_Expression.10:rax 
  # $133.1: Boolean = call(is.325, expression.1, AST_Variable_Expression.10)
  .loc 1 5308 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: AST_Variable_Expression.10
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $133.1:rax 
  # jump($133.1, block.69, block.70)
  test al, al
  jz .LABEL__write_270__70
.LABEL__write_270__69:
  # $134.1: @AST_Variable_Expression = expression.1
  .loc 1 5309 28
  mov rax, [rbp-16]
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $134.1:rax 
  # $135.1: @Identifier_Token = load_struct_member($134.1, name)
  .loc 1 5309 28
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $135.1:rbx 
  # $136.1: @FILE = call(write.291, file.1, $135.1)
  .loc 1 5309 16
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_291
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $136.1:rax 
  # return($136.1)
  .loc 1 5309 9
  jmp .LABEL__write_270__end
  # [discarded value]: $136.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
.LABEL__write_270__70:
  # $137.1: @FILE = call(flush.343, file.1)
  .loc 1 5312 5
  mov rdi, [rbp-8]
  call flush_343
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # $138.1: @Source_Location = load_struct_member(expression.1, location)
  .loc 1 5313 11
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:rax 
  # $139.1: @String = call(clone.329, "Unsupported AST_Expression type: ")
  .loc 1 5313 32
  lea rdi, .LABEL__string_296[rip] # "Unsupported AST_Expression type: "
  mov [rbp-24], rax
  call clone_329
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:[rbp-24] $139.1:rax 
  # $140.1: @Object_Type = load_struct_member(expression.1, object_type)
  .loc 1 5313 83
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:[rbp-24] $139.1:rax $140.1:rbx 
  # $141.1: @String = load_struct_member($140.1, name)
  .loc 1 5313 83
  mov r15, rbx
  add r15, 8
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:[rbp-24] $139.1:rax $141.1:r15 
  # $142.1: @String = call(append.332, $139.1, $141.1)
  .loc 1 5313 32
  mov rdi, rax
  mov rsi, r15
  call append_332
  # [discarded value]: $139.1
  # [discarded value]: $141.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $138.1:[rbp-24] $142.1:rax 
  # call(abort.271, $138.1, $142.1)
  .loc 1 5313 5
  mov rdi, [rbp-24]
  mov rsi, rax
  call abort_271
  # [discarded value]: $138.1
  # [discarded value]: $142.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__write_270__end:
  mov rsp, rbp
  pop rbp
  ret

write_270__stack_frame_size: .word 32

  .loc 1 5316 1
  .text
abort_271:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_271__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_271__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: location.1:rdi message.1:rsi 
  # stderr.8: @FILE = load_variable(stderr)
  # [live values]: location.1:rdi message.1:rsi stderr.8:stderr[rip] 
  # $1.1: @FILE = call(end_line.342, stderr.8)
  .loc 1 5317 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_342
  # [discarded value]: stderr.8
  # [live values]: location.1:[rbp-8] message.1:[rbp-16] $1.1:rax 
  # $2.1: @FILE = call(write.305, $1.1, location.1)
  .loc 1 5317 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_305
  # [discarded value]: location.1
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-16] $2.1:rax 
  # $3.1: @FILE = call(write.339, $2.1, ": ")
  .loc 1 5317 5
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # ": "
  call write_339
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-16] $3.1:rax 
  # $4.1: @FILE = call(write.339, $3.1, message.1)
  .loc 1 5317 5
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_339
  # [discarded value]: message.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  # $5.1: @FILE = call(end_line.342, $4.1)
  .loc 1 5317 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: 
  # call(abort.352)
  .loc 1 5318 5
  call abort
  # [live values]: 
.LABEL__abort_271__end:
  mov rsp, rbp
  pop rbp
  ret

abort_271__stack_frame_size: .word 16

  .loc 1 5333 1
  .text
create_scanner_272:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_scanner_272__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_scanner_272__1:
  # source.1: @Source = load_variable(source)
  # [live values]: source.1:rdi 
  # scanner.1: @Scanner = new(Scanner)
  .loc 1 5334 16
  mov [rbp-8], rdi
  mov rdi, 40
  call malloc
  # [live values]: source.1:[rbp-8] scanner.1:rax 
  # store_struct_member(scanner.1, source, source.1)
  .loc 1 5335 5
  mov rbx, rax
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: source.1
  # [live values]: scanner.1:rax 
  # store_struct_member(scanner.1, current_char_index, 0)
  .loc 1 5336 5
  mov rbx, rax
  add rbx, 8
  mov QWORD PTR [rbx], 0
  # [live values]: scanner.1:rax 
  # store_struct_member(scanner.1, current_line, 1)
  .loc 1 5337 5
  mov rbx, rax
  add rbx, 16
  mov QWORD PTR [rbx], 1
  # [live values]: scanner.1:rax 
  # store_struct_member(scanner.1, current_column, 1)
  .loc 1 5338 5
  mov rbx, rax
  add rbx, 24
  mov QWORD PTR [rbx], 1
  # [live values]: scanner.1:rax 
  # $2.1: @Token = call(scan_token.277, scanner.1)
  .loc 1 5339 29
  mov rdi, rax
  mov [rbp-8], rax
  call scan_token_277
  # [live values]: scanner.1:[rbp-8] $2.1:rax 
  # store_struct_member(scanner.1, current_token, $2.1)
  .loc 1 5339 5
  mov rbx, [rbp-8]
  add rbx, 32
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: scanner.1:[rbp-8] 
  # return(scanner.1)
  .loc 1 5340 5
  mov rax, [rbp-8]
  jmp .LABEL__create_scanner_272__end
  # [discarded value]: scanner.1
  # [live values]: 
.LABEL__create_scanner_272__end:
  mov rsp, rbp
  pop rbp
  ret

create_scanner_272__stack_frame_size: .word 16

  .loc 1 5343 1
  .text
peek_token_273:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_token_273__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_token_273__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # offset.1: Int = load_variable(offset)
  # [live values]: self.1:rdi offset.1:rsi 
  # $1.1: Boolean = offset.1 < 0
  .loc 1 5344 9
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi offset.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__peek_token_273__3
.LABEL__peek_token_273__2:
  # call(abort.344, "Invalid state")
  .loc 1 5345 9
  lea rdi, .LABEL__string_42[rip] # "Invalid state"
  call abort_344
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] 
.LABEL__peek_token_273__3:
  # token.1: @Token = load_struct_member(self.1, current_token)
  .loc 1 5347 14
  mov rax, [rbp-16]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__peek_token_273__4:
  # offset.5: Int = phi(offset.1, offset.4)
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] 
  # token.2: @Token = phi(token.1, token.5)
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # $3.1: @Token = load_struct_member(token.2, next_token)
  .loc 1 5349 13
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] $3.1:rax 
  # $4.1: Boolean = $3.1 == null
  .loc 1 5349 13
  cmp rax, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] $4.1:rbx 
  # jump($4.1, block.6, block.7)
  test bl, bl
  jz .LABEL__peek_token_273__7
.LABEL__peek_token_273__6:
  # $5.1: @Token = call(scan_token.277, self.1)
  .loc 1 5350 32
  mov rdi, [rbp-16]
  call scan_token_277
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] $5.1:rax 
  # store_struct_member(token.2, next_token, $5.1)
  .loc 1 5350 13
  mov rbx, [rbp-24]
  add rbx, 24
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # jump(block.7)
.LABEL__peek_token_273__7:
  # token.5: @Token = load_struct_member(token.2, next_token)
  .loc 1 5352 17
  mov rax, [rbp-24]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:rax[rbp-24] 
  # $7.1: Boolean = offset.5 == 0
  .loc 1 5353 13
  cmp QWORD PTR [rbp-8], 0
  sete bl
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:rax[rbp-24] $7.1:rbx 
  # jump($7.1, block.8, block.9)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__peek_token_273__9
.LABEL__peek_token_273__8:
  # return(token.5)
  .loc 1 5354 13
  mov rax, [rbp-24]
  jmp .LABEL__peek_token_273__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] 
.LABEL__peek_token_273__9:
  # offset.4: Int = offset.5 - 1
  .loc 1 5356 18
  mov rax, [rbp-8]
  sub rax, 1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] offset.4:rax[rbp-8] 
  # jump(block.4)
  mov [rbp-8], rax
  jmp .LABEL__peek_token_273__4
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] offset.4:[rbp-8] 
  # [discarded value]: offset.4
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] token.5:[rbp-24] 
  # [discarded value]: token.5
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] offset.5:[rbp-8] token.2:[rbp-24] 
  # [discarded value]: offset.5
  # [discarded value]: token.2
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] token.1:[rbp-24] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] offset.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: offset.1
  # [live values]: 
.LABEL__peek_token_273__end:
  mov rsp, rbp
  pop rbp
  ret

peek_token_273__stack_frame_size: .word 32

  .loc 1 5360 1
  .text
next_token_274:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_token_274__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_token_274__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @Token = load_struct_member(self.1, current_token)
  .loc 1 5361 9
  mov rax, rdi
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Token = load_struct_member($1.1, next_token)
  .loc 1 5361 9
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # $3.1: Boolean = $2.1 == null
  .loc 1 5361 9
  cmp rbx, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__next_token_274__3
.LABEL__next_token_274__2:
  # $4.1: @Token = call(scan_token.277, self.1)
  .loc 1 5362 41
  mov rdi, [rbp-8]
  call scan_token_277
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # $5.1: @Token = load_struct_member(self.1, current_token)
  .loc 1 5362 9
  mov rbx, [rbp-8]
  add rbx, 32
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] $4.1:rax $5.1:rbx 
  # store_struct_member($5.1, next_token, $4.1)
  .loc 1 5362 9
  mov r15, rbx
  add r15, 24
  mov QWORD PTR [r15], rax
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # jump(block.3)
.LABEL__next_token_274__3:
  # $6.1: @Token = load_struct_member(self.1, current_token)
  .loc 1 5364 26
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # $7.1: @Token = load_struct_member($6.1, next_token)
  .loc 1 5364 26
  mov rbx, rax
  add rbx, 24
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $7.1:rbx 
  # store_struct_member(self.1, current_token, $7.1)
  .loc 1 5364 5
  mov rax, [rbp-8]
  add rax, 32
  mov QWORD PTR [rax], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # $8.1: @Token = load_struct_member(self.1, current_token)
  .loc 1 5365 12
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 1 5365 5
  jmp .LABEL__next_token_274__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_token_274__end:
  mov rsp, rbp
  pop rbp
  ret

next_token_274__stack_frame_size: .word 16

  .loc 1 5368 1
  .text
peek_char_275:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_char_275__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_char_275__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  .loc 1 5369 32
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Source = load_struct_member(self.1, source)
  .loc 1 5369 12
  mov rbx, rdi
  mov rbx, [rbx]
  # [discarded value]: self.1
  # [live values]: $1.1:rax $2.1:rbx 
  # $3.1: @Int8 = load_struct_member($2.1, content)
  .loc 1 5369 12
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: $1.1:rax $3.1:r15 
  # $4.1: Int8 = load_array_item($3.1, $1.1)
  .loc 1 5369 12
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: $4.1:rbx 
  # return($4.1)
  .loc 1 5369 5
  mov al, bl
  jmp .LABEL__peek_char_275__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__peek_char_275__end:
  mov rsp, rbp
  pop rbp
  ret

peek_char_275__stack_frame_size: .word 0

  .loc 1 5372 1
  .text
next_char_276:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_char_276__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_char_276__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  .loc 1 5373 38
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @Source = load_struct_member(self.1, source)
  .loc 1 5373 18
  mov rbx, rdi
  mov rbx, [rbx]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  # $3.1: @Int8 = load_struct_member($2.1, content)
  .loc 1 5373 18
  mov r15, rbx
  add r15, 16
  mov r15, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $1.1:rax $3.1:r15 
  # next_char.1: Int8 = load_array_item($3.1, $1.1)
  .loc 1 5373 18
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $1.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi next_char.1:rbx 
  # $5.1: Boolean = next_char.1 != '\0'
  .loc 1 5374 9
  cmp bl, 0
  setne al
  # [live values]: self.1:rdi next_char.1:rbx $5.1:rax 
  # jump($5.1, block.2, block.3)
  test al, al
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__next_char_276__3
.LABEL__next_char_276__2:
  # $6.1: Int = load_struct_member(self.1, current_char_index)
  .loc 1 5375 35
  mov rax, [rbp-9]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $6.1:rax 
  # $7.1: Int = $6.1 + 1
  .loc 1 5375 35
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $7.1:rbx 
  # store_struct_member(self.1, current_char_index, $7.1)
  .loc 1 5375 9
  mov rax, [rbp-9]
  add rax, 8
  mov QWORD PTR [rax], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # $8.1: Boolean = next_char.1 == '\n'
  .loc 1 5376 13
  cmp BYTE PTR [rbp-1], 10
  sete al
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $8.1:rax 
  # jump($8.1, block.4, block.6)
  test al, al
  jz .LABEL__next_char_276__6
.LABEL__next_char_276__4:
  # $11.1: Int = load_struct_member(self.1, current_line)
  .loc 1 5377 33
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $11.1:rax 
  # $12.1: Int = $11.1 + 1
  .loc 1 5377 33
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $12.1:rbx 
  # store_struct_member(self.1, current_line, $12.1)
  .loc 1 5377 13
  mov rax, [rbp-9]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # store_struct_member(self.1, current_column, 1)
  .loc 1 5378 13
  mov rax, [rbp-9]
  add rax, 24
  mov QWORD PTR [rax], 1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # jump(block.3)
.LABEL__next_char_276__3:
  # return(next_char.1)
  .loc 1 5383 5
  mov al, [rbp-1]
  jmp .LABEL__next_char_276__end
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
.LABEL__next_char_276__6:
  # $9.1: Int = load_struct_member(self.1, current_column)
  .loc 1 5380 35
  mov rax, [rbp-9]
  add rax, 24
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $9.1:rax 
  # $10.1: Int = $9.1 + 1
  .loc 1 5380 35
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] $10.1:rbx 
  # store_struct_member(self.1, current_column, $10.1)
  .loc 1 5380 13
  mov rax, [rbp-9]
  add rax, 24
  mov QWORD PTR [rax], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # jump(block.3)
  jmp .LABEL__next_char_276__3
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] next_char.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: next_char.1
  # [live values]: 
.LABEL__next_char_276__end:
  mov rsp, rbp
  pop rbp
  ret

next_char_276__stack_frame_size: .word 16

  .loc 1 5386 1
  .text
scan_token_277:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_token_277__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_token_277__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = new(String)
  .loc 1 5387 21
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] token_lexeme.1:rax 
  # $2.1: @String = call(init.326, token_lexeme.1)
  .loc 1 5388 5
  mov rdi, rax
  mov [rbp-16], rax
  call init_326
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] 
  # token_location.1: @Source_Location = new(Source_Location)
  .loc 1 5390 23
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  # $4.1: @Source = load_struct_member(self.1, source)
  .loc 1 5391 29
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax $4.1:rbx 
  # store_struct_member(token_location.1, source, $4.1)
  .loc 1 5391 5
  mov r15, rax
  mov QWORD PTR [r15], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  # $5.1: Int = load_struct_member(self.1, current_line)
  .loc 1 5392 27
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax $5.1:rbx 
  # store_struct_member(token_location.1, line, $5.1)
  .loc 1 5392 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  # $6.1: Int = load_struct_member(self.1, current_column)
  .loc 1 5393 29
  mov rbx, [rbp-8]
  add rbx, 24
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax $6.1:rbx 
  # store_struct_member(token_location.1, column, $6.1)
  .loc 1 5393 5
  mov r15, rax
  add r15, 16
  mov QWORD PTR [r15], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  # next_char.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5395 18
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call peek_char_275
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:rax 
  # $8.1: Boolean = call(is_identifier_start.279, next_char.1)
  .loc 1 5396 9
  mov dil, al
  mov [rbp-25], al
  call is_identifier_start_279
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $8.1:rax 
  # jump($8.1, block.2, block.3)
  test al, al
  jz .LABEL__scan_token_277__3
.LABEL__scan_token_277__2:
  # $9.1: @Token = call(scan_identifier_token.286, self.1, token_lexeme.1, token_location.1)
  .loc 1 5397 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_identifier_token_286
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:rax 
  # return($9.1)
  .loc 1 5397 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__3:
  # $10.1: Boolean = call(is_digit.278, next_char.1)
  .loc 1 5399 9
  mov dil, [rbp-25]
  call is_digit_278
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $10.1:rax 
  # jump($10.1, block.5, block.6)
  test al, al
  jz .LABEL__scan_token_277__6
.LABEL__scan_token_277__5:
  # $11.1: @Token = call(scan_integer_token.287, self.1, token_lexeme.1, token_location.1)
  .loc 1 5400 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_integer_token_287
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $11.1:rax 
  # return($11.1)
  .loc 1 5400 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__6:
  # $12.1: Boolean = next_char.1 == '\''
  .loc 1 5402 9
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $12.1:rax 
  # jump($12.1, block.8, block.9)
  test al, al
  jz .LABEL__scan_token_277__9
.LABEL__scan_token_277__8:
  # $13.1: @Token = call(scan_character_token.283, self.1, token_lexeme.1, token_location.1)
  .loc 1 5403 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_character_token_283
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $13.1:rax 
  # return($13.1)
  .loc 1 5403 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__9:
  # $14.1: Boolean = next_char.1 == '"'
  .loc 1 5405 9
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $14.1:rax 
  # jump($14.1, block.11, block.12)
  test al, al
  jz .LABEL__scan_token_277__12
.LABEL__scan_token_277__11:
  # $15.1: @Token = call(scan_string_token.289, self.1, token_lexeme.1, token_location.1)
  .loc 1 5406 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_string_token_289
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $15.1:rax 
  # return($15.1)
  .loc 1 5406 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__12:
  # $16.1: Boolean = next_char.1 == '\\'
  .loc 1 5408 9
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $16.1:rax 
  # jump($16.1, block.14, block.15)
  test al, al
  jz .LABEL__scan_token_277__15
.LABEL__scan_token_277__14:
  # $17.1: @Token = call(scan_comment_token.285, self.1, token_lexeme.1, token_location.1)
  .loc 1 5409 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_comment_token_285
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $17.1:rax 
  # return($17.1)
  .loc 1 5409 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__15:
  # $18.1: Boolean = call(is_space.282, next_char.1)
  .loc 1 5411 9
  mov dil, [rbp-25]
  call is_space_282
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $18.1:rax 
  # jump($18.1, block.17, block.18)
  test al, al
  jz .LABEL__scan_token_277__18
.LABEL__scan_token_277__17:
  # $19.1: @Token = call(scan_space_token.288, self.1, token_lexeme.1, token_location.1)
  .loc 1 5412 16
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_space_token_288
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $19.1:rax 
  # return($19.1)
  .loc 1 5412 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__18:
  # $20.1: Boolean = next_char.1 == '\n'
  .loc 1 5414 9
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $20.1:rax 
  # jump($20.1, block.20, block.21)
  test al, al
  jz .LABEL__scan_token_277__21
.LABEL__scan_token_277__20:
  # $21.1: Int8 = call(next_char.276, self.1)
  .loc 1 5415 9
  mov rdi, [rbp-8]
  call next_char_276
  # [discarded value]: $20.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # $22.1: @End_Of_Line_Token = call(create_end_of_line_token.296, token_lexeme.1, token_location.1)
  .loc 1 5416 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call create_end_of_line_token_296
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $22.1:rax 
  # return($22.1)
  .loc 1 5416 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__21:
  # $23.1: Boolean = next_char.1 == '\0'
  .loc 1 5418 9
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $23.1:rax 
  # jump($23.1, block.23, block.24)
  test al, al
  jz .LABEL__scan_token_277__24
.LABEL__scan_token_277__23:
  # $24.1: Int8 = call(next_char.276, self.1)
  .loc 1 5419 9
  mov rdi, [rbp-8]
  call next_char_276
  # [discarded value]: $23.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # $25.1: @End_Of_File_Token = call(create_end_of_file_token.295, token_lexeme.1, token_location.1)
  .loc 1 5420 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call create_end_of_file_token_295
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $25.1:rax 
  # return($25.1)
  .loc 1 5420 9
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
.LABEL__scan_token_277__24:
  # $26.1: Int8 = call(next_char.276, self.1)
  .loc 1 5422 25
  mov rdi, [rbp-8]
  call next_char_276
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $26.1:rax 
  # $27.1: @String = call(append.330, token_lexeme.1, $26.1)
  .loc 1 5422 5
  mov rdi, [rbp-16]
  mov sil, al
  call append_330
  # [discarded value]: $26.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # $28.1: @Other_Token = call(create_other_token.302, token_lexeme.1, token_location.1)
  .loc 1 5423 12
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call create_other_token_302
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $28.1:rax 
  # return($28.1)
  .loc 1 5423 5
  jmp .LABEL__scan_token_277__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [discarded value]: next_char.1
  # [live values]: 
.LABEL__scan_token_277__end:
  mov rsp, rbp
  pop rbp
  ret

scan_token_277__stack_frame_size: .word 32

  .loc 1 5426 1
  .text
is_digit_278:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_digit_278__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_digit_278__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Int = cast(char.1)
  .loc 1 5427 12
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  # $2.1: Int = cast('0')
  .loc 1 5427 27
  mov bl, 48
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  # $4.1: Boolean = $1.1 >= $2.1
  .loc 1 5427 12
  cmp rax, rbx
  setge r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_digit_278__3
.LABEL__is_digit_278__2:
  # $5.1: Int = cast(char.1)
  .loc 1 5427 41
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  # $6.1: Int = cast('9')
  .loc 1 5427 56
  mov bl, 57
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  # $4.2: Boolean = $5.1 <= $6.1
  .loc 1 5427 41
  cmp rax, rbx
  setle r15b
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15[rbp-2] 
  # jump(block.3)
  mov [rbp-2], r15b
.LABEL__is_digit_278__3:
  # $4.3: Boolean = phi($4.1, $4.2)
  .loc 1 5427 12
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $4.3:[rbp-2] 
  # return($4.3)
  .loc 1 5427 5
  mov al, [rbp-2]
  jmp .LABEL__is_digit_278__end
  # [discarded value]: $4.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: char.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__is_digit_278__end:
  mov rsp, rbp
  pop rbp
  ret

is_digit_278__stack_frame_size: .word 16

  .loc 1 5430 1
  .text
is_identifier_start_279:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_start_279__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_start_279__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $2.1: Boolean = call(is_letter.281, char.1)
  .loc 1 5431 12
  mov [rbp-1], dil
  call is_letter_281
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # jump($2.1, block.3, block.2)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_start_279__2
.LABEL__is_identifier_start_279__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 1 5431 12
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.3:[rbp-2] 
  # return($2.3)
  .loc 1 5431 5
  mov al, [rbp-2]
  jmp .LABEL__is_identifier_start_279__end
  # [discarded value]: $2.3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
.LABEL__is_identifier_start_279__2:
  # $2.2: Boolean = char.1 == '_'
  .loc 1 5431 32
  cmp BYTE PTR [rbp-1], 95
  sete al
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:rax[rbp-2] 
  # jump(block.3)
  mov [rbp-2], al
  jmp .LABEL__is_identifier_start_279__3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:[rbp-2] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [discarded value]: char.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__is_identifier_start_279__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_start_279__stack_frame_size: .word 16

  .loc 1 5434 1
  .text
is_identifier_body_280:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_body_280__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_body_280__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Boolean = call(is_identifier_start.279, char.1)
  .loc 1 5435 9
  mov [rbp-1], dil
  call is_identifier_start_279
  # [live values]: char.1:[rbp-1] $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  jz .LABEL__is_identifier_body_280__3
.LABEL__is_identifier_body_280__2:
  # return(true)
  .loc 1 5436 9
  mov al, 1
  jmp .LABEL__is_identifier_body_280__end
  # [discarded value]: $1.1
  # [live values]: char.1:[rbp-1] 
.LABEL__is_identifier_body_280__3:
  # $2.1: Boolean = call(is_digit.278, char.1)
  .loc 1 5438 12
  mov dil, [rbp-1]
  call is_digit_278
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # return($2.1)
  .loc 1 5438 5
  jmp .LABEL__is_identifier_body_280__end
  # [discarded value]: $2.1
  # [live values]: char.1:[rbp-1] 
  # [live values]: char.1:[rbp-1] 
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_body_280__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_body_280__stack_frame_size: .word 16

  .loc 1 5441 1
  .text
is_letter_281:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_letter_281__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_letter_281__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Int = cast(char.1)
  .loc 1 5442 13
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  # $2.1: Int = cast('a')
  .loc 1 5442 28
  mov bl, 97
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  # $4.1: Boolean = $1.1 >= $2.1
  .loc 1 5442 13
  cmp rax, rbx
  setge r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, block.4, block.5)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_letter_281__5
.LABEL__is_letter_281__4:
  # $5.1: Int = cast(char.1)
  .loc 1 5442 42
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  # $6.1: Int = cast('z')
  .loc 1 5442 57
  mov bl, 122
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  # $4.2: Boolean = $5.1 <= $6.1
  .loc 1 5442 42
  cmp rax, rbx
  setle r15b
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15[rbp-2] 
  # jump(block.5)
  mov [rbp-2], r15b
.LABEL__is_letter_281__5:
  # $8.1: Boolean = phi($4.1, $4.2)
  .loc 1 5442 13
  mov al, [rbp-2]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:rax 
  # jump($8.1, block.3, block.2)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_letter_281__2
.LABEL__is_letter_281__3:
  # $8.3: Boolean = phi($8.1, $8.2)
  .loc 1 5442 13
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $8.3:[rbp-3] $4.2:[rbp-2] $8.1:[rbp-3] 
  # return($8.3)
  .loc 1 5442 5
  mov al, [rbp-3]
  jmp .LABEL__is_letter_281__end
  # [discarded value]: $8.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
.LABEL__is_letter_281__2:
  # $9.1: Int = cast(char.1)
  .loc 1 5442 73
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $4.2:[rbp-2] $8.1:[rbp-3] 
  # $10.1: Int = cast('A')
  .loc 1 5442 88
  mov bl, 65
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $10.1:rbx $4.2:[rbp-2] $8.1:[rbp-3] 
  # $12.1: Boolean = $9.1 >= $10.1
  .loc 1 5442 73
  cmp rax, rbx
  setge r15b
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  # jump($12.1, block.6, block.7)
  test r15b, r15b
  mov [rbp-4], r15b
  jz .LABEL__is_letter_281__7
.LABEL__is_letter_281__6:
  # $13.1: Int = cast(char.1)
  .loc 1 5442 102
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax 
  # $14.1: Int = cast('Z')
  .loc 1 5442 117
  mov bl, 90
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax $14.1:rbx 
  # $12.2: Boolean = $13.1 <= $14.1
  .loc 1 5442 102
  cmp rax, rbx
  setle r15b
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:r15[rbp-4] 
  # jump(block.7)
  mov [rbp-4], r15b
.LABEL__is_letter_281__7:
  # $8.2: Boolean = phi($12.1, $12.2)
  .loc 1 5442 73
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:rax[rbp-3] 
  # jump(block.3)
  mov [rbp-3], al
  jmp .LABEL__is_letter_281__3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [discarded value]: $12.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $12.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: char.1
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__is_letter_281__end:
  mov rsp, rbp
  pop rbp
  ret

is_letter_281__stack_frame_size: .word 16

  .loc 1 5445 1
  .text
is_space_282:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_space_282__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_space_282__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $1.1: Boolean = char.1 == ' '
  .loc 1 5446 12
  cmp dil, 32
  sete al
  # [discarded value]: char.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 5446 5
  jmp .LABEL__is_space_282__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__is_space_282__end:
  mov rsp, rbp
  pop rbp
  ret

is_space_282__stack_frame_size: .word 0

  .loc 1 5449 1
  .text
scan_character_token_283:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_character_token_283__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_character_token_283__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # $1.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5450 9
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_275
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != '\''
  .loc 1 5450 9
  cmp al, 39
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  jz .LABEL__scan_character_token_283__3
.LABEL__scan_character_token_283__2:
  # call(abort.344, "Invalid state")
  .loc 1 5451 9
  lea rdi, .LABEL__string_42[rip] # "Invalid state"
  call abort_344
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_character_token_283__3:
  # $3.1: Int8 = call(next_char.276, self.1)
  .loc 1 5455 25
  mov rdi, [rbp-24]
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append.330, token_lexeme.1, $3.1)
  .loc 1 5455 5
  mov rdi, [rbp-16]
  mov sil, al
  call append_330
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # char.1: Int8 = call(next_char.276, self.1)
  .loc 1 5456 13
  mov rdi, [rbp-24]
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:rax 
  # $6.1: @String = call(append.330, token_lexeme.1, char.1)
  .loc 1 5457 5
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_330
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # $7.1: Boolean = char.1 == '\''
  .loc 1 5458 9
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $7.1:rax 
  # jump($7.1, block.4, block.5)
  test al, al
  jz .LABEL__scan_character_token_283__5
.LABEL__scan_character_token_283__4:
  # $8.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5459 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $8.1:rax 
  # return($8.1)
  .loc 1 5459 9
  jmp .LABEL__scan_character_token_283__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
.LABEL__scan_character_token_283__5:
  # $9.1: Boolean = char.1 == '\\'
  .loc 1 5461 9
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $9.1:rax 
  # jump($9.1, block.7, block.9)
  test al, al
  jz .LABEL__scan_character_token_283__9
.LABEL__scan_character_token_283__7:
  # char.8: Int8 = call(next_char.276, self.1)
  .loc 1 5462 16
  mov rdi, [rbp-24]
  call next_char_276
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:rax[rbp-25] 
  # $21.1: @String = call(append.330, token_lexeme.1, char.8)
  .loc 1 5463 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_330
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # $22.1: Boolean = call(is_escape.284, char.8)
  .loc 1 5464 13
  mov dil, [rbp-25]
  call is_escape_284
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $22.1:rax 
  # $23.1: Boolean = $22.1 == false
  .loc 1 5464 13
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $23.1:rbx 
  # jump($23.1, block.20, block.21)
  test bl, bl
  jz .LABEL__scan_character_token_283__21
.LABEL__scan_character_token_283__20:
  # $24.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5465 20
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $24.1:rax 
  # return($24.1)
  .loc 1 5465 13
  jmp .LABEL__scan_character_token_283__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__21:
  # $25.1: Boolean = char.8 == 'n'
  .loc 1 5467 13
  cmp BYTE PTR [rbp-25], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $25.1:rax 
  # jump($25.1, block.23, block.25)
  test al, al
  jz .LABEL__scan_character_token_283__25
.LABEL__scan_character_token_283__23:
  # value.8: Int8 = '\n'
  .loc 1 5468 13
  mov al, 10
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:rax 
  # jump(block.24)
  mov [rbp-26], al
.LABEL__scan_character_token_283__24:
  # value.10: Int8 = phi(value.8, value.7, value.6, value.5, value.4, value.3)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
  # char.18: Int8 = call(next_char.276, self.1)
  .loc 1 5482 16
  mov rdi, [rbp-24]
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] char.18:rax[rbp-25] 
  # $32.1: @String = call(append.330, token_lexeme.1, char.18)
  .loc 1 5483 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_330
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] char.18:[rbp-25] 
  # $33.1: Boolean = char.18 != '\''
  .loc 1 5484 13
  cmp BYTE PTR [rbp-25], 39
  setne al
  # [discarded value]: char.18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $33.1:rax 
  # jump($33.1, block.41, block.8)
  test al, al
  jz .LABEL__scan_character_token_283__8
.LABEL__scan_character_token_283__41:
  # $34.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5485 20
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] $34.1:rax 
  # return($34.1)
  .loc 1 5485 13
  jmp .LABEL__scan_character_token_283__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
.LABEL__scan_character_token_283__8:
  # value.9: Int8 = phi(value.2, value.10)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.9:[rbp-26] value.8:[rbp-26] value.10:[rbp-26] 
  # $35.1: @Character_Token = call(create_character_token.292, token_lexeme.1, token_location.1, value.9)
  .loc 1 5498 12
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  mov dl, [rbp-26]
  call create_character_token_292
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $35.1:rax value.8:[rbp-26] value.10:[rbp-26] 
  # return($35.1)
  .loc 1 5498 5
  jmp .LABEL__scan_character_token_283__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] value.10:[rbp-26] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.8:[rbp-26] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__25:
  # $26.1: Boolean = char.8 == '\"'
  .loc 1 5469 20
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $26.1:rax 
  # jump($26.1, block.26, block.28)
  test al, al
  jz .LABEL__scan_character_token_283__28
.LABEL__scan_character_token_283__26:
  # value.7: Int8 = char.8
  .loc 1 5470 13
  mov al, [rbp-25]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.7:rax[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_283__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.7:[rbp-26] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__28:
  # $27.1: Boolean = char.8 == '\''
  .loc 1 5471 20
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $27.1:rax 
  # jump($27.1, block.29, block.31)
  test al, al
  jz .LABEL__scan_character_token_283__31
.LABEL__scan_character_token_283__29:
  # value.6: Int8 = char.8
  .loc 1 5472 13
  mov al, [rbp-25]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.6:rax[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_283__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.6:[rbp-26] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__31:
  # $28.1: Boolean = char.8 == '\\'
  .loc 1 5473 20
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $28.1:rax 
  # jump($28.1, block.32, block.34)
  test al, al
  jz .LABEL__scan_character_token_283__34
.LABEL__scan_character_token_283__32:
  # value.5: Int8 = char.8
  .loc 1 5474 13
  mov al, [rbp-25]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.5:rax[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_283__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.5:[rbp-26] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__34:
  # $29.1: Boolean = char.8 == 't'
  .loc 1 5475 20
  cmp BYTE PTR [rbp-25], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $29.1:rax 
  # jump($29.1, block.35, block.37)
  test al, al
  jz .LABEL__scan_character_token_283__37
.LABEL__scan_character_token_283__35:
  # value.4: Int8 = '\t'
  .loc 1 5476 13
  mov al, 9
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.4:rax[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_283__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.4:[rbp-26] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__37:
  # $30.1: Boolean = char.8 == '0'
  .loc 1 5477 20
  cmp BYTE PTR [rbp-25], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] $30.1:rax 
  # jump($30.1, block.38, block.40)
  test al, al
  jz .LABEL__scan_character_token_283__40
.LABEL__scan_character_token_283__38:
  # value.3: Int8 = '\0'
  .loc 1 5478 13
  mov al, 0
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.3:rax[rbp-26] 
  # jump(block.24)
  mov [rbp-26], al
  jmp .LABEL__scan_character_token_283__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] value.3:[rbp-26] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
.LABEL__scan_character_token_283__40:
  # call(abort.344, "Invalid state")
  .loc 1 5480 13
  lea rdi, .LABEL__string_42[rip] # "Invalid state"
  call abort_344
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] char.8:[rbp-25] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
.LABEL__scan_character_token_283__9:
  # $11.1: Boolean = char.1 == '\0'
  .loc 1 5488 13
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:rax 
  # jump($11.1, block.13, block.12)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_character_token_283__12
.LABEL__scan_character_token_283__13:
  # $13.1: Boolean = phi($11.1, $11.2)
  .loc 1 5488 13
  mov al, [rbp-27]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:rax 
  # jump($13.1, block.11, block.10)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_character_token_283__10
.LABEL__scan_character_token_283__11:
  # $13.3: Boolean = phi($13.1, $13.2)
  .loc 1 5488 13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.3:[rbp-28] $13.1:[rbp-28] 
  # jump($13.3, block.14, block.15)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__scan_character_token_283__15
.LABEL__scan_character_token_283__14:
  # $15.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5489 20
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # return($15.1)
  .loc 1 5489 13
  jmp .LABEL__scan_character_token_283__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_character_token_283__15:
  # value.2: Int8 = char.1
  .loc 1 5491 9
  mov al, [rbp-25]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:rax[rbp-26] 
  # char.7: Int8 = call(next_char.276, self.1)
  .loc 1 5492 16
  mov rdi, [rbp-24]
  mov [rbp-26], al
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] char.7:rax[rbp-25] 
  # $17.1: @String = call(append.330, token_lexeme.1, char.7)
  .loc 1 5493 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-25], al
  call append_330
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] char.7:[rbp-25] 
  # $18.1: Boolean = char.7 != '\''
  .loc 1 5494 13
  cmp BYTE PTR [rbp-25], 39
  setne al
  # [discarded value]: char.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $18.1:rax 
  # jump($18.1, block.17, block.8)
  test al, al
  jz .LABEL__scan_character_token_283__8
.LABEL__scan_character_token_283__17:
  # $19.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5495 20
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] $19.1:rax 
  # return($19.1)
  .loc 1 5495 13
  jmp .LABEL__scan_character_token_283__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] value.2:[rbp-26] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_character_token_283__10:
  # $13.2: Boolean = char.1 == '\t'
  .loc 1 5488 45
  cmp BYTE PTR [rbp-25], 9
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.2:rax[rbp-28] $13.1:[rbp-28] 
  # jump(block.11)
  mov [rbp-28], al
  jmp .LABEL__scan_character_token_283__11
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.2:[rbp-28] $13.1:[rbp-28] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] 
.LABEL__scan_character_token_283__12:
  # $11.2: Boolean = char.1 == '\n'
  .loc 1 5488 29
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $11.2:rax[rbp-27] 
  # jump(block.13)
  mov [rbp-27], al
  jmp .LABEL__scan_character_token_283__13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] char.1:[rbp-25] 
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_character_token_283__end:
  mov rsp, rbp
  pop rbp
  ret

scan_character_token_283__stack_frame_size: .word 32

  .loc 1 5501 1
  .text
is_escape_284:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_escape_284__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_escape_284__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  # $2.1: Boolean = char.1 == 'n'
  .loc 1 5502 12
  cmp dil, 110
  sete al
  # [live values]: char.1:rdi $2.1:rax 
  # jump($2.1, block.11, block.10)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], dil
  jz .LABEL__is_escape_284__10
.LABEL__is_escape_284__11:
  # $4.1: Boolean = phi($2.1, $2.2)
  .loc 1 5502 12
  mov al, [rbp-1]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, block.9, block.8)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_escape_284__8
.LABEL__is_escape_284__9:
  # $6.1: Boolean = phi($4.1, $4.2)
  .loc 1 5502 12
  mov al, [rbp-3]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:rax $4.1:[rbp-3] 
  # jump($6.1, block.7, block.6)
  test al, al
  mov [rbp-4], al
  jz .LABEL__is_escape_284__6
.LABEL__is_escape_284__7:
  # $8.1: Boolean = phi($6.1, $6.2)
  .loc 1 5502 12
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($8.1, block.5, block.4)
  test al, al
  mov [rbp-5], al
  jz .LABEL__is_escape_284__4
.LABEL__is_escape_284__5:
  # $10.1: Boolean = phi($8.1, $8.2)
  .loc 1 5502 12
  mov al, [rbp-5]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($10.1, block.3, block.2)
  test al, al
  mov [rbp-6], al
  jz .LABEL__is_escape_284__2
.LABEL__is_escape_284__3:
  # $10.3: Boolean = phi($10.1, $10.2)
  .loc 1 5502 12
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.3:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # return($10.3)
  .loc 1 5502 5
  mov al, [rbp-6]
  jmp .LABEL__is_escape_284__end
  # [discarded value]: $10.3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_284__2:
  # $10.2: Boolean = char.1 == '0'
  .loc 1 5502 90
  cmp BYTE PTR [rbp-2], 48
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:rax[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(block.3)
  mov [rbp-6], al
  jmp .LABEL__is_escape_284__3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_284__4:
  # $8.2: Boolean = char.1 == '\\'
  .loc 1 5502 74
  cmp BYTE PTR [rbp-2], 92
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:rax[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(block.5)
  mov [rbp-5], al
  jmp .LABEL__is_escape_284__5
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_284__6:
  # $6.2: Boolean = char.1 == '\''
  .loc 1 5502 58
  cmp BYTE PTR [rbp-2], 39
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:rax[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(block.7)
  mov [rbp-4], al
  jmp .LABEL__is_escape_284__7
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
.LABEL__is_escape_284__8:
  # $4.2: Boolean = char.1 == '\"'
  .loc 1 5502 42
  cmp BYTE PTR [rbp-2], 34
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:rax[rbp-3] $4.1:[rbp-3] 
  # jump(block.9)
  mov [rbp-3], al
  jmp .LABEL__is_escape_284__9
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:[rbp-3] $4.1:[rbp-3] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [discarded value]: $4.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
.LABEL__is_escape_284__10:
  # $2.2: Boolean = char.1 == 't'
  .loc 1 5502 27
  cmp BYTE PTR [rbp-2], 116
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:rax[rbp-1] 
  # jump(block.11)
  mov [rbp-1], al
  jmp .LABEL__is_escape_284__11
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [discarded value]: char.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__is_escape_284__end:
  mov rsp, rbp
  pop rbp
  ret

is_escape_284__stack_frame_size: .word 16

  .loc 1 5505 1
  .text
scan_comment_token_285:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_comment_token_285__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_comment_token_285__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(block.2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_comment_token_285__2:
  # $1.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5506 12
  mov rdi, [rbp-24]
  call peek_char_275
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != '\n'
  .loc 1 5506 12
  cmp al, 10
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.3, block.4)
  test bl, bl
  jz .LABEL__scan_comment_token_285__4
.LABEL__scan_comment_token_285__3:
  # $3.1: Int8 = call(next_char.276, self.1)
  .loc 1 5507 29
  mov rdi, [rbp-24]
  call next_char_276
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append.330, token_lexeme.1, $3.1)
  .loc 1 5507 9
  mov rdi, [rbp-16]
  mov sil, al
  call append_330
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_comment_token_285__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_comment_token_285__4:
  # $5.1: @Comment_Token = call(create_comment_token.294, token_lexeme.1, token_location.1)
  .loc 1 5509 12
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_comment_token_294
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # return($5.1)
  .loc 1 5509 5
  jmp .LABEL__scan_comment_token_285__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_comment_token_285__end:
  mov rsp, rbp
  pop rbp
  ret

scan_comment_token_285__stack_frame_size: .word 32

  .loc 1 5512 1
  .text
scan_identifier_token_286:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_identifier_token_286__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_identifier_token_286__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(block.2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_identifier_token_286__2:
  # $1.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5513 12
  mov rdi, [rbp-24]
  call peek_char_275
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = call(is_identifier_body.280, $1.1)
  .loc 1 5513 12
  mov dil, al
  call is_identifier_body_280
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__scan_identifier_token_286__4
.LABEL__scan_identifier_token_286__3:
  # $3.1: Int8 = call(next_char.276, self.1)
  .loc 1 5514 29
  mov rdi, [rbp-24]
  call next_char_276
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = call(append.330, token_lexeme.1, $3.1)
  .loc 1 5514 9
  mov rdi, [rbp-16]
  mov sil, al
  call append_330
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_identifier_token_286__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__4:
  # $5.1: Boolean = call(equals.335, token_lexeme.1, "as")
  .loc 1 5516 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_246[rip] # "as"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $5.1:rax 
  # jump($5.1, block.5, block.6)
  test al, al
  jz .LABEL__scan_identifier_token_286__6
.LABEL__scan_identifier_token_286__5:
  # $6.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5517 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $6.1:rax 
  # return($6.1)
  .loc 1 5517 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__6:
  # $7.1: Boolean = call(equals.335, token_lexeme.1, "break")
  .loc 1 5519 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_248[rip] # "break"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $7.1:rax 
  # jump($7.1, block.8, block.9)
  test al, al
  jz .LABEL__scan_identifier_token_286__9
.LABEL__scan_identifier_token_286__8:
  # $8.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5520 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 1 5520 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__9:
  # $9.1: Boolean = call(equals.335, token_lexeme.1, "else")
  .loc 1 5522 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_252[rip] # "else"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $9.1:rax 
  # jump($9.1, block.11, block.12)
  test al, al
  jz .LABEL__scan_identifier_token_286__12
.LABEL__scan_identifier_token_286__11:
  # $10.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5523 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $10.1:rax 
  # return($10.1)
  .loc 1 5523 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__12:
  # $11.1: Boolean = call(equals.335, token_lexeme.1, "external")
  .loc 1 5525 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_255[rip] # "external"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $11.1:rax 
  # jump($11.1, block.14, block.15)
  test al, al
  jz .LABEL__scan_identifier_token_286__15
.LABEL__scan_identifier_token_286__14:
  # $12.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5526 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $12.1:rax 
  # return($12.1)
  .loc 1 5526 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__15:
  # $13.1: Boolean = call(equals.335, token_lexeme.1, "false")
  .loc 1 5528 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_297[rip] # "false"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $13.1:rax 
  # jump($13.1, block.17, block.18)
  test al, al
  jz .LABEL__scan_identifier_token_286__18
.LABEL__scan_identifier_token_286__17:
  # $14.1: @Boolean_Token = call(create_boolean_token.293, token_lexeme.1, token_location.1, false)
  .loc 1 5529 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  mov dl, 0
  call create_boolean_token_293
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $14.1:rax 
  # return($14.1)
  .loc 1 5529 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__18:
  # $15.1: Boolean = call(equals.335, token_lexeme.1, "if")
  .loc 1 5531 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_258[rip] # "if"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $15.1:rax 
  # jump($15.1, block.20, block.21)
  test al, al
  jz .LABEL__scan_identifier_token_286__21
.LABEL__scan_identifier_token_286__20:
  # $16.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5532 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $16.1:rax 
  # return($16.1)
  .loc 1 5532 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__21:
  # $17.1: Boolean = call(equals.335, token_lexeme.1, "include")
  .loc 1 5534 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_259[rip] # "include"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $17.1:rax 
  # jump($17.1, block.23, block.24)
  test al, al
  jz .LABEL__scan_identifier_token_286__24
.LABEL__scan_identifier_token_286__23:
  # $18.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5535 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $18.1:rax 
  # return($18.1)
  .loc 1 5535 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__24:
  # $19.1: Boolean = call(equals.335, token_lexeme.1, "loop")
  .loc 1 5537 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_261[rip] # "loop"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $19.1:rax 
  # jump($19.1, block.26, block.27)
  test al, al
  jz .LABEL__scan_identifier_token_286__27
.LABEL__scan_identifier_token_286__26:
  # $20.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5538 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $20.1:rax 
  # return($20.1)
  .loc 1 5538 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__27:
  # $21.1: Boolean = call(equals.335, token_lexeme.1, "new")
  .loc 1 5540 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_236[rip] # "new"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $21.1:rax 
  # jump($21.1, block.29, block.30)
  test al, al
  jz .LABEL__scan_identifier_token_286__30
.LABEL__scan_identifier_token_286__29:
  # $22.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5541 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $22.1:rax 
  # return($22.1)
  .loc 1 5541 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__30:
  # $23.1: Boolean = call(equals.335, token_lexeme.1, "null")
  .loc 1 5543 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_298[rip] # "null"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $23.1:rax 
  # jump($23.1, block.32, block.33)
  test al, al
  jz .LABEL__scan_identifier_token_286__33
.LABEL__scan_identifier_token_286__32:
  # $24.1: @Null_Token = call(create_null_token.301, token_lexeme.1, token_location.1)
  .loc 1 5544 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_null_token_301
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $24.1:rax 
  # return($24.1)
  .loc 1 5544 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__33:
  # $25.1: Boolean = call(equals.335, token_lexeme.1, "return")
  .loc 1 5546 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_239[rip] # "return"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $25.1:rax 
  # jump($25.1, block.35, block.36)
  test al, al
  jz .LABEL__scan_identifier_token_286__36
.LABEL__scan_identifier_token_286__35:
  # $26.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5547 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $26.1:rax 
  # return($26.1)
  .loc 1 5547 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__36:
  # $27.1: Boolean = call(equals.335, token_lexeme.1, "struct")
  .loc 1 5549 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_266[rip] # "struct"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $27.1:rax 
  # jump($27.1, block.38, block.39)
  test al, al
  jz .LABEL__scan_identifier_token_286__39
.LABEL__scan_identifier_token_286__38:
  # $28.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5550 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $28.1:rax 
  # return($28.1)
  .loc 1 5550 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__39:
  # $29.1: Boolean = call(equals.335, token_lexeme.1, "true")
  .loc 1 5552 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_299[rip] # "true"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $29.1:rax 
  # jump($29.1, block.41, block.42)
  test al, al
  jz .LABEL__scan_identifier_token_286__42
.LABEL__scan_identifier_token_286__41:
  # $30.1: @Boolean_Token = call(create_boolean_token.293, token_lexeme.1, token_location.1, true)
  .loc 1 5553 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  mov dl, 1
  call create_boolean_token_293
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $30.1:rax 
  # return($30.1)
  .loc 1 5553 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__42:
  # $31.1: Boolean = call(equals.335, token_lexeme.1, "while")
  .loc 1 5555 9
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_268[rip] # "while"
  call equals_335
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $31.1:rax 
  # jump($31.1, block.44, block.45)
  test al, al
  jz .LABEL__scan_identifier_token_286__45
.LABEL__scan_identifier_token_286__44:
  # $32.1: @Keyword_Token = call(create_keyword_token.300, token_lexeme.1, token_location.1)
  .loc 1 5556 16
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_keyword_token_300
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $32.1:rax 
  # return($32.1)
  .loc 1 5556 9
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_identifier_token_286__45:
  # $33.1: @Identifier_Token = call(create_identifier_token.298, token_lexeme.1, token_location.1)
  .loc 1 5558 12
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_identifier_token_298
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $33.1:rax 
  # return($33.1)
  .loc 1 5558 5
  jmp .LABEL__scan_identifier_token_286__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_identifier_token_286__end:
  mov rsp, rbp
  pop rbp
  ret

scan_identifier_token_286__stack_frame_size: .word 32

  .loc 1 5561 1
  .text
scan_integer_token_287:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_integer_token_287__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_integer_token_287__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # value.1: Int = 0
  .loc 1 5562 5
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx value.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_integer_token_287__2:
  # value.5: Int = phi(value.1, value.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # $1.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5563 12
  mov rdi, [rbp-32]
  call peek_char_275
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $1.1:rax 
  # $2.1: Boolean = call(is_digit.278, $1.1)
  .loc 1 5563 12
  mov dil, al
  call is_digit_278
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__scan_integer_token_287__4
.LABEL__scan_integer_token_287__3:
  # char.1: Int8 = call(next_char.276, self.1)
  .loc 1 5564 17
  mov rdi, [rbp-32]
  call next_char_276
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax 
  # $4.1: Int = value.5 * 10
  .loc 1 5565 17
  mov rbx, [rbp-8]
  imul rbx, 10
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx 
  # $5.1: Int = cast(char.1)
  .loc 1 5565 31
  mov r15b, al
  movsx r15, r15b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx $5.1:r15 
  # $6.1: Int = cast('0')
  .loc 1 5565 45
  mov r14b, 48
  movsx r14, r14b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx $5.1:r15 $6.1:r14 
  # $7.1: Int = $5.1 - $6.1
  .loc 1 5565 31
  mov r13, r15
  sub r13, r14
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax $4.1:rbx $7.1:r13 
  # value.3: Int = $4.1 + $7.1
  .loc 1 5565 17
  mov r15, rbx
  add r15, r13
  # [discarded value]: $4.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] char.1:rax value.3:r15[rbp-8] 
  # $9.1: @String = call(append.330, token_lexeme.1, char.1)
  .loc 1 5566 9
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], r15
  call append_330
  # [discarded value]: char.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] value.3:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_integer_token_287__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] value.3:[rbp-8] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
.LABEL__scan_integer_token_287__4:
  # $10.1: @Integer_Token = call(create_integer_token.299, token_lexeme.1, token_location.1, value.5)
  .loc 1 5568 12
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  call create_integer_token_299
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $10.1:rax 
  # return($10.1)
  .loc 1 5568 5
  jmp .LABEL__scan_integer_token_287__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [discarded value]: value.1
  # [live values]: 
.LABEL__scan_integer_token_287__end:
  mov rsp, rbp
  pop rbp
  ret

scan_integer_token_287__stack_frame_size: .word 32

  .loc 1 5571 1
  .text
scan_space_token_288:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_space_token_288__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_space_token_288__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # count.1: Int = 0
  .loc 1 5572 5
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx count.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_space_token_288__2:
  # count.5: Int = phi(count.1, count.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # $1.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5573 12
  mov rdi, [rbp-32]
  call peek_char_275
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 == ' '
  .loc 1 5573 12
  cmp al, 32
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:rbx 
  # jump($2.1, block.3, block.4)
  test bl, bl
  jz .LABEL__scan_space_token_288__4
.LABEL__scan_space_token_288__3:
  # char.1: Int8 = call(next_char.276, self.1)
  .loc 1 5574 17
  mov rdi, [rbp-32]
  call next_char_276
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] char.1:rax 
  # count.3: Int = count.5 + 1
  .loc 1 5575 17
  mov rbx, [rbp-8]
  add rbx, 1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] char.1:rax count.3:rbx[rbp-8] 
  # $5.1: @String = call(append.330, token_lexeme.1, char.1)
  .loc 1 5576 9
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], rbx
  call append_330
  # [discarded value]: char.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] count.3:[rbp-8] 
  # jump(block.2)
  jmp .LABEL__scan_space_token_288__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] count.3:[rbp-8] 
  # [discarded value]: count.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
.LABEL__scan_space_token_288__4:
  # $6.1: @Space_Token = call(create_space_token.303, token_lexeme.1, token_location.1, count.5)
  .loc 1 5578 12
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  call create_space_token_303
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $6.1:rax 
  # return($6.1)
  .loc 1 5578 5
  jmp .LABEL__scan_space_token_288__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  # [discarded value]: count.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [discarded value]: count.1
  # [live values]: 
.LABEL__scan_space_token_288__end:
  mov rsp, rbp
  pop rbp
  ret

scan_space_token_288__stack_frame_size: .word 32

  .loc 1 5581 1
  .text
scan_string_token_289:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_string_token_289__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_string_token_289__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # $1.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5582 9
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_275
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  # $2.1: Boolean = $1.1 != '"'
  .loc 1 5582 9
  cmp al, 34
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  jz .LABEL__scan_string_token_289__3
.LABEL__scan_string_token_289__2:
  # call(abort.344, "Invalid state")
  .loc 1 5583 9
  lea rdi, .LABEL__string_42[rip] # "Invalid state"
  call abort_344
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
.LABEL__scan_string_token_289__3:
  # value.1: @String = new(String)
  .loc 1 5586 14
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:rax 
  # $4.1: @String = call(init.326, value.1)
  .loc 1 5587 5
  mov rdi, rax
  mov [rbp-32], rax
  call init_326
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # $5.1: Int8 = call(next_char.276, self.1)
  .loc 1 5589 25
  mov rdi, [rbp-24]
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] $5.1:rax 
  # $6.1: @String = call(append.330, token_lexeme.1, $5.1)
  .loc 1 5589 5
  mov rdi, [rbp-16]
  mov sil, al
  call append_330
  # [discarded value]: $5.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # jump(block.4)
.LABEL__scan_string_token_289__4:
  # char.1: Int8 = call(peek_char.275, self.1)
  .loc 1 5591 17
  mov rdi, [rbp-24]
  call peek_char_275
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:rax 
  # $9.1: Boolean = char.1 == '\0'
  .loc 1 5592 13
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:rax $9.1:rbx 
  # jump($9.1, block.7, block.6)
  test bl, bl
  mov [rbp-33], al
  mov [rbp-34], bl
  jz .LABEL__scan_string_token_289__6
.LABEL__scan_string_token_289__7:
  # $9.3: Boolean = phi($9.1, $9.2)
  .loc 1 5592 13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] $9.3:[rbp-34] 
  # jump($9.3, block.8, block.9)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__scan_string_token_289__9
.LABEL__scan_string_token_289__8:
  # $11.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5593 20
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] $11.1:rax 
  # return($11.1)
  .loc 1 5593 13
  jmp .LABEL__scan_string_token_289__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__scan_string_token_289__9:
  # char.3: Int8 = call(next_char.276, self.1)
  .loc 1 5595 16
  mov rdi, [rbp-24]
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:rax[rbp-33] 
  # $13.1: @String = call(append.330, token_lexeme.1, char.3)
  .loc 1 5596 9
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-33], al
  call append_330
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
  # $14.1: Boolean = char.3 == '"'
  .loc 1 5597 13
  cmp BYTE PTR [rbp-33], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] $14.1:rax 
  # jump($14.1, block.11, block.12)
  test al, al
  jz .LABEL__scan_string_token_289__12
.LABEL__scan_string_token_289__11:
  # $15.1: @String_Token = call(create_string_token.304, token_lexeme.1, token_location.1, value.1)
  .loc 1 5598 20
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  mov rdx, [rbp-32]
  call create_string_token_304
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] $15.1:rax 
  # return($15.1)
  .loc 1 5598 13
  jmp .LABEL__scan_string_token_289__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
.LABEL__scan_string_token_289__12:
  # $16.1: Boolean = char.3 == '\\'
  .loc 1 5600 13
  cmp BYTE PTR [rbp-33], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] $16.1:rax 
  # jump($16.1, block.14, block.16)
  test al, al
  jz .LABEL__scan_string_token_289__16
.LABEL__scan_string_token_289__14:
  # char.6: Int8 = call(peek_char.275, self.1)
  .loc 1 5601 20
  mov rdi, [rbp-24]
  call peek_char_275
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:rax[rbp-33] 
  # $20.1: Boolean = char.6 == '\0'
  .loc 1 5602 17
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:rax[rbp-33] $20.1:rbx 
  # jump($20.1, block.18, block.17)
  test bl, bl
  mov [rbp-33], al
  mov [rbp-35], bl
  jz .LABEL__scan_string_token_289__17
.LABEL__scan_string_token_289__18:
  # $20.3: Boolean = phi($20.1, $20.2)
  .loc 1 5602 17
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] $20.3:[rbp-35] 
  # jump($20.3, block.19, block.20)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__scan_string_token_289__20
.LABEL__scan_string_token_289__19:
  # $22.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5603 24
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $20.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] $22.1:rax 
  # return($22.1)
  .loc 1 5603 17
  jmp .LABEL__scan_string_token_289__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] 
.LABEL__scan_string_token_289__20:
  # char.8: Int8 = call(next_char.276, self.1)
  .loc 1 5605 20
  mov rdi, [rbp-24]
  call next_char_276
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:rax[rbp-33] 
  # $24.1: @String = call(append.330, token_lexeme.1, char.8)
  .loc 1 5606 13
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-33], al
  call append_330
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # $25.1: Boolean = call(is_escape.284, char.8)
  .loc 1 5607 17
  mov dil, [rbp-33]
  call is_escape_284
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $25.1:rax 
  # $26.1: Boolean = $25.1 == false
  .loc 1 5607 17
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $26.1:rbx 
  # jump($26.1, block.22, block.23)
  test bl, bl
  jz .LABEL__scan_string_token_289__23
.LABEL__scan_string_token_289__22:
  # $27.1: @Error_Token = call(create_error_token.297, token_lexeme.1, token_location.1)
  .loc 1 5608 24
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_error_token_297
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $27.1:rax 
  # return($27.1)
  .loc 1 5608 17
  jmp .LABEL__scan_string_token_289__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__23:
  # $28.1: Boolean = char.8 == 'n'
  .loc 1 5610 17
  cmp BYTE PTR [rbp-33], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $28.1:rax 
  # jump($28.1, block.25, block.27)
  test al, al
  jz .LABEL__scan_string_token_289__27
.LABEL__scan_string_token_289__25:
  # $39.1: @String = call(append.330, value.1, '\n')
  .loc 1 5611 17
  mov rdi, [rbp-32]
  mov sil, 10
  call append_330
  # [discarded value]: $28.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__27:
  # $29.1: Boolean = char.8 == '\"'
  .loc 1 5612 24
  cmp BYTE PTR [rbp-33], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $29.1:rax 
  # jump($29.1, block.28, block.30)
  test al, al
  jz .LABEL__scan_string_token_289__30
.LABEL__scan_string_token_289__28:
  # $38.1: @String = call(append.330, value.1, char.8)
  .loc 1 5613 17
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_330
  # [discarded value]: $29.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__30:
  # $30.1: Boolean = char.8 == '\''
  .loc 1 5614 24
  cmp BYTE PTR [rbp-33], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $30.1:rax 
  # jump($30.1, block.31, block.33)
  test al, al
  jz .LABEL__scan_string_token_289__33
.LABEL__scan_string_token_289__31:
  # $37.1: @String = call(append.330, value.1, char.8)
  .loc 1 5615 17
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_330
  # [discarded value]: $30.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__33:
  # $31.1: Boolean = char.8 == '\\'
  .loc 1 5616 24
  cmp BYTE PTR [rbp-33], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $31.1:rax 
  # jump($31.1, block.34, block.36)
  test al, al
  jz .LABEL__scan_string_token_289__36
.LABEL__scan_string_token_289__34:
  # $36.1: @String = call(append.330, value.1, char.8)
  .loc 1 5617 17
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_330
  # [discarded value]: $31.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__36:
  # $32.1: Boolean = char.8 == 't'
  .loc 1 5618 24
  cmp BYTE PTR [rbp-33], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $32.1:rax 
  # jump($32.1, block.37, block.39)
  test al, al
  jz .LABEL__scan_string_token_289__39
.LABEL__scan_string_token_289__37:
  # $35.1: @String = call(append.330, value.1, '\t')
  .loc 1 5619 17
  mov rdi, [rbp-32]
  mov sil, 9
  call append_330
  # [discarded value]: $32.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__39:
  # $33.1: Boolean = char.8 == '0'
  .loc 1 5620 24
  cmp BYTE PTR [rbp-33], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] $33.1:rax 
  # jump($33.1, block.40, block.42)
  test al, al
  jz .LABEL__scan_string_token_289__42
.LABEL__scan_string_token_289__40:
  # $34.1: @String = call(append.330, value.1, '\0')
  .loc 1 5621 17
  mov rdi, [rbp-32]
  mov sil, 0
  call append_330
  # [discarded value]: $33.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
.LABEL__scan_string_token_289__42:
  # call(abort.344, "Invalid state")
  .loc 1 5623 17
  lea rdi, .LABEL__string_42[rip] # "Invalid state"
  call abort_344
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] char.8:[rbp-33] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] 
.LABEL__scan_string_token_289__17:
  # $20.2: Boolean = char.6 == '\n'
  .loc 1 5602 33
  cmp BYTE PTR [rbp-33], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] $20.2:rax[rbp-35] 
  # jump(block.18)
  mov [rbp-35], al
  jmp .LABEL__scan_string_token_289__18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] $20.2:[rbp-35] 
  # [discarded value]: $20.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] char.6:[rbp-33] $20.1:[rbp-35] 
  # [discarded value]: char.6
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
.LABEL__scan_string_token_289__16:
  # $17.1: @String = call(append.330, value.1, char.3)
  .loc 1 5626 13
  mov rdi, [rbp-32]
  mov sil, [rbp-33]
  call append_330
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
  # jump(block.4)
  jmp .LABEL__scan_string_token_289__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] char.3:[rbp-33] 
  # [discarded value]: char.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__scan_string_token_289__6:
  # $9.2: Boolean = char.1 == '\n'
  .loc 1 5592 29
  cmp BYTE PTR [rbp-33], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] $9.2:rax[rbp-34] 
  # jump(block.7)
  mov [rbp-34], al
  jmp .LABEL__scan_string_token_289__7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] $9.2:[rbp-34] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] char.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: char.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] value.1:[rbp-32] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: token_location.1
  # [live values]: 
.LABEL__scan_string_token_289__end:
  mov rsp, rbp
  pop rbp
  ret

scan_string_token_289__stack_frame_size: .word 48

  .loc 1 5641 1
  .text
init_290:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_290__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_290__1:
  # self.1: @Token = load_variable(self)
  # [live values]: self.1:rdi 
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: self.1:rdi lexeme.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi lexeme.1:rsi location.1:rdx 
  # store_struct_member(self.1, location, location.1)
  .loc 1 5642 5
  mov rax, rdi
  add rax, 16
  mov QWORD PTR [rax], rdx
  # [discarded value]: location.1
  # [live values]: self.1:rdi lexeme.1:rsi 
  # store_struct_member(self.1, lexeme, lexeme.1)
  .loc 1 5643 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], rsi
  # [discarded value]: lexeme.1
  # [live values]: self.1:rdi 
  # store_struct_member(self.1, next_token, null)
  .loc 1 5644 5
  mov rax, rdi
  add rax, 24
  mov QWORD PTR [rax], 0
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__init_290__end
  # [live values]: 
.LABEL__init_290__end:
  mov rsp, rbp
  pop rbp
  ret

init_290__stack_frame_size: .word 0

  .loc 1 5647 1
  .text
write_291:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_291__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_291__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: file.1:rdi token.1:rsi 
  # Other_Token.3: @Object_Type = load_variable(Other_Token)
  lea rax, Other_Token[rip]
  # [live values]: file.1:rdi token.1:rsi Other_Token.3:rax 
  # $2.1: Boolean = call(is.325, token.1, Other_Token.3)
  .loc 1 5648 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rax
  call is_325
  # [discarded value]: Other_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:rax 
  # jump($2.1, block.3, block.2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_291__2
.LABEL__write_291__3:
  # $2.3: Boolean = phi($2.1, $2.2)
  .loc 1 5648 9
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, block.4, block.6)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__write_291__6
.LABEL__write_291__4:
  # $12.1: Int8 = cast(27)
  .loc 1 5649 20
  mov rax, 27
  # [discarded value]: $2.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $12.1:rax 
  # $13.1: @FILE = call(write.341, file.1, $12.1)
  .loc 1 5649 9
  mov rdi, [rbp-8]
  mov sil, al
  call write_341
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $13.1:rax 
  # $14.1: @FILE = call(write.339, $13.1, "[2;37m")
  .loc 1 5649 9
  mov rdi, rax
  lea rsi, .LABEL__string_300[rip] # "[2;37m"
  call write_339
  # [discarded value]: $13.1
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # jump(block.5)
.LABEL__write_291__5:
  # $15.1: @String = load_struct_member(token.1, lexeme)
  .loc 1 5655 16
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $15.1:rax 
  # $16.1: @FILE = call(write.339, file.1, $15.1)
  .loc 1 5655 5
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_339
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # $17.1: Int8 = cast(27)
  .loc 1 5656 16
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $17.1:rax 
  # $18.1: @FILE = call(write.341, file.1, $17.1)
  .loc 1 5656 5
  mov rdi, [rbp-8]
  mov sil, al
  call write_341
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $18.1:rax 
  # $19.1: @FILE = call(write.339, $18.1, "[0m")
  .loc 1 5656 5
  mov rdi, rax
  lea rsi, .LABEL__string_301[rip] # "[0m"
  call write_339
  # [discarded value]: $18.1
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # return(file.1)
  .loc 1 5657 5
  mov rax, [rbp-8]
  jmp .LABEL__write_291__end
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_291__6:
  # Literal_Token.2: @Object_Type = load_variable(Literal_Token)
  lea rax, Literal_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Literal_Token.2:rax 
  # $4.1: Boolean = call(is.325, token.1, Literal_Token.2)
  .loc 1 5650 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Literal_Token.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  # jump($4.1, block.7, block.9)
  test al, al
  jz .LABEL__write_291__9
.LABEL__write_291__7:
  # $9.1: Int8 = cast(27)
  .loc 1 5651 20
  mov rax, 27
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $9.1:rax 
  # $10.1: @FILE = call(write.341, file.1, $9.1)
  .loc 1 5651 9
  mov rdi, [rbp-8]
  mov sil, al
  call write_341
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $10.1:rax 
  # $11.1: @FILE = call(write.339, $10.1, "[1;33m")
  .loc 1 5651 9
  mov rdi, rax
  lea rsi, .LABEL__string_302[rip] # "[1;33m"
  call write_339
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # jump(block.5)
  jmp .LABEL__write_291__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_291__9:
  # Comment_Token.3: @Object_Type = load_variable(Comment_Token)
  lea rax, Comment_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Comment_Token.3:rax 
  # $5.1: Boolean = call(is.325, token.1, Comment_Token.3)
  .loc 1 5652 16
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Comment_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $5.1:rax 
  # jump($5.1, block.10, block.5)
  test al, al
  jz .LABEL__write_291__5
.LABEL__write_291__10:
  # $6.1: Int8 = cast(27)
  .loc 1 5653 20
  mov rax, 27
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $6.1:rax 
  # $7.1: @FILE = call(write.341, file.1, $6.1)
  .loc 1 5653 9
  mov rdi, [rbp-8]
  mov sil, al
  call write_341
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  # $8.1: @FILE = call(write.339, $7.1, "[2;33m")
  .loc 1 5653 9
  mov rdi, rax
  lea rsi, .LABEL__string_303[rip] # "[2;33m"
  call write_339
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # jump(block.5)
  jmp .LABEL__write_291__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_291__2:
  # Keyword_Token.3: @Object_Type = load_variable(Keyword_Token)
  lea rax, Keyword_Token[rip]
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] Keyword_Token.3:rax 
  # $2.2: Boolean = call(is.325, token.1, Keyword_Token.3)
  .loc 1 5648 34
  mov rdi, [rbp-16]
  mov rsi, rax
  call is_325
  # [discarded value]: Keyword_Token.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:rax[rbp-17] 
  # jump(block.3)
  mov [rbp-17], al
  jmp .LABEL__write_291__3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: file.1
  # [discarded value]: token.1
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_291__end:
  mov rsp, rbp
  pop rbp
  ret

write_291__stack_frame_size: .word 32

  .loc 1 5667 1
  .text
create_character_token_292:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_character_token_292__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_character_token_292__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # value.1: Int8 = load_variable(value)
  # [live values]: lexeme.1:rdi location.1:rsi value.1:rdx 
  # token.1: @Character_Token = new(Character_Token)
  .loc 1 5668 14
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 33
  call malloc
  lea rbx, Character_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-17] location.1:[rbp-9] value.1:[rbp-1] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5669 5
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rdx, [rbp-9]
  mov [rbp-25], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: value.1:[rbp-1] token.1:[rbp-25] 
  # store_struct_member(token.1, value, value.1)
  .loc 1 5670 5
  mov rax, [rbp-25]
  add rax, 32
  mov bl, [rbp-1]
  mov BYTE PTR [rax], bl
  # [discarded value]: value.1
  # [live values]: token.1:[rbp-25] 
  # return(token.1)
  .loc 1 5671 5
  mov rax, [rbp-25]
  jmp .LABEL__create_character_token_292__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_character_token_292__end:
  mov rsp, rbp
  pop rbp
  ret

create_character_token_292__stack_frame_size: .word 32

  .loc 1 5678 1
  .text
create_boolean_token_293:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_boolean_token_293__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_boolean_token_293__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # value.1: Boolean = load_variable(value)
  # [live values]: lexeme.1:rdi location.1:rsi value.1:rdx 
  # token.1: @Boolean_Token = new(Boolean_Token)
  .loc 1 5679 14
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 33
  call malloc
  lea rbx, Boolean_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-17] location.1:[rbp-9] value.1:[rbp-1] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5680 5
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rdx, [rbp-9]
  mov [rbp-25], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: value.1:[rbp-1] token.1:[rbp-25] 
  # store_struct_member(token.1, value, value.1)
  .loc 1 5681 5
  mov rax, [rbp-25]
  add rax, 32
  mov bl, [rbp-1]
  mov BYTE PTR [rax], bl
  # [discarded value]: value.1
  # [live values]: token.1:[rbp-25] 
  # return(token.1)
  .loc 1 5682 5
  mov rax, [rbp-25]
  jmp .LABEL__create_boolean_token_293__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_boolean_token_293__end:
  mov rsp, rbp
  pop rbp
  ret

create_boolean_token_293__stack_frame_size: .word 32

  .loc 1 5688 1
  .text
create_comment_token_294:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_comment_token_294__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_comment_token_294__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @Comment_Token = new(Comment_Token)
  .loc 1 5689 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, Comment_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5690 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5691 5
  mov rax, [rbp-24]
  jmp .LABEL__create_comment_token_294__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_comment_token_294__end:
  mov rsp, rbp
  pop rbp
  ret

create_comment_token_294__stack_frame_size: .word 32

  .loc 1 5697 1
  .text
create_end_of_file_token_295:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_end_of_file_token_295__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_end_of_file_token_295__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @End_Of_File_Token = new(End_Of_File_Token)
  .loc 1 5698 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, End_Of_File_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5699 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # store_struct_member(token.1, next_token, token.1)
  .loc 1 5700 5
  mov rax, [rbp-24]
  add rax, 24
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: token.1:rbx[rbp-24] 
  # return(token.1)
  .loc 1 5701 5
  mov rax, rbx
  jmp .LABEL__create_end_of_file_token_295__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_end_of_file_token_295__end:
  mov rsp, rbp
  pop rbp
  ret

create_end_of_file_token_295__stack_frame_size: .word 32

  .loc 1 5707 1
  .text
create_end_of_line_token_296:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_end_of_line_token_296__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_end_of_line_token_296__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @End_Of_Line_Token = new(End_Of_Line_Token)
  .loc 1 5708 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, End_Of_Line_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5709 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5710 5
  mov rax, [rbp-24]
  jmp .LABEL__create_end_of_line_token_296__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_end_of_line_token_296__end:
  mov rsp, rbp
  pop rbp
  ret

create_end_of_line_token_296__stack_frame_size: .word 32

  .loc 1 5716 1
  .text
create_error_token_297:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_error_token_297__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_error_token_297__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @Error_Token = new(Error_Token)
  .loc 1 5717 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, Error_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5718 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5719 5
  mov rax, [rbp-24]
  jmp .LABEL__create_error_token_297__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_error_token_297__end:
  mov rsp, rbp
  pop rbp
  ret

create_error_token_297__stack_frame_size: .word 32

  .loc 1 5725 1
  .text
create_identifier_token_298:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_identifier_token_298__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_identifier_token_298__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @Identifier_Token = new(Identifier_Token)
  .loc 1 5726 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, Identifier_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5727 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5728 5
  mov rax, [rbp-24]
  jmp .LABEL__create_identifier_token_298__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_identifier_token_298__end:
  mov rsp, rbp
  pop rbp
  ret

create_identifier_token_298__stack_frame_size: .word 32

  .loc 1 5735 1
  .text
create_integer_token_299:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_integer_token_299__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_integer_token_299__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # value.1: Int = load_variable(value)
  # [live values]: lexeme.1:rdi location.1:rsi value.1:rdx 
  # token.1: @Integer_Token = new(Integer_Token)
  .loc 1 5736 14
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 40
  call malloc
  lea rbx, Integer_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-24] location.1:[rbp-16] value.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5737 5
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-16]
  mov [rbp-32], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: value.1:[rbp-8] token.1:[rbp-32] 
  # store_struct_member(token.1, value, value.1)
  .loc 1 5738 5
  mov rax, [rbp-32]
  add rax, 32
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: value.1
  # [live values]: token.1:[rbp-32] 
  # return(token.1)
  .loc 1 5739 5
  mov rax, [rbp-32]
  jmp .LABEL__create_integer_token_299__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_integer_token_299__end:
  mov rsp, rbp
  pop rbp
  ret

create_integer_token_299__stack_frame_size: .word 32

  .loc 1 5745 1
  .text
create_keyword_token_300:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_keyword_token_300__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_keyword_token_300__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @Keyword_Token = new(Keyword_Token)
  .loc 1 5746 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, Keyword_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5747 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5748 5
  mov rax, [rbp-24]
  jmp .LABEL__create_keyword_token_300__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_keyword_token_300__end:
  mov rsp, rbp
  pop rbp
  ret

create_keyword_token_300__stack_frame_size: .word 32

  .loc 1 5754 1
  .text
create_null_token_301:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_null_token_301__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_null_token_301__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @Null_Token = new(Null_Token)
  .loc 1 5755 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, Null_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5756 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5757 5
  mov rax, [rbp-24]
  jmp .LABEL__create_null_token_301__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_null_token_301__end:
  mov rsp, rbp
  pop rbp
  ret

create_null_token_301__stack_frame_size: .word 32

  .loc 1 5763 1
  .text
create_other_token_302:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_other_token_302__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_other_token_302__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # token.1: @Other_Token = new(Other_Token)
  .loc 1 5764 14
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 32
  call malloc
  lea rbx, Other_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-16] location.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5765 5
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: token.1:[rbp-24] 
  # return(token.1)
  .loc 1 5766 5
  mov rax, [rbp-24]
  jmp .LABEL__create_other_token_302__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_other_token_302__end:
  mov rsp, rbp
  pop rbp
  ret

create_other_token_302__stack_frame_size: .word 32

  .loc 1 5773 1
  .text
create_space_token_303:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_space_token_303__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_space_token_303__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # count.1: Int = load_variable(count)
  # [live values]: lexeme.1:rdi location.1:rsi count.1:rdx 
  # token.1: @Space_Token = new(Space_Token)
  .loc 1 5774 14
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 40
  call malloc
  lea rbx, Space_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-24] location.1:[rbp-16] count.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5775 5
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-16]
  mov [rbp-32], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: count.1:[rbp-8] token.1:[rbp-32] 
  # store_struct_member(token.1, count, count.1)
  .loc 1 5776 5
  mov rax, [rbp-32]
  add rax, 32
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: count.1
  # [live values]: token.1:[rbp-32] 
  # return(token.1)
  .loc 1 5777 5
  mov rax, [rbp-32]
  jmp .LABEL__create_space_token_303__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_space_token_303__end:
  mov rsp, rbp
  pop rbp
  ret

create_space_token_303__stack_frame_size: .word 32

  .loc 1 5784 1
  .text
create_string_token_304:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_string_token_304__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_string_token_304__1:
  # lexeme.1: @String = load_variable(lexeme)
  # [live values]: lexeme.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: lexeme.1:rdi location.1:rsi 
  # value.1: @String = load_variable(value)
  # [live values]: lexeme.1:rdi location.1:rsi value.1:rdx 
  # token.1: @String_Token = new(String_Token)
  .loc 1 5785 14
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 40
  call malloc
  lea rbx, String_Token[rip]
  mov [rax], rbx
  # [live values]: lexeme.1:[rbp-24] location.1:[rbp-16] value.1:[rbp-8] token.1:rax 
  # call(init.290, token.1, lexeme.1, location.1)
  .loc 1 5786 5
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-16]
  mov [rbp-32], rax
  call init_290
  # [discarded value]: lexeme.1
  # [discarded value]: location.1
  # [live values]: value.1:[rbp-8] token.1:[rbp-32] 
  # store_struct_member(token.1, value, value.1)
  .loc 1 5787 5
  mov rax, [rbp-32]
  add rax, 32
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [discarded value]: value.1
  # [live values]: token.1:[rbp-32] 
  # return(token.1)
  .loc 1 5788 5
  mov rax, [rbp-32]
  jmp .LABEL__create_string_token_304__end
  # [discarded value]: token.1
  # [live values]: 
.LABEL__create_string_token_304__end:
  mov rsp, rbp
  pop rbp
  ret

create_string_token_304__stack_frame_size: .word 32

  .loc 1 5801 1
  .text
write_305:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_305__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_305__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi location.1:rsi 
  # $1.1: Boolean = location.1 == null
  .loc 1 5802 9
  cmp rsi, 0
  sete al
  # [live values]: self.1:rdi location.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__write_305__3
.LABEL__write_305__2:
  # $2.1: @FILE = call(write.339, self.1, "null")
  .loc 1 5803 16
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_298[rip] # "null"
  call write_339
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $2.1:rax 
  # return($2.1)
  .loc 1 5803 9
  jmp .LABEL__write_305__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] 
.LABEL__write_305__3:
  # $3.1: @Source = load_struct_member(location.1, source)
  .loc 1 5805 23
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $3.1:rax 
  # $4.1: @String = load_struct_member($3.1, file_path)
  .loc 1 5805 23
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $4.1:rbx 
  # $5.1: @FILE = call(write.339, self.1, $4.1)
  .loc 1 5805 12
  mov rdi, [rbp-16]
  mov rsi, rbx
  call write_339
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write.341, $5.1, ':')
  .loc 1 5805 12
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $6.1:rax 
  # $7.1: Int = load_struct_member(location.1, line)
  .loc 1 5805 67
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.338, $6.1, $7.1)
  .loc 1 5805 12
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $8.1:rax 
  # $9.1: @FILE = call(write.341, $8.1, ':')
  .loc 1 5805 12
  mov rdi, rax
  mov sil, 58
  call write_341
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $9.1:rax 
  # $10.1: Int = load_struct_member(location.1, column)
  .loc 1 5805 99
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $9.1:rax $10.1:rbx 
  # $11.1: @FILE = call(write.338, $9.1, $10.1)
  .loc 1 5805 12
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] $11.1:rax 
  # return($11.1)
  .loc 1 5805 5
  jmp .LABEL__write_305__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] location.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: location.1
  # [live values]: 
.LABEL__write_305__end:
  mov rsp, rbp
  pop rbp
  ret

write_305__stack_frame_size: .word 16

  .loc 1 5818 1
  .text
create_source_306:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_source_306__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_source_306__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # source.1: @Source = new(Source)
  .loc 1 5819 15
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: file_path.1:[rbp-8] source.1:rax 
  # $2.1: @Int8 = load_struct_member(file_path.1, data)
  .loc 1 5821 19
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: file_path.1:[rbp-8] source.1:rax $2.1:rbx 
  # $3.1: @Int8 = load_struct_member("r", data)
  .loc 1 5821 35
  lea r15, .LABEL__string_304[rip] # "r"
  mov r15, [r15]
  # [live values]: file_path.1:[rbp-8] source.1:rax $2.1:rbx $3.1:r15 
  # file.1: @FILE = call(fopen.349, $2.1, $3.1)
  .loc 1 5821 13
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-16], rax
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:rax 
  # $5.1: Boolean = file.1 == null
  .loc 1 5822 9
  cmp rax, 0
  sete bl
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:rax $5.1:rbx 
  # jump($5.1, block.2, block.3)
  test bl, bl
  mov [rbp-24], rax
  jz .LABEL__create_source_306__3
.LABEL__create_source_306__2:
  # $6.1: @String = call(clone.329, "Failed to open file: ")
  .loc 1 5823 15
  lea rdi, .LABEL__string_305[rip] # "Failed to open file: "
  call clone_329
  # [discarded value]: $5.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] $6.1:rax 
  # $7.1: @String = call(append.332, $6.1, file_path.1)
  .loc 1 5823 15
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_332
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] $7.1:rax 
  # call(abort.344, $7.1)
  .loc 1 5823 9
  mov rdi, rax
  call abort_344
  # [discarded value]: $7.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] 
.LABEL__create_source_306__3:
  # content_size.1: Int = 1024
  .loc 1 5826 5
  mov rax, 1024
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:rax 
  # content.1: @Int8 = call(malloc.355, content_size.1)
  .loc 1 5827 16
  mov rdi, rax
  mov [rbp-32], rax
  call malloc
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:rax 
  # content_length.1: Int = 0
  .loc 1 5828 5
  xor rbx, rbx
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:rax content_length.1:rbx 
  # jump(block.4)
  mov [rbp-40], rax
  mov [rbp-48], rbx
.LABEL__create_source_306__4:
  # content_size.5: Int = phi(content_size.1, content_size.6)
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] 
  # content_length.6: Int = phi(content_length.1, content_length.4)
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] 
  # content.6: @Int8 = phi(content.1, content.4)
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] 
  # char.1: Int32 = call(fgetc.348, file.1)
  .loc 1 5830 17
  mov rdi, [rbp-24]
  call fgetc
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:rax 
  # $11.1: Int32 = call(feof.346, file.1)
  .loc 1 5831 13
  mov rdi, [rbp-24]
  mov [rbp-52], eax
  call feof
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] $11.1:rax 
  # $12.1: Int = cast($11.1)
  .loc 1 5831 13
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] $12.1:rbx 
  # $13.1: Boolean = $12.1 != 0
  .loc 1 5831 13
  cmp rbx, 0
  setne al
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] $13.1:rax 
  # jump($13.1, block.5, block.7)
  test al, al
  jz .LABEL__create_source_306__7
.LABEL__create_source_306__5:
  # store_array_item(content.6, content_length.6, '\0')
  .loc 1 5841 5
  mov rax, [rbp-40]
  mov rbx, [rbp-48]
  add rax, rbx
  mov BYTE PTR [rax], 0
  # [discarded value]: $13.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] 
  # store_struct_member(source.1, file_path, file_path.1)
  .loc 1 5843 5
  mov rax, [rbp-16]
  add rax, 8
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: file_path.1:rbx[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] 
  # store_struct_member(source.1, content, content.6)
  .loc 1 5844 5
  mov rax, [rbp-16]
  add rax, 16
  mov r15, [rbp-40]
  mov QWORD PTR [rax], r15
  # [live values]: file_path.1:rbx[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:r15[rbp-40] char.1:[rbp-52] 
  # return(source.1)
  .loc 1 5846 5
  mov rax, [rbp-16]
  mov [rbp-40], r15
  jmp .LABEL__create_source_306__end
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] 
.LABEL__create_source_306__7:
  # $14.1: Int = content_length.6 + 1
  .loc 1 5834 13
  mov rax, [rbp-48]
  add rax, 1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] $14.1:rax 
  # $15.1: Int = content_size.5 - 1
  .loc 1 5834 34
  mov rbx, [rbp-32]
  sub rbx, 1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] $14.1:rax $15.1:rbx 
  # $16.1: Boolean = $14.1 > $15.1
  .loc 1 5834 13
  cmp rax, rbx
  setg r15b
  # [discarded value]: $14.1
  # [discarded value]: $15.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] $16.1:r15 
  # jump($16.1, block.9, block.10)
  test r15b, r15b
  jz .LABEL__create_source_306__10
.LABEL__create_source_306__9:
  # content_size.4: Int = content_size.5 + 1024
  .loc 1 5835 28
  mov rax, [rbp-32]
  add rax, 1024
  # [discarded value]: $16.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:rax[rbp-32] 
  # content.3: @Int8 = call(realloc.356, content.6, content_size.4)
  .loc 1 5836 23
  mov rdi, [rbp-40]
  mov rsi, rax
  mov [rbp-32], rax
  call realloc
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:rax[rbp-40] 
  # jump(block.10)
  mov [rbp-40], rax
.LABEL__create_source_306__10:
  # content_size.6: Int = phi(content_size.4, content_size.5)
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] content_size.6:[rbp-32] 
  # content.4: @Int8 = phi(content.6, content.3)
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] content_size.6:[rbp-32] content.4:[rbp-40] 
  # $20.1: Int8 = cast(char.1)
  .loc 1 5838 35
  mov eax, [rbp-52]
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] content_size.6:[rbp-32] content.4:[rbp-40] $20.1:rax 
  # store_array_item(content.4, content_length.6, $20.1)
  .loc 1 5838 9
  mov rbx, [rbp-40]
  mov r15, [rbp-48]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [discarded value]: $20.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] content_size.6:[rbp-32] content.4:[rbp-40] 
  # content_length.4: Int = content_length.6 + 1
  .loc 1 5839 26
  mov rax, [rbp-48]
  add rax, 1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] content_size.6:[rbp-32] content.4:[rbp-40] content_length.4:rax[rbp-48] 
  # jump(block.4)
  mov [rbp-48], rax
  jmp .LABEL__create_source_306__4
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] content_size.6:[rbp-32] content.4:[rbp-40] content_length.4:[rbp-48] 
  # [discarded value]: content_size.6
  # [discarded value]: content.4
  # [discarded value]: content_length.4
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] 
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] content_size.4:[rbp-32] content.3:[rbp-40] 
  # [discarded value]: content_size.4
  # [discarded value]: content.3
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] 
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] 
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] content_size.5:[rbp-32] content_length.6:[rbp-48] content.6:[rbp-40] char.1:[rbp-52] 
  # [discarded value]: content_size.5
  # [discarded value]: content_length.6
  # [discarded value]: content.6
  # [discarded value]: char.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] 
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] content_size.1:[rbp-32] content.1:[rbp-40] content_length.1:[rbp-48] 
  # [discarded value]: content_size.1
  # [discarded value]: content.1
  # [discarded value]: content_length.1
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] 
  # [live values]: file_path.1:[rbp-8] source.1:[rbp-16] file.1:[rbp-24] 
  # [discarded value]: file_path.1
  # [discarded value]: source.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__create_source_306__end:
  mov rsp, rbp
  pop rbp
  ret

create_source_306__stack_frame_size: .word 64

  .loc 1 5859 1
  .text
create_list_307:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_list_307__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_list_307__1:
  # list.1: @List = new(List)
  .loc 1 5860 13
  mov rdi, 24
  call malloc
  # [live values]: list.1:rax 
  # store_struct_member(list.1, first_item, null)
  .loc 1 5861 5
  mov rbx, rax
  mov QWORD PTR [rbx], 0
  # [live values]: list.1:rax 
  # store_struct_member(list.1, last_item, null)
  .loc 1 5862 5
  mov rbx, rax
  add rbx, 8
  mov QWORD PTR [rbx], 0
  # [live values]: list.1:rax 
  # store_struct_member(list.1, size, 0)
  .loc 1 5863 5
  mov rbx, rax
  add rbx, 16
  mov QWORD PTR [rbx], 0
  # [live values]: list.1:rax 
  # return(list.1)
  .loc 1 5864 5
  jmp .LABEL__create_list_307__end
  # [discarded value]: list.1
  # [live values]: 
.LABEL__create_list_307__end:
  mov rsp, rbp
  pop rbp
  ret

create_list_307__stack_frame_size: .word 0

  .loc 1 5867 1
  .text
append_308:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_308__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_308__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = new(List_Item)
  .loc 1 5868 13
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 25
  call malloc
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] item.1:rax 
  # store_struct_member(item.1, is_removed, false)
  .loc 1 5869 5
  mov rbx, rax
  add rbx, 24
  mov BYTE PTR [rbx], 0
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] item.1:rax 
  # store_struct_member(item.1, data, data.1)
  .loc 1 5870 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-16] item.1:rax 
  # $2.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 1 5871 22
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] item.1:rax $2.1:rbx 
  # store_struct_member(item.1, prev_item, $2.1)
  .loc 1 5871 5
  mov r15, rax
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:rax 
  # store_struct_member(item.1, next_item, null)
  .loc 1 5872 5
  mov rbx, rax
  add rbx, 8
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-16] item.1:rax 
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 1 5873 9
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] item.1:rax $3.1:rbx 
  # $4.1: Boolean = $3.1 == null
  .loc 1 5873 9
  cmp rbx, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:rax $4.1:r15 
  # jump($4.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__append_308__4
.LABEL__append_308__2:
  # store_struct_member(self.1, first_item, item.1)
  .loc 1 5874 9
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] 
  # jump(block.3)
  mov [rbp-24], rbx
.LABEL__append_308__3:
  # store_struct_member(self.1, last_item, item.1)
  .loc 1 5878 5
  mov rax, [rbp-16]
  add rax, 8
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] 
  # $6.1: Int = load_struct_member(self.1, size)
  .loc 1 5879 17
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] $6.1:rax 
  # $7.1: Int = $6.1 + 1
  .loc 1 5879 17
  mov r15, rax
  add r15, 1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] $7.1:r15 
  # store_struct_member(self.1, size, $7.1)
  .loc 1 5879 5
  mov rax, [rbp-16]
  add rax, 16
  mov QWORD PTR [rax], r15
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] 
  # return()
  mov [rbp-24], rbx
  jmp .LABEL__append_308__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
.LABEL__append_308__4:
  # $5.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 1 5876 9
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, next_item, item.1)
  .loc 1 5876 9
  mov rbx, rax
  add rbx, 8
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:r15[rbp-24] 
  # jump(block.3)
  jmp .LABEL__append_308__3
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__append_308__end:
  mov rsp, rbp
  pop rbp
  ret

append_308__stack_frame_size: .word 32

  .loc 1 5882 1
  .text
prepend_309:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_309__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_309__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = new(List_Item)
  .loc 1 5883 13
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 25
  call malloc
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] item.1:rax 
  # store_struct_member(item.1, is_removed, false)
  .loc 1 5884 5
  mov rbx, rax
  add rbx, 24
  mov BYTE PTR [rbx], 0
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] item.1:rax 
  # store_struct_member(item.1, data, data.1)
  .loc 1 5885 5
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-16] item.1:rax 
  # store_struct_member(item.1, prev_item, null)
  .loc 1 5886 5
  mov rbx, rax
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:[rbp-16] item.1:rax 
  # $2.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5887 22
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] item.1:rax $2.1:rbx 
  # store_struct_member(item.1, next_item, $2.1)
  .loc 1 5887 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:rax 
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5888 9
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] item.1:rax $3.1:rbx 
  # $4.1: Boolean = $3.1 == null
  .loc 1 5888 9
  cmp rbx, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:rax $4.1:r15 
  # jump($4.1, block.2, block.4)
  test r15b, r15b
  mov [rbp-24], rax
  jz .LABEL__prepend_309__4
.LABEL__prepend_309__2:
  # store_struct_member(self.1, last_item, item.1)
  .loc 1 5889 9
  mov rax, [rbp-16]
  add rax, 8
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] 
  # jump(block.3)
  mov [rbp-24], rbx
.LABEL__prepend_309__3:
  # store_struct_member(self.1, first_item, item.1)
  .loc 1 5893 5
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] 
  # $6.1: Int = load_struct_member(self.1, size)
  .loc 1 5894 17
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] $6.1:rax 
  # $7.1: Int = $6.1 + 1
  .loc 1 5894 17
  mov r15, rax
  add r15, 1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] $7.1:r15 
  # store_struct_member(self.1, size, $7.1)
  .loc 1 5894 5
  mov rax, [rbp-16]
  add rax, 16
  mov QWORD PTR [rax], r15
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] item.1:rbx[rbp-24] 
  # return()
  mov [rbp-24], rbx
  jmp .LABEL__prepend_309__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
.LABEL__prepend_309__4:
  # $5.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5891 9
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] $5.1:rax 
  # store_struct_member($5.1, prev_item, item.1)
  .loc 1 5891 9
  mov rbx, rax
  mov r15, [rbp-24]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:r15[rbp-24] 
  # jump(block.3)
  jmp .LABEL__prepend_309__3
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-24] 
  # [discarded value]: self.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__prepend_309__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_309__stack_frame_size: .word 32

  .loc 1 5897 1
  .text
remove_310:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_310__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_310__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5898 13
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_310__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 1 5899 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__remove_310__4
.LABEL__remove_310__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 1 5900 13
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $3.1:rax 
  # $4.1: Boolean = $3.1 == data.1
  .loc 1 5900 13
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $4.1:rbx 
  # jump($4.1, block.5, block.6)
  test bl, bl
  jz .LABEL__remove_310__6
.LABEL__remove_310__5:
  # store_struct_member(item.2, is_removed, true)
  .loc 1 5901 13
  mov rax, [rbp-8]
  add rax, 24
  mov BYTE PTR [rax], 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.4)
.LABEL__remove_310__4:
  # return(self.1)
  .loc 1 5906 5
  mov rax, [rbp-24]
  jmp .LABEL__remove_310__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__remove_310__6:
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5904 16
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__remove_310__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__remove_310__end:
  mov rsp, rbp
  pop rbp
  ret

remove_310__stack_frame_size: .word 32

  .loc 1 5909 1
  .text
remove_all_311:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_all_311__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_all_311__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5910 13
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_all_311__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 1 5911 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__remove_all_311__4
.LABEL__remove_all_311__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 1 5912 13
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $3.1:rax 
  # $4.1: Boolean = $3.1 == data.1
  .loc 1 5912 13
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $4.1:rbx 
  # jump($4.1, block.5, block.6)
  test bl, bl
  jz .LABEL__remove_all_311__6
.LABEL__remove_all_311__5:
  # store_struct_member(item.2, is_removed, true)
  .loc 1 5913 13
  mov rax, [rbp-8]
  add rax, 24
  mov BYTE PTR [rax], 1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.6)
.LABEL__remove_all_311__6:
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5915 16
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__remove_all_311__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__remove_all_311__4:
  # return(self.1)
  .loc 1 5917 5
  mov rax, [rbp-24]
  jmp .LABEL__remove_all_311__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__remove_all_311__end:
  mov rsp, rbp
  pop rbp
  ret

remove_all_311__stack_frame_size: .word 32

  .loc 1 5920 1
  .text
prune_312:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prune_312__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prune_312__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5921 13
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__prune_312__2:
  # item.2: @List_Item = phi(item.1, item.13)
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 1 5922 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__prune_312__4
.LABEL__prune_312__3:
  # $3.1: Boolean = load_struct_member(item.2, is_removed)
  .loc 1 5923 13
  mov rax, [rbp-8]
  add rax, 24
  mov al, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $3.1:rax 
  # jump($3.1, block.5, block.6)
  test al, al
  jz .LABEL__prune_312__6
.LABEL__prune_312__5:
  # $4.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 1 5924 17
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $4.1:rax 
  # $5.1: Boolean = $4.1 != null
  .loc 1 5924 17
  cmp rax, 0
  setne bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $5.1:rbx 
  # jump($5.1, block.7, block.8)
  test bl, bl
  jz .LABEL__prune_312__8
.LABEL__prune_312__7:
  # $6.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5925 44
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $6.1:rax 
  # $7.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 1 5925 17
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $6.1:rax $7.1:rbx 
  # store_struct_member($7.1, next_item, $6.1)
  .loc 1 5925 17
  mov r15, rbx
  add r15, 8
  mov QWORD PTR [r15], rax
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.8)
.LABEL__prune_312__8:
  # $8.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5927 17
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $8.1:rax 
  # $9.1: Boolean = $8.1 != null
  .loc 1 5927 17
  cmp rax, 0
  setne bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $9.1:rbx 
  # jump($9.1, block.9, block.10)
  test bl, bl
  jz .LABEL__prune_312__10
.LABEL__prune_312__9:
  # $10.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 1 5928 44
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $10.1:rax 
  # $11.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5928 17
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $10.1:rax $11.1:rbx 
  # store_struct_member($11.1, prev_item, $10.1)
  .loc 1 5928 17
  mov r15, rbx
  mov QWORD PTR [r15], rax
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.10)
.LABEL__prune_312__10:
  # $12.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5930 17
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $12.1:rax 
  # $13.1: Boolean = $12.1 == item.2
  .loc 1 5930 17
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $13.1:rbx 
  # jump($13.1, block.11, block.12)
  test bl, bl
  jz .LABEL__prune_312__12
.LABEL__prune_312__11:
  # $14.1: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5931 35
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $14.1:rax 
  # store_struct_member(self.1, first_item, $14.1)
  .loc 1 5931 17
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.12)
.LABEL__prune_312__12:
  # $15.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 1 5933 17
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $15.1:rax 
  # $16.1: Boolean = $15.1 == item.2
  .loc 1 5933 17
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $16.1:rbx 
  # jump($16.1, block.13, block.14)
  test bl, bl
  jz .LABEL__prune_312__14
.LABEL__prune_312__13:
  # $17.1: @List_Item = load_struct_member(item.2, prev_item)
  .loc 1 5934 34
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $17.1:rax 
  # store_struct_member(self.1, last_item, $17.1)
  .loc 1 5934 17
  mov rbx, [rbp-16]
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.14)
.LABEL__prune_312__14:
  # $18.1: Int = load_struct_member(self.1, size)
  .loc 1 5936 25
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $18.1:rax 
  # $19.1: Int = $18.1 - 1
  .loc 1 5936 25
  mov rbx, rax
  sub rbx, 1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $19.1:rbx 
  # store_struct_member(self.1, size, $19.1)
  .loc 1 5936 13
  mov rax, [rbp-16]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.6)
.LABEL__prune_312__6:
  # item.13: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5938 16
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.13:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__prune_312__2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.13:[rbp-8] 
  # [discarded value]: item.13
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__prune_312__4:
  # return(self.1)
  .loc 1 5940 5
  mov rax, [rbp-16]
  jmp .LABEL__prune_312__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__prune_312__end:
  mov rsp, rbp
  pop rbp
  ret

prune_312__stack_frame_size: .word 16

  .loc 1 5943 1
  .text
replace_313:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_313__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_313__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # new_data.1: @Any = load_variable(new_data)
  # [live values]: self.1:rdi data.1:rsi new_data.1:rdx 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5944 13
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: data.1:rsi new_data.1:rdx item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_313__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 1 5945 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__replace_313__4
.LABEL__replace_313__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 1 5946 13
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $3.1:rax 
  # $4.1: Boolean = $3.1 == data.1
  .loc 1 5946 13
  cmp rax, QWORD PTR [rbp-24]
  sete bl
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $4.1:rbx 
  # jump($4.1, block.5, block.6)
  test bl, bl
  jz .LABEL__replace_313__6
.LABEL__replace_313__5:
  # store_struct_member(item.2, data, new_data.1)
  .loc 1 5947 13
  mov rax, [rbp-8]
  add rax, 16
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] new_data.1:rbx[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # jump(block.6)
.LABEL__replace_313__6:
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5949 16
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__replace_313__2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__replace_313__4:
  # return()
  jmp .LABEL__replace_313__end
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: data.1
  # [discarded value]: new_data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__replace_313__end:
  mov rsp, rbp
  pop rbp
  ret

replace_313__stack_frame_size: .word 32

  .loc 1 5953 1
  .text
contains_314:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR contains_314__stack_frame_size[rip]
  sub rsp, rax
.LABEL__contains_314__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5954 13
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: data.1:rsi item.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__contains_314__2:
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # $2.1: Boolean = item.2 != null
  .loc 1 5955 12
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__contains_314__4
.LABEL__contains_314__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 1 5956 13
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $3.1:rax 
  # $4.1: Boolean = $3.1 == data.1
  .loc 1 5956 13
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $4.1:rbx 
  # jump($4.1, block.5, block.6)
  test bl, bl
  jz .LABEL__contains_314__6
.LABEL__contains_314__5:
  # return(true)
  .loc 1 5957 13
  mov al, 1
  jmp .LABEL__contains_314__end
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__contains_314__6:
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5959 16
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.5:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__contains_314__2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] item.5:[rbp-8] 
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
.LABEL__contains_314__4:
  # return(false)
  .loc 1 5961 5
  mov al, 0
  jmp .LABEL__contains_314__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: data.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__contains_314__end:
  mov rsp, rbp
  pop rbp
  ret

contains_314__stack_frame_size: .word 16

  .loc 1 5964 1
  .text
index_of_315:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_315__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_315__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # index.1: Int = 0
  .loc 1 5965 5
  xor rax, rax
  # [live values]: self.1:rdi data.1:rsi index.1:rax 
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5966 13
  mov rbx, rdi
  mov rbx, [rbx]
  # [discarded value]: self.1
  # [live values]: data.1:rsi index.1:rax item.1:rbx 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
.LABEL__index_of_315__2:
  # index.6: Int = phi(index.1, index.4)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] 
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] 
  # $2.1: Boolean = item.2 != null
  .loc 1 5967 12
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] $2.1:rax 
  # jump($2.1, block.3, block.4)
  test al, al
  jz .LABEL__index_of_315__4
.LABEL__index_of_315__3:
  # $3.1: @Any = load_struct_member(item.2, data)
  .loc 1 5968 13
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] $3.1:rax 
  # $4.1: Boolean = $3.1 == data.1
  .loc 1 5968 13
  cmp rax, QWORD PTR [rbp-24]
  sete bl
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] $4.1:rbx 
  # jump($4.1, block.5, block.6)
  test bl, bl
  jz .LABEL__index_of_315__6
.LABEL__index_of_315__5:
  # return(index.6)
  .loc 1 5969 13
  mov rax, [rbp-8]
  jmp .LABEL__index_of_315__end
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] 
.LABEL__index_of_315__6:
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  .loc 1 5971 16
  mov rax, [rbp-16]
  add rax, 8
  mov rax, [rax]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] item.5:rax[rbp-16] 
  # index.4: Int = index.6 + 1
  .loc 1 5972 17
  mov rbx, [rbp-8]
  add rbx, 1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] item.5:rax[rbp-16] index.4:rbx[rbp-8] 
  # jump(block.2)
  mov [rbp-16], rax
  mov [rbp-8], rbx
  jmp .LABEL__index_of_315__2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] item.5:[rbp-16] index.4:[rbp-8] 
  # [discarded value]: item.5
  # [discarded value]: index.4
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] 
.LABEL__index_of_315__4:
  # $7.1: Int = index.6 * 0
  .loc 1 5974 12
  mov rax, [rbp-8]
  imul rax, 0
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] $7.1:rax 
  # $8.1: Int = $7.1 - 1
  .loc 1 5974 12
  mov rbx, rax
  sub rbx, 1
  # [discarded value]: $7.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] $8.1:rbx 
  # return($8.1)
  .loc 1 5974 5
  mov rax, rbx
  jmp .LABEL__index_of_315__end
  # [discarded value]: $8.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.6:[rbp-8] item.2:[rbp-16] 
  # [discarded value]: index.6
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [discarded value]: data.1
  # [discarded value]: index.1
  # [discarded value]: item.1
  # [live values]: 
.LABEL__index_of_315__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_315__stack_frame_size: .word 32

  .loc 1 5977 1
  .text
get_316:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_316__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_316__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  # $1.1: Int = load_struct_member(self.1, size)
  .loc 1 5978 18
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi index.1:rsi $1.1:rax 
  # $3.1: Boolean = index.1 >= $1.1
  .loc 1 5978 9
  cmp rsi, rax
  setge bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi index.1:rsi $3.1:rbx 
  # jump($3.1, block.3, block.2)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__get_316__2
.LABEL__get_316__3:
  # $3.3: Boolean = phi($3.1, $3.2)
  .loc 1 5978 9
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # jump($3.3, block.4, block.5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__get_316__5
.LABEL__get_316__4:
  # return(null)
  .loc 1 5979 9
  xor rax, rax
  jmp .LABEL__get_316__end
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_316__5:
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5981 13
  mov rax, [rbp-17]
  mov rax, [rax]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:rax 
  # jump(block.7)
  mov [rbp-25], rax
.LABEL__get_316__7:
  # item.5: @List_Item = phi(item.1, item.3)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] 
  # index.3: Int = phi(index.5, index.1)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # $6.1: Boolean = index.3 > 0
  .loc 1 5982 12
  cmp QWORD PTR [rbp-9], 0
  setg al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:rax 
  # jump($6.1, block.8, block.9)
  test al, al
  jz .LABEL__get_316__9
.LABEL__get_316__8:
  # item.3: @List_Item = load_struct_member(item.5, next_item)
  .loc 1 5983 16
  mov rax, [rbp-25]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] item.3:rax[rbp-25] 
  # index.5: Int = index.3 - 1
  .loc 1 5984 17
  mov rbx, [rbp-9]
  sub rbx, 1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] item.3:rax[rbp-25] index.5:rbx[rbp-9] 
  # jump(block.7)
  mov [rbp-25], rax
  mov [rbp-9], rbx
  jmp .LABEL__get_316__7
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] item.3:[rbp-25] index.5:[rbp-9] 
  # [discarded value]: item.3
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
.LABEL__get_316__9:
  # $9.1: @Any = load_struct_member(item.5, data)
  .loc 1 5986 12
  mov rax, [rbp-25]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $9.1:rax 
  # return($9.1)
  .loc 1 5986 5
  jmp .LABEL__get_316__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [discarded value]: item.5
  # [discarded value]: index.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] item.1:[rbp-25] 
  # [discarded value]: item.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_316__2:
  # $3.2: Boolean = index.1 < 0
  .loc 1 5978 31
  cmp QWORD PTR [rbp-9], 0
  setl al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:rax[rbp-1] 
  # jump(block.3)
  mov [rbp-1], al
  jmp .LABEL__get_316__3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:[rbp-1] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: index.1
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_316__end:
  mov rsp, rbp
  pop rbp
  ret

get_316__stack_frame_size: .word 32

  .loc 1 5989 1
  .text
first_317:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR first_317__stack_frame_size[rip]
  sub rsp, rax
.LABEL__first_317__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5990 9
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 1 5990 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__first_317__3
.LABEL__first_317__2:
  # return(null)
  .loc 1 5991 9
  xor rax, rax
  jmp .LABEL__first_317__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__first_317__3:
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  .loc 1 5993 12
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: @Any = load_struct_member($3.1, data)
  .loc 1 5993 12
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rbx 
  # return($4.1)
  .loc 1 5993 5
  mov rax, rbx
  jmp .LABEL__first_317__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__first_317__end:
  mov rsp, rbp
  pop rbp
  ret

first_317__stack_frame_size: .word 16

  .loc 1 5996 1
  .text
last_318:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_318__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_318__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 1 5997 9
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 1 5997 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__last_318__3
.LABEL__last_318__2:
  # return(null)
  .loc 1 5998 9
  xor rax, rax
  jmp .LABEL__last_318__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__last_318__3:
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  .loc 1 6000 12
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: @Any = load_struct_member($3.1, data)
  .loc 1 6000 12
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rbx 
  # return($4.1)
  .loc 1 6000 5
  mov rax, rbx
  jmp .LABEL__last_318__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_318__end:
  mov rsp, rbp
  pop rbp
  ret

last_318__stack_frame_size: .word 16

  .loc 1 6015 1
  .text
create_iterator_319:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_iterator_319__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_iterator_319__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # iterator.1: @List_Iterator = new(List_Iterator)
  .loc 1 6016 17
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  # [live values]: list.1:[rbp-8] iterator.1:rax 
  # store_struct_member(iterator.1, current_item, null)
  .loc 1 6017 5
  mov rbx, rax
  mov QWORD PTR [rbx], 0
  # [live values]: list.1:[rbp-8] iterator.1:rax 
  # $2.1: @List_Item = load_struct_member(list.1, first_item)
  .loc 1 6018 26
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [discarded value]: list.1
  # [live values]: iterator.1:rax $2.1:rbx 
  # store_struct_member(iterator.1, next_item, $2.1)
  .loc 1 6018 5
  mov r15, rax
  add r15, 8
  mov QWORD PTR [r15], rbx
  # [discarded value]: $2.1
  # [live values]: iterator.1:rax 
  # return(iterator.1)
  .loc 1 6019 5
  jmp .LABEL__create_iterator_319__end
  # [discarded value]: iterator.1
  # [live values]: 
.LABEL__create_iterator_319__end:
  mov rsp, rbp
  pop rbp
  ret

create_iterator_319__stack_frame_size: .word 16

  .loc 1 6022 1
  .text
current_320:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR current_320__stack_frame_size[rip]
  sub rsp, rax
.LABEL__current_320__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 1 6023 9
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 6023 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__current_320__3
.LABEL__current_320__2:
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 1 6024 16
  mov rax, [rbp-8]
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # $4.1: @Any = load_struct_member($3.1, data)
  .loc 1 6024 16
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $4.1:rbx 
  # return($4.1)
  .loc 1 6024 9
  mov rax, rbx
  jmp .LABEL__current_320__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
.LABEL__current_320__3:
  # return(null)
  .loc 1 6026 5
  xor rax, rax
  jmp .LABEL__current_320__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__current_320__end:
  mov rsp, rbp
  pop rbp
  ret

current_320__stack_frame_size: .word 16

  .loc 1 6029 1
  .text
remove_current_321:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_current_321__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_current_321__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 1 6030 5
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # store_struct_member($1.1, is_removed, true)
  .loc 1 6030 5
  mov rbx, rax
  add rbx, 24
  mov BYTE PTR [rbx], 1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__remove_current_321__end
  # [live values]: 
.LABEL__remove_current_321__end:
  mov rsp, rbp
  pop rbp
  ret

remove_current_321__stack_frame_size: .word 0

  .loc 1 6033 1
  .text
has_next_322:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_next_322__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_next_322__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 1 6034 12
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 6034 12
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  # return($2.1)
  .loc 1 6034 5
  mov al, bl
  jmp .LABEL__has_next_322__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_next_322__end:
  mov rsp, rbp
  pop rbp
  ret

has_next_322__stack_frame_size: .word 0

  .loc 1 6037 1
  .text
next_323:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_323__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_323__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 1 6038 9
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: Boolean = $1.1 == null
  .loc 1 6038 9
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rdi
  jz .LABEL__next_323__3
.LABEL__next_323__2:
  # return(null)
  .loc 1 6039 9
  xor rax, rax
  jmp .LABEL__next_323__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
.LABEL__next_323__3:
  # $3.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 1 6041 25
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # store_struct_member(self.1, current_item, $3.1)
  .loc 1 6041 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # $4.1: @List_Item = load_struct_member(self.1, next_item)
  .loc 1 6042 22
  mov rax, [rbp-8]
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # $5.1: @List_Item = load_struct_member($4.1, next_item)
  .loc 1 6042 22
  mov rbx, rax
  add rbx, 8
  mov rbx, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rbx 
  # store_struct_member(self.1, next_item, $5.1)
  .loc 1 6042 5
  mov rax, [rbp-8]
  add rax, 8
  mov QWORD PTR [rax], rbx
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  # $6.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 1 6043 12
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # $7.1: @Any = load_struct_member($6.1, data)
  .loc 1 6043 12
  mov rbx, rax
  add rbx, 16
  mov rbx, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $7.1:rbx 
  # return($7.1)
  .loc 1 6043 5
  mov rax, rbx
  jmp .LABEL__next_323__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_323__end:
  mov rsp, rbp
  pop rbp
  ret

next_323__stack_frame_size: .word 16

  .loc 1 6046 1
  .text
change_324:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR change_324__stack_frame_size[rip]
  sub rsp, rax
.LABEL__change_324__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 1 6047 9
  mov rax, rdi
  mov rax, [rax]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  # $2.1: Boolean = $1.1 != null
  .loc 1 6047 9
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi data.1:rsi $2.1:rbx 
  # jump($2.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__change_324__3
.LABEL__change_324__2:
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  .loc 1 6048 9
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] $3.1:rax 
  # store_struct_member($3.1, data, data.1)
  .loc 1 6048 9
  mov rbx, rax
  add rbx, 16
  mov r15, [rbp-8]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] data.1:r15[rbp-8] 
  # jump(block.3)
.LABEL__change_324__3:
  # return()
  jmp .LABEL__change_324__end
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] data.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__change_324__end:
  mov rsp, rbp
  pop rbp
  ret

change_324__stack_frame_size: .word 16

  .loc 1 6066 1
  .text
is_325:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_325__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_325__1:
  # self.1: @Object = load_variable(self)
  # [live values]: self.1:rdi 
  # object_type.1: @Object_Type = load_variable(object_type)
  # [live values]: self.1:rdi object_type.1:rsi 
  # self_type.1: @Object_Type = load_struct_member(self.1, object_type)
  .loc 1 6067 18
  mov rax, rdi
  mov rax, [rax]
  # [discarded value]: self.1
  # [live values]: object_type.1:rsi self_type.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__is_325__2:
  # self_type.2: @Object_Type = phi(self_type.1, self_type.4)
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # $2.1: Boolean = self_type.2 == object_type.1
  .loc 1 6069 13
  mov rax, [rbp-8]
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:rax[rbp-8] $2.1:rbx 
  # jump($2.1, block.4, block.5)
  test bl, bl
  mov [rbp-8], rax
  jz .LABEL__is_325__5
.LABEL__is_325__4:
  # return(true)
  .loc 1 6070 13
  mov al, 1
  jmp .LABEL__is_325__end
  # [discarded value]: $2.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
.LABEL__is_325__5:
  # self_type.4: @Object_Type = load_struct_member(self_type.2, base_type)
  .loc 1 6072 21
  mov rax, [rbp-8]
  add rax, 32
  mov rax, [rax]
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:rax[rbp-8] 
  # $4.1: Boolean = self_type.4 == null
  .loc 1 6073 13
  cmp rax, 0
  sete bl
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:rax[rbp-8] $4.1:rbx 
  # jump($4.1, block.7, block.2)
  test bl, bl
  mov [rbp-8], rax
  jz .LABEL__is_325__2
.LABEL__is_325__7:
  # return(false)
  .loc 1 6074 13
  mov al, 0
  jmp .LABEL__is_325__end
  # [discarded value]: $4.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] self_type.4:[rbp-8] 
  # [discarded value]: self_type.4
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [discarded value]: self_type.2
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [discarded value]: object_type.1
  # [discarded value]: self_type.1
  # [live values]: 
.LABEL__is_325__end:
  mov rsp, rbp
  pop rbp
  ret

is_325__stack_frame_size: .word 16

  .loc 1 6089 1
  .text
init_326:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_326__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_326__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @String = call(init.327, self.1, 16)
  .loc 1 6090 5
  mov rsi, 16
  mov [rbp-8], rdi
  call init_327
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 1 6091 5
  mov rax, [rbp-8]
  jmp .LABEL__init_326__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_326__end:
  mov rsp, rbp
  pop rbp
  ret

init_326__stack_frame_size: .word 16

  .loc 1 6094 1
  .text
init_327:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_327__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_327__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # data_size.1: Int = load_variable(data_size)
  # [live values]: self.1:rdi data_size.1:rsi 
  # store_struct_member(self.1, data_size, data_size.1)
  .loc 1 6095 5
  mov rax, rdi
  add rax, 8
  mov QWORD PTR [rax], rsi
  # [live values]: self.1:rdi data_size.1:rsi 
  # $2.1: @Int8 = call(malloc.355, data_size.1)
  .loc 1 6096 17
  mov [rbp-8], rdi
  mov rdi, rsi
  call malloc
  # [discarded value]: data_size.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # store_struct_member(self.1, data, $2.1)
  .loc 1 6096 5
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # store_struct_member(self.1, length, 0)
  .loc 1 6097 5
  mov rax, [rbp-8]
  add rax, 16
  mov QWORD PTR [rax], 0
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 1 6098 5
  mov rax, [rbp-8]
  jmp .LABEL__init_327__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_327__end:
  mov rsp, rbp
  pop rbp
  ret

init_327__stack_frame_size: .word 16

  .loc 1 6101 1
  .text
init_328:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_328__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_328__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Int8 = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # $1.1: Int = call(length.336, data.1)
  .loc 1 6102 19
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call length_336
  # [live values]: self.1:[rbp-8] data.1:[rbp-16] $1.1:rax 
  # store_struct_member(self.1, length, $1.1)
  .loc 1 6102 5
  mov rbx, [rbp-8]
  add rbx, 16
  mov QWORD PTR [rbx], rax
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] data.1:[rbp-16] 
  # $2.1: Int = load_struct_member(self.1, length)
  .loc 1 6103 22
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-8] data.1:[rbp-16] $2.1:rax 
  # $3.1: Int = $2.1 + 1
  .loc 1 6103 22
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] data.1:[rbp-16] $3.1:rbx 
  # store_struct_member(self.1, data_size, $3.1)
  .loc 1 6103 5
  mov rax, [rbp-8]
  add rax, 8
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] data.1:[rbp-16] 
  # store_struct_member(self.1, data, data.1)
  .loc 1 6104 5
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-8] 
  # return(self.1)
  .loc 1 6105 5
  mov rax, [rbp-8]
  jmp .LABEL__init_328__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_328__end:
  mov rsp, rbp
  pop rbp
  ret

init_328__stack_frame_size: .word 16

  .loc 1 6108 1
  .text
clone_329:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR clone_329__stack_frame_size[rip]
  sub rsp, rax
.LABEL__clone_329__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # clone.1: @String = new(String)
  .loc 1 6109 14
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  # [live values]: self.1:[rbp-8] clone.1:rax 
  # $2.1: Int = load_struct_member(self.1, data_size)
  .loc 1 6110 16
  mov rbx, [rbp-8]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-8] clone.1:rax $2.1:rbx 
  # $3.1: @String = call(init.327, clone.1, $2.1)
  .loc 1 6110 5
  mov rdi, rax
  mov rsi, rbx
  mov [rbp-16], rax
  call init_327
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] clone.1:[rbp-16] 
  # $4.1: @String = call(append.332, clone.1, self.1)
  .loc 1 6111 5
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call append_332
  # [discarded value]: self.1
  # [discarded value]: $4.1
  # [live values]: clone.1:[rbp-16] 
  # return(clone.1)
  .loc 1 6112 5
  mov rax, [rbp-16]
  jmp .LABEL__clone_329__end
  # [discarded value]: clone.1
  # [live values]: 
.LABEL__clone_329__end:
  mov rsp, rbp
  pop rbp
  ret

clone_329__stack_frame_size: .word 16

  .loc 1 6115 1
  .text
append_330:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_330__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_330__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 1 6116 9
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  # $2.1: Int = $1.1 + 1
  .loc 1 6116 9
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  # $3.1: Int = load_struct_member(self.1, data_size)
  .loc 1 6116 28
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx $3.1:rax 
  # $4.1: Boolean = $2.1 >= $3.1
  .loc 1 6116 9
  cmp rbx, rax
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi char.1:rsi $4.1:r15 
  # jump($4.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-1], sil
  mov [rbp-9], rdi
  jz .LABEL__append_330__3
.LABEL__append_330__2:
  # $5.1: Int = load_struct_member(self.1, data_size)
  .loc 1 6117 26
  mov rax, [rbp-9]
  add rax, 8
  mov rax, [rax]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $5.1:rax 
  # $6.1: Int = $5.1 + 16
  .loc 1 6117 26
  mov rbx, rax
  add rbx, 16
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $6.1:rbx 
  # store_struct_member(self.1, data_size, $6.1)
  .loc 1 6117 9
  mov rax, [rbp-9]
  add rax, 8
  mov QWORD PTR [rax], rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # $7.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6118 29
  mov rax, [rbp-9]
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $7.1:rax 
  # $8.1: Int = load_struct_member(self.1, data_size)
  .loc 1 6118 40
  mov rbx, [rbp-9]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $7.1:rax $8.1:rbx 
  # $10.1: @Int8 = call(realloc.356, $7.1, $8.1)
  .loc 1 6118 21
  mov rdi, rax
  mov rsi, rbx
  call realloc
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $10.1:rax 
  # store_struct_member(self.1, data, $10.1)
  .loc 1 6118 9
  mov rbx, [rbp-9]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # jump(block.3)
.LABEL__append_330__3:
  # $11.1: Int = load_struct_member(self.1, length)
  .loc 1 6120 15
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $11.1:rax 
  # $12.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6120 5
  mov rbx, [rbp-9]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $11.1:rax $12.1:rbx 
  # store_array_item($12.1, $11.1, char.1)
  .loc 1 6120 5
  mov r15, rbx
  mov r14, rax
  add r15, r14
  mov r14b, [rbp-1]
  mov BYTE PTR [r15], r14b
  # [discarded value]: $11.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] 
  # $13.1: Int = load_struct_member(self.1, length)
  .loc 1 6121 19
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] $13.1:rax 
  # $14.1: Int = $13.1 + 1
  .loc 1 6121 19
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] $14.1:rbx 
  # store_struct_member(self.1, length, $14.1)
  .loc 1 6121 5
  mov rax, [rbp-9]
  add rax, 16
  mov QWORD PTR [rax], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] 
  # $15.1: Int = load_struct_member(self.1, length)
  .loc 1 6122 15
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] $15.1:rax 
  # $16.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6122 5
  mov rbx, [rbp-9]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] $15.1:rax $16.1:rbx 
  # store_array_item($16.1, $15.1, '\0')
  .loc 1 6122 5
  mov r15, rbx
  mov r13, rax
  add r15, r13
  mov BYTE PTR [r15], 0
  # [discarded value]: $15.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] char.1:r14[rbp-1] 
  # return(self.1)
  .loc 1 6123 5
  mov rax, [rbp-9]
  jmp .LABEL__append_330__end
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [discarded value]: self.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__append_330__end:
  mov rsp, rbp
  pop rbp
  ret

append_330__stack_frame_size: .word 16

  .loc 1 6126 1
  .text
append_331:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_331__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_331__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  # $1.1: Boolean = number.1 >= 10
  .loc 1 6127 9
  cmp rsi, 10
  setge al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__append_331__3
.LABEL__append_331__2:
  # $2.1: Int = number.1 / 10
  .loc 1 6128 21
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $2.1:rax 
  # $3.1: @String = call(append.331, self.1, $2.1)
  .loc 1 6128 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_331
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # jump(block.3)
.LABEL__append_331__3:
  # $4.1: Int = number.1 // 10
  .loc 1 6130 25
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $4.1:rdx 
  # $5.1: Int = cast('0')
  .loc 1 6130 40
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $4.1:rdx $5.1:rax 
  # $6.1: Int = $4.1 + $5.1
  .loc 1 6130 25
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $6.1:rbx 
  # $7.1: Int8 = cast($6.1)
  .loc 1 6130 25
  mov rax, rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $7.1:rax 
  # $8.1: @String = call(append.330, self.1, $7.1)
  .loc 1 6130 12
  mov rdi, [rbp-16]
  mov sil, al
  call append_330
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $8.1:rax 
  # return($8.1)
  .loc 1 6130 5
  jmp .LABEL__append_331__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: number.1
  # [live values]: 
.LABEL__append_331__end:
  mov rsp, rbp
  pop rbp
  ret

append_331__stack_frame_size: .word 16

  .loc 1 6133 1
  .text
append_332:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_332__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_332__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 1 6134 9
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 1 6134 23
  mov rbx, rsi
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Int = $1.1 + $2.1
  .loc 1 6134 9
  mov r15, rax
  add r15, rbx
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # $4.1: Int = load_struct_member(self.1, data_size)
  .loc 1 6134 39
  mov rax, rdi
  add rax, 8
  mov rax, [rax]
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 $4.1:rax 
  # $5.1: Boolean = $3.1 >= $4.1
  .loc 1 6134 9
  cmp r15, rax
  setge bl
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: self.1:rdi other.1:rsi $5.1:rbx 
  # jump($5.1, block.2, block.3)
  test bl, bl
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__append_332__3
.LABEL__append_332__2:
  # $6.1: Int = load_struct_member(self.1, length)
  .loc 1 6135 26
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $6.1:rax 
  # $7.1: Int = load_struct_member(other.1, length)
  .loc 1 6135 40
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $6.1:rax $7.1:rbx 
  # $8.1: Int = $6.1 + $7.1
  .loc 1 6135 26
  mov r15, rax
  add r15, rbx
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $8.1:r15 
  # $9.1: Int = $8.1 + 1
  .loc 1 6135 26
  mov rax, r15
  add rax, 1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $9.1:rax 
  # store_struct_member(self.1, data_size, $9.1)
  .loc 1 6135 9
  mov rbx, [rbp-16]
  add rbx, 8
  mov QWORD PTR [rbx], rax
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # $10.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6136 29
  mov rax, [rbp-16]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $10.1:rax 
  # $11.1: Int = load_struct_member(self.1, data_size)
  .loc 1 6136 40
  mov rbx, [rbp-16]
  add rbx, 8
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $10.1:rax $11.1:rbx 
  # $13.1: @Int8 = call(realloc.356, $10.1, $11.1)
  .loc 1 6136 21
  mov rdi, rax
  mov rsi, rbx
  call realloc
  # [discarded value]: $10.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $13.1:rax 
  # store_struct_member(self.1, data, $13.1)
  .loc 1 6136 9
  mov rbx, [rbp-16]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # jump(block.3)
.LABEL__append_332__3:
  # index.1: Int = 0
  .loc 1 6138 5
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax 
  # other_data.1: @Int8 = load_struct_member(other.1, data)
  .loc 1 6139 19
  mov rbx, [rbp-8]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax other_data.1:rbx 
  # self_data.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6140 18
  mov r15, [rbp-16]
  mov r15, [r15]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax other_data.1:rbx self_data.1:r15 
  # self_length.1: Int = load_struct_member(self.1, length)
  .loc 1 6141 20
  mov r14, [rbp-16]
  add r14, 16
  mov r14, [r14]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax other_data.1:rbx self_data.1:r15 self_length.1:r14 
  # jump(block.4)
  mov [rbp-24], rax
  mov [rbp-32], rbx
  mov [rbp-40], r14
  mov [rbp-48], r15
.LABEL__append_332__4:
  # self_length.2: Int = phi(self_length.1, self_length.4)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] 
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] 
  # char.1: Int8 = load_array_item(other_data.1, index.2)
  .loc 1 6143 17
  mov rax, [rbp-32]
  mov rbx, [rbp-24]
  add rax, rbx
  mov al, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] char.1:rax 
  # store_array_item(self_data.1, self_length.2, char.1)
  .loc 1 6144 9
  mov rbx, [rbp-48]
  mov r15, [rbp-40]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] char.1:rax 
  # $18.1: Boolean = char.1 == '\0'
  .loc 1 6145 13
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] $18.1:rbx 
  # jump($18.1, block.5, block.7)
  test bl, bl
  jz .LABEL__append_332__7
.LABEL__append_332__5:
  # store_struct_member(self.1, length, self_length.2)
  .loc 1 6151 5
  mov rax, [rbp-16]
  add rax, 16
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:rbx[rbp-40] index.2:[rbp-24] 
  # return(self.1)
  .loc 1 6152 5
  mov rax, [rbp-16]
  mov [rbp-40], rbx
  jmp .LABEL__append_332__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] 
.LABEL__append_332__7:
  # self_length.4: Int = self_length.2 + 1
  .loc 1 6148 23
  mov rax, [rbp-40]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] self_length.4:rax[rbp-40] 
  # index.4: Int = index.2 + 1
  .loc 1 6149 17
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] self_length.4:rax[rbp-40] index.4:rbx[rbp-24] 
  # jump(block.4)
  mov [rbp-40], rax
  mov [rbp-24], rbx
  jmp .LABEL__append_332__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] self_length.4:[rbp-40] index.4:[rbp-24] 
  # [discarded value]: self_length.4
  # [discarded value]: index.4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] self_length.2:[rbp-40] index.2:[rbp-24] 
  # [discarded value]: self_length.2
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] other_data.1:[rbp-32] self_data.1:[rbp-48] self_length.1:[rbp-40] 
  # [discarded value]: index.1
  # [discarded value]: other_data.1
  # [discarded value]: self_data.1
  # [discarded value]: self_length.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__append_332__end:
  mov rsp, rbp
  pop rbp
  ret

append_332__stack_frame_size: .word 48

  .loc 1 6155 1
  .text
starts_with_333:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR starts_with_333__stack_frame_size[rip]
  sub rsp, rax
.LABEL__starts_with_333__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: self.1:rdi prefix.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 1 6156 9
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi prefix.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(prefix.1, length)
  .loc 1 6156 23
  mov rbx, rsi
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:rdi prefix.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = $1.1 < $2.1
  .loc 1 6156 9
  cmp rax, rbx
  setl r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi prefix.1:rsi $3.1:r15 
  # jump($3.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__starts_with_333__3
.LABEL__starts_with_333__2:
  # return(false)
  .loc 1 6157 9
  mov al, 0
  jmp .LABEL__starts_with_333__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] 
.LABEL__starts_with_333__3:
  # index.1: Int = 0
  .loc 1 6159 5
  xor rax, rax
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__starts_with_333__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # $4.1: Int = load_struct_member(prefix.1, length)
  .loc 1 6160 20
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $4.1:rax 
  # $5.1: Boolean = index.2 < $4.1
  .loc 1 6160 12
  cmp QWORD PTR [rbp-24], rax
  setl bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $5.1:rbx 
  # jump($5.1, block.6, block.7)
  test bl, bl
  jz .LABEL__starts_with_333__7
.LABEL__starts_with_333__6:
  # $6.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6161 13
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rax 
  # $7.1: Int8 = load_array_item($6.1, index.2)
  .loc 1 6161 13
  mov rbx, rax
  mov r15, [rbp-24]
  add rbx, r15
  mov bl, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:rbx 
  # $8.1: @Int8 = load_struct_member(prefix.1, data)
  .loc 1 6161 33
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:rbx $8.1:rax 
  # $9.1: Int8 = load_array_item($8.1, index.2)
  .loc 1 6161 33
  mov r15, rax
  mov r14, [rbp-24]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:rbx $9.1:r15 
  # $10.1: Boolean = $7.1 != $9.1
  .loc 1 6161 13
  cmp bl, r15b
  setne al
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $10.1:rax 
  # jump($10.1, block.8, block.9)
  test al, al
  jz .LABEL__starts_with_333__9
.LABEL__starts_with_333__8:
  # return(false)
  .loc 1 6162 13
  mov al, 0
  jmp .LABEL__starts_with_333__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__starts_with_333__9:
  # index.5: Int = index.2 + 1
  .loc 1 6164 17
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:rax[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rax
  jmp .LABEL__starts_with_333__5
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:[rbp-24] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__starts_with_333__7:
  # return(true)
  .loc 1 6166 5
  mov al, 1
  jmp .LABEL__starts_with_333__end
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] index.1:[rbp-24] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] prefix.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: prefix.1
  # [live values]: 
.LABEL__starts_with_333__end:
  mov rsp, rbp
  pop rbp
  ret

starts_with_333__stack_frame_size: .word 32

  .loc 1 6169 1
  .text
ends_with_334:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR ends_with_334__stack_frame_size[rip]
  sub rsp, rax
.LABEL__ends_with_334__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # suffix.1: @String = load_variable(suffix)
  # [live values]: self.1:rdi suffix.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 1 6170 9
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi suffix.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(suffix.1, length)
  .loc 1 6170 23
  mov rbx, rsi
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:rdi suffix.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = $1.1 < $2.1
  .loc 1 6170 9
  cmp rax, rbx
  setl r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi suffix.1:rsi $3.1:r15 
  # jump($3.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__ends_with_334__3
.LABEL__ends_with_334__2:
  # return(false)
  .loc 1 6171 9
  mov al, 0
  jmp .LABEL__ends_with_334__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] 
.LABEL__ends_with_334__3:
  # index.1: Int = 0
  .loc 1 6173 5
  xor rax, rax
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:rax 
  # jump(block.5)
  mov [rbp-24], rax
.LABEL__ends_with_334__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # $4.1: Int = load_struct_member(suffix.1, length)
  .loc 1 6174 20
  mov rax, [rbp-8]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $4.1:rax 
  # $5.1: Boolean = index.2 < $4.1
  .loc 1 6174 12
  cmp QWORD PTR [rbp-24], rax
  setl bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $5.1:rbx 
  # jump($5.1, block.6, block.7)
  test bl, bl
  jz .LABEL__ends_with_334__7
.LABEL__ends_with_334__6:
  # $6.1: Int = load_struct_member(self.1, length)
  .loc 1 6175 23
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rax 
  # $7.1: Int = load_struct_member(suffix.1, length)
  .loc 1 6175 37
  mov rbx, [rbp-8]
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rax $7.1:rbx 
  # $8.1: Int = $6.1 - $7.1
  .loc 1 6175 23
  mov r15, rax
  sub r15, rbx
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $8.1:r15 
  # $9.1: Int = $8.1 + index.2
  .loc 1 6175 23
  mov rax, r15
  add rax, QWORD PTR [rbp-24]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $9.1:rax 
  # $10.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6175 13
  mov rbx, [rbp-16]
  mov rbx, [rbx]
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $9.1:rax $10.1:rbx 
  # $11.1: Int8 = load_array_item($10.1, $9.1)
  .loc 1 6175 13
  mov r15, rbx
  mov r14, rax
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $9.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $11.1:r15 
  # $12.1: @Int8 = load_struct_member(suffix.1, data)
  .loc 1 6175 63
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $11.1:r15 $12.1:rax 
  # $13.1: Int8 = load_array_item($12.1, index.2)
  .loc 1 6175 63
  mov rbx, rax
  mov r14, [rbp-24]
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $11.1:r15 $13.1:rbx 
  # $14.1: Boolean = $11.1 != $13.1
  .loc 1 6175 13
  cmp r15b, bl
  setne al
  # [discarded value]: $11.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $14.1:rax 
  # jump($14.1, block.8, block.9)
  test al, al
  jz .LABEL__ends_with_334__9
.LABEL__ends_with_334__8:
  # return(false)
  .loc 1 6176 13
  mov al, 0
  jmp .LABEL__ends_with_334__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__ends_with_334__9:
  # index.5: Int = index.2 + 1
  .loc 1 6178 17
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:rax[rbp-24] 
  # jump(block.5)
  mov [rbp-24], rax
  jmp .LABEL__ends_with_334__5
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:[rbp-24] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__ends_with_334__7:
  # return(true)
  .loc 1 6180 5
  mov al, 1
  jmp .LABEL__ends_with_334__end
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] index.1:[rbp-24] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] suffix.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: suffix.1
  # [live values]: 
.LABEL__ends_with_334__end:
  mov rsp, rbp
  pop rbp
  ret

ends_with_334__stack_frame_size: .word 32

  .loc 1 6183 1
  .text
equals_335:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_335__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_335__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  # $1.1: Int = load_struct_member(self.1, length)
  .loc 1 6184 9
  mov rax, rdi
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  # $2.1: Int = load_struct_member(other.1, length)
  .loc 1 6184 24
  mov rbx, rsi
  add rbx, 16
  mov rbx, [rbx]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  # $3.1: Boolean = $1.1 == $2.1
  .loc 1 6184 9
  cmp rax, rbx
  sete r15b
  # [discarded value]: $1.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, block.2, block.3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__equals_335__3
.LABEL__equals_335__2:
  # index.1: Int = 0
  .loc 1 6185 9
  xor rax, rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:rax 
  # jump(block.4)
  mov [rbp-24], rax
.LABEL__equals_335__4:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # $4.1: Int = load_struct_member(self.1, length)
  .loc 1 6186 24
  mov rax, [rbp-16]
  add rax, 16
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $4.1:rax 
  # $5.1: Boolean = index.2 < $4.1
  .loc 1 6186 16
  cmp QWORD PTR [rbp-24], rax
  setl bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $5.1:rbx 
  # jump($5.1, block.5, block.6)
  test bl, bl
  jz .LABEL__equals_335__6
.LABEL__equals_335__5:
  # $6.1: @Int8 = load_struct_member(self.1, data)
  .loc 1 6187 17
  mov rax, [rbp-16]
  mov rax, [rax]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $6.1:rax 
  # $7.1: Int8 = load_array_item($6.1, index.2)
  .loc 1 6187 17
  mov rbx, rax
  mov r15, [rbp-24]
  add rbx, r15
  mov bl, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:rbx 
  # $8.1: @Int8 = load_struct_member(other.1, data)
  .loc 1 6187 37
  mov rax, [rbp-8]
  mov rax, [rax]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:rbx $8.1:rax 
  # $9.1: Int8 = load_array_item($8.1, index.2)
  .loc 1 6187 37
  mov r15, rax
  mov r14, [rbp-24]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $7.1:rbx $9.1:r15 
  # $10.1: Boolean = $7.1 != $9.1
  .loc 1 6187 17
  cmp bl, r15b
  setne al
  # [discarded value]: $7.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] $10.1:rax 
  # jump($10.1, block.7, block.8)
  test al, al
  jz .LABEL__equals_335__8
.LABEL__equals_335__7:
  # return(false)
  .loc 1 6188 17
  mov al, 0
  jmp .LABEL__equals_335__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__equals_335__8:
  # index.5: Int = index.2 + 1
  .loc 1 6190 21
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:rax[rbp-24] 
  # jump(block.4)
  mov [rbp-24], rax
  jmp .LABEL__equals_335__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] index.5:[rbp-24] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
.LABEL__equals_335__6:
  # return(true)
  .loc 1 6192 9
  mov al, 1
  jmp .LABEL__equals_335__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] index.2:[rbp-24] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] index.1:[rbp-24] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
.LABEL__equals_335__3:
  # return(false)
  .loc 1 6194 5
  mov al, 0
  jmp .LABEL__equals_335__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: other.1
  # [live values]: 
.LABEL__equals_335__end:
  mov rsp, rbp
  pop rbp
  ret

equals_335__stack_frame_size: .word 32

  .loc 1 6197 1
  .text
length_336:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR length_336__stack_frame_size[rip]
  sub rsp, rax
.LABEL__length_336__1:
  # string.1: @Int8 = load_variable(string)
  # [live values]: string.1:rdi 
  # length.1: Int = 0
  .loc 1 6198 5
  xor rax, rax
  # [live values]: string.1:rdi length.1:rax 
  # jump(block.2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__length_336__2:
  # length.2: Int = phi(length.1, length.5)
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] 
  # char.1: Int8 = load_array_item(string.1, length.2)
  .loc 1 6200 17
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  add rax, rbx
  mov al, [rax]
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] char.1:rax 
  # $2.1: Boolean = char.1 == '\0'
  .loc 1 6201 13
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] $2.1:rbx 
  # jump($2.1, block.4, block.5)
  test bl, bl
  jz .LABEL__length_336__5
.LABEL__length_336__4:
  # return(length.2)
  .loc 1 6202 13
  mov rax, [rbp-8]
  jmp .LABEL__length_336__end
  # [discarded value]: $2.1
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] 
.LABEL__length_336__5:
  # length.5: Int = length.2 + 1
  .loc 1 6204 18
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] length.5:rax[rbp-8] 
  # jump(block.2)
  mov [rbp-8], rax
  jmp .LABEL__length_336__2
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] length.5:[rbp-8] 
  # [discarded value]: length.5
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] 
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] length.2:[rbp-8] 
  # [discarded value]: length.2
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] 
  # [live values]: string.1:[rbp-16] length.1:[rbp-8] 
  # [discarded value]: string.1
  # [discarded value]: length.1
  # [live values]: 
.LABEL__length_336__end:
  mov rsp, rbp
  pop rbp
  ret

length_336__stack_frame_size: .word 16

  .loc 1 6208 1
  .text
write_line_337:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_line_337__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_line_337__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  # $1.1: @FILE = call(end_line.342, file.1)
  .loc 1 6209 12
  mov [rbp-8], rsi
  call end_line_342
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(write.339, $1.1, string.1)
  .loc 1 6209 12
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_339
  # [discarded value]: string.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 6209 5
  jmp .LABEL__write_line_337__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_line_337__end:
  mov rsp, rbp
  pop rbp
  ret

write_line_337__stack_frame_size: .word 16

  .loc 1 6212 1
  .text
write_338:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_338__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_338__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  # $1.1: Boolean = number.1 >= 10
  .loc 1 6213 9
  cmp rsi, 10
  setge al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, block.2, block.3)
  test al, al
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  jz .LABEL__write_338__3
.LABEL__write_338__2:
  # $2.1: Int = number.1 / 10
  .loc 1 6214 20
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write.338, self.1, $2.1)
  .loc 1 6214 9
  mov rdi, [rbp-16]
  mov rsi, rax
  call write_338
  # [discarded value]: $2.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # jump(block.3)
.LABEL__write_338__3:
  # $4.1: Int = number.1 // 10
  .loc 1 6216 12
  mov rax, [rbp-8]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $4.1:rdx 
  # $5.1: Int = cast('0')
  .loc 1 6216 27
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $4.1:rdx $5.1:rax 
  # $6.1: Int = $4.1 + $5.1
  .loc 1 6216 12
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $4.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $6.1:rbx 
  # $7.1: Int32 = cast($6.1)
  .loc 1 6216 12
  mov rax, rbx
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] $7.1:rax 
  # $8.1: Int32 = call(fputc.350, $7.1, self.1)
  .loc 1 6216 5
  mov edi, eax
  mov rsi, [rbp-16]
  call fputc
  # [discarded value]: $7.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # return(self.1)
  .loc 1 6217 5
  mov rax, [rbp-16]
  jmp .LABEL__write_338__end
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] number.1:[rbp-8] 
  # [discarded value]: self.1
  # [discarded value]: number.1
  # [live values]: 
.LABEL__write_338__end:
  mov rsp, rbp
  pop rbp
  ret

write_338__stack_frame_size: .word 16

  .loc 1 6220 1
  .text
write_339:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_339__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_339__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: self.1:rdi string.1:rsi 
  # $1.1: @Int8 = load_struct_member(string.1, data)
  .loc 1 6221 23
  mov rax, rsi
  mov rax, [rax]
  # [discarded value]: string.1
  # [live values]: self.1:rdi $1.1:rax 
  # $2.1: @FILE = call(write.340, self.1, $1.1)
  .loc 1 6221 12
  mov rsi, rax
  call write_340
  # [discarded value]: self.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  # return($2.1)
  .loc 1 6221 5
  jmp .LABEL__write_339__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_339__end:
  mov rsp, rbp
  pop rbp
  ret

write_339__stack_frame_size: .word 0

  .loc 1 6224 1
  .text
write_340:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_340__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_340__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # chars.1: @Int8 = load_variable(chars)
  # [live values]: self.1:rdi chars.1:rsi 
  # $1.1: Int32 = call(fputs.351, chars.1, self.1)
  .loc 1 6225 9
  mov [rbp-8], rdi
  mov rdi, rsi
  mov rsi, [rbp-8]
  call fputs
  # [discarded value]: chars.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # $2.1: Int = cast($1.1)
  .loc 1 6225 9
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rbx 
  # $3.1: Boolean = $2.1 < 0
  .loc 1 6225 9
  cmp rbx, 0
  setl al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, block.2, block.3)
  test al, al
  jz .LABEL__write_340__3
.LABEL__write_340__2:
  # stderr.9: @FILE = load_variable(stderr)
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] stderr.9:stderr[rip] 
  # $4.1: @FILE = call(end_line.342, stderr.9)
  .loc 1 6226 9
  mov rdi, stderr[rip]
  call end_line_342
  # [discarded value]: stderr.9
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # $5.1: @FILE = call(end_line.342, $4.1)
  .loc 1 6226 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, "Failed to write text")
  .loc 1 6226 9
  mov rdi, rax
  lea rsi, .LABEL__string_306[rip] # "Failed to write text"
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $6.1:rax 
  # $7.1: @FILE = call(end_line.342, $6.1)
  .loc 1 6226 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  # call(abort.352)
  .loc 1 6227 9
  call abort
  # [live values]: self.1:[rbp-8] 
.LABEL__write_340__3:
  # return(self.1)
  .loc 1 6229 5
  mov rax, [rbp-8]
  jmp .LABEL__write_340__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_340__end:
  mov rsp, rbp
  pop rbp
  ret

write_340__stack_frame_size: .word 16

  .loc 1 6232 1
  .text
write_341:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_341__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_341__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # c.1: Int32 = cast(char.1)
  .loc 1 6233 10
  mov al, sil
  movsx eax, al
  # [discarded value]: char.1
  # [live values]: self.1:rdi c.1:rax 
  # $2.1: Int32 = call(fputc.350, c.1, self.1)
  .loc 1 6234 9
  mov [rbp-8], rdi
  mov edi, eax
  mov rsi, [rbp-8]
  mov [rbp-12], eax
  call fputc
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $2.1:rax 
  # $3.1: Boolean = $2.1 != c.1
  .loc 1 6234 9
  cmp eax, DWORD PTR [rbp-12]
  setne bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:rbx 
  # jump($3.1, block.2, block.3)
  test bl, bl
  jz .LABEL__write_341__3
.LABEL__write_341__2:
  # stderr.10: @FILE = load_variable(stderr)
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] stderr.10:stderr[rip] 
  # $4.1: @FILE = call(end_line.342, stderr.10)
  .loc 1 6235 9
  mov rdi, stderr[rip]
  call end_line_342
  # [discarded value]: stderr.10
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $4.1:rax 
  # $5.1: @FILE = call(end_line.342, $4.1)
  .loc 1 6235 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $5.1:rax 
  # $6.1: @FILE = call(write.339, $5.1, "Failed to write character: ")
  .loc 1 6235 9
  mov rdi, rax
  lea rsi, .LABEL__string_307[rip] # "Failed to write character: "
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $6.1:rax 
  # $7.1: Int = cast(c.1)
  .loc 1 6235 81
  mov ebx, [rbp-12]
  movsx rbx, ebx
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $6.1:rax $7.1:rbx 
  # $8.1: @FILE = call(write.338, $6.1, $7.1)
  .loc 1 6235 9
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $6.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $8.1:rax 
  # $9.1: @FILE = call(end_line.342, $8.1)
  .loc 1 6235 9
  mov rdi, rax
  call end_line_342
  # [discarded value]: $8.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # call(abort.352)
  .loc 1 6236 9
  call abort
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
.LABEL__write_341__3:
  # return(self.1)
  .loc 1 6238 5
  mov rax, [rbp-8]
  jmp .LABEL__write_341__end
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [discarded value]: self.1
  # [discarded value]: c.1
  # [live values]: 
.LABEL__write_341__end:
  mov rsp, rbp
  pop rbp
  ret

write_341__stack_frame_size: .word 16

  .loc 1 6241 1
  .text
end_line_342:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR end_line_342__stack_frame_size[rip]
  sub rsp, rax
.LABEL__end_line_342__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # $1.1: @FILE = call(write.341, self.1, '\n')
  .loc 1 6242 12
  mov sil, 10
  call write_341
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  # return($1.1)
  .loc 1 6242 5
  jmp .LABEL__end_line_342__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__end_line_342__end:
  mov rsp, rbp
  pop rbp
  ret

end_line_342__stack_frame_size: .word 0

  .loc 1 6245 1
  .text
flush_343:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR flush_343__stack_frame_size[rip]
  sub rsp, rax
.LABEL__flush_343__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # $1.1: Int32 = call(fflush.347, file.1)
  .loc 1 6246 5
  mov [rbp-8], rdi
  call fflush
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] 
  # return(file.1)
  .loc 1 6247 5
  mov rax, [rbp-8]
  jmp .LABEL__flush_343__end
  # [discarded value]: file.1
  # [live values]: 
.LABEL__flush_343__end:
  mov rsp, rbp
  pop rbp
  ret

flush_343__stack_frame_size: .word 16

  .loc 1 6250 1
  .text
abort_344:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_344__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_344__1:
  # message.1: @String = load_variable(message)
  # [live values]: message.1:rdi 
  # stderr.11: @FILE = load_variable(stderr)
  # [live values]: message.1:rdi stderr.11:stderr[rip] 
  # $1.1: @FILE = call(end_line.342, stderr.11)
  .loc 1 6251 5
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_342
  # [discarded value]: stderr.11
  # [live values]: message.1:[rbp-8] $1.1:rax 
  # $2.1: @FILE = call(end_line.342, $1.1)
  .loc 1 6251 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] $2.1:rax 
  # $3.1: @FILE = call(write.339, $2.1, message.1)
  .loc 1 6251 5
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_339
  # [discarded value]: message.1
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  # $4.1: @FILE = call(end_line.342, $3.1)
  .loc 1 6251 5
  mov rdi, rax
  call end_line_342
  # [discarded value]: $3.1
  # [discarded value]: $4.1
  # [live values]: 
  # call(abort.352)
  .loc 1 6252 5
  call abort
  # [live values]: 
.LABEL__abort_344__end:
  mov rsp, rbp
  pop rbp
  ret

abort_344__stack_frame_size: .word 16

  .section .rodata

  .align 8
.LABEL__string_0:
  .quad .LABEL__string_0__data
  .quad 7
  .quad 6
.LABEL__string_0__data: .string "Usage:"

  .align 8
.LABEL__string_1:
  .quad .LABEL__string_1__data
  .quad 28
  .quad 27
.LABEL__string_1__data: .string " <INPUT FILE> <OUTPUT FILE>"

  .align 8
.LABEL__string_2:
  .quad .LABEL__string_2__data
  .quad 6
  .quad 5
.LABEL__string_2__data: .string ".code"

  .align 8
.LABEL__string_3:
  .quad .LABEL__string_3__data
  .quad 2
  .quad 1
.LABEL__string_3__data: .string "'"

  .align 8
.LABEL__string_4:
  .quad .LABEL__string_4__data
  .quad 28
  .quad 27
.LABEL__string_4__data: .string "' doesn't end with '.code'."

  .align 8
.LABEL__string_5:
  .quad .LABEL__string_5__data
  .quad 3
  .quad 2
.LABEL__string_5__data: .string ".s"

  .align 8
.LABEL__string_6:
  .quad .LABEL__string_6__data
  .quad 25
  .quad 24
.LABEL__string_6__data: .string "' doesn't end with '.s'."

  .align 8
.LABEL__string_7:
  .quad .LABEL__string_7__data
  .quad 4
  .quad 3
.LABEL__string_7__data: .string ".ir"

  .align 8
.LABEL__string_8:
  .quad .LABEL__string_8__data
  .quad 26
  .quad 25
.LABEL__string_8__data: .string "' doesn't end with '.ir'."

  .align 8
.LABEL__string_9:
  .quad .LABEL__string_9__data
  .quad 2
  .quad 1
.LABEL__string_9__data: .string "w"

  .align 8
.LABEL__string_10:
  .quad .LABEL__string_10__data
  .quad 9
  .quad 8
.LABEL__string_10__data: .string "  .file "

  .align 8
.LABEL__string_11:
  .quad .LABEL__string_11__data
  .quad 3
  .quad 2
.LABEL__string_11__data: .string " \""

  .align 8
.LABEL__string_12:
  .quad .LABEL__string_12__data
  .quad 2
  .quad 1
.LABEL__string_12__data: .string "\""

  .align 8
.LABEL__string_13:
  .quad .LABEL__string_13__data
  .quad 25
  .quad 24
.LABEL__string_13__data: .string "  .intel_syntax noprefix"

  .align 8
.LABEL__string_14:
  .quad .LABEL__string_14__data
  .quad 8
  .quad 7
.LABEL__string_14__data: .string "  .loc "

  .align 8
.LABEL__string_15:
  .quad .LABEL__string_15__data
  .quad 8
  .quad 7
.LABEL__string_15__data: .string "  .text"

  .align 8
.LABEL__string_16:
  .quad .LABEL__string_16__data
  .quad 5
  .quad 4
.LABEL__string_16__data: .string "main"

  .align 8
.LABEL__string_17:
  .quad .LABEL__string_17__data
  .quad 14
  .quad 13
.LABEL__string_17__data: .string "  .globl main"

  .align 8
.LABEL__string_18:
  .quad .LABEL__string_18__data
  .quad 11
  .quad 10
.LABEL__string_18__data: .string "  push rbp"

  .align 8
.LABEL__string_19:
  .quad .LABEL__string_19__data
  .quad 15
  .quad 14
.LABEL__string_19__data: .string "  mov rbp, rsp"

  .align 8
.LABEL__string_20:
  .quad .LABEL__string_20__data
  .quad 23
  .quad 22
.LABEL__string_20__data: .string "  movsx rax, WORD PTR "

  .align 8
.LABEL__string_21:
  .quad .LABEL__string_21__data
  .quad 19
  .quad 18
.LABEL__string_21__data: .string "__stack_frame_size"

  .align 8
.LABEL__string_22:
  .quad .LABEL__string_22__data
  .quad 6
  .quad 5
.LABEL__string_22__data: .string "[rip]"

  .align 8
.LABEL__string_23:
  .quad .LABEL__string_23__data
  .quad 15
  .quad 14
.LABEL__string_23__data: .string "  sub rsp, rax"

  .align 8
.LABEL__string_24:
  .quad .LABEL__string_24__data
  .quad 2
  .quad 1
.LABEL__string_24__data: .string ":"

  .align 8
.LABEL__string_25:
  .quad .LABEL__string_25__data
  .quad 15
  .quad 14
.LABEL__string_25__data: .string "  mov rsp, rbp"

  .align 8
.LABEL__string_26:
  .quad .LABEL__string_26__data
  .quad 10
  .quad 9
.LABEL__string_26__data: .string "  pop rbp"

  .align 8
.LABEL__string_27:
  .quad .LABEL__string_27__data
  .quad 6
  .quad 5
.LABEL__string_27__data: .string "  ret"

  .align 8
.LABEL__string_28:
  .quad .LABEL__string_28__data
  .quad 9
  .quad 8
.LABEL__string_28__data: .string ": .word "

  .align 8
.LABEL__string_29:
  .quad .LABEL__string_29__data
  .quad 9
  .quad 8
.LABEL__string_29__data: .string ".LABEL__"

  .align 8
.LABEL__string_30:
  .quad .LABEL__string_30__data
  .quad 3
  .quad 2
.LABEL__string_30__data: .string "__"

  .align 8
.LABEL__string_31:
  .quad .LABEL__string_31__data
  .quad 4
  .quad 3
.LABEL__string_31__data: .string "end"

  .align 8
.LABEL__string_32:
  .quad .LABEL__string_32__data
  .quad 32
  .quad 31
.LABEL__string_32__data: .string "  # [unreachable instruction]: "

  .align 8
.LABEL__string_33:
  .quad .LABEL__string_33__data
  .quad 5
  .quad 4
.LABEL__string_33__data: .string "  # "

  .align 8
.LABEL__string_34:
  .quad .LABEL__string_34__data
  .quad 26
  .quad 25
.LABEL__string_34__data: .string "Unsupported instruction: "

  .align 8
.LABEL__string_35:
  .quad .LABEL__string_35__data
  .quad 7
  .quad 6
.LABEL__string_35__data: .string "  add "

  .align 8
.LABEL__string_36:
  .quad .LABEL__string_36__data
  .quad 3
  .quad 2
.LABEL__string_36__data: .string ", "

  .align 8
.LABEL__string_37:
  .quad .LABEL__string_37__data
  .quad 8
  .quad 7
.LABEL__string_37__data: .string "  call "

  .align 8
.LABEL__string_38:
  .quad .LABEL__string_38__data
  .quad 9
  .quad 8
.LABEL__string_38__data: .string "  movsx "

  .align 8
.LABEL__string_39:
  .quad .LABEL__string_39__data
  .quad 13
  .quad 12
.LABEL__string_39__data: .string "Cannot cast "

  .align 8
.LABEL__string_40:
  .quad .LABEL__string_40__data
  .quad 5
  .quad 4
.LABEL__string_40__data: .string " to "

  .align 8
.LABEL__string_41:
  .quad .LABEL__string_41__data
  .quad 23
  .quad 22
.LABEL__string_41__data: .string "Unsupported value type"

  .align 8
.LABEL__string_42:
  .quad .LABEL__string_42__data
  .quad 14
  .quad 13
.LABEL__string_42__data: .string "Invalid state"

  .align 8
.LABEL__string_43:
  .quad .LABEL__string_43__data
  .quad 8
  .quad 7
.LABEL__string_43__data: .string "  test "

  .align 8
.LABEL__string_44:
  .quad .LABEL__string_44__data
  .quad 7
  .quad 6
.LABEL__string_44__data: .string "  jnz "

  .align 8
.LABEL__string_45:
  .quad .LABEL__string_45__data
  .quad 6
  .quad 5
.LABEL__string_45__data: .string "  jz "

  .align 8
.LABEL__string_46:
  .quad .LABEL__string_46__data
  .quad 7
  .quad 6
.LABEL__string_46__data: .string "  cmp "

  .align 8
.LABEL__string_47:
  .quad .LABEL__string_47__data
  .quad 8
  .quad 7
.LABEL__string_47__data: .string "  sete "

  .align 8
.LABEL__string_48:
  .quad .LABEL__string_48__data
  .quad 8
  .quad 7
.LABEL__string_48__data: .string "  setg "

  .align 8
.LABEL__string_49:
  .quad .LABEL__string_49__data
  .quad 9
  .quad 8
.LABEL__string_49__data: .string "  setge "

  .align 8
.LABEL__string_50:
  .quad .LABEL__string_50__data
  .quad 8
  .quad 7
.LABEL__string_50__data: .string "  setl "

  .align 8
.LABEL__string_51:
  .quad .LABEL__string_51__data
  .quad 9
  .quad 8
.LABEL__string_51__data: .string "  setle "

  .align 8
.LABEL__string_52:
  .quad .LABEL__string_52__data
  .quad 9
  .quad 8
.LABEL__string_52__data: .string "  setne "

  .align 8
.LABEL__string_53:
  .quad .LABEL__string_53__data
  .quad 42
  .quad 41
.LABEL__string_53__data: .string "Unsupported comparison instruction type: "

  .align 8
.LABEL__string_54:
  .quad .LABEL__string_54__data
  .quad 7
  .quad 6
.LABEL__string_54__data: .string "  jmp "

  .align 8
.LABEL__string_55:
  .quad .LABEL__string_55__data
  .quad 7
  .quad 6
.LABEL__string_55__data: .string "  cqto"

  .align 8
.LABEL__string_56:
  .quad .LABEL__string_56__data
  .quad 8
  .quad 7
.LABEL__string_56__data: .string "  idiv "

  .align 8
.LABEL__string_57:
  .quad .LABEL__string_57__data
  .quad 7
  .quad 6
.LABEL__string_57__data: .string "  mov "

  .align 8
.LABEL__string_58:
  .quad .LABEL__string_58__data
  .quad 4
  .quad 3
.LABEL__string_58__data: .string ", ["

  .align 8
.LABEL__string_59:
  .quad .LABEL__string_59__data
  .quad 8
  .quad 7
.LABEL__string_59__data: .string "  imul "

  .align 8
.LABEL__string_60:
  .quad .LABEL__string_60__data
  .quad 12
  .quad 11
.LABEL__string_60__data: .string "Object_Type"

  .align 8
.LABEL__string_61:
  .quad .LABEL__string_61__data
  .quad 7
  .quad 6
.LABEL__string_61__data: .string "  lea "

  .align 8
.LABEL__string_62:
  .quad .LABEL__string_62__data
  .quad 34
  .quad 33
.LABEL__string_62__data: .string "Unsupported non-external variable"

  .align 8
.LABEL__string_63:
  .quad .LABEL__string_63__data
  .quad 28
  .quad 27
.LABEL__string_63__data: .string "Unsupported variable type: "

  .align 8
.LABEL__string_64:
  .quad .LABEL__string_64__data
  .quad 25
  .quad 24
.LABEL__string_64__data: .string "TODO: compute array size"

  .align 8
.LABEL__string_65:
  .quad .LABEL__string_65__data
  .quad 7
  .quad 6
.LABEL__string_65__data: .string "malloc"

  .align 8
.LABEL__string_66:
  .quad .LABEL__string_66__data
  .quad 12
  .quad 11
.LABEL__string_66__data: .string "Looks like "

  .align 8
.LABEL__string_67:
  .quad .LABEL__string_67__data
  .quad 29
  .quad 28
.LABEL__string_67__data: .string " is not properly initialized"

  .align 8
.LABEL__string_68:
  .quad .LABEL__string_68__data
  .quad 11
  .quad 10
.LABEL__string_68__data: .string "QWORD PTR "

  .align 8
.LABEL__string_69:
  .quad .LABEL__string_69__data
  .quad 11
  .quad 10
.LABEL__string_69__data: .string "DWORD PTR "

  .align 8
.LABEL__string_70:
  .quad .LABEL__string_70__data
  .quad 10
  .quad 9
.LABEL__string_70__data: .string "WORD PTR "

  .align 8
.LABEL__string_71:
  .quad .LABEL__string_71__data
  .quad 10
  .quad 9
.LABEL__string_71__data: .string "BYTE PTR "

  .align 8
.LABEL__string_72:
  .quad .LABEL__string_72__data
  .quad 7
  .quad 6
.LABEL__string_72__data: .string "  sub "

  .align 8
.LABEL__string_73:
  .quad .LABEL__string_73__data
  .quad 7
  .quad 6
.LABEL__string_73__data: .string "  xor "

  .align 8
.LABEL__string_74:
  .quad .LABEL__string_74__data
  .quad 4
  .quad 3
.LABEL__string_74__data: .string " # "

  .align 8
.LABEL__string_75:
  .quad .LABEL__string_75__data
  .quad 27
  .quad 26
.LABEL__string_75__data: .string "Unsupported literal type: "

  .align 8
.LABEL__string_76:
  .quad .LABEL__string_76__data
  .quad 25
  .quad 24
.LABEL__string_76__data: .string "Unsupported value type: "

  .align 8
.LABEL__string_77:
  .quad .LABEL__string_77__data
  .quad 31
  .quad 30
.LABEL__string_77__data: .string "Unsupported constant literal: "

  .align 8
.LABEL__string_78:
  .quad .LABEL__string_78__data
  .quad 24
  .quad 23
.LABEL__string_78__data: .string "Unsupported type size: "

  .align 8
.LABEL__string_79:
  .quad .LABEL__string_79__data
  .quad 20
  .quad 19
.LABEL__string_79__data: .string "Unsupported value: "

  .align 8
.LABEL__string_80:
  .quad .LABEL__string_80__data
  .quad 13
  .quad 12
.LABEL__string_80__data: .string "[Generator] "

  .align 8
.LABEL__string_81:
  .quad .LABEL__string_81__data
  .quad 4
  .quad 3
.LABEL__string_81__data: .string "rax"

  .align 8
.LABEL__string_82:
  .quad .LABEL__string_82__data
  .quad 4
  .quad 3
.LABEL__string_82__data: .string "eax"

  .align 8
.LABEL__string_83:
  .quad .LABEL__string_83__data
  .quad 3
  .quad 2
.LABEL__string_83__data: .string "ax"

  .align 8
.LABEL__string_84:
  .quad .LABEL__string_84__data
  .quad 3
  .quad 2
.LABEL__string_84__data: .string "al"

  .align 8
.LABEL__string_85:
  .quad .LABEL__string_85__data
  .quad 4
  .quad 3
.LABEL__string_85__data: .string "rcx"

  .align 8
.LABEL__string_86:
  .quad .LABEL__string_86__data
  .quad 4
  .quad 3
.LABEL__string_86__data: .string "ecx"

  .align 8
.LABEL__string_87:
  .quad .LABEL__string_87__data
  .quad 3
  .quad 2
.LABEL__string_87__data: .string "cx"

  .align 8
.LABEL__string_88:
  .quad .LABEL__string_88__data
  .quad 3
  .quad 2
.LABEL__string_88__data: .string "cl"

  .align 8
.LABEL__string_89:
  .quad .LABEL__string_89__data
  .quad 4
  .quad 3
.LABEL__string_89__data: .string "rdx"

  .align 8
.LABEL__string_90:
  .quad .LABEL__string_90__data
  .quad 4
  .quad 3
.LABEL__string_90__data: .string "edx"

  .align 8
.LABEL__string_91:
  .quad .LABEL__string_91__data
  .quad 3
  .quad 2
.LABEL__string_91__data: .string "dx"

  .align 8
.LABEL__string_92:
  .quad .LABEL__string_92__data
  .quad 3
  .quad 2
.LABEL__string_92__data: .string "dl"

  .align 8
.LABEL__string_93:
  .quad .LABEL__string_93__data
  .quad 4
  .quad 3
.LABEL__string_93__data: .string "rbx"

  .align 8
.LABEL__string_94:
  .quad .LABEL__string_94__data
  .quad 4
  .quad 3
.LABEL__string_94__data: .string "ebx"

  .align 8
.LABEL__string_95:
  .quad .LABEL__string_95__data
  .quad 3
  .quad 2
.LABEL__string_95__data: .string "bx"

  .align 8
.LABEL__string_96:
  .quad .LABEL__string_96__data
  .quad 3
  .quad 2
.LABEL__string_96__data: .string "bl"

  .align 8
.LABEL__string_97:
  .quad .LABEL__string_97__data
  .quad 4
  .quad 3
.LABEL__string_97__data: .string "rsi"

  .align 8
.LABEL__string_98:
  .quad .LABEL__string_98__data
  .quad 4
  .quad 3
.LABEL__string_98__data: .string "esi"

  .align 8
.LABEL__string_99:
  .quad .LABEL__string_99__data
  .quad 3
  .quad 2
.LABEL__string_99__data: .string "si"

  .align 8
.LABEL__string_100:
  .quad .LABEL__string_100__data
  .quad 4
  .quad 3
.LABEL__string_100__data: .string "sil"

  .align 8
.LABEL__string_101:
  .quad .LABEL__string_101__data
  .quad 4
  .quad 3
.LABEL__string_101__data: .string "rdi"

  .align 8
.LABEL__string_102:
  .quad .LABEL__string_102__data
  .quad 4
  .quad 3
.LABEL__string_102__data: .string "edi"

  .align 8
.LABEL__string_103:
  .quad .LABEL__string_103__data
  .quad 3
  .quad 2
.LABEL__string_103__data: .string "di"

  .align 8
.LABEL__string_104:
  .quad .LABEL__string_104__data
  .quad 4
  .quad 3
.LABEL__string_104__data: .string "dil"

  .align 8
.LABEL__string_105:
  .quad .LABEL__string_105__data
  .quad 3
  .quad 2
.LABEL__string_105__data: .string "r8"

  .align 8
.LABEL__string_106:
  .quad .LABEL__string_106__data
  .quad 4
  .quad 3
.LABEL__string_106__data: .string "r8d"

  .align 8
.LABEL__string_107:
  .quad .LABEL__string_107__data
  .quad 4
  .quad 3
.LABEL__string_107__data: .string "r8w"

  .align 8
.LABEL__string_108:
  .quad .LABEL__string_108__data
  .quad 4
  .quad 3
.LABEL__string_108__data: .string "r8b"

  .align 8
.LABEL__string_109:
  .quad .LABEL__string_109__data
  .quad 3
  .quad 2
.LABEL__string_109__data: .string "r9"

  .align 8
.LABEL__string_110:
  .quad .LABEL__string_110__data
  .quad 4
  .quad 3
.LABEL__string_110__data: .string "r9d"

  .align 8
.LABEL__string_111:
  .quad .LABEL__string_111__data
  .quad 4
  .quad 3
.LABEL__string_111__data: .string "r9w"

  .align 8
.LABEL__string_112:
  .quad .LABEL__string_112__data
  .quad 4
  .quad 3
.LABEL__string_112__data: .string "r9b"

  .align 8
.LABEL__string_113:
  .quad .LABEL__string_113__data
  .quad 4
  .quad 3
.LABEL__string_113__data: .string "r10"

  .align 8
.LABEL__string_114:
  .quad .LABEL__string_114__data
  .quad 5
  .quad 4
.LABEL__string_114__data: .string "r10d"

  .align 8
.LABEL__string_115:
  .quad .LABEL__string_115__data
  .quad 5
  .quad 4
.LABEL__string_115__data: .string "r10w"

  .align 8
.LABEL__string_116:
  .quad .LABEL__string_116__data
  .quad 5
  .quad 4
.LABEL__string_116__data: .string "r10b"

  .align 8
.LABEL__string_117:
  .quad .LABEL__string_117__data
  .quad 4
  .quad 3
.LABEL__string_117__data: .string "r11"

  .align 8
.LABEL__string_118:
  .quad .LABEL__string_118__data
  .quad 5
  .quad 4
.LABEL__string_118__data: .string "r11d"

  .align 8
.LABEL__string_119:
  .quad .LABEL__string_119__data
  .quad 5
  .quad 4
.LABEL__string_119__data: .string "r11w"

  .align 8
.LABEL__string_120:
  .quad .LABEL__string_120__data
  .quad 5
  .quad 4
.LABEL__string_120__data: .string "r11b"

  .align 8
.LABEL__string_121:
  .quad .LABEL__string_121__data
  .quad 4
  .quad 3
.LABEL__string_121__data: .string "r12"

  .align 8
.LABEL__string_122:
  .quad .LABEL__string_122__data
  .quad 5
  .quad 4
.LABEL__string_122__data: .string "r12d"

  .align 8
.LABEL__string_123:
  .quad .LABEL__string_123__data
  .quad 5
  .quad 4
.LABEL__string_123__data: .string "r12w"

  .align 8
.LABEL__string_124:
  .quad .LABEL__string_124__data
  .quad 5
  .quad 4
.LABEL__string_124__data: .string "r12b"

  .align 8
.LABEL__string_125:
  .quad .LABEL__string_125__data
  .quad 4
  .quad 3
.LABEL__string_125__data: .string "r13"

  .align 8
.LABEL__string_126:
  .quad .LABEL__string_126__data
  .quad 5
  .quad 4
.LABEL__string_126__data: .string "r13d"

  .align 8
.LABEL__string_127:
  .quad .LABEL__string_127__data
  .quad 5
  .quad 4
.LABEL__string_127__data: .string "r13w"

  .align 8
.LABEL__string_128:
  .quad .LABEL__string_128__data
  .quad 5
  .quad 4
.LABEL__string_128__data: .string "r13b"

  .align 8
.LABEL__string_129:
  .quad .LABEL__string_129__data
  .quad 4
  .quad 3
.LABEL__string_129__data: .string "r14"

  .align 8
.LABEL__string_130:
  .quad .LABEL__string_130__data
  .quad 5
  .quad 4
.LABEL__string_130__data: .string "r14d"

  .align 8
.LABEL__string_131:
  .quad .LABEL__string_131__data
  .quad 5
  .quad 4
.LABEL__string_131__data: .string "r14w"

  .align 8
.LABEL__string_132:
  .quad .LABEL__string_132__data
  .quad 5
  .quad 4
.LABEL__string_132__data: .string "r14b"

  .align 8
.LABEL__string_133:
  .quad .LABEL__string_133__data
  .quad 4
  .quad 3
.LABEL__string_133__data: .string "r15"

  .align 8
.LABEL__string_134:
  .quad .LABEL__string_134__data
  .quad 5
  .quad 4
.LABEL__string_134__data: .string "r15d"

  .align 8
.LABEL__string_135:
  .quad .LABEL__string_135__data
  .quad 5
  .quad 4
.LABEL__string_135__data: .string "r15w"

  .align 8
.LABEL__string_136:
  .quad .LABEL__string_136__data
  .quad 5
  .quad 4
.LABEL__string_136__data: .string "r15b"

  .align 8
.LABEL__string_137:
  .quad .LABEL__string_137__data
  .quad 24
  .quad 23
.LABEL__string_137__data: .string "All registered are used"

  .align 8
.LABEL__string_138:
  .quad .LABEL__string_138__data
  .quad 10
  .quad 9
.LABEL__string_138__data: .string "Register "

  .align 8
.LABEL__string_139:
  .quad .LABEL__string_139__data
  .quad 30
  .quad 29
.LABEL__string_139__data: .string " already mapped to variable: "

  .align 8
.LABEL__string_140:
  .quad .LABEL__string_140__data
  .quad 29
  .quad 28
.LABEL__string_140__data: .string "TODO: spill global variable "

  .align 8
.LABEL__string_141:
  .quad .LABEL__string_141__data
  .quad 24
  .quad 23
.LABEL__string_141__data: .string "  # [discarded value]: "

  .align 8
.LABEL__string_142:
  .quad .LABEL__string_142__data
  .quad 20
  .quad 19
.LABEL__string_142__data: .string "  # [live values]: "

  .align 8
.LABEL__string_143:
  .quad .LABEL__string_143__data
  .quad 23
  .quad 22
.LABEL__string_143__data: .string "  # [used registers]: "

  .align 8
.LABEL__string_144:
  .quad .LABEL__string_144__data
  .quad 6
  .quad 5
.LABEL__string_144__data: .string "[rbp-"

  .align 8
.LABEL__string_145:
  .quad .LABEL__string_145__data
  .quad 19
  .quad 18
.LABEL__string_145__data: .string "Unsupported type: "

  .align 8
.LABEL__string_146:
  .quad .LABEL__string_146__data
  .quad 19
  .quad 18
.LABEL__string_146__data: .string "  .section .rodata"

  .align 8
.LABEL__string_147:
  .quad .LABEL__string_147__data
  .quad 11
  .quad 10
.LABEL__string_147__data: .string "  .align 8"

  .align 8
.LABEL__string_148:
  .quad .LABEL__string_148__data
  .quad 9
  .quad 8
.LABEL__string_148__data: .string "  .quad "

  .align 8
.LABEL__string_149:
  .quad .LABEL__string_149__data
  .quad 7
  .quad 6
.LABEL__string_149__data: .string "__data"

  .align 8
.LABEL__string_150:
  .quad .LABEL__string_150__data
  .quad 17
  .quad 16
.LABEL__string_150__data: .string "__data: .string "

  .align 8
.LABEL__string_151:
  .quad .LABEL__string_151__data
  .quad 16
  .quad 15
.LABEL__string_151__data: .string ".LABEL__string_"

  .align 8
.LABEL__string_152:
  .quad .LABEL__string_152__data
  .quad 17
  .quad 16
.LABEL__string_152__data: .string "  .quad .LABEL__"

  .align 8
.LABEL__string_153:
  .quad .LABEL__string_153__data
  .quad 18
  .quad 17
.LABEL__string_153__data: .string "__type_name__data"

  .align 8
.LABEL__string_154:
  .quad .LABEL__string_154__data
  .quad 29
  .quad 28
.LABEL__string_154__data: .string "__type_name__data: .string \""

  .align 8
.LABEL__string_155:
  .quad .LABEL__string_155__data
  .quad 10
  .quad 9
.LABEL__string_155__data: .string "  .quad 0"

  .align 8
.LABEL__string_156:
  .quad .LABEL__string_156__data
  .quad 4
  .quad 3
.LABEL__string_156__data: .string "Any"

  .align 8
.LABEL__string_157:
  .quad .LABEL__string_157__data
  .quad 8
  .quad 7
.LABEL__string_157__data: .string "Boolean"

  .align 8
.LABEL__string_158:
  .quad .LABEL__string_158__data
  .quad 4
  .quad 3
.LABEL__string_158__data: .string "Int"

  .align 8
.LABEL__string_159:
  .quad .LABEL__string_159__data
  .quad 5
  .quad 4
.LABEL__string_159__data: .string "Int8"

  .align 8
.LABEL__string_160:
  .quad .LABEL__string_160__data
  .quad 6
  .quad 5
.LABEL__string_160__data: .string "Int16"

  .align 8
.LABEL__string_161:
  .quad .LABEL__string_161__data
  .quad 6
  .quad 5
.LABEL__string_161__data: .string "Int32"

  .align 8
.LABEL__string_162:
  .quad .LABEL__string_162__data
  .quad 6
  .quad 5
.LABEL__string_162__data: .string "Int64"

  .align 8
.LABEL__string_163:
  .quad .LABEL__string_163__data
  .quad 8
  .quad 7
.LABEL__string_163__data: .string "Nothing"

  .align 8
.LABEL__string_164:
  .quad .LABEL__string_164__data
  .quad 5
  .quad 4
.LABEL__string_164__data: .string "Null"

  .align 8
.LABEL__string_165:
  .quad .LABEL__string_165__data
  .quad 21
  .quad 20
.LABEL__string_165__data: .string "Undefined function: "

  .align 8
.LABEL__string_166:
  .quad .LABEL__string_166__data
  .quad 6
  .quad 5
.LABEL__string_166__data: .string " :: ("

  .align 8
.LABEL__string_167:
  .quad .LABEL__string_167__data
  .quad 2
  .quad 1
.LABEL__string_167__data: .string ")"

  .align 8
.LABEL__string_168:
  .quad .LABEL__string_168__data
  .quad 2
  .quad 1
.LABEL__string_168__data: .string "$"

  .align 8
.LABEL__string_169:
  .quad .LABEL__string_169__data
  .quad 29
  .quad 28
.LABEL__string_169__data: .string "Duplicate type declaration: "

  .align 8
.LABEL__string_170:
  .quad .LABEL__string_170__data
  .quad 19
  .quad 18
.LABEL__string_170__data: .string "Not a struct type."

  .align 8
.LABEL__string_171:
  .quad .LABEL__string_171__data
  .quad 15
  .quad 14
.LABEL__string_171__data: .string "Unknown type: "

  .align 8
.LABEL__string_172:
  .quad .LABEL__string_172__data
  .quad 52
  .quad 51
.LABEL__string_172__data: .string "Initialized global variables are not supported yet."

  .align 8
.LABEL__string_173:
  .quad .LABEL__string_173__data
  .quad 37
  .quad 36
.LABEL__string_173__data: .string "Type inference is not supported yet."

  .align 8
.LABEL__string_174:
  .quad .LABEL__string_174__data
  .quad 25
  .quad 24
.LABEL__string_174__data: .string "Missing return statement"

  .align 8
.LABEL__string_175:
  .quad .LABEL__string_175__data
  .quad 42
  .quad 41
.LABEL__string_175__data: .string "Found non-empty unreachable block: block."

  .align 8
.LABEL__string_176:
  .quad .LABEL__string_176__data
  .quad 25
  .quad 24
.LABEL__string_176__data: .string " requires a basic block."

  .align 8
.LABEL__string_177:
  .quad .LABEL__string_177__data
  .quad 21
  .quad 20
.LABEL__string_177__data: .string "Not an array pointer"

  .align 8
.LABEL__string_178:
  .quad .LABEL__string_178__data
  .quad 24
  .quad 23
.LABEL__string_178__data: .string "Invalid expression type"

  .align 8
.LABEL__string_179:
  .quad .LABEL__string_179__data
  .quad 8
  .quad 7
.LABEL__string_179__data: .string "Not a '"

  .align 8
.LABEL__string_180:
  .quad .LABEL__string_180__data
  .quad 8
  .quad 7
.LABEL__string_180__data: .string "' value"

  .align 8
.LABEL__string_181:
  .quad .LABEL__string_181__data
  .quad 18
  .quad 17
.LABEL__string_181__data: .string " doesn't have a '"

  .align 8
.LABEL__string_182:
  .quad .LABEL__string_182__data
  .quad 9
  .quad 8
.LABEL__string_182__data: .string "' member"

  .align 8
.LABEL__string_183:
  .quad .LABEL__string_183__data
  .quad 18
  .quad 17
.LABEL__string_183__data: .string "Cannot assign a '"

  .align 8
.LABEL__string_184:
  .quad .LABEL__string_184__data
  .quad 15
  .quad 14
.LABEL__string_184__data: .string "' value to a '"

  .align 8
.LABEL__string_185:
  .quad .LABEL__string_185__data
  .quad 16
  .quad 15
.LABEL__string_185__data: .string "' struct member"

  .align 8
.LABEL__string_186:
  .quad .LABEL__string_186__data
  .quad 22
  .quad 21
.LABEL__string_186__data: .string "Undeclared variable: "

  .align 8
.LABEL__string_187:
  .quad .LABEL__string_187__data
  .quad 11
  .quad 10
.LABEL__string_187__data: .string "' variable"

  .align 8
.LABEL__string_188:
  .quad .LABEL__string_188__data
  .quad 25
  .quad 24
.LABEL__string_188__data: .string "Break outside of a loop?"

  .align 8
.LABEL__string_189:
  .quad .LABEL__string_189__data
  .quad 38
  .quad 37
.LABEL__string_189__data: .string "Unexpected returned expression type: "

  .align 8
.LABEL__string_190:
  .quad .LABEL__string_190__data
  .quad 29
  .quad 28
.LABEL__string_190__data: .string ": Redundant type declaration"

  .align 8
.LABEL__string_191:
  .quad .LABEL__string_191__data
  .quad 24
  .quad 23
.LABEL__string_191__data: .string "Invalid variable type: "

  .align 8
.LABEL__string_192:
  .quad .LABEL__string_192__data
  .quad 34
  .quad 33
.LABEL__string_192__data: .string "Cannot infer type from null value"

  .align 8
.LABEL__string_193:
  .quad .LABEL__string_193__data
  .quad 22
  .quad 21
.LABEL__string_193__data: .string "Not an Int expression"

  .align 8
.LABEL__string_194:
  .quad .LABEL__string_194__data
  .quad 35
  .quad 34
.LABEL__string_194__data: .string "TODO: Evaluate constant expression"

  .align 8
.LABEL__string_195:
  .quad .LABEL__string_195__data
  .quad 31
  .quad 30
.LABEL__string_195__data: .string "Not an IR_Pointer_Type value: "

  .align 8
.LABEL__string_196:
  .quad .LABEL__string_196__data
  .quad 19
  .quad 18
.LABEL__string_196__data: .string "No such function: "

  .align 8
.LABEL__string_197:
  .quad .LABEL__string_197__data
  .quad 31
  .quad 30
.LABEL__string_197__data: .string "Operands are not the same type"

  .align 8
.LABEL__string_198:
  .quad .LABEL__string_198__data
  .quad 7
  .quad 6
.LABEL__string_198__data: .string "String"

  .align 8
.LABEL__string_199:
  .quad .LABEL__string_199__data
  .quad 29
  .quad 28
.LABEL__string_199__data: .string "Must be a boolean expression"

  .align 8
.LABEL__string_200:
  .quad .LABEL__string_200__data
  .quad 37
  .quad 36
.LABEL__string_200__data: .string "Not a IR_Struct_Type pointer value: "

  .align 8
.LABEL__string_201:
  .quad .LABEL__string_201__data
  .quad 22
  .quad 21
.LABEL__string_201__data: .string " has no such member: "

  .align 8
.LABEL__string_202:
  .quad .LABEL__string_202__data
  .quad 28
  .quad 27
.LABEL__string_202__data: .string "Undeclared variable value: "

  .align 8
.LABEL__string_203:
  .quad .LABEL__string_203__data
  .quad 32
  .quad 31
.LABEL__string_203__data: .string "Variable type without address: "

  .align 8
.LABEL__string_204:
  .quad .LABEL__string_204__data
  .quad 19
  .quad 18
.LABEL__string_204__data: .string "Unknown function: "

  .align 8
.LABEL__string_205:
  .quad .LABEL__string_205__data
  .quad 19
  .quad 18
.LABEL__string_205__data: .string "Unknown variable: "

  .align 8
.LABEL__string_206:
  .quad .LABEL__string_206__data
  .quad 20
  .quad 19
.LABEL__string_206__data: .string ": Unexpected type: "

  .align 8
.LABEL__string_207:
  .quad .LABEL__string_207__data
  .quad 2
  .quad 1
.LABEL__string_207__data: .string "@"

  .align 8
.LABEL__string_208:
  .quad .LABEL__string_208__data
  .quad 2
  .quad 1
.LABEL__string_208__data: .string "["

  .align 8
.LABEL__string_209:
  .quad .LABEL__string_209__data
  .quad 2
  .quad 1
.LABEL__string_209__data: .string "]"

  .align 8
.LABEL__string_210:
  .quad .LABEL__string_210__data
  .quad 7
  .quad 6
.LABEL__string_210__data: .string "Object"

  .align 8
.LABEL__string_211:
  .quad .LABEL__string_211__data
  .quad 55
  .quad 54
.LABEL__string_211__data: .string "Tried to remove instruction belonging to another block"

  .align 8
.LABEL__string_212:
  .quad .LABEL__string_212__data
  .quad 6
  .quad 5
.LABEL__string_212__data: .string "abort"

  .align 8
.LABEL__string_213:
  .quad .LABEL__string_213__data
  .quad 5
  .quad 4
.LABEL__string_213__data: .string "exit"

  .align 8
.LABEL__string_214:
  .quad .LABEL__string_214__data
  .quad 3
  .quad 2
.LABEL__string_214__data: .string ": "

  .align 8
.LABEL__string_215:
  .quad .LABEL__string_215__data
  .quad 6
  .quad 5
.LABEL__string_215__data: .string ") -> "

  .align 8
.LABEL__string_216:
  .quad .LABEL__string_216__data
  .quad 3
  .quad 2
.LABEL__string_216__data: .string " {"

  .align 8
.LABEL__string_217:
  .quad .LABEL__string_217__data
  .quad 7
  .quad 6
.LABEL__string_217__data: .string "block."

  .align 8
.LABEL__string_218:
  .quad .LABEL__string_218__data
  .quad 4
  .quad 3
.LABEL__string_218__data: .string "   "

  .align 8
.LABEL__string_219:
  .quad .LABEL__string_219__data
  .quad 4
  .quad 3
.LABEL__string_219__data: .string " = "

  .align 8
.LABEL__string_220:
  .quad .LABEL__string_220__data
  .quad 4
  .quad 3
.LABEL__string_220__data: .string " + "

  .align 8
.LABEL__string_221:
  .quad .LABEL__string_221__data
  .quad 5
  .quad 4
.LABEL__string_221__data: .string "call"

  .align 8
.LABEL__string_222:
  .quad .LABEL__string_222__data
  .quad 5
  .quad 4
.LABEL__string_222__data: .string "cast"

  .align 8
.LABEL__string_223:
  .quad .LABEL__string_223__data
  .quad 5
  .quad 4
.LABEL__string_223__data: .string "jump"

  .align 8
.LABEL__string_224:
  .quad .LABEL__string_224__data
  .quad 9
  .quad 8
.LABEL__string_224__data: .string ", block."

  .align 8
.LABEL__string_225:
  .quad .LABEL__string_225__data
  .quad 4
  .quad 3
.LABEL__string_225__data: .string " / "

  .align 8
.LABEL__string_226:
  .quad .LABEL__string_226__data
  .quad 5
  .quad 4
.LABEL__string_226__data: .string " == "

  .align 8
.LABEL__string_227:
  .quad .LABEL__string_227__data
  .quad 4
  .quad 3
.LABEL__string_227__data: .string " > "

  .align 8
.LABEL__string_228:
  .quad .LABEL__string_228__data
  .quad 5
  .quad 4
.LABEL__string_228__data: .string " >= "

  .align 8
.LABEL__string_229:
  .quad .LABEL__string_229__data
  .quad 4
  .quad 3
.LABEL__string_229__data: .string " < "

  .align 8
.LABEL__string_230:
  .quad .LABEL__string_230__data
  .quad 5
  .quad 4
.LABEL__string_230__data: .string " <= "

  .align 8
.LABEL__string_231:
  .quad .LABEL__string_231__data
  .quad 16
  .quad 15
.LABEL__string_231__data: .string "load_array_item"

  .align 8
.LABEL__string_232:
  .quad .LABEL__string_232__data
  .quad 19
  .quad 18
.LABEL__string_232__data: .string "load_struct_member"

  .align 8
.LABEL__string_233:
  .quad .LABEL__string_233__data
  .quad 14
  .quad 13
.LABEL__string_233__data: .string "load_variable"

  .align 8
.LABEL__string_234:
  .quad .LABEL__string_234__data
  .quad 5
  .quad 4
.LABEL__string_234__data: .string " // "

  .align 8
.LABEL__string_235:
  .quad .LABEL__string_235__data
  .quad 4
  .quad 3
.LABEL__string_235__data: .string " * "

  .align 8
.LABEL__string_236:
  .quad .LABEL__string_236__data
  .quad 4
  .quad 3
.LABEL__string_236__data: .string "new"

  .align 8
.LABEL__string_237:
  .quad .LABEL__string_237__data
  .quad 5
  .quad 4
.LABEL__string_237__data: .string " != "

  .align 8
.LABEL__string_238:
  .quad .LABEL__string_238__data
  .quad 4
  .quad 3
.LABEL__string_238__data: .string "phi"

  .align 8
.LABEL__string_239:
  .quad .LABEL__string_239__data
  .quad 7
  .quad 6
.LABEL__string_239__data: .string "return"

  .align 8
.LABEL__string_240:
  .quad .LABEL__string_240__data
  .quad 17
  .quad 16
.LABEL__string_240__data: .string "store_array_item"

  .align 8
.LABEL__string_241:
  .quad .LABEL__string_241__data
  .quad 20
  .quad 19
.LABEL__string_241__data: .string "store_struct_member"

  .align 8
.LABEL__string_242:
  .quad .LABEL__string_242__data
  .quad 4
  .quad 3
.LABEL__string_242__data: .string " - "

  .align 8
.LABEL__string_243:
  .quad .LABEL__string_243__data
  .quad 2
  .quad 1
.LABEL__string_243__data: .string "."

  .align 8
.LABEL__string_244:
  .quad .LABEL__string_244__data
  .quad 10
  .quad 9
.LABEL__string_244__data: .string "undefined"

  .align 8
.LABEL__string_245:
  .quad .LABEL__string_245__data
  .quad 2
  .quad 1
.LABEL__string_245__data: .string "&"

  .align 8
.LABEL__string_246:
  .quad .LABEL__string_246__data
  .quad 3
  .quad 2
.LABEL__string_246__data: .string "as"

  .align 8
.LABEL__string_247:
  .quad .LABEL__string_247__data
  .quad 2
  .quad 1
.LABEL__string_247__data: .string "*"

  .align 8
.LABEL__string_248:
  .quad .LABEL__string_248__data
  .quad 6
  .quad 5
.LABEL__string_248__data: .string "break"

  .align 8
.LABEL__string_249:
  .quad .LABEL__string_249__data
  .quad 2
  .quad 1
.LABEL__string_249__data: .string "}"

  .align 8
.LABEL__string_250:
  .quad .LABEL__string_250__data
  .quad 2
  .quad 1
.LABEL__string_250__data: .string ";"

  .align 8
.LABEL__string_251:
  .quad .LABEL__string_251__data
  .quad 2
  .quad 1
.LABEL__string_251__data: .string ","

  .align 8
.LABEL__string_252:
  .quad .LABEL__string_252__data
  .quad 5
  .quad 4
.LABEL__string_252__data: .string "else"

  .align 8
.LABEL__string_253:
  .quad .LABEL__string_253__data
  .quad 2
  .quad 1
.LABEL__string_253__data: .string "="

  .align 8
.LABEL__string_254:
  .quad .LABEL__string_254__data
  .quad 2
  .quad 1
.LABEL__string_254__data: .string "!"

  .align 8
.LABEL__string_255:
  .quad .LABEL__string_255__data
  .quad 9
  .quad 8
.LABEL__string_255__data: .string "external"

  .align 8
.LABEL__string_256:
  .quad .LABEL__string_256__data
  .quad 2
  .quad 1
.LABEL__string_256__data: .string ">"

  .align 8
.LABEL__string_257:
  .quad .LABEL__string_257__data
  .quad 2
  .quad 1
.LABEL__string_257__data: .string "-"

  .align 8
.LABEL__string_258:
  .quad .LABEL__string_258__data
  .quad 3
  .quad 2
.LABEL__string_258__data: .string "if"

  .align 8
.LABEL__string_259:
  .quad .LABEL__string_259__data
  .quad 8
  .quad 7
.LABEL__string_259__data: .string "include"

  .align 8
.LABEL__string_260:
  .quad .LABEL__string_260__data
  .quad 2
  .quad 1
.LABEL__string_260__data: .string "<"

  .align 8
.LABEL__string_261:
  .quad .LABEL__string_261__data
  .quad 5
  .quad 4
.LABEL__string_261__data: .string "loop"

  .align 8
.LABEL__string_262:
  .quad .LABEL__string_262__data
  .quad 2
  .quad 1
.LABEL__string_262__data: .string "{"

  .align 8
.LABEL__string_263:
  .quad .LABEL__string_263__data
  .quad 2
  .quad 1
.LABEL__string_263__data: .string "("

  .align 8
.LABEL__string_264:
  .quad .LABEL__string_264__data
  .quad 2
  .quad 1
.LABEL__string_264__data: .string "+"

  .align 8
.LABEL__string_265:
  .quad .LABEL__string_265__data
  .quad 2
  .quad 1
.LABEL__string_265__data: .string "/"

  .align 8
.LABEL__string_266:
  .quad .LABEL__string_266__data
  .quad 7
  .quad 6
.LABEL__string_266__data: .string "struct"

  .align 8
.LABEL__string_267:
  .quad .LABEL__string_267__data
  .quad 2
  .quad 1
.LABEL__string_267__data: .string "|"

  .align 8
.LABEL__string_268:
  .quad .LABEL__string_268__data
  .quad 6
  .quad 5
.LABEL__string_268__data: .string "while"

  .align 8
.LABEL__string_269:
  .quad .LABEL__string_269__data
  .quad 3
  .quad 2
.LABEL__string_269__data: .string "./"

  .align 8
.LABEL__string_270:
  .quad .LABEL__string_270__data
  .quad 24
  .quad 23
.LABEL__string_270__data: .string "Unsupported file path: "

  .align 8
.LABEL__string_271:
  .quad .LABEL__string_271__data
  .quad 39
  .quad 38
.LABEL__string_271__data: .string "Cannot use expression as variable name"

  .align 8
.LABEL__string_272:
  .quad .LABEL__string_272__data
  .quad 37
  .quad 36
.LABEL__string_272__data: .string "Cannot use expression as struct name"

  .align 8
.LABEL__string_273:
  .quad .LABEL__string_273__data
  .quad 39
  .quad 38
.LABEL__string_273__data: .string "Cannot use expression as function name"

  .align 8
.LABEL__string_274:
  .quad .LABEL__string_274__data
  .quad 14
  .quad 13
.LABEL__string_274__data: .string ": Unexpected "

  .align 8
.LABEL__string_275:
  .quad .LABEL__string_275__data
  .quad 12
  .quad 11
.LABEL__string_275__data: .string ": Consumed "

  .align 8
.LABEL__string_276:
  .quad .LABEL__string_276__data
  .quad 15
  .quad 14
.LABEL__string_276__data: .string " spaces where "

  .align 8
.LABEL__string_277:
  .quad .LABEL__string_277__data
  .quad 14
  .quad 13
.LABEL__string_277__data: .string " are expected"

  .align 8
.LABEL__string_278:
  .quad .LABEL__string_278__data
  .quad 26
  .quad 25
.LABEL__string_278__data: .string "Unsupported token matcher"

  .align 8
.LABEL__string_279:
  .quad .LABEL__string_279__data
  .quad 2
  .quad 1
.LABEL__string_279__data: .string " "

  .align 8
.LABEL__string_280:
  .quad .LABEL__string_280__data
  .quad 5
  .quad 4
.LABEL__string_280__data: .string "if ("

  .align 8
.LABEL__string_281:
  .quad .LABEL__string_281__data
  .quad 3
  .quad 2
.LABEL__string_281__data: .string ") "

  .align 8
.LABEL__string_282:
  .quad .LABEL__string_282__data
  .quad 7
  .quad 6
.LABEL__string_282__data: .string " else "

  .align 8
.LABEL__string_283:
  .quad .LABEL__string_283__data
  .quad 6
  .quad 5
.LABEL__string_283__data: .string "loop "

  .align 8
.LABEL__string_284:
  .quad .LABEL__string_284__data
  .quad 11
  .quad 10
.LABEL__string_284__data: .string " :: struct"

  .align 8
.LABEL__string_285:
  .quad .LABEL__string_285__data
  .quad 4
  .quad 3
.LABEL__string_285__data: .string " : "

  .align 8
.LABEL__string_286:
  .quad .LABEL__string_286__data
  .quad 12
  .quad 11
.LABEL__string_286__data: .string " = external"

  .align 8
.LABEL__string_287:
  .quad .LABEL__string_287__data
  .quad 5
  .quad 4
.LABEL__string_287__data: .string " := "

  .align 8
.LABEL__string_288:
  .quad .LABEL__string_288__data
  .quad 8
  .quad 7
.LABEL__string_288__data: .string "while ("

  .align 8
.LABEL__string_289:
  .quad .LABEL__string_289__data
  .quad 33
  .quad 32
.LABEL__string_289__data: .string "Unsupported AST_Statement type: "

  .align 8
.LABEL__string_290:
  .quad .LABEL__string_290__data
  .quad 3
  .quad 2
.LABEL__string_290__data: .string "; "

  .align 8
.LABEL__string_291:
  .quad .LABEL__string_291__data
  .quad 28
  .quad 27
.LABEL__string_291__data: .string "Unsupported AST_Type type: "

  .align 8
.LABEL__string_292:
  .quad .LABEL__string_292__data
  .quad 5
  .quad 4
.LABEL__string_292__data: .string " && "

  .align 8
.LABEL__string_293:
  .quad .LABEL__string_293__data
  .quad 5
  .quad 4
.LABEL__string_293__data: .string " || "

  .align 8
.LABEL__string_294:
  .quad .LABEL__string_294__data
  .quad 5
  .quad 4
.LABEL__string_294__data: .string " as "

  .align 8
.LABEL__string_295:
  .quad .LABEL__string_295__data
  .quad 5
  .quad 4
.LABEL__string_295__data: .string "new "

  .align 8
.LABEL__string_296:
  .quad .LABEL__string_296__data
  .quad 34
  .quad 33
.LABEL__string_296__data: .string "Unsupported AST_Expression type: "

  .align 8
.LABEL__string_297:
  .quad .LABEL__string_297__data
  .quad 6
  .quad 5
.LABEL__string_297__data: .string "false"

  .align 8
.LABEL__string_298:
  .quad .LABEL__string_298__data
  .quad 5
  .quad 4
.LABEL__string_298__data: .string "null"

  .align 8
.LABEL__string_299:
  .quad .LABEL__string_299__data
  .quad 5
  .quad 4
.LABEL__string_299__data: .string "true"

  .align 8
.LABEL__string_300:
  .quad .LABEL__string_300__data
  .quad 7
  .quad 6
.LABEL__string_300__data: .string "[2;37m"

  .align 8
.LABEL__string_301:
  .quad .LABEL__string_301__data
  .quad 4
  .quad 3
.LABEL__string_301__data: .string "[0m"

  .align 8
.LABEL__string_302:
  .quad .LABEL__string_302__data
  .quad 7
  .quad 6
.LABEL__string_302__data: .string "[1;33m"

  .align 8
.LABEL__string_303:
  .quad .LABEL__string_303__data
  .quad 7
  .quad 6
.LABEL__string_303__data: .string "[2;33m"

  .align 8
.LABEL__string_304:
  .quad .LABEL__string_304__data
  .quad 2
  .quad 1
.LABEL__string_304__data: .string "r"

  .align 8
.LABEL__string_305:
  .quad .LABEL__string_305__data
  .quad 22
  .quad 21
.LABEL__string_305__data: .string "Failed to open file: "

  .align 8
.LABEL__string_306:
  .quad .LABEL__string_306__data
  .quad 21
  .quad 20
.LABEL__string_306__data: .string "Failed to write text"

  .align 8
.LABEL__string_307:
  .quad .LABEL__string_307__data
  .quad 28
  .quad 27
.LABEL__string_307__data: .string "Failed to write character: "

  .section .rodata

  .align 8
MC_Register:
  .quad 0
  .quad .LABEL__MC_Register__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__MC_Register__type_name__data: .string "MC_Register"

  .align 8
Object:
  .quad 0
  .quad .LABEL__Object__type_name__data
  .quad 7
  .quad 6
  .quad 0
.LABEL__Object__type_name__data: .string "Object"

  .align 8
IR_Instruction:
  .quad 0
  .quad .LABEL__IR_Instruction__type_name__data
  .quad 15
  .quad 14
  .quad Object
.LABEL__IR_Instruction__type_name__data: .string "IR_Instruction"

  .align 8
IR_Variable_Value:
  .quad 0
  .quad .LABEL__IR_Variable_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Variable_Value__type_name__data: .string "IR_Variable_Value"

  .align 8
IR_Value:
  .quad 0
  .quad .LABEL__IR_Value__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__IR_Value__type_name__data: .string "IR_Value"

  .align 8
IR_Type:
  .quad 0
  .quad .LABEL__IR_Type__type_name__data
  .quad 8
  .quad 7
  .quad Object
.LABEL__IR_Type__type_name__data: .string "IR_Type"

  .align 8
IR_Variable:
  .quad 0
  .quad .LABEL__IR_Variable__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__IR_Variable__type_name__data: .string "IR_Variable"

  .align 8
IR_Block:
  .quad 0
  .quad .LABEL__IR_Block__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__IR_Block__type_name__data: .string "IR_Block"

  .align 8
IR_Function:
  .quad 0
  .quad .LABEL__IR_Function__type_name__data
  .quad 12
  .quad 11
  .quad Object
.LABEL__IR_Function__type_name__data: .string "IR_Function"

  .align 8
MC_Address:
  .quad 0
  .quad .LABEL__MC_Address__type_name__data
  .quad 11
  .quad 10
  .quad Object
.LABEL__MC_Address__type_name__data: .string "MC_Address"

  .align 8
MC_Register_RAX:
  .quad 0
  .quad .LABEL__MC_Register_RAX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RAX__type_name__data: .string "MC_Register_RAX"

  .align 8
MC_Register_RCX:
  .quad 0
  .quad .LABEL__MC_Register_RCX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RCX__type_name__data: .string "MC_Register_RCX"

  .align 8
MC_Register_RDX:
  .quad 0
  .quad .LABEL__MC_Register_RDX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RDX__type_name__data: .string "MC_Register_RDX"

  .align 8
MC_Register_RBX:
  .quad 0
  .quad .LABEL__MC_Register_RBX__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RBX__type_name__data: .string "MC_Register_RBX"

  .align 8
MC_Register_RSI:
  .quad 0
  .quad .LABEL__MC_Register_RSI__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RSI__type_name__data: .string "MC_Register_RSI"

  .align 8
MC_Register_RDI:
  .quad 0
  .quad .LABEL__MC_Register_RDI__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_RDI__type_name__data: .string "MC_Register_RDI"

  .align 8
MC_Register_R8:
  .quad 0
  .quad .LABEL__MC_Register_R8__type_name__data
  .quad 15
  .quad 14
  .quad MC_Register
.LABEL__MC_Register_R8__type_name__data: .string "MC_Register_R8"

  .align 8
MC_Register_R9:
  .quad 0
  .quad .LABEL__MC_Register_R9__type_name__data
  .quad 15
  .quad 14
  .quad MC_Register
.LABEL__MC_Register_R9__type_name__data: .string "MC_Register_R9"

  .align 8
MC_Register_R10:
  .quad 0
  .quad .LABEL__MC_Register_R10__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R10__type_name__data: .string "MC_Register_R10"

  .align 8
MC_Register_R11:
  .quad 0
  .quad .LABEL__MC_Register_R11__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R11__type_name__data: .string "MC_Register_R11"

  .align 8
MC_Register_R12:
  .quad 0
  .quad .LABEL__MC_Register_R12__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R12__type_name__data: .string "MC_Register_R12"

  .align 8
MC_Register_R13:
  .quad 0
  .quad .LABEL__MC_Register_R13__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R13__type_name__data: .string "MC_Register_R13"

  .align 8
MC_Register_R14:
  .quad 0
  .quad .LABEL__MC_Register_R14__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R14__type_name__data: .string "MC_Register_R14"

  .align 8
MC_Register_R15:
  .quad 0
  .quad .LABEL__MC_Register_R15__type_name__data
  .quad 16
  .quad 15
  .quad MC_Register
.LABEL__MC_Register_R15__type_name__data: .string "MC_Register_R15"

  .align 8
MC_Global_Variable_Address:
  .quad 0
  .quad .LABEL__MC_Global_Variable_Address__type_name__data
  .quad 27
  .quad 26
  .quad MC_Address
.LABEL__MC_Global_Variable_Address__type_name__data: .string "MC_Global_Variable_Address"

  .align 8
MC_Local_Variable_Address:
  .quad 0
  .quad .LABEL__MC_Local_Variable_Address__type_name__data
  .quad 26
  .quad 25
  .quad MC_Address
.LABEL__MC_Local_Variable_Address__type_name__data: .string "MC_Local_Variable_Address"

  .align 8
String_Token:
  .quad 0
  .quad .LABEL__String_Token__type_name__data
  .quad 13
  .quad 12
  .quad Literal_Token
.LABEL__String_Token__type_name__data: .string "String_Token"

  .align 8
Literal_Token:
  .quad 0
  .quad .LABEL__Literal_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Literal_Token__type_name__data: .string "Literal_Token"

  .align 8
Token:
  .quad 0
  .quad .LABEL__Token__type_name__data
  .quad 6
  .quad 5
  .quad Object
.LABEL__Token__type_name__data: .string "Token"

  .align 8
IR_Any_Type:
  .quad 0
  .quad .LABEL__IR_Any_Type__type_name__data
  .quad 12
  .quad 11
  .quad IR_Type
.LABEL__IR_Any_Type__type_name__data: .string "IR_Any_Type"

  .align 8
IR_Boolean_Type:
  .quad 0
  .quad .LABEL__IR_Boolean_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Boolean_Type__type_name__data: .string "IR_Boolean_Type"

  .align 8
IR_Int_Type:
  .quad 0
  .quad .LABEL__IR_Int_Type__type_name__data
  .quad 12
  .quad 11
  .quad IR_Type
.LABEL__IR_Int_Type__type_name__data: .string "IR_Int_Type"

  .align 8
IR_Int8_Type:
  .quad 0
  .quad .LABEL__IR_Int8_Type__type_name__data
  .quad 13
  .quad 12
  .quad IR_Type
.LABEL__IR_Int8_Type__type_name__data: .string "IR_Int8_Type"

  .align 8
IR_Int16_Type:
  .quad 0
  .quad .LABEL__IR_Int16_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int16_Type__type_name__data: .string "IR_Int16_Type"

  .align 8
IR_Int32_Type:
  .quad 0
  .quad .LABEL__IR_Int32_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int32_Type__type_name__data: .string "IR_Int32_Type"

  .align 8
IR_Int64_Type:
  .quad 0
  .quad .LABEL__IR_Int64_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Type
.LABEL__IR_Int64_Type__type_name__data: .string "IR_Int64_Type"

  .align 8
IR_Nothing_Type:
  .quad 0
  .quad .LABEL__IR_Nothing_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Nothing_Type__type_name__data: .string "IR_Nothing_Type"

  .align 8
IR_Null_Type:
  .quad 0
  .quad .LABEL__IR_Null_Type__type_name__data
  .quad 13
  .quad 12
  .quad IR_Type
.LABEL__IR_Null_Type__type_name__data: .string "IR_Null_Type"

  .align 8
IR_Pointer_Type:
  .quad 0
  .quad .LABEL__IR_Pointer_Type__type_name__data
  .quad 16
  .quad 15
  .quad IR_Type
.LABEL__IR_Pointer_Type__type_name__data: .string "IR_Pointer_Type"

  .align 8
IR_Array_Type:
  .quad 0
  .quad .LABEL__IR_Array_Type__type_name__data
  .quad 14
  .quad 13
  .quad IR_Pointer_Type
.LABEL__IR_Array_Type__type_name__data: .string "IR_Array_Type"

  .align 8
AST_Expression:
  .quad 0
  .quad .LABEL__AST_Expression__type_name__data
  .quad 15
  .quad 14
  .quad Object
.LABEL__AST_Expression__type_name__data: .string "AST_Expression"

  .align 8
IR_Struct_Type:
  .quad 0
  .quad .LABEL__IR_Struct_Type__type_name__data
  .quad 15
  .quad 14
  .quad IR_Type
.LABEL__IR_Struct_Type__type_name__data: .string "IR_Struct_Type"

  .align 8
AST_Struct_Statement:
  .quad 0
  .quad .LABEL__AST_Struct_Statement__type_name__data
  .quad 21
  .quad 20
  .quad AST_Statement
.LABEL__AST_Struct_Statement__type_name__data: .string "AST_Struct_Statement"

  .align 8
AST_Statement:
  .quad 0
  .quad .LABEL__AST_Statement__type_name__data
  .quad 14
  .quad 13
  .quad Object
.LABEL__AST_Statement__type_name__data: .string "AST_Statement"

  .align 8
Identifier_Token:
  .quad 0
  .quad .LABEL__Identifier_Token__type_name__data
  .quad 17
  .quad 16
  .quad Token
.LABEL__Identifier_Token__type_name__data: .string "Identifier_Token"

  .align 8
AST_Type:
  .quad 0
  .quad .LABEL__AST_Type__type_name__data
  .quad 9
  .quad 8
  .quad Object
.LABEL__AST_Type__type_name__data: .string "AST_Type"

  .align 8
IR_Struct_Type_Member:
  .quad 0
  .quad .LABEL__IR_Struct_Type_Member__type_name__data
  .quad 22
  .quad 21
  .quad Object
.LABEL__IR_Struct_Type_Member__type_name__data: .string "IR_Struct_Type_Member"

  .align 8
IR_Undefined_Value:
  .quad 0
  .quad .LABEL__IR_Undefined_Value__type_name__data
  .quad 19
  .quad 18
  .quad IR_Value
.LABEL__IR_Undefined_Value__type_name__data: .string "IR_Undefined_Value"

  .align 8
IR_Constant_Value:
  .quad 0
  .quad .LABEL__IR_Constant_Value__type_name__data
  .quad 18
  .quad 17
  .quad IR_Value
.LABEL__IR_Constant_Value__type_name__data: .string "IR_Constant_Value"

  .align 8
IR_Global_Variable:
  .quad 0
  .quad .LABEL__IR_Global_Variable__type_name__data
  .quad 19
  .quad 18
  .quad IR_Variable
.LABEL__IR_Global_Variable__type_name__data: .string "IR_Global_Variable"

  .align 8
IR_Function_Parameter:
  .quad 0
  .quad .LABEL__IR_Function_Parameter__type_name__data
  .quad 22
  .quad 21
  .quad IR_Variable
.LABEL__IR_Function_Parameter__type_name__data: .string "IR_Function_Parameter"

  .align 8
IR_Call_Instruction:
  .quad 0
  .quad .LABEL__IR_Call_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Call_Instruction__type_name__data: .string "IR_Call_Instruction"

  .align 8
IR_Cast_Instruction:
  .quad 0
  .quad .LABEL__IR_Cast_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Cast_Instruction__type_name__data: .string "IR_Cast_Instruction"

  .align 8
IR_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Jump_Instruction__type_name__data
  .quad 20
  .quad 19
  .quad IR_Instruction
.LABEL__IR_Jump_Instruction__type_name__data: .string "IR_Jump_Instruction"

  .align 8
IR_Conditional_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Conditional_Jump_Instruction__type_name__data
  .quad 32
  .quad 31
  .quad IR_Jump_Instruction
.LABEL__IR_Conditional_Jump_Instruction__type_name__data: .string "IR_Conditional_Jump_Instruction"

  .align 8
IR_Direct_Jump_Instruction:
  .quad 0
  .quad .LABEL__IR_Direct_Jump_Instruction__type_name__data
  .quad 27
  .quad 26
  .quad IR_Jump_Instruction
.LABEL__IR_Direct_Jump_Instruction__type_name__data: .string "IR_Direct_Jump_Instruction"

  .align 8
IR_Load_Array_Item_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Array_Item_Instruction__type_name__data
  .quad 31
  .quad 30
  .quad IR_Instruction
.LABEL__IR_Load_Array_Item_Instruction__type_name__data: .string "IR_Load_Array_Item_Instruction"

  .align 8
IR_Load_Struct_Member_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Struct_Member_Instruction__type_name__data
  .quad 34
  .quad 33
  .quad IR_Instruction
.LABEL__IR_Load_Struct_Member_Instruction__type_name__data: .string "IR_Load_Struct_Member_Instruction"

  .align 8
IR_Load_Variable_Instruction:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Instruction__type_name__data
  .quad 29
  .quad 28
  .quad IR_Instruction
.LABEL__IR_Load_Variable_Instruction__type_name__data: .string "IR_Load_Variable_Instruction"

  .align 8
IR_New_Instruction:
  .quad 0
  .quad .LABEL__IR_New_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_New_Instruction__type_name__data: .string "IR_New_Instruction"

  .align 8
IR_Return_Instruction:
  .quad 0
  .quad .LABEL__IR_Return_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Instruction
.LABEL__IR_Return_Instruction__type_name__data: .string "IR_Return_Instruction"

  .align 8
IR_Set_Instruction:
  .quad 0
  .quad .LABEL__IR_Set_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_Set_Instruction__type_name__data: .string "IR_Set_Instruction"

  .align 8
IR_Store_Array_Item_Instruction:
  .quad 0
  .quad .LABEL__IR_Store_Array_Item_Instruction__type_name__data
  .quad 32
  .quad 31
  .quad IR_Instruction
.LABEL__IR_Store_Array_Item_Instruction__type_name__data: .string "IR_Store_Array_Item_Instruction"

  .align 8
IR_Store_Struct_Member_Instruction:
  .quad 0
  .quad .LABEL__IR_Store_Struct_Member_Instruction__type_name__data
  .quad 35
  .quad 34
  .quad IR_Instruction
.LABEL__IR_Store_Struct_Member_Instruction__type_name__data: .string "IR_Store_Struct_Member_Instruction"

  .align 8
IR_Binary_Instruction:
  .quad 0
  .quad .LABEL__IR_Binary_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Instruction
.LABEL__IR_Binary_Instruction__type_name__data: .string "IR_Binary_Instruction"

  .align 8
IR_Add_Instruction:
  .quad 0
  .quad .LABEL__IR_Add_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Binary_Instruction
.LABEL__IR_Add_Instruction__type_name__data: .string "IR_Add_Instruction"

  .align 8
IR_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Comparison_Instruction__type_name__data
  .quad 26
  .quad 25
  .quad IR_Binary_Instruction
.LABEL__IR_Comparison_Instruction__type_name__data: .string "IR_Comparison_Instruction"

  .align 8
IR_Divide_Instruction:
  .quad 0
  .quad .LABEL__IR_Divide_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Binary_Instruction
.LABEL__IR_Divide_Instruction__type_name__data: .string "IR_Divide_Instruction"

  .align 8
IR_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Equals_Comparison_Instruction__type_name__data
  .quad 33
  .quad 32
  .quad IR_Comparison_Instruction
.LABEL__IR_Equals_Comparison_Instruction__type_name__data: .string "IR_Equals_Comparison_Instruction"

  .align 8
IR_Greater_Than_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Greater_Than_Comparison_Instruction__type_name__data
  .quad 39
  .quad 38
  .quad IR_Comparison_Instruction
.LABEL__IR_Greater_Than_Comparison_Instruction__type_name__data: .string "IR_Greater_Than_Comparison_Instruction"

  .align 8
IR_Greater_Than_Or_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Greater_Than_Or_Equals_Comparison_Instruction__type_name__data
  .quad 49
  .quad 48
  .quad IR_Comparison_Instruction
.LABEL__IR_Greater_Than_Or_Equals_Comparison_Instruction__type_name__data: .string "IR_Greater_Than_Or_Equals_Comparison_Instruction"

  .align 8
IR_Less_Than_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Less_Than_Comparison_Instruction__type_name__data
  .quad 36
  .quad 35
  .quad IR_Comparison_Instruction
.LABEL__IR_Less_Than_Comparison_Instruction__type_name__data: .string "IR_Less_Than_Comparison_Instruction"

  .align 8
IR_Less_Than_Or_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Less_Than_Or_Equals_Comparison_Instruction__type_name__data
  .quad 46
  .quad 45
  .quad IR_Comparison_Instruction
.LABEL__IR_Less_Than_Or_Equals_Comparison_Instruction__type_name__data: .string "IR_Less_Than_Or_Equals_Comparison_Instruction"

  .align 8
IR_Modulo_Instruction:
  .quad 0
  .quad .LABEL__IR_Modulo_Instruction__type_name__data
  .quad 22
  .quad 21
  .quad IR_Binary_Instruction
.LABEL__IR_Modulo_Instruction__type_name__data: .string "IR_Modulo_Instruction"

  .align 8
IR_Multiply_Instruction:
  .quad 0
  .quad .LABEL__IR_Multiply_Instruction__type_name__data
  .quad 24
  .quad 23
  .quad IR_Binary_Instruction
.LABEL__IR_Multiply_Instruction__type_name__data: .string "IR_Multiply_Instruction"

  .align 8
IR_Not_Equals_Comparison_Instruction:
  .quad 0
  .quad .LABEL__IR_Not_Equals_Comparison_Instruction__type_name__data
  .quad 37
  .quad 36
  .quad IR_Comparison_Instruction
.LABEL__IR_Not_Equals_Comparison_Instruction__type_name__data: .string "IR_Not_Equals_Comparison_Instruction"

  .align 8
IR_Substract_Instruction:
  .quad 0
  .quad .LABEL__IR_Substract_Instruction__type_name__data
  .quad 25
  .quad 24
  .quad IR_Binary_Instruction
.LABEL__IR_Substract_Instruction__type_name__data: .string "IR_Substract_Instruction"

  .align 8
IR_Phi_Instruction:
  .quad 0
  .quad .LABEL__IR_Phi_Instruction__type_name__data
  .quad 19
  .quad 18
  .quad IR_Instruction
.LABEL__IR_Phi_Instruction__type_name__data: .string "IR_Phi_Instruction"

  .align 8
Matcher:
  .quad 0
  .quad .LABEL__Matcher__type_name__data
  .quad 8
  .quad 7
  .quad Object
.LABEL__Matcher__type_name__data: .string "Matcher"

  .align 8
Comment_Matcher:
  .quad 0
  .quad .LABEL__Comment_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Comment_Matcher__type_name__data: .string "Comment_Matcher"

  .align 8
End_Of_File_Matcher:
  .quad 0
  .quad .LABEL__End_Of_File_Matcher__type_name__data
  .quad 20
  .quad 19
  .quad Matcher
.LABEL__End_Of_File_Matcher__type_name__data: .string "End_Of_File_Matcher"

  .align 8
End_Of_Line_Matcher:
  .quad 0
  .quad .LABEL__End_Of_Line_Matcher__type_name__data
  .quad 20
  .quad 19
  .quad Matcher
.LABEL__End_Of_Line_Matcher__type_name__data: .string "End_Of_Line_Matcher"

  .align 8
Identifier_Matcher:
  .quad 0
  .quad .LABEL__Identifier_Matcher__type_name__data
  .quad 19
  .quad 18
  .quad Matcher
.LABEL__Identifier_Matcher__type_name__data: .string "Identifier_Matcher"

  .align 8
Keyword_Matcher:
  .quad 0
  .quad .LABEL__Keyword_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Keyword_Matcher__type_name__data: .string "Keyword_Matcher"

  .align 8
Literal_Matcher:
  .quad 0
  .quad .LABEL__Literal_Matcher__type_name__data
  .quad 16
  .quad 15
  .quad Matcher
.LABEL__Literal_Matcher__type_name__data: .string "Literal_Matcher"

  .align 8
String_Literal_Matcher:
  .quad 0
  .quad .LABEL__String_Literal_Matcher__type_name__data
  .quad 23
  .quad 22
  .quad Matcher
.LABEL__String_Literal_Matcher__type_name__data: .string "String_Literal_Matcher"

  .align 8
Other_Matcher:
  .quad 0
  .quad .LABEL__Other_Matcher__type_name__data
  .quad 14
  .quad 13
  .quad Matcher
.LABEL__Other_Matcher__type_name__data: .string "Other_Matcher"

  .align 8
Space_Matcher:
  .quad 0
  .quad .LABEL__Space_Matcher__type_name__data
  .quad 14
  .quad 13
  .quad Matcher
.LABEL__Space_Matcher__type_name__data: .string "Space_Matcher"

  .align 8
AST_Include_Statement:
  .quad 0
  .quad .LABEL__AST_Include_Statement__type_name__data
  .quad 22
  .quad 21
  .quad AST_Statement
.LABEL__AST_Include_Statement__type_name__data: .string "AST_Include_Statement"

  .align 8
AST_Function_Statement:
  .quad 0
  .quad .LABEL__AST_Function_Statement__type_name__data
  .quad 23
  .quad 22
  .quad AST_Statement
.LABEL__AST_Function_Statement__type_name__data: .string "AST_Function_Statement"

  .align 8
AST_Block_Statement:
  .quad 0
  .quad .LABEL__AST_Block_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_Block_Statement__type_name__data: .string "AST_Block_Statement"

  .align 8
AST_Expression_Statement:
  .quad 0
  .quad .LABEL__AST_Expression_Statement__type_name__data
  .quad 25
  .quad 24
  .quad AST_Statement
.LABEL__AST_Expression_Statement__type_name__data: .string "AST_Expression_Statement"

  .align 8
AST_If_Statement:
  .quad 0
  .quad .LABEL__AST_If_Statement__type_name__data
  .quad 17
  .quad 16
  .quad AST_Statement
.LABEL__AST_If_Statement__type_name__data: .string "AST_If_Statement"

  .align 8
AST_Loop_Statement:
  .quad 0
  .quad .LABEL__AST_Loop_Statement__type_name__data
  .quad 19
  .quad 18
  .quad AST_Statement
.LABEL__AST_Loop_Statement__type_name__data: .string "AST_Loop_Statement"

  .align 8
AST_While_Statement:
  .quad 0
  .quad .LABEL__AST_While_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_While_Statement__type_name__data: .string "AST_While_Statement"

  .align 8
AST_Break_Statement:
  .quad 0
  .quad .LABEL__AST_Break_Statement__type_name__data
  .quad 20
  .quad 19
  .quad AST_Statement
.LABEL__AST_Break_Statement__type_name__data: .string "AST_Break_Statement"

  .align 8
AST_Return_Statement:
  .quad 0
  .quad .LABEL__AST_Return_Statement__type_name__data
  .quad 21
  .quad 20
  .quad AST_Statement
.LABEL__AST_Return_Statement__type_name__data: .string "AST_Return_Statement"

  .align 8
AST_Variable_Statement:
  .quad 0
  .quad .LABEL__AST_Variable_Statement__type_name__data
  .quad 23
  .quad 22
  .quad AST_Statement
.LABEL__AST_Variable_Statement__type_name__data: .string "AST_Variable_Statement"

  .align 8
AST_Assignment_Statement:
  .quad 0
  .quad .LABEL__AST_Assignment_Statement__type_name__data
  .quad 25
  .quad 24
  .quad AST_Statement
.LABEL__AST_Assignment_Statement__type_name__data: .string "AST_Assignment_Statement"

  .align 8
Other_Token:
  .quad 0
  .quad .LABEL__Other_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Other_Token__type_name__data: .string "Other_Token"

  .align 8
AST_Named_Type:
  .quad 0
  .quad .LABEL__AST_Named_Type__type_name__data
  .quad 15
  .quad 14
  .quad AST_Type
.LABEL__AST_Named_Type__type_name__data: .string "AST_Named_Type"

  .align 8
AST_Pointer_Type:
  .quad 0
  .quad .LABEL__AST_Pointer_Type__type_name__data
  .quad 17
  .quad 16
  .quad AST_Type
.LABEL__AST_Pointer_Type__type_name__data: .string "AST_Pointer_Type"

  .align 8
AST_Array_Type:
  .quad 0
  .quad .LABEL__AST_Array_Type__type_name__data
  .quad 15
  .quad 14
  .quad AST_Type
.LABEL__AST_Array_Type__type_name__data: .string "AST_Array_Type"

  .align 8
AST_Literal_Expression:
  .quad 0
  .quad .LABEL__AST_Literal_Expression__type_name__data
  .quad 23
  .quad 22
  .quad AST_Expression
.LABEL__AST_Literal_Expression__type_name__data: .string "AST_Literal_Expression"

  .align 8
AST_Variable_Expression:
  .quad 0
  .quad .LABEL__AST_Variable_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Expression
.LABEL__AST_Variable_Expression__type_name__data: .string "AST_Variable_Expression"

  .align 8
AST_Binary_Expression:
  .quad 0
  .quad .LABEL__AST_Binary_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Binary_Expression__type_name__data: .string "AST_Binary_Expression"

  .align 8
AST_Add_Expression:
  .quad 0
  .quad .LABEL__AST_Add_Expression__type_name__data
  .quad 19
  .quad 18
  .quad AST_Binary_Expression
.LABEL__AST_Add_Expression__type_name__data: .string "AST_Add_Expression"

  .align 8
AST_Divide_Expression:
  .quad 0
  .quad .LABEL__AST_Divide_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Divide_Expression__type_name__data: .string "AST_Divide_Expression"

  .align 8
AST_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Equals_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Equals_Expression__type_name__data: .string "AST_Equals_Expression"

  .align 8
AST_Greater_Than_Expression:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Expression__type_name__data
  .quad 28
  .quad 27
  .quad AST_Binary_Expression
.LABEL__AST_Greater_Than_Expression__type_name__data: .string "AST_Greater_Than_Expression"

  .align 8
AST_Greater_Than_Or_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__type_name__data
  .quad 38
  .quad 37
  .quad AST_Binary_Expression
.LABEL__AST_Greater_Than_Or_Equals_Expression__type_name__data: .string "AST_Greater_Than_Or_Equals_Expression"

  .align 8
AST_Less_Than_Expression:
  .quad 0
  .quad .LABEL__AST_Less_Than_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Less_Than_Expression__type_name__data: .string "AST_Less_Than_Expression"

  .align 8
AST_Less_Than_Or_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__type_name__data
  .quad 35
  .quad 34
  .quad AST_Binary_Expression
.LABEL__AST_Less_Than_Or_Equals_Expression__type_name__data: .string "AST_Less_Than_Or_Equals_Expression"

  .align 8
AST_Logic_And_Expression:
  .quad 0
  .quad .LABEL__AST_Logic_And_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Logic_And_Expression__type_name__data: .string "AST_Logic_And_Expression"

  .align 8
AST_Logic_Or_Expression:
  .quad 0
  .quad .LABEL__AST_Logic_Or_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Binary_Expression
.LABEL__AST_Logic_Or_Expression__type_name__data: .string "AST_Logic_Or_Expression"

  .align 8
AST_Modulo_Expression:
  .quad 0
  .quad .LABEL__AST_Modulo_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Binary_Expression
.LABEL__AST_Modulo_Expression__type_name__data: .string "AST_Modulo_Expression"

  .align 8
AST_Multiply_Expression:
  .quad 0
  .quad .LABEL__AST_Multiply_Expression__type_name__data
  .quad 24
  .quad 23
  .quad AST_Binary_Expression
.LABEL__AST_Multiply_Expression__type_name__data: .string "AST_Multiply_Expression"

  .align 8
AST_Not_Equals_Expression:
  .quad 0
  .quad .LABEL__AST_Not_Equals_Expression__type_name__data
  .quad 26
  .quad 25
  .quad AST_Binary_Expression
.LABEL__AST_Not_Equals_Expression__type_name__data: .string "AST_Not_Equals_Expression"

  .align 8
AST_Substract_Expression:
  .quad 0
  .quad .LABEL__AST_Substract_Expression__type_name__data
  .quad 25
  .quad 24
  .quad AST_Binary_Expression
.LABEL__AST_Substract_Expression__type_name__data: .string "AST_Substract_Expression"

  .align 8
AST_Cast_Expression:
  .quad 0
  .quad .LABEL__AST_Cast_Expression__type_name__data
  .quad 20
  .quad 19
  .quad AST_Expression
.LABEL__AST_Cast_Expression__type_name__data: .string "AST_Cast_Expression"

  .align 8
AST_New_Expression:
  .quad 0
  .quad .LABEL__AST_New_Expression__type_name__data
  .quad 19
  .quad 18
  .quad AST_Expression
.LABEL__AST_New_Expression__type_name__data: .string "AST_New_Expression"

  .align 8
AST_Call_Expression:
  .quad 0
  .quad .LABEL__AST_Call_Expression__type_name__data
  .quad 20
  .quad 19
  .quad AST_Expression
.LABEL__AST_Call_Expression__type_name__data: .string "AST_Call_Expression"

  .align 8
AST_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Access_Expression__type_name__data
  .quad 22
  .quad 21
  .quad AST_Expression
.LABEL__AST_Access_Expression__type_name__data: .string "AST_Access_Expression"

  .align 8
AST_Member_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Member_Access_Expression__type_name__data
  .quad 29
  .quad 28
  .quad AST_Access_Expression
.LABEL__AST_Member_Access_Expression__type_name__data: .string "AST_Member_Access_Expression"

  .align 8
AST_Array_Access_Expression:
  .quad 0
  .quad .LABEL__AST_Array_Access_Expression__type_name__data
  .quad 28
  .quad 27
  .quad AST_Access_Expression
.LABEL__AST_Array_Access_Expression__type_name__data: .string "AST_Array_Access_Expression"

  .align 8
Character_Token:
  .quad 0
  .quad .LABEL__Character_Token__type_name__data
  .quad 16
  .quad 15
  .quad Literal_Token
.LABEL__Character_Token__type_name__data: .string "Character_Token"

  .align 8
Boolean_Token:
  .quad 0
  .quad .LABEL__Boolean_Token__type_name__data
  .quad 14
  .quad 13
  .quad Literal_Token
.LABEL__Boolean_Token__type_name__data: .string "Boolean_Token"

  .align 8
Comment_Token:
  .quad 0
  .quad .LABEL__Comment_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Comment_Token__type_name__data: .string "Comment_Token"

  .align 8
End_Of_File_Token:
  .quad 0
  .quad .LABEL__End_Of_File_Token__type_name__data
  .quad 18
  .quad 17
  .quad Token
.LABEL__End_Of_File_Token__type_name__data: .string "End_Of_File_Token"

  .align 8
End_Of_Line_Token:
  .quad 0
  .quad .LABEL__End_Of_Line_Token__type_name__data
  .quad 18
  .quad 17
  .quad Token
.LABEL__End_Of_Line_Token__type_name__data: .string "End_Of_Line_Token"

  .align 8
Error_Token:
  .quad 0
  .quad .LABEL__Error_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Error_Token__type_name__data: .string "Error_Token"

  .align 8
Integer_Token:
  .quad 0
  .quad .LABEL__Integer_Token__type_name__data
  .quad 14
  .quad 13
  .quad Literal_Token
.LABEL__Integer_Token__type_name__data: .string "Integer_Token"

  .align 8
Keyword_Token:
  .quad 0
  .quad .LABEL__Keyword_Token__type_name__data
  .quad 14
  .quad 13
  .quad Token
.LABEL__Keyword_Token__type_name__data: .string "Keyword_Token"

  .align 8
Null_Token:
  .quad 0
  .quad .LABEL__Null_Token__type_name__data
  .quad 11
  .quad 10
  .quad Literal_Token
.LABEL__Null_Token__type_name__data: .string "Null_Token"

  .align 8
Space_Token:
  .quad 0
  .quad .LABEL__Space_Token__type_name__data
  .quad 12
  .quad 11
  .quad Token
.LABEL__Space_Token__type_name__data: .string "Space_Token"
