\ Copyright (c) 2020, Stefan Selariu

define String = struct {
    data: @Int8 = malloc(16) as @Int8
    data_size: Int = 16
    length: Int = 0
}

define create_string = func (data: @Int8) -> @String {
    let data_length = 0
    loop {
        let char = data[data_length]
        if (char == '\0') {
            break
        }
        data_length = data_length + 1
    }

    return new String(data = data, data_size = data_length + 1, length = data_length)
}

define clone = func (self: @String) -> @String {
    let clone = new String(data = malloc(self.data_size) as @Int8, data_size = self.data_size)
    clone.append(self)
    return clone
}

define equals = func (self: @String, other: @String) -> Boolean {
    if (self.length == other.length) {
        let index = 0
        while (index < self.length) {
            if (self.data[index] != other.data[index]) {
                return false
            }
            index = index + 1
        }
        return true
    }
    return false
}

define index_of = func (self: @String, other: @String) -> Int {
    let self_index = 0
    while (self_index <= self.length - other.length) {
        let other_index = 0
        while (other_index < other.length && self.data[self_index + other_index] == other.data[other_index]) {
            other_index = other_index + 1
        }
        if (other_index == other.length) {
            return self_index
        }
        self_index = self_index + 1
    }
    return -1
}

define starts_with = func (self: @String, other: @String) -> Boolean {
    if (self.length < other.length) {
        return false
    }
    let index = 0
    while (index < other.length) {
        if (self.data[index] != other.data[index]) {
            return false
        }
        index = index + 1
    }
    return true
}

define ends_with = func (self: @String, other: @String) -> Boolean {
    if (self.length < other.length) {
        return false
    }
    let index = 0
    while (index < other.length) {
        if (self.data[self.length - other.length + index] != other.data[index]) {
            return false
        }
        index = index + 1
    }
    return true
}

define last_index_of = func (self: @String, char: Int8) -> Int {
    return self.last_index_of(char, self.length - 1)
}

define last_index_of = func (self: @String, char: Int8, from_index: Int) -> Int {
    let index = from_index
    while (index >= 0 && self.data[index] != char) {
        index = index - 1
    }
    return index
}

define append = func (self: @String, char: Int8) -> @String {
    if (self.length + 1 >= self.data_size) {
        self.data_size = self.data_size + 16
        self.data = realloc(self.data, self.data_size) as @Int8
    }
    self.data[self.length] = char
    self.length = self.length + 1
    self.data[self.length] = '\0'
    return self
}

define append = func (self: @String, number: Int) -> @String {
    if (number < 0) {
        return self.append('-').append(-number)
    }
    if (number >= 10) {
        self.append(number / 10)
    }
    return self.append((number // 10 + '0' as Int) as Int8)
}

define append = func (self: @String, other: @String) -> @String {
    if (self.length + other.length >= self.data_size) {
        self.data_size = self.length + other.length + 1
        self.data = realloc(self.data, self.data_size) as @Int8
    }
    let index = 0
    let other_data = other.data
    let self_data = self.data
    let self_length = self.length
    loop {
        let char = other_data[index]
        self_data[self_length] = char
        if (char == '\0') {
            break
        }
        self_length = self_length + 1
        index = index + 1
    }
    self.length = self_length
    return self
}

define remove = func (self: @String, begin_index: Int, end_index: Int) -> @String {
    if (begin_index < 0 || begin_index > end_index || end_index >= self.length) {
        abort("Invalid state")
    }
    let index = 0
    while (index + end_index <= self.length) {
        self.data[begin_index + index] = self.data[end_index + index]
        index = index + 1
    }
    self.length = begin_index + index - 1
    return self
}
