\ Copyright (c) 2020, Stefan Selariu

List :: struct {
    first_item: @List_Item
    last_item: @List_Item
    size: Int
}

create_list :: () -> @List {
    list := new List
    list.first_item = null
    list.last_item = null
    list.size = 0
    return list
}

append :: (self: @List, data: @Any) -> Nothing {
    item := new List_Item
    item.is_removed = false
    item.data = data
    item.prev_item = self.last_item
    item.next_item = null
    if (self.last_item == null) {
        self.first_item = item
    } else {
        self.last_item.next_item = item
    }
    self.last_item = item
    self.size = self.size + 1
}

prepend :: (self: @List, data: @Any) -> Nothing {
    item := new List_Item
    item.is_removed = false
    item.data = data
    item.prev_item = null
    item.next_item = self.first_item
    if (self.first_item == null) {
        self.last_item = item
    } else {
        self.first_item.prev_item = item
    }
    self.first_item = item
    self.size = self.size + 1
}

remove :: (self: @List, data: @Any) -> @List {
    item := self.first_item
    while (item != null) {
        if (item.data == data) {
            item.is_removed = true
            break
        }
        item = item.next_item
    }
    return self
}

remove_all :: (self: @List, data: @Any) -> @List {
    item := self.first_item
    while (item != null) {
        if (item.data == data) {
            item.is_removed = true
        }
        item = item.next_item
    }
    return self
}

prune :: (self: @List) -> @List {
    item := self.first_item
    while (item != null) {
        if (item.is_removed) {
            if (item.prev_item != null) {
                item.prev_item.next_item = item.next_item
            }
            if (item.next_item != null) {
                item.next_item.prev_item = item.prev_item
            }
            if (self.first_item == item) {
                self.first_item = item.next_item
            }
            if (self.last_item == item) {
                self.last_item = item.prev_item
            }
            self.size = self.size - 1
        }
        item = item.next_item
    }
    return self
}

replace :: (self: @List, data: @Any, new_data: @Any) -> Nothing {
    item := self.first_item
    while (item != null) {
        if (item.data == data) {
            item.data = new_data
        }
        item = item.next_item
    }
}

contains :: (self: @List, data: @Any) -> Boolean {
    item := self.first_item
    while (item != null) {
        if (item.data == data) {
            return true
        }
        item = item.next_item
    }
    return false
}

index_of :: (self: @List, data: @Any) -> Int {
    index := 0
    item := self.first_item
    while (item != null) {
        if (item.data == data) {
            return index
        }
        item = item.next_item
        index = index + 1
    }
    return index * 0 - 1
}

get :: (self: @List, index: Int) -> @Any {
    if (index >= self.size || index < 0) {
        return null
    }
    item := self.first_item
    while (index > 0) {
        item = item.next_item
        index = index - 1
    }
    return item.data
}

first :: (self: @List) -> @Any {
    if (self.first_item == null) {
        return null
    }
    return self.first_item.data
}

last :: (self: @List) -> @Any {
    if (self.last_item == null) {
        return null
    }
    return self.last_item.data
}

List_Item :: struct {
    prev_item: @List_Item
    next_item: @List_Item
    data: @Any
    is_removed: Boolean
}

List_Iterator :: struct {
    current_item: @List_Item
    next_item: @List_Item
}

create_iterator :: (list: @List) -> @List_Iterator {
    iterator := new List_Iterator
    iterator.current_item = null
    iterator.next_item = list.first_item
    return iterator
}

current :: (self: @List_Iterator) -> @Any {
    if (self.current_item != null) {
        return self.current_item.data
    }
    return null
}

remove_current :: (self: @List_Iterator) -> Nothing {
    self.current_item.is_removed = true
}

has_next :: (self: @List_Iterator) -> Boolean {
    return self.next_item != null
}

next :: (self: @List_Iterator) -> @Any {
    if (self.next_item == null) {
        return null
    }
    self.current_item = self.next_item
    self.next_item = self.next_item.next_item
    return self.current_item.data
}

change :: (self: @List_Iterator, data: @Any) -> Nothing {
    if (self.current_item != null) {
        self.current_item.data = data
    }
}

