\ Copyright (c) 2020-2021, 2023, Stefan Selariu

struct List[T] {
    first_item: @List_Item[T] = null
    last_item: @List_Item[T] = null
    size = 0i64
}

func append[T](self: @List[T], data: T) -> Nothing {
    let item = make @List_Item[T](data = data, prev_item = self.last_item)
    if (self.last_item == null) {
        self.first_item = item
    } else {
        self.last_item.next_item = item
    }
    self.last_item = item
    self.size = self.size + 1
}

func prepend[T](self: @List[T], data: T) -> Nothing {
    let item = make @List_Item[T](data = data, next_item = self.first_item)
    if (self.first_item == null) {
        self.last_item = item
    } else {
        self.first_item.prev_item = item
    }
    self.first_item = item
    self.size = self.size + 1
}

func remove[T](self: @List[T], data: T) -> @List[T] {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            item.is_removed = true
            break
        }
        item = item.next_item
    }
    return self
}

func remove_all[T](self: @List[T], data: T) -> @List[T] {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            item.is_removed = true
        }
        item = item.next_item
    }
    return self
}

func prune[T](self: @List[T]) -> @List[T] {
    let item = self.first_item
    while (item != null) {
        if (item.is_removed) {
            if (item.prev_item != null) {
                item.prev_item.next_item = item.next_item
            }
            if (item.next_item != null) {
                item.next_item.prev_item = item.prev_item
            }
            if (self.first_item == item) {
                self.first_item = item.next_item
            }
            if (self.last_item == item) {
                self.last_item = item.prev_item
            }
            self.size = self.size - 1
        }
        item = item.next_item
    }
    return self
}

func replace[T](self: @List[T], data: T, new_data: T) -> Nothing {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            item.data = new_data
        }
        item = item.next_item
    }
}

func contains[T](self: @List[T], data: T) -> bool {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            return true
        }
        item = item.next_item
    }
    return false
}

func index_of[T](self: @List[T], data: T) -> i64 {
    let index = 0 as i64
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            return index
        }
        item = item.next_item
        index = index + 1
    }
    return -1 as i64
}

func get[T](self: @List[T], index: i64) -> T {
    if (index >= self.size || index < 0) {
        return null
    }
    let item = self.first_item
    while (index > 0) {
        item = item.next_item
        index = index - 1
    }
    return item.data
}

func first[T](self: @List[T]) -> T {
    if (self.first_item == null) {
        return null
    }
    return self.first_item.data
}

func last[T](self: @List[T]) -> T {
    if (self.last_item == null) {
        return null
    }
    return self.last_item.data
}

struct List_Item[T] {
    prev_item: @List_Item[T] = null
    next_item: @List_Item[T] = null
    data: T
    is_removed = false
}

struct List_Iterator[T] {
    current_item: @List_Item[T]
    next_item: @List_Item[T]
}

func create_iterator[T](list: @List[T]) -> @List_Iterator[T] {
    return make @List_Iterator[T](current_item = null, next_item = list.first_item)
}

func current[T](self: @List_Iterator[T]) -> T {
    if (self.current_item != null) {
        return self.current_item.data
    }
    return null
}

func remove_current[T](self: @List_Iterator[T]) -> Nothing {
    self.current_item.is_removed = true
}

func has_next[T](self: @List_Iterator[T]) -> bool {
    return self.next_item != null
}

func next[T](self: @List_Iterator[T]) -> T {
    if (self.next_item == null) {
        return null
    }
    self.current_item = self.next_item
    self.next_item = self.next_item.next_item
    return self.current_item.data
}

func change[T](self: @List_Iterator[T], data: T) -> Nothing {
    if (self.current_item != null) {
        self.current_item.data = data
    }
}

macro for_each_list_item[T](self: @List[T], block: macro (list_item: @List_Item[T])) {
    let item = self.first_item
    while (item != null) {
        block(item)
        item = item.next_item
    }
}

macro for_each[T](self: @List[T], block: macro (it: T)) {
    let item = self.first_item
    while (item != null) {
        block(item.data)
        item = item.next_item
    }
}
