\ Copyright (c) 2020, Stefan Selariu

define List = struct {
    first_item: @List_Item = null
    last_item: @List_Item = null
    size: Int = 0
}

define append = func (self: @List, data: @Any) -> Nothing {
    let item = new List_Item(data = data, prev_item = self.last_item)
    if (self.last_item == null) {
        self.first_item = item
    } else {
        self.last_item.next_item = item
    }
    self.last_item = item
    self.size = self.size + 1
}

define prepend = func (self: @List, data: @Any) -> Nothing {
    let item = new List_Item(data = data, next_item = self.first_item)
    if (self.first_item == null) {
        self.last_item = item
    } else {
        self.first_item.prev_item = item
    }
    self.first_item = item
    self.size = self.size + 1
}

define remove = func (self: @List, data: @Any) -> @List {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            item.is_removed = true
            break
        }
        item = item.next_item
    }
    return self
}

define remove_all = func (self: @List, data: @Any) -> @List {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            item.is_removed = true
        }
        item = item.next_item
    }
    return self
}

define prune = func (self: @List) -> @List {
    let item = self.first_item
    while (item != null) {
        if (item.is_removed) {
            if (item.prev_item != null) {
                item.prev_item.next_item = item.next_item
            }
            if (item.next_item != null) {
                item.next_item.prev_item = item.prev_item
            }
            if (self.first_item == item) {
                self.first_item = item.next_item
            }
            if (self.last_item == item) {
                self.last_item = item.prev_item
            }
            self.size = self.size - 1
        }
        item = item.next_item
    }
    return self
}

define replace = func (self: @List, data: @Any, new_data: @Any) -> Nothing {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            item.data = new_data
        }
        item = item.next_item
    }
}

define contains = func (self: @List, data: @Any) -> Boolean {
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            return true
        }
        item = item.next_item
    }
    return false
}

define index_of = func (self: @List, data: @Any) -> Int {
    let index = 0
    let item = self.first_item
    while (item != null) {
        if (item.data == data) {
            return index
        }
        item = item.next_item
        index = index + 1
    }
    return -1
}

define get = func (self: @List, index: Int) -> @Any {
    if (index >= self.size || index < 0) {
        return null
    }
    let item = self.first_item
    while (index > 0) {
        item = item.next_item
        index = index - 1
    }
    return item.data
}

define first = func (self: @List) -> @Any {
    if (self.first_item == null) {
        return null
    }
    return self.first_item.data
}

define last = func (self: @List) -> @Any {
    if (self.last_item == null) {
        return null
    }
    return self.last_item.data
}

define List_Item = struct {
    prev_item: @List_Item = null
    next_item: @List_Item = null
    data: @Any
    is_removed: Boolean = false
}

define List_Iterator = struct {
    current_item: @List_Item
    next_item: @List_Item
}

define create_iterator = func (list: @List) -> @List_Iterator {
    return new List_Iterator(current_item = null, next_item = list.first_item)
}

define current = func (self: @List_Iterator) -> @Any {
    if (self.current_item != null) {
        return self.current_item.data
    }
    return null
}

define remove_current = func (self: @List_Iterator) -> Nothing {
    self.current_item.is_removed = true
}

define has_next = func (self: @List_Iterator) -> Boolean {
    return self.next_item != null
}

define next = func (self: @List_Iterator) -> @Any {
    if (self.next_item == null) {
        return null
    }
    self.current_item = self.next_item
    self.next_item = self.next_item.next_item
    return self.current_item.data
}

define change = func (self: @List_Iterator, data: @Any) -> Nothing {
    if (self.current_item != null) {
        self.current_item.data = data
    }
}

