\ Copyright (c) 2020, Stefan Selariu

define Scanner = struct {
    source: Source
    current_char_index: i64 = 0
    current_line: i64 = 1
    current_column: i64 = 1
    current_token: Token = undefined
}

define create_scanner = func (source: Source) -> Scanner {
    let scanner = new Scanner(source = source)
    scanner.current_token = scanner.scan_token()
    return scanner
}

define peek_token = func (self: Scanner, offset: i64) -> Token {
    if (offset < 0) {
        abort("Invalid state")
    }
    let token = self.current_token
    loop {
        if (token.next_token == null) {
            token.next_token = self.scan_token()
        }
        token = token.next_token
        if (offset == 0 as i64) {
            return token
        }
        offset = offset - 1
    }
}

define next_token = func (self: Scanner) -> Token {
    if (self.current_token.next_token == null) {
        self.current_token.next_token = self.scan_token()
    }
    self.current_token = self.current_token.next_token
    return self.current_token
}

define peek_char = func (self: Scanner) -> i8 {
    return self.source.content[self.current_char_index as isize]
}

define next_char = func (self: Scanner) -> i8 {
    let next_char = self.source.content[self.current_char_index as isize]
    if (next_char != '\0') {
        self.current_char_index = self.current_char_index + 1
        if (next_char == '\n') {
            self.current_line = self.current_line + 1
            self.current_column = 1
        } else {
            self.current_column = self.current_column + 1
        }
    }
    return next_char
}

define scan_token = func (self: Scanner) -> Token {
    let token_lexeme = new String()
    let token_location = new Source_Location(source = self.source, line = self.current_line, column = self.current_column)

    let next_char = self.peek_char()
    if (next_char.is_identifier_start()) {
        return self.scan_identifier_token(token_lexeme, token_location)
    }
    if (next_char.is_digit()) {
        return self.scan_integer_token(token_lexeme, token_location)
    }
    if (next_char == '\'') {
        return self.scan_character_token(token_lexeme, token_location)
    }
    if (next_char == '"') {
        return self.scan_string_token(token_lexeme, token_location)
    }
    if (next_char == '\\') {
        return self.scan_comment_token(token_lexeme, token_location)
    }
    if (next_char.is_space()) {
        return self.scan_space_token(token_lexeme, token_location)
    }
    if (next_char == '\n') {
        self.next_char()
        return new End_Of_Line_Token(lexeme = token_lexeme, location = token_location)
    }
    if (next_char == '\0') {
        self.next_char()
        return new End_Of_File_Token(lexeme = token_lexeme, location = token_location)
    }
    token_lexeme.append(self.next_char())
    return new Other_Token(lexeme = token_lexeme, location = token_location)
}

define is_digit = func (char: i8) -> bool {
    return char as isize >= '0' as isize && char as isize <= '9' as isize
}

define is_identifier_start = func (char: i8) -> bool {
    return char.is_letter() || char == '_'
}

define is_identifier_body = func (char: i8) -> bool {
    if (char.is_identifier_start()) {
        return true
    }
    return char.is_digit()
}

define is_letter = func (char: i8) -> bool {
    return (char as isize >= 'a' as isize && char as isize <= 'z' as isize) || (char as isize >= 'A' as isize && char as isize <= 'Z' as isize)
}

define is_space = func (char: i8) -> bool {
    return char == ' '
}

define scan_character_token = func (self: Scanner, token_lexeme: String, token_location: Source_Location) -> Token {
    if (self.peek_char() != '\'') {
        abort("Invalid state")
    }

    let value: i8
    token_lexeme.append(self.next_char())
    let char = self.next_char()
    token_lexeme.append(char)
    if (char == '\'') {
        return new Error_Token(lexeme = token_lexeme, location = token_location)
    }
    if (char == '\\') {
        char = self.next_char()
        token_lexeme.append(char)
        if (char.is_escape() == false) {
            return new Error_Token(lexeme = token_lexeme, location = token_location)
        }
        if (char == 'n') {
            value = '\n'
        } else if (char == '\"') {
            value = char
        } else if (char == '\'') {
            value = char
        } else if (char == '\\') {
            value = char
        } else if (char == 't') {
            value = '\t'
        } else if (char == '0') {
            value = '\0'
        } else {
            abort("Invalid state")
        }
        char = self.next_char()
        token_lexeme.append(char)
        if (char != '\'') {
            return new Error_Token(lexeme = token_lexeme, location = token_location)
        }
    } else {
        if (char == '\0' || char == '\n' || char == '\t') {
            return new Error_Token(lexeme = token_lexeme, location = token_location)
        }
        value = char
        char = self.next_char()
        token_lexeme.append(char)
        if (char != '\'') {
            return new Error_Token(lexeme = token_lexeme, location = token_location)
        }
    }
    return new Character_Token(lexeme = token_lexeme, location = token_location, value = value)
}

define is_escape = func (char: i8) -> bool {
    return char == 'n' || char == 't' || char == '\"' || char == '\'' || char == '\\' || char == '0'
}

define scan_comment_token = func (self: Scanner, token_lexeme: String, token_location: Source_Location) -> Token {
    while (self.peek_char() != '\n') {
        token_lexeme.append(self.next_char())
    }
    return new Comment_Token(lexeme = token_lexeme, location = token_location)
}

define scan_identifier_token = func (self: Scanner, token_lexeme: String, token_location: Source_Location) -> Token {
    while (self.peek_char().is_identifier_body()) {
        token_lexeme.append(self.next_char())
    }
    if (token_lexeme.equals("false")) {
        return new Boolean_Token(lexeme = token_lexeme, location = token_location, value = false)
    }
    if (token_lexeme.equals("null")) {
        return new Null_Token(lexeme = token_lexeme, location = token_location)
    }
    if (token_lexeme.equals("true")) {
        return new Boolean_Token(lexeme = token_lexeme, location = token_location, value = true)
    }
    if (token_lexeme.equals("undefined")) {
        return new Undefined_Token(lexeme = token_lexeme, location = token_location)
    }
    return new Identifier_Token(lexeme = token_lexeme, location = token_location)
}

define scan_integer_token = func (self: Scanner, token_lexeme: String, token_location: Source_Location) -> Token {
    let char = self.next_char()
    token_lexeme.append(char)
    let value = (char - '0') as i64 \ TODO: compute value as u64
    loop {
        char = self.peek_char()
        if (char.is_digit()) {
            value = value * 10 + (char - '0') as i64
        } else if (char != '_') {
            break
        }
        token_lexeme.append(self.next_char())
    }
    if (self.peek_char() == 'i' || self.peek_char() == 'u') {
        let type = new String()
        loop {
            char = self.peek_char()
            if (char.is_digit() == false && char.is_letter() == false) {
                break
            }
            token_lexeme.append(char)
            type.append(char)
            self.next_char()
        }
        if (type.equals("i16") || type.equals("i32") || type.equals("i64") || type.equals("i8") || type.equals("isize") || type.equals("u16") || type.equals("u32") || type.equals("u64") || type.equals("u8") || type.equals("usize")) {
            return new Integer_Token(lexeme = token_lexeme, location = token_location, value = value, type = type)
        }
        return new Error_Token(lexeme = token_lexeme, location = token_location)
    }
    return new Integer_Token(lexeme = token_lexeme, location = token_location, value = value, type = null)
}

define scan_space_token = func (self: Scanner, token_lexeme: String, token_location: Source_Location) -> Token {
    let count = 0 as i64
    while (self.peek_char() == ' ') {
        let char = self.next_char()
        count = count + 1
        token_lexeme.append(char)
    }
    return new Space_Token(lexeme = token_lexeme, location = token_location, count = count)
}

define scan_string_token = func (self: Scanner, token_lexeme: String, token_location: Source_Location) -> Token {
    if (self.peek_char() != '"') {
        abort("Invalid state")
    }

    let value = new String()

    token_lexeme.append(self.next_char())
    loop {
        let char = self.peek_char()
        if (char == '\0' || char == '\n') {
            return new Error_Token(lexeme = token_lexeme, location = token_location)
        }
        char = self.next_char()
        token_lexeme.append(char)
        if (char == '"') {
            return new String_Token(lexeme = token_lexeme, location = token_location, value = value)
        }
        if (char == '\\') {
            char = self.peek_char()
            if (char == '\0' || char == '\n') {
                return new Error_Token(lexeme = token_lexeme, location = token_location)
            }
            char = self.next_char()
            token_lexeme.append(char)
            if (char.is_escape() == false) {
                return new Error_Token(lexeme = token_lexeme, location = token_location)
            }
            if (char == 'n') {
                value.append('\n')
            } else if (char == '\"') {
                value.append(char)
            } else if (char == '\'') {
                value.append(char)
            } else if (char == '\\') {
                value.append(char)
            } else if (char == 't') {
                value.append('\t')
            } else if (char == '0') {
                value.append('\0')
            } else {
                abort("Invalid state")
            }
        } else {
            value.append(char)
        }
    }
}
