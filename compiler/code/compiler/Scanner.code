struct Scanner {
    source: @Source
    current_char_index = 0i64
    current_line = 1i64
    current_column = 1i64
    current_token: @Token = undefined
}

func create_scanner(source: @Source) -> @Scanner {
    let scanner = make @Scanner(source = source)
    scanner.current_token = scanner.scan_token()
    return scanner
}

func peek_token(self: @Scanner, offset: i64) -> @Token {
    if offset < 0 {
        abort("Invalid state")
    }
    let token = self.current_token
    loop {
        if token.next_token == null {
            token.next_token = self.scan_token()
        }
        token = token.next_token
        if offset == 0 {
            return token
        }
        offset = offset - 1
    }
}

func next_token(self: @Scanner) -> @Token {
    if self.current_token.next_token == null {
        self.current_token.next_token = self.scan_token()
    }
    self.current_token = self.current_token.next_token
    return self.current_token
}

func peek_char(self: @Scanner) -> u8 {
    return self.source.content[self.current_char_index]
}

func next_char(self: @Scanner) -> u8 {
    let next_char = self.source.content[self.current_char_index]
    if next_char != '\0' {
        self.current_char_index = self.current_char_index + 1
        if next_char == '\n' {
            self.current_line = self.current_line + 1
            self.current_column = 1
        } else {
            self.current_column = self.current_column + 1
        }
    }
    return next_char
}

func scan_token(self: @Scanner) -> @Token {
    let token_lexeme = make @String()
    let token_location = make @Source_Location(source = self.source, line = self.current_line, column = self.current_column)

    let next_char = self.peek_char()
    if next_char.is_identifier_start() {
        return self.scan_identifier_token(token_lexeme, token_location)
    }
    if next_char.is_digit() {
        return self.scan_integer_token(token_lexeme, token_location)
    }
    if next_char == '\'' {
        return self.scan_character_token(token_lexeme, token_location)
    }
    if next_char == '"' {
        return self.scan_string_token(token_lexeme, token_location)
    }
    if next_char == '\\' {
        return self.scan_comment_token(token_lexeme, token_location)
    }
    if next_char.is_space() {
        return self.scan_space_token(token_lexeme, token_location)
    }
    if next_char == '\n' {
        self.next_char()
        return make @End_Of_Line_Token(lexeme = token_lexeme, location = token_location)
    }
    if next_char == '\0' {
        self.next_char()
        return make @End_Of_File_Token(lexeme = token_lexeme, location = token_location)
    }
    token_lexeme.append(self.next_char())
    return make @Other_Token(lexeme = token_lexeme, location = token_location)
}

func is_digit(char: u8) -> bool {
    return char >= '0' and char <= '9'
}

func is_identifier_start(char: u8) -> bool {
    return char.is_letter() or char == '_'
}

func is_identifier_body(char: u8) -> bool {
    if char.is_identifier_start() {
        return true
    }
    return char.is_digit()
}

func is_letter(char: u8) -> bool {
    return (char >= 'a' and char <= 'z') or (char >= 'A' and char <= 'Z')
}

func is_space(char: u8) -> bool {
    return char == ' '
}

func scan_character_token(self: @Scanner, token_lexeme: @String, token_location: @Source_Location) -> @Token {
    if self.peek_char() != '\'' {
        abort("Invalid state")
    }

    let value: u8
    token_lexeme.append(self.next_char())
    let char = self.next_char()
    token_lexeme.append(char)
    if char == '\'' {
        return make @Error_Token(lexeme = token_lexeme, location = token_location)
    }
    if char == '\\' {
        char = self.next_char()
        token_lexeme.append(char)
        if not char.is_escape() {
            return make @Error_Token(lexeme = token_lexeme, location = token_location)
        }
        if char == 'n' {
            value = '\n'
        } else if char == '\"' {
            value = char
        } else if char == '\'' {
            value = char
        } else if char == '\\' {
            value = char
        } else if char == 't' {
            value = '\t'
        } else if char == '0' {
            value = '\0'
        } else {
            abort("Invalid state")
        }
        char = self.next_char()
        token_lexeme.append(char)
        if char != '\'' {
            return make @Error_Token(lexeme = token_lexeme, location = token_location)
        }
    } else {
        if char == '\0' or char == '\n' or char == '\t' {
            return make @Error_Token(lexeme = token_lexeme, location = token_location)
        }
        value = char
        char = self.next_char()
        token_lexeme.append(char)
        if char != '\'' {
            return make @Error_Token(lexeme = token_lexeme, location = token_location)
        }
    }
    return make @Character_Token(lexeme = token_lexeme, location = token_location, value = value)
}

func is_escape(char: u8) -> bool {
    return char == 'n' or char == 't' or char == '\"' or char == '\'' or char == '\\' or char == '0'
}

func scan_comment_token(self: @Scanner, token_lexeme: @String, token_location: @Source_Location) -> @Token {
    while self.peek_char() != '\n' {
        token_lexeme.append(self.next_char())
    }
    return make @Comment_Token(lexeme = token_lexeme, location = token_location)
}

func scan_identifier_token(self: @Scanner, token_lexeme: @String, token_location: @Source_Location) -> @Token {
    while self.peek_char().is_identifier_body() {
        token_lexeme.append(self.next_char())
    }
    if token_lexeme.equals("false") {
        return make @Boolean_Token(lexeme = token_lexeme, location = token_location, value = false)
    }
    if token_lexeme.equals("null") {
        return make @Null_Token(lexeme = token_lexeme, location = token_location)
    }
    if token_lexeme.equals("true") {
        return make @Boolean_Token(lexeme = token_lexeme, location = token_location, value = true)
    }
    if token_lexeme.equals("undefined") {
        return make @Undefined_Token(lexeme = token_lexeme, location = token_location)
    }
    return make @Identifier_Token(lexeme = token_lexeme, location = token_location)
}

func scan_integer_token(self: @Scanner, token_lexeme: @String, token_location: @Source_Location) -> @Token {
    let char = self.next_char()
    token_lexeme.append(char)
    let value = (char - '0').as(u64)
    char = self.peek_char()
    if value == 0 and char == 'x' {
        token_lexeme.append(self.next_char())
        loop {
            let old_value = value
            char = self.peek_char()
            if char.is_digit() {
                value = value * 16 + (char - '0').as(u64)
            } else if char >= 'A' and char <= 'F' {
                value = value * 16 + (char - 'A').as(u64) + 10
            } else if char >= 'a' and char <= 'f' {
                value = value * 16 + (char - 'a').as(u64) + 10
            } else if char != '_' {
                break
            }
            if old_value > value {
                abort(token_location, "Integer literal is too large")
            }
            token_lexeme.append(self.next_char())
        }
    } else {
        loop {
            char = self.peek_char()
            if char.is_digit() {
                let old_value = value
                value = value * 10 + (char - '0').as(u64)
                if old_value > value {
                    abort(token_location, "Integer literal is too large")
                }
            } else if char != '_' {
                break
            }
            token_lexeme.append(self.next_char())
        }
    }
    if self.peek_char() == 'i' or self.peek_char() == 'u' {
        let type = make @String()
        loop {
            char = self.peek_char()
            if not char.is_digit() and not char.is_letter() {
                break
            }
            token_lexeme.append(char)
            type.append(char)
            self.next_char()
        }
        if type.equals("i16") or type.equals("i32") or type.equals("i64") or type.equals("i8") or type.equals("isize") or type.equals("u16") or type.equals("u32") or type.equals("u64") or type.equals("u8") or type.equals("usize") {
            return make @Integer_Token(lexeme = token_lexeme, location = token_location, value = value, negative = false, type = type)
        }
        return make @Error_Token(lexeme = token_lexeme, location = token_location)
    }
    return make @Integer_Token(lexeme = token_lexeme, location = token_location, value = value, negative = false, type = null)
}

func scan_space_token(self: @Scanner, token_lexeme: @String, token_location: @Source_Location) -> @Token {
    let count = 0
    while self.peek_char() == ' ' {
        let char = self.next_char()
        count = count + 1
        token_lexeme.append(char)
    }
    return make @Space_Token(lexeme = token_lexeme, location = token_location, count = count)
}

func scan_string_token(self: @Scanner, token_lexeme: @String, token_location: @Source_Location) -> @Token {
    if self.peek_char() != '"' {
        abort("Invalid state")
    }

    let value = make @String()

    token_lexeme.append(self.next_char())
    loop {
        let char = self.peek_char()
        if char == '\0' or char == '\n' {
            return make @Error_Token(lexeme = token_lexeme, location = token_location)
        }
        char = self.next_char()
        token_lexeme.append(char)
        if char == '"' {
            return make @String_Token(lexeme = token_lexeme, location = token_location, value = value)
        }
        if char == '\\' {
            char = self.peek_char()
            if char == '\0' or char == '\n' {
                return make @Error_Token(lexeme = token_lexeme, location = token_location)
            }
            char = self.next_char()
            token_lexeme.append(char)
            if not char.is_escape() {
                return make @Error_Token(lexeme = token_lexeme, location = token_location)
            }
            if char == 'n' {
                value.append('\n')
            } else if char == '\"' {
                value.append(char)
            } else if char == '\'' {
                value.append(char)
            } else if char == '\\' {
                value.append(char)
            } else if char == 't' {
                value.append('\t')
            } else if char == '0' {
                value.append('\0')
            } else {
                abort("Invalid state")
            }
        } else {
            value.append(char)
        }
    }
}
