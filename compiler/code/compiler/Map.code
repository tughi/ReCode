\ Copyright (c) 2021, Stefan Selariu

define Map = struct [K, V] {
    first_entry: Map_Entry[K, V] = null
    last_entry: Map_Entry[K, V] = null
}

define Map_Entry = struct [K, V] {
    key: K
    value: V
    prev_entry: Map_Entry[K, V] = null
    next_entry: Map_Entry[K, V] = null
}

define get = func [K, V] (self: Map[K, V], key: K) -> V {
    let entry = self.first_entry
    while (entry != null) {
        if (entry.key == key) {
            return entry.value
        }
        entry = entry.next_entry
    }
    return null
}

define put = func [K, V] (self: Map[K, V], key: K, value: V) -> V {
    let entry = self.first_entry
    while (entry != null) {
        if (entry.key == key) {
            let old_value = entry.value
            entry.value = value
            return old_value
        }
        entry = entry.next_entry
    }
    entry = new Map_Entry[K, V](key = key, value = value, prev_entry = self.last_entry)
    if (self.last_entry == null) {
        self.first_entry = entry
    } else {
        self.last_entry.next_entry = entry
    }
    self.last_entry = entry
    return null
}

define remove = func [K, V] (self: Map[K, V], key: K) -> V {
    let entry = self.first_entry
    while (entry != null) {
        if (entry.key == key) {
            return self.unlink(entry).value
        }
        entry = entry.next_entry
    }
    return null
}

define remove_values = func [K, V] (self: Map[K, V], value: V) -> Nothing {
    let entry = self.first_entry
    while (entry != null) {
        if (entry.value == value) {
            self.unlink(entry)
        }
        entry = entry.next_entry
    }
}

define unlink = func [K, V] (self: Map[K, V], entry: Map_Entry[K, V]) -> Map_Entry[K, V] {
    if (entry.prev_entry != null) {
        entry.prev_entry.next_entry = entry.next_entry
    } else {
        self.first_entry = entry.next_entry
    }
    if (entry.next_entry != null) {
        entry.next_entry.prev_entry = entry.prev_entry
    } else {
        self.last_entry = entry.prev_entry
    }
    return entry
}

define replace_values = func [K, V] (self: Map[K, V], old_value: V, new_value: V) -> Nothing {
    let entry = self.first_entry
    while (entry != null) {
        if (entry.value == old_value) {
            entry.value = new_value
        }
        entry = entry.next_entry
    }
}
